
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	000015c7 	.word	0x000015c7
  10:	000015c9 	.word	0x000015c9
  14:	000015cb 	.word	0x000015cb
  18:	000015cd 	.word	0x000015cd
	...
  2c:	000015cf 	.word	0x000015cf
  30:	000015d1 	.word	0x000015d1
  34:	00000000 	.word	0x00000000
  38:	000015d3 	.word	0x000015d3
  3c:	000015d5 	.word	0x000015d5
  40:	000015d7 	.word	0x000015d7
  44:	000015d7 	.word	0x000015d7
  48:	000015d7 	.word	0x000015d7
  4c:	000015d7 	.word	0x000015d7
  50:	000015d7 	.word	0x000015d7
  54:	000015d7 	.word	0x000015d7
  58:	000015d7 	.word	0x000015d7
  5c:	000015d7 	.word	0x000015d7
  60:	000015d7 	.word	0x000015d7
  64:	000015d7 	.word	0x000015d7
  68:	000015d7 	.word	0x000015d7
  6c:	000015d7 	.word	0x000015d7
  70:	000015d7 	.word	0x000015d7
  74:	000015d7 	.word	0x000015d7
  78:	000015d7 	.word	0x000015d7
  7c:	000015d7 	.word	0x000015d7
  80:	000015d7 	.word	0x000015d7
  84:	000015d7 	.word	0x000015d7
  88:	000015d7 	.word	0x000015d7
  8c:	000015d7 	.word	0x000015d7
  90:	000015d7 	.word	0x000015d7
  94:	000015d7 	.word	0x000015d7
  98:	000015d7 	.word	0x000015d7
  9c:	000015d7 	.word	0x000015d7
  a0:	000015d7 	.word	0x000015d7
  a4:	000015d7 	.word	0x000015d7
  a8:	000015d7 	.word	0x000015d7
  ac:	000015d7 	.word	0x000015d7
  b0:	000015d7 	.word	0x000015d7
  b4:	000015d7 	.word	0x000015d7
  b8:	000015d7 	.word	0x000015d7
  bc:	000015d7 	.word	0x000015d7
  c0:	000015d7 	.word	0x000015d7
  c4:	000015d7 	.word	0x000015d7
  c8:	000015d7 	.word	0x000015d7
  cc:	000015d7 	.word	0x000015d7
  d0:	000015d7 	.word	0x000015d7
  d4:	000015d7 	.word	0x000015d7
  d8:	000015d7 	.word	0x000015d7
  dc:	000015d7 	.word	0x000015d7
  e0:	000015d7 	.word	0x000015d7
  e4:	000015d7 	.word	0x000015d7
  e8:	000015d7 	.word	0x000015d7
  ec:	000015d7 	.word	0x000015d7
  f0:	000015d7 	.word	0x000015d7
  f4:	000015d7 	.word	0x000015d7
  f8:	000015d7 	.word	0x000015d7
  fc:	000015d7 	.word	0x000015d7
 100:	000015d7 	.word	0x000015d7
 104:	000015d7 	.word	0x000015d7
 108:	000015d7 	.word	0x000015d7
 10c:	000015d7 	.word	0x000015d7
 110:	000015d7 	.word	0x000015d7
 114:	000015d7 	.word	0x000015d7
 118:	000015d7 	.word	0x000015d7
 11c:	000015d7 	.word	0x000015d7
 120:	000015d7 	.word	0x000015d7
 124:	000015d7 	.word	0x000015d7
 128:	000015d7 	.word	0x000015d7
 12c:	000015d7 	.word	0x000015d7
 130:	000015d7 	.word	0x000015d7
 134:	000015d7 	.word	0x000015d7
 138:	000015d7 	.word	0x000015d7
 13c:	000015d7 	.word	0x000015d7
 140:	000015d7 	.word	0x000015d7
 144:	000015d7 	.word	0x000015d7
 148:	000015d7 	.word	0x000015d7
 14c:	000015d7 	.word	0x000015d7
 150:	000015d7 	.word	0x000015d7
 154:	000015d7 	.word	0x000015d7
 158:	000015d7 	.word	0x000015d7
 15c:	000015d7 	.word	0x000015d7
 160:	000015d7 	.word	0x000015d7
 164:	000015d7 	.word	0x000015d7
 168:	000015d7 	.word	0x000015d7
 16c:	000015d7 	.word	0x000015d7
 170:	000015d7 	.word	0x000015d7
 174:	000015d7 	.word	0x000015d7
 178:	000015d7 	.word	0x000015d7
 17c:	000015d7 	.word	0x000015d7
 180:	000015d7 	.word	0x000015d7
 184:	000015d7 	.word	0x000015d7
 188:	000015d7 	.word	0x000015d7
 18c:	000015d7 	.word	0x000015d7
 190:	000015d7 	.word	0x000015d7
 194:	000015d7 	.word	0x000015d7
 198:	000015d7 	.word	0x000015d7
 19c:	000015d7 	.word	0x000015d7
 1a0:	000015d7 	.word	0x000015d7
 1a4:	000015d7 	.word	0x000015d7
 1a8:	000015d7 	.word	0x000015d7
 1ac:	000015d7 	.word	0x000015d7
 1b0:	000015d7 	.word	0x000015d7
 1b4:	000015d7 	.word	0x000015d7
 1b8:	000015d7 	.word	0x000015d7
 1bc:	000015d7 	.word	0x000015d7
 1c0:	000015d7 	.word	0x000015d7
 1c4:	000015d7 	.word	0x000015d7
 1c8:	000015d7 	.word	0x000015d7
 1cc:	000015d7 	.word	0x000015d7
 1d0:	000015d7 	.word	0x000015d7
 1d4:	000015d7 	.word	0x000015d7
 1d8:	000015d7 	.word	0x000015d7
 1dc:	000015d7 	.word	0x000015d7
 1e0:	000015d7 	.word	0x000015d7
 1e4:	000015d7 	.word	0x000015d7
 1e8:	000015d7 	.word	0x000015d7
 1ec:	000015d7 	.word	0x000015d7
 1f0:	000015d7 	.word	0x000015d7
 1f4:	000015d7 	.word	0x000015d7
 1f8:	000015d7 	.word	0x000015d7
 1fc:	000015d7 	.word	0x000015d7
 200:	000015d7 	.word	0x000015d7
 204:	000015d7 	.word	0x000015d7
 208:	000015d7 	.word	0x000015d7
 20c:	000015d7 	.word	0x000015d7
 210:	000015d7 	.word	0x000015d7
 214:	000015d7 	.word	0x000015d7
 218:	000015d7 	.word	0x000015d7
 21c:	000015d7 	.word	0x000015d7
 220:	000015d7 	.word	0x000015d7
 224:	000015d7 	.word	0x000015d7
 228:	000015d7 	.word	0x000015d7
 22c:	000015d7 	.word	0x000015d7
 230:	000015d7 	.word	0x000015d7
 234:	000015d7 	.word	0x000015d7
 238:	000015d7 	.word	0x000015d7
 23c:	000015d7 	.word	0x000015d7
 240:	000015d7 	.word	0x000015d7
 244:	000015d7 	.word	0x000015d7
 248:	000015d7 	.word	0x000015d7
 24c:	000015d7 	.word	0x000015d7
 250:	000015d7 	.word	0x000015d7
 254:	000015d7 	.word	0x000015d7
 258:	000015d7 	.word	0x000015d7
 25c:	000015d7 	.word	0x000015d7
 260:	000015d7 	.word	0x000015d7
 264:	000015d7 	.word	0x000015d7
 268:	000015d7 	.word	0x000015d7
 26c:	000015d7 	.word	0x000015d7
 270:	000015d7 	.word	0x000015d7
 274:	000015d7 	.word	0x000015d7
 278:	000015d7 	.word	0x000015d7
 27c:	000015d7 	.word	0x000015d7
 280:	000015d7 	.word	0x000015d7
 284:	000015d7 	.word	0x000015d7
 288:	000015d7 	.word	0x000015d7
 28c:	000015d7 	.word	0x000015d7
 290:	000015d7 	.word	0x000015d7
 294:	000015d7 	.word	0x000015d7
 298:	000015d7 	.word	0x000015d7
 29c:	000015d7 	.word	0x000015d7
 2a0:	000015d7 	.word	0x000015d7
 2a4:	000015d7 	.word	0x000015d7
 2a8:	000015d7 	.word	0x000015d7
 2ac:	000015d7 	.word	0x000015d7
 2b0:	000015d7 	.word	0x000015d7
 2b4:	000015d7 	.word	0x000015d7
 2b8:	000015d7 	.word	0x000015d7
 2bc:	000015d7 	.word	0x000015d7
 2c0:	000015d7 	.word	0x000015d7
 2c4:	000015d7 	.word	0x000015d7
 2c8:	000015d7 	.word	0x000015d7
 2cc:	000015d7 	.word	0x000015d7
 2d0:	000015d7 	.word	0x000015d7
 2d4:	000015d7 	.word	0x000015d7
 2d8:	000015d7 	.word	0x000015d7
 2dc:	000015d7 	.word	0x000015d7
 2e0:	000015d7 	.word	0x000015d7
 2e4:	000015d7 	.word	0x000015d7
 2e8:	000015d7 	.word	0x000015d7
 2ec:	000015d7 	.word	0x000015d7
 2f0:	000015d7 	.word	0x000015d7
 2f4:	000015d7 	.word	0x000015d7
 2f8:	000015d7 	.word	0x000015d7
 2fc:	000015d7 	.word	0x000015d7
 300:	000015d7 	.word	0x000015d7
 304:	000015d7 	.word	0x000015d7
 308:	000015d7 	.word	0x000015d7
 30c:	000015d7 	.word	0x000015d7

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 ffd7 	bl	1434 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 f896 	bl	15bc <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e58 	.word	0x1fff8e58

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 ffe1 	bl	1560 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}

    EcuM_Init();    //MCU configuration.
     8b2:	f000 fe9f 	bl	15f4 <EcuM_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure for scheduler.
     8b6:	4803      	ldr	r0, [pc, #12]	; (8c4 <main+0x14>)
     8b8:	f000 fb6c 	bl	f94 <Scheduler_Init>

    while( 1u ) {
        Scheduler_MainFunction();
     8bc:	f000 fcf6 	bl	12ac <Scheduler_MainFunction>
     8c0:	e7fc      	b.n	8bc <main+0xc>
     8c2:	bf00      	nop
     8c4:	1fff8e18 	.word	0x1fff8e18

000008c8 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     8c8:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ca:	f3ef 8310 	mrs	r3, PRIMASK
     8ce:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8d0:	4623      	mov	r3, r4
}
     8d2:	4618      	mov	r0, r3
     8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
     8d8:	4770      	bx	lr

000008da <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     8da:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8dc:	f3ef 8310 	mrs	r3, PRIMASK
     8e0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8e2:	4623      	mov	r3, r4
}
     8e4:	4618      	mov	r0, r3
     8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
     8ea:	4770      	bx	lr

000008ec <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     8ec:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ee:	f3ef 8310 	mrs	r3, PRIMASK
     8f2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8f4:	4623      	mov	r3, r4
}
     8f6:	4618      	mov	r0, r3
     8f8:	f85d 4b04 	ldr.w	r4, [sp], #4
     8fc:	4770      	bx	lr

000008fe <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     8fe:	b508      	push	{r3, lr}
    DoubleClick_stMachine();
     900:	f000 fe86 	bl	1610 <DoubleClick_stMachine>
}
     904:	bf00      	nop
     906:	bd08      	pop	{r3, pc}

00000908 <Task2_callback>:
 * @brief This is the callback function for the task 2.
 *
 * This function is called every 100ms and reads the messagges from the queue
 * in order to toggle the leds according to the btn and its corresponding click detected.
 */
void Task2_callback( void ) {
     908:	b500      	push	{lr}
     90a:	b083      	sub	sp, #12
    //local data.
    uint8 i = 0;
     90c:	2300      	movs	r3, #0
     90e:	f88d 3007 	strb.w	r3, [sp, #7]
    QueueMessage Message_read;

    //Reading the queue if there are messages availables.
    for ( i = 0; i < 3; i++ ) { //Checking each button and its click detected.
     912:	2300      	movs	r3, #0
     914:	f88d 3007 	strb.w	r3, [sp, #7]
     918:	e072      	b.n	a00 <Task2_callback+0xf8>
        if ( Scheduler_GetStatusQueue( SCHEDULER_QUEUE1_ID, SCHEDULER_QUEUE_EMPTY_STATUS ) == FALSE ) {
     91a:	2101      	movs	r1, #1
     91c:	2001      	movs	r0, #1
     91e:	f000 f94d 	bl	bbc <Scheduler_GetStatusQueue>
     922:	4603      	mov	r3, r0
     924:	2b00      	cmp	r3, #0
     926:	d163      	bne.n	9f0 <Task2_callback+0xe8>
            Scheduler_ReadQueue( SCHEDULER_QUEUE1_ID, &Message_read );
     928:	ab01      	add	r3, sp, #4
     92a:	4619      	mov	r1, r3
     92c:	2001      	movs	r0, #1
     92e:	f000 fa5d 	bl	dec <Scheduler_ReadQueue>

            switch ( Message_read.Button ) {    
     932:	f89d 3004 	ldrb.w	r3, [sp, #4]
     936:	2b02      	cmp	r3, #2
     938:	d03e      	beq.n	9b8 <Task2_callback+0xb0>
     93a:	2b02      	cmp	r3, #2
     93c:	dc5a      	bgt.n	9f4 <Task2_callback+0xec>
     93e:	2b00      	cmp	r3, #0
     940:	d002      	beq.n	948 <Task2_callback+0x40>
     942:	2b01      	cmp	r3, #1
     944:	d01c      	beq.n	980 <Task2_callback+0x78>
                            break;
                        }
                break;

                default:    //Invalid button.
                break;
     946:	e055      	b.n	9f4 <Task2_callback+0xec>
                    switch ( Message_read.Click ) {
     948:	f89d 3005 	ldrb.w	r3, [sp, #5]
     94c:	2b02      	cmp	r3, #2
     94e:	d00e      	beq.n	96e <Task2_callback+0x66>
     950:	2b02      	cmp	r3, #2
     952:	dc13      	bgt.n	97c <Task2_callback+0x74>
     954:	2b00      	cmp	r3, #0
     956:	d002      	beq.n	95e <Task2_callback+0x56>
     958:	2b01      	cmp	r3, #1
     95a:	d004      	beq.n	966 <Task2_callback+0x5e>
                        break;
     95c:	e00e      	b.n	97c <Task2_callback+0x74>
                            Dio_FlipChannel( DioConf_DioChannel_PTC8 );
     95e:	2048      	movs	r0, #72	; 0x48
     960:	f005 fe8f 	bl	6682 <Dio_FlipChannel>
                        break;
     964:	e00b      	b.n	97e <Task2_callback+0x76>
                            Dio_FlipChannel( DioConf_DioChannel_PTC9 );
     966:	2049      	movs	r0, #73	; 0x49
     968:	f005 fe8b 	bl	6682 <Dio_FlipChannel>
                        break;
     96c:	e007      	b.n	97e <Task2_callback+0x76>
                            Dio_FlipChannel( DioConf_DioChannel_PTC8 );
     96e:	2048      	movs	r0, #72	; 0x48
     970:	f005 fe87 	bl	6682 <Dio_FlipChannel>
                            Dio_FlipChannel( DioConf_DioChannel_PTC9 );
     974:	2049      	movs	r0, #73	; 0x49
     976:	f005 fe84 	bl	6682 <Dio_FlipChannel>
                        break;
     97a:	e000      	b.n	97e <Task2_callback+0x76>
                        break;
     97c:	bf00      	nop
                break;
     97e:	e03a      	b.n	9f6 <Task2_callback+0xee>
                    switch ( Message_read.Click ) {
     980:	f89d 3005 	ldrb.w	r3, [sp, #5]
     984:	2b02      	cmp	r3, #2
     986:	d00e      	beq.n	9a6 <Task2_callback+0x9e>
     988:	2b02      	cmp	r3, #2
     98a:	dc13      	bgt.n	9b4 <Task2_callback+0xac>
     98c:	2b00      	cmp	r3, #0
     98e:	d002      	beq.n	996 <Task2_callback+0x8e>
     990:	2b01      	cmp	r3, #1
     992:	d004      	beq.n	99e <Task2_callback+0x96>
                        break;
     994:	e00e      	b.n	9b4 <Task2_callback+0xac>
                            Dio_FlipChannel( DioConf_DioChannel_PTC10 );
     996:	204a      	movs	r0, #74	; 0x4a
     998:	f005 fe73 	bl	6682 <Dio_FlipChannel>
                        break;
     99c:	e00b      	b.n	9b6 <Task2_callback+0xae>
                            Dio_FlipChannel( DioConf_DioChannel_PTC11 );
     99e:	204b      	movs	r0, #75	; 0x4b
     9a0:	f005 fe6f 	bl	6682 <Dio_FlipChannel>
                        break;
     9a4:	e007      	b.n	9b6 <Task2_callback+0xae>
                            Dio_FlipChannel( DioConf_DioChannel_PTC10 );
     9a6:	204a      	movs	r0, #74	; 0x4a
     9a8:	f005 fe6b 	bl	6682 <Dio_FlipChannel>
                            Dio_FlipChannel( DioConf_DioChannel_PTC11 );
     9ac:	204b      	movs	r0, #75	; 0x4b
     9ae:	f005 fe68 	bl	6682 <Dio_FlipChannel>
                        break;
     9b2:	e000      	b.n	9b6 <Task2_callback+0xae>
                        break;
     9b4:	bf00      	nop
                break;
     9b6:	e01e      	b.n	9f6 <Task2_callback+0xee>
                        switch ( Message_read.Click ) {
     9b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
     9bc:	2b02      	cmp	r3, #2
     9be:	d00e      	beq.n	9de <Task2_callback+0xd6>
     9c0:	2b02      	cmp	r3, #2
     9c2:	dc13      	bgt.n	9ec <Task2_callback+0xe4>
     9c4:	2b00      	cmp	r3, #0
     9c6:	d002      	beq.n	9ce <Task2_callback+0xc6>
     9c8:	2b01      	cmp	r3, #1
     9ca:	d004      	beq.n	9d6 <Task2_callback+0xce>
                            break;
     9cc:	e00e      	b.n	9ec <Task2_callback+0xe4>
                                Dio_FlipChannel( DioConf_DioChannel_PTC13 );
     9ce:	204d      	movs	r0, #77	; 0x4d
     9d0:	f005 fe57 	bl	6682 <Dio_FlipChannel>
                            break;
     9d4:	e00b      	b.n	9ee <Task2_callback+0xe6>
                                Dio_FlipChannel( DioConf_DioChannel_PTC14 );
     9d6:	204e      	movs	r0, #78	; 0x4e
     9d8:	f005 fe53 	bl	6682 <Dio_FlipChannel>
                            break;
     9dc:	e007      	b.n	9ee <Task2_callback+0xe6>
                                Dio_FlipChannel( DioConf_DioChannel_PTC13 );
     9de:	204d      	movs	r0, #77	; 0x4d
     9e0:	f005 fe4f 	bl	6682 <Dio_FlipChannel>
                                Dio_FlipChannel( DioConf_DioChannel_PTC14 );
     9e4:	204e      	movs	r0, #78	; 0x4e
     9e6:	f005 fe4c 	bl	6682 <Dio_FlipChannel>
                            break;
     9ea:	e000      	b.n	9ee <Task2_callback+0xe6>
                            break;
     9ec:	bf00      	nop
                break;
     9ee:	e002      	b.n	9f6 <Task2_callback+0xee>
            }
        }
     9f0:	bf00      	nop
     9f2:	e000      	b.n	9f6 <Task2_callback+0xee>
                break;
     9f4:	bf00      	nop
    for ( i = 0; i < 3; i++ ) { //Checking each button and its click detected.
     9f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     9fa:	3301      	adds	r3, #1
     9fc:	f88d 3007 	strb.w	r3, [sp, #7]
     a00:	f89d 3007 	ldrb.w	r3, [sp, #7]
     a04:	2b02      	cmp	r3, #2
     a06:	d988      	bls.n	91a <Task2_callback+0x12>
    }
}
     a08:	bf00      	nop
     a0a:	bf00      	nop
     a0c:	b003      	add	sp, #12
     a0e:	f85d fb04 	ldr.w	pc, [sp], #4

00000a12 <Timer1_callback>:
 * @brief This is the callback function for the timer 1.
 *
 * This function is called when the timer counts to 300ms. 
 * This is for detecting the timeout for the button 1 in the state machine.
 */
void Timer1_callback( void ) {    
     a12:	b508      	push	{r3, lr}
    Scheduler_StopTimer( SCHEDULER_TIMER1_ID );    //Stoping timer.
     a14:	2001      	movs	r0, #1
     a16:	f000 fba1 	bl	115c <Scheduler_StopTimer>
}
     a1a:	bf00      	nop
     a1c:	bd08      	pop	{r3, pc}

00000a1e <Timer2_callback>:
 * @brief This is the callback function for the timer 2.
 *
 * This function is called when the timer counts to 300ms. 
 * This is for detecting the timeout for the button 2 in the state machine.
 */
void Timer2_callback( void ) {    
     a1e:	b508      	push	{r3, lr}
    Scheduler_StopTimer( SCHEDULER_TIMER2_ID );    //Stoping timer.
     a20:	2002      	movs	r0, #2
     a22:	f000 fb9b 	bl	115c <Scheduler_StopTimer>
}
     a26:	bf00      	nop
     a28:	bd08      	pop	{r3, pc}

00000a2a <Timer3_callback>:
 * @brief This is the callback function for the timer 3.
 *
 * This function is called when the timer counts to 300ms. 
 * This is for detecting the timeout for the button 3 in the state machine.
 */
void Timer3_callback( void ) {    
     a2a:	b508      	push	{r3, lr}
    Scheduler_StopTimer( SCHEDULER_TIMER3_ID );    //Stoping timer.
     a2c:	2003      	movs	r0, #3
     a2e:	f000 fb95 	bl	115c <Scheduler_StopTimer>
     a32:	bf00      	nop
     a34:	bd08      	pop	{r3, pc}

00000a36 <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     a36:	b082      	sub	sp, #8
     a38:	9001      	str	r0, [sp, #4]
     a3a:	460b      	mov	r3, r1
     a3c:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     a40:	9b01      	ldr	r3, [sp, #4]
     a42:	681b      	ldr	r3, [r3, #0]
     a44:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a48:	2101      	movs	r1, #1
     a4a:	fa01 f202 	lsl.w	r2, r1, r2
     a4e:	431a      	orrs	r2, r3
     a50:	9b01      	ldr	r3, [sp, #4]
     a52:	601a      	str	r2, [r3, #0]
}
     a54:	bf00      	nop
     a56:	b002      	add	sp, #8
     a58:	4770      	bx	lr

00000a5a <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     a5a:	b082      	sub	sp, #8
     a5c:	9001      	str	r0, [sp, #4]
     a5e:	460b      	mov	r3, r1
     a60:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     a64:	9b01      	ldr	r3, [sp, #4]
     a66:	681b      	ldr	r3, [r3, #0]
     a68:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a6c:	2101      	movs	r1, #1
     a6e:	fa01 f202 	lsl.w	r2, r1, r2
     a72:	43d2      	mvns	r2, r2
     a74:	401a      	ands	r2, r3
     a76:	9b01      	ldr	r3, [sp, #4]
     a78:	601a      	str	r2, [r3, #0]
}
     a7a:	bf00      	nop
     a7c:	b002      	add	sp, #8
     a7e:	4770      	bx	lr

00000a80 <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     a80:	b084      	sub	sp, #16
     a82:	9001      	str	r0, [sp, #4]
     a84:	460b      	mov	r3, r1
     a86:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     a8a:	2300      	movs	r3, #0
     a8c:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     a90:	f89d 3003 	ldrb.w	r3, [sp, #3]
     a94:	2201      	movs	r2, #1
     a96:	fa02 f303 	lsl.w	r3, r2, r3
     a9a:	461a      	mov	r2, r3
     a9c:	9b01      	ldr	r3, [sp, #4]
     a9e:	4013      	ands	r3, r2
     aa0:	2b00      	cmp	r3, #0
     aa2:	bf14      	ite	ne
     aa4:	2301      	movne	r3, #1
     aa6:	2300      	moveq	r3, #0
     aa8:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     aac:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     ab0:	4618      	mov	r0, r3
     ab2:	b004      	add	sp, #16
     ab4:	4770      	bx	lr

00000ab6 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     ab6:	b082      	sub	sp, #8
     ab8:	9001      	str	r0, [sp, #4]
     aba:	460b      	mov	r3, r1
     abc:	f88d 3003 	strb.w	r3, [sp, #3]
     ac0:	4613      	mov	r3, r2
     ac2:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     ac6:	f89d 3002 	ldrb.w	r3, [sp, #2]
     aca:	2b00      	cmp	r3, #0
     acc:	d00a      	beq.n	ae4 <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     ace:	9b01      	ldr	r3, [sp, #4]
     ad0:	681b      	ldr	r3, [r3, #0]
     ad2:	f89d 2003 	ldrb.w	r2, [sp, #3]
     ad6:	2101      	movs	r1, #1
     ad8:	fa01 f202 	lsl.w	r2, r1, r2
     adc:	431a      	orrs	r2, r3
     ade:	9b01      	ldr	r3, [sp, #4]
     ae0:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     ae2:	e00a      	b.n	afa <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     ae4:	9b01      	ldr	r3, [sp, #4]
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	f89d 2003 	ldrb.w	r2, [sp, #3]
     aec:	2101      	movs	r1, #1
     aee:	fa01 f202 	lsl.w	r2, r1, r2
     af2:	43d2      	mvns	r2, r2
     af4:	401a      	ands	r2, r3
     af6:	9b01      	ldr	r3, [sp, #4]
     af8:	601a      	str	r2, [r3, #0]
}
     afa:	bf00      	nop
     afc:	b002      	add	sp, #8
     afe:	4770      	bx	lr

00000b00 <MemCopy>:
 * 
 * @param Dest Void pointer to destiny, destiny base memory address.
 * @param Src Void pointer to source, source base memory address.
 * @param Size Number of bytes to copy and paste.
 */
void MemCopy( void *Dest, void *Src, uint32 Size ) {
     b00:	b088      	sub	sp, #32
     b02:	9003      	str	r0, [sp, #12]
     b04:	9102      	str	r1, [sp, #8]
     b06:	9201      	str	r2, [sp, #4]
    //local data.
    uint8 i = 0;
     b08:	2300      	movs	r3, #0
     b0a:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 *Ptr_dest = Dest; //Byte ptr in destiny base memory address.
     b0e:	9b03      	ldr	r3, [sp, #12]
     b10:	9306      	str	r3, [sp, #24]
    uint8 *Ptr_src = Src;   //Byte ptr in source base memory address.
     b12:	9b02      	ldr	r3, [sp, #8]
     b14:	9305      	str	r3, [sp, #20]

    //Copying and pasting byte by byte.
    for ( i = 0; i < Size; i++ ) {
     b16:	2300      	movs	r3, #0
     b18:	f88d 301f 	strb.w	r3, [sp, #31]
     b1c:	e00e      	b.n	b3c <MemCopy+0x3c>
        *( Ptr_dest + i ) = *( Ptr_src + i );
     b1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
     b22:	9a05      	ldr	r2, [sp, #20]
     b24:	441a      	add	r2, r3
     b26:	f89d 301f 	ldrb.w	r3, [sp, #31]
     b2a:	9906      	ldr	r1, [sp, #24]
     b2c:	440b      	add	r3, r1
     b2e:	7812      	ldrb	r2, [r2, #0]
     b30:	701a      	strb	r2, [r3, #0]
    for ( i = 0; i < Size; i++ ) {
     b32:	f89d 301f 	ldrb.w	r3, [sp, #31]
     b36:	3301      	adds	r3, #1
     b38:	f88d 301f 	strb.w	r3, [sp, #31]
     b3c:	f89d 301f 	ldrb.w	r3, [sp, #31]
     b40:	9a01      	ldr	r2, [sp, #4]
     b42:	429a      	cmp	r2, r3
     b44:	d8eb      	bhi.n	b1e <MemCopy+0x1e>
    }
}
     b46:	bf00      	nop
     b48:	bf00      	nop
     b4a:	b008      	add	sp, #32
     b4c:	4770      	bx	lr

00000b4e <Scheduler_InitQueue>:
/**
 * @brief This function initialices the queue buffer control members.
 * 
 * @param SchedulerPtr Ptr to control struct instance, it allows the init of the members.
 */
void Scheduler_InitQueue( Scheduler_CtrlType *SchedulerPtr ) {
     b4e:	b500      	push	{lr}
     b50:	b085      	sub	sp, #20
     b52:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
     b54:	2300      	movs	r3, #0
     b56:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     b5a:	2300      	movs	r3, #0
     b5c:	f88d 300f 	strb.w	r3, [sp, #15]
     b60:	e023      	b.n	baa <Scheduler_InitQueue+0x5c>
        SchedulerPtr->QueueHeads[i] = 0;
     b62:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b66:	9b01      	ldr	r3, [sp, #4]
     b68:	320c      	adds	r2, #12
     b6a:	2100      	movs	r1, #0
     b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->QueueTails[i] = 0;
     b70:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b74:	9a01      	ldr	r2, [sp, #4]
     b76:	330c      	adds	r3, #12
     b78:	009b      	lsls	r3, r3, #2
     b7a:	4413      	add	r3, r2
     b7c:	2200      	movs	r2, #0
     b7e:	605a      	str	r2, [r3, #4]
        Bfx_ClrBit_u32u8( &SchedulerPtr->QueueFulls, i );
     b80:	9b01      	ldr	r3, [sp, #4]
     b82:	333c      	adds	r3, #60	; 0x3c
     b84:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b88:	4611      	mov	r1, r2
     b8a:	4618      	mov	r0, r3
     b8c:	f7ff ff65 	bl	a5a <Bfx_ClrBit_u32u8>
        Bfx_SetBit_u32u8( &SchedulerPtr->QueueEmpties, i );
     b90:	9b01      	ldr	r3, [sp, #4]
     b92:	3338      	adds	r3, #56	; 0x38
     b94:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b98:	4611      	mov	r1, r2
     b9a:	4618      	mov	r0, r3
     b9c:	f7ff ff4b 	bl	a36 <Bfx_SetBit_u32u8>
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     ba0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ba4:	3301      	adds	r3, #1
     ba6:	f88d 300f 	strb.w	r3, [sp, #15]
     baa:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bae:	2b00      	cmp	r3, #0
     bb0:	d0d7      	beq.n	b62 <Scheduler_InitQueue+0x14>
    }
}
     bb2:	bf00      	nop
     bb4:	bf00      	nop
     bb6:	b005      	add	sp, #20
     bb8:	f85d fb04 	ldr.w	pc, [sp], #4

00000bbc <Scheduler_GetStatusQueue>:
 * 
 * @return status Value of the queue flag of interest.
 * 
 * @note The queue ID must be valid.
 */
uint8 Scheduler_GetStatusQueue( QueueType Queue, uint8 Status ) {
     bbc:	b500      	push	{lr}
     bbe:	b085      	sub	sp, #20
     bc0:	4603      	mov	r3, r0
     bc2:	460a      	mov	r2, r1
     bc4:	f88d 3007 	strb.w	r3, [sp, #7]
     bc8:	4613      	mov	r3, r2
     bca:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 status = FALSE;
     bce:	2300      	movs	r3, #0
     bd0:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the ID is valid.
    if ( ( Queue != 0 ) && ( Queue <= SchedulerConfig_Ptr->Queues ) ) { //Valid ID.      
     bd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bd8:	2b00      	cmp	r3, #0
     bda:	d02c      	beq.n	c36 <Scheduler_GetStatusQueue+0x7a>
     bdc:	4b1a      	ldr	r3, [pc, #104]	; (c48 <Scheduler_GetStatusQueue+0x8c>)
     bde:	681b      	ldr	r3, [r3, #0]
     be0:	7d1b      	ldrb	r3, [r3, #20]
     be2:	f89d 2007 	ldrb.w	r2, [sp, #7]
     be6:	429a      	cmp	r2, r3
     be8:	d825      	bhi.n	c36 <Scheduler_GetStatusQueue+0x7a>
        switch ( Status ) { //Checking status flag of interest.
     bea:	f89d 3006 	ldrb.w	r3, [sp, #6]
     bee:	2b01      	cmp	r3, #1
     bf0:	d002      	beq.n	bf8 <Scheduler_GetStatusQueue+0x3c>
     bf2:	2b02      	cmp	r3, #2
     bf4:	d00f      	beq.n	c16 <Scheduler_GetStatusQueue+0x5a>
            break;
            case SCHEDULER_QUEUE_FULL_STATUS:
                status = Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->QueueFulls, Queue - 1 ); 
            break;
            default:    //Invalid Status flag.
            break;
     bf6:	e01d      	b.n	c34 <Scheduler_GetStatusQueue+0x78>
                status = Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->QueueEmpties, Queue - 1 ); 
     bf8:	4b14      	ldr	r3, [pc, #80]	; (c4c <Scheduler_GetStatusQueue+0x90>)
     bfa:	681b      	ldr	r3, [r3, #0]
     bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     bfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c02:	3b01      	subs	r3, #1
     c04:	b2db      	uxtb	r3, r3
     c06:	4619      	mov	r1, r3
     c08:	4610      	mov	r0, r2
     c0a:	f7ff ff39 	bl	a80 <Bfx_GetBit_u32u8_u8>
     c0e:	4603      	mov	r3, r0
     c10:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
     c14:	e00e      	b.n	c34 <Scheduler_GetStatusQueue+0x78>
                status = Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->QueueFulls, Queue - 1 ); 
     c16:	4b0d      	ldr	r3, [pc, #52]	; (c4c <Scheduler_GetStatusQueue+0x90>)
     c18:	681b      	ldr	r3, [r3, #0]
     c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
     c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c20:	3b01      	subs	r3, #1
     c22:	b2db      	uxtb	r3, r3
     c24:	4619      	mov	r1, r3
     c26:	4610      	mov	r0, r2
     c28:	f7ff ff2a 	bl	a80 <Bfx_GetBit_u32u8_u8>
     c2c:	4603      	mov	r3, r0
     c2e:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
     c32:	bf00      	nop
        switch ( Status ) { //Checking status flag of interest.
     c34:	e002      	b.n	c3c <Scheduler_GetStatusQueue+0x80>
        }
    } 
    
    else {
        status = FALSE; //Invalid ID.
     c36:	2300      	movs	r3, #0
     c38:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
     c3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c40:	4618      	mov	r0, r3
     c42:	b005      	add	sp, #20
     c44:	f85d fb04 	ldr.w	pc, [sp], #4
     c48:	1fff8b40 	.word	0x1fff8b40
     c4c:	1fff8b44 	.word	0x1fff8b44

00000c50 <Scheduler_WriteQueue>:
 *
 * @retval status Status of the write operation, write operation was succesfull 1 or not 0.
 * 
 * @note The queue ID must be valid.
*/
Std_ReturnType Scheduler_WriteQueue( QueueType Queue, void *Data ) {
     c50:	b500      	push	{lr}
     c52:	b087      	sub	sp, #28
     c54:	4603      	mov	r3, r0
     c56:	9100      	str	r1, [sp, #0]
     c58:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data
    Std_ReturnType status = FALSE;
     c5c:	2300      	movs	r3, #0
     c5e:	f88d 3017 	strb.w	r3, [sp, #23]

     //Verifying if the ID is valid.
    if ( ( Queue != 0 ) && ( Queue <= SchedulerConfig_Ptr->Queues ) ) { //Valid ID.  
     c62:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c66:	2b00      	cmp	r3, #0
     c68:	f000 80b0 	beq.w	dcc <Scheduler_WriteQueue+0x17c>
     c6c:	4b5d      	ldr	r3, [pc, #372]	; (de4 <Scheduler_WriteQueue+0x194>)
     c6e:	681b      	ldr	r3, [r3, #0]
     c70:	7d1b      	ldrb	r3, [r3, #20]
     c72:	f89d 2007 	ldrb.w	r2, [sp, #7]
     c76:	429a      	cmp	r2, r3
     c78:	f200 80a8 	bhi.w	dcc <Scheduler_WriteQueue+0x17c>
        uint32 base_add = ( uint32 ) SchedulerConfig_Ptr->QueuePtr[ Queue - 1 ].Buffer; //queue element 0 memory address.
     c7c:	4b59      	ldr	r3, [pc, #356]	; (de4 <Scheduler_WriteQueue+0x194>)
     c7e:	681b      	ldr	r3, [r3, #0]
     c80:	6999      	ldr	r1, [r3, #24]
     c82:	f89d 2007 	ldrb.w	r2, [sp, #7]
     c86:	4613      	mov	r3, r2
     c88:	005b      	lsls	r3, r3, #1
     c8a:	4413      	add	r3, r2
     c8c:	009b      	lsls	r3, r3, #2
     c8e:	3b0c      	subs	r3, #12
     c90:	440b      	add	r3, r1
     c92:	689b      	ldr	r3, [r3, #8]
     c94:	9304      	str	r3, [sp, #16]
        uint32 actual_add = 0;  //memory address of the actual queue element.
     c96:	2300      	movs	r3, #0
     c98:	9303      	str	r3, [sp, #12]

        //Verifying if the queue is availabe to be written.
        if ( Scheduler_GetStatusQueue( Queue, SCHEDULER_QUEUE_FULL_STATUS ) == FALSE ) {    //Spaces available.
     c9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c9e:	2102      	movs	r1, #2
     ca0:	4618      	mov	r0, r3
     ca2:	f7ff ff8b 	bl	bbc <Scheduler_GetStatusQueue>
     ca6:	4603      	mov	r3, r0
     ca8:	2b00      	cmp	r3, #0
     caa:	f040 8093 	bne.w	dd4 <Scheduler_WriteQueue+0x184>

            //Writing to array, copying and pasting size bytes of info from data to queue.
            actual_add = base_add + ( SchedulerCtrl_Ptr->QueueHeads[ Queue - 1 ] * SchedulerConfig_Ptr->QueuePtr[ Queue - 1 ].Size );
     cae:	4b4e      	ldr	r3, [pc, #312]	; (de8 <Scheduler_WriteQueue+0x198>)
     cb0:	681b      	ldr	r3, [r3, #0]
     cb2:	f89d 2007 	ldrb.w	r2, [sp, #7]
     cb6:	3a01      	subs	r2, #1
     cb8:	320c      	adds	r2, #12
     cba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
     cbe:	4b49      	ldr	r3, [pc, #292]	; (de4 <Scheduler_WriteQueue+0x194>)
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	6998      	ldr	r0, [r3, #24]
     cc4:	f89d 2007 	ldrb.w	r2, [sp, #7]
     cc8:	4613      	mov	r3, r2
     cca:	005b      	lsls	r3, r3, #1
     ccc:	4413      	add	r3, r2
     cce:	009b      	lsls	r3, r3, #2
     cd0:	3b0c      	subs	r3, #12
     cd2:	4403      	add	r3, r0
     cd4:	781b      	ldrb	r3, [r3, #0]
     cd6:	fb01 f303 	mul.w	r3, r1, r3
     cda:	9a04      	ldr	r2, [sp, #16]
     cdc:	4413      	add	r3, r2
     cde:	9303      	str	r3, [sp, #12]
            MemCopy( ( void* )actual_add, Data, SchedulerConfig_Ptr->QueuePtr[ Queue - 1 ].Size );
     ce0:	9803      	ldr	r0, [sp, #12]
     ce2:	4b40      	ldr	r3, [pc, #256]	; (de4 <Scheduler_WriteQueue+0x194>)
     ce4:	681b      	ldr	r3, [r3, #0]
     ce6:	6999      	ldr	r1, [r3, #24]
     ce8:	f89d 2007 	ldrb.w	r2, [sp, #7]
     cec:	4613      	mov	r3, r2
     cee:	005b      	lsls	r3, r3, #1
     cf0:	4413      	add	r3, r2
     cf2:	009b      	lsls	r3, r3, #2
     cf4:	3b0c      	subs	r3, #12
     cf6:	440b      	add	r3, r1
     cf8:	781b      	ldrb	r3, [r3, #0]
     cfa:	461a      	mov	r2, r3
     cfc:	9900      	ldr	r1, [sp, #0]
     cfe:	f7ff feff 	bl	b00 <MemCopy>

            SchedulerCtrl_Ptr->QueueHeads[ Queue - 1 ]++;  //next value to be written.
     d02:	4b39      	ldr	r3, [pc, #228]	; (de8 <Scheduler_WriteQueue+0x198>)
     d04:	681b      	ldr	r3, [r3, #0]
     d06:	f89d 2007 	ldrb.w	r2, [sp, #7]
     d0a:	3a01      	subs	r2, #1
     d0c:	f102 010c 	add.w	r1, r2, #12
     d10:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
     d14:	3101      	adds	r1, #1
     d16:	320c      	adds	r2, #12
     d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            if ( SchedulerCtrl_Ptr->QueueHeads[ Queue - 1 ] > SchedulerConfig_Ptr->QueuePtr[ Queue - 1 ].Elements - 1 ) {
     d1c:	4b32      	ldr	r3, [pc, #200]	; (de8 <Scheduler_WriteQueue+0x198>)
     d1e:	681b      	ldr	r3, [r3, #0]
     d20:	f89d 2007 	ldrb.w	r2, [sp, #7]
     d24:	3a01      	subs	r2, #1
     d26:	320c      	adds	r2, #12
     d28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
     d2c:	4b2d      	ldr	r3, [pc, #180]	; (de4 <Scheduler_WriteQueue+0x194>)
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	6998      	ldr	r0, [r3, #24]
     d32:	f89d 2007 	ldrb.w	r2, [sp, #7]
     d36:	4613      	mov	r3, r2
     d38:	005b      	lsls	r3, r3, #1
     d3a:	4413      	add	r3, r2
     d3c:	009b      	lsls	r3, r3, #2
     d3e:	3b0c      	subs	r3, #12
     d40:	4403      	add	r3, r0
     d42:	685b      	ldr	r3, [r3, #4]
     d44:	3b01      	subs	r3, #1
     d46:	4299      	cmp	r1, r3
     d48:	d908      	bls.n	d5c <Scheduler_WriteQueue+0x10c>
                SchedulerCtrl_Ptr->QueueHeads[ Queue - 1 ] = 0;    //Reseting write index.
     d4a:	4b27      	ldr	r3, [pc, #156]	; (de8 <Scheduler_WriteQueue+0x198>)
     d4c:	681b      	ldr	r3, [r3, #0]
     d4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
     d52:	3a01      	subs	r2, #1
     d54:	320c      	adds	r2, #12
     d56:	2100      	movs	r1, #0
     d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            }

            if ( Scheduler_GetStatusQueue( Queue, SCHEDULER_QUEUE_EMPTY_STATUS ) == TRUE ) {
     d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d60:	2101      	movs	r1, #1
     d62:	4618      	mov	r0, r3
     d64:	f7ff ff2a 	bl	bbc <Scheduler_GetStatusQueue>
     d68:	4603      	mov	r3, r0
     d6a:	2b01      	cmp	r3, #1
     d6c:	d10b      	bne.n	d86 <Scheduler_WriteQueue+0x136>
                Bfx_ClrBit_u32u8( &SchedulerCtrl_Ptr->QueueEmpties, Queue - 1 );    //Once data is written the queue is no longer empty.
     d6e:	4b1e      	ldr	r3, [pc, #120]	; (de8 <Scheduler_WriteQueue+0x198>)
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	f103 0238 	add.w	r2, r3, #56	; 0x38
     d76:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d7a:	3b01      	subs	r3, #1
     d7c:	b2db      	uxtb	r3, r3
     d7e:	4619      	mov	r1, r3
     d80:	4610      	mov	r0, r2
     d82:	f7ff fe6a 	bl	a5a <Bfx_ClrBit_u32u8>
            }

            //Verifying if queue is full with the last data written.
            if ( SchedulerCtrl_Ptr->QueueHeads[ Queue - 1 ] == SchedulerCtrl_Ptr->QueueTails[ Queue - 1 ] ) {
     d86:	4b18      	ldr	r3, [pc, #96]	; (de8 <Scheduler_WriteQueue+0x198>)
     d88:	681b      	ldr	r3, [r3, #0]
     d8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
     d8e:	3a01      	subs	r2, #1
     d90:	320c      	adds	r2, #12
     d92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     d96:	4b14      	ldr	r3, [pc, #80]	; (de8 <Scheduler_WriteQueue+0x198>)
     d98:	6819      	ldr	r1, [r3, #0]
     d9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d9e:	3b01      	subs	r3, #1
     da0:	330c      	adds	r3, #12
     da2:	009b      	lsls	r3, r3, #2
     da4:	440b      	add	r3, r1
     da6:	685b      	ldr	r3, [r3, #4]
     da8:	429a      	cmp	r2, r3
     daa:	d10b      	bne.n	dc4 <Scheduler_WriteQueue+0x174>
                Bfx_SetBit_u32u8( &SchedulerCtrl_Ptr->QueueFulls, Queue - 1 );
     dac:	4b0e      	ldr	r3, [pc, #56]	; (de8 <Scheduler_WriteQueue+0x198>)
     dae:	681b      	ldr	r3, [r3, #0]
     db0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
     db4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     db8:	3b01      	subs	r3, #1
     dba:	b2db      	uxtb	r3, r3
     dbc:	4619      	mov	r1, r3
     dbe:	4610      	mov	r0, r2
     dc0:	f7ff fe39 	bl	a36 <Bfx_SetBit_u32u8>
            }

            status = TRUE;  //Succesfull operation.
     dc4:	2301      	movs	r3, #1
     dc6:	f88d 3017 	strb.w	r3, [sp, #23]
    if ( ( Queue != 0 ) && ( Queue <= SchedulerConfig_Ptr->Queues ) ) { //Valid ID.  
     dca:	e003      	b.n	dd4 <Scheduler_WriteQueue+0x184>
        }
    }

    else {  //Invalid ID.
        status = FALSE; 
     dcc:	2300      	movs	r3, #0
     dce:	f88d 3017 	strb.w	r3, [sp, #23]
     dd2:	e000      	b.n	dd6 <Scheduler_WriteQueue+0x186>
    if ( ( Queue != 0 ) && ( Queue <= SchedulerConfig_Ptr->Queues ) ) { //Valid ID.  
     dd4:	bf00      	nop
    }

    return status;
     dd6:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
     dda:	4618      	mov	r0, r3
     ddc:	b007      	add	sp, #28
     dde:	f85d fb04 	ldr.w	pc, [sp], #4
     de2:	bf00      	nop
     de4:	1fff8b40 	.word	0x1fff8b40
     de8:	1fff8b44 	.word	0x1fff8b44

00000dec <Scheduler_ReadQueue>:
 *
 * @retval status Status of the read operation, read operation was succesfull 1 or not 0.
 * 
 * @note The queue ID must be valid.
*/
Std_ReturnType Scheduler_ReadQueue( QueueType Queue, void *Data ) {
     dec:	b500      	push	{lr}
     dee:	b087      	sub	sp, #28
     df0:	4603      	mov	r3, r0
     df2:	9100      	str	r1, [sp, #0]
     df4:	f88d 3007 	strb.w	r3, [sp, #7]
    //Local data
    Std_ReturnType status = FALSE;
     df8:	2300      	movs	r3, #0
     dfa:	f88d 3017 	strb.w	r3, [sp, #23]

     //Verifying if the ID is valid.
    if ( ( Queue != 0 ) && ( Queue <= SchedulerConfig_Ptr->Queues ) ) { //Valid ID.
     dfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e02:	2b00      	cmp	r3, #0
     e04:	f000 80b7 	beq.w	f76 <Scheduler_ReadQueue+0x18a>
     e08:	4b60      	ldr	r3, [pc, #384]	; (f8c <Scheduler_ReadQueue+0x1a0>)
     e0a:	681b      	ldr	r3, [r3, #0]
     e0c:	7d1b      	ldrb	r3, [r3, #20]
     e0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
     e12:	429a      	cmp	r2, r3
     e14:	f200 80af 	bhi.w	f76 <Scheduler_ReadQueue+0x18a>
        uint32 base_add = ( uint32 ) SchedulerConfig_Ptr->QueuePtr[ Queue - 1 ].Buffer; //queue element 0 memory address.
     e18:	4b5c      	ldr	r3, [pc, #368]	; (f8c <Scheduler_ReadQueue+0x1a0>)
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	6999      	ldr	r1, [r3, #24]
     e1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
     e22:	4613      	mov	r3, r2
     e24:	005b      	lsls	r3, r3, #1
     e26:	4413      	add	r3, r2
     e28:	009b      	lsls	r3, r3, #2
     e2a:	3b0c      	subs	r3, #12
     e2c:	440b      	add	r3, r1
     e2e:	689b      	ldr	r3, [r3, #8]
     e30:	9304      	str	r3, [sp, #16]
        uint32 actual_add = 0;  //memory address of the actual queue element.     
     e32:	2300      	movs	r3, #0
     e34:	9303      	str	r3, [sp, #12]
        
        //Verifying if the queue has data available to be read.
        if ( Scheduler_GetStatusQueue( Queue, SCHEDULER_QUEUE_EMPTY_STATUS ) == FALSE ) { 
     e36:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e3a:	2101      	movs	r1, #1
     e3c:	4618      	mov	r0, r3
     e3e:	f7ff febd 	bl	bbc <Scheduler_GetStatusQueue>
     e42:	4603      	mov	r3, r0
     e44:	2b00      	cmp	r3, #0
     e46:	f040 809a 	bne.w	f7e <Scheduler_ReadQueue+0x192>
        
            //Reading from array, copying and pasting size bytes of info from queue to data.
            actual_add = base_add + ( SchedulerCtrl_Ptr->QueueTails[ Queue - 1 ] * SchedulerConfig_Ptr->QueuePtr[ Queue - 1 ].Size );
     e4a:	4b51      	ldr	r3, [pc, #324]	; (f90 <Scheduler_ReadQueue+0x1a4>)
     e4c:	681a      	ldr	r2, [r3, #0]
     e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e52:	3b01      	subs	r3, #1
     e54:	330c      	adds	r3, #12
     e56:	009b      	lsls	r3, r3, #2
     e58:	4413      	add	r3, r2
     e5a:	6859      	ldr	r1, [r3, #4]
     e5c:	4b4b      	ldr	r3, [pc, #300]	; (f8c <Scheduler_ReadQueue+0x1a0>)
     e5e:	681b      	ldr	r3, [r3, #0]
     e60:	6998      	ldr	r0, [r3, #24]
     e62:	f89d 2007 	ldrb.w	r2, [sp, #7]
     e66:	4613      	mov	r3, r2
     e68:	005b      	lsls	r3, r3, #1
     e6a:	4413      	add	r3, r2
     e6c:	009b      	lsls	r3, r3, #2
     e6e:	3b0c      	subs	r3, #12
     e70:	4403      	add	r3, r0
     e72:	781b      	ldrb	r3, [r3, #0]
     e74:	fb01 f303 	mul.w	r3, r1, r3
     e78:	9a04      	ldr	r2, [sp, #16]
     e7a:	4413      	add	r3, r2
     e7c:	9303      	str	r3, [sp, #12]
            MemCopy( Data, ( void* )actual_add, SchedulerConfig_Ptr->QueuePtr[ Queue - 1 ].Size );            
     e7e:	9803      	ldr	r0, [sp, #12]
     e80:	4b42      	ldr	r3, [pc, #264]	; (f8c <Scheduler_ReadQueue+0x1a0>)
     e82:	681b      	ldr	r3, [r3, #0]
     e84:	6999      	ldr	r1, [r3, #24]
     e86:	f89d 2007 	ldrb.w	r2, [sp, #7]
     e8a:	4613      	mov	r3, r2
     e8c:	005b      	lsls	r3, r3, #1
     e8e:	4413      	add	r3, r2
     e90:	009b      	lsls	r3, r3, #2
     e92:	3b0c      	subs	r3, #12
     e94:	440b      	add	r3, r1
     e96:	781b      	ldrb	r3, [r3, #0]
     e98:	461a      	mov	r2, r3
     e9a:	4601      	mov	r1, r0
     e9c:	9800      	ldr	r0, [sp, #0]
     e9e:	f7ff fe2f 	bl	b00 <MemCopy>
        
            SchedulerCtrl_Ptr->QueueTails[ Queue - 1 ]++;  //next value to be read.
     ea2:	4b3b      	ldr	r3, [pc, #236]	; (f90 <Scheduler_ReadQueue+0x1a4>)
     ea4:	681a      	ldr	r2, [r3, #0]
     ea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eaa:	1e59      	subs	r1, r3, #1
     eac:	f101 030c 	add.w	r3, r1, #12
     eb0:	009b      	lsls	r3, r3, #2
     eb2:	4413      	add	r3, r2
     eb4:	685b      	ldr	r3, [r3, #4]
     eb6:	1c58      	adds	r0, r3, #1
     eb8:	f101 030c 	add.w	r3, r1, #12
     ebc:	009b      	lsls	r3, r3, #2
     ebe:	4413      	add	r3, r2
     ec0:	6058      	str	r0, [r3, #4]

            if ( SchedulerCtrl_Ptr->QueueTails[ Queue - 1 ] > SchedulerConfig_Ptr->QueuePtr[ Queue - 1 ].Elements - 1 )  {
     ec2:	4b33      	ldr	r3, [pc, #204]	; (f90 <Scheduler_ReadQueue+0x1a4>)
     ec4:	681a      	ldr	r2, [r3, #0]
     ec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eca:	3b01      	subs	r3, #1
     ecc:	330c      	adds	r3, #12
     ece:	009b      	lsls	r3, r3, #2
     ed0:	4413      	add	r3, r2
     ed2:	6859      	ldr	r1, [r3, #4]
     ed4:	4b2d      	ldr	r3, [pc, #180]	; (f8c <Scheduler_ReadQueue+0x1a0>)
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	6998      	ldr	r0, [r3, #24]
     eda:	f89d 2007 	ldrb.w	r2, [sp, #7]
     ede:	4613      	mov	r3, r2
     ee0:	005b      	lsls	r3, r3, #1
     ee2:	4413      	add	r3, r2
     ee4:	009b      	lsls	r3, r3, #2
     ee6:	3b0c      	subs	r3, #12
     ee8:	4403      	add	r3, r0
     eea:	685b      	ldr	r3, [r3, #4]
     eec:	3b01      	subs	r3, #1
     eee:	4299      	cmp	r1, r3
     ef0:	d909      	bls.n	f06 <Scheduler_ReadQueue+0x11a>
                SchedulerCtrl_Ptr->QueueTails[ Queue - 1 ] = 0; //Reseting read index.
     ef2:	4b27      	ldr	r3, [pc, #156]	; (f90 <Scheduler_ReadQueue+0x1a4>)
     ef4:	681a      	ldr	r2, [r3, #0]
     ef6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     efa:	3b01      	subs	r3, #1
     efc:	330c      	adds	r3, #12
     efe:	009b      	lsls	r3, r3, #2
     f00:	4413      	add	r3, r2
     f02:	2200      	movs	r2, #0
     f04:	605a      	str	r2, [r3, #4]
            }

            if ( Scheduler_GetStatusQueue( Queue, SCHEDULER_QUEUE_FULL_STATUS ) == TRUE ) {
     f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f0a:	2102      	movs	r1, #2
     f0c:	4618      	mov	r0, r3
     f0e:	f7ff fe55 	bl	bbc <Scheduler_GetStatusQueue>
     f12:	4603      	mov	r3, r0
     f14:	2b01      	cmp	r3, #1
     f16:	d10b      	bne.n	f30 <Scheduler_ReadQueue+0x144>
                Bfx_ClrBit_u32u8( &SchedulerCtrl_Ptr->QueueFulls, Queue - 1 );  //Once data is read the queue is no longer full.
     f18:	4b1d      	ldr	r3, [pc, #116]	; (f90 <Scheduler_ReadQueue+0x1a4>)
     f1a:	681b      	ldr	r3, [r3, #0]
     f1c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
     f20:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f24:	3b01      	subs	r3, #1
     f26:	b2db      	uxtb	r3, r3
     f28:	4619      	mov	r1, r3
     f2a:	4610      	mov	r0, r2
     f2c:	f7ff fd95 	bl	a5a <Bfx_ClrBit_u32u8>
            }

            //Verifying if the queue is empty with the last data read.
            if ( SchedulerCtrl_Ptr->QueueTails[ Queue - 1 ] == SchedulerCtrl_Ptr->QueueHeads[ Queue - 1 ] ) {
     f30:	4b17      	ldr	r3, [pc, #92]	; (f90 <Scheduler_ReadQueue+0x1a4>)
     f32:	681a      	ldr	r2, [r3, #0]
     f34:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f38:	3b01      	subs	r3, #1
     f3a:	330c      	adds	r3, #12
     f3c:	009b      	lsls	r3, r3, #2
     f3e:	4413      	add	r3, r2
     f40:	685a      	ldr	r2, [r3, #4]
     f42:	4b13      	ldr	r3, [pc, #76]	; (f90 <Scheduler_ReadQueue+0x1a4>)
     f44:	681b      	ldr	r3, [r3, #0]
     f46:	f89d 1007 	ldrb.w	r1, [sp, #7]
     f4a:	3901      	subs	r1, #1
     f4c:	310c      	adds	r1, #12
     f4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     f52:	429a      	cmp	r2, r3
     f54:	d10b      	bne.n	f6e <Scheduler_ReadQueue+0x182>
                Bfx_SetBit_u32u8( &SchedulerCtrl_Ptr->QueueEmpties, Queue - 1 );
     f56:	4b0e      	ldr	r3, [pc, #56]	; (f90 <Scheduler_ReadQueue+0x1a4>)
     f58:	681b      	ldr	r3, [r3, #0]
     f5a:	f103 0238 	add.w	r2, r3, #56	; 0x38
     f5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f62:	3b01      	subs	r3, #1
     f64:	b2db      	uxtb	r3, r3
     f66:	4619      	mov	r1, r3
     f68:	4610      	mov	r0, r2
     f6a:	f7ff fd64 	bl	a36 <Bfx_SetBit_u32u8>
            }
            
            status = TRUE; //Succesfull operation.            
     f6e:	2301      	movs	r3, #1
     f70:	f88d 3017 	strb.w	r3, [sp, #23]
    if ( ( Queue != 0 ) && ( Queue <= SchedulerConfig_Ptr->Queues ) ) { //Valid ID.
     f74:	e003      	b.n	f7e <Scheduler_ReadQueue+0x192>
        }
    }

    else {  //Invalid ID.
        status = FALSE; 
     f76:	2300      	movs	r3, #0
     f78:	f88d 3017 	strb.w	r3, [sp, #23]
     f7c:	e000      	b.n	f80 <Scheduler_ReadQueue+0x194>
    if ( ( Queue != 0 ) && ( Queue <= SchedulerConfig_Ptr->Queues ) ) { //Valid ID.
     f7e:	bf00      	nop
    }

    return status;  
     f80:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
     f84:	4618      	mov	r0, r3
     f86:	b007      	add	sp, #28
     f88:	f85d fb04 	ldr.w	pc, [sp], #4
     f8c:	1fff8b40 	.word	0x1fff8b40
     f90:	1fff8b44 	.word	0x1fff8b44

00000f94 <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     f94:	b500      	push	{lr}
     f96:	b085      	sub	sp, #20
     f98:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = TRUE;
     f9a:	2301      	movs	r3, #1
     f9c:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 i = 0;
     fa0:	2300      	movs	r3, #0
     fa2:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing tasks related parameters.
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     fa6:	2300      	movs	r3, #0
     fa8:	f88d 300f 	strb.w	r3, [sp, #15]
     fac:	e033      	b.n	1016 <Scheduler_Init+0x82>
        SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     fae:	4b44      	ldr	r3, [pc, #272]	; (10c0 <Scheduler_Init+0x12c>)
     fb0:	681b      	ldr	r3, [r3, #0]
     fb2:	6899      	ldr	r1, [r3, #8]
     fb4:	f89d 200f 	ldrb.w	r2, [sp, #15]
     fb8:	4613      	mov	r3, r2
     fba:	005b      	lsls	r3, r3, #1
     fbc:	4413      	add	r3, r2
     fbe:	009b      	lsls	r3, r3, #2
     fc0:	440b      	add	r3, r1
     fc2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     fc6:	6819      	ldr	r1, [r3, #0]
     fc8:	9b01      	ldr	r3, [sp, #4]
     fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     fce:	f89d 200f 	ldrb.w	r2, [sp, #15]
     fd2:	9b01      	ldr	r3, [sp, #4]
     fd4:	3202      	adds	r2, #2
     fd6:	2100      	movs	r1, #0
     fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     fdc:	9b01      	ldr	r3, [sp, #4]
     fde:	f103 0028 	add.w	r0, r3, #40	; 0x28
     fe2:	4b37      	ldr	r3, [pc, #220]	; (10c0 <Scheduler_Init+0x12c>)
     fe4:	681b      	ldr	r3, [r3, #0]
     fe6:	6899      	ldr	r1, [r3, #8]
     fe8:	f89d 200f 	ldrb.w	r2, [sp, #15]
     fec:	4613      	mov	r3, r2
     fee:	005b      	lsls	r3, r3, #1
     ff0:	4413      	add	r3, r2
     ff2:	009b      	lsls	r3, r3, #2
     ff4:	440b      	add	r3, r1
     ff6:	791b      	ldrb	r3, [r3, #4]
     ff8:	2b00      	cmp	r3, #0
     ffa:	bf14      	ite	ne
     ffc:	2301      	movne	r3, #1
     ffe:	2300      	moveq	r3, #0
    1000:	b2da      	uxtb	r2, r3
    1002:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1006:	4619      	mov	r1, r3
    1008:	f7ff fd55 	bl	ab6 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
    100c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1010:	3301      	adds	r3, #1
    1012:	f88d 300f 	strb.w	r3, [sp, #15]
    1016:	f89d 300f 	ldrb.w	r3, [sp, #15]
    101a:	2b01      	cmp	r3, #1
    101c:	d9c7      	bls.n	fae <Scheduler_Init+0x1a>
    }

    //Initializing timers related parameters.
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
    101e:	2300      	movs	r3, #0
    1020:	f88d 300f 	strb.w	r3, [sp, #15]
    1024:	e03f      	b.n	10a6 <Scheduler_Init+0x112>
        SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
    1026:	4b26      	ldr	r3, [pc, #152]	; (10c0 <Scheduler_Init+0x12c>)
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	6919      	ldr	r1, [r3, #16]
    102c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1030:	4613      	mov	r3, r2
    1032:	005b      	lsls	r3, r3, #1
    1034:	4413      	add	r3, r2
    1036:	009b      	lsls	r3, r3, #2
    1038:	440b      	add	r3, r1
    103a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    103e:	6819      	ldr	r1, [r3, #0]
    1040:	9b01      	ldr	r3, [sp, #4]
    1042:	3204      	adds	r2, #4
    1044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
    1048:	4b1d      	ldr	r3, [pc, #116]	; (10c0 <Scheduler_Init+0x12c>)
    104a:	681b      	ldr	r3, [r3, #0]
    104c:	6919      	ldr	r1, [r3, #16]
    104e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1052:	4613      	mov	r3, r2
    1054:	005b      	lsls	r3, r3, #1
    1056:	4413      	add	r3, r2
    1058:	009b      	lsls	r3, r3, #2
    105a:	18ca      	adds	r2, r1, r3
    105c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1060:	6812      	ldr	r2, [r2, #0]
    1062:	9901      	ldr	r1, [sp, #4]
    1064:	3306      	adds	r3, #6
    1066:	009b      	lsls	r3, r3, #2
    1068:	440b      	add	r3, r1
    106a:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
    106c:	9b01      	ldr	r3, [sp, #4]
    106e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    1072:	4b13      	ldr	r3, [pc, #76]	; (10c0 <Scheduler_Init+0x12c>)
    1074:	681b      	ldr	r3, [r3, #0]
    1076:	6919      	ldr	r1, [r3, #16]
    1078:	f89d 200f 	ldrb.w	r2, [sp, #15]
    107c:	4613      	mov	r3, r2
    107e:	005b      	lsls	r3, r3, #1
    1080:	4413      	add	r3, r2
    1082:	009b      	lsls	r3, r3, #2
    1084:	440b      	add	r3, r1
    1086:	791b      	ldrb	r3, [r3, #4]
    1088:	2b00      	cmp	r3, #0
    108a:	bf14      	ite	ne
    108c:	2301      	movne	r3, #1
    108e:	2300      	moveq	r3, #0
    1090:	b2da      	uxtb	r2, r3
    1092:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1096:	4619      	mov	r1, r3
    1098:	f7ff fd0d 	bl	ab6 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
    109c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10a0:	3301      	adds	r3, #1
    10a2:	f88d 300f 	strb.w	r3, [sp, #15]
    10a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10aa:	2b02      	cmp	r3, #2
    10ac:	d9bb      	bls.n	1026 <Scheduler_Init+0x92>
    } 

    Scheduler_InitQueue( SchedulerPtr ); //Initializing queues related parameters.   
    10ae:	9801      	ldr	r0, [sp, #4]
    10b0:	f7ff fd4d 	bl	b4e <Scheduler_InitQueue>

    return status;
    10b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    10b8:	4618      	mov	r0, r3
    10ba:	b005      	add	sp, #20
    10bc:	f85d fb04 	ldr.w	pc, [sp], #4
    10c0:	1fff8b40 	.word	0x1fff8b40

000010c4 <Scheduler_StartTimer>:
 *
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The timer ID must be valid.
 */
Std_ReturnType Scheduler_StartTimer( TimerType Timer ) {
    10c4:	b500      	push	{lr}
    10c6:	b085      	sub	sp, #20
    10c8:	4603      	mov	r3, r0
    10ca:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    Std_ReturnType status = FALSE;
    10ce:	2300      	movs	r3, #0
    10d0:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
    10d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10d8:	2b00      	cmp	r3, #0
    10da:	d032      	beq.n	1142 <Scheduler_StartTimer+0x7e>
    10dc:	4b1d      	ldr	r3, [pc, #116]	; (1154 <Scheduler_StartTimer+0x90>)
    10de:	681b      	ldr	r3, [r3, #0]
    10e0:	7b1b      	ldrb	r3, [r3, #12]
    10e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    10e6:	429a      	cmp	r2, r3
    10e8:	d82b      	bhi.n	1142 <Scheduler_StartTimer+0x7e>
        Bfx_SetBit_u32u8( &SchedulerCtrl_Ptr->TimerFlags , Timer - 1 ); 
    10ea:	4b1b      	ldr	r3, [pc, #108]	; (1158 <Scheduler_StartTimer+0x94>)
    10ec:	681b      	ldr	r3, [r3, #0]
    10ee:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    10f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10f6:	3b01      	subs	r3, #1
    10f8:	b2db      	uxtb	r3, r3
    10fa:	4619      	mov	r1, r3
    10fc:	4610      	mov	r0, r2
    10fe:	f7ff fc9a 	bl	a36 <Bfx_SetBit_u32u8>

        //Verifying if timer has reach 0.
        if ( SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ] == 0 ) {
    1102:	4b15      	ldr	r3, [pc, #84]	; (1158 <Scheduler_StartTimer+0x94>)
    1104:	681a      	ldr	r2, [r3, #0]
    1106:	f89d 3007 	ldrb.w	r3, [sp, #7]
    110a:	3b01      	subs	r3, #1
    110c:	3306      	adds	r3, #6
    110e:	009b      	lsls	r3, r3, #2
    1110:	4413      	add	r3, r2
    1112:	685b      	ldr	r3, [r3, #4]
    1114:	2b00      	cmp	r3, #0
    1116:	d110      	bne.n	113a <Scheduler_StartTimer+0x76>
             SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ] = SchedulerCtrl_Ptr->TimerTimeout[ Timer - 1 ]; //restarting timer.
    1118:	4b0f      	ldr	r3, [pc, #60]	; (1158 <Scheduler_StartTimer+0x94>)
    111a:	681a      	ldr	r2, [r3, #0]
    111c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1120:	1e58      	subs	r0, r3, #1
    1122:	4b0d      	ldr	r3, [pc, #52]	; (1158 <Scheduler_StartTimer+0x94>)
    1124:	6819      	ldr	r1, [r3, #0]
    1126:	f89d 3007 	ldrb.w	r3, [sp, #7]
    112a:	3b01      	subs	r3, #1
    112c:	3004      	adds	r0, #4
    112e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    1132:	3306      	adds	r3, #6
    1134:	009b      	lsls	r3, r3, #2
    1136:	440b      	add	r3, r1
    1138:	605a      	str	r2, [r3, #4]
        }

        status = TRUE;
    113a:	2301      	movs	r3, #1
    113c:	f88d 300f 	strb.w	r3, [sp, #15]
    1140:	e002      	b.n	1148 <Scheduler_StartTimer+0x84>
    }

    else {
        status = FALSE; //invalid ID.
    1142:	2300      	movs	r3, #0
    1144:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
    1148:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    114c:	4618      	mov	r0, r3
    114e:	b005      	add	sp, #20
    1150:	f85d fb04 	ldr.w	pc, [sp], #4
    1154:	1fff8b40 	.word	0x1fff8b40
    1158:	1fff8b44 	.word	0x1fff8b44

0000115c <Scheduler_StopTimer>:
 *
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The timer ID must be valid.
 */
Std_ReturnType Scheduler_StopTimer( TimerType Timer ) {
    115c:	b500      	push	{lr}
    115e:	b085      	sub	sp, #20
    1160:	4603      	mov	r3, r0
    1162:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    Std_ReturnType status = FALSE; 
    1166:	2300      	movs	r3, #0
    1168:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) {//valid ID
    116c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1170:	2b00      	cmp	r3, #0
    1172:	d016      	beq.n	11a2 <Scheduler_StopTimer+0x46>
    1174:	4b0f      	ldr	r3, [pc, #60]	; (11b4 <Scheduler_StopTimer+0x58>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	7b1b      	ldrb	r3, [r3, #12]
    117a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    117e:	429a      	cmp	r2, r3
    1180:	d80f      	bhi.n	11a2 <Scheduler_StopTimer+0x46>
        Bfx_ClrBit_u32u8( &SchedulerCtrl_Ptr->TimerFlags , Timer - 1 );
    1182:	4b0d      	ldr	r3, [pc, #52]	; (11b8 <Scheduler_StopTimer+0x5c>)
    1184:	681b      	ldr	r3, [r3, #0]
    1186:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    118a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    118e:	3b01      	subs	r3, #1
    1190:	b2db      	uxtb	r3, r3
    1192:	4619      	mov	r1, r3
    1194:	4610      	mov	r0, r2
    1196:	f7ff fc60 	bl	a5a <Bfx_ClrBit_u32u8>
        status = TRUE;
    119a:	2301      	movs	r3, #1
    119c:	f88d 300f 	strb.w	r3, [sp, #15]
    11a0:	e002      	b.n	11a8 <Scheduler_StopTimer+0x4c>
    }

    else {
        status = FALSE;//invalid ID.
    11a2:	2300      	movs	r3, #0
    11a4:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
    11a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    11ac:	4618      	mov	r0, r3
    11ae:	b005      	add	sp, #20
    11b0:	f85d fb04 	ldr.w	pc, [sp], #4
    11b4:	1fff8b40 	.word	0x1fff8b40
    11b8:	1fff8b44 	.word	0x1fff8b44

000011bc <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
    11bc:	b084      	sub	sp, #16
    11be:	4603      	mov	r3, r0
    11c0:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
    11c4:	2300      	movs	r3, #0
    11c6:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
    11c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11cc:	2b00      	cmp	r3, #0
    11ce:	d011      	beq.n	11f4 <Scheduler_GetTimer+0x38>
    11d0:	4b0b      	ldr	r3, [pc, #44]	; (1200 <Scheduler_GetTimer+0x44>)
    11d2:	681b      	ldr	r3, [r3, #0]
    11d4:	7b1b      	ldrb	r3, [r3, #12]
    11d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    11da:	429a      	cmp	r2, r3
    11dc:	d80a      	bhi.n	11f4 <Scheduler_GetTimer+0x38>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ];
    11de:	4b09      	ldr	r3, [pc, #36]	; (1204 <Scheduler_GetTimer+0x48>)
    11e0:	681a      	ldr	r2, [r3, #0]
    11e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11e6:	3b01      	subs	r3, #1
    11e8:	3306      	adds	r3, #6
    11ea:	009b      	lsls	r3, r3, #2
    11ec:	4413      	add	r3, r2
    11ee:	685b      	ldr	r3, [r3, #4]
    11f0:	9303      	str	r3, [sp, #12]
    11f2:	e001      	b.n	11f8 <Scheduler_GetTimer+0x3c>
    }

    else {
        counter_value = FALSE;  //invalid ID.
    11f4:	2300      	movs	r3, #0
    11f6:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
    11f8:	9b03      	ldr	r3, [sp, #12]
}
    11fa:	4618      	mov	r0, r3
    11fc:	b004      	add	sp, #16
    11fe:	4770      	bx	lr
    1200:	1fff8b40 	.word	0x1fff8b40
    1204:	1fff8b44 	.word	0x1fff8b44

00001208 <Scheduler_ReloadTimer>:
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The timeout value must be >= tick and a multiple of tick.
 * @note The timer ID must be valid.
 */
Std_ReturnType Scheduler_ReloadTimer( TimerType Timer, uint32 NewTimeout ) {
    1208:	b500      	push	{lr}
    120a:	b085      	sub	sp, #20
    120c:	4603      	mov	r3, r0
    120e:	9100      	str	r1, [sp, #0]
    1210:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    Std_ReturnType status = FALSE;
    1214:	2300      	movs	r3, #0
    1216:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
    121a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    121e:	2b00      	cmp	r3, #0
    1220:	d037      	beq.n	1292 <Scheduler_ReloadTimer+0x8a>
    1222:	4b20      	ldr	r3, [pc, #128]	; (12a4 <Scheduler_ReloadTimer+0x9c>)
    1224:	681b      	ldr	r3, [r3, #0]
    1226:	7b1b      	ldrb	r3, [r3, #12]
    1228:	f89d 2007 	ldrb.w	r2, [sp, #7]
    122c:	429a      	cmp	r2, r3
    122e:	d830      	bhi.n	1292 <Scheduler_ReloadTimer+0x8a>
        //Verifying if timeout value is valid according to tick value. timeout >= tick, timeout must be multiple of tick.
        if ( ( NewTimeout >= SchedulerConfig_Ptr->Tick ) && ( NewTimeout % SchedulerConfig_Ptr->Tick == 0 ) ) { //valid timeout.
    1230:	4b1c      	ldr	r3, [pc, #112]	; (12a4 <Scheduler_ReloadTimer+0x9c>)
    1232:	681b      	ldr	r3, [r3, #0]
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	9a00      	ldr	r2, [sp, #0]
    1238:	429a      	cmp	r2, r3
    123a:	d326      	bcc.n	128a <Scheduler_ReloadTimer+0x82>
    123c:	4b19      	ldr	r3, [pc, #100]	; (12a4 <Scheduler_ReloadTimer+0x9c>)
    123e:	681b      	ldr	r3, [r3, #0]
    1240:	681a      	ldr	r2, [r3, #0]
    1242:	9b00      	ldr	r3, [sp, #0]
    1244:	fbb3 f1f2 	udiv	r1, r3, r2
    1248:	fb01 f202 	mul.w	r2, r1, r2
    124c:	1a9b      	subs	r3, r3, r2
    124e:	2b00      	cmp	r3, #0
    1250:	d11b      	bne.n	128a <Scheduler_ReloadTimer+0x82>
            SchedulerCtrl_Ptr->TimerTimeout[ Timer - 1 ] = NewTimeout;
    1252:	4b15      	ldr	r3, [pc, #84]	; (12a8 <Scheduler_ReloadTimer+0xa0>)
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	f89d 2007 	ldrb.w	r2, [sp, #7]
    125a:	3a01      	subs	r2, #1
    125c:	3204      	adds	r2, #4
    125e:	9900      	ldr	r1, [sp, #0]
    1260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ]  = NewTimeout; //reseting timer to new reference value.
    1264:	4b10      	ldr	r3, [pc, #64]	; (12a8 <Scheduler_ReloadTimer+0xa0>)
    1266:	681a      	ldr	r2, [r3, #0]
    1268:	f89d 3007 	ldrb.w	r3, [sp, #7]
    126c:	3b01      	subs	r3, #1
    126e:	3306      	adds	r3, #6
    1270:	009b      	lsls	r3, r3, #2
    1272:	4413      	add	r3, r2
    1274:	9a00      	ldr	r2, [sp, #0]
    1276:	605a      	str	r2, [r3, #4]
            Scheduler_StartTimer( Timer );
    1278:	f89d 3007 	ldrb.w	r3, [sp, #7]
    127c:	4618      	mov	r0, r3
    127e:	f7ff ff21 	bl	10c4 <Scheduler_StartTimer>
            status = TRUE;
    1282:	2301      	movs	r3, #1
    1284:	f88d 300f 	strb.w	r3, [sp, #15]
        if ( ( NewTimeout >= SchedulerConfig_Ptr->Tick ) && ( NewTimeout % SchedulerConfig_Ptr->Tick == 0 ) ) { //valid timeout.
    1288:	e006      	b.n	1298 <Scheduler_ReloadTimer+0x90>
        }

        else {
            status = FALSE; //Invalid timeout.
    128a:	2300      	movs	r3, #0
    128c:	f88d 300f 	strb.w	r3, [sp, #15]
        if ( ( NewTimeout >= SchedulerConfig_Ptr->Tick ) && ( NewTimeout % SchedulerConfig_Ptr->Tick == 0 ) ) { //valid timeout.
    1290:	e002      	b.n	1298 <Scheduler_ReloadTimer+0x90>
        }
     }

    else {
        status = FALSE; //invalid ID.
    1292:	2300      	movs	r3, #0
    1294:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
    1298:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    129c:	4618      	mov	r0, r3
    129e:	b005      	add	sp, #20
    12a0:	f85d fb04 	ldr.w	pc, [sp], #4
    12a4:	1fff8b40 	.word	0x1fff8b40
    12a8:	1fff8b44 	.word	0x1fff8b44

000012ac <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
    12ac:	b500      	push	{lr}
    12ae:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
    12b0:	4b5e      	ldr	r3, [pc, #376]	; (142c <Scheduler_MainFunction+0x180>)
    12b2:	681b      	ldr	r3, [r3, #0]
    12b4:	681b      	ldr	r3, [r3, #0]
    12b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    12ba:	fb02 f303 	mul.w	r3, r2, r3
    12be:	2101      	movs	r1, #1
    12c0:	4618      	mov	r0, r3
    12c2:	f000 fb5c 	bl	197e <OsIf_MicrosToTicks>
    12c6:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
    12c8:	2001      	movs	r0, #1
    12ca:	f000 fb0c 	bl	18e6 <OsIf_GetCounter>
    12ce:	4603      	mov	r3, r0
    12d0:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
    12d2:	2300      	movs	r3, #0
    12d4:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
    12d6:	2300      	movs	r3, #0
    12d8:	f88d 300b 	strb.w	r3, [sp, #11]

    while( 1 ) {    //tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
    12dc:	466b      	mov	r3, sp
    12de:	2101      	movs	r1, #1
    12e0:	4618      	mov	r0, r3
    12e2:	f000 fb19 	bl	1918 <OsIf_GetElapsed>
    12e6:	4602      	mov	r2, r0
    12e8:	9b03      	ldr	r3, [sp, #12]
    12ea:	4413      	add	r3, r2
    12ec:	9303      	str	r3, [sp, #12]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
    12ee:	9a03      	ldr	r2, [sp, #12]
    12f0:	9b01      	ldr	r3, [sp, #4]
    12f2:	429a      	cmp	r2, r3
    12f4:	d3f2      	bcc.n	12dc <Scheduler_MainFunction+0x30>
            
            //Executing timers
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
    12f6:	2300      	movs	r3, #0
    12f8:	f88d 300b 	strb.w	r3, [sp, #11]
    12fc:	e03a      	b.n	1374 <Scheduler_MainFunction+0xc8>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
    12fe:	4b4c      	ldr	r3, [pc, #304]	; (1430 <Scheduler_MainFunction+0x184>)
    1300:	681b      	ldr	r3, [r3, #0]
    1302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1304:	f89d 200b 	ldrb.w	r2, [sp, #11]
    1308:	4611      	mov	r1, r2
    130a:	4618      	mov	r0, r3
    130c:	f7ff fbb8 	bl	a80 <Bfx_GetBit_u32u8_u8>
    1310:	4603      	mov	r3, r0
    1312:	2b00      	cmp	r3, #0
    1314:	d029      	beq.n	136a <Scheduler_MainFunction+0xbe>
                    SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
    1316:	4b46      	ldr	r3, [pc, #280]	; (1430 <Scheduler_MainFunction+0x184>)
    1318:	681a      	ldr	r2, [r3, #0]
    131a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    131e:	3306      	adds	r3, #6
    1320:	009b      	lsls	r3, r3, #2
    1322:	4413      	add	r3, r2
    1324:	6858      	ldr	r0, [r3, #4]
    1326:	4b41      	ldr	r3, [pc, #260]	; (142c <Scheduler_MainFunction+0x180>)
    1328:	681b      	ldr	r3, [r3, #0]
    132a:	681a      	ldr	r2, [r3, #0]
    132c:	4b40      	ldr	r3, [pc, #256]	; (1430 <Scheduler_MainFunction+0x184>)
    132e:	6819      	ldr	r1, [r3, #0]
    1330:	f89d 300b 	ldrb.w	r3, [sp, #11]
    1334:	1a82      	subs	r2, r0, r2
    1336:	3306      	adds	r3, #6
    1338:	009b      	lsls	r3, r3, #2
    133a:	440b      	add	r3, r1
    133c:	605a      	str	r2, [r3, #4]
                    
                    //Verifying execution of callback i
                    if ( Scheduler_GetTimer( i + 1 ) == 0 ) {   //timeout achieved.
    133e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    1342:	3301      	adds	r3, #1
    1344:	b2db      	uxtb	r3, r3
    1346:	4618      	mov	r0, r3
    1348:	f7ff ff38 	bl	11bc <Scheduler_GetTimer>
    134c:	4603      	mov	r3, r0
    134e:	2b00      	cmp	r3, #0
    1350:	d10b      	bne.n	136a <Scheduler_MainFunction+0xbe>
                        SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
    1352:	4b36      	ldr	r3, [pc, #216]	; (142c <Scheduler_MainFunction+0x180>)
    1354:	681b      	ldr	r3, [r3, #0]
    1356:	6919      	ldr	r1, [r3, #16]
    1358:	f89d 200b 	ldrb.w	r2, [sp, #11]
    135c:	4613      	mov	r3, r2
    135e:	005b      	lsls	r3, r3, #1
    1360:	4413      	add	r3, r2
    1362:	009b      	lsls	r3, r3, #2
    1364:	440b      	add	r3, r1
    1366:	689b      	ldr	r3, [r3, #8]
    1368:	4798      	blx	r3
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
    136a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    136e:	3301      	adds	r3, #1
    1370:	f88d 300b 	strb.w	r3, [sp, #11]
    1374:	4b2d      	ldr	r3, [pc, #180]	; (142c <Scheduler_MainFunction+0x180>)
    1376:	681b      	ldr	r3, [r3, #0]
    1378:	7b1b      	ldrb	r3, [r3, #12]
    137a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    137e:	429a      	cmp	r2, r3
    1380:	d3bd      	bcc.n	12fe <Scheduler_MainFunction+0x52>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
    1382:	2300      	movs	r3, #0
    1384:	f88d 300b 	strb.w	r3, [sp, #11]
    1388:	e045      	b.n	1416 <Scheduler_MainFunction+0x16a>
                //Verifying execution of task i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
    138a:	4b29      	ldr	r3, [pc, #164]	; (1430 <Scheduler_MainFunction+0x184>)
    138c:	681b      	ldr	r3, [r3, #0]
    138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1390:	f89d 200b 	ldrb.w	r2, [sp, #11]
    1394:	4611      	mov	r1, r2
    1396:	4618      	mov	r0, r3
    1398:	f7ff fb72 	bl	a80 <Bfx_GetBit_u32u8_u8>
    139c:	4603      	mov	r3, r0
    139e:	2b00      	cmp	r3, #0
    13a0:	d034      	beq.n	140c <Scheduler_MainFunction+0x160>
                    SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
    13a2:	4b23      	ldr	r3, [pc, #140]	; (1430 <Scheduler_MainFunction+0x184>)
    13a4:	681b      	ldr	r3, [r3, #0]
    13a6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    13aa:	3202      	adds	r2, #2
    13ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    13b0:	4b1e      	ldr	r3, [pc, #120]	; (142c <Scheduler_MainFunction+0x180>)
    13b2:	681b      	ldr	r3, [r3, #0]
    13b4:	6819      	ldr	r1, [r3, #0]
    13b6:	4b1e      	ldr	r3, [pc, #120]	; (1430 <Scheduler_MainFunction+0x184>)
    13b8:	681b      	ldr	r3, [r3, #0]
    13ba:	f89d 200b 	ldrb.w	r2, [sp, #11]
    13be:	4401      	add	r1, r0
    13c0:	3202      	adds	r2, #2
    13c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                    //Verifying the execution of callback i.
                    if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
    13c6:	4b1a      	ldr	r3, [pc, #104]	; (1430 <Scheduler_MainFunction+0x184>)
    13c8:	681b      	ldr	r3, [r3, #0]
    13ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
    13ce:	3202      	adds	r2, #2
    13d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    13d4:	4b16      	ldr	r3, [pc, #88]	; (1430 <Scheduler_MainFunction+0x184>)
    13d6:	681b      	ldr	r3, [r3, #0]
    13d8:	f89d 100b 	ldrb.w	r1, [sp, #11]
    13dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    13e0:	429a      	cmp	r2, r3
    13e2:	d313      	bcc.n	140c <Scheduler_MainFunction+0x160>
                        SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
    13e4:	4b11      	ldr	r3, [pc, #68]	; (142c <Scheduler_MainFunction+0x180>)
    13e6:	681b      	ldr	r3, [r3, #0]
    13e8:	6899      	ldr	r1, [r3, #8]
    13ea:	f89d 200b 	ldrb.w	r2, [sp, #11]
    13ee:	4613      	mov	r3, r2
    13f0:	005b      	lsls	r3, r3, #1
    13f2:	4413      	add	r3, r2
    13f4:	009b      	lsls	r3, r3, #2
    13f6:	440b      	add	r3, r1
    13f8:	689b      	ldr	r3, [r3, #8]
    13fa:	4798      	blx	r3
                        SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
    13fc:	4b0c      	ldr	r3, [pc, #48]	; (1430 <Scheduler_MainFunction+0x184>)
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	f89d 200b 	ldrb.w	r2, [sp, #11]
    1404:	3202      	adds	r2, #2
    1406:	2100      	movs	r1, #0
    1408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
    140c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    1410:	3301      	adds	r3, #1
    1412:	f88d 300b 	strb.w	r3, [sp, #11]
    1416:	4b05      	ldr	r3, [pc, #20]	; (142c <Scheduler_MainFunction+0x180>)
    1418:	681b      	ldr	r3, [r3, #0]
    141a:	791b      	ldrb	r3, [r3, #4]
    141c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    1420:	429a      	cmp	r2, r3
    1422:	d3b2      	bcc.n	138a <Scheduler_MainFunction+0xde>
                    }
                }
            }

            elapsed_time = 0;   //Reset time follow up for tick.
    1424:	2300      	movs	r3, #0
    1426:	9303      	str	r3, [sp, #12]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
    1428:	e758      	b.n	12dc <Scheduler_MainFunction+0x30>
    142a:	bf00      	nop
    142c:	1fff8b40 	.word	0x1fff8b40
    1430:	1fff8b44 	.word	0x1fff8b44

00001434 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    1434:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    1436:	2300      	movs	r3, #0
    1438:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    143a:	2300      	movs	r3, #0
    143c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    143e:	2300      	movs	r3, #0
    1440:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    1442:	2300      	movs	r3, #0
    1444:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    1446:	4b44      	ldr	r3, [pc, #272]	; (1558 <init_data_bss+0x124>)
    1448:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    144a:	4b44      	ldr	r3, [pc, #272]	; (155c <init_data_bss+0x128>)
    144c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    144e:	9b05      	ldr	r3, [sp, #20]
    1450:	681b      	ldr	r3, [r3, #0]
    1452:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    1454:	9b05      	ldr	r3, [sp, #20]
    1456:	3304      	adds	r3, #4
    1458:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    145a:	9b05      	ldr	r3, [sp, #20]
    145c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    145e:	2300      	movs	r3, #0
    1460:	9309      	str	r3, [sp, #36]	; 0x24
    1462:	e03d      	b.n	14e0 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1464:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1466:	4613      	mov	r3, r2
    1468:	005b      	lsls	r3, r3, #1
    146a:	4413      	add	r3, r2
    146c:	009b      	lsls	r3, r3, #2
    146e:	461a      	mov	r2, r3
    1470:	9b03      	ldr	r3, [sp, #12]
    1472:	4413      	add	r3, r2
    1474:	685b      	ldr	r3, [r3, #4]
    1476:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    1478:	9a09      	ldr	r2, [sp, #36]	; 0x24
    147a:	4613      	mov	r3, r2
    147c:	005b      	lsls	r3, r3, #1
    147e:	4413      	add	r3, r2
    1480:	009b      	lsls	r3, r3, #2
    1482:	461a      	mov	r2, r3
    1484:	9b03      	ldr	r3, [sp, #12]
    1486:	4413      	add	r3, r2
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    148c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    148e:	4613      	mov	r3, r2
    1490:	005b      	lsls	r3, r3, #1
    1492:	4413      	add	r3, r2
    1494:	009b      	lsls	r3, r3, #2
    1496:	461a      	mov	r2, r3
    1498:	9b03      	ldr	r3, [sp, #12]
    149a:	4413      	add	r3, r2
    149c:	689b      	ldr	r3, [r3, #8]
    149e:	4619      	mov	r1, r3
    14a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    14a2:	4613      	mov	r3, r2
    14a4:	005b      	lsls	r3, r3, #1
    14a6:	4413      	add	r3, r2
    14a8:	009b      	lsls	r3, r3, #2
    14aa:	461a      	mov	r2, r3
    14ac:	9b03      	ldr	r3, [sp, #12]
    14ae:	4413      	add	r3, r2
    14b0:	685b      	ldr	r3, [r3, #4]
    14b2:	1acb      	subs	r3, r1, r3
    14b4:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    14b6:	2300      	movs	r3, #0
    14b8:	9308      	str	r3, [sp, #32]
    14ba:	e00a      	b.n	14d2 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    14bc:	9a00      	ldr	r2, [sp, #0]
    14be:	9b08      	ldr	r3, [sp, #32]
    14c0:	441a      	add	r2, r3
    14c2:	9901      	ldr	r1, [sp, #4]
    14c4:	9b08      	ldr	r3, [sp, #32]
    14c6:	440b      	add	r3, r1
    14c8:	7812      	ldrb	r2, [r2, #0]
    14ca:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    14cc:	9b08      	ldr	r3, [sp, #32]
    14ce:	3301      	adds	r3, #1
    14d0:	9308      	str	r3, [sp, #32]
    14d2:	9a08      	ldr	r2, [sp, #32]
    14d4:	9b06      	ldr	r3, [sp, #24]
    14d6:	429a      	cmp	r2, r3
    14d8:	d3f0      	bcc.n	14bc <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    14da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    14dc:	3301      	adds	r3, #1
    14de:	9309      	str	r3, [sp, #36]	; 0x24
    14e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    14e2:	9b07      	ldr	r3, [sp, #28]
    14e4:	429a      	cmp	r2, r3
    14e6:	d3bd      	bcc.n	1464 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    14e8:	9b04      	ldr	r3, [sp, #16]
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    14ee:	9b04      	ldr	r3, [sp, #16]
    14f0:	3304      	adds	r3, #4
    14f2:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    14f4:	9b04      	ldr	r3, [sp, #16]
    14f6:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    14f8:	2300      	movs	r3, #0
    14fa:	9309      	str	r3, [sp, #36]	; 0x24
    14fc:	e024      	b.n	1548 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    14fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1500:	00db      	lsls	r3, r3, #3
    1502:	9a02      	ldr	r2, [sp, #8]
    1504:	4413      	add	r3, r2
    1506:	681b      	ldr	r3, [r3, #0]
    1508:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    150a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    150c:	00db      	lsls	r3, r3, #3
    150e:	9a02      	ldr	r2, [sp, #8]
    1510:	4413      	add	r3, r2
    1512:	685b      	ldr	r3, [r3, #4]
    1514:	4619      	mov	r1, r3
    1516:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1518:	00db      	lsls	r3, r3, #3
    151a:	9a02      	ldr	r2, [sp, #8]
    151c:	4413      	add	r3, r2
    151e:	681b      	ldr	r3, [r3, #0]
    1520:	1acb      	subs	r3, r1, r3
    1522:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1524:	2300      	movs	r3, #0
    1526:	9308      	str	r3, [sp, #32]
    1528:	e007      	b.n	153a <init_data_bss+0x106>
        {
            ram[j] = 0U;
    152a:	9a01      	ldr	r2, [sp, #4]
    152c:	9b08      	ldr	r3, [sp, #32]
    152e:	4413      	add	r3, r2
    1530:	2200      	movs	r2, #0
    1532:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1534:	9b08      	ldr	r3, [sp, #32]
    1536:	3301      	adds	r3, #1
    1538:	9308      	str	r3, [sp, #32]
    153a:	9a08      	ldr	r2, [sp, #32]
    153c:	9b06      	ldr	r3, [sp, #24]
    153e:	429a      	cmp	r2, r3
    1540:	d3f3      	bcc.n	152a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    1542:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1544:	3301      	adds	r3, #1
    1546:	9309      	str	r3, [sp, #36]	; 0x24
    1548:	9a09      	ldr	r2, [sp, #36]	; 0x24
    154a:	9b07      	ldr	r3, [sp, #28]
    154c:	429a      	cmp	r2, r3
    154e:	d3d6      	bcc.n	14fe <init_data_bss+0xca>
        }
    }
}
    1550:	bf00      	nop
    1552:	bf00      	nop
    1554:	b00a      	add	sp, #40	; 0x28
    1556:	4770      	bx	lr
    1558:	00008e98 	.word	0x00008e98
    155c:	00008eb4 	.word	0x00008eb4

00001560 <sys_m4_cache_init>:
{
    1560:	b084      	sub	sp, #16
    1562:	4603      	mov	r3, r0
    1564:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1568:	2300      	movs	r3, #0
    156a:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    156e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1572:	2b00      	cmp	r3, #0
    1574:	d118      	bne.n	15a8 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    1576:	4b10      	ldr	r3, [pc, #64]	; (15b8 <sys_m4_cache_init+0x58>)
    1578:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    157c:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    157e:	4b0e      	ldr	r3, [pc, #56]	; (15b8 <sys_m4_cache_init+0x58>)
    1580:	681b      	ldr	r3, [r3, #0]
    1582:	4a0d      	ldr	r2, [pc, #52]	; (15b8 <sys_m4_cache_init+0x58>)
    1584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1588:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    158a:	bf00      	nop
    158c:	4b0a      	ldr	r3, [pc, #40]	; (15b8 <sys_m4_cache_init+0x58>)
    158e:	681b      	ldr	r3, [r3, #0]
    1590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1598:	d0f8      	beq.n	158c <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    159a:	4b07      	ldr	r3, [pc, #28]	; (15b8 <sys_m4_cache_init+0x58>)
    159c:	681b      	ldr	r3, [r3, #0]
    159e:	4a06      	ldr	r2, [pc, #24]	; (15b8 <sys_m4_cache_init+0x58>)
    15a0:	f043 0301 	orr.w	r3, r3, #1
    15a4:	6013      	str	r3, [r2, #0]
    15a6:	e002      	b.n	15ae <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    15a8:	2301      	movs	r3, #1
    15aa:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    15ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    15b2:	4618      	mov	r0, r3
    15b4:	b004      	add	sp, #16
    15b6:	4770      	bx	lr
    15b8:	e0082000 	.word	0xe0082000

000015bc <startup_go_to_user_mode>:
}
    15bc:	bf00      	nop
    15be:	4770      	bx	lr

000015c0 <Sys_GetCoreID>:
    return 0U;
    15c0:	2300      	movs	r3, #0
}
    15c2:	4618      	mov	r0, r3
    15c4:	4770      	bx	lr

000015c6 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    15c6:	e7fe      	b.n	15c6 <HardFault_Handler>

000015c8 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    15c8:	e7fe      	b.n	15c8 <MemManage_Handler>

000015ca <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    15ca:	e7fe      	b.n	15ca <BusFault_Handler>

000015cc <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    15cc:	e7fe      	b.n	15cc <UsageFault_Handler>

000015ce <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    15ce:	e7fe      	b.n	15ce <SVC_Handler>

000015d0 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    15d0:	e7fe      	b.n	15d0 <DebugMon_Handler>

000015d2 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    15d2:	e7fe      	b.n	15d2 <PendSV_Handler>

000015d4 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    15d4:	e7fe      	b.n	15d4 <SysTick_Handler>

000015d6 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    15d6:	e7fe      	b.n	15d6 <undefined_handler>

000015d8 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->1 Mhz.
 *  -SIRCDIV2_CLK -->Disabled
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    15d8:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    15da:	4805      	ldr	r0, [pc, #20]	; (15f0 <MCU_clocks+0x18>)
    15dc:	f003 ff10 	bl	5400 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    15e0:	2000      	movs	r0, #0
    15e2:	f003 ff85 	bl	54f0 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    15e6:	2000      	movs	r0, #0
    15e8:	f003 ff5e 	bl	54a8 <Mcu_InitClock>
    
    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    15ec:	bf00      	nop
    15ee:	bd08      	pop	{r3, pc}
    15f0:	00008b3c 	.word	0x00008b3c

000015f4 <EcuM_Init>:
 * @brief This function initialize the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    15f4:	b508      	push	{r3, lr}
    MCU_clocks();
    15f6:	f7ff ffef 	bl	15d8 <MCU_clocks>
    OsIf_Init( NULL_PTR );//Init Osif timer.
    15fa:	2000      	movs	r0, #0
    15fc:	f000 f96a 	bl	18d4 <OsIf_Init>
    Port_Init( &Port_Config );//Init port driver and configuration.
    1600:	4802      	ldr	r0, [pc, #8]	; (160c <EcuM_Init+0x18>)
    1602:	f004 faff 	bl	5c04 <Port_Init>
    1606:	bf00      	nop
    1608:	bd08      	pop	{r3, pc}
    160a:	bf00      	nop
    160c:	00008e4c 	.word	0x00008e4c

00001610 <DoubleClick_stMachine>:

/**
 * @brief This function is the double click state machine.
 * 
 */
void DoubleClick_stMachine( void ) {
    1610:	b500      	push	{lr}
    1612:	b083      	sub	sp, #12
    //local data
    uint8 i = 0;
    1614:	2300      	movs	r3, #0
    1616:	f88d 3007 	strb.w	r3, [sp, #7]
    QueueMessage Message_write; //Message to write in the queue1.

    for ( i = 0; i < 3; i++ ) { //Executing state machine for each button.
    161a:	2300      	movs	r3, #0
    161c:	f88d 3007 	strb.w	r3, [sp, #7]
    1620:	e138      	b.n	1894 <DoubleClick_stMachine+0x284>
        switch( stBtnMachine[i].State ) {
    1622:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1626:	49a0      	ldr	r1, [pc, #640]	; (18a8 <DoubleClick_stMachine+0x298>)
    1628:	4613      	mov	r3, r2
    162a:	005b      	lsls	r3, r3, #1
    162c:	4413      	add	r3, r2
    162e:	440b      	add	r3, r1
    1630:	3301      	adds	r3, #1
    1632:	781b      	ldrb	r3, [r3, #0]
    1634:	2b04      	cmp	r3, #4
    1636:	f200 811d 	bhi.w	1874 <DoubleClick_stMachine+0x264>
    163a:	a201      	add	r2, pc, #4	; (adr r2, 1640 <DoubleClick_stMachine+0x30>)
    163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1640:	00001655 	.word	0x00001655
    1644:	000016a7 	.word	0x000016a7
    1648:	0000170f 	.word	0x0000170f
    164c:	000017ab 	.word	0x000017ab
    1650:	00001829 	.word	0x00001829
            case IDLE :
                //Checks if the button is pressed.
                if ( Dio_ReadChannel( stBtnMachine[i].Button ) == STD_LOW ) {
    1654:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1658:	4993      	ldr	r1, [pc, #588]	; (18a8 <DoubleClick_stMachine+0x298>)
    165a:	4613      	mov	r3, r2
    165c:	005b      	lsls	r3, r3, #1
    165e:	4413      	add	r3, r2
    1660:	440b      	add	r3, r1
    1662:	781b      	ldrb	r3, [r3, #0]
    1664:	b29b      	uxth	r3, r3
    1666:	4618      	mov	r0, r3
    1668:	f004 ffe0 	bl	662c <Dio_ReadChannel>
    166c:	4603      	mov	r3, r0
    166e:	2b00      	cmp	r3, #0
    1670:	f040 8102 	bne.w	1878 <DoubleClick_stMachine+0x268>
                    Scheduler_ReloadTimer( stBtnMachine[i].Timer, SCHEDULER_TIMER_TIMEOUT_300MS );   //Starting timer 300ms.
    1674:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1678:	498b      	ldr	r1, [pc, #556]	; (18a8 <DoubleClick_stMachine+0x298>)
    167a:	4613      	mov	r3, r2
    167c:	005b      	lsls	r3, r3, #1
    167e:	4413      	add	r3, r2
    1680:	440b      	add	r3, r1
    1682:	3302      	adds	r3, #2
    1684:	781b      	ldrb	r3, [r3, #0]
    1686:	f44f 7196 	mov.w	r1, #300	; 0x12c
    168a:	4618      	mov	r0, r3
    168c:	f7ff fdbc 	bl	1208 <Scheduler_ReloadTimer>
                    stBtnMachine[i].State = SINGLE_PRESS;
    1690:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1694:	4984      	ldr	r1, [pc, #528]	; (18a8 <DoubleClick_stMachine+0x298>)
    1696:	4613      	mov	r3, r2
    1698:	005b      	lsls	r3, r3, #1
    169a:	4413      	add	r3, r2
    169c:	440b      	add	r3, r1
    169e:	3301      	adds	r3, #1
    16a0:	2201      	movs	r2, #1
    16a2:	701a      	strb	r2, [r3, #0]
                }
            break;
    16a4:	e0e8      	b.n	1878 <DoubleClick_stMachine+0x268>
        
            case SINGLE_PRESS :
                //Checking timer timeout.
                if ( Scheduler_GetTimer( stBtnMachine[i].Timer ) == 0 ) {
    16a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    16aa:	497f      	ldr	r1, [pc, #508]	; (18a8 <DoubleClick_stMachine+0x298>)
    16ac:	4613      	mov	r3, r2
    16ae:	005b      	lsls	r3, r3, #1
    16b0:	4413      	add	r3, r2
    16b2:	440b      	add	r3, r1
    16b4:	3302      	adds	r3, #2
    16b6:	781b      	ldrb	r3, [r3, #0]
    16b8:	4618      	mov	r0, r3
    16ba:	f7ff fd7f 	bl	11bc <Scheduler_GetTimer>
    16be:	4603      	mov	r3, r0
    16c0:	2b00      	cmp	r3, #0
    16c2:	d109      	bne.n	16d8 <DoubleClick_stMachine+0xc8>
                    stBtnMachine[i].State = HOLD;
    16c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    16c8:	4977      	ldr	r1, [pc, #476]	; (18a8 <DoubleClick_stMachine+0x298>)
    16ca:	4613      	mov	r3, r2
    16cc:	005b      	lsls	r3, r3, #1
    16ce:	4413      	add	r3, r2
    16d0:	440b      	add	r3, r1
    16d2:	3301      	adds	r3, #1
    16d4:	2204      	movs	r2, #4
    16d6:	701a      	strb	r2, [r3, #0]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( stBtnMachine[i].Button ) == STD_HIGH ) {
    16d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    16dc:	4972      	ldr	r1, [pc, #456]	; (18a8 <DoubleClick_stMachine+0x298>)
    16de:	4613      	mov	r3, r2
    16e0:	005b      	lsls	r3, r3, #1
    16e2:	4413      	add	r3, r2
    16e4:	440b      	add	r3, r1
    16e6:	781b      	ldrb	r3, [r3, #0]
    16e8:	b29b      	uxth	r3, r3
    16ea:	4618      	mov	r0, r3
    16ec:	f004 ff9e 	bl	662c <Dio_ReadChannel>
    16f0:	4603      	mov	r3, r0
    16f2:	2b01      	cmp	r3, #1
    16f4:	f040 80c2 	bne.w	187c <DoubleClick_stMachine+0x26c>
                    stBtnMachine[i].State = SINGLE_RELEASE;
    16f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    16fc:	496a      	ldr	r1, [pc, #424]	; (18a8 <DoubleClick_stMachine+0x298>)
    16fe:	4613      	mov	r3, r2
    1700:	005b      	lsls	r3, r3, #1
    1702:	4413      	add	r3, r2
    1704:	440b      	add	r3, r1
    1706:	3301      	adds	r3, #1
    1708:	2202      	movs	r2, #2
    170a:	701a      	strb	r2, [r3, #0]
                }
            break;
    170c:	e0b6      	b.n	187c <DoubleClick_stMachine+0x26c>
        
            case SINGLE_RELEASE :
                //Checking timer timeout.
                if ( Scheduler_GetTimer( stBtnMachine[i].Timer ) == 0 ) { //Single click
    170e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1712:	4965      	ldr	r1, [pc, #404]	; (18a8 <DoubleClick_stMachine+0x298>)
    1714:	4613      	mov	r3, r2
    1716:	005b      	lsls	r3, r3, #1
    1718:	4413      	add	r3, r2
    171a:	440b      	add	r3, r1
    171c:	3302      	adds	r3, #2
    171e:	781b      	ldrb	r3, [r3, #0]
    1720:	4618      	mov	r0, r3
    1722:	f7ff fd4b 	bl	11bc <Scheduler_GetTimer>
    1726:	4603      	mov	r3, r0
    1728:	2b00      	cmp	r3, #0
    172a:	d115      	bne.n	1758 <DoubleClick_stMachine+0x148>
                    //Writing to the queue1 click detected.
                    Message_write.Button = i;
    172c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1730:	f88d 3004 	strb.w	r3, [sp, #4]
                    Message_write.Click = SINGLE_CLICK;
    1734:	2300      	movs	r3, #0
    1736:	f88d 3005 	strb.w	r3, [sp, #5]
                    Scheduler_WriteQueue( SCHEDULER_QUEUE1_ID, &Message_write );
    173a:	ab01      	add	r3, sp, #4
    173c:	4619      	mov	r1, r3
    173e:	2001      	movs	r0, #1
    1740:	f7ff fa86 	bl	c50 <Scheduler_WriteQueue>
                    stBtnMachine[i].State = IDLE;
    1744:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1748:	4957      	ldr	r1, [pc, #348]	; (18a8 <DoubleClick_stMachine+0x298>)
    174a:	4613      	mov	r3, r2
    174c:	005b      	lsls	r3, r3, #1
    174e:	4413      	add	r3, r2
    1750:	440b      	add	r3, r1
    1752:	3301      	adds	r3, #1
    1754:	2200      	movs	r2, #0
    1756:	701a      	strb	r2, [r3, #0]
                }

                //Checks if the button is pressed.
                if ( Dio_ReadChannel( stBtnMachine[i].Button  ) == STD_LOW ) {
    1758:	f89d 2007 	ldrb.w	r2, [sp, #7]
    175c:	4952      	ldr	r1, [pc, #328]	; (18a8 <DoubleClick_stMachine+0x298>)
    175e:	4613      	mov	r3, r2
    1760:	005b      	lsls	r3, r3, #1
    1762:	4413      	add	r3, r2
    1764:	440b      	add	r3, r1
    1766:	781b      	ldrb	r3, [r3, #0]
    1768:	b29b      	uxth	r3, r3
    176a:	4618      	mov	r0, r3
    176c:	f004 ff5e 	bl	662c <Dio_ReadChannel>
    1770:	4603      	mov	r3, r0
    1772:	2b00      	cmp	r3, #0
    1774:	f040 8084 	bne.w	1880 <DoubleClick_stMachine+0x270>
                    Scheduler_ReloadTimer( stBtnMachine[i].Timer, SCHEDULER_TIMER_TIMEOUT_300MS );   //Starting timer 300ms.
    1778:	f89d 2007 	ldrb.w	r2, [sp, #7]
    177c:	494a      	ldr	r1, [pc, #296]	; (18a8 <DoubleClick_stMachine+0x298>)
    177e:	4613      	mov	r3, r2
    1780:	005b      	lsls	r3, r3, #1
    1782:	4413      	add	r3, r2
    1784:	440b      	add	r3, r1
    1786:	3302      	adds	r3, #2
    1788:	781b      	ldrb	r3, [r3, #0]
    178a:	f44f 7196 	mov.w	r1, #300	; 0x12c
    178e:	4618      	mov	r0, r3
    1790:	f7ff fd3a 	bl	1208 <Scheduler_ReloadTimer>
                    stBtnMachine[i].State = DOUBLE_PRESS;
    1794:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1798:	4943      	ldr	r1, [pc, #268]	; (18a8 <DoubleClick_stMachine+0x298>)
    179a:	4613      	mov	r3, r2
    179c:	005b      	lsls	r3, r3, #1
    179e:	4413      	add	r3, r2
    17a0:	440b      	add	r3, r1
    17a2:	3301      	adds	r3, #1
    17a4:	2203      	movs	r2, #3
    17a6:	701a      	strb	r2, [r3, #0]
                }
            break;
    17a8:	e06a      	b.n	1880 <DoubleClick_stMachine+0x270>
        
            case DOUBLE_PRESS :
                //Checking timer timeout.
                if ( Scheduler_GetTimer( stBtnMachine[i].Timer ) == 0 ) {
    17aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    17ae:	493e      	ldr	r1, [pc, #248]	; (18a8 <DoubleClick_stMachine+0x298>)
    17b0:	4613      	mov	r3, r2
    17b2:	005b      	lsls	r3, r3, #1
    17b4:	4413      	add	r3, r2
    17b6:	440b      	add	r3, r1
    17b8:	3302      	adds	r3, #2
    17ba:	781b      	ldrb	r3, [r3, #0]
    17bc:	4618      	mov	r0, r3
    17be:	f7ff fcfd 	bl	11bc <Scheduler_GetTimer>
    17c2:	4603      	mov	r3, r0
    17c4:	2b00      	cmp	r3, #0
    17c6:	d109      	bne.n	17dc <DoubleClick_stMachine+0x1cc>
                    stBtnMachine[i].State = HOLD;
    17c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    17cc:	4936      	ldr	r1, [pc, #216]	; (18a8 <DoubleClick_stMachine+0x298>)
    17ce:	4613      	mov	r3, r2
    17d0:	005b      	lsls	r3, r3, #1
    17d2:	4413      	add	r3, r2
    17d4:	440b      	add	r3, r1
    17d6:	3301      	adds	r3, #1
    17d8:	2204      	movs	r2, #4
    17da:	701a      	strb	r2, [r3, #0]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( stBtnMachine[i].Button ) == STD_HIGH ) {//Double click.
    17dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    17e0:	4931      	ldr	r1, [pc, #196]	; (18a8 <DoubleClick_stMachine+0x298>)
    17e2:	4613      	mov	r3, r2
    17e4:	005b      	lsls	r3, r3, #1
    17e6:	4413      	add	r3, r2
    17e8:	440b      	add	r3, r1
    17ea:	781b      	ldrb	r3, [r3, #0]
    17ec:	b29b      	uxth	r3, r3
    17ee:	4618      	mov	r0, r3
    17f0:	f004 ff1c 	bl	662c <Dio_ReadChannel>
    17f4:	4603      	mov	r3, r0
    17f6:	2b01      	cmp	r3, #1
    17f8:	d144      	bne.n	1884 <DoubleClick_stMachine+0x274>
                    //Writing to the queue1 click detected.
                    Message_write.Button = i;
    17fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    17fe:	f88d 3004 	strb.w	r3, [sp, #4]
                    Message_write.Click = DOUBLE_CLICK;
    1802:	2301      	movs	r3, #1
    1804:	f88d 3005 	strb.w	r3, [sp, #5]
                    Scheduler_WriteQueue( SCHEDULER_QUEUE1_ID, &Message_write );
    1808:	ab01      	add	r3, sp, #4
    180a:	4619      	mov	r1, r3
    180c:	2001      	movs	r0, #1
    180e:	f7ff fa1f 	bl	c50 <Scheduler_WriteQueue>
                    stBtnMachine[i].State = IDLE;
    1812:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1816:	4924      	ldr	r1, [pc, #144]	; (18a8 <DoubleClick_stMachine+0x298>)
    1818:	4613      	mov	r3, r2
    181a:	005b      	lsls	r3, r3, #1
    181c:	4413      	add	r3, r2
    181e:	440b      	add	r3, r1
    1820:	3301      	adds	r3, #1
    1822:	2200      	movs	r2, #0
    1824:	701a      	strb	r2, [r3, #0]
                }
            break;
    1826:	e02d      	b.n	1884 <DoubleClick_stMachine+0x274>
        
            case HOLD ://Hold click.
                //Checking if the button is released.
                if ( Dio_ReadChannel( stBtnMachine[i].Button ) == STD_HIGH ) {
    1828:	f89d 2007 	ldrb.w	r2, [sp, #7]
    182c:	491e      	ldr	r1, [pc, #120]	; (18a8 <DoubleClick_stMachine+0x298>)
    182e:	4613      	mov	r3, r2
    1830:	005b      	lsls	r3, r3, #1
    1832:	4413      	add	r3, r2
    1834:	440b      	add	r3, r1
    1836:	781b      	ldrb	r3, [r3, #0]
    1838:	b29b      	uxth	r3, r3
    183a:	4618      	mov	r0, r3
    183c:	f004 fef6 	bl	662c <Dio_ReadChannel>
    1840:	4603      	mov	r3, r0
    1842:	2b01      	cmp	r3, #1
    1844:	d120      	bne.n	1888 <DoubleClick_stMachine+0x278>
                    //Writing to the queue1 click detected.
                    Message_write.Button = i;
    1846:	f89d 3007 	ldrb.w	r3, [sp, #7]
    184a:	f88d 3004 	strb.w	r3, [sp, #4]
                    Message_write.Click = HOLD_CLICK;
    184e:	2302      	movs	r3, #2
    1850:	f88d 3005 	strb.w	r3, [sp, #5]
                    Scheduler_WriteQueue( SCHEDULER_QUEUE1_ID, &Message_write );
    1854:	ab01      	add	r3, sp, #4
    1856:	4619      	mov	r1, r3
    1858:	2001      	movs	r0, #1
    185a:	f7ff f9f9 	bl	c50 <Scheduler_WriteQueue>
                    stBtnMachine[i].State = IDLE;
    185e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1862:	4911      	ldr	r1, [pc, #68]	; (18a8 <DoubleClick_stMachine+0x298>)
    1864:	4613      	mov	r3, r2
    1866:	005b      	lsls	r3, r3, #1
    1868:	4413      	add	r3, r2
    186a:	440b      	add	r3, r1
    186c:	3301      	adds	r3, #1
    186e:	2200      	movs	r2, #0
    1870:	701a      	strb	r2, [r3, #0]
                }
            break;
    1872:	e009      	b.n	1888 <DoubleClick_stMachine+0x278>
        
            default :
            break;
    1874:	bf00      	nop
    1876:	e008      	b.n	188a <DoubleClick_stMachine+0x27a>
            break;
    1878:	bf00      	nop
    187a:	e006      	b.n	188a <DoubleClick_stMachine+0x27a>
            break;
    187c:	bf00      	nop
    187e:	e004      	b.n	188a <DoubleClick_stMachine+0x27a>
            break;
    1880:	bf00      	nop
    1882:	e002      	b.n	188a <DoubleClick_stMachine+0x27a>
            break;
    1884:	bf00      	nop
    1886:	e000      	b.n	188a <DoubleClick_stMachine+0x27a>
            break;
    1888:	bf00      	nop
    for ( i = 0; i < 3; i++ ) { //Executing state machine for each button.
    188a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    188e:	3301      	adds	r3, #1
    1890:	f88d 3007 	strb.w	r3, [sp, #7]
    1894:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1898:	2b02      	cmp	r3, #2
    189a:	f67f aec2 	bls.w	1622 <DoubleClick_stMachine+0x12>
        }
    }
}
    189e:	bf00      	nop
    18a0:	bf00      	nop
    18a2:	b003      	add	sp, #12
    18a4:	f85d fb04 	ldr.w	pc, [sp], #4
    18a8:	1fff8b10 	.word	0x1fff8b10

000018ac <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    18ac:	2300      	movs	r3, #0
}
    18ae:	4618      	mov	r0, r3
    18b0:	4770      	bx	lr

000018b2 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    18b2:	b082      	sub	sp, #8
    18b4:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    18b6:	2301      	movs	r3, #1
}
    18b8:	4618      	mov	r0, r3
    18ba:	b002      	add	sp, #8
    18bc:	4770      	bx	lr

000018be <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    18be:	b082      	sub	sp, #8
    18c0:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    18c2:	bf00      	nop
    18c4:	b002      	add	sp, #8
    18c6:	4770      	bx	lr

000018c8 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    18c8:	b082      	sub	sp, #8
    18ca:	9001      	str	r0, [sp, #4]
    return Micros;
    18cc:	9b01      	ldr	r3, [sp, #4]
}
    18ce:	4618      	mov	r0, r3
    18d0:	b002      	add	sp, #8
    18d2:	4770      	bx	lr

000018d4 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    18d4:	b500      	push	{lr}
    18d6:	b083      	sub	sp, #12
    18d8:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    18da:	f000 f86d 	bl	19b8 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    18de:	bf00      	nop
    18e0:	b003      	add	sp, #12
    18e2:	f85d fb04 	ldr.w	pc, [sp], #4

000018e6 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    18e6:	b500      	push	{lr}
    18e8:	b085      	sub	sp, #20
    18ea:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    18ec:	2300      	movs	r3, #0
    18ee:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    18f0:	9b01      	ldr	r3, [sp, #4]
    18f2:	2b00      	cmp	r3, #0
    18f4:	d003      	beq.n	18fe <OsIf_GetCounter+0x18>
    18f6:	9b01      	ldr	r3, [sp, #4]
    18f8:	2b01      	cmp	r3, #1
    18fa:	d004      	beq.n	1906 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    18fc:	e007      	b.n	190e <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    18fe:	f7ff ffd5 	bl	18ac <OsIf_Timer_Dummy_GetCounter>
    1902:	9003      	str	r0, [sp, #12]
            break;
    1904:	e003      	b.n	190e <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1906:	f000 f873 	bl	19f0 <OsIf_Timer_System_GetCounter>
    190a:	9003      	str	r0, [sp, #12]
            break;
    190c:	bf00      	nop
    }

    return Value;
    190e:	9b03      	ldr	r3, [sp, #12]
}
    1910:	4618      	mov	r0, r3
    1912:	b005      	add	sp, #20
    1914:	f85d fb04 	ldr.w	pc, [sp], #4

00001918 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1918:	b500      	push	{lr}
    191a:	b085      	sub	sp, #20
    191c:	9001      	str	r0, [sp, #4]
    191e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1920:	2300      	movs	r3, #0
    1922:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1924:	9b00      	ldr	r3, [sp, #0]
    1926:	2b00      	cmp	r3, #0
    1928:	d003      	beq.n	1932 <OsIf_GetElapsed+0x1a>
    192a:	9b00      	ldr	r3, [sp, #0]
    192c:	2b01      	cmp	r3, #1
    192e:	d005      	beq.n	193c <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1930:	e009      	b.n	1946 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1932:	9801      	ldr	r0, [sp, #4]
    1934:	f7ff ffbd 	bl	18b2 <OsIf_Timer_Dummy_GetElapsed>
    1938:	9003      	str	r0, [sp, #12]
            break;
    193a:	e004      	b.n	1946 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    193c:	9801      	ldr	r0, [sp, #4]
    193e:	f000 f865 	bl	1a0c <OsIf_Timer_System_GetElapsed>
    1942:	9003      	str	r0, [sp, #12]
            break;
    1944:	bf00      	nop
    }

    return Value;
    1946:	9b03      	ldr	r3, [sp, #12]
}
    1948:	4618      	mov	r0, r3
    194a:	b005      	add	sp, #20
    194c:	f85d fb04 	ldr.w	pc, [sp], #4

00001950 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1950:	b500      	push	{lr}
    1952:	b083      	sub	sp, #12
    1954:	9001      	str	r0, [sp, #4]
    1956:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1958:	9b00      	ldr	r3, [sp, #0]
    195a:	2b00      	cmp	r3, #0
    195c:	d003      	beq.n	1966 <OsIf_SetTimerFrequency+0x16>
    195e:	9b00      	ldr	r3, [sp, #0]
    1960:	2b01      	cmp	r3, #1
    1962:	d004      	beq.n	196e <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1964:	e007      	b.n	1976 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1966:	9801      	ldr	r0, [sp, #4]
    1968:	f7ff ffa9 	bl	18be <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    196c:	e003      	b.n	1976 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    196e:	9801      	ldr	r0, [sp, #4]
    1970:	f000 f85c 	bl	1a2c <OsIf_Timer_System_SetTimerFrequency>
            break;
    1974:	bf00      	nop
    }
}
    1976:	bf00      	nop
    1978:	b003      	add	sp, #12
    197a:	f85d fb04 	ldr.w	pc, [sp], #4

0000197e <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    197e:	b500      	push	{lr}
    1980:	b085      	sub	sp, #20
    1982:	9001      	str	r0, [sp, #4]
    1984:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1986:	2300      	movs	r3, #0
    1988:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    198a:	9b00      	ldr	r3, [sp, #0]
    198c:	2b00      	cmp	r3, #0
    198e:	d003      	beq.n	1998 <OsIf_MicrosToTicks+0x1a>
    1990:	9b00      	ldr	r3, [sp, #0]
    1992:	2b01      	cmp	r3, #1
    1994:	d005      	beq.n	19a2 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1996:	e009      	b.n	19ac <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1998:	9801      	ldr	r0, [sp, #4]
    199a:	f7ff ff95 	bl	18c8 <OsIf_Timer_Dummy_MicrosToTicks>
    199e:	9003      	str	r0, [sp, #12]
            break;
    19a0:	e004      	b.n	19ac <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    19a2:	9801      	ldr	r0, [sp, #4]
    19a4:	f000 f850 	bl	1a48 <OsIf_Timer_System_MicrosToTicks>
    19a8:	9003      	str	r0, [sp, #12]
            break;
    19aa:	bf00      	nop
    }

    return Value;
    19ac:	9b03      	ldr	r3, [sp, #12]
}
    19ae:	4618      	mov	r0, r3
    19b0:	b005      	add	sp, #20
    19b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000019b8 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    19b8:	b500      	push	{lr}
    19ba:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    19bc:	2300      	movs	r3, #0
    19be:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    19c0:	4a09      	ldr	r2, [pc, #36]	; (19e8 <OsIf_Timer_System_Init+0x30>)
    19c2:	9b01      	ldr	r3, [sp, #4]
    19c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    19c8:	685a      	ldr	r2, [r3, #4]
    19ca:	4908      	ldr	r1, [pc, #32]	; (19ec <OsIf_Timer_System_Init+0x34>)
    19cc:	9b01      	ldr	r3, [sp, #4]
    19ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    19d2:	4a06      	ldr	r2, [pc, #24]	; (19ec <OsIf_Timer_System_Init+0x34>)
    19d4:	9b01      	ldr	r3, [sp, #4]
    19d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    19da:	4618      	mov	r0, r3
    19dc:	f000 f868 	bl	1ab0 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    19e0:	bf00      	nop
    19e2:	b003      	add	sp, #12
    19e4:	f85d fb04 	ldr.w	pc, [sp], #4
    19e8:	00008b60 	.word	0x00008b60
    19ec:	1fff8b58 	.word	0x1fff8b58

000019f0 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    19f0:	b500      	push	{lr}
    19f2:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    19f4:	2300      	movs	r3, #0
    19f6:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    19f8:	2300      	movs	r3, #0
    19fa:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    19fc:	f000 f86c 	bl	1ad8 <OsIf_Timer_System_Internal_GetCounter>
    1a00:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1a02:	9b01      	ldr	r3, [sp, #4]
}
    1a04:	4618      	mov	r0, r3
    1a06:	b003      	add	sp, #12
    1a08:	f85d fb04 	ldr.w	pc, [sp], #4

00001a0c <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1a0c:	b500      	push	{lr}
    1a0e:	b085      	sub	sp, #20
    1a10:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1a12:	2300      	movs	r3, #0
    1a14:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1a16:	2300      	movs	r3, #0
    1a18:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1a1a:	9801      	ldr	r0, [sp, #4]
    1a1c:	f000 f864 	bl	1ae8 <OsIf_Timer_System_Internal_GetElapsed>
    1a20:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1a22:	9b03      	ldr	r3, [sp, #12]
}
    1a24:	4618      	mov	r0, r3
    1a26:	b005      	add	sp, #20
    1a28:	f85d fb04 	ldr.w	pc, [sp], #4

00001a2c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1a2c:	b084      	sub	sp, #16
    1a2e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1a30:	2300      	movs	r3, #0
    1a32:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1a34:	4903      	ldr	r1, [pc, #12]	; (1a44 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1a36:	9b03      	ldr	r3, [sp, #12]
    1a38:	9a01      	ldr	r2, [sp, #4]
    1a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1a3e:	bf00      	nop
    1a40:	b004      	add	sp, #16
    1a42:	4770      	bx	lr
    1a44:	1fff8b58 	.word	0x1fff8b58

00001a48 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a4a:	b087      	sub	sp, #28
    1a4c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1a4e:	2100      	movs	r1, #0
    1a50:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1a52:	2100      	movs	r1, #0
    1a54:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1a56:	9901      	ldr	r1, [sp, #4]
    1a58:	2000      	movs	r0, #0
    1a5a:	460e      	mov	r6, r1
    1a5c:	4607      	mov	r7, r0
    1a5e:	4812      	ldr	r0, [pc, #72]	; (1aa8 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1a60:	9904      	ldr	r1, [sp, #16]
    1a62:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1a66:	2000      	movs	r0, #0
    1a68:	460c      	mov	r4, r1
    1a6a:	4605      	mov	r5, r0
    1a6c:	fb04 f007 	mul.w	r0, r4, r7
    1a70:	fb06 f105 	mul.w	r1, r6, r5
    1a74:	4401      	add	r1, r0
    1a76:	fba6 2304 	umull	r2, r3, r6, r4
    1a7a:	4419      	add	r1, r3
    1a7c:	460b      	mov	r3, r1
    1a7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1a82:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1a8a:	4a08      	ldr	r2, [pc, #32]	; (1aac <OsIf_Timer_System_MicrosToTicks+0x64>)
    1a8c:	f04f 0300 	mov.w	r3, #0
    1a90:	f7fe fd88 	bl	5a4 <__aeabi_uldivmod>
    1a94:	4602      	mov	r2, r0
    1a96:	460b      	mov	r3, r1
    1a98:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1a9c:	9b02      	ldr	r3, [sp, #8]
    1a9e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1aa0:	9b05      	ldr	r3, [sp, #20]
}
    1aa2:	4618      	mov	r0, r3
    1aa4:	b007      	add	sp, #28
    1aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aa8:	1fff8b58 	.word	0x1fff8b58
    1aac:	000f4240 	.word	0x000f4240

00001ab0 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1ab0:	b082      	sub	sp, #8
    1ab2:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1ab4:	4b07      	ldr	r3, [pc, #28]	; (1ad4 <OsIf_Timer_System_Internal_Init+0x24>)
    1ab6:	2200      	movs	r2, #0
    1ab8:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1aba:	4b06      	ldr	r3, [pc, #24]	; (1ad4 <OsIf_Timer_System_Internal_Init+0x24>)
    1abc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1ac0:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1ac2:	4b04      	ldr	r3, [pc, #16]	; (1ad4 <OsIf_Timer_System_Internal_Init+0x24>)
    1ac4:	2200      	movs	r2, #0
    1ac6:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1ac8:	4b02      	ldr	r3, [pc, #8]	; (1ad4 <OsIf_Timer_System_Internal_Init+0x24>)
    1aca:	2205      	movs	r2, #5
    1acc:	601a      	str	r2, [r3, #0]
}
    1ace:	bf00      	nop
    1ad0:	b002      	add	sp, #8
    1ad2:	4770      	bx	lr
    1ad4:	e000e010 	.word	0xe000e010

00001ad8 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1ad8:	4b02      	ldr	r3, [pc, #8]	; (1ae4 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1ada:	689b      	ldr	r3, [r3, #8]
    1adc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1ae0:	4618      	mov	r0, r3
    1ae2:	4770      	bx	lr
    1ae4:	e000e010 	.word	0xe000e010

00001ae8 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1ae8:	b084      	sub	sp, #16
    1aea:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1aec:	4b10      	ldr	r3, [pc, #64]	; (1b30 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1aee:	689b      	ldr	r3, [r3, #8]
    1af0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1af4:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1af6:	2300      	movs	r3, #0
    1af8:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1afa:	9b01      	ldr	r3, [sp, #4]
    1afc:	681b      	ldr	r3, [r3, #0]
    1afe:	9a02      	ldr	r2, [sp, #8]
    1b00:	429a      	cmp	r2, r3
    1b02:	d909      	bls.n	1b18 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1b04:	9b01      	ldr	r3, [sp, #4]
    1b06:	681a      	ldr	r2, [r3, #0]
    1b08:	9b02      	ldr	r3, [sp, #8]
    1b0a:	1ad3      	subs	r3, r2, r3
    1b0c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1b10:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1b14:	9303      	str	r3, [sp, #12]
    1b16:	e004      	b.n	1b22 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1b18:	9b01      	ldr	r3, [sp, #4]
    1b1a:	681a      	ldr	r2, [r3, #0]
    1b1c:	9b02      	ldr	r3, [sp, #8]
    1b1e:	1ad3      	subs	r3, r2, r3
    1b20:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1b22:	9b01      	ldr	r3, [sp, #4]
    1b24:	9a02      	ldr	r2, [sp, #8]
    1b26:	601a      	str	r2, [r3, #0]

    return dif;
    1b28:	9b03      	ldr	r3, [sp, #12]
}
    1b2a:	4618      	mov	r0, r3
    1b2c:	b004      	add	sp, #16
    1b2e:	4770      	bx	lr
    1b30:	e000e010 	.word	0xe000e010

00001b34 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1b34:	b082      	sub	sp, #8
    1b36:	9001      	str	r0, [sp, #4]
    1b38:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1b3a:	bf00      	nop
    1b3c:	b002      	add	sp, #8
    1b3e:	4770      	bx	lr

00001b40 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1b40:	b500      	push	{lr}
    1b42:	b085      	sub	sp, #20
    1b44:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1b46:	4b24      	ldr	r3, [pc, #144]	; (1bd8 <Clock_Ip_UpdateDriverContext+0x98>)
    1b48:	2201      	movs	r2, #1
    1b4a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1b4c:	4b23      	ldr	r3, [pc, #140]	; (1bdc <Clock_Ip_UpdateDriverContext+0x9c>)
    1b4e:	681b      	ldr	r3, [r3, #0]
    1b50:	2102      	movs	r1, #2
    1b52:	4618      	mov	r0, r3
    1b54:	f003 fc32 	bl	53bc <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1b58:	2300      	movs	r3, #0
    1b5a:	f88d 300f 	strb.w	r3, [sp, #15]
    1b5e:	e015      	b.n	1b8c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1b60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b64:	9a01      	ldr	r2, [sp, #4]
    1b66:	334a      	adds	r3, #74	; 0x4a
    1b68:	00db      	lsls	r3, r3, #3
    1b6a:	4413      	add	r3, r2
    1b6c:	6858      	ldr	r0, [r3, #4]
    1b6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b72:	9a01      	ldr	r2, [sp, #4]
    1b74:	334a      	adds	r3, #74	; 0x4a
    1b76:	00db      	lsls	r3, r3, #3
    1b78:	4413      	add	r3, r2
    1b7a:	689b      	ldr	r3, [r3, #8]
    1b7c:	4619      	mov	r1, r3
    1b7e:	f001 fadc 	bl	313a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1b82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b86:	3301      	adds	r3, #1
    1b88:	f88d 300f 	strb.w	r3, [sp, #15]
    1b8c:	9b01      	ldr	r3, [sp, #4]
    1b8e:	7bdb      	ldrb	r3, [r3, #15]
    1b90:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1b94:	429a      	cmp	r2, r3
    1b96:	d3e3      	bcc.n	1b60 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1b98:	f000 f824 	bl	1be4 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1b9c:	2301      	movs	r3, #1
    1b9e:	f88d 300f 	strb.w	r3, [sp, #15]
    1ba2:	e00e      	b.n	1bc2 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1ba4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1ba8:	9b01      	ldr	r3, [sp, #4]
    1baa:	327e      	adds	r2, #126	; 0x7e
    1bac:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1bb0:	490b      	ldr	r1, [pc, #44]	; (1be0 <Clock_Ip_UpdateDriverContext+0xa0>)
    1bb2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1bb6:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1bb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1bbc:	3301      	adds	r3, #1
    1bbe:	f88d 300f 	strb.w	r3, [sp, #15]
    1bc2:	9b01      	ldr	r3, [sp, #4]
    1bc4:	7cdb      	ldrb	r3, [r3, #19]
    1bc6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1bca:	429a      	cmp	r2, r3
    1bcc:	d3ea      	bcc.n	1ba4 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1bce:	bf00      	nop
    1bd0:	bf00      	nop
    1bd2:	b005      	add	sp, #20
    1bd4:	f85d fb04 	ldr.w	pc, [sp], #4
    1bd8:	1fff8b19 	.word	0x1fff8b19
    1bdc:	1fff8b5c 	.word	0x1fff8b5c
    1be0:	1fff8b68 	.word	0x1fff8b68

00001be4 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1be4:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1be6:	4b23      	ldr	r3, [pc, #140]	; (1c74 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1be8:	781b      	ldrb	r3, [r3, #0]
    1bea:	f083 0301 	eor.w	r3, r3, #1
    1bee:	b2db      	uxtb	r3, r3
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d03d      	beq.n	1c70 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1bf4:	4b1f      	ldr	r3, [pc, #124]	; (1c74 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1bf6:	2201      	movs	r2, #1
    1bf8:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1bfa:	4b1f      	ldr	r3, [pc, #124]	; (1c78 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1bfc:	685b      	ldr	r3, [r3, #4]
    1bfe:	2100      	movs	r1, #0
    1c00:	2000      	movs	r0, #0
    1c02:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1c04:	4b1c      	ldr	r3, [pc, #112]	; (1c78 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1c06:	689b      	ldr	r3, [r3, #8]
    1c08:	2057      	movs	r0, #87	; 0x57
    1c0a:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1c0c:	4b1b      	ldr	r3, [pc, #108]	; (1c7c <Clock_Ip_CallEmptyCallbacks+0x98>)
    1c0e:	681b      	ldr	r3, [r3, #0]
    1c10:	2000      	movs	r0, #0
    1c12:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1c14:	4b1a      	ldr	r3, [pc, #104]	; (1c80 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1c16:	681b      	ldr	r3, [r3, #0]
    1c18:	2000      	movs	r0, #0
    1c1a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1c1c:	4b19      	ldr	r3, [pc, #100]	; (1c84 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1c1e:	681b      	ldr	r3, [r3, #0]
    1c20:	2000      	movs	r0, #0
    1c22:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1c24:	4b18      	ldr	r3, [pc, #96]	; (1c88 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1c26:	685b      	ldr	r3, [r3, #4]
    1c28:	2000      	movs	r0, #0
    1c2a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1c2c:	4b16      	ldr	r3, [pc, #88]	; (1c88 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1c2e:	689b      	ldr	r3, [r3, #8]
    1c30:	2057      	movs	r0, #87	; 0x57
    1c32:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1c34:	4b15      	ldr	r3, [pc, #84]	; (1c8c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1c36:	681b      	ldr	r3, [r3, #0]
    1c38:	2000      	movs	r0, #0
    1c3a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1c3c:	4b13      	ldr	r3, [pc, #76]	; (1c8c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1c3e:	685b      	ldr	r3, [r3, #4]
    1c40:	2100      	movs	r1, #0
    1c42:	2057      	movs	r0, #87	; 0x57
    1c44:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1c46:	4b12      	ldr	r3, [pc, #72]	; (1c90 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1c48:	681b      	ldr	r3, [r3, #0]
    1c4a:	2000      	movs	r0, #0
    1c4c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1c4e:	4b11      	ldr	r3, [pc, #68]	; (1c94 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1c50:	685b      	ldr	r3, [r3, #4]
    1c52:	2000      	movs	r0, #0
    1c54:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1c56:	4b0f      	ldr	r3, [pc, #60]	; (1c94 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1c58:	689b      	ldr	r3, [r3, #8]
    1c5a:	2057      	movs	r0, #87	; 0x57
    1c5c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1c5e:	4b0e      	ldr	r3, [pc, #56]	; (1c98 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1c60:	685b      	ldr	r3, [r3, #4]
    1c62:	2000      	movs	r0, #0
    1c64:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1c66:	4b0d      	ldr	r3, [pc, #52]	; (1c9c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1c68:	681b      	ldr	r3, [r3, #0]
    1c6a:	2100      	movs	r1, #0
    1c6c:	2000      	movs	r0, #0
    1c6e:	4798      	blx	r3
    }
}
    1c70:	bf00      	nop
    1c72:	bd08      	pop	{r3, pc}
    1c74:	1fff8b60 	.word	0x1fff8b60
    1c78:	000085cc 	.word	0x000085cc
    1c7c:	000084e0 	.word	0x000084e0
    1c80:	0000851c 	.word	0x0000851c
    1c84:	00008524 	.word	0x00008524
    1c88:	0000854c 	.word	0x0000854c
    1c8c:	00008558 	.word	0x00008558
    1c90:	00008590 	.word	0x00008590
    1c94:	000085dc 	.word	0x000085dc
    1c98:	00008608 	.word	0x00008608
    1c9c:	00008604 	.word	0x00008604

00001ca0 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1ca0:	b500      	push	{lr}
    1ca2:	b085      	sub	sp, #20
    1ca4:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1ca6:	9b01      	ldr	r3, [sp, #4]
    1ca8:	7adb      	ldrb	r3, [r3, #11]
    1caa:	9303      	str	r3, [sp, #12]
    1cac:	e01f      	b.n	1cee <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1cae:	9b03      	ldr	r3, [sp, #12]
    1cb0:	1e5a      	subs	r2, r3, #1
    1cb2:	9b01      	ldr	r3, [sp, #4]
    1cb4:	320d      	adds	r2, #13
    1cb6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1cba:	495a      	ldr	r1, [pc, #360]	; (1e24 <Clock_Ip_ResetClockConfiguration+0x184>)
    1cbc:	4613      	mov	r3, r2
    1cbe:	00db      	lsls	r3, r3, #3
    1cc0:	4413      	add	r3, r2
    1cc2:	440b      	add	r3, r1
    1cc4:	3301      	adds	r3, #1
    1cc6:	781b      	ldrb	r3, [r3, #0]
    1cc8:	461a      	mov	r2, r3
    1cca:	4b57      	ldr	r3, [pc, #348]	; (1e28 <Clock_Ip_ResetClockConfiguration+0x188>)
    1ccc:	5c9b      	ldrb	r3, [r3, r2]
    1cce:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1cd0:	4a56      	ldr	r2, [pc, #344]	; (1e2c <Clock_Ip_ResetClockConfiguration+0x18c>)
    1cd2:	9b02      	ldr	r3, [sp, #8]
    1cd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1cd8:	9a03      	ldr	r2, [sp, #12]
    1cda:	3a01      	subs	r2, #1
    1cdc:	320d      	adds	r2, #13
    1cde:	00d2      	lsls	r2, r2, #3
    1ce0:	9901      	ldr	r1, [sp, #4]
    1ce2:	440a      	add	r2, r1
    1ce4:	4610      	mov	r0, r2
    1ce6:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1ce8:	9b03      	ldr	r3, [sp, #12]
    1cea:	3b01      	subs	r3, #1
    1cec:	9303      	str	r3, [sp, #12]
    1cee:	9b03      	ldr	r3, [sp, #12]
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d1dc      	bne.n	1cae <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1cf4:	9b01      	ldr	r3, [sp, #4]
    1cf6:	7b9b      	ldrb	r3, [r3, #14]
    1cf8:	9303      	str	r3, [sp, #12]
    1cfa:	e026      	b.n	1d4a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1cfc:	9b03      	ldr	r3, [sp, #12]
    1cfe:	3b01      	subs	r3, #1
    1d00:	9a01      	ldr	r2, [sp, #4]
    1d02:	3324      	adds	r3, #36	; 0x24
    1d04:	011b      	lsls	r3, r3, #4
    1d06:	4413      	add	r3, r2
    1d08:	3304      	adds	r3, #4
    1d0a:	681a      	ldr	r2, [r3, #0]
    1d0c:	4945      	ldr	r1, [pc, #276]	; (1e24 <Clock_Ip_ResetClockConfiguration+0x184>)
    1d0e:	4613      	mov	r3, r2
    1d10:	00db      	lsls	r3, r3, #3
    1d12:	4413      	add	r3, r2
    1d14:	440b      	add	r3, r1
    1d16:	3301      	adds	r3, #1
    1d18:	781b      	ldrb	r3, [r3, #0]
    1d1a:	461a      	mov	r2, r3
    1d1c:	4b44      	ldr	r3, [pc, #272]	; (1e30 <Clock_Ip_ResetClockConfiguration+0x190>)
    1d1e:	5c9b      	ldrb	r3, [r3, r2]
    1d20:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1d22:	4944      	ldr	r1, [pc, #272]	; (1e34 <Clock_Ip_ResetClockConfiguration+0x194>)
    1d24:	9a02      	ldr	r2, [sp, #8]
    1d26:	4613      	mov	r3, r2
    1d28:	005b      	lsls	r3, r3, #1
    1d2a:	4413      	add	r3, r2
    1d2c:	009b      	lsls	r3, r3, #2
    1d2e:	440b      	add	r3, r1
    1d30:	681b      	ldr	r3, [r3, #0]
    1d32:	9a03      	ldr	r2, [sp, #12]
    1d34:	3a01      	subs	r2, #1
    1d36:	3224      	adds	r2, #36	; 0x24
    1d38:	0112      	lsls	r2, r2, #4
    1d3a:	9901      	ldr	r1, [sp, #4]
    1d3c:	440a      	add	r2, r1
    1d3e:	3204      	adds	r2, #4
    1d40:	4610      	mov	r0, r2
    1d42:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1d44:	9b03      	ldr	r3, [sp, #12]
    1d46:	3b01      	subs	r3, #1
    1d48:	9303      	str	r3, [sp, #12]
    1d4a:	9b03      	ldr	r3, [sp, #12]
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	d1d5      	bne.n	1cfc <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1d50:	9b01      	ldr	r3, [sp, #4]
    1d52:	7a9b      	ldrb	r3, [r3, #10]
    1d54:	9303      	str	r3, [sp, #12]
    1d56:	e02a      	b.n	1dae <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1d58:	9b03      	ldr	r3, [sp, #12]
    1d5a:	1e5a      	subs	r2, r3, #1
    1d5c:	9901      	ldr	r1, [sp, #4]
    1d5e:	4613      	mov	r3, r2
    1d60:	009b      	lsls	r3, r3, #2
    1d62:	4413      	add	r3, r2
    1d64:	00db      	lsls	r3, r3, #3
    1d66:	440b      	add	r3, r1
    1d68:	3340      	adds	r3, #64	; 0x40
    1d6a:	681a      	ldr	r2, [r3, #0]
    1d6c:	492d      	ldr	r1, [pc, #180]	; (1e24 <Clock_Ip_ResetClockConfiguration+0x184>)
    1d6e:	4613      	mov	r3, r2
    1d70:	00db      	lsls	r3, r3, #3
    1d72:	4413      	add	r3, r2
    1d74:	440b      	add	r3, r1
    1d76:	3301      	adds	r3, #1
    1d78:	781b      	ldrb	r3, [r3, #0]
    1d7a:	461a      	mov	r2, r3
    1d7c:	4b2e      	ldr	r3, [pc, #184]	; (1e38 <Clock_Ip_ResetClockConfiguration+0x198>)
    1d7e:	5c9b      	ldrb	r3, [r3, r2]
    1d80:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1d82:	492e      	ldr	r1, [pc, #184]	; (1e3c <Clock_Ip_ResetClockConfiguration+0x19c>)
    1d84:	9a02      	ldr	r2, [sp, #8]
    1d86:	4613      	mov	r3, r2
    1d88:	009b      	lsls	r3, r3, #2
    1d8a:	4413      	add	r3, r2
    1d8c:	009b      	lsls	r3, r3, #2
    1d8e:	440b      	add	r3, r1
    1d90:	6819      	ldr	r1, [r3, #0]
    1d92:	9b03      	ldr	r3, [sp, #12]
    1d94:	1e5a      	subs	r2, r3, #1
    1d96:	4613      	mov	r3, r2
    1d98:	009b      	lsls	r3, r3, #2
    1d9a:	4413      	add	r3, r2
    1d9c:	00db      	lsls	r3, r3, #3
    1d9e:	3340      	adds	r3, #64	; 0x40
    1da0:	9a01      	ldr	r2, [sp, #4]
    1da2:	4413      	add	r3, r2
    1da4:	4618      	mov	r0, r3
    1da6:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1da8:	9b03      	ldr	r3, [sp, #12]
    1daa:	3b01      	subs	r3, #1
    1dac:	9303      	str	r3, [sp, #12]
    1dae:	9b03      	ldr	r3, [sp, #12]
    1db0:	2b00      	cmp	r3, #0
    1db2:	d1d1      	bne.n	1d58 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1db4:	9b01      	ldr	r3, [sp, #4]
    1db6:	7a5b      	ldrb	r3, [r3, #9]
    1db8:	9303      	str	r3, [sp, #12]
    1dba:	e02b      	b.n	1e14 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1dbc:	9b03      	ldr	r3, [sp, #12]
    1dbe:	1e5a      	subs	r2, r3, #1
    1dc0:	9901      	ldr	r1, [sp, #4]
    1dc2:	4613      	mov	r3, r2
    1dc4:	009b      	lsls	r3, r3, #2
    1dc6:	4413      	add	r3, r2
    1dc8:	009b      	lsls	r3, r3, #2
    1dca:	440b      	add	r3, r1
    1dcc:	332c      	adds	r3, #44	; 0x2c
    1dce:	681a      	ldr	r2, [r3, #0]
    1dd0:	4914      	ldr	r1, [pc, #80]	; (1e24 <Clock_Ip_ResetClockConfiguration+0x184>)
    1dd2:	4613      	mov	r3, r2
    1dd4:	00db      	lsls	r3, r3, #3
    1dd6:	4413      	add	r3, r2
    1dd8:	440b      	add	r3, r1
    1dda:	3301      	adds	r3, #1
    1ddc:	781b      	ldrb	r3, [r3, #0]
    1dde:	461a      	mov	r2, r3
    1de0:	4b17      	ldr	r3, [pc, #92]	; (1e40 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1de2:	5c9b      	ldrb	r3, [r3, r2]
    1de4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1de6:	4917      	ldr	r1, [pc, #92]	; (1e44 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1de8:	9a02      	ldr	r2, [sp, #8]
    1dea:	4613      	mov	r3, r2
    1dec:	009b      	lsls	r3, r3, #2
    1dee:	4413      	add	r3, r2
    1df0:	009b      	lsls	r3, r3, #2
    1df2:	440b      	add	r3, r1
    1df4:	6819      	ldr	r1, [r3, #0]
    1df6:	9b03      	ldr	r3, [sp, #12]
    1df8:	1e5a      	subs	r2, r3, #1
    1dfa:	4613      	mov	r3, r2
    1dfc:	009b      	lsls	r3, r3, #2
    1dfe:	4413      	add	r3, r2
    1e00:	009b      	lsls	r3, r3, #2
    1e02:	3328      	adds	r3, #40	; 0x28
    1e04:	9a01      	ldr	r2, [sp, #4]
    1e06:	4413      	add	r3, r2
    1e08:	3304      	adds	r3, #4
    1e0a:	4618      	mov	r0, r3
    1e0c:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1e0e:	9b03      	ldr	r3, [sp, #12]
    1e10:	3b01      	subs	r3, #1
    1e12:	9303      	str	r3, [sp, #12]
    1e14:	9b03      	ldr	r3, [sp, #12]
    1e16:	2b00      	cmp	r3, #0
    1e18:	d1d0      	bne.n	1dbc <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    1e1a:	bf00      	nop
    1e1c:	bf00      	nop
    1e1e:	b005      	add	sp, #20
    1e20:	f85d fb04 	ldr.w	pc, [sp], #4
    1e24:	00007fd0 	.word	0x00007fd0
    1e28:	00007fa0 	.word	0x00007fa0
    1e2c:	00008608 	.word	0x00008608
    1e30:	00007f80 	.word	0x00007f80
    1e34:	0000854c 	.word	0x0000854c
    1e38:	00007f90 	.word	0x00007f90
    1e3c:	000085dc 	.word	0x000085dc
    1e40:	00007f50 	.word	0x00007f50
    1e44:	00008524 	.word	0x00008524

00001e48 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1e48:	b500      	push	{lr}
    1e4a:	b085      	sub	sp, #20
    1e4c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    1e4e:	2301      	movs	r3, #1
    1e50:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1e52:	9801      	ldr	r0, [sp, #4]
    1e54:	f000 f818 	bl	1e88 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1e58:	4b0a      	ldr	r3, [pc, #40]	; (1e84 <Clock_Ip_Init+0x3c>)
    1e5a:	781b      	ldrb	r3, [r3, #0]
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d00a      	beq.n	1e76 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1e60:	f000 fb74 	bl	254c <Clock_Ip_GetPllStatus>
    1e64:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1e66:	9b02      	ldr	r3, [sp, #8]
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d106      	bne.n	1e7a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1e6c:	f000 fbf2 	bl	2654 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1e70:	2300      	movs	r3, #0
    1e72:	9303      	str	r3, [sp, #12]
    1e74:	e001      	b.n	1e7a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1e76:	2300      	movs	r3, #0
    1e78:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1e7a:	9b03      	ldr	r3, [sp, #12]
}
    1e7c:	4618      	mov	r0, r3
    1e7e:	b005      	add	sp, #20
    1e80:	f85d fb04 	ldr.w	pc, [sp], #4
    1e84:	1fff8b64 	.word	0x1fff8b64

00001e88 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1e88:	b510      	push	{r4, lr}
    1e8a:	b084      	sub	sp, #16
    1e8c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    1e8e:	4a9f      	ldr	r2, [pc, #636]	; (210c <Clock_Ip_InitClock+0x284>)
    1e90:	9b01      	ldr	r3, [sp, #4]
    1e92:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1e94:	2101      	movs	r1, #1
    1e96:	9801      	ldr	r0, [sp, #4]
    1e98:	f003 fa90 	bl	53bc <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1e9c:	4b9b      	ldr	r3, [pc, #620]	; (210c <Clock_Ip_InitClock+0x284>)
    1e9e:	681b      	ldr	r3, [r3, #0]
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d030      	beq.n	1f06 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1ea4:	2300      	movs	r3, #0
    1ea6:	9303      	str	r3, [sp, #12]
    1ea8:	e027      	b.n	1efa <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1eaa:	9901      	ldr	r1, [sp, #4]
    1eac:	9a03      	ldr	r2, [sp, #12]
    1eae:	4613      	mov	r3, r2
    1eb0:	009b      	lsls	r3, r3, #2
    1eb2:	4413      	add	r3, r2
    1eb4:	009b      	lsls	r3, r3, #2
    1eb6:	440b      	add	r3, r1
    1eb8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1ebc:	681a      	ldr	r2, [r3, #0]
    1ebe:	4994      	ldr	r1, [pc, #592]	; (2110 <Clock_Ip_InitClock+0x288>)
    1ec0:	4613      	mov	r3, r2
    1ec2:	00db      	lsls	r3, r3, #3
    1ec4:	4413      	add	r3, r2
    1ec6:	440b      	add	r3, r1
    1ec8:	3301      	adds	r3, #1
    1eca:	781b      	ldrb	r3, [r3, #0]
    1ecc:	461a      	mov	r2, r3
    1ece:	4b91      	ldr	r3, [pc, #580]	; (2114 <Clock_Ip_InitClock+0x28c>)
    1ed0:	5c9b      	ldrb	r3, [r3, r2]
    1ed2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1ed4:	4a90      	ldr	r2, [pc, #576]	; (2118 <Clock_Ip_InitClock+0x290>)
    1ed6:	9b02      	ldr	r3, [sp, #8]
    1ed8:	011b      	lsls	r3, r3, #4
    1eda:	4413      	add	r3, r2
    1edc:	6819      	ldr	r1, [r3, #0]
    1ede:	9a03      	ldr	r2, [sp, #12]
    1ee0:	4613      	mov	r3, r2
    1ee2:	009b      	lsls	r3, r3, #2
    1ee4:	4413      	add	r3, r2
    1ee6:	009b      	lsls	r3, r3, #2
    1ee8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1eec:	9a01      	ldr	r2, [sp, #4]
    1eee:	4413      	add	r3, r2
    1ef0:	4618      	mov	r0, r3
    1ef2:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1ef4:	9b03      	ldr	r3, [sp, #12]
    1ef6:	3301      	adds	r3, #1
    1ef8:	9303      	str	r3, [sp, #12]
    1efa:	9b01      	ldr	r3, [sp, #4]
    1efc:	7c9b      	ldrb	r3, [r3, #18]
    1efe:	461a      	mov	r2, r3
    1f00:	9b03      	ldr	r3, [sp, #12]
    1f02:	4293      	cmp	r3, r2
    1f04:	d3d1      	bcc.n	1eaa <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1f06:	9801      	ldr	r0, [sp, #4]
    1f08:	f7ff feca 	bl	1ca0 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1f0c:	2300      	movs	r3, #0
    1f0e:	9303      	str	r3, [sp, #12]
    1f10:	e029      	b.n	1f66 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1f12:	9901      	ldr	r1, [sp, #4]
    1f14:	9a03      	ldr	r2, [sp, #12]
    1f16:	4613      	mov	r3, r2
    1f18:	005b      	lsls	r3, r3, #1
    1f1a:	4413      	add	r3, r2
    1f1c:	009b      	lsls	r3, r3, #2
    1f1e:	440b      	add	r3, r1
    1f20:	3314      	adds	r3, #20
    1f22:	681a      	ldr	r2, [r3, #0]
    1f24:	497a      	ldr	r1, [pc, #488]	; (2110 <Clock_Ip_InitClock+0x288>)
    1f26:	4613      	mov	r3, r2
    1f28:	00db      	lsls	r3, r3, #3
    1f2a:	4413      	add	r3, r2
    1f2c:	440b      	add	r3, r1
    1f2e:	3301      	adds	r3, #1
    1f30:	781b      	ldrb	r3, [r3, #0]
    1f32:	461a      	mov	r2, r3
    1f34:	4b79      	ldr	r3, [pc, #484]	; (211c <Clock_Ip_InitClock+0x294>)
    1f36:	5c9b      	ldrb	r3, [r3, r2]
    1f38:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    1f3a:	4979      	ldr	r1, [pc, #484]	; (2120 <Clock_Ip_InitClock+0x298>)
    1f3c:	9a02      	ldr	r2, [sp, #8]
    1f3e:	4613      	mov	r3, r2
    1f40:	005b      	lsls	r3, r3, #1
    1f42:	4413      	add	r3, r2
    1f44:	009b      	lsls	r3, r3, #2
    1f46:	440b      	add	r3, r1
    1f48:	6819      	ldr	r1, [r3, #0]
    1f4a:	9a03      	ldr	r2, [sp, #12]
    1f4c:	4613      	mov	r3, r2
    1f4e:	005b      	lsls	r3, r3, #1
    1f50:	4413      	add	r3, r2
    1f52:	009b      	lsls	r3, r3, #2
    1f54:	3310      	adds	r3, #16
    1f56:	9a01      	ldr	r2, [sp, #4]
    1f58:	4413      	add	r3, r2
    1f5a:	3304      	adds	r3, #4
    1f5c:	4618      	mov	r0, r3
    1f5e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1f60:	9b03      	ldr	r3, [sp, #12]
    1f62:	3301      	adds	r3, #1
    1f64:	9303      	str	r3, [sp, #12]
    1f66:	9b01      	ldr	r3, [sp, #4]
    1f68:	7a1b      	ldrb	r3, [r3, #8]
    1f6a:	461a      	mov	r2, r3
    1f6c:	9b03      	ldr	r3, [sp, #12]
    1f6e:	4293      	cmp	r3, r2
    1f70:	d3cf      	bcc.n	1f12 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1f72:	2300      	movs	r3, #0
    1f74:	9303      	str	r3, [sp, #12]
    1f76:	e02a      	b.n	1fce <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1f78:	9901      	ldr	r1, [sp, #4]
    1f7a:	9a03      	ldr	r2, [sp, #12]
    1f7c:	4613      	mov	r3, r2
    1f7e:	009b      	lsls	r3, r3, #2
    1f80:	4413      	add	r3, r2
    1f82:	009b      	lsls	r3, r3, #2
    1f84:	440b      	add	r3, r1
    1f86:	332c      	adds	r3, #44	; 0x2c
    1f88:	681a      	ldr	r2, [r3, #0]
    1f8a:	4961      	ldr	r1, [pc, #388]	; (2110 <Clock_Ip_InitClock+0x288>)
    1f8c:	4613      	mov	r3, r2
    1f8e:	00db      	lsls	r3, r3, #3
    1f90:	4413      	add	r3, r2
    1f92:	440b      	add	r3, r1
    1f94:	3301      	adds	r3, #1
    1f96:	781b      	ldrb	r3, [r3, #0]
    1f98:	461a      	mov	r2, r3
    1f9a:	4b62      	ldr	r3, [pc, #392]	; (2124 <Clock_Ip_InitClock+0x29c>)
    1f9c:	5c9b      	ldrb	r3, [r3, r2]
    1f9e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    1fa0:	4961      	ldr	r1, [pc, #388]	; (2128 <Clock_Ip_InitClock+0x2a0>)
    1fa2:	9a02      	ldr	r2, [sp, #8]
    1fa4:	4613      	mov	r3, r2
    1fa6:	009b      	lsls	r3, r3, #2
    1fa8:	4413      	add	r3, r2
    1faa:	009b      	lsls	r3, r3, #2
    1fac:	440b      	add	r3, r1
    1fae:	3304      	adds	r3, #4
    1fb0:	6819      	ldr	r1, [r3, #0]
    1fb2:	9a03      	ldr	r2, [sp, #12]
    1fb4:	4613      	mov	r3, r2
    1fb6:	009b      	lsls	r3, r3, #2
    1fb8:	4413      	add	r3, r2
    1fba:	009b      	lsls	r3, r3, #2
    1fbc:	3328      	adds	r3, #40	; 0x28
    1fbe:	9a01      	ldr	r2, [sp, #4]
    1fc0:	4413      	add	r3, r2
    1fc2:	3304      	adds	r3, #4
    1fc4:	4618      	mov	r0, r3
    1fc6:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1fc8:	9b03      	ldr	r3, [sp, #12]
    1fca:	3301      	adds	r3, #1
    1fcc:	9303      	str	r3, [sp, #12]
    1fce:	9b01      	ldr	r3, [sp, #4]
    1fd0:	7a5b      	ldrb	r3, [r3, #9]
    1fd2:	461a      	mov	r2, r3
    1fd4:	9b03      	ldr	r3, [sp, #12]
    1fd6:	4293      	cmp	r3, r2
    1fd8:	d3ce      	bcc.n	1f78 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    1fda:	9801      	ldr	r0, [sp, #4]
    1fdc:	f7ff fdb0 	bl	1b40 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1fe0:	2300      	movs	r3, #0
    1fe2:	9303      	str	r3, [sp, #12]
    1fe4:	e028      	b.n	2038 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1fe6:	9901      	ldr	r1, [sp, #4]
    1fe8:	9a03      	ldr	r2, [sp, #12]
    1fea:	4613      	mov	r3, r2
    1fec:	009b      	lsls	r3, r3, #2
    1fee:	4413      	add	r3, r2
    1ff0:	009b      	lsls	r3, r3, #2
    1ff2:	440b      	add	r3, r1
    1ff4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1ff8:	681a      	ldr	r2, [r3, #0]
    1ffa:	4945      	ldr	r1, [pc, #276]	; (2110 <Clock_Ip_InitClock+0x288>)
    1ffc:	4613      	mov	r3, r2
    1ffe:	00db      	lsls	r3, r3, #3
    2000:	4413      	add	r3, r2
    2002:	440b      	add	r3, r1
    2004:	3301      	adds	r3, #1
    2006:	781b      	ldrb	r3, [r3, #0]
    2008:	461a      	mov	r2, r3
    200a:	4b48      	ldr	r3, [pc, #288]	; (212c <Clock_Ip_InitClock+0x2a4>)
    200c:	5c9b      	ldrb	r3, [r3, r2]
    200e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2010:	4a47      	ldr	r2, [pc, #284]	; (2130 <Clock_Ip_InitClock+0x2a8>)
    2012:	9b02      	ldr	r3, [sp, #8]
    2014:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2018:	9a03      	ldr	r2, [sp, #12]
    201a:	4613      	mov	r3, r2
    201c:	009b      	lsls	r3, r3, #2
    201e:	4413      	add	r3, r2
    2020:	009b      	lsls	r3, r3, #2
    2022:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2026:	9a01      	ldr	r2, [sp, #4]
    2028:	4413      	add	r3, r2
    202a:	3304      	adds	r3, #4
    202c:	9903      	ldr	r1, [sp, #12]
    202e:	4618      	mov	r0, r3
    2030:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2032:	9b03      	ldr	r3, [sp, #12]
    2034:	3301      	adds	r3, #1
    2036:	9303      	str	r3, [sp, #12]
    2038:	9b01      	ldr	r3, [sp, #4]
    203a:	7c5b      	ldrb	r3, [r3, #17]
    203c:	461a      	mov	r2, r3
    203e:	9b03      	ldr	r3, [sp, #12]
    2040:	4293      	cmp	r3, r2
    2042:	d3d0      	bcc.n	1fe6 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2044:	2300      	movs	r3, #0
    2046:	9303      	str	r3, [sp, #12]
    2048:	e026      	b.n	2098 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    204a:	9901      	ldr	r1, [sp, #4]
    204c:	9a03      	ldr	r2, [sp, #12]
    204e:	4613      	mov	r3, r2
    2050:	005b      	lsls	r3, r3, #1
    2052:	4413      	add	r3, r2
    2054:	009b      	lsls	r3, r3, #2
    2056:	440b      	add	r3, r1
    2058:	f503 730e 	add.w	r3, r3, #568	; 0x238
    205c:	681a      	ldr	r2, [r3, #0]
    205e:	492c      	ldr	r1, [pc, #176]	; (2110 <Clock_Ip_InitClock+0x288>)
    2060:	4613      	mov	r3, r2
    2062:	00db      	lsls	r3, r3, #3
    2064:	4413      	add	r3, r2
    2066:	440b      	add	r3, r1
    2068:	3301      	adds	r3, #1
    206a:	781b      	ldrb	r3, [r3, #0]
    206c:	461a      	mov	r2, r3
    206e:	4b31      	ldr	r3, [pc, #196]	; (2134 <Clock_Ip_InitClock+0x2ac>)
    2070:	5c9b      	ldrb	r3, [r3, r2]
    2072:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2074:	4a30      	ldr	r2, [pc, #192]	; (2138 <Clock_Ip_InitClock+0x2b0>)
    2076:	9b02      	ldr	r3, [sp, #8]
    2078:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    207c:	9a03      	ldr	r2, [sp, #12]
    207e:	4613      	mov	r3, r2
    2080:	005b      	lsls	r3, r3, #1
    2082:	4413      	add	r3, r2
    2084:	009b      	lsls	r3, r3, #2
    2086:	f503 730e 	add.w	r3, r3, #568	; 0x238
    208a:	9a01      	ldr	r2, [sp, #4]
    208c:	4413      	add	r3, r2
    208e:	4618      	mov	r0, r3
    2090:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2092:	9b03      	ldr	r3, [sp, #12]
    2094:	3301      	adds	r3, #1
    2096:	9303      	str	r3, [sp, #12]
    2098:	9b01      	ldr	r3, [sp, #4]
    209a:	7b5b      	ldrb	r3, [r3, #13]
    209c:	461a      	mov	r2, r3
    209e:	9b03      	ldr	r3, [sp, #12]
    20a0:	4293      	cmp	r3, r2
    20a2:	d3d2      	bcc.n	204a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    20a4:	2300      	movs	r3, #0
    20a6:	9303      	str	r3, [sp, #12]
    20a8:	e026      	b.n	20f8 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    20aa:	9901      	ldr	r1, [sp, #4]
    20ac:	9a03      	ldr	r2, [sp, #12]
    20ae:	4613      	mov	r3, r2
    20b0:	005b      	lsls	r3, r3, #1
    20b2:	4413      	add	r3, r2
    20b4:	009b      	lsls	r3, r3, #2
    20b6:	440b      	add	r3, r1
    20b8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    20bc:	681a      	ldr	r2, [r3, #0]
    20be:	4914      	ldr	r1, [pc, #80]	; (2110 <Clock_Ip_InitClock+0x288>)
    20c0:	4613      	mov	r3, r2
    20c2:	00db      	lsls	r3, r3, #3
    20c4:	4413      	add	r3, r2
    20c6:	440b      	add	r3, r1
    20c8:	3301      	adds	r3, #1
    20ca:	781b      	ldrb	r3, [r3, #0]
    20cc:	461a      	mov	r2, r3
    20ce:	4b1b      	ldr	r3, [pc, #108]	; (213c <Clock_Ip_InitClock+0x2b4>)
    20d0:	5c9b      	ldrb	r3, [r3, r2]
    20d2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    20d4:	4a1a      	ldr	r2, [pc, #104]	; (2140 <Clock_Ip_InitClock+0x2b8>)
    20d6:	9b02      	ldr	r3, [sp, #8]
    20d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    20dc:	9a03      	ldr	r2, [sp, #12]
    20de:	4613      	mov	r3, r2
    20e0:	005b      	lsls	r3, r3, #1
    20e2:	4413      	add	r3, r2
    20e4:	009b      	lsls	r3, r3, #2
    20e6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    20ea:	9a01      	ldr	r2, [sp, #4]
    20ec:	4413      	add	r3, r2
    20ee:	4618      	mov	r0, r3
    20f0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    20f2:	9b03      	ldr	r3, [sp, #12]
    20f4:	3301      	adds	r3, #1
    20f6:	9303      	str	r3, [sp, #12]
    20f8:	9b01      	ldr	r3, [sp, #4]
    20fa:	7b1b      	ldrb	r3, [r3, #12]
    20fc:	461a      	mov	r2, r3
    20fe:	9b03      	ldr	r3, [sp, #12]
    2100:	4293      	cmp	r3, r2
    2102:	d3d2      	bcc.n	20aa <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2104:	2300      	movs	r3, #0
    2106:	9303      	str	r3, [sp, #12]
    2108:	e044      	b.n	2194 <Clock_Ip_InitClock+0x30c>
    210a:	bf00      	nop
    210c:	1fff8b5c 	.word	0x1fff8b5c
    2110:	00007fd0 	.word	0x00007fd0
    2114:	00007fc0 	.word	0x00007fc0
    2118:	000085cc 	.word	0x000085cc
    211c:	00007f60 	.word	0x00007f60
    2120:	00008590 	.word	0x00008590
    2124:	00007f50 	.word	0x00007f50
    2128:	00008524 	.word	0x00008524
    212c:	00007fb0 	.word	0x00007fb0
    2130:	00008604 	.word	0x00008604
    2134:	00007f40 	.word	0x00007f40
    2138:	0000851c 	.word	0x0000851c
    213c:	00007f30 	.word	0x00007f30
    2140:	000084e0 	.word	0x000084e0
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2144:	9901      	ldr	r1, [sp, #4]
    2146:	9a03      	ldr	r2, [sp, #12]
    2148:	4613      	mov	r3, r2
    214a:	005b      	lsls	r3, r3, #1
    214c:	4413      	add	r3, r2
    214e:	009b      	lsls	r3, r3, #2
    2150:	440b      	add	r3, r1
    2152:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2156:	681a      	ldr	r2, [r3, #0]
    2158:	49ac      	ldr	r1, [pc, #688]	; (240c <Clock_Ip_InitClock+0x584>)
    215a:	4613      	mov	r3, r2
    215c:	00db      	lsls	r3, r3, #3
    215e:	4413      	add	r3, r2
    2160:	440b      	add	r3, r1
    2162:	3301      	adds	r3, #1
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	461a      	mov	r2, r3
    2168:	4ba9      	ldr	r3, [pc, #676]	; (2410 <Clock_Ip_InitClock+0x588>)
    216a:	5c9b      	ldrb	r3, [r3, r2]
    216c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    216e:	4aa9      	ldr	r2, [pc, #676]	; (2414 <Clock_Ip_InitClock+0x58c>)
    2170:	9b02      	ldr	r3, [sp, #8]
    2172:	00db      	lsls	r3, r3, #3
    2174:	4413      	add	r3, r2
    2176:	6859      	ldr	r1, [r3, #4]
    2178:	9a03      	ldr	r2, [sp, #12]
    217a:	4613      	mov	r3, r2
    217c:	005b      	lsls	r3, r3, #1
    217e:	4413      	add	r3, r2
    2180:	009b      	lsls	r3, r3, #2
    2182:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2186:	9a01      	ldr	r2, [sp, #4]
    2188:	4413      	add	r3, r2
    218a:	4618      	mov	r0, r3
    218c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    218e:	9b03      	ldr	r3, [sp, #12]
    2190:	3301      	adds	r3, #1
    2192:	9303      	str	r3, [sp, #12]
    2194:	9b01      	ldr	r3, [sp, #4]
    2196:	7b5b      	ldrb	r3, [r3, #13]
    2198:	461a      	mov	r2, r3
    219a:	9b03      	ldr	r3, [sp, #12]
    219c:	4293      	cmp	r3, r2
    219e:	d3d1      	bcc.n	2144 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    21a0:	2300      	movs	r3, #0
    21a2:	9303      	str	r3, [sp, #12]
    21a4:	e029      	b.n	21fa <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    21a6:	9901      	ldr	r1, [sp, #4]
    21a8:	9a03      	ldr	r2, [sp, #12]
    21aa:	4613      	mov	r3, r2
    21ac:	009b      	lsls	r3, r3, #2
    21ae:	4413      	add	r3, r2
    21b0:	00db      	lsls	r3, r3, #3
    21b2:	440b      	add	r3, r1
    21b4:	3340      	adds	r3, #64	; 0x40
    21b6:	681a      	ldr	r2, [r3, #0]
    21b8:	4994      	ldr	r1, [pc, #592]	; (240c <Clock_Ip_InitClock+0x584>)
    21ba:	4613      	mov	r3, r2
    21bc:	00db      	lsls	r3, r3, #3
    21be:	4413      	add	r3, r2
    21c0:	440b      	add	r3, r1
    21c2:	3301      	adds	r3, #1
    21c4:	781b      	ldrb	r3, [r3, #0]
    21c6:	461a      	mov	r2, r3
    21c8:	4b93      	ldr	r3, [pc, #588]	; (2418 <Clock_Ip_InitClock+0x590>)
    21ca:	5c9b      	ldrb	r3, [r3, r2]
    21cc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    21ce:	4993      	ldr	r1, [pc, #588]	; (241c <Clock_Ip_InitClock+0x594>)
    21d0:	9a02      	ldr	r2, [sp, #8]
    21d2:	4613      	mov	r3, r2
    21d4:	009b      	lsls	r3, r3, #2
    21d6:	4413      	add	r3, r2
    21d8:	009b      	lsls	r3, r3, #2
    21da:	440b      	add	r3, r1
    21dc:	3304      	adds	r3, #4
    21de:	6819      	ldr	r1, [r3, #0]
    21e0:	9a03      	ldr	r2, [sp, #12]
    21e2:	4613      	mov	r3, r2
    21e4:	009b      	lsls	r3, r3, #2
    21e6:	4413      	add	r3, r2
    21e8:	00db      	lsls	r3, r3, #3
    21ea:	3340      	adds	r3, #64	; 0x40
    21ec:	9a01      	ldr	r2, [sp, #4]
    21ee:	4413      	add	r3, r2
    21f0:	4618      	mov	r0, r3
    21f2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    21f4:	9b03      	ldr	r3, [sp, #12]
    21f6:	3301      	adds	r3, #1
    21f8:	9303      	str	r3, [sp, #12]
    21fa:	9b01      	ldr	r3, [sp, #4]
    21fc:	7a9b      	ldrb	r3, [r3, #10]
    21fe:	461a      	mov	r2, r3
    2200:	9b03      	ldr	r3, [sp, #12]
    2202:	4293      	cmp	r3, r2
    2204:	d3cf      	bcc.n	21a6 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2206:	2300      	movs	r3, #0
    2208:	9303      	str	r3, [sp, #12]
    220a:	e029      	b.n	2260 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    220c:	9901      	ldr	r1, [sp, #4]
    220e:	9a03      	ldr	r2, [sp, #12]
    2210:	4613      	mov	r3, r2
    2212:	009b      	lsls	r3, r3, #2
    2214:	4413      	add	r3, r2
    2216:	009b      	lsls	r3, r3, #2
    2218:	440b      	add	r3, r1
    221a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    221e:	681a      	ldr	r2, [r3, #0]
    2220:	497a      	ldr	r1, [pc, #488]	; (240c <Clock_Ip_InitClock+0x584>)
    2222:	4613      	mov	r3, r2
    2224:	00db      	lsls	r3, r3, #3
    2226:	4413      	add	r3, r2
    2228:	440b      	add	r3, r1
    222a:	3301      	adds	r3, #1
    222c:	781b      	ldrb	r3, [r3, #0]
    222e:	461a      	mov	r2, r3
    2230:	4b7b      	ldr	r3, [pc, #492]	; (2420 <Clock_Ip_InitClock+0x598>)
    2232:	5c9b      	ldrb	r3, [r3, r2]
    2234:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2236:	4a7b      	ldr	r2, [pc, #492]	; (2424 <Clock_Ip_InitClock+0x59c>)
    2238:	9b02      	ldr	r3, [sp, #8]
    223a:	011b      	lsls	r3, r3, #4
    223c:	4413      	add	r3, r2
    223e:	3304      	adds	r3, #4
    2240:	681c      	ldr	r4, [r3, #0]
    2242:	9a03      	ldr	r2, [sp, #12]
    2244:	4613      	mov	r3, r2
    2246:	009b      	lsls	r3, r3, #2
    2248:	4413      	add	r3, r2
    224a:	009b      	lsls	r3, r3, #2
    224c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2250:	9a01      	ldr	r2, [sp, #4]
    2252:	4413      	add	r3, r2
    2254:	9903      	ldr	r1, [sp, #12]
    2256:	4618      	mov	r0, r3
    2258:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    225a:	9b03      	ldr	r3, [sp, #12]
    225c:	3301      	adds	r3, #1
    225e:	9303      	str	r3, [sp, #12]
    2260:	9b01      	ldr	r3, [sp, #4]
    2262:	7c9b      	ldrb	r3, [r3, #18]
    2264:	461a      	mov	r2, r3
    2266:	9b03      	ldr	r3, [sp, #12]
    2268:	4293      	cmp	r3, r2
    226a:	d3cf      	bcc.n	220c <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    226c:	2300      	movs	r3, #0
    226e:	9303      	str	r3, [sp, #12]
    2270:	e02a      	b.n	22c8 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2272:	9901      	ldr	r1, [sp, #4]
    2274:	9a03      	ldr	r2, [sp, #12]
    2276:	4613      	mov	r3, r2
    2278:	009b      	lsls	r3, r3, #2
    227a:	4413      	add	r3, r2
    227c:	009b      	lsls	r3, r3, #2
    227e:	440b      	add	r3, r1
    2280:	332c      	adds	r3, #44	; 0x2c
    2282:	681a      	ldr	r2, [r3, #0]
    2284:	4961      	ldr	r1, [pc, #388]	; (240c <Clock_Ip_InitClock+0x584>)
    2286:	4613      	mov	r3, r2
    2288:	00db      	lsls	r3, r3, #3
    228a:	4413      	add	r3, r2
    228c:	440b      	add	r3, r1
    228e:	3301      	adds	r3, #1
    2290:	781b      	ldrb	r3, [r3, #0]
    2292:	461a      	mov	r2, r3
    2294:	4b64      	ldr	r3, [pc, #400]	; (2428 <Clock_Ip_InitClock+0x5a0>)
    2296:	5c9b      	ldrb	r3, [r3, r2]
    2298:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    229a:	4964      	ldr	r1, [pc, #400]	; (242c <Clock_Ip_InitClock+0x5a4>)
    229c:	9a02      	ldr	r2, [sp, #8]
    229e:	4613      	mov	r3, r2
    22a0:	009b      	lsls	r3, r3, #2
    22a2:	4413      	add	r3, r2
    22a4:	009b      	lsls	r3, r3, #2
    22a6:	440b      	add	r3, r1
    22a8:	3308      	adds	r3, #8
    22aa:	6819      	ldr	r1, [r3, #0]
    22ac:	9a03      	ldr	r2, [sp, #12]
    22ae:	4613      	mov	r3, r2
    22b0:	009b      	lsls	r3, r3, #2
    22b2:	4413      	add	r3, r2
    22b4:	009b      	lsls	r3, r3, #2
    22b6:	3328      	adds	r3, #40	; 0x28
    22b8:	9a01      	ldr	r2, [sp, #4]
    22ba:	4413      	add	r3, r2
    22bc:	3304      	adds	r3, #4
    22be:	4618      	mov	r0, r3
    22c0:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    22c2:	9b03      	ldr	r3, [sp, #12]
    22c4:	3301      	adds	r3, #1
    22c6:	9303      	str	r3, [sp, #12]
    22c8:	9b01      	ldr	r3, [sp, #4]
    22ca:	7a5b      	ldrb	r3, [r3, #9]
    22cc:	461a      	mov	r2, r3
    22ce:	9b03      	ldr	r3, [sp, #12]
    22d0:	4293      	cmp	r3, r2
    22d2:	d3ce      	bcc.n	2272 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    22d4:	2300      	movs	r3, #0
    22d6:	9303      	str	r3, [sp, #12]
    22d8:	e029      	b.n	232e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    22da:	9901      	ldr	r1, [sp, #4]
    22dc:	9a03      	ldr	r2, [sp, #12]
    22de:	4613      	mov	r3, r2
    22e0:	009b      	lsls	r3, r3, #2
    22e2:	4413      	add	r3, r2
    22e4:	00db      	lsls	r3, r3, #3
    22e6:	440b      	add	r3, r1
    22e8:	3340      	adds	r3, #64	; 0x40
    22ea:	681a      	ldr	r2, [r3, #0]
    22ec:	4947      	ldr	r1, [pc, #284]	; (240c <Clock_Ip_InitClock+0x584>)
    22ee:	4613      	mov	r3, r2
    22f0:	00db      	lsls	r3, r3, #3
    22f2:	4413      	add	r3, r2
    22f4:	440b      	add	r3, r1
    22f6:	3301      	adds	r3, #1
    22f8:	781b      	ldrb	r3, [r3, #0]
    22fa:	461a      	mov	r2, r3
    22fc:	4b46      	ldr	r3, [pc, #280]	; (2418 <Clock_Ip_InitClock+0x590>)
    22fe:	5c9b      	ldrb	r3, [r3, r2]
    2300:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2302:	4946      	ldr	r1, [pc, #280]	; (241c <Clock_Ip_InitClock+0x594>)
    2304:	9a02      	ldr	r2, [sp, #8]
    2306:	4613      	mov	r3, r2
    2308:	009b      	lsls	r3, r3, #2
    230a:	4413      	add	r3, r2
    230c:	009b      	lsls	r3, r3, #2
    230e:	440b      	add	r3, r1
    2310:	330c      	adds	r3, #12
    2312:	6819      	ldr	r1, [r3, #0]
    2314:	9a03      	ldr	r2, [sp, #12]
    2316:	4613      	mov	r3, r2
    2318:	009b      	lsls	r3, r3, #2
    231a:	4413      	add	r3, r2
    231c:	00db      	lsls	r3, r3, #3
    231e:	3340      	adds	r3, #64	; 0x40
    2320:	9a01      	ldr	r2, [sp, #4]
    2322:	4413      	add	r3, r2
    2324:	4618      	mov	r0, r3
    2326:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2328:	9b03      	ldr	r3, [sp, #12]
    232a:	3301      	adds	r3, #1
    232c:	9303      	str	r3, [sp, #12]
    232e:	9b01      	ldr	r3, [sp, #4]
    2330:	7a9b      	ldrb	r3, [r3, #10]
    2332:	461a      	mov	r2, r3
    2334:	9b03      	ldr	r3, [sp, #12]
    2336:	4293      	cmp	r3, r2
    2338:	d3cf      	bcc.n	22da <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    233a:	2300      	movs	r3, #0
    233c:	9303      	str	r3, [sp, #12]
    233e:	e025      	b.n	238c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2340:	9a01      	ldr	r2, [sp, #4]
    2342:	9b03      	ldr	r3, [sp, #12]
    2344:	3324      	adds	r3, #36	; 0x24
    2346:	011b      	lsls	r3, r3, #4
    2348:	4413      	add	r3, r2
    234a:	3304      	adds	r3, #4
    234c:	681a      	ldr	r2, [r3, #0]
    234e:	492f      	ldr	r1, [pc, #188]	; (240c <Clock_Ip_InitClock+0x584>)
    2350:	4613      	mov	r3, r2
    2352:	00db      	lsls	r3, r3, #3
    2354:	4413      	add	r3, r2
    2356:	440b      	add	r3, r1
    2358:	3301      	adds	r3, #1
    235a:	781b      	ldrb	r3, [r3, #0]
    235c:	461a      	mov	r2, r3
    235e:	4b34      	ldr	r3, [pc, #208]	; (2430 <Clock_Ip_InitClock+0x5a8>)
    2360:	5c9b      	ldrb	r3, [r3, r2]
    2362:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2364:	4933      	ldr	r1, [pc, #204]	; (2434 <Clock_Ip_InitClock+0x5ac>)
    2366:	9a02      	ldr	r2, [sp, #8]
    2368:	4613      	mov	r3, r2
    236a:	005b      	lsls	r3, r3, #1
    236c:	4413      	add	r3, r2
    236e:	009b      	lsls	r3, r3, #2
    2370:	440b      	add	r3, r1
    2372:	3304      	adds	r3, #4
    2374:	681b      	ldr	r3, [r3, #0]
    2376:	9a03      	ldr	r2, [sp, #12]
    2378:	3224      	adds	r2, #36	; 0x24
    237a:	0112      	lsls	r2, r2, #4
    237c:	9901      	ldr	r1, [sp, #4]
    237e:	440a      	add	r2, r1
    2380:	3204      	adds	r2, #4
    2382:	4610      	mov	r0, r2
    2384:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2386:	9b03      	ldr	r3, [sp, #12]
    2388:	3301      	adds	r3, #1
    238a:	9303      	str	r3, [sp, #12]
    238c:	9b01      	ldr	r3, [sp, #4]
    238e:	7b9b      	ldrb	r3, [r3, #14]
    2390:	461a      	mov	r2, r3
    2392:	9b03      	ldr	r3, [sp, #12]
    2394:	4293      	cmp	r3, r2
    2396:	d3d3      	bcc.n	2340 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2398:	4b27      	ldr	r3, [pc, #156]	; (2438 <Clock_Ip_InitClock+0x5b0>)
    239a:	2200      	movs	r2, #0
    239c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    239e:	4b26      	ldr	r3, [pc, #152]	; (2438 <Clock_Ip_InitClock+0x5b0>)
    23a0:	2200      	movs	r2, #0
    23a2:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    23a4:	4b24      	ldr	r3, [pc, #144]	; (2438 <Clock_Ip_InitClock+0x5b0>)
    23a6:	2201      	movs	r2, #1
    23a8:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    23aa:	4b23      	ldr	r3, [pc, #140]	; (2438 <Clock_Ip_InitClock+0x5b0>)
    23ac:	2200      	movs	r2, #0
    23ae:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    23b0:	f000 fa9c 	bl	28ec <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    23b4:	2300      	movs	r3, #0
    23b6:	9303      	str	r3, [sp, #12]
    23b8:	e04c      	b.n	2454 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    23ba:	9a01      	ldr	r2, [sp, #4]
    23bc:	9b03      	ldr	r3, [sp, #12]
    23be:	330d      	adds	r3, #13
    23c0:	00db      	lsls	r3, r3, #3
    23c2:	4413      	add	r3, r2
    23c4:	685b      	ldr	r3, [r3, #4]
    23c6:	4a1d      	ldr	r2, [pc, #116]	; (243c <Clock_Ip_InitClock+0x5b4>)
    23c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23cc:	2b03      	cmp	r3, #3
    23ce:	d03b      	beq.n	2448 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    23d0:	9b01      	ldr	r3, [sp, #4]
    23d2:	9a03      	ldr	r2, [sp, #12]
    23d4:	320d      	adds	r2, #13
    23d6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    23da:	490c      	ldr	r1, [pc, #48]	; (240c <Clock_Ip_InitClock+0x584>)
    23dc:	4613      	mov	r3, r2
    23de:	00db      	lsls	r3, r3, #3
    23e0:	4413      	add	r3, r2
    23e2:	440b      	add	r3, r1
    23e4:	3301      	adds	r3, #1
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	461a      	mov	r2, r3
    23ea:	4b15      	ldr	r3, [pc, #84]	; (2440 <Clock_Ip_InitClock+0x5b8>)
    23ec:	5c9b      	ldrb	r3, [r3, r2]
    23ee:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    23f0:	4a14      	ldr	r2, [pc, #80]	; (2444 <Clock_Ip_InitClock+0x5bc>)
    23f2:	9b02      	ldr	r3, [sp, #8]
    23f4:	00db      	lsls	r3, r3, #3
    23f6:	4413      	add	r3, r2
    23f8:	685b      	ldr	r3, [r3, #4]
    23fa:	9a03      	ldr	r2, [sp, #12]
    23fc:	320d      	adds	r2, #13
    23fe:	00d2      	lsls	r2, r2, #3
    2400:	9901      	ldr	r1, [sp, #4]
    2402:	440a      	add	r2, r1
    2404:	4610      	mov	r0, r2
    2406:	4798      	blx	r3
    2408:	e021      	b.n	244e <Clock_Ip_InitClock+0x5c6>
    240a:	bf00      	nop
    240c:	00007fd0 	.word	0x00007fd0
    2410:	00007f40 	.word	0x00007f40
    2414:	0000851c 	.word	0x0000851c
    2418:	00007f90 	.word	0x00007f90
    241c:	000085dc 	.word	0x000085dc
    2420:	00007fc0 	.word	0x00007fc0
    2424:	000085cc 	.word	0x000085cc
    2428:	00007f50 	.word	0x00007f50
    242c:	00008524 	.word	0x00008524
    2430:	00007f80 	.word	0x00007f80
    2434:	0000854c 	.word	0x0000854c
    2438:	1fff8b64 	.word	0x1fff8b64
    243c:	0000841c 	.word	0x0000841c
    2440:	00007fa0 	.word	0x00007fa0
    2444:	00008608 	.word	0x00008608
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2448:	4b3a      	ldr	r3, [pc, #232]	; (2534 <Clock_Ip_InitClock+0x6ac>)
    244a:	2201      	movs	r2, #1
    244c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    244e:	9b03      	ldr	r3, [sp, #12]
    2450:	3301      	adds	r3, #1
    2452:	9303      	str	r3, [sp, #12]
    2454:	9b01      	ldr	r3, [sp, #4]
    2456:	7adb      	ldrb	r3, [r3, #11]
    2458:	461a      	mov	r2, r3
    245a:	9b03      	ldr	r3, [sp, #12]
    245c:	4293      	cmp	r3, r2
    245e:	d3ac      	bcc.n	23ba <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2460:	4b34      	ldr	r3, [pc, #208]	; (2534 <Clock_Ip_InitClock+0x6ac>)
    2462:	781b      	ldrb	r3, [r3, #0]
    2464:	f083 0301 	eor.w	r3, r3, #1
    2468:	b2db      	uxtb	r3, r3
    246a:	2b00      	cmp	r3, #0
    246c:	d05e      	beq.n	252c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    246e:	2300      	movs	r3, #0
    2470:	9303      	str	r3, [sp, #12]
    2472:	e01f      	b.n	24b4 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2474:	9a01      	ldr	r2, [sp, #4]
    2476:	9b03      	ldr	r3, [sp, #12]
    2478:	334e      	adds	r3, #78	; 0x4e
    247a:	00db      	lsls	r3, r3, #3
    247c:	4413      	add	r3, r2
    247e:	685a      	ldr	r2, [r3, #4]
    2480:	492d      	ldr	r1, [pc, #180]	; (2538 <Clock_Ip_InitClock+0x6b0>)
    2482:	4613      	mov	r3, r2
    2484:	00db      	lsls	r3, r3, #3
    2486:	4413      	add	r3, r2
    2488:	440b      	add	r3, r1
    248a:	3301      	adds	r3, #1
    248c:	781b      	ldrb	r3, [r3, #0]
    248e:	461a      	mov	r2, r3
    2490:	4b2a      	ldr	r3, [pc, #168]	; (253c <Clock_Ip_InitClock+0x6b4>)
    2492:	5c9b      	ldrb	r3, [r3, r2]
    2494:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2496:	4a2a      	ldr	r2, [pc, #168]	; (2540 <Clock_Ip_InitClock+0x6b8>)
    2498:	9b02      	ldr	r3, [sp, #8]
    249a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    249e:	9a03      	ldr	r2, [sp, #12]
    24a0:	324e      	adds	r2, #78	; 0x4e
    24a2:	00d2      	lsls	r2, r2, #3
    24a4:	9901      	ldr	r1, [sp, #4]
    24a6:	440a      	add	r2, r1
    24a8:	3204      	adds	r2, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    24ae:	9b03      	ldr	r3, [sp, #12]
    24b0:	3301      	adds	r3, #1
    24b2:	9303      	str	r3, [sp, #12]
    24b4:	9b01      	ldr	r3, [sp, #4]
    24b6:	7c1b      	ldrb	r3, [r3, #16]
    24b8:	461a      	mov	r2, r3
    24ba:	9b03      	ldr	r3, [sp, #12]
    24bc:	4293      	cmp	r3, r2
    24be:	d3d9      	bcc.n	2474 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    24c0:	2300      	movs	r3, #0
    24c2:	9303      	str	r3, [sp, #12]
    24c4:	e028      	b.n	2518 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    24c6:	9901      	ldr	r1, [sp, #4]
    24c8:	9a03      	ldr	r2, [sp, #12]
    24ca:	4613      	mov	r3, r2
    24cc:	009b      	lsls	r3, r3, #2
    24ce:	4413      	add	r3, r2
    24d0:	009b      	lsls	r3, r3, #2
    24d2:	440b      	add	r3, r1
    24d4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24d8:	681a      	ldr	r2, [r3, #0]
    24da:	4917      	ldr	r1, [pc, #92]	; (2538 <Clock_Ip_InitClock+0x6b0>)
    24dc:	4613      	mov	r3, r2
    24de:	00db      	lsls	r3, r3, #3
    24e0:	4413      	add	r3, r2
    24e2:	440b      	add	r3, r1
    24e4:	3301      	adds	r3, #1
    24e6:	781b      	ldrb	r3, [r3, #0]
    24e8:	461a      	mov	r2, r3
    24ea:	4b16      	ldr	r3, [pc, #88]	; (2544 <Clock_Ip_InitClock+0x6bc>)
    24ec:	5c9b      	ldrb	r3, [r3, r2]
    24ee:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    24f0:	4a15      	ldr	r2, [pc, #84]	; (2548 <Clock_Ip_InitClock+0x6c0>)
    24f2:	9b02      	ldr	r3, [sp, #8]
    24f4:	011b      	lsls	r3, r3, #4
    24f6:	4413      	add	r3, r2
    24f8:	330c      	adds	r3, #12
    24fa:	6819      	ldr	r1, [r3, #0]
    24fc:	9a03      	ldr	r2, [sp, #12]
    24fe:	4613      	mov	r3, r2
    2500:	009b      	lsls	r3, r3, #2
    2502:	4413      	add	r3, r2
    2504:	009b      	lsls	r3, r3, #2
    2506:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    250a:	9a01      	ldr	r2, [sp, #4]
    250c:	4413      	add	r3, r2
    250e:	4618      	mov	r0, r3
    2510:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2512:	9b03      	ldr	r3, [sp, #12]
    2514:	3301      	adds	r3, #1
    2516:	9303      	str	r3, [sp, #12]
    2518:	9b01      	ldr	r3, [sp, #4]
    251a:	7c9b      	ldrb	r3, [r3, #18]
    251c:	461a      	mov	r2, r3
    251e:	9b03      	ldr	r3, [sp, #12]
    2520:	4293      	cmp	r3, r2
    2522:	d3d0      	bcc.n	24c6 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2524:	2104      	movs	r1, #4
    2526:	9801      	ldr	r0, [sp, #4]
    2528:	f002 ff48 	bl	53bc <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    252c:	bf00      	nop
    252e:	b004      	add	sp, #16
    2530:	bd10      	pop	{r4, pc}
    2532:	bf00      	nop
    2534:	1fff8b64 	.word	0x1fff8b64
    2538:	00007fd0 	.word	0x00007fd0
    253c:	00007f70 	.word	0x00007f70
    2540:	00008558 	.word	0x00008558
    2544:	00007fc0 	.word	0x00007fc0
    2548:	000085cc 	.word	0x000085cc

0000254c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    254c:	b500      	push	{lr}
    254e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2550:	2302      	movs	r3, #2
    2552:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2554:	2300      	movs	r3, #0
    2556:	9304      	str	r3, [sp, #16]
    2558:	e02c      	b.n	25b4 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    255a:	4a36      	ldr	r2, [pc, #216]	; (2634 <Clock_Ip_GetPllStatus+0xe8>)
    255c:	9b04      	ldr	r3, [sp, #16]
    255e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2562:	4935      	ldr	r1, [pc, #212]	; (2638 <Clock_Ip_GetPllStatus+0xec>)
    2564:	4613      	mov	r3, r2
    2566:	00db      	lsls	r3, r3, #3
    2568:	4413      	add	r3, r2
    256a:	440b      	add	r3, r1
    256c:	3301      	adds	r3, #1
    256e:	781b      	ldrb	r3, [r3, #0]
    2570:	461a      	mov	r2, r3
    2572:	4b32      	ldr	r3, [pc, #200]	; (263c <Clock_Ip_GetPllStatus+0xf0>)
    2574:	5c9b      	ldrb	r3, [r3, r2]
    2576:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2578:	4931      	ldr	r1, [pc, #196]	; (2640 <Clock_Ip_GetPllStatus+0xf4>)
    257a:	9a03      	ldr	r2, [sp, #12]
    257c:	4613      	mov	r3, r2
    257e:	009b      	lsls	r3, r3, #2
    2580:	4413      	add	r3, r2
    2582:	009b      	lsls	r3, r3, #2
    2584:	440b      	add	r3, r1
    2586:	3308      	adds	r3, #8
    2588:	681b      	ldr	r3, [r3, #0]
    258a:	492a      	ldr	r1, [pc, #168]	; (2634 <Clock_Ip_GetPllStatus+0xe8>)
    258c:	9a04      	ldr	r2, [sp, #16]
    258e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2592:	4610      	mov	r0, r2
    2594:	4798      	blx	r3
    2596:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2598:	9b02      	ldr	r3, [sp, #8]
    259a:	2b01      	cmp	r3, #1
    259c:	d102      	bne.n	25a4 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    259e:	2301      	movs	r3, #1
    25a0:	9305      	str	r3, [sp, #20]
            break;
    25a2:	e00d      	b.n	25c0 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    25a4:	9b02      	ldr	r3, [sp, #8]
    25a6:	2b02      	cmp	r3, #2
    25a8:	d101      	bne.n	25ae <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    25aa:	2300      	movs	r3, #0
    25ac:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    25ae:	9b04      	ldr	r3, [sp, #16]
    25b0:	3301      	adds	r3, #1
    25b2:	9304      	str	r3, [sp, #16]
    25b4:	4b23      	ldr	r3, [pc, #140]	; (2644 <Clock_Ip_GetPllStatus+0xf8>)
    25b6:	789b      	ldrb	r3, [r3, #2]
    25b8:	461a      	mov	r2, r3
    25ba:	9b04      	ldr	r3, [sp, #16]
    25bc:	4293      	cmp	r3, r2
    25be:	d3cc      	bcc.n	255a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    25c0:	9b05      	ldr	r3, [sp, #20]
    25c2:	2b00      	cmp	r3, #0
    25c4:	d130      	bne.n	2628 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    25c6:	2300      	movs	r3, #0
    25c8:	9304      	str	r3, [sp, #16]
    25ca:	e027      	b.n	261c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    25cc:	4a1e      	ldr	r2, [pc, #120]	; (2648 <Clock_Ip_GetPllStatus+0xfc>)
    25ce:	9b04      	ldr	r3, [sp, #16]
    25d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    25d4:	4918      	ldr	r1, [pc, #96]	; (2638 <Clock_Ip_GetPllStatus+0xec>)
    25d6:	4613      	mov	r3, r2
    25d8:	00db      	lsls	r3, r3, #3
    25da:	4413      	add	r3, r2
    25dc:	440b      	add	r3, r1
    25de:	3301      	adds	r3, #1
    25e0:	781b      	ldrb	r3, [r3, #0]
    25e2:	461a      	mov	r2, r3
    25e4:	4b19      	ldr	r3, [pc, #100]	; (264c <Clock_Ip_GetPllStatus+0x100>)
    25e6:	5c9b      	ldrb	r3, [r3, r2]
    25e8:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    25ea:	4919      	ldr	r1, [pc, #100]	; (2650 <Clock_Ip_GetPllStatus+0x104>)
    25ec:	9a03      	ldr	r2, [sp, #12]
    25ee:	4613      	mov	r3, r2
    25f0:	005b      	lsls	r3, r3, #1
    25f2:	4413      	add	r3, r2
    25f4:	009b      	lsls	r3, r3, #2
    25f6:	440b      	add	r3, r1
    25f8:	3308      	adds	r3, #8
    25fa:	681b      	ldr	r3, [r3, #0]
    25fc:	4912      	ldr	r1, [pc, #72]	; (2648 <Clock_Ip_GetPllStatus+0xfc>)
    25fe:	9a04      	ldr	r2, [sp, #16]
    2600:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2604:	4610      	mov	r0, r2
    2606:	4798      	blx	r3
    2608:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    260a:	9b01      	ldr	r3, [sp, #4]
    260c:	2b01      	cmp	r3, #1
    260e:	d102      	bne.n	2616 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2610:	2301      	movs	r3, #1
    2612:	9305      	str	r3, [sp, #20]
                break;
    2614:	e008      	b.n	2628 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2616:	9b04      	ldr	r3, [sp, #16]
    2618:	3301      	adds	r3, #1
    261a:	9304      	str	r3, [sp, #16]
    261c:	4b09      	ldr	r3, [pc, #36]	; (2644 <Clock_Ip_GetPllStatus+0xf8>)
    261e:	78db      	ldrb	r3, [r3, #3]
    2620:	461a      	mov	r2, r3
    2622:	9b04      	ldr	r3, [sp, #16]
    2624:	4293      	cmp	r3, r2
    2626:	d3d1      	bcc.n	25cc <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2628:	9b05      	ldr	r3, [sp, #20]
}
    262a:	4618      	mov	r0, r3
    262c:	b007      	add	sp, #28
    262e:	f85d fb04 	ldr.w	pc, [sp], #4
    2632:	bf00      	nop
    2634:	000084d8 	.word	0x000084d8
    2638:	00007fd0 	.word	0x00007fd0
    263c:	00007f90 	.word	0x00007f90
    2640:	000085dc 	.word	0x000085dc
    2644:	1fff8b64 	.word	0x1fff8b64
    2648:	000084dc 	.word	0x000084dc
    264c:	00007f80 	.word	0x00007f80
    2650:	0000854c 	.word	0x0000854c

00002654 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2654:	b500      	push	{lr}
    2656:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2658:	4b55      	ldr	r3, [pc, #340]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    265a:	681b      	ldr	r3, [r3, #0]
    265c:	2b00      	cmp	r3, #0
    265e:	f000 80a2 	beq.w	27a6 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2662:	2300      	movs	r3, #0
    2664:	9301      	str	r3, [sp, #4]
    2666:	e02c      	b.n	26c2 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2668:	4b51      	ldr	r3, [pc, #324]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    266a:	681a      	ldr	r2, [r3, #0]
    266c:	9b01      	ldr	r3, [sp, #4]
    266e:	330d      	adds	r3, #13
    2670:	00db      	lsls	r3, r3, #3
    2672:	4413      	add	r3, r2
    2674:	685b      	ldr	r3, [r3, #4]
    2676:	4a4f      	ldr	r2, [pc, #316]	; (27b4 <Clock_Ip_DistributePll+0x160>)
    2678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    267c:	2b03      	cmp	r3, #3
    267e:	d11d      	bne.n	26bc <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2680:	4b4b      	ldr	r3, [pc, #300]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    2682:	681b      	ldr	r3, [r3, #0]
    2684:	9a01      	ldr	r2, [sp, #4]
    2686:	320d      	adds	r2, #13
    2688:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    268c:	494a      	ldr	r1, [pc, #296]	; (27b8 <Clock_Ip_DistributePll+0x164>)
    268e:	4613      	mov	r3, r2
    2690:	00db      	lsls	r3, r3, #3
    2692:	4413      	add	r3, r2
    2694:	440b      	add	r3, r1
    2696:	3301      	adds	r3, #1
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	461a      	mov	r2, r3
    269c:	4b47      	ldr	r3, [pc, #284]	; (27bc <Clock_Ip_DistributePll+0x168>)
    269e:	5c9b      	ldrb	r3, [r3, r2]
    26a0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    26a2:	4a47      	ldr	r2, [pc, #284]	; (27c0 <Clock_Ip_DistributePll+0x16c>)
    26a4:	9b00      	ldr	r3, [sp, #0]
    26a6:	00db      	lsls	r3, r3, #3
    26a8:	4413      	add	r3, r2
    26aa:	685b      	ldr	r3, [r3, #4]
    26ac:	4a40      	ldr	r2, [pc, #256]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    26ae:	6811      	ldr	r1, [r2, #0]
    26b0:	9a01      	ldr	r2, [sp, #4]
    26b2:	320d      	adds	r2, #13
    26b4:	00d2      	lsls	r2, r2, #3
    26b6:	440a      	add	r2, r1
    26b8:	4610      	mov	r0, r2
    26ba:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    26bc:	9b01      	ldr	r3, [sp, #4]
    26be:	3301      	adds	r3, #1
    26c0:	9301      	str	r3, [sp, #4]
    26c2:	4b3b      	ldr	r3, [pc, #236]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    26c4:	681b      	ldr	r3, [r3, #0]
    26c6:	7adb      	ldrb	r3, [r3, #11]
    26c8:	461a      	mov	r2, r3
    26ca:	9b01      	ldr	r3, [sp, #4]
    26cc:	4293      	cmp	r3, r2
    26ce:	d3cb      	bcc.n	2668 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    26d0:	4b3c      	ldr	r3, [pc, #240]	; (27c4 <Clock_Ip_DistributePll+0x170>)
    26d2:	781b      	ldrb	r3, [r3, #0]
    26d4:	2b00      	cmp	r3, #0
    26d6:	d066      	beq.n	27a6 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    26d8:	2300      	movs	r3, #0
    26da:	9301      	str	r3, [sp, #4]
    26dc:	e021      	b.n	2722 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    26de:	4b34      	ldr	r3, [pc, #208]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    26e0:	681a      	ldr	r2, [r3, #0]
    26e2:	9b01      	ldr	r3, [sp, #4]
    26e4:	334e      	adds	r3, #78	; 0x4e
    26e6:	00db      	lsls	r3, r3, #3
    26e8:	4413      	add	r3, r2
    26ea:	685a      	ldr	r2, [r3, #4]
    26ec:	4932      	ldr	r1, [pc, #200]	; (27b8 <Clock_Ip_DistributePll+0x164>)
    26ee:	4613      	mov	r3, r2
    26f0:	00db      	lsls	r3, r3, #3
    26f2:	4413      	add	r3, r2
    26f4:	440b      	add	r3, r1
    26f6:	3301      	adds	r3, #1
    26f8:	781b      	ldrb	r3, [r3, #0]
    26fa:	461a      	mov	r2, r3
    26fc:	4b32      	ldr	r3, [pc, #200]	; (27c8 <Clock_Ip_DistributePll+0x174>)
    26fe:	5c9b      	ldrb	r3, [r3, r2]
    2700:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2702:	4a32      	ldr	r2, [pc, #200]	; (27cc <Clock_Ip_DistributePll+0x178>)
    2704:	9b00      	ldr	r3, [sp, #0]
    2706:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    270a:	4a29      	ldr	r2, [pc, #164]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    270c:	6811      	ldr	r1, [r2, #0]
    270e:	9a01      	ldr	r2, [sp, #4]
    2710:	324e      	adds	r2, #78	; 0x4e
    2712:	00d2      	lsls	r2, r2, #3
    2714:	440a      	add	r2, r1
    2716:	3204      	adds	r2, #4
    2718:	4610      	mov	r0, r2
    271a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    271c:	9b01      	ldr	r3, [sp, #4]
    271e:	3301      	adds	r3, #1
    2720:	9301      	str	r3, [sp, #4]
    2722:	4b23      	ldr	r3, [pc, #140]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    2724:	681b      	ldr	r3, [r3, #0]
    2726:	7c1b      	ldrb	r3, [r3, #16]
    2728:	461a      	mov	r2, r3
    272a:	9b01      	ldr	r3, [sp, #4]
    272c:	4293      	cmp	r3, r2
    272e:	d3d6      	bcc.n	26de <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2730:	2300      	movs	r3, #0
    2732:	9301      	str	r3, [sp, #4]
    2734:	e02a      	b.n	278c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2736:	4b1e      	ldr	r3, [pc, #120]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    2738:	6819      	ldr	r1, [r3, #0]
    273a:	9a01      	ldr	r2, [sp, #4]
    273c:	4613      	mov	r3, r2
    273e:	009b      	lsls	r3, r3, #2
    2740:	4413      	add	r3, r2
    2742:	009b      	lsls	r3, r3, #2
    2744:	440b      	add	r3, r1
    2746:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    274a:	681a      	ldr	r2, [r3, #0]
    274c:	491a      	ldr	r1, [pc, #104]	; (27b8 <Clock_Ip_DistributePll+0x164>)
    274e:	4613      	mov	r3, r2
    2750:	00db      	lsls	r3, r3, #3
    2752:	4413      	add	r3, r2
    2754:	440b      	add	r3, r1
    2756:	3301      	adds	r3, #1
    2758:	781b      	ldrb	r3, [r3, #0]
    275a:	461a      	mov	r2, r3
    275c:	4b1c      	ldr	r3, [pc, #112]	; (27d0 <Clock_Ip_DistributePll+0x17c>)
    275e:	5c9b      	ldrb	r3, [r3, r2]
    2760:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2762:	4a1c      	ldr	r2, [pc, #112]	; (27d4 <Clock_Ip_DistributePll+0x180>)
    2764:	9b00      	ldr	r3, [sp, #0]
    2766:	011b      	lsls	r3, r3, #4
    2768:	4413      	add	r3, r2
    276a:	330c      	adds	r3, #12
    276c:	6819      	ldr	r1, [r3, #0]
    276e:	4b10      	ldr	r3, [pc, #64]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    2770:	6818      	ldr	r0, [r3, #0]
    2772:	9a01      	ldr	r2, [sp, #4]
    2774:	4613      	mov	r3, r2
    2776:	009b      	lsls	r3, r3, #2
    2778:	4413      	add	r3, r2
    277a:	009b      	lsls	r3, r3, #2
    277c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2780:	4403      	add	r3, r0
    2782:	4618      	mov	r0, r3
    2784:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2786:	9b01      	ldr	r3, [sp, #4]
    2788:	3301      	adds	r3, #1
    278a:	9301      	str	r3, [sp, #4]
    278c:	4b08      	ldr	r3, [pc, #32]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    278e:	681b      	ldr	r3, [r3, #0]
    2790:	7c9b      	ldrb	r3, [r3, #18]
    2792:	461a      	mov	r2, r3
    2794:	9b01      	ldr	r3, [sp, #4]
    2796:	4293      	cmp	r3, r2
    2798:	d3cd      	bcc.n	2736 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    279a:	4b05      	ldr	r3, [pc, #20]	; (27b0 <Clock_Ip_DistributePll+0x15c>)
    279c:	681b      	ldr	r3, [r3, #0]
    279e:	2104      	movs	r1, #4
    27a0:	4618      	mov	r0, r3
    27a2:	f002 fe0b 	bl	53bc <Clock_Ip_Command>
        }
    }
}
    27a6:	bf00      	nop
    27a8:	b003      	add	sp, #12
    27aa:	f85d fb04 	ldr.w	pc, [sp], #4
    27ae:	bf00      	nop
    27b0:	1fff8b5c 	.word	0x1fff8b5c
    27b4:	0000841c 	.word	0x0000841c
    27b8:	00007fd0 	.word	0x00007fd0
    27bc:	00007fa0 	.word	0x00007fa0
    27c0:	00008608 	.word	0x00008608
    27c4:	1fff8b64 	.word	0x1fff8b64
    27c8:	00007f70 	.word	0x00007f70
    27cc:	00008558 	.word	0x00008558
    27d0:	00007fc0 	.word	0x00007fc0
    27d4:	000085cc 	.word	0x000085cc

000027d8 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    27d8:	b500      	push	{lr}
    27da:	b085      	sub	sp, #20
    27dc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    27de:	490c      	ldr	r1, [pc, #48]	; (2810 <Clock_Ip_DisableClockMonitor+0x38>)
    27e0:	9a01      	ldr	r2, [sp, #4]
    27e2:	4613      	mov	r3, r2
    27e4:	00db      	lsls	r3, r3, #3
    27e6:	4413      	add	r3, r2
    27e8:	440b      	add	r3, r1
    27ea:	3301      	adds	r3, #1
    27ec:	781b      	ldrb	r3, [r3, #0]
    27ee:	461a      	mov	r2, r3
    27f0:	4b08      	ldr	r3, [pc, #32]	; (2814 <Clock_Ip_DisableClockMonitor+0x3c>)
    27f2:	5c9b      	ldrb	r3, [r3, r2]
    27f4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    27f6:	4a08      	ldr	r2, [pc, #32]	; (2818 <Clock_Ip_DisableClockMonitor+0x40>)
    27f8:	9b03      	ldr	r3, [sp, #12]
    27fa:	011b      	lsls	r3, r3, #4
    27fc:	4413      	add	r3, r2
    27fe:	3308      	adds	r3, #8
    2800:	681b      	ldr	r3, [r3, #0]
    2802:	9801      	ldr	r0, [sp, #4]
    2804:	4798      	blx	r3
}
    2806:	bf00      	nop
    2808:	b005      	add	sp, #20
    280a:	f85d fb04 	ldr.w	pc, [sp], #4
    280e:	bf00      	nop
    2810:	00007fd0 	.word	0x00007fd0
    2814:	00007fc0 	.word	0x00007fc0
    2818:	000085cc 	.word	0x000085cc

0000281c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    281c:	b082      	sub	sp, #8
    281e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2820:	4a02      	ldr	r2, [pc, #8]	; (282c <Clock_Ip_InstallNotificationsCallback+0x10>)
    2822:	9b01      	ldr	r3, [sp, #4]
    2824:	6013      	str	r3, [r2, #0]
}
    2826:	bf00      	nop
    2828:	b002      	add	sp, #8
    282a:	4770      	bx	lr
    282c:	1fff8b1c 	.word	0x1fff8b1c

00002830 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2830:	b500      	push	{lr}
    2832:	b085      	sub	sp, #20
    2834:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2836:	490c      	ldr	r1, [pc, #48]	; (2868 <Clock_Ip_DisableModuleClock+0x38>)
    2838:	9a01      	ldr	r2, [sp, #4]
    283a:	4613      	mov	r3, r2
    283c:	00db      	lsls	r3, r3, #3
    283e:	4413      	add	r3, r2
    2840:	440b      	add	r3, r1
    2842:	3301      	adds	r3, #1
    2844:	781b      	ldrb	r3, [r3, #0]
    2846:	461a      	mov	r2, r3
    2848:	4b08      	ldr	r3, [pc, #32]	; (286c <Clock_Ip_DisableModuleClock+0x3c>)
    284a:	5c9b      	ldrb	r3, [r3, r2]
    284c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    284e:	4a08      	ldr	r2, [pc, #32]	; (2870 <Clock_Ip_DisableModuleClock+0x40>)
    2850:	9b03      	ldr	r3, [sp, #12]
    2852:	00db      	lsls	r3, r3, #3
    2854:	4413      	add	r3, r2
    2856:	685b      	ldr	r3, [r3, #4]
    2858:	2101      	movs	r1, #1
    285a:	9801      	ldr	r0, [sp, #4]
    285c:	4798      	blx	r3
}
    285e:	bf00      	nop
    2860:	b005      	add	sp, #20
    2862:	f85d fb04 	ldr.w	pc, [sp], #4
    2866:	bf00      	nop
    2868:	00007fd0 	.word	0x00007fd0
    286c:	00007f70 	.word	0x00007f70
    2870:	00008558 	.word	0x00008558

00002874 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2874:	b500      	push	{lr}
    2876:	b085      	sub	sp, #20
    2878:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    287a:	490c      	ldr	r1, [pc, #48]	; (28ac <Clock_Ip_EnableModuleClock+0x38>)
    287c:	9a01      	ldr	r2, [sp, #4]
    287e:	4613      	mov	r3, r2
    2880:	00db      	lsls	r3, r3, #3
    2882:	4413      	add	r3, r2
    2884:	440b      	add	r3, r1
    2886:	3301      	adds	r3, #1
    2888:	781b      	ldrb	r3, [r3, #0]
    288a:	461a      	mov	r2, r3
    288c:	4b08      	ldr	r3, [pc, #32]	; (28b0 <Clock_Ip_EnableModuleClock+0x3c>)
    288e:	5c9b      	ldrb	r3, [r3, r2]
    2890:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2892:	4a08      	ldr	r2, [pc, #32]	; (28b4 <Clock_Ip_EnableModuleClock+0x40>)
    2894:	9b03      	ldr	r3, [sp, #12]
    2896:	00db      	lsls	r3, r3, #3
    2898:	4413      	add	r3, r2
    289a:	685b      	ldr	r3, [r3, #4]
    289c:	2100      	movs	r1, #0
    289e:	9801      	ldr	r0, [sp, #4]
    28a0:	4798      	blx	r3
}
    28a2:	bf00      	nop
    28a4:	b005      	add	sp, #20
    28a6:	f85d fb04 	ldr.w	pc, [sp], #4
    28aa:	bf00      	nop
    28ac:	00007fd0 	.word	0x00007fd0
    28b0:	00007f70 	.word	0x00007f70
    28b4:	00008558 	.word	0x00008558

000028b8 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    28b8:	b500      	push	{lr}
    28ba:	b083      	sub	sp, #12
    28bc:	9001      	str	r0, [sp, #4]
    28be:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    28c0:	4b08      	ldr	r3, [pc, #32]	; (28e4 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    28c2:	2200      	movs	r2, #0
    28c4:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    28c6:	4b08      	ldr	r3, [pc, #32]	; (28e8 <Clock_Ip_PowerModeChangeNotification+0x30>)
    28c8:	681b      	ldr	r3, [r3, #0]
    28ca:	2102      	movs	r1, #2
    28cc:	4618      	mov	r0, r3
    28ce:	f002 fd75 	bl	53bc <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    28d2:	9900      	ldr	r1, [sp, #0]
    28d4:	9801      	ldr	r0, [sp, #4]
    28d6:	f002 fc51 	bl	517c <Clock_Ip_ClockPowerModeChangeNotification>
}
    28da:	bf00      	nop
    28dc:	b003      	add	sp, #12
    28de:	f85d fb04 	ldr.w	pc, [sp], #4
    28e2:	bf00      	nop
    28e4:	1fff8b19 	.word	0x1fff8b19
    28e8:	1fff8b5c 	.word	0x1fff8b5c

000028ec <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    28ec:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    28ee:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    28f2:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    28f4:	4b06      	ldr	r3, [pc, #24]	; (2910 <Clock_Ip_SetWaitStates+0x24>)
    28f6:	785b      	ldrb	r3, [r3, #1]
    28f8:	2b00      	cmp	r3, #0
    28fa:	d005      	beq.n	2908 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    28fc:	9b01      	ldr	r3, [sp, #4]
    28fe:	3b01      	subs	r3, #1
    2900:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2902:	9b01      	ldr	r3, [sp, #4]
    2904:	2b00      	cmp	r3, #0
    2906:	d1f9      	bne.n	28fc <Clock_Ip_SetWaitStates+0x10>
    }
}
    2908:	bf00      	nop
    290a:	b002      	add	sp, #8
    290c:	4770      	bx	lr
    290e:	bf00      	nop
    2910:	1fff8b64 	.word	0x1fff8b64

00002914 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2914:	b500      	push	{lr}
    2916:	b083      	sub	sp, #12
    2918:	9001      	str	r0, [sp, #4]
    291a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    291c:	4b04      	ldr	r3, [pc, #16]	; (2930 <Clock_Ip_ReportClockErrors+0x1c>)
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	9900      	ldr	r1, [sp, #0]
    2922:	9801      	ldr	r0, [sp, #4]
    2924:	4798      	blx	r3
}
    2926:	bf00      	nop
    2928:	b003      	add	sp, #12
    292a:	f85d fb04 	ldr.w	pc, [sp], #4
    292e:	bf00      	nop
    2930:	1fff8b1c 	.word	0x1fff8b1c

00002934 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2934:	b500      	push	{lr}
    2936:	b085      	sub	sp, #20
    2938:	9003      	str	r0, [sp, #12]
    293a:	9102      	str	r1, [sp, #8]
    293c:	9201      	str	r2, [sp, #4]
    293e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2940:	2000      	movs	r0, #0
    2942:	f7fe ffd0 	bl	18e6 <OsIf_GetCounter>
    2946:	4602      	mov	r2, r0
    2948:	9b03      	ldr	r3, [sp, #12]
    294a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    294c:	9b02      	ldr	r3, [sp, #8]
    294e:	2200      	movs	r2, #0
    2950:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2952:	2100      	movs	r1, #0
    2954:	9800      	ldr	r0, [sp, #0]
    2956:	f7ff f812 	bl	197e <OsIf_MicrosToTicks>
    295a:	4602      	mov	r2, r0
    295c:	9b01      	ldr	r3, [sp, #4]
    295e:	601a      	str	r2, [r3, #0]
}
    2960:	bf00      	nop
    2962:	b005      	add	sp, #20
    2964:	f85d fb04 	ldr.w	pc, [sp], #4

00002968 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2968:	b500      	push	{lr}
    296a:	b087      	sub	sp, #28
    296c:	9003      	str	r0, [sp, #12]
    296e:	9102      	str	r1, [sp, #8]
    2970:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2972:	2300      	movs	r3, #0
    2974:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2978:	2100      	movs	r1, #0
    297a:	9803      	ldr	r0, [sp, #12]
    297c:	f7fe ffcc 	bl	1918 <OsIf_GetElapsed>
    2980:	4602      	mov	r2, r0
    2982:	9b02      	ldr	r3, [sp, #8]
    2984:	681b      	ldr	r3, [r3, #0]
    2986:	441a      	add	r2, r3
    2988:	9b02      	ldr	r3, [sp, #8]
    298a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    298c:	9b02      	ldr	r3, [sp, #8]
    298e:	681b      	ldr	r3, [r3, #0]
    2990:	9a01      	ldr	r2, [sp, #4]
    2992:	429a      	cmp	r2, r3
    2994:	d802      	bhi.n	299c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2996:	2301      	movs	r3, #1
    2998:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    299c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    29a0:	4618      	mov	r0, r3
    29a2:	b007      	add	sp, #28
    29a4:	f85d fb04 	ldr.w	pc, [sp], #4

000029a8 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    29a8:	b082      	sub	sp, #8
    29aa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    29ac:	bf00      	nop
    29ae:	b002      	add	sp, #8
    29b0:	4770      	bx	lr

000029b2 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    29b2:	b500      	push	{lr}
    29b4:	b083      	sub	sp, #12
    29b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29b8:	9b01      	ldr	r3, [sp, #4]
    29ba:	2b00      	cmp	r3, #0
    29bc:	d002      	beq.n	29c4 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    29be:	9801      	ldr	r0, [sp, #4]
    29c0:	f000 f8ad 	bl	2b1e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29c4:	bf00      	nop
    29c6:	b003      	add	sp, #12
    29c8:	f85d fb04 	ldr.w	pc, [sp], #4

000029cc <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    29cc:	b500      	push	{lr}
    29ce:	b083      	sub	sp, #12
    29d0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29d2:	9b01      	ldr	r3, [sp, #4]
    29d4:	2b00      	cmp	r3, #0
    29d6:	d002      	beq.n	29de <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    29d8:	9801      	ldr	r0, [sp, #4]
    29da:	f000 f8cd 	bl	2b78 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29de:	bf00      	nop
    29e0:	b003      	add	sp, #12
    29e2:	f85d fb04 	ldr.w	pc, [sp], #4

000029e6 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    29e6:	b500      	push	{lr}
    29e8:	b083      	sub	sp, #12
    29ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29ec:	9b01      	ldr	r3, [sp, #4]
    29ee:	2b00      	cmp	r3, #0
    29f0:	d002      	beq.n	29f8 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    29f2:	9801      	ldr	r0, [sp, #4]
    29f4:	f000 f8ee 	bl	2bd4 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29f8:	bf00      	nop
    29fa:	b003      	add	sp, #12
    29fc:	f85d fb04 	ldr.w	pc, [sp], #4

00002a00 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2a00:	b500      	push	{lr}
    2a02:	b083      	sub	sp, #12
    2a04:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a06:	9b01      	ldr	r3, [sp, #4]
    2a08:	2b00      	cmp	r3, #0
    2a0a:	d002      	beq.n	2a12 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2a0c:	9801      	ldr	r0, [sp, #4]
    2a0e:	f000 f8f9 	bl	2c04 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a12:	bf00      	nop
    2a14:	b003      	add	sp, #12
    2a16:	f85d fb04 	ldr.w	pc, [sp], #4

00002a1a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2a1a:	b500      	push	{lr}
    2a1c:	b083      	sub	sp, #12
    2a1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a20:	9b01      	ldr	r3, [sp, #4]
    2a22:	2b00      	cmp	r3, #0
    2a24:	d002      	beq.n	2a2c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2a26:	9801      	ldr	r0, [sp, #4]
    2a28:	f000 f904 	bl	2c34 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a2c:	bf00      	nop
    2a2e:	b003      	add	sp, #12
    2a30:	f85d fb04 	ldr.w	pc, [sp], #4

00002a34 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2a34:	b500      	push	{lr}
    2a36:	b083      	sub	sp, #12
    2a38:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a3a:	9b01      	ldr	r3, [sp, #4]
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	d002      	beq.n	2a46 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2a40:	9801      	ldr	r0, [sp, #4]
    2a42:	f000 f90f 	bl	2c64 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a46:	bf00      	nop
    2a48:	b003      	add	sp, #12
    2a4a:	f85d fb04 	ldr.w	pc, [sp], #4

00002a4e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2a4e:	b500      	push	{lr}
    2a50:	b083      	sub	sp, #12
    2a52:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a54:	9b01      	ldr	r3, [sp, #4]
    2a56:	2b00      	cmp	r3, #0
    2a58:	d002      	beq.n	2a60 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2a5a:	9801      	ldr	r0, [sp, #4]
    2a5c:	f000 f91a 	bl	2c94 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a60:	bf00      	nop
    2a62:	b003      	add	sp, #12
    2a64:	f85d fb04 	ldr.w	pc, [sp], #4

00002a68 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2a68:	b500      	push	{lr}
    2a6a:	b083      	sub	sp, #12
    2a6c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a6e:	9b01      	ldr	r3, [sp, #4]
    2a70:	2b00      	cmp	r3, #0
    2a72:	d002      	beq.n	2a7a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2a74:	9801      	ldr	r0, [sp, #4]
    2a76:	f000 f925 	bl	2cc4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a7a:	bf00      	nop
    2a7c:	b003      	add	sp, #12
    2a7e:	f85d fb04 	ldr.w	pc, [sp], #4

00002a82 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2a82:	b500      	push	{lr}
    2a84:	b083      	sub	sp, #12
    2a86:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a88:	9b01      	ldr	r3, [sp, #4]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d002      	beq.n	2a94 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2a8e:	9801      	ldr	r0, [sp, #4]
    2a90:	f000 f930 	bl	2cf4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a94:	bf00      	nop
    2a96:	b003      	add	sp, #12
    2a98:	f85d fb04 	ldr.w	pc, [sp], #4

00002a9c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2a9c:	b500      	push	{lr}
    2a9e:	b083      	sub	sp, #12
    2aa0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2aa2:	9b01      	ldr	r3, [sp, #4]
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	d002      	beq.n	2aae <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2aa8:	9801      	ldr	r0, [sp, #4]
    2aaa:	f000 f93b 	bl	2d24 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2aae:	bf00      	nop
    2ab0:	b003      	add	sp, #12
    2ab2:	f85d fb04 	ldr.w	pc, [sp], #4

00002ab6 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2ab6:	b500      	push	{lr}
    2ab8:	b083      	sub	sp, #12
    2aba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2abc:	9b01      	ldr	r3, [sp, #4]
    2abe:	2b00      	cmp	r3, #0
    2ac0:	d002      	beq.n	2ac8 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2ac2:	9801      	ldr	r0, [sp, #4]
    2ac4:	f000 f946 	bl	2d54 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ac8:	bf00      	nop
    2aca:	b003      	add	sp, #12
    2acc:	f85d fb04 	ldr.w	pc, [sp], #4

00002ad0 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2ad0:	b500      	push	{lr}
    2ad2:	b083      	sub	sp, #12
    2ad4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ad6:	9b01      	ldr	r3, [sp, #4]
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d002      	beq.n	2ae2 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2adc:	9801      	ldr	r0, [sp, #4]
    2ade:	f000 f951 	bl	2d84 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ae2:	bf00      	nop
    2ae4:	b003      	add	sp, #12
    2ae6:	f85d fb04 	ldr.w	pc, [sp], #4

00002aea <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2aea:	b500      	push	{lr}
    2aec:	b083      	sub	sp, #12
    2aee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2af0:	9b01      	ldr	r3, [sp, #4]
    2af2:	2b00      	cmp	r3, #0
    2af4:	d002      	beq.n	2afc <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2af6:	9801      	ldr	r0, [sp, #4]
    2af8:	f000 f95e 	bl	2db8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2afc:	bf00      	nop
    2afe:	b003      	add	sp, #12
    2b00:	f85d fb04 	ldr.w	pc, [sp], #4

00002b04 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2b04:	b500      	push	{lr}
    2b06:	b083      	sub	sp, #12
    2b08:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b0a:	9b01      	ldr	r3, [sp, #4]
    2b0c:	2b00      	cmp	r3, #0
    2b0e:	d002      	beq.n	2b16 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2b10:	9801      	ldr	r0, [sp, #4]
    2b12:	f000 f98b 	bl	2e2c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b16:	bf00      	nop
    2b18:	b003      	add	sp, #12
    2b1a:	f85d fb04 	ldr.w	pc, [sp], #4

00002b1e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2b1e:	b086      	sub	sp, #24
    2b20:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2b22:	9b01      	ldr	r3, [sp, #4]
    2b24:	681a      	ldr	r2, [r3, #0]
    2b26:	4911      	ldr	r1, [pc, #68]	; (2b6c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2b28:	4613      	mov	r3, r2
    2b2a:	00db      	lsls	r3, r3, #3
    2b2c:	4413      	add	r3, r2
    2b2e:	440b      	add	r3, r1
    2b30:	781b      	ldrb	r3, [r3, #0]
    2b32:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2b34:	9b01      	ldr	r3, [sp, #4]
    2b36:	685b      	ldr	r3, [r3, #4]
    2b38:	4a0d      	ldr	r2, [pc, #52]	; (2b70 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2b3a:	5cd3      	ldrb	r3, [r2, r3]
    2b3c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2b3e:	4a0d      	ldr	r2, [pc, #52]	; (2b74 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2b40:	9b05      	ldr	r3, [sp, #20]
    2b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b46:	681b      	ldr	r3, [r3, #0]
    2b48:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2b4a:	9b03      	ldr	r3, [sp, #12]
    2b4c:	f023 0307 	bic.w	r3, r3, #7
    2b50:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2b52:	9a03      	ldr	r2, [sp, #12]
    2b54:	9b04      	ldr	r3, [sp, #16]
    2b56:	4313      	orrs	r3, r2
    2b58:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2b5a:	4a06      	ldr	r2, [pc, #24]	; (2b74 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2b5c:	9b05      	ldr	r3, [sp, #20]
    2b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b62:	9a03      	ldr	r2, [sp, #12]
    2b64:	601a      	str	r2, [r3, #0]
}
    2b66:	bf00      	nop
    2b68:	b006      	add	sp, #24
    2b6a:	4770      	bx	lr
    2b6c:	00007fd0 	.word	0x00007fd0
    2b70:	000083c8 	.word	0x000083c8
    2b74:	0000840c 	.word	0x0000840c

00002b78 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2b78:	b086      	sub	sp, #24
    2b7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2b7c:	9b01      	ldr	r3, [sp, #4]
    2b7e:	681a      	ldr	r2, [r3, #0]
    2b80:	4911      	ldr	r1, [pc, #68]	; (2bc8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2b82:	4613      	mov	r3, r2
    2b84:	00db      	lsls	r3, r3, #3
    2b86:	4413      	add	r3, r2
    2b88:	440b      	add	r3, r1
    2b8a:	781b      	ldrb	r3, [r3, #0]
    2b8c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2b8e:	9b01      	ldr	r3, [sp, #4]
    2b90:	685b      	ldr	r3, [r3, #4]
    2b92:	4a0e      	ldr	r2, [pc, #56]	; (2bcc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2b94:	5cd3      	ldrb	r3, [r2, r3]
    2b96:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2b98:	4a0d      	ldr	r2, [pc, #52]	; (2bd0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2b9a:	9b05      	ldr	r3, [sp, #20]
    2b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2ba0:	681b      	ldr	r3, [r3, #0]
    2ba2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2ba4:	9b03      	ldr	r3, [sp, #12]
    2ba6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2baa:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2bac:	9b04      	ldr	r3, [sp, #16]
    2bae:	021b      	lsls	r3, r3, #8
    2bb0:	9a03      	ldr	r2, [sp, #12]
    2bb2:	4313      	orrs	r3, r2
    2bb4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2bb6:	4a06      	ldr	r2, [pc, #24]	; (2bd0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2bb8:	9b05      	ldr	r3, [sp, #20]
    2bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2bbe:	9a03      	ldr	r2, [sp, #12]
    2bc0:	601a      	str	r2, [r3, #0]
}
    2bc2:	bf00      	nop
    2bc4:	b006      	add	sp, #24
    2bc6:	4770      	bx	lr
    2bc8:	00007fd0 	.word	0x00007fd0
    2bcc:	000083c8 	.word	0x000083c8
    2bd0:	0000840c 	.word	0x0000840c

00002bd4 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2bd4:	b084      	sub	sp, #16
    2bd6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2bd8:	4b09      	ldr	r3, [pc, #36]	; (2c00 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2bda:	695b      	ldr	r3, [r3, #20]
    2bdc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2bde:	9b03      	ldr	r3, [sp, #12]
    2be0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2be4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2be6:	9b01      	ldr	r3, [sp, #4]
    2be8:	685b      	ldr	r3, [r3, #4]
    2bea:	3b01      	subs	r3, #1
    2bec:	041b      	lsls	r3, r3, #16
    2bee:	9a03      	ldr	r2, [sp, #12]
    2bf0:	4313      	orrs	r3, r2
    2bf2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2bf4:	4a02      	ldr	r2, [pc, #8]	; (2c00 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2bf6:	9b03      	ldr	r3, [sp, #12]
    2bf8:	6153      	str	r3, [r2, #20]
}
    2bfa:	bf00      	nop
    2bfc:	b004      	add	sp, #16
    2bfe:	4770      	bx	lr
    2c00:	40064000 	.word	0x40064000

00002c04 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2c04:	b084      	sub	sp, #16
    2c06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2c08:	4b09      	ldr	r3, [pc, #36]	; (2c30 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2c0a:	695b      	ldr	r3, [r3, #20]
    2c0c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2c0e:	9b03      	ldr	r3, [sp, #12]
    2c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2c14:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2c16:	9b01      	ldr	r3, [sp, #4]
    2c18:	685b      	ldr	r3, [r3, #4]
    2c1a:	3b01      	subs	r3, #1
    2c1c:	011b      	lsls	r3, r3, #4
    2c1e:	9a03      	ldr	r2, [sp, #12]
    2c20:	4313      	orrs	r3, r2
    2c22:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2c24:	4a02      	ldr	r2, [pc, #8]	; (2c30 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2c26:	9b03      	ldr	r3, [sp, #12]
    2c28:	6153      	str	r3, [r2, #20]
}
    2c2a:	bf00      	nop
    2c2c:	b004      	add	sp, #16
    2c2e:	4770      	bx	lr
    2c30:	40064000 	.word	0x40064000

00002c34 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2c34:	b084      	sub	sp, #16
    2c36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2c38:	4b09      	ldr	r3, [pc, #36]	; (2c60 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2c3a:	695b      	ldr	r3, [r3, #20]
    2c3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2c3e:	9b03      	ldr	r3, [sp, #12]
    2c40:	f023 030f 	bic.w	r3, r3, #15
    2c44:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2c46:	9b01      	ldr	r3, [sp, #4]
    2c48:	685b      	ldr	r3, [r3, #4]
    2c4a:	3b01      	subs	r3, #1
    2c4c:	9a03      	ldr	r2, [sp, #12]
    2c4e:	4313      	orrs	r3, r2
    2c50:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2c52:	4a03      	ldr	r2, [pc, #12]	; (2c60 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2c54:	9b03      	ldr	r3, [sp, #12]
    2c56:	6153      	str	r3, [r2, #20]
}
    2c58:	bf00      	nop
    2c5a:	b004      	add	sp, #16
    2c5c:	4770      	bx	lr
    2c5e:	bf00      	nop
    2c60:	40064000 	.word	0x40064000

00002c64 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2c64:	b084      	sub	sp, #16
    2c66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2c68:	4b09      	ldr	r3, [pc, #36]	; (2c90 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2c6a:	699b      	ldr	r3, [r3, #24]
    2c6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2c6e:	9b03      	ldr	r3, [sp, #12]
    2c70:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2c74:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2c76:	9b01      	ldr	r3, [sp, #4]
    2c78:	685b      	ldr	r3, [r3, #4]
    2c7a:	3b01      	subs	r3, #1
    2c7c:	041b      	lsls	r3, r3, #16
    2c7e:	9a03      	ldr	r2, [sp, #12]
    2c80:	4313      	orrs	r3, r2
    2c82:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2c84:	4a02      	ldr	r2, [pc, #8]	; (2c90 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2c86:	9b03      	ldr	r3, [sp, #12]
    2c88:	6193      	str	r3, [r2, #24]
}
    2c8a:	bf00      	nop
    2c8c:	b004      	add	sp, #16
    2c8e:	4770      	bx	lr
    2c90:	40064000 	.word	0x40064000

00002c94 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2c94:	b084      	sub	sp, #16
    2c96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2c98:	4b09      	ldr	r3, [pc, #36]	; (2cc0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2c9a:	699b      	ldr	r3, [r3, #24]
    2c9c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2c9e:	9b03      	ldr	r3, [sp, #12]
    2ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2ca4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2ca6:	9b01      	ldr	r3, [sp, #4]
    2ca8:	685b      	ldr	r3, [r3, #4]
    2caa:	3b01      	subs	r3, #1
    2cac:	011b      	lsls	r3, r3, #4
    2cae:	9a03      	ldr	r2, [sp, #12]
    2cb0:	4313      	orrs	r3, r2
    2cb2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2cb4:	4a02      	ldr	r2, [pc, #8]	; (2cc0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2cb6:	9b03      	ldr	r3, [sp, #12]
    2cb8:	6193      	str	r3, [r2, #24]
}
    2cba:	bf00      	nop
    2cbc:	b004      	add	sp, #16
    2cbe:	4770      	bx	lr
    2cc0:	40064000 	.word	0x40064000

00002cc4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2cc4:	b084      	sub	sp, #16
    2cc6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2cc8:	4b09      	ldr	r3, [pc, #36]	; (2cf0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2cca:	699b      	ldr	r3, [r3, #24]
    2ccc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2cce:	9b03      	ldr	r3, [sp, #12]
    2cd0:	f023 030f 	bic.w	r3, r3, #15
    2cd4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2cd6:	9b01      	ldr	r3, [sp, #4]
    2cd8:	685b      	ldr	r3, [r3, #4]
    2cda:	3b01      	subs	r3, #1
    2cdc:	9a03      	ldr	r2, [sp, #12]
    2cde:	4313      	orrs	r3, r2
    2ce0:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2ce2:	4a03      	ldr	r2, [pc, #12]	; (2cf0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2ce4:	9b03      	ldr	r3, [sp, #12]
    2ce6:	6193      	str	r3, [r2, #24]
}
    2ce8:	bf00      	nop
    2cea:	b004      	add	sp, #16
    2cec:	4770      	bx	lr
    2cee:	bf00      	nop
    2cf0:	40064000 	.word	0x40064000

00002cf4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2cf4:	b084      	sub	sp, #16
    2cf6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2cf8:	4b09      	ldr	r3, [pc, #36]	; (2d20 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2cfa:	69db      	ldr	r3, [r3, #28]
    2cfc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2cfe:	9b03      	ldr	r3, [sp, #12]
    2d00:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2d04:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2d06:	9b01      	ldr	r3, [sp, #4]
    2d08:	685b      	ldr	r3, [r3, #4]
    2d0a:	3b01      	subs	r3, #1
    2d0c:	041b      	lsls	r3, r3, #16
    2d0e:	9a03      	ldr	r2, [sp, #12]
    2d10:	4313      	orrs	r3, r2
    2d12:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2d14:	4a02      	ldr	r2, [pc, #8]	; (2d20 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2d16:	9b03      	ldr	r3, [sp, #12]
    2d18:	61d3      	str	r3, [r2, #28]
}
    2d1a:	bf00      	nop
    2d1c:	b004      	add	sp, #16
    2d1e:	4770      	bx	lr
    2d20:	40064000 	.word	0x40064000

00002d24 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d24:	b084      	sub	sp, #16
    2d26:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2d28:	4b09      	ldr	r3, [pc, #36]	; (2d50 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2d2a:	69db      	ldr	r3, [r3, #28]
    2d2c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2d2e:	9b03      	ldr	r3, [sp, #12]
    2d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2d34:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2d36:	9b01      	ldr	r3, [sp, #4]
    2d38:	685b      	ldr	r3, [r3, #4]
    2d3a:	3b01      	subs	r3, #1
    2d3c:	011b      	lsls	r3, r3, #4
    2d3e:	9a03      	ldr	r2, [sp, #12]
    2d40:	4313      	orrs	r3, r2
    2d42:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2d44:	4a02      	ldr	r2, [pc, #8]	; (2d50 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2d46:	9b03      	ldr	r3, [sp, #12]
    2d48:	61d3      	str	r3, [r2, #28]
}
    2d4a:	bf00      	nop
    2d4c:	b004      	add	sp, #16
    2d4e:	4770      	bx	lr
    2d50:	40064000 	.word	0x40064000

00002d54 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2d54:	b084      	sub	sp, #16
    2d56:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2d58:	4b09      	ldr	r3, [pc, #36]	; (2d80 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2d5a:	69db      	ldr	r3, [r3, #28]
    2d5c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2d5e:	9b03      	ldr	r3, [sp, #12]
    2d60:	f023 030f 	bic.w	r3, r3, #15
    2d64:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2d66:	9b01      	ldr	r3, [sp, #4]
    2d68:	685b      	ldr	r3, [r3, #4]
    2d6a:	3b01      	subs	r3, #1
    2d6c:	9a03      	ldr	r2, [sp, #12]
    2d6e:	4313      	orrs	r3, r2
    2d70:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2d72:	4a03      	ldr	r2, [pc, #12]	; (2d80 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2d74:	9b03      	ldr	r3, [sp, #12]
    2d76:	61d3      	str	r3, [r2, #28]
}
    2d78:	bf00      	nop
    2d7a:	b004      	add	sp, #16
    2d7c:	4770      	bx	lr
    2d7e:	bf00      	nop
    2d80:	40064000 	.word	0x40064000

00002d84 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2d84:	b084      	sub	sp, #16
    2d86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2d88:	4b0a      	ldr	r3, [pc, #40]	; (2db4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2d8a:	685b      	ldr	r3, [r3, #4]
    2d8c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    2d8e:	9b03      	ldr	r3, [sp, #12]
    2d90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2d94:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2d96:	9b01      	ldr	r3, [sp, #4]
    2d98:	685b      	ldr	r3, [r3, #4]
    2d9a:	3b01      	subs	r3, #1
    2d9c:	021b      	lsls	r3, r3, #8
    2d9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2da2:	9a03      	ldr	r2, [sp, #12]
    2da4:	4313      	orrs	r3, r2
    2da6:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2da8:	4a02      	ldr	r2, [pc, #8]	; (2db4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2daa:	9b03      	ldr	r3, [sp, #12]
    2dac:	6053      	str	r3, [r2, #4]
}
    2dae:	bf00      	nop
    2db0:	b004      	add	sp, #16
    2db2:	4770      	bx	lr
    2db4:	40048000 	.word	0x40048000

00002db8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2db8:	b084      	sub	sp, #16
    2dba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2dbc:	4919      	ldr	r1, [pc, #100]	; (2e24 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2dbe:	9b01      	ldr	r3, [sp, #4]
    2dc0:	681a      	ldr	r2, [r3, #0]
    2dc2:	4819      	ldr	r0, [pc, #100]	; (2e28 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2dc4:	4613      	mov	r3, r2
    2dc6:	00db      	lsls	r3, r3, #3
    2dc8:	4413      	add	r3, r2
    2dca:	4403      	add	r3, r0
    2dcc:	3305      	adds	r3, #5
    2dce:	781b      	ldrb	r3, [r3, #0]
    2dd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2dd4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2dd6:	9b03      	ldr	r3, [sp, #12]
    2dd8:	f023 030f 	bic.w	r3, r3, #15
    2ddc:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    2dde:	9b01      	ldr	r3, [sp, #4]
    2de0:	685b      	ldr	r3, [r3, #4]
    2de2:	3b01      	subs	r3, #1
    2de4:	f003 0307 	and.w	r3, r3, #7
    2de8:	9a03      	ldr	r2, [sp, #12]
    2dea:	4313      	orrs	r3, r2
    2dec:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    2dee:	9b01      	ldr	r3, [sp, #4]
    2df0:	7a1b      	ldrb	r3, [r3, #8]
    2df2:	3b01      	subs	r3, #1
    2df4:	00db      	lsls	r3, r3, #3
    2df6:	f003 0308 	and.w	r3, r3, #8
    2dfa:	9a03      	ldr	r2, [sp, #12]
    2dfc:	4313      	orrs	r3, r2
    2dfe:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2e00:	4908      	ldr	r1, [pc, #32]	; (2e24 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2e02:	9b01      	ldr	r3, [sp, #4]
    2e04:	681a      	ldr	r2, [r3, #0]
    2e06:	4808      	ldr	r0, [pc, #32]	; (2e28 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2e08:	4613      	mov	r3, r2
    2e0a:	00db      	lsls	r3, r3, #3
    2e0c:	4413      	add	r3, r2
    2e0e:	4403      	add	r3, r0
    2e10:	3305      	adds	r3, #5
    2e12:	781b      	ldrb	r3, [r3, #0]
    2e14:	461a      	mov	r2, r3
    2e16:	9b03      	ldr	r3, [sp, #12]
    2e18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2e1c:	bf00      	nop
    2e1e:	b004      	add	sp, #16
    2e20:	4770      	bx	lr
    2e22:	bf00      	nop
    2e24:	40065000 	.word	0x40065000
    2e28:	00007fd0 	.word	0x00007fd0

00002e2c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e2c:	b084      	sub	sp, #16
    2e2e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2e30:	4b10      	ldr	r3, [pc, #64]	; (2e74 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2e34:	4a0f      	ldr	r2, [pc, #60]	; (2e74 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2e3a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    2e3c:	4b0d      	ldr	r3, [pc, #52]	; (2e74 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2e40:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    2e42:	9b03      	ldr	r3, [sp, #12]
    2e44:	f023 030f 	bic.w	r3, r3, #15
    2e48:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2e4a:	9b01      	ldr	r3, [sp, #4]
    2e4c:	685b      	ldr	r3, [r3, #4]
    2e4e:	3b01      	subs	r3, #1
    2e50:	005b      	lsls	r3, r3, #1
    2e52:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2e56:	9b01      	ldr	r3, [sp, #4]
    2e58:	7a1b      	ldrb	r3, [r3, #8]
    2e5a:	3b01      	subs	r3, #1
    2e5c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2e60:	4313      	orrs	r3, r2
    2e62:	9a03      	ldr	r2, [sp, #12]
    2e64:	4313      	orrs	r3, r2
    2e66:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2e68:	4a02      	ldr	r2, [pc, #8]	; (2e74 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2e6a:	9b03      	ldr	r3, [sp, #12]
    2e6c:	6693      	str	r3, [r2, #104]	; 0x68
}
    2e6e:	bf00      	nop
    2e70:	b004      	add	sp, #16
    2e72:	4770      	bx	lr
    2e74:	40048000 	.word	0x40048000

00002e78 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2e78:	b082      	sub	sp, #8
    2e7a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e7c:	bf00      	nop
    2e7e:	b002      	add	sp, #8
    2e80:	4770      	bx	lr
	...

00002e84 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2e84:	b082      	sub	sp, #8
    2e86:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e88:	bf00      	nop
    2e8a:	b002      	add	sp, #8
    2e8c:	4770      	bx	lr

00002e8e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    2e8e:	b082      	sub	sp, #8
    2e90:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    2e92:	bf00      	nop
    2e94:	b002      	add	sp, #8
    2e96:	4770      	bx	lr

00002e98 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2e98:	b500      	push	{lr}
    2e9a:	b083      	sub	sp, #12
    2e9c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e9e:	9b01      	ldr	r3, [sp, #4]
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d002      	beq.n	2eaa <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2ea4:	9801      	ldr	r0, [sp, #4]
    2ea6:	f000 f86a 	bl	2f7e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2eaa:	bf00      	nop
    2eac:	b003      	add	sp, #12
    2eae:	f85d fb04 	ldr.w	pc, [sp], #4

00002eb2 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2eb2:	b500      	push	{lr}
    2eb4:	b083      	sub	sp, #12
    2eb6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2eb8:	9b01      	ldr	r3, [sp, #4]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d002      	beq.n	2ec4 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    2ebe:	9801      	ldr	r0, [sp, #4]
    2ec0:	f000 f884 	bl	2fcc <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    2ec4:	bf00      	nop
    2ec6:	b003      	add	sp, #12
    2ec8:	f85d fb04 	ldr.w	pc, [sp], #4

00002ecc <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2ecc:	b500      	push	{lr}
    2ece:	b089      	sub	sp, #36	; 0x24
    2ed0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2ed2:	2300      	movs	r3, #0
    2ed4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2ed8:	9b01      	ldr	r3, [sp, #4]
    2eda:	2b00      	cmp	r3, #0
    2edc:	d031      	beq.n	2f42 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    2ede:	4b1b      	ldr	r3, [pc, #108]	; (2f4c <Clock_Ip_CompleteSOSC+0x80>)
    2ee0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2ee4:	f003 0301 	and.w	r3, r3, #1
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d02a      	beq.n	2f42 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2eec:	aa03      	add	r2, sp, #12
    2eee:	a904      	add	r1, sp, #16
    2ef0:	a805      	add	r0, sp, #20
    2ef2:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ef6:	f7ff fd1d 	bl	2934 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2efa:	4b14      	ldr	r3, [pc, #80]	; (2f4c <Clock_Ip_CompleteSOSC+0x80>)
    2efc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2f00:	0e1b      	lsrs	r3, r3, #24
    2f02:	f003 0301 	and.w	r3, r3, #1
    2f06:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f08:	9a03      	ldr	r2, [sp, #12]
    2f0a:	a904      	add	r1, sp, #16
    2f0c:	ab05      	add	r3, sp, #20
    2f0e:	4618      	mov	r0, r3
    2f10:	f7ff fd2a 	bl	2968 <Clock_Ip_TimeoutExpired>
    2f14:	4603      	mov	r3, r0
    2f16:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    2f1a:	9b06      	ldr	r3, [sp, #24]
    2f1c:	2b00      	cmp	r3, #0
    2f1e:	d106      	bne.n	2f2e <Clock_Ip_CompleteSOSC+0x62>
    2f20:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2f24:	f083 0301 	eor.w	r3, r3, #1
    2f28:	b2db      	uxtb	r3, r3
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d1e5      	bne.n	2efa <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    2f2e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2f32:	2b00      	cmp	r3, #0
    2f34:	d005      	beq.n	2f42 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2f36:	9b01      	ldr	r3, [sp, #4]
    2f38:	681b      	ldr	r3, [r3, #0]
    2f3a:	4619      	mov	r1, r3
    2f3c:	2001      	movs	r0, #1
    2f3e:	f7ff fce9 	bl	2914 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    2f42:	bf00      	nop
    2f44:	b009      	add	sp, #36	; 0x24
    2f46:	f85d fb04 	ldr.w	pc, [sp], #4
    2f4a:	bf00      	nop
    2f4c:	40064000 	.word	0x40064000

00002f50 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2f50:	b500      	push	{lr}
    2f52:	b083      	sub	sp, #12
    2f54:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2f56:	9801      	ldr	r0, [sp, #4]
    2f58:	f000 f8c0 	bl	30dc <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2f5c:	bf00      	nop
    2f5e:	b003      	add	sp, #12
    2f60:	f85d fb04 	ldr.w	pc, [sp], #4

00002f64 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2f64:	b500      	push	{lr}
    2f66:	b083      	sub	sp, #12
    2f68:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f6a:	9b01      	ldr	r3, [sp, #4]
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d002      	beq.n	2f76 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    2f70:	9801      	ldr	r0, [sp, #4]
    2f72:	f000 f8c3 	bl	30fc <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f76:	bf00      	nop
    2f78:	b003      	add	sp, #12
    2f7a:	f85d fb04 	ldr.w	pc, [sp], #4

00002f7e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2f7e:	b082      	sub	sp, #8
    2f80:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    2f82:	4b11      	ldr	r3, [pc, #68]	; (2fc8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2f84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2f88:	4a0f      	ldr	r2, [pc, #60]	; (2fc8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2f8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2f8e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    2f92:	4b0d      	ldr	r3, [pc, #52]	; (2fc8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2f94:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2f98:	4a0b      	ldr	r2, [pc, #44]	; (2fc8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2f9e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    2fa2:	4b09      	ldr	r3, [pc, #36]	; (2fc8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2fa4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2fa8:	4a07      	ldr	r2, [pc, #28]	; (2fc8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2faa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    2fae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    2fb2:	4b05      	ldr	r3, [pc, #20]	; (2fc8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2fb4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2fb8:	4a03      	ldr	r2, [pc, #12]	; (2fc8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2fba:	f023 0301 	bic.w	r3, r3, #1
    2fbe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2fc2:	bf00      	nop
    2fc4:	b002      	add	sp, #8
    2fc6:	4770      	bx	lr
    2fc8:	40064000 	.word	0x40064000

00002fcc <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2fcc:	b082      	sub	sp, #8
    2fce:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    2fd0:	9b01      	ldr	r3, [sp, #4]
    2fd2:	891b      	ldrh	r3, [r3, #8]
    2fd4:	2b01      	cmp	r3, #1
    2fd6:	d174      	bne.n	30c2 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2fd8:	9b01      	ldr	r3, [sp, #4]
    2fda:	7bdb      	ldrb	r3, [r3, #15]
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d002      	beq.n	2fe6 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2fe0:	2b01      	cmp	r3, #1
    2fe2:	d009      	beq.n	2ff8 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2fe4:	e011      	b.n	300a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2fe6:	4b39      	ldr	r3, [pc, #228]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2fe8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2fec:	4a37      	ldr	r2, [pc, #220]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2fee:	f023 0308 	bic.w	r3, r3, #8
    2ff2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2ff6:	e008      	b.n	300a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2ff8:	4b34      	ldr	r3, [pc, #208]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2ffa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2ffe:	4a33      	ldr	r2, [pc, #204]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3000:	f043 0308 	orr.w	r3, r3, #8
    3004:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3008:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    300a:	4b30      	ldr	r3, [pc, #192]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    300c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3010:	4a2e      	ldr	r2, [pc, #184]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3012:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3016:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    301a:	9b01      	ldr	r3, [sp, #4]
    301c:	685b      	ldr	r3, [r3, #4]
    301e:	4a2c      	ldr	r2, [pc, #176]	; (30d0 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3020:	4293      	cmp	r3, r2
    3022:	d90d      	bls.n	3040 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3024:	9b01      	ldr	r3, [sp, #4]
    3026:	685b      	ldr	r3, [r3, #4]
    3028:	4a2a      	ldr	r2, [pc, #168]	; (30d4 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    302a:	4293      	cmp	r3, r2
    302c:	d208      	bcs.n	3040 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    302e:	4b27      	ldr	r3, [pc, #156]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3030:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3034:	4a25      	ldr	r2, [pc, #148]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3036:	f043 0320 	orr.w	r3, r3, #32
    303a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    303e:	e007      	b.n	3050 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3040:	4b22      	ldr	r3, [pc, #136]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3042:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3046:	4a21      	ldr	r2, [pc, #132]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3048:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    304c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3050:	9b01      	ldr	r3, [sp, #4]
    3052:	7b1b      	ldrb	r3, [r3, #12]
    3054:	2b00      	cmp	r3, #0
    3056:	d108      	bne.n	306a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3058:	4b1c      	ldr	r3, [pc, #112]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    305a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    305e:	4a1b      	ldr	r2, [pc, #108]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3060:	f043 0304 	orr.w	r3, r3, #4
    3064:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3068:	e007      	b.n	307a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    306a:	4b18      	ldr	r3, [pc, #96]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    306c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3070:	4a16      	ldr	r2, [pc, #88]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3072:	f023 0304 	bic.w	r3, r3, #4
    3076:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    307a:	9b01      	ldr	r3, [sp, #4]
    307c:	7c1b      	ldrb	r3, [r3, #16]
    307e:	2b02      	cmp	r3, #2
    3080:	d011      	beq.n	30a6 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3082:	2b02      	cmp	r3, #2
    3084:	dc14      	bgt.n	30b0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3086:	2b00      	cmp	r3, #0
    3088:	d002      	beq.n	3090 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    308a:	2b01      	cmp	r3, #1
    308c:	d005      	beq.n	309a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    308e:	e00f      	b.n	30b0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3090:	4b0e      	ldr	r3, [pc, #56]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3092:	2201      	movs	r2, #1
    3094:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3098:	e014      	b.n	30c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    309a:	4b0c      	ldr	r3, [pc, #48]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    309c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    30a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    30a4:	e00e      	b.n	30c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    30a6:	4b09      	ldr	r3, [pc, #36]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    30a8:	4a0b      	ldr	r2, [pc, #44]	; (30d8 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    30aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    30ae:	e009      	b.n	30c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    30b0:	4b06      	ldr	r3, [pc, #24]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    30b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30b6:	4a05      	ldr	r2, [pc, #20]	; (30cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    30b8:	f043 0301 	orr.w	r3, r3, #1
    30bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    30c0:	e000      	b.n	30c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    30c2:	bf00      	nop
}
    30c4:	bf00      	nop
    30c6:	b002      	add	sp, #8
    30c8:	4770      	bx	lr
    30ca:	bf00      	nop
    30cc:	40064000 	.word	0x40064000
    30d0:	003d08ff 	.word	0x003d08ff
    30d4:	007a1200 	.word	0x007a1200
    30d8:	00030001 	.word	0x00030001

000030dc <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    30dc:	b082      	sub	sp, #8
    30de:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    30e0:	4b05      	ldr	r3, [pc, #20]	; (30f8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    30e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    30e6:	4a04      	ldr	r2, [pc, #16]	; (30f8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    30e8:	f023 0301 	bic.w	r3, r3, #1
    30ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    30f0:	bf00      	nop
    30f2:	b002      	add	sp, #8
    30f4:	4770      	bx	lr
    30f6:	bf00      	nop
    30f8:	40064000 	.word	0x40064000

000030fc <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    30fc:	b082      	sub	sp, #8
    30fe:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3100:	9b01      	ldr	r3, [sp, #4]
    3102:	891b      	ldrh	r3, [r3, #8]
    3104:	2b01      	cmp	r3, #1
    3106:	d107      	bne.n	3118 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3108:	4b05      	ldr	r3, [pc, #20]	; (3120 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    310a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    310e:	4a04      	ldr	r2, [pc, #16]	; (3120 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3110:	f043 0301 	orr.w	r3, r3, #1
    3114:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3118:	bf00      	nop
    311a:	b002      	add	sp, #8
    311c:	4770      	bx	lr
    311e:	bf00      	nop
    3120:	40064000 	.word	0x40064000

00003124 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3124:	b082      	sub	sp, #8
    3126:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3128:	bf00      	nop
    312a:	b002      	add	sp, #8
    312c:	4770      	bx	lr

0000312e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    312e:	b082      	sub	sp, #8
    3130:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3132:	2300      	movs	r3, #0
}
    3134:	4618      	mov	r0, r3
    3136:	b002      	add	sp, #8
    3138:	4770      	bx	lr

0000313a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    313a:	b082      	sub	sp, #8
    313c:	9001      	str	r0, [sp, #4]
    313e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3140:	bf00      	nop
    3142:	b002      	add	sp, #8
    3144:	4770      	bx	lr
	...

00003148 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3148:	b082      	sub	sp, #8
    314a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    314c:	bf00      	nop
    314e:	b002      	add	sp, #8
    3150:	4770      	bx	lr

00003152 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3152:	b082      	sub	sp, #8
    3154:	9001      	str	r0, [sp, #4]
    3156:	460b      	mov	r3, r1
    3158:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    315c:	bf00      	nop
    315e:	b002      	add	sp, #8
    3160:	4770      	bx	lr

00003162 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3162:	b500      	push	{lr}
    3164:	b083      	sub	sp, #12
    3166:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3168:	9b01      	ldr	r3, [sp, #4]
    316a:	2b00      	cmp	r3, #0
    316c:	d002      	beq.n	3174 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    316e:	9801      	ldr	r0, [sp, #4]
    3170:	f000 f8e7 	bl	3342 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3174:	bf00      	nop
    3176:	b003      	add	sp, #12
    3178:	f85d fb04 	ldr.w	pc, [sp], #4

0000317c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    317c:	b500      	push	{lr}
    317e:	b085      	sub	sp, #20
    3180:	9001      	str	r0, [sp, #4]
    3182:	460b      	mov	r3, r1
    3184:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3188:	9b01      	ldr	r3, [sp, #4]
    318a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    318c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3190:	2b00      	cmp	r3, #0
    3192:	d003      	beq.n	319c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3194:	2300      	movs	r3, #0
    3196:	f8ad 300c 	strh.w	r3, [sp, #12]
    319a:	e002      	b.n	31a2 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    319c:	2301      	movs	r3, #1
    319e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    31a2:	ab02      	add	r3, sp, #8
    31a4:	4618      	mov	r0, r3
    31a6:	f7ff ffdc 	bl	3162 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    31aa:	bf00      	nop
    31ac:	b005      	add	sp, #20
    31ae:	f85d fb04 	ldr.w	pc, [sp], #4

000031b2 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    31b2:	b500      	push	{lr}
    31b4:	b083      	sub	sp, #12
    31b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31b8:	9b01      	ldr	r3, [sp, #4]
    31ba:	2b00      	cmp	r3, #0
    31bc:	d002      	beq.n	31c4 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    31be:	9801      	ldr	r0, [sp, #4]
    31c0:	f000 f8d6 	bl	3370 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31c4:	bf00      	nop
    31c6:	b003      	add	sp, #12
    31c8:	f85d fb04 	ldr.w	pc, [sp], #4

000031cc <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    31cc:	b500      	push	{lr}
    31ce:	b085      	sub	sp, #20
    31d0:	9001      	str	r0, [sp, #4]
    31d2:	460b      	mov	r3, r1
    31d4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    31d8:	9b01      	ldr	r3, [sp, #4]
    31da:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    31dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    31e0:	2b00      	cmp	r3, #0
    31e2:	d003      	beq.n	31ec <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    31e4:	2300      	movs	r3, #0
    31e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    31ea:	e002      	b.n	31f2 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    31ec:	2301      	movs	r3, #1
    31ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    31f2:	ab02      	add	r3, sp, #8
    31f4:	4618      	mov	r0, r3
    31f6:	f7ff ffdc 	bl	31b2 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    31fa:	bf00      	nop
    31fc:	b005      	add	sp, #20
    31fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003202 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3202:	b500      	push	{lr}
    3204:	b083      	sub	sp, #12
    3206:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3208:	9b01      	ldr	r3, [sp, #4]
    320a:	2b00      	cmp	r3, #0
    320c:	d002      	beq.n	3214 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    320e:	9801      	ldr	r0, [sp, #4]
    3210:	f000 f8c6 	bl	33a0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3214:	bf00      	nop
    3216:	b003      	add	sp, #12
    3218:	f85d fb04 	ldr.w	pc, [sp], #4

0000321c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    321c:	b500      	push	{lr}
    321e:	b085      	sub	sp, #20
    3220:	9001      	str	r0, [sp, #4]
    3222:	460b      	mov	r3, r1
    3224:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3228:	9b01      	ldr	r3, [sp, #4]
    322a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    322c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3230:	2b00      	cmp	r3, #0
    3232:	d003      	beq.n	323c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3234:	2300      	movs	r3, #0
    3236:	f8ad 300c 	strh.w	r3, [sp, #12]
    323a:	e002      	b.n	3242 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    323c:	2301      	movs	r3, #1
    323e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3242:	ab02      	add	r3, sp, #8
    3244:	4618      	mov	r0, r3
    3246:	f7ff ffdc 	bl	3202 <Clock_Ip_ClockSetSimClkoutEnable>
}
    324a:	bf00      	nop
    324c:	b005      	add	sp, #20
    324e:	f85d fb04 	ldr.w	pc, [sp], #4

00003252 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3252:	b500      	push	{lr}
    3254:	b083      	sub	sp, #12
    3256:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3258:	9b01      	ldr	r3, [sp, #4]
    325a:	2b00      	cmp	r3, #0
    325c:	d002      	beq.n	3264 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    325e:	9801      	ldr	r0, [sp, #4]
    3260:	f000 f8b6 	bl	33d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3264:	bf00      	nop
    3266:	b003      	add	sp, #12
    3268:	f85d fb04 	ldr.w	pc, [sp], #4

0000326c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    326c:	b500      	push	{lr}
    326e:	b085      	sub	sp, #20
    3270:	9001      	str	r0, [sp, #4]
    3272:	460b      	mov	r3, r1
    3274:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3278:	9b01      	ldr	r3, [sp, #4]
    327a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    327c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3280:	2b00      	cmp	r3, #0
    3282:	d003      	beq.n	328c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3284:	2300      	movs	r3, #0
    3286:	f8ad 300c 	strh.w	r3, [sp, #12]
    328a:	e002      	b.n	3292 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    328c:	2301      	movs	r3, #1
    328e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3292:	ab02      	add	r3, sp, #8
    3294:	4618      	mov	r0, r3
    3296:	f7ff ffdc 	bl	3252 <Clock_Ip_ClockSetPccCgcEnable>
}
    329a:	bf00      	nop
    329c:	b005      	add	sp, #20
    329e:	f85d fb04 	ldr.w	pc, [sp], #4

000032a2 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    32a2:	b500      	push	{lr}
    32a4:	b083      	sub	sp, #12
    32a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32a8:	9b01      	ldr	r3, [sp, #4]
    32aa:	2b00      	cmp	r3, #0
    32ac:	d002      	beq.n	32b4 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    32ae:	9801      	ldr	r0, [sp, #4]
    32b0:	f000 f8bc 	bl	342c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32b4:	bf00      	nop
    32b6:	b003      	add	sp, #12
    32b8:	f85d fb04 	ldr.w	pc, [sp], #4

000032bc <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    32bc:	b500      	push	{lr}
    32be:	b085      	sub	sp, #20
    32c0:	9001      	str	r0, [sp, #4]
    32c2:	460b      	mov	r3, r1
    32c4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    32c8:	9b01      	ldr	r3, [sp, #4]
    32ca:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    32cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    32d0:	2b00      	cmp	r3, #0
    32d2:	d003      	beq.n	32dc <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    32d4:	2300      	movs	r3, #0
    32d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    32da:	e002      	b.n	32e2 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    32dc:	2301      	movs	r3, #1
    32de:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    32e2:	ab02      	add	r3, sp, #8
    32e4:	4618      	mov	r0, r3
    32e6:	f7ff ffdc 	bl	32a2 <Clock_Ip_ClockSetSimGate>
}
    32ea:	bf00      	nop
    32ec:	b005      	add	sp, #20
    32ee:	f85d fb04 	ldr.w	pc, [sp], #4

000032f2 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    32f2:	b500      	push	{lr}
    32f4:	b083      	sub	sp, #12
    32f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32f8:	9b01      	ldr	r3, [sp, #4]
    32fa:	2b00      	cmp	r3, #0
    32fc:	d002      	beq.n	3304 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    32fe:	9801      	ldr	r0, [sp, #4]
    3300:	f000 f8c0 	bl	3484 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3304:	bf00      	nop
    3306:	b003      	add	sp, #12
    3308:	f85d fb04 	ldr.w	pc, [sp], #4

0000330c <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    330c:	b500      	push	{lr}
    330e:	b085      	sub	sp, #20
    3310:	9001      	str	r0, [sp, #4]
    3312:	460b      	mov	r3, r1
    3314:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3318:	9b01      	ldr	r3, [sp, #4]
    331a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    331c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3320:	2b00      	cmp	r3, #0
    3322:	d003      	beq.n	332c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3324:	2300      	movs	r3, #0
    3326:	f8ad 300c 	strh.w	r3, [sp, #12]
    332a:	e002      	b.n	3332 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    332c:	2301      	movs	r3, #1
    332e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3332:	ab02      	add	r3, sp, #8
    3334:	4618      	mov	r0, r3
    3336:	f7ff ffdc 	bl	32f2 <Clock_Ip_ClockSetSimTraceEnable>
}
    333a:	bf00      	nop
    333c:	b005      	add	sp, #20
    333e:	f85d fb04 	ldr.w	pc, [sp], #4

00003342 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3342:	b084      	sub	sp, #16
    3344:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3346:	4b09      	ldr	r3, [pc, #36]	; (336c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3348:	691b      	ldr	r3, [r3, #16]
    334a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    334c:	9b03      	ldr	r3, [sp, #12]
    334e:	f023 0301 	bic.w	r3, r3, #1
    3352:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3354:	9b01      	ldr	r3, [sp, #4]
    3356:	889b      	ldrh	r3, [r3, #4]
    3358:	461a      	mov	r2, r3
    335a:	9b03      	ldr	r3, [sp, #12]
    335c:	4313      	orrs	r3, r2
    335e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3360:	4a02      	ldr	r2, [pc, #8]	; (336c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3362:	9b03      	ldr	r3, [sp, #12]
    3364:	6113      	str	r3, [r2, #16]
}
    3366:	bf00      	nop
    3368:	b004      	add	sp, #16
    336a:	4770      	bx	lr
    336c:	40048000 	.word	0x40048000

00003370 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3370:	b084      	sub	sp, #16
    3372:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3374:	4b09      	ldr	r3, [pc, #36]	; (339c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3376:	691b      	ldr	r3, [r3, #16]
    3378:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    337a:	9b03      	ldr	r3, [sp, #12]
    337c:	f023 0302 	bic.w	r3, r3, #2
    3380:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3382:	9b01      	ldr	r3, [sp, #4]
    3384:	889b      	ldrh	r3, [r3, #4]
    3386:	005b      	lsls	r3, r3, #1
    3388:	9a03      	ldr	r2, [sp, #12]
    338a:	4313      	orrs	r3, r2
    338c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    338e:	4a03      	ldr	r2, [pc, #12]	; (339c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3390:	9b03      	ldr	r3, [sp, #12]
    3392:	6113      	str	r3, [r2, #16]
}
    3394:	bf00      	nop
    3396:	b004      	add	sp, #16
    3398:	4770      	bx	lr
    339a:	bf00      	nop
    339c:	40048000 	.word	0x40048000

000033a0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    33a0:	b084      	sub	sp, #16
    33a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    33a4:	4b09      	ldr	r3, [pc, #36]	; (33cc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    33a6:	685b      	ldr	r3, [r3, #4]
    33a8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    33aa:	9b03      	ldr	r3, [sp, #12]
    33ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    33b0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    33b2:	9b01      	ldr	r3, [sp, #4]
    33b4:	889b      	ldrh	r3, [r3, #4]
    33b6:	02db      	lsls	r3, r3, #11
    33b8:	9a03      	ldr	r2, [sp, #12]
    33ba:	4313      	orrs	r3, r2
    33bc:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    33be:	4a03      	ldr	r2, [pc, #12]	; (33cc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    33c0:	9b03      	ldr	r3, [sp, #12]
    33c2:	6053      	str	r3, [r2, #4]
}
    33c4:	bf00      	nop
    33c6:	b004      	add	sp, #16
    33c8:	4770      	bx	lr
    33ca:	bf00      	nop
    33cc:	40048000 	.word	0x40048000

000033d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    33d0:	b084      	sub	sp, #16
    33d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    33d4:	4913      	ldr	r1, [pc, #76]	; (3424 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    33d6:	9b01      	ldr	r3, [sp, #4]
    33d8:	681a      	ldr	r2, [r3, #0]
    33da:	4813      	ldr	r0, [pc, #76]	; (3428 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    33dc:	4613      	mov	r3, r2
    33de:	00db      	lsls	r3, r3, #3
    33e0:	4413      	add	r3, r2
    33e2:	4403      	add	r3, r0
    33e4:	3306      	adds	r3, #6
    33e6:	781b      	ldrb	r3, [r3, #0]
    33e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    33ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    33ee:	9b03      	ldr	r3, [sp, #12]
    33f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    33f4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    33f6:	9b01      	ldr	r3, [sp, #4]
    33f8:	889b      	ldrh	r3, [r3, #4]
    33fa:	079b      	lsls	r3, r3, #30
    33fc:	9a03      	ldr	r2, [sp, #12]
    33fe:	4313      	orrs	r3, r2
    3400:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3402:	4908      	ldr	r1, [pc, #32]	; (3424 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3404:	9b01      	ldr	r3, [sp, #4]
    3406:	681a      	ldr	r2, [r3, #0]
    3408:	4807      	ldr	r0, [pc, #28]	; (3428 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    340a:	4613      	mov	r3, r2
    340c:	00db      	lsls	r3, r3, #3
    340e:	4413      	add	r3, r2
    3410:	4403      	add	r3, r0
    3412:	3306      	adds	r3, #6
    3414:	781b      	ldrb	r3, [r3, #0]
    3416:	461a      	mov	r2, r3
    3418:	9b03      	ldr	r3, [sp, #12]
    341a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    341e:	bf00      	nop
    3420:	b004      	add	sp, #16
    3422:	4770      	bx	lr
    3424:	40065000 	.word	0x40065000
    3428:	00007fd0 	.word	0x00007fd0

0000342c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    342c:	b086      	sub	sp, #24
    342e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3430:	9b01      	ldr	r3, [sp, #4]
    3432:	889b      	ldrh	r3, [r3, #4]
    3434:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3436:	9b01      	ldr	r3, [sp, #4]
    3438:	681a      	ldr	r2, [r3, #0]
    343a:	4910      	ldr	r1, [pc, #64]	; (347c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    343c:	4613      	mov	r3, r2
    343e:	00db      	lsls	r3, r3, #3
    3440:	4413      	add	r3, r2
    3442:	440b      	add	r3, r1
    3444:	3306      	adds	r3, #6
    3446:	781b      	ldrb	r3, [r3, #0]
    3448:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    344a:	4b0d      	ldr	r3, [pc, #52]	; (3480 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    344e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3450:	2201      	movs	r2, #1
    3452:	9b04      	ldr	r3, [sp, #16]
    3454:	fa02 f303 	lsl.w	r3, r2, r3
    3458:	43db      	mvns	r3, r3
    345a:	9a03      	ldr	r2, [sp, #12]
    345c:	4013      	ands	r3, r2
    345e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3460:	9a05      	ldr	r2, [sp, #20]
    3462:	9b04      	ldr	r3, [sp, #16]
    3464:	fa02 f303 	lsl.w	r3, r2, r3
    3468:	9a03      	ldr	r2, [sp, #12]
    346a:	4313      	orrs	r3, r2
    346c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    346e:	4a04      	ldr	r2, [pc, #16]	; (3480 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3470:	9b03      	ldr	r3, [sp, #12]
    3472:	6413      	str	r3, [r2, #64]	; 0x40
}
    3474:	bf00      	nop
    3476:	b006      	add	sp, #24
    3478:	4770      	bx	lr
    347a:	bf00      	nop
    347c:	00007fd0 	.word	0x00007fd0
    3480:	40048000 	.word	0x40048000

00003484 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3484:	b084      	sub	sp, #16
    3486:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3488:	4b0a      	ldr	r3, [pc, #40]	; (34b4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    348a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    348c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    348e:	9b01      	ldr	r3, [sp, #4]
    3490:	889b      	ldrh	r3, [r3, #4]
    3492:	2b01      	cmp	r3, #1
    3494:	d104      	bne.n	34a0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3496:	9b03      	ldr	r3, [sp, #12]
    3498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    349c:	9303      	str	r3, [sp, #12]
    349e:	e003      	b.n	34a8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    34a0:	9b03      	ldr	r3, [sp, #12]
    34a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    34a6:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    34a8:	4a02      	ldr	r2, [pc, #8]	; (34b4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    34aa:	9b03      	ldr	r3, [sp, #12]
    34ac:	6693      	str	r3, [r2, #104]	; 0x68
}
    34ae:	bf00      	nop
    34b0:	b004      	add	sp, #16
    34b2:	4770      	bx	lr
    34b4:	40048000 	.word	0x40048000

000034b8 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    34b8:	b082      	sub	sp, #8
    34ba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    34bc:	bf00      	nop
    34be:	b002      	add	sp, #8
    34c0:	4770      	bx	lr

000034c2 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    34c2:	b082      	sub	sp, #8
    34c4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    34c6:	bf00      	nop
    34c8:	b002      	add	sp, #8
    34ca:	4770      	bx	lr

000034cc <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    34cc:	b500      	push	{lr}
    34ce:	b083      	sub	sp, #12
    34d0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34d2:	9b01      	ldr	r3, [sp, #4]
    34d4:	2b00      	cmp	r3, #0
    34d6:	d002      	beq.n	34de <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    34d8:	9801      	ldr	r0, [sp, #4]
    34da:	f000 f8d1 	bl	3680 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34de:	bf00      	nop
    34e0:	b003      	add	sp, #12
    34e2:	f85d fb04 	ldr.w	pc, [sp], #4

000034e6 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    34e6:	b500      	push	{lr}
    34e8:	b083      	sub	sp, #12
    34ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34ec:	9b01      	ldr	r3, [sp, #4]
    34ee:	2b00      	cmp	r3, #0
    34f0:	d002      	beq.n	34f8 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    34f2:	9801      	ldr	r0, [sp, #4]
    34f4:	f000 f950 	bl	3798 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34f8:	bf00      	nop
    34fa:	b003      	add	sp, #12
    34fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003500 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3500:	b500      	push	{lr}
    3502:	b083      	sub	sp, #12
    3504:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3506:	9801      	ldr	r0, [sp, #4]
    3508:	f000 f98e 	bl	3828 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    350c:	bf00      	nop
    350e:	b003      	add	sp, #12
    3510:	f85d fb04 	ldr.w	pc, [sp], #4

00003514 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3514:	b500      	push	{lr}
    3516:	b083      	sub	sp, #12
    3518:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    351a:	9b01      	ldr	r3, [sp, #4]
    351c:	2b00      	cmp	r3, #0
    351e:	d002      	beq.n	3526 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3520:	9801      	ldr	r0, [sp, #4]
    3522:	f000 f999 	bl	3858 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3526:	bf00      	nop
    3528:	b003      	add	sp, #12
    352a:	f85d fb04 	ldr.w	pc, [sp], #4

0000352e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    352e:	b500      	push	{lr}
    3530:	b083      	sub	sp, #12
    3532:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3534:	9b01      	ldr	r3, [sp, #4]
    3536:	2b00      	cmp	r3, #0
    3538:	d002      	beq.n	3540 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    353a:	9801      	ldr	r0, [sp, #4]
    353c:	f000 f9b0 	bl	38a0 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3540:	bf00      	nop
    3542:	b003      	add	sp, #12
    3544:	f85d fb04 	ldr.w	pc, [sp], #4

00003548 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3548:	b500      	push	{lr}
    354a:	b083      	sub	sp, #12
    354c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    354e:	9801      	ldr	r0, [sp, #4]
    3550:	f000 f9ba 	bl	38c8 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3554:	bf00      	nop
    3556:	b003      	add	sp, #12
    3558:	f85d fb04 	ldr.w	pc, [sp], #4

0000355c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    355c:	b500      	push	{lr}
    355e:	b083      	sub	sp, #12
    3560:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3562:	9b01      	ldr	r3, [sp, #4]
    3564:	2b00      	cmp	r3, #0
    3566:	d002      	beq.n	356e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3568:	9801      	ldr	r0, [sp, #4]
    356a:	f000 f9bd 	bl	38e8 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    356e:	bf00      	nop
    3570:	b003      	add	sp, #12
    3572:	f85d fb04 	ldr.w	pc, [sp], #4

00003576 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3576:	b500      	push	{lr}
    3578:	b083      	sub	sp, #12
    357a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    357c:	9b01      	ldr	r3, [sp, #4]
    357e:	2b00      	cmp	r3, #0
    3580:	d002      	beq.n	3588 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3582:	9801      	ldr	r0, [sp, #4]
    3584:	f000 f9d4 	bl	3930 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3588:	bf00      	nop
    358a:	b003      	add	sp, #12
    358c:	f85d fb04 	ldr.w	pc, [sp], #4

00003590 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3590:	b500      	push	{lr}
    3592:	b083      	sub	sp, #12
    3594:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3596:	9801      	ldr	r0, [sp, #4]
    3598:	f000 f9de 	bl	3958 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    359c:	bf00      	nop
    359e:	b003      	add	sp, #12
    35a0:	f85d fb04 	ldr.w	pc, [sp], #4

000035a4 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    35a4:	b500      	push	{lr}
    35a6:	b089      	sub	sp, #36	; 0x24
    35a8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    35aa:	2300      	movs	r3, #0
    35ac:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    35b0:	4b20      	ldr	r3, [pc, #128]	; (3634 <SetInputSouceSytemClock+0x90>)
    35b2:	695b      	ldr	r3, [r3, #20]
    35b4:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    35b6:	9b06      	ldr	r3, [sp, #24]
    35b8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    35bc:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    35be:	9b01      	ldr	r3, [sp, #4]
    35c0:	061b      	lsls	r3, r3, #24
    35c2:	9a06      	ldr	r2, [sp, #24]
    35c4:	4313      	orrs	r3, r2
    35c6:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    35c8:	4a1a      	ldr	r2, [pc, #104]	; (3634 <SetInputSouceSytemClock+0x90>)
    35ca:	9b06      	ldr	r3, [sp, #24]
    35cc:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    35ce:	aa02      	add	r2, sp, #8
    35d0:	a903      	add	r1, sp, #12
    35d2:	a804      	add	r0, sp, #16
    35d4:	f24c 3350 	movw	r3, #50000	; 0xc350
    35d8:	f7ff f9ac 	bl	2934 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    35dc:	4b15      	ldr	r3, [pc, #84]	; (3634 <SetInputSouceSytemClock+0x90>)
    35de:	691b      	ldr	r3, [r3, #16]
    35e0:	0e1b      	lsrs	r3, r3, #24
    35e2:	f003 030f 	and.w	r3, r3, #15
    35e6:	9a01      	ldr	r2, [sp, #4]
    35e8:	429a      	cmp	r2, r3
    35ea:	bf0c      	ite	eq
    35ec:	2301      	moveq	r3, #1
    35ee:	2300      	movne	r3, #0
    35f0:	b2db      	uxtb	r3, r3
    35f2:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    35f4:	9a02      	ldr	r2, [sp, #8]
    35f6:	a903      	add	r1, sp, #12
    35f8:	ab04      	add	r3, sp, #16
    35fa:	4618      	mov	r0, r3
    35fc:	f7ff f9b4 	bl	2968 <Clock_Ip_TimeoutExpired>
    3600:	4603      	mov	r3, r0
    3602:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3606:	9b05      	ldr	r3, [sp, #20]
    3608:	2b00      	cmp	r3, #0
    360a:	d106      	bne.n	361a <SetInputSouceSytemClock+0x76>
    360c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3610:	f083 0301 	eor.w	r3, r3, #1
    3614:	b2db      	uxtb	r3, r3
    3616:	2b00      	cmp	r3, #0
    3618:	d1e0      	bne.n	35dc <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    361a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    361e:	2b00      	cmp	r3, #0
    3620:	d003      	beq.n	362a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3622:	2105      	movs	r1, #5
    3624:	2001      	movs	r0, #1
    3626:	f7ff f975 	bl	2914 <Clock_Ip_ReportClockErrors>
    }
}
    362a:	bf00      	nop
    362c:	b009      	add	sp, #36	; 0x24
    362e:	f85d fb04 	ldr.w	pc, [sp], #4
    3632:	bf00      	nop
    3634:	40064000 	.word	0x40064000

00003638 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3638:	b500      	push	{lr}
    363a:	b083      	sub	sp, #12
    363c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    363e:	9b01      	ldr	r3, [sp, #4]
    3640:	2b00      	cmp	r3, #0
    3642:	d002      	beq.n	364a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3644:	9801      	ldr	r0, [sp, #4]
    3646:	f000 f997 	bl	3978 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    364a:	bf00      	nop
    364c:	b003      	add	sp, #12
    364e:	f85d fb04 	ldr.w	pc, [sp], #4

00003652 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3652:	b500      	push	{lr}
    3654:	b083      	sub	sp, #12
    3656:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3658:	9b01      	ldr	r3, [sp, #4]
    365a:	2b00      	cmp	r3, #0
    365c:	d002      	beq.n	3664 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    365e:	9801      	ldr	r0, [sp, #4]
    3660:	f000 fa7e 	bl	3b60 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3664:	bf00      	nop
    3666:	b003      	add	sp, #12
    3668:	f85d fb04 	ldr.w	pc, [sp], #4

0000366c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    366c:	b500      	push	{lr}
    366e:	b083      	sub	sp, #12
    3670:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3672:	9801      	ldr	r0, [sp, #4]
    3674:	f000 fab8 	bl	3be8 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3678:	bf00      	nop
    367a:	b003      	add	sp, #12
    367c:	f85d fb04 	ldr.w	pc, [sp], #4

00003680 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3680:	b500      	push	{lr}
    3682:	b08b      	sub	sp, #44	; 0x2c
    3684:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3686:	2300      	movs	r3, #0
    3688:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    368c:	9b01      	ldr	r3, [sp, #4]
    368e:	2b00      	cmp	r3, #0
    3690:	d10b      	bne.n	36aa <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3692:	2305      	movs	r3, #5
    3694:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3696:	2301      	movs	r3, #1
    3698:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    369c:	2301      	movs	r3, #1
    369e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    36a2:	2301      	movs	r3, #1
    36a4:	f88d 3010 	strb.w	r3, [sp, #16]
    36a8:	e00e      	b.n	36c8 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    36aa:	9b01      	ldr	r3, [sp, #4]
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    36b0:	9b01      	ldr	r3, [sp, #4]
    36b2:	79db      	ldrb	r3, [r3, #7]
    36b4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    36b8:	9b01      	ldr	r3, [sp, #4]
    36ba:	889b      	ldrh	r3, [r3, #4]
    36bc:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    36c0:	9b01      	ldr	r3, [sp, #4]
    36c2:	7a1b      	ldrb	r3, [r3, #8]
    36c4:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    36c8:	4b32      	ldr	r3, [pc, #200]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    36ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    36ce:	4a31      	ldr	r2, [pc, #196]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    36d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    36d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    36d8:	4b2e      	ldr	r3, [pc, #184]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    36da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    36de:	4a2d      	ldr	r2, [pc, #180]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    36e0:	f023 0301 	bic.w	r3, r3, #1
    36e4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    36e8:	4b2a      	ldr	r3, [pc, #168]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    36ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    36ee:	4a29      	ldr	r2, [pc, #164]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    36f0:	f023 0304 	bic.w	r3, r3, #4
    36f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    36f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    36fc:	2b01      	cmp	r3, #1
    36fe:	d144      	bne.n	378a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3700:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3704:	4a23      	ldr	r2, [pc, #140]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3706:	f003 0301 	and.w	r3, r3, #1
    370a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    370e:	4b21      	ldr	r3, [pc, #132]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3710:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3714:	4a1f      	ldr	r2, [pc, #124]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3716:	f043 0301 	orr.w	r3, r3, #1
    371a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    371e:	4b1d      	ldr	r3, [pc, #116]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3720:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3724:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3728:	009b      	lsls	r3, r3, #2
    372a:	f003 0304 	and.w	r3, r3, #4
    372e:	4919      	ldr	r1, [pc, #100]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3730:	4313      	orrs	r3, r2
    3732:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3736:	aa05      	add	r2, sp, #20
    3738:	a906      	add	r1, sp, #24
    373a:	a807      	add	r0, sp, #28
    373c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3740:	f7ff f8f8 	bl	2934 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3744:	4b13      	ldr	r3, [pc, #76]	; (3794 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3746:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    374a:	0e1b      	lsrs	r3, r3, #24
    374c:	f003 0301 	and.w	r3, r3, #1
    3750:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3752:	9a05      	ldr	r2, [sp, #20]
    3754:	a906      	add	r1, sp, #24
    3756:	ab07      	add	r3, sp, #28
    3758:	4618      	mov	r0, r3
    375a:	f7ff f905 	bl	2968 <Clock_Ip_TimeoutExpired>
    375e:	4603      	mov	r3, r0
    3760:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3764:	9b08      	ldr	r3, [sp, #32]
    3766:	2b00      	cmp	r3, #0
    3768:	d106      	bne.n	3778 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    376a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    376e:	f083 0301 	eor.w	r3, r3, #1
    3772:	b2db      	uxtb	r3, r3
    3774:	2b00      	cmp	r3, #0
    3776:	d1e5      	bne.n	3744 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3778:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    377c:	2b00      	cmp	r3, #0
    377e:	d004      	beq.n	378a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3780:	9b02      	ldr	r3, [sp, #8]
    3782:	4619      	mov	r1, r3
    3784:	2001      	movs	r0, #1
    3786:	f7ff f8c5 	bl	2914 <Clock_Ip_ReportClockErrors>
        }
    }
}
    378a:	bf00      	nop
    378c:	b00b      	add	sp, #44	; 0x2c
    378e:	f85d fb04 	ldr.w	pc, [sp], #4
    3792:	bf00      	nop
    3794:	40064000 	.word	0x40064000

00003798 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3798:	b500      	push	{lr}
    379a:	b089      	sub	sp, #36	; 0x24
    379c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    379e:	2300      	movs	r3, #0
    37a0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    37a4:	4b1f      	ldr	r3, [pc, #124]	; (3824 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    37a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    37aa:	4a1e      	ldr	r2, [pc, #120]	; (3824 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    37ac:	f043 0301 	orr.w	r3, r3, #1
    37b0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    37b4:	4b1b      	ldr	r3, [pc, #108]	; (3824 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    37b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    37ba:	4a1a      	ldr	r2, [pc, #104]	; (3824 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    37bc:	f043 0304 	orr.w	r3, r3, #4
    37c0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    37c4:	aa03      	add	r2, sp, #12
    37c6:	a904      	add	r1, sp, #16
    37c8:	a805      	add	r0, sp, #20
    37ca:	f24c 3350 	movw	r3, #50000	; 0xc350
    37ce:	f7ff f8b1 	bl	2934 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    37d2:	4b14      	ldr	r3, [pc, #80]	; (3824 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    37d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    37d8:	0e1b      	lsrs	r3, r3, #24
    37da:	f003 0301 	and.w	r3, r3, #1
    37de:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    37e0:	9a03      	ldr	r2, [sp, #12]
    37e2:	a904      	add	r1, sp, #16
    37e4:	ab05      	add	r3, sp, #20
    37e6:	4618      	mov	r0, r3
    37e8:	f7ff f8be 	bl	2968 <Clock_Ip_TimeoutExpired>
    37ec:	4603      	mov	r3, r0
    37ee:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    37f2:	9b06      	ldr	r3, [sp, #24]
    37f4:	2b00      	cmp	r3, #0
    37f6:	d106      	bne.n	3806 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    37f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    37fc:	f083 0301 	eor.w	r3, r3, #1
    3800:	b2db      	uxtb	r3, r3
    3802:	2b00      	cmp	r3, #0
    3804:	d1e5      	bne.n	37d2 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3806:	f89d 301f 	ldrb.w	r3, [sp, #31]
    380a:	2b00      	cmp	r3, #0
    380c:	d005      	beq.n	381a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    380e:	9b01      	ldr	r3, [sp, #4]
    3810:	681b      	ldr	r3, [r3, #0]
    3812:	4619      	mov	r1, r3
    3814:	2001      	movs	r0, #1
    3816:	f7ff f87d 	bl	2914 <Clock_Ip_ReportClockErrors>
    }
}
    381a:	bf00      	nop
    381c:	b009      	add	sp, #36	; 0x24
    381e:	f85d fb04 	ldr.w	pc, [sp], #4
    3822:	bf00      	nop
    3824:	40064000 	.word	0x40064000

00003828 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3828:	b082      	sub	sp, #8
    382a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    382c:	4b09      	ldr	r3, [pc, #36]	; (3854 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    382e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3832:	4a08      	ldr	r2, [pc, #32]	; (3854 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3834:	f023 0301 	bic.w	r3, r3, #1
    3838:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    383c:	4b05      	ldr	r3, [pc, #20]	; (3854 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    383e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3842:	4a04      	ldr	r2, [pc, #16]	; (3854 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3844:	f023 0304 	bic.w	r3, r3, #4
    3848:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    384c:	bf00      	nop
    384e:	b002      	add	sp, #8
    3850:	4770      	bx	lr
    3852:	bf00      	nop
    3854:	40064000 	.word	0x40064000

00003858 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3858:	b082      	sub	sp, #8
    385a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    385c:	4b0f      	ldr	r3, [pc, #60]	; (389c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    385e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3862:	4a0e      	ldr	r2, [pc, #56]	; (389c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3864:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3868:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    386c:	4b0b      	ldr	r3, [pc, #44]	; (389c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    386e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3872:	4a0a      	ldr	r2, [pc, #40]	; (389c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3874:	f023 0304 	bic.w	r3, r3, #4
    3878:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    387c:	4b07      	ldr	r3, [pc, #28]	; (389c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    387e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3882:	9b01      	ldr	r3, [sp, #4]
    3884:	7a1b      	ldrb	r3, [r3, #8]
    3886:	009b      	lsls	r3, r3, #2
    3888:	f003 0304 	and.w	r3, r3, #4
    388c:	4903      	ldr	r1, [pc, #12]	; (389c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    388e:	4313      	orrs	r3, r2
    3890:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3894:	bf00      	nop
    3896:	b002      	add	sp, #8
    3898:	4770      	bx	lr
    389a:	bf00      	nop
    389c:	40064000 	.word	0x40064000

000038a0 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    38a0:	b082      	sub	sp, #8
    38a2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    38a4:	9b01      	ldr	r3, [sp, #4]
    38a6:	889b      	ldrh	r3, [r3, #4]
    38a8:	2b01      	cmp	r3, #1
    38aa:	d107      	bne.n	38bc <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    38ac:	4b05      	ldr	r3, [pc, #20]	; (38c4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    38ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38b2:	4a04      	ldr	r2, [pc, #16]	; (38c4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    38b4:	f043 0304 	orr.w	r3, r3, #4
    38b8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    38bc:	bf00      	nop
    38be:	b002      	add	sp, #8
    38c0:	4770      	bx	lr
    38c2:	bf00      	nop
    38c4:	40064000 	.word	0x40064000

000038c8 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    38c8:	b082      	sub	sp, #8
    38ca:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    38cc:	4b05      	ldr	r3, [pc, #20]	; (38e4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    38ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38d2:	4a04      	ldr	r2, [pc, #16]	; (38e4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    38d4:	f023 0304 	bic.w	r3, r3, #4
    38d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    38dc:	bf00      	nop
    38de:	b002      	add	sp, #8
    38e0:	4770      	bx	lr
    38e2:	bf00      	nop
    38e4:	40064000 	.word	0x40064000

000038e8 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    38e8:	b082      	sub	sp, #8
    38ea:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    38ec:	4b0f      	ldr	r3, [pc, #60]	; (392c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    38ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    38f2:	4a0e      	ldr	r2, [pc, #56]	; (392c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    38f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    38f8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    38fc:	4b0b      	ldr	r3, [pc, #44]	; (392c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    38fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3902:	4a0a      	ldr	r2, [pc, #40]	; (392c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3904:	f023 0302 	bic.w	r3, r3, #2
    3908:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    390c:	4b07      	ldr	r3, [pc, #28]	; (392c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    390e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3912:	9b01      	ldr	r3, [sp, #4]
    3914:	7a5b      	ldrb	r3, [r3, #9]
    3916:	005b      	lsls	r3, r3, #1
    3918:	f003 0302 	and.w	r3, r3, #2
    391c:	4903      	ldr	r1, [pc, #12]	; (392c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    391e:	4313      	orrs	r3, r2
    3920:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3924:	bf00      	nop
    3926:	b002      	add	sp, #8
    3928:	4770      	bx	lr
    392a:	bf00      	nop
    392c:	40064000 	.word	0x40064000

00003930 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3930:	b082      	sub	sp, #8
    3932:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3934:	9b01      	ldr	r3, [sp, #4]
    3936:	889b      	ldrh	r3, [r3, #4]
    3938:	2b01      	cmp	r3, #1
    393a:	d107      	bne.n	394c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    393c:	4b05      	ldr	r3, [pc, #20]	; (3954 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    393e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3942:	4a04      	ldr	r2, [pc, #16]	; (3954 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3944:	f043 0302 	orr.w	r3, r3, #2
    3948:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    394c:	bf00      	nop
    394e:	b002      	add	sp, #8
    3950:	4770      	bx	lr
    3952:	bf00      	nop
    3954:	40064000 	.word	0x40064000

00003958 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3958:	b082      	sub	sp, #8
    395a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    395c:	4b05      	ldr	r3, [pc, #20]	; (3974 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    395e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3962:	4a04      	ldr	r2, [pc, #16]	; (3974 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3964:	f023 0302 	bic.w	r3, r3, #2
    3968:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    396c:	bf00      	nop
    396e:	b002      	add	sp, #8
    3970:	4770      	bx	lr
    3972:	bf00      	nop
    3974:	40064000 	.word	0x40064000

00003978 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3978:	b500      	push	{lr}
    397a:	b08b      	sub	sp, #44	; 0x2c
    397c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    397e:	9b01      	ldr	r3, [sp, #4]
    3980:	681a      	ldr	r2, [r3, #0]
    3982:	4975      	ldr	r1, [pc, #468]	; (3b58 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3984:	4613      	mov	r3, r2
    3986:	00db      	lsls	r3, r3, #3
    3988:	4413      	add	r3, r2
    398a:	440b      	add	r3, r1
    398c:	781b      	ldrb	r3, [r3, #0]
    398e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3990:	2300      	movs	r3, #0
    3992:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3996:	2300      	movs	r3, #0
    3998:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    399c:	4b6f      	ldr	r3, [pc, #444]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    399e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    39a2:	4a6e      	ldr	r2, [pc, #440]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    39a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    39a8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    39ac:	4b6b      	ldr	r3, [pc, #428]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    39ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    39b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    39b6:	2b00      	cmp	r3, #0
    39b8:	d07d      	beq.n	3ab6 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    39ba:	9b01      	ldr	r3, [sp, #4]
    39bc:	79db      	ldrb	r3, [r3, #7]
    39be:	461a      	mov	r2, r3
    39c0:	4b66      	ldr	r3, [pc, #408]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    39c2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    39c6:	f003 0303 	and.w	r3, r3, #3
    39ca:	429a      	cmp	r2, r3
    39cc:	d10b      	bne.n	39e6 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    39ce:	9b01      	ldr	r3, [sp, #4]
    39d0:	799b      	ldrb	r3, [r3, #6]
    39d2:	461a      	mov	r2, r3
    39d4:	4b61      	ldr	r3, [pc, #388]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    39d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    39da:	08db      	lsrs	r3, r3, #3
    39dc:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    39e0:	429a      	cmp	r2, r3
    39e2:	f000 80b4 	beq.w	3b4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    39e6:	4b5d      	ldr	r3, [pc, #372]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    39e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39ec:	f003 0301 	and.w	r3, r3, #1
    39f0:	2b00      	cmp	r3, #0
    39f2:	d105      	bne.n	3a00 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    39f4:	2301      	movs	r3, #1
    39f6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    39fa:	2000      	movs	r0, #0
    39fc:	f7ff fd66 	bl	34cc <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3a00:	2002      	movs	r0, #2
    3a02:	f7ff fdcf 	bl	35a4 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3a06:	4b55      	ldr	r3, [pc, #340]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3a08:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a0c:	4a53      	ldr	r2, [pc, #332]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3a0e:	f023 0301 	bic.w	r3, r3, #1
    3a12:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3a16:	9b01      	ldr	r3, [sp, #4]
    3a18:	889b      	ldrh	r3, [r3, #4]
    3a1a:	2b01      	cmp	r3, #1
    3a1c:	f040 8097 	bne.w	3b4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3a20:	9b01      	ldr	r3, [sp, #4]
    3a22:	79db      	ldrb	r3, [r3, #7]
    3a24:	4a4d      	ldr	r2, [pc, #308]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3a26:	f003 0303 	and.w	r3, r3, #3
    3a2a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3a2e:	4b4b      	ldr	r3, [pc, #300]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3a30:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3a34:	9b01      	ldr	r3, [sp, #4]
    3a36:	799b      	ldrb	r3, [r3, #6]
    3a38:	00db      	lsls	r3, r3, #3
    3a3a:	f003 0308 	and.w	r3, r3, #8
    3a3e:	4313      	orrs	r3, r2
    3a40:	4a46      	ldr	r2, [pc, #280]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3a42:	f043 0301 	orr.w	r3, r3, #1
    3a46:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a4a:	aa03      	add	r2, sp, #12
    3a4c:	a904      	add	r1, sp, #16
    3a4e:	a805      	add	r0, sp, #20
    3a50:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a54:	f7fe ff6e 	bl	2934 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3a58:	4b40      	ldr	r3, [pc, #256]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3a5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3a5e:	0e1b      	lsrs	r3, r3, #24
    3a60:	f003 0301 	and.w	r3, r3, #1
    3a64:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a66:	9a03      	ldr	r2, [sp, #12]
    3a68:	a904      	add	r1, sp, #16
    3a6a:	ab05      	add	r3, sp, #20
    3a6c:	4618      	mov	r0, r3
    3a6e:	f7fe ff7b 	bl	2968 <Clock_Ip_TimeoutExpired>
    3a72:	4603      	mov	r3, r0
    3a74:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a78:	9b06      	ldr	r3, [sp, #24]
    3a7a:	2b00      	cmp	r3, #0
    3a7c:	d106      	bne.n	3a8c <Clock_Ip_SetFirc_TrustedCall+0x114>
    3a7e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a82:	f083 0301 	eor.w	r3, r3, #1
    3a86:	b2db      	uxtb	r3, r3
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d1e5      	bne.n	3a58 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3a8c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a90:	2b00      	cmp	r3, #0
    3a92:	d005      	beq.n	3aa0 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3a94:	9b01      	ldr	r3, [sp, #4]
    3a96:	681b      	ldr	r3, [r3, #0]
    3a98:	4619      	mov	r1, r3
    3a9a:	2001      	movs	r0, #1
    3a9c:	f7fe ff3a 	bl	2914 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3aa0:	2003      	movs	r0, #3
    3aa2:	f7ff fd7f 	bl	35a4 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3aa6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3aaa:	2b00      	cmp	r3, #0
    3aac:	d04f      	beq.n	3b4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3aae:	2002      	movs	r0, #2
    3ab0:	f7ff fd26 	bl	3500 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3ab4:	e04b      	b.n	3b4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3ab6:	4b29      	ldr	r3, [pc, #164]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ab8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3abc:	4a27      	ldr	r2, [pc, #156]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3abe:	f023 0301 	bic.w	r3, r3, #1
    3ac2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3ac6:	9b01      	ldr	r3, [sp, #4]
    3ac8:	889b      	ldrh	r3, [r3, #4]
    3aca:	2b01      	cmp	r3, #1
    3acc:	d13f      	bne.n	3b4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3ace:	9b01      	ldr	r3, [sp, #4]
    3ad0:	79db      	ldrb	r3, [r3, #7]
    3ad2:	4a22      	ldr	r2, [pc, #136]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ad4:	f003 0303 	and.w	r3, r3, #3
    3ad8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3adc:	4b1f      	ldr	r3, [pc, #124]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ade:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3ae2:	9b01      	ldr	r3, [sp, #4]
    3ae4:	799b      	ldrb	r3, [r3, #6]
    3ae6:	00db      	lsls	r3, r3, #3
    3ae8:	f003 0308 	and.w	r3, r3, #8
    3aec:	4313      	orrs	r3, r2
    3aee:	4a1b      	ldr	r2, [pc, #108]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3af0:	f043 0301 	orr.w	r3, r3, #1
    3af4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3af8:	aa03      	add	r2, sp, #12
    3afa:	a904      	add	r1, sp, #16
    3afc:	a805      	add	r0, sp, #20
    3afe:	f24c 3350 	movw	r3, #50000	; 0xc350
    3b02:	f7fe ff17 	bl	2934 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3b06:	4b15      	ldr	r3, [pc, #84]	; (3b5c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3b08:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b0c:	0e1b      	lsrs	r3, r3, #24
    3b0e:	f003 0301 	and.w	r3, r3, #1
    3b12:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3b14:	9a03      	ldr	r2, [sp, #12]
    3b16:	a904      	add	r1, sp, #16
    3b18:	ab05      	add	r3, sp, #20
    3b1a:	4618      	mov	r0, r3
    3b1c:	f7fe ff24 	bl	2968 <Clock_Ip_TimeoutExpired>
    3b20:	4603      	mov	r3, r0
    3b22:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3b26:	9b06      	ldr	r3, [sp, #24]
    3b28:	2b00      	cmp	r3, #0
    3b2a:	d106      	bne.n	3b3a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3b2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3b30:	f083 0301 	eor.w	r3, r3, #1
    3b34:	b2db      	uxtb	r3, r3
    3b36:	2b00      	cmp	r3, #0
    3b38:	d1e5      	bne.n	3b06 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3b3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d005      	beq.n	3b4e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3b42:	9b01      	ldr	r3, [sp, #4]
    3b44:	681b      	ldr	r3, [r3, #0]
    3b46:	4619      	mov	r1, r3
    3b48:	2001      	movs	r0, #1
    3b4a:	f7fe fee3 	bl	2914 <Clock_Ip_ReportClockErrors>
}
    3b4e:	bf00      	nop
    3b50:	b00b      	add	sp, #44	; 0x2c
    3b52:	f85d fb04 	ldr.w	pc, [sp], #4
    3b56:	bf00      	nop
    3b58:	00007fd0 	.word	0x00007fd0
    3b5c:	40064000 	.word	0x40064000

00003b60 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b60:	b500      	push	{lr}
    3b62:	b089      	sub	sp, #36	; 0x24
    3b64:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3b66:	2300      	movs	r3, #0
    3b68:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3b6c:	9b01      	ldr	r3, [sp, #4]
    3b6e:	889b      	ldrh	r3, [r3, #4]
    3b70:	2b01      	cmp	r3, #1
    3b72:	d132      	bne.n	3bda <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3b74:	4b1b      	ldr	r3, [pc, #108]	; (3be4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3b76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b7a:	4a1a      	ldr	r2, [pc, #104]	; (3be4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3b7c:	f043 0301 	orr.w	r3, r3, #1
    3b80:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3b84:	aa03      	add	r2, sp, #12
    3b86:	a904      	add	r1, sp, #16
    3b88:	a805      	add	r0, sp, #20
    3b8a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3b8e:	f7fe fed1 	bl	2934 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3b92:	4b14      	ldr	r3, [pc, #80]	; (3be4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3b94:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b98:	0e1b      	lsrs	r3, r3, #24
    3b9a:	f003 0301 	and.w	r3, r3, #1
    3b9e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ba0:	9a03      	ldr	r2, [sp, #12]
    3ba2:	a904      	add	r1, sp, #16
    3ba4:	ab05      	add	r3, sp, #20
    3ba6:	4618      	mov	r0, r3
    3ba8:	f7fe fede 	bl	2968 <Clock_Ip_TimeoutExpired>
    3bac:	4603      	mov	r3, r0
    3bae:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3bb2:	9b06      	ldr	r3, [sp, #24]
    3bb4:	2b00      	cmp	r3, #0
    3bb6:	d106      	bne.n	3bc6 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3bb8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3bbc:	f083 0301 	eor.w	r3, r3, #1
    3bc0:	b2db      	uxtb	r3, r3
    3bc2:	2b00      	cmp	r3, #0
    3bc4:	d1e5      	bne.n	3b92 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3bc6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d005      	beq.n	3bda <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3bce:	9b01      	ldr	r3, [sp, #4]
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	4619      	mov	r1, r3
    3bd4:	2001      	movs	r0, #1
    3bd6:	f7fe fe9d 	bl	2914 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3bda:	bf00      	nop
    3bdc:	b009      	add	sp, #36	; 0x24
    3bde:	f85d fb04 	ldr.w	pc, [sp], #4
    3be2:	bf00      	nop
    3be4:	40064000 	.word	0x40064000

00003be8 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3be8:	b082      	sub	sp, #8
    3bea:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3bec:	4b05      	ldr	r3, [pc, #20]	; (3c04 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3bee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bf2:	4a04      	ldr	r2, [pc, #16]	; (3c04 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3bf4:	f023 0301 	bic.w	r3, r3, #1
    3bf8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3bfc:	bf00      	nop
    3bfe:	b002      	add	sp, #8
    3c00:	4770      	bx	lr
    3c02:	bf00      	nop
    3c04:	40064000 	.word	0x40064000

00003c08 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3c08:	b082      	sub	sp, #8
    3c0a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3c0c:	bf00      	nop
    3c0e:	b002      	add	sp, #8
    3c10:	4770      	bx	lr

00003c12 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3c12:	b082      	sub	sp, #8
    3c14:	9001      	str	r0, [sp, #4]
    3c16:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3c18:	bf00      	nop
    3c1a:	b002      	add	sp, #8
    3c1c:	4770      	bx	lr

00003c1e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3c1e:	b082      	sub	sp, #8
    3c20:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3c22:	bf00      	nop
    3c24:	b002      	add	sp, #8
    3c26:	4770      	bx	lr

00003c28 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3c28:	b082      	sub	sp, #8
    3c2a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3c2c:	bf00      	nop
    3c2e:	b002      	add	sp, #8
    3c30:	4770      	bx	lr

00003c32 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3c32:	b082      	sub	sp, #8
    3c34:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3c36:	2302      	movs	r3, #2
}
    3c38:	4618      	mov	r0, r3
    3c3a:	b002      	add	sp, #8
    3c3c:	4770      	bx	lr

00003c3e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3c3e:	b082      	sub	sp, #8
    3c40:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3c42:	bf00      	nop
    3c44:	b002      	add	sp, #8
    3c46:	4770      	bx	lr

00003c48 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3c48:	b500      	push	{lr}
    3c4a:	b083      	sub	sp, #12
    3c4c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c4e:	9b01      	ldr	r3, [sp, #4]
    3c50:	2b00      	cmp	r3, #0
    3c52:	d002      	beq.n	3c5a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3c54:	9801      	ldr	r0, [sp, #4]
    3c56:	f000 f870 	bl	3d3a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c5a:	bf00      	nop
    3c5c:	b003      	add	sp, #12
    3c5e:	f85d fb04 	ldr.w	pc, [sp], #4

00003c62 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3c62:	b500      	push	{lr}
    3c64:	b083      	sub	sp, #12
    3c66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c68:	9b01      	ldr	r3, [sp, #4]
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d002      	beq.n	3c74 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3c6e:	9801      	ldr	r0, [sp, #4]
    3c70:	f000 f89a 	bl	3da8 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c74:	bf00      	nop
    3c76:	b003      	add	sp, #12
    3c78:	f85d fb04 	ldr.w	pc, [sp], #4

00003c7c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3c7c:	b500      	push	{lr}
    3c7e:	b089      	sub	sp, #36	; 0x24
    3c80:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3c82:	2301      	movs	r3, #1
    3c84:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3c86:	2300      	movs	r3, #0
    3c88:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3c8c:	4b1e      	ldr	r3, [pc, #120]	; (3d08 <Clock_Ip_CompleteSpll+0x8c>)
    3c8e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3c92:	f003 0301 	and.w	r3, r3, #1
    3c96:	2b00      	cmp	r3, #0
    3c98:	d02f      	beq.n	3cfa <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3c9a:	aa02      	add	r2, sp, #8
    3c9c:	a903      	add	r1, sp, #12
    3c9e:	a804      	add	r0, sp, #16
    3ca0:	f24c 3350 	movw	r3, #50000	; 0xc350
    3ca4:	f7fe fe46 	bl	2934 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3ca8:	4b17      	ldr	r3, [pc, #92]	; (3d08 <Clock_Ip_CompleteSpll+0x8c>)
    3caa:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3cae:	0e1b      	lsrs	r3, r3, #24
    3cb0:	f003 0301 	and.w	r3, r3, #1
    3cb4:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3cb6:	9a02      	ldr	r2, [sp, #8]
    3cb8:	a903      	add	r1, sp, #12
    3cba:	ab04      	add	r3, sp, #16
    3cbc:	4618      	mov	r0, r3
    3cbe:	f7fe fe53 	bl	2968 <Clock_Ip_TimeoutExpired>
    3cc2:	4603      	mov	r3, r0
    3cc4:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3cc8:	9b05      	ldr	r3, [sp, #20]
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d106      	bne.n	3cdc <Clock_Ip_CompleteSpll+0x60>
    3cce:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3cd2:	f083 0301 	eor.w	r3, r3, #1
    3cd6:	b2db      	uxtb	r3, r3
    3cd8:	2b00      	cmp	r3, #0
    3cda:	d1e5      	bne.n	3ca8 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3cdc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3ce0:	f083 0301 	eor.w	r3, r3, #1
    3ce4:	b2db      	uxtb	r3, r3
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	d002      	beq.n	3cf0 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3cea:	2302      	movs	r3, #2
    3cec:	9307      	str	r3, [sp, #28]
    3cee:	e006      	b.n	3cfe <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3cf0:	9901      	ldr	r1, [sp, #4]
    3cf2:	2001      	movs	r0, #1
    3cf4:	f7fe fe0e 	bl	2914 <Clock_Ip_ReportClockErrors>
    3cf8:	e001      	b.n	3cfe <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3cfa:	2300      	movs	r3, #0
    3cfc:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3cfe:	9b07      	ldr	r3, [sp, #28]
}
    3d00:	4618      	mov	r0, r3
    3d02:	b009      	add	sp, #36	; 0x24
    3d04:	f85d fb04 	ldr.w	pc, [sp], #4
    3d08:	40064000 	.word	0x40064000

00003d0c <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3d0c:	b500      	push	{lr}
    3d0e:	b083      	sub	sp, #12
    3d10:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3d12:	9801      	ldr	r0, [sp, #4]
    3d14:	f000 f886 	bl	3e24 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3d18:	bf00      	nop
    3d1a:	b003      	add	sp, #12
    3d1c:	f85d fb04 	ldr.w	pc, [sp], #4

00003d20 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3d20:	b500      	push	{lr}
    3d22:	b083      	sub	sp, #12
    3d24:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d26:	9b01      	ldr	r3, [sp, #4]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d002      	beq.n	3d32 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3d2c:	9801      	ldr	r0, [sp, #4]
    3d2e:	f000 f891 	bl	3e54 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d32:	bf00      	nop
    3d34:	b003      	add	sp, #12
    3d36:	f85d fb04 	ldr.w	pc, [sp], #4

00003d3a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3d3a:	b082      	sub	sp, #8
    3d3c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3d3e:	4b19      	ldr	r3, [pc, #100]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d40:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3d44:	4a17      	ldr	r2, [pc, #92]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3d4a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3d4e:	4b15      	ldr	r3, [pc, #84]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d50:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3d54:	4a13      	ldr	r2, [pc, #76]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3d5a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3d5e:	4b11      	ldr	r3, [pc, #68]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d60:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3d64:	4a0f      	ldr	r2, [pc, #60]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3d6a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3d6e:	4b0d      	ldr	r3, [pc, #52]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d70:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3d74:	4a0b      	ldr	r2, [pc, #44]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d76:	f023 0301 	bic.w	r3, r3, #1
    3d7a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    3d7e:	4b09      	ldr	r3, [pc, #36]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d80:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3d84:	4a07      	ldr	r2, [pc, #28]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3d8a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    3d8e:	4b05      	ldr	r3, [pc, #20]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d90:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3d94:	4a03      	ldr	r2, [pc, #12]	; (3da4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3d96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3d9a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    3d9e:	bf00      	nop
    3da0:	b002      	add	sp, #8
    3da2:	4770      	bx	lr
    3da4:	40064000 	.word	0x40064000

00003da8 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3da8:	b082      	sub	sp, #8
    3daa:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3dac:	9b01      	ldr	r3, [sp, #4]
    3dae:	889b      	ldrh	r3, [r3, #4]
    3db0:	2b01      	cmp	r3, #1
    3db2:	d12f      	bne.n	3e14 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3db4:	4b1a      	ldr	r3, [pc, #104]	; (3e20 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3db6:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3dba:	9b01      	ldr	r3, [sp, #4]
    3dbc:	7b5b      	ldrb	r3, [r3, #13]
    3dbe:	3b01      	subs	r3, #1
    3dc0:	021b      	lsls	r3, r3, #8
    3dc2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3dc6:	9b01      	ldr	r3, [sp, #4]
    3dc8:	7d1b      	ldrb	r3, [r3, #20]
    3dca:	3b10      	subs	r3, #16
    3dcc:	041b      	lsls	r3, r3, #16
    3dce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3dd2:	430b      	orrs	r3, r1
    3dd4:	4912      	ldr	r1, [pc, #72]	; (3e20 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3dd6:	4313      	orrs	r3, r2
    3dd8:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3ddc:	9b01      	ldr	r3, [sp, #4]
    3dde:	7fdb      	ldrb	r3, [r3, #31]
    3de0:	2b02      	cmp	r3, #2
    3de2:	d011      	beq.n	3e08 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3de4:	2b02      	cmp	r3, #2
    3de6:	dc17      	bgt.n	3e18 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3de8:	2b00      	cmp	r3, #0
    3dea:	d002      	beq.n	3df2 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3dec:	2b01      	cmp	r3, #1
    3dee:	d005      	beq.n	3dfc <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3df0:	e012      	b.n	3e18 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3df2:	4b0b      	ldr	r3, [pc, #44]	; (3e20 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3df4:	2200      	movs	r2, #0
    3df6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3dfa:	e00e      	b.n	3e1a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3dfc:	4b08      	ldr	r3, [pc, #32]	; (3e20 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3dfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3e02:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3e06:	e008      	b.n	3e1a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3e08:	4b05      	ldr	r3, [pc, #20]	; (3e20 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3e0a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    3e0e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3e12:	e002      	b.n	3e1a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3e14:	bf00      	nop
    3e16:	e000      	b.n	3e1a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3e18:	bf00      	nop
}
    3e1a:	bf00      	nop
    3e1c:	b002      	add	sp, #8
    3e1e:	4770      	bx	lr
    3e20:	40064000 	.word	0x40064000

00003e24 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3e24:	b082      	sub	sp, #8
    3e26:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3e28:	4b09      	ldr	r3, [pc, #36]	; (3e50 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3e2a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3e2e:	4a08      	ldr	r2, [pc, #32]	; (3e50 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3e30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e34:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3e38:	4b05      	ldr	r3, [pc, #20]	; (3e50 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3e3a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3e3e:	4a04      	ldr	r2, [pc, #16]	; (3e50 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3e40:	f023 0301 	bic.w	r3, r3, #1
    3e44:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3e48:	bf00      	nop
    3e4a:	b002      	add	sp, #8
    3e4c:	4770      	bx	lr
    3e4e:	bf00      	nop
    3e50:	40064000 	.word	0x40064000

00003e54 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3e54:	b082      	sub	sp, #8
    3e56:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3e58:	9b01      	ldr	r3, [sp, #4]
    3e5a:	889b      	ldrh	r3, [r3, #4]
    3e5c:	2b01      	cmp	r3, #1
    3e5e:	d107      	bne.n	3e70 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3e60:	4b05      	ldr	r3, [pc, #20]	; (3e78 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3e62:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3e66:	4a04      	ldr	r2, [pc, #16]	; (3e78 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3e68:	f043 0301 	orr.w	r3, r3, #1
    3e6c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3e70:	bf00      	nop
    3e72:	b002      	add	sp, #8
    3e74:	4770      	bx	lr
    3e76:	bf00      	nop
    3e78:	40064000 	.word	0x40064000

00003e7c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3e7c:	b082      	sub	sp, #8
    3e7e:	9001      	str	r0, [sp, #4]
    3e80:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3e82:	bf00      	nop
    3e84:	b002      	add	sp, #8
    3e86:	4770      	bx	lr

00003e88 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3e88:	b082      	sub	sp, #8
    3e8a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3e8c:	bf00      	nop
    3e8e:	b002      	add	sp, #8
    3e90:	4770      	bx	lr

00003e92 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3e92:	b500      	push	{lr}
    3e94:	b083      	sub	sp, #12
    3e96:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e98:	9b01      	ldr	r3, [sp, #4]
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d002      	beq.n	3ea4 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    3e9e:	9801      	ldr	r0, [sp, #4]
    3ea0:	f000 f8ee 	bl	4080 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ea4:	bf00      	nop
    3ea6:	b003      	add	sp, #12
    3ea8:	f85d fb04 	ldr.w	pc, [sp], #4

00003eac <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3eac:	b500      	push	{lr}
    3eae:	b083      	sub	sp, #12
    3eb0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3eb2:	9b01      	ldr	r3, [sp, #4]
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	d002      	beq.n	3ebe <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3eb8:	9801      	ldr	r0, [sp, #4]
    3eba:	f000 f8ff 	bl	40bc <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ebe:	bf00      	nop
    3ec0:	b003      	add	sp, #12
    3ec2:	f85d fb04 	ldr.w	pc, [sp], #4

00003ec6 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    3ec6:	b500      	push	{lr}
    3ec8:	b083      	sub	sp, #12
    3eca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ecc:	9b01      	ldr	r3, [sp, #4]
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d002      	beq.n	3ed8 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    3ed2:	9801      	ldr	r0, [sp, #4]
    3ed4:	f000 f912 	bl	40fc <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ed8:	bf00      	nop
    3eda:	b003      	add	sp, #12
    3edc:	f85d fb04 	ldr.w	pc, [sp], #4

00003ee0 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3ee0:	b500      	push	{lr}
    3ee2:	b083      	sub	sp, #12
    3ee4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ee6:	9b01      	ldr	r3, [sp, #4]
    3ee8:	2b00      	cmp	r3, #0
    3eea:	d002      	beq.n	3ef2 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    3eec:	9801      	ldr	r0, [sp, #4]
    3eee:	f000 f925 	bl	413c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ef2:	bf00      	nop
    3ef4:	b003      	add	sp, #12
    3ef6:	f85d fb04 	ldr.w	pc, [sp], #4

00003efa <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3efa:	b500      	push	{lr}
    3efc:	b083      	sub	sp, #12
    3efe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f00:	9b01      	ldr	r3, [sp, #4]
    3f02:	2b00      	cmp	r3, #0
    3f04:	d002      	beq.n	3f0c <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3f06:	9801      	ldr	r0, [sp, #4]
    3f08:	f000 f936 	bl	4178 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f0c:	bf00      	nop
    3f0e:	b003      	add	sp, #12
    3f10:	f85d fb04 	ldr.w	pc, [sp], #4

00003f14 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3f14:	b500      	push	{lr}
    3f16:	b083      	sub	sp, #12
    3f18:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f1a:	9b01      	ldr	r3, [sp, #4]
    3f1c:	2b00      	cmp	r3, #0
    3f1e:	d002      	beq.n	3f26 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3f20:	9801      	ldr	r0, [sp, #4]
    3f22:	f000 f949 	bl	41b8 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f26:	bf00      	nop
    3f28:	b003      	add	sp, #12
    3f2a:	f85d fb04 	ldr.w	pc, [sp], #4

00003f2e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3f2e:	b500      	push	{lr}
    3f30:	b083      	sub	sp, #12
    3f32:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f34:	9b01      	ldr	r3, [sp, #4]
    3f36:	2b00      	cmp	r3, #0
    3f38:	d002      	beq.n	3f40 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    3f3a:	9801      	ldr	r0, [sp, #4]
    3f3c:	f000 f958 	bl	41f0 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f40:	bf00      	nop
    3f42:	b003      	add	sp, #12
    3f44:	f85d fb04 	ldr.w	pc, [sp], #4

00003f48 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3f48:	b500      	push	{lr}
    3f4a:	b083      	sub	sp, #12
    3f4c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f4e:	9b01      	ldr	r3, [sp, #4]
    3f50:	2b00      	cmp	r3, #0
    3f52:	d002      	beq.n	3f5a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3f54:	9801      	ldr	r0, [sp, #4]
    3f56:	f000 f969 	bl	422c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f5a:	bf00      	nop
    3f5c:	b003      	add	sp, #12
    3f5e:	f85d fb04 	ldr.w	pc, [sp], #4

00003f62 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3f62:	b500      	push	{lr}
    3f64:	b083      	sub	sp, #12
    3f66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f68:	9b01      	ldr	r3, [sp, #4]
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	d002      	beq.n	3f74 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    3f6e:	9801      	ldr	r0, [sp, #4]
    3f70:	f000 f978 	bl	4264 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f74:	bf00      	nop
    3f76:	b003      	add	sp, #12
    3f78:	f85d fb04 	ldr.w	pc, [sp], #4

00003f7c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3f7c:	b500      	push	{lr}
    3f7e:	b083      	sub	sp, #12
    3f80:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f82:	9b01      	ldr	r3, [sp, #4]
    3f84:	2b00      	cmp	r3, #0
    3f86:	d002      	beq.n	3f8e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3f88:	9801      	ldr	r0, [sp, #4]
    3f8a:	f000 f989 	bl	42a0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f8e:	bf00      	nop
    3f90:	b003      	add	sp, #12
    3f92:	f85d fb04 	ldr.w	pc, [sp], #4

00003f96 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3f96:	b500      	push	{lr}
    3f98:	b083      	sub	sp, #12
    3f9a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f9c:	9b01      	ldr	r3, [sp, #4]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d002      	beq.n	3fa8 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    3fa2:	9801      	ldr	r0, [sp, #4]
    3fa4:	f000 f998 	bl	42d8 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3fa8:	bf00      	nop
    3faa:	b003      	add	sp, #12
    3fac:	f85d fb04 	ldr.w	pc, [sp], #4

00003fb0 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3fb0:	b500      	push	{lr}
    3fb2:	b083      	sub	sp, #12
    3fb4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3fb6:	9b01      	ldr	r3, [sp, #4]
    3fb8:	2b00      	cmp	r3, #0
    3fba:	d002      	beq.n	3fc2 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    3fbc:	9801      	ldr	r0, [sp, #4]
    3fbe:	f000 f9a9 	bl	4314 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3fc2:	bf00      	nop
    3fc4:	b003      	add	sp, #12
    3fc6:	f85d fb04 	ldr.w	pc, [sp], #4

00003fca <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3fca:	b500      	push	{lr}
    3fcc:	b083      	sub	sp, #12
    3fce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3fd0:	9b01      	ldr	r3, [sp, #4]
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d002      	beq.n	3fdc <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3fd6:	9801      	ldr	r0, [sp, #4]
    3fd8:	f000 f9e6 	bl	43a8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3fdc:	bf00      	nop
    3fde:	b003      	add	sp, #12
    3fe0:	f85d fb04 	ldr.w	pc, [sp], #4

00003fe4 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3fe4:	b500      	push	{lr}
    3fe6:	b083      	sub	sp, #12
    3fe8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3fea:	9b01      	ldr	r3, [sp, #4]
    3fec:	2b00      	cmp	r3, #0
    3fee:	d002      	beq.n	3ff6 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3ff0:	9801      	ldr	r0, [sp, #4]
    3ff2:	f000 fa25 	bl	4440 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ff6:	bf00      	nop
    3ff8:	b003      	add	sp, #12
    3ffa:	f85d fb04 	ldr.w	pc, [sp], #4

00003ffe <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3ffe:	b500      	push	{lr}
    4000:	b083      	sub	sp, #12
    4002:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4004:	9b01      	ldr	r3, [sp, #4]
    4006:	2b00      	cmp	r3, #0
    4008:	d002      	beq.n	4010 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    400a:	9801      	ldr	r0, [sp, #4]
    400c:	f000 fa2a 	bl	4464 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4010:	bf00      	nop
    4012:	b003      	add	sp, #12
    4014:	f85d fb04 	ldr.w	pc, [sp], #4

00004018 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4018:	b500      	push	{lr}
    401a:	b083      	sub	sp, #12
    401c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    401e:	9b01      	ldr	r3, [sp, #4]
    4020:	2b00      	cmp	r3, #0
    4022:	d002      	beq.n	402a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4024:	9801      	ldr	r0, [sp, #4]
    4026:	f000 fa3b 	bl	44a0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    402a:	bf00      	nop
    402c:	b003      	add	sp, #12
    402e:	f85d fb04 	ldr.w	pc, [sp], #4

00004032 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4032:	b500      	push	{lr}
    4034:	b083      	sub	sp, #12
    4036:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4038:	9b01      	ldr	r3, [sp, #4]
    403a:	2b00      	cmp	r3, #0
    403c:	d002      	beq.n	4044 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    403e:	9801      	ldr	r0, [sp, #4]
    4040:	f000 fa56 	bl	44f0 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4044:	bf00      	nop
    4046:	b003      	add	sp, #12
    4048:	f85d fb04 	ldr.w	pc, [sp], #4

0000404c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    404c:	b500      	push	{lr}
    404e:	b083      	sub	sp, #12
    4050:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4052:	9b01      	ldr	r3, [sp, #4]
    4054:	2b00      	cmp	r3, #0
    4056:	d002      	beq.n	405e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4058:	9801      	ldr	r0, [sp, #4]
    405a:	f000 fa79 	bl	4550 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    405e:	bf00      	nop
    4060:	b003      	add	sp, #12
    4062:	f85d fb04 	ldr.w	pc, [sp], #4

00004066 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4066:	b500      	push	{lr}
    4068:	b083      	sub	sp, #12
    406a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    406c:	9b01      	ldr	r3, [sp, #4]
    406e:	2b00      	cmp	r3, #0
    4070:	d002      	beq.n	4078 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4072:	9801      	ldr	r0, [sp, #4]
    4074:	f000 fa8a 	bl	458c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4078:	bf00      	nop
    407a:	b003      	add	sp, #12
    407c:	f85d fb04 	ldr.w	pc, [sp], #4

00004080 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4080:	b084      	sub	sp, #16
    4082:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4084:	4b0b      	ldr	r3, [pc, #44]	; (40b4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4086:	795b      	ldrb	r3, [r3, #5]
    4088:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    408a:	4b0b      	ldr	r3, [pc, #44]	; (40b8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    408c:	695b      	ldr	r3, [r3, #20]
    408e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4090:	9b02      	ldr	r3, [sp, #8]
    4092:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4096:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4098:	9b03      	ldr	r3, [sp, #12]
    409a:	061b      	lsls	r3, r3, #24
    409c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    40a0:	9a02      	ldr	r2, [sp, #8]
    40a2:	4313      	orrs	r3, r2
    40a4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    40a6:	4a04      	ldr	r2, [pc, #16]	; (40b8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    40a8:	9b02      	ldr	r3, [sp, #8]
    40aa:	6153      	str	r3, [r2, #20]
}
    40ac:	bf00      	nop
    40ae:	b004      	add	sp, #16
    40b0:	4770      	bx	lr
    40b2:	bf00      	nop
    40b4:	00008338 	.word	0x00008338
    40b8:	40064000 	.word	0x40064000

000040bc <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    40bc:	b084      	sub	sp, #16
    40be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    40c0:	9b01      	ldr	r3, [sp, #4]
    40c2:	685b      	ldr	r3, [r3, #4]
    40c4:	4a0b      	ldr	r2, [pc, #44]	; (40f4 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    40c6:	5cd3      	ldrb	r3, [r2, r3]
    40c8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    40ca:	4b0b      	ldr	r3, [pc, #44]	; (40f8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    40cc:	695b      	ldr	r3, [r3, #20]
    40ce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    40d0:	9b02      	ldr	r3, [sp, #8]
    40d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    40d6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    40d8:	9b03      	ldr	r3, [sp, #12]
    40da:	061b      	lsls	r3, r3, #24
    40dc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    40e0:	9a02      	ldr	r2, [sp, #8]
    40e2:	4313      	orrs	r3, r2
    40e4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    40e6:	4a04      	ldr	r2, [pc, #16]	; (40f8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    40e8:	9b02      	ldr	r3, [sp, #8]
    40ea:	6153      	str	r3, [r2, #20]
}
    40ec:	bf00      	nop
    40ee:	b004      	add	sp, #16
    40f0:	4770      	bx	lr
    40f2:	bf00      	nop
    40f4:	00008338 	.word	0x00008338
    40f8:	40064000 	.word	0x40064000

000040fc <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    40fc:	b084      	sub	sp, #16
    40fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4100:	9b01      	ldr	r3, [sp, #4]
    4102:	685b      	ldr	r3, [r3, #4]
    4104:	4a0b      	ldr	r2, [pc, #44]	; (4134 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    4106:	5cd3      	ldrb	r3, [r2, r3]
    4108:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    410a:	4b0b      	ldr	r3, [pc, #44]	; (4138 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    410c:	699b      	ldr	r3, [r3, #24]
    410e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4110:	9b02      	ldr	r3, [sp, #8]
    4112:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4116:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4118:	9b03      	ldr	r3, [sp, #12]
    411a:	061b      	lsls	r3, r3, #24
    411c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4120:	9a02      	ldr	r2, [sp, #8]
    4122:	4313      	orrs	r3, r2
    4124:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4126:	4a04      	ldr	r2, [pc, #16]	; (4138 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4128:	9b02      	ldr	r3, [sp, #8]
    412a:	6193      	str	r3, [r2, #24]
}
    412c:	bf00      	nop
    412e:	b004      	add	sp, #16
    4130:	4770      	bx	lr
    4132:	bf00      	nop
    4134:	00008338 	.word	0x00008338
    4138:	40064000 	.word	0x40064000

0000413c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    413c:	b084      	sub	sp, #16
    413e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4140:	4b0b      	ldr	r3, [pc, #44]	; (4170 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4142:	795b      	ldrb	r3, [r3, #5]
    4144:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4146:	4b0b      	ldr	r3, [pc, #44]	; (4174 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4148:	69db      	ldr	r3, [r3, #28]
    414a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    414c:	9b02      	ldr	r3, [sp, #8]
    414e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4152:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4154:	9b03      	ldr	r3, [sp, #12]
    4156:	061b      	lsls	r3, r3, #24
    4158:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    415c:	9a02      	ldr	r2, [sp, #8]
    415e:	4313      	orrs	r3, r2
    4160:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4162:	4a04      	ldr	r2, [pc, #16]	; (4174 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4164:	9b02      	ldr	r3, [sp, #8]
    4166:	61d3      	str	r3, [r2, #28]
}
    4168:	bf00      	nop
    416a:	b004      	add	sp, #16
    416c:	4770      	bx	lr
    416e:	bf00      	nop
    4170:	00008338 	.word	0x00008338
    4174:	40064000 	.word	0x40064000

00004178 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4178:	b084      	sub	sp, #16
    417a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    417c:	9b01      	ldr	r3, [sp, #4]
    417e:	685b      	ldr	r3, [r3, #4]
    4180:	4a0b      	ldr	r2, [pc, #44]	; (41b0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4182:	5cd3      	ldrb	r3, [r2, r3]
    4184:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4186:	4b0b      	ldr	r3, [pc, #44]	; (41b4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4188:	69db      	ldr	r3, [r3, #28]
    418a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    418c:	9b02      	ldr	r3, [sp, #8]
    418e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4192:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4194:	9b03      	ldr	r3, [sp, #12]
    4196:	061b      	lsls	r3, r3, #24
    4198:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    419c:	9a02      	ldr	r2, [sp, #8]
    419e:	4313      	orrs	r3, r2
    41a0:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    41a2:	4a04      	ldr	r2, [pc, #16]	; (41b4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    41a4:	9b02      	ldr	r3, [sp, #8]
    41a6:	61d3      	str	r3, [r2, #28]
}
    41a8:	bf00      	nop
    41aa:	b004      	add	sp, #16
    41ac:	4770      	bx	lr
    41ae:	bf00      	nop
    41b0:	00008338 	.word	0x00008338
    41b4:	40064000 	.word	0x40064000

000041b8 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    41b8:	b084      	sub	sp, #16
    41ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    41bc:	4b0a      	ldr	r3, [pc, #40]	; (41e8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    41be:	7b9b      	ldrb	r3, [r3, #14]
    41c0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    41c2:	4b0a      	ldr	r3, [pc, #40]	; (41ec <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    41c4:	691b      	ldr	r3, [r3, #16]
    41c6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    41c8:	9b02      	ldr	r3, [sp, #8]
    41ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    41ce:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    41d0:	9b03      	ldr	r3, [sp, #12]
    41d2:	011b      	lsls	r3, r3, #4
    41d4:	9a02      	ldr	r2, [sp, #8]
    41d6:	4313      	orrs	r3, r2
    41d8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    41da:	4a04      	ldr	r2, [pc, #16]	; (41ec <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    41dc:	9b02      	ldr	r3, [sp, #8]
    41de:	6113      	str	r3, [r2, #16]
}
    41e0:	bf00      	nop
    41e2:	b004      	add	sp, #16
    41e4:	4770      	bx	lr
    41e6:	bf00      	nop
    41e8:	000082e0 	.word	0x000082e0
    41ec:	40048000 	.word	0x40048000

000041f0 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    41f0:	b084      	sub	sp, #16
    41f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    41f4:	9b01      	ldr	r3, [sp, #4]
    41f6:	685b      	ldr	r3, [r3, #4]
    41f8:	4a0a      	ldr	r2, [pc, #40]	; (4224 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    41fa:	5cd3      	ldrb	r3, [r2, r3]
    41fc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    41fe:	4b0a      	ldr	r3, [pc, #40]	; (4228 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4200:	691b      	ldr	r3, [r3, #16]
    4202:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4204:	9b02      	ldr	r3, [sp, #8]
    4206:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    420a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    420c:	9b03      	ldr	r3, [sp, #12]
    420e:	011b      	lsls	r3, r3, #4
    4210:	9a02      	ldr	r2, [sp, #8]
    4212:	4313      	orrs	r3, r2
    4214:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4216:	4a04      	ldr	r2, [pc, #16]	; (4228 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4218:	9b02      	ldr	r3, [sp, #8]
    421a:	6113      	str	r3, [r2, #16]
}
    421c:	bf00      	nop
    421e:	b004      	add	sp, #16
    4220:	4770      	bx	lr
    4222:	bf00      	nop
    4224:	000082e0 	.word	0x000082e0
    4228:	40048000 	.word	0x40048000

0000422c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    422c:	b084      	sub	sp, #16
    422e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4230:	4b0a      	ldr	r3, [pc, #40]	; (425c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4232:	785b      	ldrb	r3, [r3, #1]
    4234:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4236:	4b0a      	ldr	r3, [pc, #40]	; (4260 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4238:	691b      	ldr	r3, [r3, #16]
    423a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    423c:	9b02      	ldr	r3, [sp, #8]
    423e:	f023 030c 	bic.w	r3, r3, #12
    4242:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4244:	9b03      	ldr	r3, [sp, #12]
    4246:	009b      	lsls	r3, r3, #2
    4248:	9a02      	ldr	r2, [sp, #8]
    424a:	4313      	orrs	r3, r2
    424c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    424e:	4a04      	ldr	r2, [pc, #16]	; (4260 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4250:	9b02      	ldr	r3, [sp, #8]
    4252:	6113      	str	r3, [r2, #16]
}
    4254:	bf00      	nop
    4256:	b004      	add	sp, #16
    4258:	4770      	bx	lr
    425a:	bf00      	nop
    425c:	00008398 	.word	0x00008398
    4260:	40048000 	.word	0x40048000

00004264 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4264:	b084      	sub	sp, #16
    4266:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4268:	9b01      	ldr	r3, [sp, #4]
    426a:	685b      	ldr	r3, [r3, #4]
    426c:	4a0a      	ldr	r2, [pc, #40]	; (4298 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    426e:	5cd3      	ldrb	r3, [r2, r3]
    4270:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4272:	4b0a      	ldr	r3, [pc, #40]	; (429c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4274:	691b      	ldr	r3, [r3, #16]
    4276:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4278:	9b02      	ldr	r3, [sp, #8]
    427a:	f023 030c 	bic.w	r3, r3, #12
    427e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4280:	9b03      	ldr	r3, [sp, #12]
    4282:	009b      	lsls	r3, r3, #2
    4284:	9a02      	ldr	r2, [sp, #8]
    4286:	4313      	orrs	r3, r2
    4288:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    428a:	4a04      	ldr	r2, [pc, #16]	; (429c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    428c:	9b02      	ldr	r3, [sp, #8]
    428e:	6113      	str	r3, [r2, #16]
}
    4290:	bf00      	nop
    4292:	b004      	add	sp, #16
    4294:	4770      	bx	lr
    4296:	bf00      	nop
    4298:	00008398 	.word	0x00008398
    429c:	40048000 	.word	0x40048000

000042a0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42a0:	b084      	sub	sp, #16
    42a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42a4:	4b0a      	ldr	r3, [pc, #40]	; (42d0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    42a6:	795b      	ldrb	r3, [r3, #5]
    42a8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    42aa:	4b0a      	ldr	r3, [pc, #40]	; (42d4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    42ac:	6a1b      	ldr	r3, [r3, #32]
    42ae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    42b0:	9b02      	ldr	r3, [sp, #8]
    42b2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42b6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    42b8:	9b03      	ldr	r3, [sp, #12]
    42ba:	061b      	lsls	r3, r3, #24
    42bc:	9a02      	ldr	r2, [sp, #8]
    42be:	4313      	orrs	r3, r2
    42c0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    42c2:	4a04      	ldr	r2, [pc, #16]	; (42d4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    42c4:	9b02      	ldr	r3, [sp, #8]
    42c6:	6213      	str	r3, [r2, #32]
}
    42c8:	bf00      	nop
    42ca:	b004      	add	sp, #16
    42cc:	4770      	bx	lr
    42ce:	bf00      	nop
    42d0:	00008338 	.word	0x00008338
    42d4:	40064000 	.word	0x40064000

000042d8 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    42d8:	b084      	sub	sp, #16
    42da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    42dc:	9b01      	ldr	r3, [sp, #4]
    42de:	685b      	ldr	r3, [r3, #4]
    42e0:	4a0a      	ldr	r2, [pc, #40]	; (430c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    42e2:	5cd3      	ldrb	r3, [r2, r3]
    42e4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    42e6:	4b0a      	ldr	r3, [pc, #40]	; (4310 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    42e8:	6a1b      	ldr	r3, [r3, #32]
    42ea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    42ec:	9b02      	ldr	r3, [sp, #8]
    42ee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    42f2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    42f4:	9b03      	ldr	r3, [sp, #12]
    42f6:	061b      	lsls	r3, r3, #24
    42f8:	9a02      	ldr	r2, [sp, #8]
    42fa:	4313      	orrs	r3, r2
    42fc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    42fe:	4a04      	ldr	r2, [pc, #16]	; (4310 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4300:	9b02      	ldr	r3, [sp, #8]
    4302:	6213      	str	r3, [r2, #32]
}
    4304:	bf00      	nop
    4306:	b004      	add	sp, #16
    4308:	4770      	bx	lr
    430a:	bf00      	nop
    430c:	00008338 	.word	0x00008338
    4310:	40064000 	.word	0x40064000

00004314 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4314:	b086      	sub	sp, #24
    4316:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4318:	4b20      	ldr	r3, [pc, #128]	; (439c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    431a:	795b      	ldrb	r3, [r3, #5]
    431c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    431e:	9b01      	ldr	r3, [sp, #4]
    4320:	681a      	ldr	r2, [r3, #0]
    4322:	491f      	ldr	r1, [pc, #124]	; (43a0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4324:	4613      	mov	r3, r2
    4326:	00db      	lsls	r3, r3, #3
    4328:	4413      	add	r3, r2
    432a:	440b      	add	r3, r1
    432c:	781b      	ldrb	r3, [r3, #0]
    432e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4330:	4b1c      	ldr	r3, [pc, #112]	; (43a4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4332:	68db      	ldr	r3, [r3, #12]
    4334:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4336:	9b03      	ldr	r3, [sp, #12]
    4338:	2b03      	cmp	r3, #3
    433a:	d813      	bhi.n	4364 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    433c:	9b03      	ldr	r3, [sp, #12]
    433e:	005b      	lsls	r3, r3, #1
    4340:	3318      	adds	r3, #24
    4342:	2203      	movs	r2, #3
    4344:	fa02 f303 	lsl.w	r3, r2, r3
    4348:	43db      	mvns	r3, r3
    434a:	9a05      	ldr	r2, [sp, #20]
    434c:	4013      	ands	r3, r2
    434e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4350:	9b03      	ldr	r3, [sp, #12]
    4352:	005b      	lsls	r3, r3, #1
    4354:	3318      	adds	r3, #24
    4356:	9a04      	ldr	r2, [sp, #16]
    4358:	fa02 f303 	lsl.w	r3, r2, r3
    435c:	9a05      	ldr	r2, [sp, #20]
    435e:	4313      	orrs	r3, r2
    4360:	9305      	str	r3, [sp, #20]
    4362:	e014      	b.n	438e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4364:	9b03      	ldr	r3, [sp, #12]
    4366:	3b04      	subs	r3, #4
    4368:	005b      	lsls	r3, r3, #1
    436a:	3310      	adds	r3, #16
    436c:	2203      	movs	r2, #3
    436e:	fa02 f303 	lsl.w	r3, r2, r3
    4372:	43db      	mvns	r3, r3
    4374:	9a05      	ldr	r2, [sp, #20]
    4376:	4013      	ands	r3, r2
    4378:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    437a:	9b03      	ldr	r3, [sp, #12]
    437c:	3b04      	subs	r3, #4
    437e:	005b      	lsls	r3, r3, #1
    4380:	3310      	adds	r3, #16
    4382:	9a04      	ldr	r2, [sp, #16]
    4384:	fa02 f303 	lsl.w	r3, r2, r3
    4388:	9a05      	ldr	r2, [sp, #20]
    438a:	4313      	orrs	r3, r2
    438c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    438e:	4a05      	ldr	r2, [pc, #20]	; (43a4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4390:	9b05      	ldr	r3, [sp, #20]
    4392:	60d3      	str	r3, [r2, #12]
}
    4394:	bf00      	nop
    4396:	b006      	add	sp, #24
    4398:	4770      	bx	lr
    439a:	bf00      	nop
    439c:	000082e0 	.word	0x000082e0
    43a0:	00007fd0 	.word	0x00007fd0
    43a4:	40048000 	.word	0x40048000

000043a8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43a8:	b086      	sub	sp, #24
    43aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43ac:	9b01      	ldr	r3, [sp, #4]
    43ae:	685b      	ldr	r3, [r3, #4]
    43b0:	4a20      	ldr	r2, [pc, #128]	; (4434 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    43b2:	5cd3      	ldrb	r3, [r2, r3]
    43b4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    43b6:	9b01      	ldr	r3, [sp, #4]
    43b8:	681a      	ldr	r2, [r3, #0]
    43ba:	491f      	ldr	r1, [pc, #124]	; (4438 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    43bc:	4613      	mov	r3, r2
    43be:	00db      	lsls	r3, r3, #3
    43c0:	4413      	add	r3, r2
    43c2:	440b      	add	r3, r1
    43c4:	781b      	ldrb	r3, [r3, #0]
    43c6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    43c8:	4b1c      	ldr	r3, [pc, #112]	; (443c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    43ca:	68db      	ldr	r3, [r3, #12]
    43cc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    43ce:	9b03      	ldr	r3, [sp, #12]
    43d0:	2b03      	cmp	r3, #3
    43d2:	d813      	bhi.n	43fc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    43d4:	9b03      	ldr	r3, [sp, #12]
    43d6:	005b      	lsls	r3, r3, #1
    43d8:	3318      	adds	r3, #24
    43da:	2203      	movs	r2, #3
    43dc:	fa02 f303 	lsl.w	r3, r2, r3
    43e0:	43db      	mvns	r3, r3
    43e2:	9a05      	ldr	r2, [sp, #20]
    43e4:	4013      	ands	r3, r2
    43e6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    43e8:	9b03      	ldr	r3, [sp, #12]
    43ea:	005b      	lsls	r3, r3, #1
    43ec:	3318      	adds	r3, #24
    43ee:	9a04      	ldr	r2, [sp, #16]
    43f0:	fa02 f303 	lsl.w	r3, r2, r3
    43f4:	9a05      	ldr	r2, [sp, #20]
    43f6:	4313      	orrs	r3, r2
    43f8:	9305      	str	r3, [sp, #20]
    43fa:	e014      	b.n	4426 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    43fc:	9b03      	ldr	r3, [sp, #12]
    43fe:	3b04      	subs	r3, #4
    4400:	005b      	lsls	r3, r3, #1
    4402:	3310      	adds	r3, #16
    4404:	2203      	movs	r2, #3
    4406:	fa02 f303 	lsl.w	r3, r2, r3
    440a:	43db      	mvns	r3, r3
    440c:	9a05      	ldr	r2, [sp, #20]
    440e:	4013      	ands	r3, r2
    4410:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4412:	9b03      	ldr	r3, [sp, #12]
    4414:	3b04      	subs	r3, #4
    4416:	005b      	lsls	r3, r3, #1
    4418:	3310      	adds	r3, #16
    441a:	9a04      	ldr	r2, [sp, #16]
    441c:	fa02 f303 	lsl.w	r3, r2, r3
    4420:	9a05      	ldr	r2, [sp, #20]
    4422:	4313      	orrs	r3, r2
    4424:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4426:	4a05      	ldr	r2, [pc, #20]	; (443c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4428:	9b05      	ldr	r3, [sp, #20]
    442a:	60d3      	str	r3, [r2, #12]
}
    442c:	bf00      	nop
    442e:	b006      	add	sp, #24
    4430:	4770      	bx	lr
    4432:	bf00      	nop
    4434:	000082e0 	.word	0x000082e0
    4438:	00007fd0 	.word	0x00007fd0
    443c:	40048000 	.word	0x40048000

00004440 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4440:	b084      	sub	sp, #16
    4442:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4444:	4b06      	ldr	r3, [pc, #24]	; (4460 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4446:	685b      	ldr	r3, [r3, #4]
    4448:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    444a:	9b03      	ldr	r3, [sp, #12]
    444c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4450:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4452:	4a03      	ldr	r2, [pc, #12]	; (4460 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4454:	9b03      	ldr	r3, [sp, #12]
    4456:	6053      	str	r3, [r2, #4]
}
    4458:	bf00      	nop
    445a:	b004      	add	sp, #16
    445c:	4770      	bx	lr
    445e:	bf00      	nop
    4460:	40048000 	.word	0x40048000

00004464 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4464:	b084      	sub	sp, #16
    4466:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4468:	9b01      	ldr	r3, [sp, #4]
    446a:	685b      	ldr	r3, [r3, #4]
    446c:	4a0a      	ldr	r2, [pc, #40]	; (4498 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    446e:	5cd3      	ldrb	r3, [r2, r3]
    4470:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4472:	4b0a      	ldr	r3, [pc, #40]	; (449c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4474:	685b      	ldr	r3, [r3, #4]
    4476:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4478:	9b02      	ldr	r3, [sp, #8]
    447a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    447e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4480:	9b03      	ldr	r3, [sp, #12]
    4482:	011b      	lsls	r3, r3, #4
    4484:	9a02      	ldr	r2, [sp, #8]
    4486:	4313      	orrs	r3, r2
    4488:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    448a:	4a04      	ldr	r2, [pc, #16]	; (449c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    448c:	9b02      	ldr	r3, [sp, #8]
    448e:	6053      	str	r3, [r2, #4]
}
    4490:	bf00      	nop
    4492:	b004      	add	sp, #16
    4494:	4770      	bx	lr
    4496:	bf00      	nop
    4498:	000082e0 	.word	0x000082e0
    449c:	40048000 	.word	0x40048000

000044a0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44a0:	b084      	sub	sp, #16
    44a2:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    44a4:	9b01      	ldr	r3, [sp, #4]
    44a6:	681a      	ldr	r2, [r3, #0]
    44a8:	490f      	ldr	r1, [pc, #60]	; (44e8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    44aa:	4613      	mov	r3, r2
    44ac:	00db      	lsls	r3, r3, #3
    44ae:	4413      	add	r3, r2
    44b0:	440b      	add	r3, r1
    44b2:	3304      	adds	r3, #4
    44b4:	781b      	ldrb	r3, [r3, #0]
    44b6:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    44b8:	4a0c      	ldr	r2, [pc, #48]	; (44ec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    44ba:	9b03      	ldr	r3, [sp, #12]
    44bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    44c0:	490a      	ldr	r1, [pc, #40]	; (44ec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    44c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    44c6:	9b03      	ldr	r3, [sp, #12]
    44c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    44cc:	4a07      	ldr	r2, [pc, #28]	; (44ec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    44ce:	9b03      	ldr	r3, [sp, #12]
    44d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    44d4:	4905      	ldr	r1, [pc, #20]	; (44ec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    44d6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    44da:	9b03      	ldr	r3, [sp, #12]
    44dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    44e0:	bf00      	nop
    44e2:	b004      	add	sp, #16
    44e4:	4770      	bx	lr
    44e6:	bf00      	nop
    44e8:	00007fd0 	.word	0x00007fd0
    44ec:	40065000 	.word	0x40065000

000044f0 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44f0:	b086      	sub	sp, #24
    44f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    44f4:	9b01      	ldr	r3, [sp, #4]
    44f6:	681a      	ldr	r2, [r3, #0]
    44f8:	4912      	ldr	r1, [pc, #72]	; (4544 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    44fa:	4613      	mov	r3, r2
    44fc:	00db      	lsls	r3, r3, #3
    44fe:	4413      	add	r3, r2
    4500:	440b      	add	r3, r1
    4502:	3304      	adds	r3, #4
    4504:	781b      	ldrb	r3, [r3, #0]
    4506:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4508:	9b01      	ldr	r3, [sp, #4]
    450a:	685b      	ldr	r3, [r3, #4]
    450c:	4a0e      	ldr	r2, [pc, #56]	; (4548 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    450e:	5cd3      	ldrb	r3, [r2, r3]
    4510:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4512:	4a0e      	ldr	r2, [pc, #56]	; (454c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4514:	9b05      	ldr	r3, [sp, #20]
    4516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    451a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    451c:	9b03      	ldr	r3, [sp, #12]
    451e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4522:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4524:	9b04      	ldr	r3, [sp, #16]
    4526:	061b      	lsls	r3, r3, #24
    4528:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    452c:	9a03      	ldr	r2, [sp, #12]
    452e:	4313      	orrs	r3, r2
    4530:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4532:	4906      	ldr	r1, [pc, #24]	; (454c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4534:	9b05      	ldr	r3, [sp, #20]
    4536:	9a03      	ldr	r2, [sp, #12]
    4538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    453c:	bf00      	nop
    453e:	b006      	add	sp, #24
    4540:	4770      	bx	lr
    4542:	bf00      	nop
    4544:	00007fd0 	.word	0x00007fd0
    4548:	00008368 	.word	0x00008368
    454c:	40065000 	.word	0x40065000

00004550 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4550:	b084      	sub	sp, #16
    4552:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4554:	4b0b      	ldr	r3, [pc, #44]	; (4584 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4556:	7f1b      	ldrb	r3, [r3, #28]
    4558:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    455a:	4b0b      	ldr	r3, [pc, #44]	; (4588 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    455c:	685b      	ldr	r3, [r3, #4]
    455e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4560:	9b02      	ldr	r3, [sp, #8]
    4562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4566:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4568:	9b03      	ldr	r3, [sp, #12]
    456a:	031b      	lsls	r3, r3, #12
    456c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4570:	9a02      	ldr	r2, [sp, #8]
    4572:	4313      	orrs	r3, r2
    4574:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4576:	4a04      	ldr	r2, [pc, #16]	; (4588 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4578:	9b02      	ldr	r3, [sp, #8]
    457a:	6053      	str	r3, [r2, #4]
}
    457c:	bf00      	nop
    457e:	b004      	add	sp, #16
    4580:	4770      	bx	lr
    4582:	bf00      	nop
    4584:	000082e0 	.word	0x000082e0
    4588:	40048000 	.word	0x40048000

0000458c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    458c:	b084      	sub	sp, #16
    458e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4590:	9b01      	ldr	r3, [sp, #4]
    4592:	685b      	ldr	r3, [r3, #4]
    4594:	4a0b      	ldr	r2, [pc, #44]	; (45c4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4596:	5cd3      	ldrb	r3, [r2, r3]
    4598:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    459a:	4b0b      	ldr	r3, [pc, #44]	; (45c8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    459c:	685b      	ldr	r3, [r3, #4]
    459e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    45a0:	9b02      	ldr	r3, [sp, #8]
    45a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    45a6:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    45a8:	9b03      	ldr	r3, [sp, #12]
    45aa:	031b      	lsls	r3, r3, #12
    45ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    45b0:	9a02      	ldr	r2, [sp, #8]
    45b2:	4313      	orrs	r3, r2
    45b4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    45b6:	4a04      	ldr	r2, [pc, #16]	; (45c8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    45b8:	9b02      	ldr	r3, [sp, #8]
    45ba:	6053      	str	r3, [r2, #4]
}
    45bc:	bf00      	nop
    45be:	b004      	add	sp, #16
    45c0:	4770      	bx	lr
    45c2:	bf00      	nop
    45c4:	000082e0 	.word	0x000082e0
    45c8:	40048000 	.word	0x40048000

000045cc <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    45cc:	b500      	push	{lr}
    45ce:	b085      	sub	sp, #20
    45d0:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    45d2:	2300      	movs	r3, #0
    45d4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    45d8:	9b01      	ldr	r3, [sp, #4]
    45da:	2b00      	cmp	r3, #0
    45dc:	d037      	beq.n	464e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    45de:	2300      	movs	r3, #0
    45e0:	9303      	str	r3, [sp, #12]
    45e2:	e02b      	b.n	463c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    45e4:	4b29      	ldr	r3, [pc, #164]	; (468c <DisableSafeClock+0xc0>)
    45e6:	6819      	ldr	r1, [r3, #0]
    45e8:	9a03      	ldr	r2, [sp, #12]
    45ea:	4613      	mov	r3, r2
    45ec:	005b      	lsls	r3, r3, #1
    45ee:	4413      	add	r3, r2
    45f0:	009b      	lsls	r3, r3, #2
    45f2:	440b      	add	r3, r1
    45f4:	3314      	adds	r3, #20
    45f6:	681b      	ldr	r3, [r3, #0]
    45f8:	2b05      	cmp	r3, #5
    45fa:	d11c      	bne.n	4636 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    45fc:	2301      	movs	r3, #1
    45fe:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4602:	4b22      	ldr	r3, [pc, #136]	; (468c <DisableSafeClock+0xc0>)
    4604:	6819      	ldr	r1, [r3, #0]
    4606:	9a03      	ldr	r2, [sp, #12]
    4608:	4613      	mov	r3, r2
    460a:	005b      	lsls	r3, r3, #1
    460c:	4413      	add	r3, r2
    460e:	009b      	lsls	r3, r3, #2
    4610:	440b      	add	r3, r1
    4612:	3318      	adds	r3, #24
    4614:	881b      	ldrh	r3, [r3, #0]
    4616:	2b00      	cmp	r3, #0
    4618:	d118      	bne.n	464c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    461a:	4b1d      	ldr	r3, [pc, #116]	; (4690 <DisableSafeClock+0xc4>)
    461c:	791b      	ldrb	r3, [r3, #4]
    461e:	4619      	mov	r1, r3
    4620:	4a1c      	ldr	r2, [pc, #112]	; (4694 <DisableSafeClock+0xc8>)
    4622:	460b      	mov	r3, r1
    4624:	005b      	lsls	r3, r3, #1
    4626:	440b      	add	r3, r1
    4628:	009b      	lsls	r3, r3, #2
    462a:	4413      	add	r3, r2
    462c:	3308      	adds	r3, #8
    462e:	681b      	ldr	r3, [r3, #0]
    4630:	2005      	movs	r0, #5
    4632:	4798      	blx	r3
                }
                break;
    4634:	e00a      	b.n	464c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4636:	9b03      	ldr	r3, [sp, #12]
    4638:	3301      	adds	r3, #1
    463a:	9303      	str	r3, [sp, #12]
    463c:	4b13      	ldr	r3, [pc, #76]	; (468c <DisableSafeClock+0xc0>)
    463e:	681b      	ldr	r3, [r3, #0]
    4640:	7a1b      	ldrb	r3, [r3, #8]
    4642:	461a      	mov	r2, r3
    4644:	9b03      	ldr	r3, [sp, #12]
    4646:	4293      	cmp	r3, r2
    4648:	d3cc      	bcc.n	45e4 <DisableSafeClock+0x18>
    464a:	e000      	b.n	464e <DisableSafeClock+0x82>
                break;
    464c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    464e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4652:	f083 0301 	eor.w	r3, r3, #1
    4656:	b2db      	uxtb	r3, r3
    4658:	2b00      	cmp	r3, #0
    465a:	d013      	beq.n	4684 <DisableSafeClock+0xb8>
    465c:	4b0e      	ldr	r3, [pc, #56]	; (4698 <DisableSafeClock+0xcc>)
    465e:	781b      	ldrb	r3, [r3, #0]
    4660:	f083 0301 	eor.w	r3, r3, #1
    4664:	b2db      	uxtb	r3, r3
    4666:	2b00      	cmp	r3, #0
    4668:	d00c      	beq.n	4684 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    466a:	4b09      	ldr	r3, [pc, #36]	; (4690 <DisableSafeClock+0xc4>)
    466c:	791b      	ldrb	r3, [r3, #4]
    466e:	4619      	mov	r1, r3
    4670:	4a08      	ldr	r2, [pc, #32]	; (4694 <DisableSafeClock+0xc8>)
    4672:	460b      	mov	r3, r1
    4674:	005b      	lsls	r3, r3, #1
    4676:	440b      	add	r3, r1
    4678:	009b      	lsls	r3, r3, #2
    467a:	4413      	add	r3, r2
    467c:	3308      	adds	r3, #8
    467e:	681b      	ldr	r3, [r3, #0]
    4680:	2005      	movs	r0, #5
    4682:	4798      	blx	r3
    }
}
    4684:	bf00      	nop
    4686:	b005      	add	sp, #20
    4688:	f85d fb04 	ldr.w	pc, [sp], #4
    468c:	1fff8bc0 	.word	0x1fff8bc0
    4690:	00007f60 	.word	0x00007f60
    4694:	00008590 	.word	0x00008590
    4698:	1fff8b20 	.word	0x1fff8b20

0000469c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    469c:	4b06      	ldr	r3, [pc, #24]	; (46b8 <SetFircToResetValue_TrustedCall+0x1c>)
    469e:	2200      	movs	r2, #0
    46a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    46a4:	4b04      	ldr	r3, [pc, #16]	; (46b8 <SetFircToResetValue_TrustedCall+0x1c>)
    46a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    46aa:	4a03      	ldr	r2, [pc, #12]	; (46b8 <SetFircToResetValue_TrustedCall+0x1c>)
    46ac:	f043 0301 	orr.w	r3, r3, #1
    46b0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    46b4:	bf00      	nop
    46b6:	4770      	bx	lr
    46b8:	40064000 	.word	0x40064000

000046bc <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    46bc:	b084      	sub	sp, #16
    46be:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    46c0:	2303      	movs	r3, #3
    46c2:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    46c4:	2300      	movs	r3, #0
    46c6:	9302      	str	r3, [sp, #8]
    46c8:	e028      	b.n	471c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    46ca:	9b01      	ldr	r3, [sp, #4]
    46cc:	9a02      	ldr	r2, [sp, #8]
    46ce:	320d      	adds	r2, #13
    46d0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    46d4:	2b28      	cmp	r3, #40	; 0x28
    46d6:	d10b      	bne.n	46f0 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    46d8:	9a01      	ldr	r2, [sp, #4]
    46da:	9b02      	ldr	r3, [sp, #8]
    46dc:	330d      	adds	r3, #13
    46de:	00db      	lsls	r3, r3, #3
    46e0:	4413      	add	r3, r2
    46e2:	685b      	ldr	r3, [r3, #4]
    46e4:	4a2b      	ldr	r2, [pc, #172]	; (4794 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    46e6:	5cd3      	ldrb	r3, [r2, r3]
    46e8:	011b      	lsls	r3, r3, #4
    46ea:	9a03      	ldr	r2, [sp, #12]
    46ec:	4313      	orrs	r3, r2
    46ee:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    46f0:	9b01      	ldr	r3, [sp, #4]
    46f2:	9a02      	ldr	r2, [sp, #8]
    46f4:	320d      	adds	r2, #13
    46f6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    46fa:	2b29      	cmp	r3, #41	; 0x29
    46fc:	d10b      	bne.n	4716 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    46fe:	9a01      	ldr	r2, [sp, #4]
    4700:	9b02      	ldr	r3, [sp, #8]
    4702:	330d      	adds	r3, #13
    4704:	00db      	lsls	r3, r3, #3
    4706:	4413      	add	r3, r2
    4708:	685b      	ldr	r3, [r3, #4]
    470a:	4a23      	ldr	r2, [pc, #140]	; (4798 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    470c:	5cd3      	ldrb	r3, [r2, r3]
    470e:	009b      	lsls	r3, r3, #2
    4710:	9a03      	ldr	r2, [sp, #12]
    4712:	4313      	orrs	r3, r2
    4714:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4716:	9b02      	ldr	r3, [sp, #8]
    4718:	3301      	adds	r3, #1
    471a:	9302      	str	r3, [sp, #8]
    471c:	9b01      	ldr	r3, [sp, #4]
    471e:	7adb      	ldrb	r3, [r3, #11]
    4720:	461a      	mov	r2, r3
    4722:	9b02      	ldr	r3, [sp, #8]
    4724:	4293      	cmp	r3, r2
    4726:	d3d0      	bcc.n	46ca <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4728:	2300      	movs	r3, #0
    472a:	9302      	str	r3, [sp, #8]
    472c:	e026      	b.n	477c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    472e:	9a01      	ldr	r2, [sp, #4]
    4730:	9b02      	ldr	r3, [sp, #8]
    4732:	334e      	adds	r3, #78	; 0x4e
    4734:	00db      	lsls	r3, r3, #3
    4736:	4413      	add	r3, r2
    4738:	685b      	ldr	r3, [r3, #4]
    473a:	2b12      	cmp	r3, #18
    473c:	d109      	bne.n	4752 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    473e:	9a01      	ldr	r2, [sp, #4]
    4740:	9b02      	ldr	r3, [sp, #8]
    4742:	334e      	adds	r3, #78	; 0x4e
    4744:	00db      	lsls	r3, r3, #3
    4746:	4413      	add	r3, r2
    4748:	891b      	ldrh	r3, [r3, #8]
    474a:	005b      	lsls	r3, r3, #1
    474c:	9a03      	ldr	r2, [sp, #12]
    474e:	4313      	orrs	r3, r2
    4750:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4752:	9a01      	ldr	r2, [sp, #4]
    4754:	9b02      	ldr	r3, [sp, #8]
    4756:	334e      	adds	r3, #78	; 0x4e
    4758:	00db      	lsls	r3, r3, #3
    475a:	4413      	add	r3, r2
    475c:	685b      	ldr	r3, [r3, #4]
    475e:	2b13      	cmp	r3, #19
    4760:	d109      	bne.n	4776 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4762:	9a01      	ldr	r2, [sp, #4]
    4764:	9b02      	ldr	r3, [sp, #8]
    4766:	334e      	adds	r3, #78	; 0x4e
    4768:	00db      	lsls	r3, r3, #3
    476a:	4413      	add	r3, r2
    476c:	891b      	ldrh	r3, [r3, #8]
    476e:	461a      	mov	r2, r3
    4770:	9b03      	ldr	r3, [sp, #12]
    4772:	4313      	orrs	r3, r2
    4774:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4776:	9b02      	ldr	r3, [sp, #8]
    4778:	3301      	adds	r3, #1
    477a:	9302      	str	r3, [sp, #8]
    477c:	9b01      	ldr	r3, [sp, #4]
    477e:	7c1b      	ldrb	r3, [r3, #16]
    4780:	461a      	mov	r2, r3
    4782:	9b02      	ldr	r3, [sp, #8]
    4784:	4293      	cmp	r3, r2
    4786:	d3d2      	bcc.n	472e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4788:	4a04      	ldr	r2, [pc, #16]	; (479c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    478a:	9b03      	ldr	r3, [sp, #12]
    478c:	6113      	str	r3, [r2, #16]
}
    478e:	bf00      	nop
    4790:	b004      	add	sp, #16
    4792:	4770      	bx	lr
    4794:	000082e0 	.word	0x000082e0
    4798:	00008398 	.word	0x00008398
    479c:	40048000 	.word	0x40048000

000047a0 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    47a0:	b500      	push	{lr}
    47a2:	b089      	sub	sp, #36	; 0x24
    47a4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    47a6:	2300      	movs	r3, #0
    47a8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    47ac:	4a21      	ldr	r2, [pc, #132]	; (4834 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    47ae:	9b01      	ldr	r3, [sp, #4]
    47b0:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    47b2:	4b21      	ldr	r3, [pc, #132]	; (4838 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    47b4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    47b8:	f003 0301 	and.w	r3, r3, #1
    47bc:	2b00      	cmp	r3, #0
    47be:	d12e      	bne.n	481e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    47c0:	4b1e      	ldr	r3, [pc, #120]	; (483c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    47c2:	2200      	movs	r2, #0
    47c4:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    47c6:	f7ff ff69 	bl	469c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    47ca:	aa03      	add	r2, sp, #12
    47cc:	a904      	add	r1, sp, #16
    47ce:	a805      	add	r0, sp, #20
    47d0:	f24c 3350 	movw	r3, #50000	; 0xc350
    47d4:	f7fe f8ae 	bl	2934 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    47d8:	4b17      	ldr	r3, [pc, #92]	; (4838 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    47da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    47de:	0e1b      	lsrs	r3, r3, #24
    47e0:	f003 0301 	and.w	r3, r3, #1
    47e4:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    47e6:	9a03      	ldr	r2, [sp, #12]
    47e8:	a904      	add	r1, sp, #16
    47ea:	ab05      	add	r3, sp, #20
    47ec:	4618      	mov	r0, r3
    47ee:	f7fe f8bb 	bl	2968 <Clock_Ip_TimeoutExpired>
    47f2:	4603      	mov	r3, r0
    47f4:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    47f8:	9b06      	ldr	r3, [sp, #24]
    47fa:	2b00      	cmp	r3, #0
    47fc:	d106      	bne.n	480c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    47fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4802:	f083 0301 	eor.w	r3, r3, #1
    4806:	b2db      	uxtb	r3, r3
    4808:	2b00      	cmp	r3, #0
    480a:	d1e5      	bne.n	47d8 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    480c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4810:	2b00      	cmp	r3, #0
    4812:	d007      	beq.n	4824 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4814:	2105      	movs	r1, #5
    4816:	2001      	movs	r0, #1
    4818:	f7fe f87c 	bl	2914 <Clock_Ip_ReportClockErrors>
    481c:	e002      	b.n	4824 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    481e:	4b07      	ldr	r3, [pc, #28]	; (483c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4820:	2201      	movs	r2, #1
    4822:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4824:	9801      	ldr	r0, [sp, #4]
    4826:	f7ff ff49 	bl	46bc <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    482a:	bf00      	nop
    482c:	b009      	add	sp, #36	; 0x24
    482e:	f85d fb04 	ldr.w	pc, [sp], #4
    4832:	bf00      	nop
    4834:	1fff8bc0 	.word	0x1fff8bc0
    4838:	40064000 	.word	0x40064000
    483c:	1fff8b20 	.word	0x1fff8b20

00004840 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4840:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4842:	2300      	movs	r3, #0
    4844:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4846:	4b29      	ldr	r3, [pc, #164]	; (48ec <getFircConfig+0xac>)
    4848:	681b      	ldr	r3, [r3, #0]
    484a:	2b00      	cmp	r3, #0
    484c:	d024      	beq.n	4898 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    484e:	2300      	movs	r3, #0
    4850:	9301      	str	r3, [sp, #4]
    4852:	e01a      	b.n	488a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4854:	4b25      	ldr	r3, [pc, #148]	; (48ec <getFircConfig+0xac>)
    4856:	6819      	ldr	r1, [r3, #0]
    4858:	9a01      	ldr	r2, [sp, #4]
    485a:	4613      	mov	r3, r2
    485c:	005b      	lsls	r3, r3, #1
    485e:	4413      	add	r3, r2
    4860:	009b      	lsls	r3, r3, #2
    4862:	440b      	add	r3, r1
    4864:	3314      	adds	r3, #20
    4866:	681b      	ldr	r3, [r3, #0]
    4868:	2b05      	cmp	r3, #5
    486a:	d10b      	bne.n	4884 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    486c:	4b1f      	ldr	r3, [pc, #124]	; (48ec <getFircConfig+0xac>)
    486e:	6819      	ldr	r1, [r3, #0]
    4870:	9a01      	ldr	r2, [sp, #4]
    4872:	4613      	mov	r3, r2
    4874:	005b      	lsls	r3, r3, #1
    4876:	4413      	add	r3, r2
    4878:	009b      	lsls	r3, r3, #2
    487a:	3310      	adds	r3, #16
    487c:	440b      	add	r3, r1
    487e:	3304      	adds	r3, #4
    4880:	9300      	str	r3, [sp, #0]
                break;
    4882:	e009      	b.n	4898 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4884:	9b01      	ldr	r3, [sp, #4]
    4886:	3301      	adds	r3, #1
    4888:	9301      	str	r3, [sp, #4]
    488a:	4b18      	ldr	r3, [pc, #96]	; (48ec <getFircConfig+0xac>)
    488c:	681b      	ldr	r3, [r3, #0]
    488e:	7a1b      	ldrb	r3, [r3, #8]
    4890:	461a      	mov	r2, r3
    4892:	9b01      	ldr	r3, [sp, #4]
    4894:	4293      	cmp	r3, r2
    4896:	d3dd      	bcc.n	4854 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4898:	9b00      	ldr	r3, [sp, #0]
    489a:	2b00      	cmp	r3, #0
    489c:	d121      	bne.n	48e2 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    489e:	4b14      	ldr	r3, [pc, #80]	; (48f0 <getFircConfig+0xb0>)
    48a0:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    48a2:	4b13      	ldr	r3, [pc, #76]	; (48f0 <getFircConfig+0xb0>)
    48a4:	2205      	movs	r2, #5
    48a6:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    48a8:	4b12      	ldr	r3, [pc, #72]	; (48f4 <getFircConfig+0xb4>)
    48aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48ae:	b29b      	uxth	r3, r3
    48b0:	f003 0301 	and.w	r3, r3, #1
    48b4:	b29a      	uxth	r2, r3
    48b6:	4b0e      	ldr	r3, [pc, #56]	; (48f0 <getFircConfig+0xb0>)
    48b8:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    48ba:	4b0e      	ldr	r3, [pc, #56]	; (48f4 <getFircConfig+0xb4>)
    48bc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    48c0:	b2db      	uxtb	r3, r3
    48c2:	f003 0303 	and.w	r3, r3, #3
    48c6:	b2da      	uxtb	r2, r3
    48c8:	4b09      	ldr	r3, [pc, #36]	; (48f0 <getFircConfig+0xb0>)
    48ca:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    48cc:	4b09      	ldr	r3, [pc, #36]	; (48f4 <getFircConfig+0xb4>)
    48ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48d2:	b2db      	uxtb	r3, r3
    48d4:	10db      	asrs	r3, r3, #3
    48d6:	b2db      	uxtb	r3, r3
    48d8:	f003 0301 	and.w	r3, r3, #1
    48dc:	b2da      	uxtb	r2, r3
    48de:	4b04      	ldr	r3, [pc, #16]	; (48f0 <getFircConfig+0xb0>)
    48e0:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    48e2:	9b00      	ldr	r3, [sp, #0]
}
    48e4:	4618      	mov	r0, r3
    48e6:	b002      	add	sp, #8
    48e8:	4770      	bx	lr
    48ea:	bf00      	nop
    48ec:	1fff8bc0 	.word	0x1fff8bc0
    48f0:	1fff8c2c 	.word	0x1fff8c2c
    48f4:	40064000 	.word	0x40064000

000048f8 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    48f8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    48fa:	2300      	movs	r3, #0
    48fc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    48fe:	4b20      	ldr	r3, [pc, #128]	; (4980 <getSoscConfig+0x88>)
    4900:	681b      	ldr	r3, [r3, #0]
    4902:	2b00      	cmp	r3, #0
    4904:	d024      	beq.n	4950 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4906:	2300      	movs	r3, #0
    4908:	9301      	str	r3, [sp, #4]
    490a:	e01a      	b.n	4942 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    490c:	4b1c      	ldr	r3, [pc, #112]	; (4980 <getSoscConfig+0x88>)
    490e:	6819      	ldr	r1, [r3, #0]
    4910:	9a01      	ldr	r2, [sp, #4]
    4912:	4613      	mov	r3, r2
    4914:	009b      	lsls	r3, r3, #2
    4916:	4413      	add	r3, r2
    4918:	009b      	lsls	r3, r3, #2
    491a:	440b      	add	r3, r1
    491c:	332c      	adds	r3, #44	; 0x2c
    491e:	681b      	ldr	r3, [r3, #0]
    4920:	2b08      	cmp	r3, #8
    4922:	d10b      	bne.n	493c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4924:	4b16      	ldr	r3, [pc, #88]	; (4980 <getSoscConfig+0x88>)
    4926:	6819      	ldr	r1, [r3, #0]
    4928:	9a01      	ldr	r2, [sp, #4]
    492a:	4613      	mov	r3, r2
    492c:	009b      	lsls	r3, r3, #2
    492e:	4413      	add	r3, r2
    4930:	009b      	lsls	r3, r3, #2
    4932:	3328      	adds	r3, #40	; 0x28
    4934:	440b      	add	r3, r1
    4936:	3304      	adds	r3, #4
    4938:	9300      	str	r3, [sp, #0]
                break;
    493a:	e009      	b.n	4950 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    493c:	9b01      	ldr	r3, [sp, #4]
    493e:	3301      	adds	r3, #1
    4940:	9301      	str	r3, [sp, #4]
    4942:	4b0f      	ldr	r3, [pc, #60]	; (4980 <getSoscConfig+0x88>)
    4944:	681b      	ldr	r3, [r3, #0]
    4946:	7a5b      	ldrb	r3, [r3, #9]
    4948:	461a      	mov	r2, r3
    494a:	9b01      	ldr	r3, [sp, #4]
    494c:	4293      	cmp	r3, r2
    494e:	d3dd      	bcc.n	490c <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4950:	9b00      	ldr	r3, [sp, #0]
    4952:	2b00      	cmp	r3, #0
    4954:	d110      	bne.n	4978 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4956:	4b0b      	ldr	r3, [pc, #44]	; (4984 <getSoscConfig+0x8c>)
    4958:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    495a:	4b0a      	ldr	r3, [pc, #40]	; (4984 <getSoscConfig+0x8c>)
    495c:	2208      	movs	r2, #8
    495e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4960:	4b09      	ldr	r3, [pc, #36]	; (4988 <getSoscConfig+0x90>)
    4962:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4966:	b29b      	uxth	r3, r3
    4968:	f003 0301 	and.w	r3, r3, #1
    496c:	b29a      	uxth	r2, r3
    496e:	4b05      	ldr	r3, [pc, #20]	; (4984 <getSoscConfig+0x8c>)
    4970:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4972:	4b04      	ldr	r3, [pc, #16]	; (4984 <getSoscConfig+0x8c>)
    4974:	4a05      	ldr	r2, [pc, #20]	; (498c <getSoscConfig+0x94>)
    4976:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4978:	9b00      	ldr	r3, [sp, #0]
}
    497a:	4618      	mov	r0, r3
    497c:	b002      	add	sp, #8
    497e:	4770      	bx	lr
    4980:	1fff8bc0 	.word	0x1fff8bc0
    4984:	1fff8c38 	.word	0x1fff8c38
    4988:	40064000 	.word	0x40064000
    498c:	02625a00 	.word	0x02625a00

00004990 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4990:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4992:	2300      	movs	r3, #0
    4994:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4996:	4b28      	ldr	r3, [pc, #160]	; (4a38 <getSpllConfig+0xa8>)
    4998:	681b      	ldr	r3, [r3, #0]
    499a:	2b00      	cmp	r3, #0
    499c:	d023      	beq.n	49e6 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    499e:	2300      	movs	r3, #0
    49a0:	9301      	str	r3, [sp, #4]
    49a2:	e019      	b.n	49d8 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    49a4:	4b24      	ldr	r3, [pc, #144]	; (4a38 <getSpllConfig+0xa8>)
    49a6:	6819      	ldr	r1, [r3, #0]
    49a8:	9a01      	ldr	r2, [sp, #4]
    49aa:	4613      	mov	r3, r2
    49ac:	009b      	lsls	r3, r3, #2
    49ae:	4413      	add	r3, r2
    49b0:	00db      	lsls	r3, r3, #3
    49b2:	440b      	add	r3, r1
    49b4:	3340      	adds	r3, #64	; 0x40
    49b6:	681b      	ldr	r3, [r3, #0]
    49b8:	2b09      	cmp	r3, #9
    49ba:	d10a      	bne.n	49d2 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    49bc:	4b1e      	ldr	r3, [pc, #120]	; (4a38 <getSpllConfig+0xa8>)
    49be:	6819      	ldr	r1, [r3, #0]
    49c0:	9a01      	ldr	r2, [sp, #4]
    49c2:	4613      	mov	r3, r2
    49c4:	009b      	lsls	r3, r3, #2
    49c6:	4413      	add	r3, r2
    49c8:	00db      	lsls	r3, r3, #3
    49ca:	3340      	adds	r3, #64	; 0x40
    49cc:	440b      	add	r3, r1
    49ce:	9300      	str	r3, [sp, #0]
                break;
    49d0:	e009      	b.n	49e6 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    49d2:	9b01      	ldr	r3, [sp, #4]
    49d4:	3301      	adds	r3, #1
    49d6:	9301      	str	r3, [sp, #4]
    49d8:	4b17      	ldr	r3, [pc, #92]	; (4a38 <getSpllConfig+0xa8>)
    49da:	681b      	ldr	r3, [r3, #0]
    49dc:	7a9b      	ldrb	r3, [r3, #10]
    49de:	461a      	mov	r2, r3
    49e0:	9b01      	ldr	r3, [sp, #4]
    49e2:	4293      	cmp	r3, r2
    49e4:	d3de      	bcc.n	49a4 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    49e6:	9b00      	ldr	r3, [sp, #0]
    49e8:	2b00      	cmp	r3, #0
    49ea:	d121      	bne.n	4a30 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    49ec:	4b13      	ldr	r3, [pc, #76]	; (4a3c <getSpllConfig+0xac>)
    49ee:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    49f0:	4b12      	ldr	r3, [pc, #72]	; (4a3c <getSpllConfig+0xac>)
    49f2:	2209      	movs	r2, #9
    49f4:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    49f6:	4b12      	ldr	r3, [pc, #72]	; (4a40 <getSpllConfig+0xb0>)
    49f8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    49fc:	b29b      	uxth	r3, r3
    49fe:	f003 0301 	and.w	r3, r3, #1
    4a02:	b29a      	uxth	r2, r3
    4a04:	4b0d      	ldr	r3, [pc, #52]	; (4a3c <getSpllConfig+0xac>)
    4a06:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4a08:	4b0d      	ldr	r3, [pc, #52]	; (4a40 <getSpllConfig+0xb0>)
    4a0a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4a0e:	0a1b      	lsrs	r3, r3, #8
    4a10:	b2db      	uxtb	r3, r3
    4a12:	f003 0307 	and.w	r3, r3, #7
    4a16:	b2da      	uxtb	r2, r3
    4a18:	4b08      	ldr	r3, [pc, #32]	; (4a3c <getSpllConfig+0xac>)
    4a1a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4a1c:	4b08      	ldr	r3, [pc, #32]	; (4a40 <getSpllConfig+0xb0>)
    4a1e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4a22:	0c1b      	lsrs	r3, r3, #16
    4a24:	b2db      	uxtb	r3, r3
    4a26:	f003 031f 	and.w	r3, r3, #31
    4a2a:	b2da      	uxtb	r2, r3
    4a2c:	4b03      	ldr	r3, [pc, #12]	; (4a3c <getSpllConfig+0xac>)
    4a2e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4a30:	9b00      	ldr	r3, [sp, #0]
}
    4a32:	4618      	mov	r0, r3
    4a34:	b002      	add	sp, #8
    4a36:	4770      	bx	lr
    4a38:	1fff8bc0 	.word	0x1fff8bc0
    4a3c:	1fff8c4c 	.word	0x1fff8c4c
    4a40:	40064000 	.word	0x40064000

00004a44 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4a44:	b086      	sub	sp, #24
    4a46:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4a48:	2300      	movs	r3, #0
    4a4a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4a4c:	9b01      	ldr	r3, [sp, #4]
    4a4e:	2b1b      	cmp	r3, #27
    4a50:	d00f      	beq.n	4a72 <getSelectorConfig+0x2e>
    4a52:	9b01      	ldr	r3, [sp, #4]
    4a54:	2b1b      	cmp	r3, #27
    4a56:	d80f      	bhi.n	4a78 <getSelectorConfig+0x34>
    4a58:	9b01      	ldr	r3, [sp, #4]
    4a5a:	2b19      	cmp	r3, #25
    4a5c:	d003      	beq.n	4a66 <getSelectorConfig+0x22>
    4a5e:	9b01      	ldr	r3, [sp, #4]
    4a60:	2b1a      	cmp	r3, #26
    4a62:	d003      	beq.n	4a6c <getSelectorConfig+0x28>
    4a64:	e008      	b.n	4a78 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4a66:	2300      	movs	r3, #0
    4a68:	9304      	str	r3, [sp, #16]
            break;
    4a6a:	e008      	b.n	4a7e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4a6c:	2301      	movs	r3, #1
    4a6e:	9304      	str	r3, [sp, #16]
            break;
    4a70:	e005      	b.n	4a7e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4a72:	2302      	movs	r3, #2
    4a74:	9304      	str	r3, [sp, #16]
            break;
    4a76:	e002      	b.n	4a7e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4a78:	2300      	movs	r3, #0
    4a7a:	9304      	str	r3, [sp, #16]
            break;
    4a7c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4a7e:	4b36      	ldr	r3, [pc, #216]	; (4b58 <getSelectorConfig+0x114>)
    4a80:	681b      	ldr	r3, [r3, #0]
    4a82:	2b00      	cmp	r3, #0
    4a84:	d01d      	beq.n	4ac2 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4a86:	2300      	movs	r3, #0
    4a88:	9303      	str	r3, [sp, #12]
    4a8a:	e013      	b.n	4ab4 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4a8c:	4b32      	ldr	r3, [pc, #200]	; (4b58 <getSelectorConfig+0x114>)
    4a8e:	681b      	ldr	r3, [r3, #0]
    4a90:	9a03      	ldr	r2, [sp, #12]
    4a92:	320d      	adds	r2, #13
    4a94:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4a98:	9a01      	ldr	r2, [sp, #4]
    4a9a:	429a      	cmp	r2, r3
    4a9c:	d107      	bne.n	4aae <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4a9e:	4b2e      	ldr	r3, [pc, #184]	; (4b58 <getSelectorConfig+0x114>)
    4aa0:	681a      	ldr	r2, [r3, #0]
    4aa2:	9b03      	ldr	r3, [sp, #12]
    4aa4:	330d      	adds	r3, #13
    4aa6:	00db      	lsls	r3, r3, #3
    4aa8:	4413      	add	r3, r2
    4aaa:	9305      	str	r3, [sp, #20]
                break;
    4aac:	e009      	b.n	4ac2 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4aae:	9b03      	ldr	r3, [sp, #12]
    4ab0:	3301      	adds	r3, #1
    4ab2:	9303      	str	r3, [sp, #12]
    4ab4:	4b28      	ldr	r3, [pc, #160]	; (4b58 <getSelectorConfig+0x114>)
    4ab6:	681b      	ldr	r3, [r3, #0]
    4ab8:	7adb      	ldrb	r3, [r3, #11]
    4aba:	461a      	mov	r2, r3
    4abc:	9b03      	ldr	r3, [sp, #12]
    4abe:	4293      	cmp	r3, r2
    4ac0:	d3e4      	bcc.n	4a8c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ac2:	9b05      	ldr	r3, [sp, #20]
    4ac4:	2b00      	cmp	r3, #0
    4ac6:	d140      	bne.n	4b4a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4ac8:	9b04      	ldr	r3, [sp, #16]
    4aca:	00db      	lsls	r3, r3, #3
    4acc:	4a23      	ldr	r2, [pc, #140]	; (4b5c <getSelectorConfig+0x118>)
    4ace:	4413      	add	r3, r2
    4ad0:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4ad2:	4922      	ldr	r1, [pc, #136]	; (4b5c <getSelectorConfig+0x118>)
    4ad4:	9b04      	ldr	r3, [sp, #16]
    4ad6:	9a01      	ldr	r2, [sp, #4]
    4ad8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4adc:	9b01      	ldr	r3, [sp, #4]
    4ade:	2b1b      	cmp	r3, #27
    4ae0:	d025      	beq.n	4b2e <getSelectorConfig+0xea>
    4ae2:	9b01      	ldr	r3, [sp, #4]
    4ae4:	2b1b      	cmp	r3, #27
    4ae6:	d832      	bhi.n	4b4e <getSelectorConfig+0x10a>
    4ae8:	9b01      	ldr	r3, [sp, #4]
    4aea:	2b19      	cmp	r3, #25
    4aec:	d003      	beq.n	4af6 <getSelectorConfig+0xb2>
    4aee:	9b01      	ldr	r3, [sp, #4]
    4af0:	2b1a      	cmp	r3, #26
    4af2:	d00e      	beq.n	4b12 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4af4:	e02b      	b.n	4b4e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4af6:	4b1a      	ldr	r3, [pc, #104]	; (4b60 <getSelectorConfig+0x11c>)
    4af8:	695b      	ldr	r3, [r3, #20]
    4afa:	0e1b      	lsrs	r3, r3, #24
    4afc:	f003 030f 	and.w	r3, r3, #15
    4b00:	4a18      	ldr	r2, [pc, #96]	; (4b64 <getSelectorConfig+0x120>)
    4b02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4b06:	4915      	ldr	r1, [pc, #84]	; (4b5c <getSelectorConfig+0x118>)
    4b08:	9b04      	ldr	r3, [sp, #16]
    4b0a:	00db      	lsls	r3, r3, #3
    4b0c:	440b      	add	r3, r1
    4b0e:	605a      	str	r2, [r3, #4]
                break;
    4b10:	e01e      	b.n	4b50 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4b12:	4b13      	ldr	r3, [pc, #76]	; (4b60 <getSelectorConfig+0x11c>)
    4b14:	699b      	ldr	r3, [r3, #24]
    4b16:	0e1b      	lsrs	r3, r3, #24
    4b18:	f003 030f 	and.w	r3, r3, #15
    4b1c:	4a11      	ldr	r2, [pc, #68]	; (4b64 <getSelectorConfig+0x120>)
    4b1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4b22:	490e      	ldr	r1, [pc, #56]	; (4b5c <getSelectorConfig+0x118>)
    4b24:	9b04      	ldr	r3, [sp, #16]
    4b26:	00db      	lsls	r3, r3, #3
    4b28:	440b      	add	r3, r1
    4b2a:	605a      	str	r2, [r3, #4]
                break;
    4b2c:	e010      	b.n	4b50 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4b2e:	4b0c      	ldr	r3, [pc, #48]	; (4b60 <getSelectorConfig+0x11c>)
    4b30:	69db      	ldr	r3, [r3, #28]
    4b32:	0e1b      	lsrs	r3, r3, #24
    4b34:	f003 030f 	and.w	r3, r3, #15
    4b38:	4a0a      	ldr	r2, [pc, #40]	; (4b64 <getSelectorConfig+0x120>)
    4b3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4b3e:	4907      	ldr	r1, [pc, #28]	; (4b5c <getSelectorConfig+0x118>)
    4b40:	9b04      	ldr	r3, [sp, #16]
    4b42:	00db      	lsls	r3, r3, #3
    4b44:	440b      	add	r3, r1
    4b46:	605a      	str	r2, [r3, #4]
                break;
    4b48:	e002      	b.n	4b50 <getSelectorConfig+0x10c>
        }
    }
    4b4a:	bf00      	nop
    4b4c:	e000      	b.n	4b50 <getSelectorConfig+0x10c>
                break;
    4b4e:	bf00      	nop

    return ReturnValue;
    4b50:	9b05      	ldr	r3, [sp, #20]
}
    4b52:	4618      	mov	r0, r3
    4b54:	b006      	add	sp, #24
    4b56:	4770      	bx	lr
    4b58:	1fff8bc0 	.word	0x1fff8bc0
    4b5c:	1fff8c74 	.word	0x1fff8c74
    4b60:	40064000 	.word	0x40064000
    4b64:	00008660 	.word	0x00008660

00004b68 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4b68:	b086      	sub	sp, #24
    4b6a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4b6c:	2300      	movs	r3, #0
    4b6e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4b70:	2300      	movs	r3, #0
    4b72:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4b74:	9b01      	ldr	r3, [sp, #4]
    4b76:	2b1f      	cmp	r3, #31
    4b78:	d00f      	beq.n	4b9a <getCoreDividerConfig+0x32>
    4b7a:	9b01      	ldr	r3, [sp, #4]
    4b7c:	2b1f      	cmp	r3, #31
    4b7e:	d80f      	bhi.n	4ba0 <getCoreDividerConfig+0x38>
    4b80:	9b01      	ldr	r3, [sp, #4]
    4b82:	2b1d      	cmp	r3, #29
    4b84:	d003      	beq.n	4b8e <getCoreDividerConfig+0x26>
    4b86:	9b01      	ldr	r3, [sp, #4]
    4b88:	2b1e      	cmp	r3, #30
    4b8a:	d003      	beq.n	4b94 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4b8c:	e008      	b.n	4ba0 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4b8e:	2300      	movs	r3, #0
    4b90:	9304      	str	r3, [sp, #16]
            break;
    4b92:	e006      	b.n	4ba2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4b94:	2301      	movs	r3, #1
    4b96:	9304      	str	r3, [sp, #16]
            break;
    4b98:	e003      	b.n	4ba2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4b9a:	2302      	movs	r3, #2
    4b9c:	9304      	str	r3, [sp, #16]
            break;
    4b9e:	e000      	b.n	4ba2 <getCoreDividerConfig+0x3a>
                break;
    4ba0:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4ba2:	4b41      	ldr	r3, [pc, #260]	; (4ca8 <getCoreDividerConfig+0x140>)
    4ba4:	681b      	ldr	r3, [r3, #0]
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	d026      	beq.n	4bf8 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4baa:	2300      	movs	r3, #0
    4bac:	9303      	str	r3, [sp, #12]
    4bae:	e01c      	b.n	4bea <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4bb0:	4b3d      	ldr	r3, [pc, #244]	; (4ca8 <getCoreDividerConfig+0x140>)
    4bb2:	6819      	ldr	r1, [r3, #0]
    4bb4:	9a03      	ldr	r2, [sp, #12]
    4bb6:	4613      	mov	r3, r2
    4bb8:	005b      	lsls	r3, r3, #1
    4bba:	4413      	add	r3, r2
    4bbc:	009b      	lsls	r3, r3, #2
    4bbe:	440b      	add	r3, r1
    4bc0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4bc4:	681b      	ldr	r3, [r3, #0]
    4bc6:	9a01      	ldr	r2, [sp, #4]
    4bc8:	429a      	cmp	r2, r3
    4bca:	d10b      	bne.n	4be4 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4bcc:	4b36      	ldr	r3, [pc, #216]	; (4ca8 <getCoreDividerConfig+0x140>)
    4bce:	6819      	ldr	r1, [r3, #0]
    4bd0:	9a03      	ldr	r2, [sp, #12]
    4bd2:	4613      	mov	r3, r2
    4bd4:	005b      	lsls	r3, r3, #1
    4bd6:	4413      	add	r3, r2
    4bd8:	009b      	lsls	r3, r3, #2
    4bda:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4bde:	440b      	add	r3, r1
    4be0:	9305      	str	r3, [sp, #20]
                break;
    4be2:	e009      	b.n	4bf8 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4be4:	9b03      	ldr	r3, [sp, #12]
    4be6:	3301      	adds	r3, #1
    4be8:	9303      	str	r3, [sp, #12]
    4bea:	4b2f      	ldr	r3, [pc, #188]	; (4ca8 <getCoreDividerConfig+0x140>)
    4bec:	681b      	ldr	r3, [r3, #0]
    4bee:	7b1b      	ldrb	r3, [r3, #12]
    4bf0:	461a      	mov	r2, r3
    4bf2:	9b03      	ldr	r3, [sp, #12]
    4bf4:	4293      	cmp	r3, r2
    4bf6:	d3db      	bcc.n	4bb0 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4bf8:	9b05      	ldr	r3, [sp, #20]
    4bfa:	2b00      	cmp	r3, #0
    4bfc:	d14d      	bne.n	4c9a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4bfe:	9a04      	ldr	r2, [sp, #16]
    4c00:	4613      	mov	r3, r2
    4c02:	005b      	lsls	r3, r3, #1
    4c04:	4413      	add	r3, r2
    4c06:	009b      	lsls	r3, r3, #2
    4c08:	4a28      	ldr	r2, [pc, #160]	; (4cac <getCoreDividerConfig+0x144>)
    4c0a:	4413      	add	r3, r2
    4c0c:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4c0e:	4927      	ldr	r1, [pc, #156]	; (4cac <getCoreDividerConfig+0x144>)
    4c10:	9a04      	ldr	r2, [sp, #16]
    4c12:	4613      	mov	r3, r2
    4c14:	005b      	lsls	r3, r3, #1
    4c16:	4413      	add	r3, r2
    4c18:	009b      	lsls	r3, r3, #2
    4c1a:	440b      	add	r3, r1
    4c1c:	9a01      	ldr	r2, [sp, #4]
    4c1e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4c20:	9b01      	ldr	r3, [sp, #4]
    4c22:	2b1f      	cmp	r3, #31
    4c24:	d029      	beq.n	4c7a <getCoreDividerConfig+0x112>
    4c26:	9b01      	ldr	r3, [sp, #4]
    4c28:	2b1f      	cmp	r3, #31
    4c2a:	d838      	bhi.n	4c9e <getCoreDividerConfig+0x136>
    4c2c:	9b01      	ldr	r3, [sp, #4]
    4c2e:	2b1d      	cmp	r3, #29
    4c30:	d003      	beq.n	4c3a <getCoreDividerConfig+0xd2>
    4c32:	9b01      	ldr	r3, [sp, #4]
    4c34:	2b1e      	cmp	r3, #30
    4c36:	d010      	beq.n	4c5a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4c38:	e031      	b.n	4c9e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4c3a:	4b1d      	ldr	r3, [pc, #116]	; (4cb0 <getCoreDividerConfig+0x148>)
    4c3c:	695b      	ldr	r3, [r3, #20]
    4c3e:	0c1b      	lsrs	r3, r3, #16
    4c40:	f003 030f 	and.w	r3, r3, #15
    4c44:	1c59      	adds	r1, r3, #1
    4c46:	4819      	ldr	r0, [pc, #100]	; (4cac <getCoreDividerConfig+0x144>)
    4c48:	9a04      	ldr	r2, [sp, #16]
    4c4a:	4613      	mov	r3, r2
    4c4c:	005b      	lsls	r3, r3, #1
    4c4e:	4413      	add	r3, r2
    4c50:	009b      	lsls	r3, r3, #2
    4c52:	4403      	add	r3, r0
    4c54:	3304      	adds	r3, #4
    4c56:	6019      	str	r1, [r3, #0]
                break;
    4c58:	e022      	b.n	4ca0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4c5a:	4b15      	ldr	r3, [pc, #84]	; (4cb0 <getCoreDividerConfig+0x148>)
    4c5c:	699b      	ldr	r3, [r3, #24]
    4c5e:	0c1b      	lsrs	r3, r3, #16
    4c60:	f003 030f 	and.w	r3, r3, #15
    4c64:	1c59      	adds	r1, r3, #1
    4c66:	4811      	ldr	r0, [pc, #68]	; (4cac <getCoreDividerConfig+0x144>)
    4c68:	9a04      	ldr	r2, [sp, #16]
    4c6a:	4613      	mov	r3, r2
    4c6c:	005b      	lsls	r3, r3, #1
    4c6e:	4413      	add	r3, r2
    4c70:	009b      	lsls	r3, r3, #2
    4c72:	4403      	add	r3, r0
    4c74:	3304      	adds	r3, #4
    4c76:	6019      	str	r1, [r3, #0]
                break;
    4c78:	e012      	b.n	4ca0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4c7a:	4b0d      	ldr	r3, [pc, #52]	; (4cb0 <getCoreDividerConfig+0x148>)
    4c7c:	69db      	ldr	r3, [r3, #28]
    4c7e:	0c1b      	lsrs	r3, r3, #16
    4c80:	f003 030f 	and.w	r3, r3, #15
    4c84:	1c59      	adds	r1, r3, #1
    4c86:	4809      	ldr	r0, [pc, #36]	; (4cac <getCoreDividerConfig+0x144>)
    4c88:	9a04      	ldr	r2, [sp, #16]
    4c8a:	4613      	mov	r3, r2
    4c8c:	005b      	lsls	r3, r3, #1
    4c8e:	4413      	add	r3, r2
    4c90:	009b      	lsls	r3, r3, #2
    4c92:	4403      	add	r3, r0
    4c94:	3304      	adds	r3, #4
    4c96:	6019      	str	r1, [r3, #0]
                break;
    4c98:	e002      	b.n	4ca0 <getCoreDividerConfig+0x138>
        }
    }
    4c9a:	bf00      	nop
    4c9c:	e000      	b.n	4ca0 <getCoreDividerConfig+0x138>
                break;
    4c9e:	bf00      	nop

    return ReturnValue;
    4ca0:	9b05      	ldr	r3, [sp, #20]
}
    4ca2:	4618      	mov	r0, r3
    4ca4:	b006      	add	sp, #24
    4ca6:	4770      	bx	lr
    4ca8:	1fff8bc0 	.word	0x1fff8bc0
    4cac:	1fff8c8c 	.word	0x1fff8c8c
    4cb0:	40064000 	.word	0x40064000

00004cb4 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4cb4:	b086      	sub	sp, #24
    4cb6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4cb8:	2300      	movs	r3, #0
    4cba:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4cbc:	2300      	movs	r3, #0
    4cbe:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4cc0:	9b01      	ldr	r3, [sp, #4]
    4cc2:	2b23      	cmp	r3, #35	; 0x23
    4cc4:	d00f      	beq.n	4ce6 <getBusDividerConfig+0x32>
    4cc6:	9b01      	ldr	r3, [sp, #4]
    4cc8:	2b23      	cmp	r3, #35	; 0x23
    4cca:	d80f      	bhi.n	4cec <getBusDividerConfig+0x38>
    4ccc:	9b01      	ldr	r3, [sp, #4]
    4cce:	2b21      	cmp	r3, #33	; 0x21
    4cd0:	d003      	beq.n	4cda <getBusDividerConfig+0x26>
    4cd2:	9b01      	ldr	r3, [sp, #4]
    4cd4:	2b22      	cmp	r3, #34	; 0x22
    4cd6:	d003      	beq.n	4ce0 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4cd8:	e008      	b.n	4cec <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4cda:	2300      	movs	r3, #0
    4cdc:	9304      	str	r3, [sp, #16]
            break;
    4cde:	e006      	b.n	4cee <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4ce0:	2301      	movs	r3, #1
    4ce2:	9304      	str	r3, [sp, #16]
            break;
    4ce4:	e003      	b.n	4cee <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4ce6:	2302      	movs	r3, #2
    4ce8:	9304      	str	r3, [sp, #16]
            break;
    4cea:	e000      	b.n	4cee <getBusDividerConfig+0x3a>
                break;
    4cec:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4cee:	4b41      	ldr	r3, [pc, #260]	; (4df4 <getBusDividerConfig+0x140>)
    4cf0:	681b      	ldr	r3, [r3, #0]
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d026      	beq.n	4d44 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4cf6:	2300      	movs	r3, #0
    4cf8:	9303      	str	r3, [sp, #12]
    4cfa:	e01c      	b.n	4d36 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4cfc:	4b3d      	ldr	r3, [pc, #244]	; (4df4 <getBusDividerConfig+0x140>)
    4cfe:	6819      	ldr	r1, [r3, #0]
    4d00:	9a03      	ldr	r2, [sp, #12]
    4d02:	4613      	mov	r3, r2
    4d04:	005b      	lsls	r3, r3, #1
    4d06:	4413      	add	r3, r2
    4d08:	009b      	lsls	r3, r3, #2
    4d0a:	440b      	add	r3, r1
    4d0c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4d10:	681b      	ldr	r3, [r3, #0]
    4d12:	9a01      	ldr	r2, [sp, #4]
    4d14:	429a      	cmp	r2, r3
    4d16:	d10b      	bne.n	4d30 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4d18:	4b36      	ldr	r3, [pc, #216]	; (4df4 <getBusDividerConfig+0x140>)
    4d1a:	6819      	ldr	r1, [r3, #0]
    4d1c:	9a03      	ldr	r2, [sp, #12]
    4d1e:	4613      	mov	r3, r2
    4d20:	005b      	lsls	r3, r3, #1
    4d22:	4413      	add	r3, r2
    4d24:	009b      	lsls	r3, r3, #2
    4d26:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4d2a:	440b      	add	r3, r1
    4d2c:	9305      	str	r3, [sp, #20]
                break;
    4d2e:	e009      	b.n	4d44 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4d30:	9b03      	ldr	r3, [sp, #12]
    4d32:	3301      	adds	r3, #1
    4d34:	9303      	str	r3, [sp, #12]
    4d36:	4b2f      	ldr	r3, [pc, #188]	; (4df4 <getBusDividerConfig+0x140>)
    4d38:	681b      	ldr	r3, [r3, #0]
    4d3a:	7b1b      	ldrb	r3, [r3, #12]
    4d3c:	461a      	mov	r2, r3
    4d3e:	9b03      	ldr	r3, [sp, #12]
    4d40:	4293      	cmp	r3, r2
    4d42:	d3db      	bcc.n	4cfc <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d44:	9b05      	ldr	r3, [sp, #20]
    4d46:	2b00      	cmp	r3, #0
    4d48:	d14d      	bne.n	4de6 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4d4a:	9a04      	ldr	r2, [sp, #16]
    4d4c:	4613      	mov	r3, r2
    4d4e:	005b      	lsls	r3, r3, #1
    4d50:	4413      	add	r3, r2
    4d52:	009b      	lsls	r3, r3, #2
    4d54:	4a28      	ldr	r2, [pc, #160]	; (4df8 <getBusDividerConfig+0x144>)
    4d56:	4413      	add	r3, r2
    4d58:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4d5a:	4927      	ldr	r1, [pc, #156]	; (4df8 <getBusDividerConfig+0x144>)
    4d5c:	9a04      	ldr	r2, [sp, #16]
    4d5e:	4613      	mov	r3, r2
    4d60:	005b      	lsls	r3, r3, #1
    4d62:	4413      	add	r3, r2
    4d64:	009b      	lsls	r3, r3, #2
    4d66:	440b      	add	r3, r1
    4d68:	9a01      	ldr	r2, [sp, #4]
    4d6a:	601a      	str	r2, [r3, #0]
        switch(Name)
    4d6c:	9b01      	ldr	r3, [sp, #4]
    4d6e:	2b23      	cmp	r3, #35	; 0x23
    4d70:	d029      	beq.n	4dc6 <getBusDividerConfig+0x112>
    4d72:	9b01      	ldr	r3, [sp, #4]
    4d74:	2b23      	cmp	r3, #35	; 0x23
    4d76:	d838      	bhi.n	4dea <getBusDividerConfig+0x136>
    4d78:	9b01      	ldr	r3, [sp, #4]
    4d7a:	2b21      	cmp	r3, #33	; 0x21
    4d7c:	d003      	beq.n	4d86 <getBusDividerConfig+0xd2>
    4d7e:	9b01      	ldr	r3, [sp, #4]
    4d80:	2b22      	cmp	r3, #34	; 0x22
    4d82:	d010      	beq.n	4da6 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d84:	e031      	b.n	4dea <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4d86:	4b1d      	ldr	r3, [pc, #116]	; (4dfc <getBusDividerConfig+0x148>)
    4d88:	695b      	ldr	r3, [r3, #20]
    4d8a:	091b      	lsrs	r3, r3, #4
    4d8c:	f003 030f 	and.w	r3, r3, #15
    4d90:	1c59      	adds	r1, r3, #1
    4d92:	4819      	ldr	r0, [pc, #100]	; (4df8 <getBusDividerConfig+0x144>)
    4d94:	9a04      	ldr	r2, [sp, #16]
    4d96:	4613      	mov	r3, r2
    4d98:	005b      	lsls	r3, r3, #1
    4d9a:	4413      	add	r3, r2
    4d9c:	009b      	lsls	r3, r3, #2
    4d9e:	4403      	add	r3, r0
    4da0:	3304      	adds	r3, #4
    4da2:	6019      	str	r1, [r3, #0]
                break;
    4da4:	e022      	b.n	4dec <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4da6:	4b15      	ldr	r3, [pc, #84]	; (4dfc <getBusDividerConfig+0x148>)
    4da8:	699b      	ldr	r3, [r3, #24]
    4daa:	091b      	lsrs	r3, r3, #4
    4dac:	f003 030f 	and.w	r3, r3, #15
    4db0:	1c59      	adds	r1, r3, #1
    4db2:	4811      	ldr	r0, [pc, #68]	; (4df8 <getBusDividerConfig+0x144>)
    4db4:	9a04      	ldr	r2, [sp, #16]
    4db6:	4613      	mov	r3, r2
    4db8:	005b      	lsls	r3, r3, #1
    4dba:	4413      	add	r3, r2
    4dbc:	009b      	lsls	r3, r3, #2
    4dbe:	4403      	add	r3, r0
    4dc0:	3304      	adds	r3, #4
    4dc2:	6019      	str	r1, [r3, #0]
                break;
    4dc4:	e012      	b.n	4dec <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4dc6:	4b0d      	ldr	r3, [pc, #52]	; (4dfc <getBusDividerConfig+0x148>)
    4dc8:	69db      	ldr	r3, [r3, #28]
    4dca:	091b      	lsrs	r3, r3, #4
    4dcc:	f003 030f 	and.w	r3, r3, #15
    4dd0:	1c59      	adds	r1, r3, #1
    4dd2:	4809      	ldr	r0, [pc, #36]	; (4df8 <getBusDividerConfig+0x144>)
    4dd4:	9a04      	ldr	r2, [sp, #16]
    4dd6:	4613      	mov	r3, r2
    4dd8:	005b      	lsls	r3, r3, #1
    4dda:	4413      	add	r3, r2
    4ddc:	009b      	lsls	r3, r3, #2
    4dde:	4403      	add	r3, r0
    4de0:	3304      	adds	r3, #4
    4de2:	6019      	str	r1, [r3, #0]
                break;
    4de4:	e002      	b.n	4dec <getBusDividerConfig+0x138>
        }
    }
    4de6:	bf00      	nop
    4de8:	e000      	b.n	4dec <getBusDividerConfig+0x138>
                break;
    4dea:	bf00      	nop

    return ReturnValue;
    4dec:	9b05      	ldr	r3, [sp, #20]
}
    4dee:	4618      	mov	r0, r3
    4df0:	b006      	add	sp, #24
    4df2:	4770      	bx	lr
    4df4:	1fff8bc0 	.word	0x1fff8bc0
    4df8:	1fff8cb0 	.word	0x1fff8cb0
    4dfc:	40064000 	.word	0x40064000

00004e00 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4e00:	b086      	sub	sp, #24
    4e02:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4e04:	2300      	movs	r3, #0
    4e06:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4e08:	2300      	movs	r3, #0
    4e0a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4e0c:	9b01      	ldr	r3, [sp, #4]
    4e0e:	2b27      	cmp	r3, #39	; 0x27
    4e10:	d00f      	beq.n	4e32 <getSlowDividerConfig+0x32>
    4e12:	9b01      	ldr	r3, [sp, #4]
    4e14:	2b27      	cmp	r3, #39	; 0x27
    4e16:	d80f      	bhi.n	4e38 <getSlowDividerConfig+0x38>
    4e18:	9b01      	ldr	r3, [sp, #4]
    4e1a:	2b25      	cmp	r3, #37	; 0x25
    4e1c:	d003      	beq.n	4e26 <getSlowDividerConfig+0x26>
    4e1e:	9b01      	ldr	r3, [sp, #4]
    4e20:	2b26      	cmp	r3, #38	; 0x26
    4e22:	d003      	beq.n	4e2c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e24:	e008      	b.n	4e38 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e26:	2300      	movs	r3, #0
    4e28:	9304      	str	r3, [sp, #16]
            break;
    4e2a:	e006      	b.n	4e3a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e2c:	2301      	movs	r3, #1
    4e2e:	9304      	str	r3, [sp, #16]
            break;
    4e30:	e003      	b.n	4e3a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e32:	2302      	movs	r3, #2
    4e34:	9304      	str	r3, [sp, #16]
            break;
    4e36:	e000      	b.n	4e3a <getSlowDividerConfig+0x3a>
                break;
    4e38:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e3a:	4b40      	ldr	r3, [pc, #256]	; (4f3c <getSlowDividerConfig+0x13c>)
    4e3c:	681b      	ldr	r3, [r3, #0]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d026      	beq.n	4e90 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e42:	2300      	movs	r3, #0
    4e44:	9303      	str	r3, [sp, #12]
    4e46:	e01c      	b.n	4e82 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4e48:	4b3c      	ldr	r3, [pc, #240]	; (4f3c <getSlowDividerConfig+0x13c>)
    4e4a:	6819      	ldr	r1, [r3, #0]
    4e4c:	9a03      	ldr	r2, [sp, #12]
    4e4e:	4613      	mov	r3, r2
    4e50:	005b      	lsls	r3, r3, #1
    4e52:	4413      	add	r3, r2
    4e54:	009b      	lsls	r3, r3, #2
    4e56:	440b      	add	r3, r1
    4e58:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e5c:	681b      	ldr	r3, [r3, #0]
    4e5e:	9a01      	ldr	r2, [sp, #4]
    4e60:	429a      	cmp	r2, r3
    4e62:	d10b      	bne.n	4e7c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4e64:	4b35      	ldr	r3, [pc, #212]	; (4f3c <getSlowDividerConfig+0x13c>)
    4e66:	6819      	ldr	r1, [r3, #0]
    4e68:	9a03      	ldr	r2, [sp, #12]
    4e6a:	4613      	mov	r3, r2
    4e6c:	005b      	lsls	r3, r3, #1
    4e6e:	4413      	add	r3, r2
    4e70:	009b      	lsls	r3, r3, #2
    4e72:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e76:	440b      	add	r3, r1
    4e78:	9305      	str	r3, [sp, #20]
                break;
    4e7a:	e009      	b.n	4e90 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e7c:	9b03      	ldr	r3, [sp, #12]
    4e7e:	3301      	adds	r3, #1
    4e80:	9303      	str	r3, [sp, #12]
    4e82:	4b2e      	ldr	r3, [pc, #184]	; (4f3c <getSlowDividerConfig+0x13c>)
    4e84:	681b      	ldr	r3, [r3, #0]
    4e86:	7b1b      	ldrb	r3, [r3, #12]
    4e88:	461a      	mov	r2, r3
    4e8a:	9b03      	ldr	r3, [sp, #12]
    4e8c:	4293      	cmp	r3, r2
    4e8e:	d3db      	bcc.n	4e48 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e90:	9b05      	ldr	r3, [sp, #20]
    4e92:	2b00      	cmp	r3, #0
    4e94:	d14a      	bne.n	4f2c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4e96:	9a04      	ldr	r2, [sp, #16]
    4e98:	4613      	mov	r3, r2
    4e9a:	005b      	lsls	r3, r3, #1
    4e9c:	4413      	add	r3, r2
    4e9e:	009b      	lsls	r3, r3, #2
    4ea0:	4a27      	ldr	r2, [pc, #156]	; (4f40 <getSlowDividerConfig+0x140>)
    4ea2:	4413      	add	r3, r2
    4ea4:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    4ea6:	4926      	ldr	r1, [pc, #152]	; (4f40 <getSlowDividerConfig+0x140>)
    4ea8:	9a04      	ldr	r2, [sp, #16]
    4eaa:	4613      	mov	r3, r2
    4eac:	005b      	lsls	r3, r3, #1
    4eae:	4413      	add	r3, r2
    4eb0:	009b      	lsls	r3, r3, #2
    4eb2:	440b      	add	r3, r1
    4eb4:	9a01      	ldr	r2, [sp, #4]
    4eb6:	601a      	str	r2, [r3, #0]
        switch(Name)
    4eb8:	9b01      	ldr	r3, [sp, #4]
    4eba:	2b27      	cmp	r3, #39	; 0x27
    4ebc:	d027      	beq.n	4f0e <getSlowDividerConfig+0x10e>
    4ebe:	9b01      	ldr	r3, [sp, #4]
    4ec0:	2b27      	cmp	r3, #39	; 0x27
    4ec2:	d835      	bhi.n	4f30 <getSlowDividerConfig+0x130>
    4ec4:	9b01      	ldr	r3, [sp, #4]
    4ec6:	2b25      	cmp	r3, #37	; 0x25
    4ec8:	d003      	beq.n	4ed2 <getSlowDividerConfig+0xd2>
    4eca:	9b01      	ldr	r3, [sp, #4]
    4ecc:	2b26      	cmp	r3, #38	; 0x26
    4ece:	d00f      	beq.n	4ef0 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ed0:	e02e      	b.n	4f30 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    4ed2:	4b1c      	ldr	r3, [pc, #112]	; (4f44 <getSlowDividerConfig+0x144>)
    4ed4:	695b      	ldr	r3, [r3, #20]
    4ed6:	f003 030f 	and.w	r3, r3, #15
    4eda:	1c59      	adds	r1, r3, #1
    4edc:	4818      	ldr	r0, [pc, #96]	; (4f40 <getSlowDividerConfig+0x140>)
    4ede:	9a04      	ldr	r2, [sp, #16]
    4ee0:	4613      	mov	r3, r2
    4ee2:	005b      	lsls	r3, r3, #1
    4ee4:	4413      	add	r3, r2
    4ee6:	009b      	lsls	r3, r3, #2
    4ee8:	4403      	add	r3, r0
    4eea:	3304      	adds	r3, #4
    4eec:	6019      	str	r1, [r3, #0]
                break;
    4eee:	e020      	b.n	4f32 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4ef0:	4b14      	ldr	r3, [pc, #80]	; (4f44 <getSlowDividerConfig+0x144>)
    4ef2:	699b      	ldr	r3, [r3, #24]
    4ef4:	f003 030f 	and.w	r3, r3, #15
    4ef8:	1c59      	adds	r1, r3, #1
    4efa:	4811      	ldr	r0, [pc, #68]	; (4f40 <getSlowDividerConfig+0x140>)
    4efc:	9a04      	ldr	r2, [sp, #16]
    4efe:	4613      	mov	r3, r2
    4f00:	005b      	lsls	r3, r3, #1
    4f02:	4413      	add	r3, r2
    4f04:	009b      	lsls	r3, r3, #2
    4f06:	4403      	add	r3, r0
    4f08:	3304      	adds	r3, #4
    4f0a:	6019      	str	r1, [r3, #0]
                break;
    4f0c:	e011      	b.n	4f32 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    4f0e:	4b0d      	ldr	r3, [pc, #52]	; (4f44 <getSlowDividerConfig+0x144>)
    4f10:	69db      	ldr	r3, [r3, #28]
    4f12:	f003 030f 	and.w	r3, r3, #15
    4f16:	1c59      	adds	r1, r3, #1
    4f18:	4809      	ldr	r0, [pc, #36]	; (4f40 <getSlowDividerConfig+0x140>)
    4f1a:	9a04      	ldr	r2, [sp, #16]
    4f1c:	4613      	mov	r3, r2
    4f1e:	005b      	lsls	r3, r3, #1
    4f20:	4413      	add	r3, r2
    4f22:	009b      	lsls	r3, r3, #2
    4f24:	4403      	add	r3, r0
    4f26:	3304      	adds	r3, #4
    4f28:	6019      	str	r1, [r3, #0]
                break;
    4f2a:	e002      	b.n	4f32 <getSlowDividerConfig+0x132>
        }
    }
    4f2c:	bf00      	nop
    4f2e:	e000      	b.n	4f32 <getSlowDividerConfig+0x132>
                break;
    4f30:	bf00      	nop

    return ReturnValue;
    4f32:	9b05      	ldr	r3, [sp, #20]
}
    4f34:	4618      	mov	r0, r3
    4f36:	b006      	add	sp, #24
    4f38:	4770      	bx	lr
    4f3a:	bf00      	nop
    4f3c:	1fff8bc0 	.word	0x1fff8bc0
    4f40:	1fff8cd4 	.word	0x1fff8cd4
    4f44:	40064000 	.word	0x40064000

00004f48 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4f48:	b500      	push	{lr}
    4f4a:	b083      	sub	sp, #12
    4f4c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    4f4e:	4b64      	ldr	r3, [pc, #400]	; (50e0 <Clock_Ip_ClockInitializeObjects+0x198>)
    4f50:	781b      	ldrb	r3, [r3, #0]
    4f52:	f083 0301 	eor.w	r3, r3, #1
    4f56:	b2db      	uxtb	r3, r3
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d05b      	beq.n	5014 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    4f5c:	4b60      	ldr	r3, [pc, #384]	; (50e0 <Clock_Ip_ClockInitializeObjects+0x198>)
    4f5e:	2201      	movs	r2, #1
    4f60:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    4f62:	4b60      	ldr	r3, [pc, #384]	; (50e4 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4f64:	785b      	ldrb	r3, [r3, #1]
    4f66:	461a      	mov	r2, r3
    4f68:	4613      	mov	r3, r2
    4f6a:	009b      	lsls	r3, r3, #2
    4f6c:	4413      	add	r3, r2
    4f6e:	009b      	lsls	r3, r3, #2
    4f70:	4a5d      	ldr	r2, [pc, #372]	; (50e8 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    4f72:	4413      	add	r3, r2
    4f74:	4a5d      	ldr	r2, [pc, #372]	; (50ec <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4f76:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4f78:	4b5d      	ldr	r3, [pc, #372]	; (50f0 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    4f7a:	785b      	ldrb	r3, [r3, #1]
    4f7c:	461a      	mov	r2, r3
    4f7e:	4613      	mov	r3, r2
    4f80:	009b      	lsls	r3, r3, #2
    4f82:	4413      	add	r3, r2
    4f84:	009b      	lsls	r3, r3, #2
    4f86:	4a5b      	ldr	r2, [pc, #364]	; (50f4 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4f88:	4413      	add	r3, r2
    4f8a:	4a5b      	ldr	r2, [pc, #364]	; (50f8 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    4f8c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    4f8e:	4b5b      	ldr	r3, [pc, #364]	; (50fc <Clock_Ip_ClockInitializeObjects+0x1b4>)
    4f90:	791b      	ldrb	r3, [r3, #4]
    4f92:	461a      	mov	r2, r3
    4f94:	4613      	mov	r3, r2
    4f96:	005b      	lsls	r3, r3, #1
    4f98:	4413      	add	r3, r2
    4f9a:	009b      	lsls	r3, r3, #2
    4f9c:	4a58      	ldr	r2, [pc, #352]	; (5100 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    4f9e:	4413      	add	r3, r2
    4fa0:	4a58      	ldr	r2, [pc, #352]	; (5104 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    4fa2:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    4fa4:	4b58      	ldr	r3, [pc, #352]	; (5108 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4fa6:	795b      	ldrb	r3, [r3, #5]
    4fa8:	00db      	lsls	r3, r3, #3
    4faa:	4a58      	ldr	r2, [pc, #352]	; (510c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4fac:	4413      	add	r3, r2
    4fae:	4a58      	ldr	r2, [pc, #352]	; (5110 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    4fb0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    4fb2:	4b55      	ldr	r3, [pc, #340]	; (5108 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4fb4:	79db      	ldrb	r3, [r3, #7]
    4fb6:	00db      	lsls	r3, r3, #3
    4fb8:	4a54      	ldr	r2, [pc, #336]	; (510c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4fba:	4413      	add	r3, r2
    4fbc:	4a55      	ldr	r2, [pc, #340]	; (5114 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    4fbe:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    4fc0:	4b55      	ldr	r3, [pc, #340]	; (5118 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4fc2:	799b      	ldrb	r3, [r3, #6]
    4fc4:	009b      	lsls	r3, r3, #2
    4fc6:	4a55      	ldr	r2, [pc, #340]	; (511c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4fc8:	4413      	add	r3, r2
    4fca:	4a55      	ldr	r2, [pc, #340]	; (5120 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    4fcc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    4fce:	4b52      	ldr	r3, [pc, #328]	; (5118 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4fd0:	7a1b      	ldrb	r3, [r3, #8]
    4fd2:	009b      	lsls	r3, r3, #2
    4fd4:	4a51      	ldr	r2, [pc, #324]	; (511c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4fd6:	4413      	add	r3, r2
    4fd8:	4a52      	ldr	r2, [pc, #328]	; (5124 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    4fda:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    4fdc:	4b4e      	ldr	r3, [pc, #312]	; (5118 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4fde:	7a5b      	ldrb	r3, [r3, #9]
    4fe0:	009b      	lsls	r3, r3, #2
    4fe2:	4a4e      	ldr	r2, [pc, #312]	; (511c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4fe4:	4413      	add	r3, r2
    4fe6:	4a50      	ldr	r2, [pc, #320]	; (5128 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4fe8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    4fea:	4b4b      	ldr	r3, [pc, #300]	; (5118 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4fec:	7adb      	ldrb	r3, [r3, #11]
    4fee:	009b      	lsls	r3, r3, #2
    4ff0:	4a4a      	ldr	r2, [pc, #296]	; (511c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4ff2:	4413      	add	r3, r2
    4ff4:	4a4d      	ldr	r2, [pc, #308]	; (512c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4ff6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4ff8:	4b47      	ldr	r3, [pc, #284]	; (5118 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4ffa:	7b1b      	ldrb	r3, [r3, #12]
    4ffc:	009b      	lsls	r3, r3, #2
    4ffe:	4a47      	ldr	r2, [pc, #284]	; (511c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5000:	4413      	add	r3, r2
    5002:	4a4b      	ldr	r2, [pc, #300]	; (5130 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5004:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5006:	4b44      	ldr	r3, [pc, #272]	; (5118 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5008:	7b9b      	ldrb	r3, [r3, #14]
    500a:	009b      	lsls	r3, r3, #2
    500c:	4a43      	ldr	r2, [pc, #268]	; (511c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    500e:	4413      	add	r3, r2
    5010:	4a48      	ldr	r2, [pc, #288]	; (5134 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5012:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5014:	4b48      	ldr	r3, [pc, #288]	; (5138 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5016:	781b      	ldrb	r3, [r3, #0]
    5018:	2b00      	cmp	r3, #0
    501a:	d002      	beq.n	5022 <Clock_Ip_ClockInitializeObjects+0xda>
    501c:	9b01      	ldr	r3, [sp, #4]
    501e:	2b00      	cmp	r3, #0
    5020:	d003      	beq.n	502a <Clock_Ip_ClockInitializeObjects+0xe2>
    5022:	4b46      	ldr	r3, [pc, #280]	; (513c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5024:	781b      	ldrb	r3, [r3, #0]
    5026:	2b00      	cmp	r3, #0
    5028:	d056      	beq.n	50d8 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    502a:	f7ff fc09 	bl	4840 <getFircConfig>
    502e:	4603      	mov	r3, r0
    5030:	4a43      	ldr	r2, [pc, #268]	; (5140 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5032:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5034:	f7ff fc60 	bl	48f8 <getSoscConfig>
    5038:	4603      	mov	r3, r0
    503a:	4a42      	ldr	r2, [pc, #264]	; (5144 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    503c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    503e:	f7ff fca7 	bl	4990 <getSpllConfig>
    5042:	4603      	mov	r3, r0
    5044:	4a40      	ldr	r2, [pc, #256]	; (5148 <Clock_Ip_ClockInitializeObjects+0x200>)
    5046:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5048:	2019      	movs	r0, #25
    504a:	f7ff fcfb 	bl	4a44 <getSelectorConfig>
    504e:	4603      	mov	r3, r0
    5050:	4a3e      	ldr	r2, [pc, #248]	; (514c <Clock_Ip_ClockInitializeObjects+0x204>)
    5052:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5054:	201a      	movs	r0, #26
    5056:	f7ff fcf5 	bl	4a44 <getSelectorConfig>
    505a:	4603      	mov	r3, r0
    505c:	4a3c      	ldr	r2, [pc, #240]	; (5150 <Clock_Ip_ClockInitializeObjects+0x208>)
    505e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5060:	201b      	movs	r0, #27
    5062:	f7ff fcef 	bl	4a44 <getSelectorConfig>
    5066:	4603      	mov	r3, r0
    5068:	4a3a      	ldr	r2, [pc, #232]	; (5154 <Clock_Ip_ClockInitializeObjects+0x20c>)
    506a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    506c:	201d      	movs	r0, #29
    506e:	f7ff fd7b 	bl	4b68 <getCoreDividerConfig>
    5072:	4603      	mov	r3, r0
    5074:	4a38      	ldr	r2, [pc, #224]	; (5158 <Clock_Ip_ClockInitializeObjects+0x210>)
    5076:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5078:	201e      	movs	r0, #30
    507a:	f7ff fd75 	bl	4b68 <getCoreDividerConfig>
    507e:	4603      	mov	r3, r0
    5080:	4a36      	ldr	r2, [pc, #216]	; (515c <Clock_Ip_ClockInitializeObjects+0x214>)
    5082:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5084:	201f      	movs	r0, #31
    5086:	f7ff fd6f 	bl	4b68 <getCoreDividerConfig>
    508a:	4603      	mov	r3, r0
    508c:	4a34      	ldr	r2, [pc, #208]	; (5160 <Clock_Ip_ClockInitializeObjects+0x218>)
    508e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5090:	2021      	movs	r0, #33	; 0x21
    5092:	f7ff fe0f 	bl	4cb4 <getBusDividerConfig>
    5096:	4603      	mov	r3, r0
    5098:	4a32      	ldr	r2, [pc, #200]	; (5164 <Clock_Ip_ClockInitializeObjects+0x21c>)
    509a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    509c:	2022      	movs	r0, #34	; 0x22
    509e:	f7ff fe09 	bl	4cb4 <getBusDividerConfig>
    50a2:	4603      	mov	r3, r0
    50a4:	4a30      	ldr	r2, [pc, #192]	; (5168 <Clock_Ip_ClockInitializeObjects+0x220>)
    50a6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    50a8:	2023      	movs	r0, #35	; 0x23
    50aa:	f7ff fe03 	bl	4cb4 <getBusDividerConfig>
    50ae:	4603      	mov	r3, r0
    50b0:	4a2e      	ldr	r2, [pc, #184]	; (516c <Clock_Ip_ClockInitializeObjects+0x224>)
    50b2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    50b4:	2025      	movs	r0, #37	; 0x25
    50b6:	f7ff fea3 	bl	4e00 <getSlowDividerConfig>
    50ba:	4603      	mov	r3, r0
    50bc:	4a2c      	ldr	r2, [pc, #176]	; (5170 <Clock_Ip_ClockInitializeObjects+0x228>)
    50be:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    50c0:	2026      	movs	r0, #38	; 0x26
    50c2:	f7ff fe9d 	bl	4e00 <getSlowDividerConfig>
    50c6:	4603      	mov	r3, r0
    50c8:	4a2a      	ldr	r2, [pc, #168]	; (5174 <Clock_Ip_ClockInitializeObjects+0x22c>)
    50ca:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    50cc:	2027      	movs	r0, #39	; 0x27
    50ce:	f7ff fe97 	bl	4e00 <getSlowDividerConfig>
    50d2:	4603      	mov	r3, r0
    50d4:	4a28      	ldr	r2, [pc, #160]	; (5178 <Clock_Ip_ClockInitializeObjects+0x230>)
    50d6:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    50d8:	bf00      	nop
    50da:	b003      	add	sp, #12
    50dc:	f85d fb04 	ldr.w	pc, [sp], #4
    50e0:	1fff8cf8 	.word	0x1fff8cf8
    50e4:	00007f90 	.word	0x00007f90
    50e8:	000085dc 	.word	0x000085dc
    50ec:	1fff8bc4 	.word	0x1fff8bc4
    50f0:	00007f50 	.word	0x00007f50
    50f4:	00008524 	.word	0x00008524
    50f8:	1fff8bc8 	.word	0x1fff8bc8
    50fc:	00007f60 	.word	0x00007f60
    5100:	00008590 	.word	0x00008590
    5104:	1fff8bcc 	.word	0x1fff8bcc
    5108:	00007fa0 	.word	0x00007fa0
    510c:	00008608 	.word	0x00008608
    5110:	1fff8bd0 	.word	0x1fff8bd0
    5114:	1fff8c0c 	.word	0x1fff8c0c
    5118:	00007f30 	.word	0x00007f30
    511c:	000084e0 	.word	0x000084e0
    5120:	1fff8bd4 	.word	0x1fff8bd4
    5124:	1fff8c10 	.word	0x1fff8c10
    5128:	1fff8bd8 	.word	0x1fff8bd8
    512c:	1fff8c14 	.word	0x1fff8c14
    5130:	1fff8bdc 	.word	0x1fff8bdc
    5134:	1fff8c18 	.word	0x1fff8c18
    5138:	1fff8b21 	.word	0x1fff8b21
    513c:	1fff8b19 	.word	0x1fff8b19
    5140:	1fff8be0 	.word	0x1fff8be0
    5144:	1fff8be4 	.word	0x1fff8be4
    5148:	1fff8be8 	.word	0x1fff8be8
    514c:	1fff8bec 	.word	0x1fff8bec
    5150:	1fff8bf0 	.word	0x1fff8bf0
    5154:	1fff8c1c 	.word	0x1fff8c1c
    5158:	1fff8bf4 	.word	0x1fff8bf4
    515c:	1fff8bf8 	.word	0x1fff8bf8
    5160:	1fff8c20 	.word	0x1fff8c20
    5164:	1fff8bfc 	.word	0x1fff8bfc
    5168:	1fff8c00 	.word	0x1fff8c00
    516c:	1fff8c24 	.word	0x1fff8c24
    5170:	1fff8c04 	.word	0x1fff8c04
    5174:	1fff8c08 	.word	0x1fff8c08
    5178:	1fff8c28 	.word	0x1fff8c28

0000517c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    517c:	b500      	push	{lr}
    517e:	b083      	sub	sp, #12
    5180:	9001      	str	r0, [sp, #4]
    5182:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5184:	9b01      	ldr	r3, [sp, #4]
    5186:	2b03      	cmp	r3, #3
    5188:	f000 8090 	beq.w	52ac <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    518c:	9b01      	ldr	r3, [sp, #4]
    518e:	2b03      	cmp	r3, #3
    5190:	f200 80d3 	bhi.w	533a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5194:	9b01      	ldr	r3, [sp, #4]
    5196:	2b00      	cmp	r3, #0
    5198:	d040      	beq.n	521c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    519a:	9b01      	ldr	r3, [sp, #4]
    519c:	3b01      	subs	r3, #1
    519e:	2b01      	cmp	r3, #1
    51a0:	f200 80cb 	bhi.w	533a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    51a4:	9b00      	ldr	r3, [sp, #0]
    51a6:	2b00      	cmp	r3, #0
    51a8:	f040 80c9 	bne.w	533e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    51ac:	4b68      	ldr	r3, [pc, #416]	; (5350 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    51ae:	2200      	movs	r2, #0
    51b0:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    51b2:	4b68      	ldr	r3, [pc, #416]	; (5354 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    51b4:	681b      	ldr	r3, [r3, #0]
    51b6:	685b      	ldr	r3, [r3, #4]
    51b8:	4a67      	ldr	r2, [pc, #412]	; (5358 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    51ba:	6812      	ldr	r2, [r2, #0]
    51bc:	4610      	mov	r0, r2
    51be:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    51c0:	4b66      	ldr	r3, [pc, #408]	; (535c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    51c2:	681b      	ldr	r3, [r3, #0]
    51c4:	681b      	ldr	r3, [r3, #0]
    51c6:	4a66      	ldr	r2, [pc, #408]	; (5360 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    51c8:	6812      	ldr	r2, [r2, #0]
    51ca:	4610      	mov	r0, r2
    51cc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    51ce:	4b65      	ldr	r3, [pc, #404]	; (5364 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    51d0:	681b      	ldr	r3, [r3, #0]
    51d2:	681b      	ldr	r3, [r3, #0]
    51d4:	4a64      	ldr	r2, [pc, #400]	; (5368 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    51d6:	6812      	ldr	r2, [r2, #0]
    51d8:	4610      	mov	r0, r2
    51da:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    51dc:	4b63      	ldr	r3, [pc, #396]	; (536c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    51de:	681b      	ldr	r3, [r3, #0]
    51e0:	681b      	ldr	r3, [r3, #0]
    51e2:	4a63      	ldr	r2, [pc, #396]	; (5370 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    51e4:	6812      	ldr	r2, [r2, #0]
    51e6:	4610      	mov	r0, r2
    51e8:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    51ea:	4b62      	ldr	r3, [pc, #392]	; (5374 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    51ec:	681b      	ldr	r3, [r3, #0]
    51ee:	691b      	ldr	r3, [r3, #16]
    51f0:	4a61      	ldr	r2, [pc, #388]	; (5378 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    51f2:	6812      	ldr	r2, [r2, #0]
    51f4:	6812      	ldr	r2, [r2, #0]
    51f6:	4610      	mov	r0, r2
    51f8:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    51fa:	4b60      	ldr	r3, [pc, #384]	; (537c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    51fc:	681b      	ldr	r3, [r3, #0]
    51fe:	68db      	ldr	r3, [r3, #12]
    5200:	4a5f      	ldr	r2, [pc, #380]	; (5380 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5202:	6812      	ldr	r2, [r2, #0]
    5204:	6812      	ldr	r2, [r2, #0]
    5206:	4610      	mov	r0, r2
    5208:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    520a:	4b5e      	ldr	r3, [pc, #376]	; (5384 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    520c:	681b      	ldr	r3, [r3, #0]
    520e:	689b      	ldr	r3, [r3, #8]
    5210:	4a5d      	ldr	r2, [pc, #372]	; (5388 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5212:	6812      	ldr	r2, [r2, #0]
    5214:	6812      	ldr	r2, [r2, #0]
    5216:	4610      	mov	r0, r2
    5218:	4798      	blx	r3
            }
        }
        break;
    521a:	e090      	b.n	533e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    521c:	9b00      	ldr	r3, [sp, #0]
    521e:	2b02      	cmp	r3, #2
    5220:	f040 808f 	bne.w	5342 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5224:	4b4a      	ldr	r3, [pc, #296]	; (5350 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5226:	2201      	movs	r2, #1
    5228:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    522a:	4b56      	ldr	r3, [pc, #344]	; (5384 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    522c:	681b      	ldr	r3, [r3, #0]
    522e:	685b      	ldr	r3, [r3, #4]
    5230:	4a55      	ldr	r2, [pc, #340]	; (5388 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5232:	6812      	ldr	r2, [r2, #0]
    5234:	4610      	mov	r0, r2
    5236:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5238:	4b50      	ldr	r3, [pc, #320]	; (537c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    523a:	681b      	ldr	r3, [r3, #0]
    523c:	691b      	ldr	r3, [r3, #16]
    523e:	4a50      	ldr	r2, [pc, #320]	; (5380 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5240:	6812      	ldr	r2, [r2, #0]
    5242:	4610      	mov	r0, r2
    5244:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5246:	4b4d      	ldr	r3, [pc, #308]	; (537c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5248:	681b      	ldr	r3, [r3, #0]
    524a:	689b      	ldr	r3, [r3, #8]
    524c:	4a4c      	ldr	r2, [pc, #304]	; (5380 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    524e:	6812      	ldr	r2, [r2, #0]
    5250:	4610      	mov	r0, r2
    5252:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5254:	4b47      	ldr	r3, [pc, #284]	; (5374 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5256:	681b      	ldr	r3, [r3, #0]
    5258:	68db      	ldr	r3, [r3, #12]
    525a:	4a47      	ldr	r2, [pc, #284]	; (5378 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    525c:	6812      	ldr	r2, [r2, #0]
    525e:	4610      	mov	r0, r2
    5260:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5262:	4b44      	ldr	r3, [pc, #272]	; (5374 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5264:	681b      	ldr	r3, [r3, #0]
    5266:	689b      	ldr	r3, [r3, #8]
    5268:	4a43      	ldr	r2, [pc, #268]	; (5378 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    526a:	6812      	ldr	r2, [r2, #0]
    526c:	6812      	ldr	r2, [r2, #0]
    526e:	4610      	mov	r0, r2
    5270:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5272:	4b38      	ldr	r3, [pc, #224]	; (5354 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5274:	681b      	ldr	r3, [r3, #0]
    5276:	685b      	ldr	r3, [r3, #4]
    5278:	4a44      	ldr	r2, [pc, #272]	; (538c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    527a:	6812      	ldr	r2, [r2, #0]
    527c:	4610      	mov	r0, r2
    527e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5280:	4b36      	ldr	r3, [pc, #216]	; (535c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5282:	681b      	ldr	r3, [r3, #0]
    5284:	681b      	ldr	r3, [r3, #0]
    5286:	4a42      	ldr	r2, [pc, #264]	; (5390 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5288:	6812      	ldr	r2, [r2, #0]
    528a:	4610      	mov	r0, r2
    528c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    528e:	4b35      	ldr	r3, [pc, #212]	; (5364 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5290:	681b      	ldr	r3, [r3, #0]
    5292:	681b      	ldr	r3, [r3, #0]
    5294:	4a3f      	ldr	r2, [pc, #252]	; (5394 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5296:	6812      	ldr	r2, [r2, #0]
    5298:	4610      	mov	r0, r2
    529a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    529c:	4b33      	ldr	r3, [pc, #204]	; (536c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    529e:	681b      	ldr	r3, [r3, #0]
    52a0:	681b      	ldr	r3, [r3, #0]
    52a2:	4a3d      	ldr	r2, [pc, #244]	; (5398 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    52a4:	6812      	ldr	r2, [r2, #0]
    52a6:	4610      	mov	r0, r2
    52a8:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    52aa:	e04a      	b.n	5342 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    52ac:	9b00      	ldr	r3, [sp, #0]
    52ae:	2b02      	cmp	r3, #2
    52b0:	d149      	bne.n	5346 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    52b2:	4b27      	ldr	r3, [pc, #156]	; (5350 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    52b4:	2201      	movs	r2, #1
    52b6:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    52b8:	4b32      	ldr	r3, [pc, #200]	; (5384 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    52ba:	681b      	ldr	r3, [r3, #0]
    52bc:	685b      	ldr	r3, [r3, #4]
    52be:	4a32      	ldr	r2, [pc, #200]	; (5388 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    52c0:	6812      	ldr	r2, [r2, #0]
    52c2:	4610      	mov	r0, r2
    52c4:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    52c6:	4b2d      	ldr	r3, [pc, #180]	; (537c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    52c8:	681b      	ldr	r3, [r3, #0]
    52ca:	691b      	ldr	r3, [r3, #16]
    52cc:	4a2c      	ldr	r2, [pc, #176]	; (5380 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    52ce:	6812      	ldr	r2, [r2, #0]
    52d0:	4610      	mov	r0, r2
    52d2:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    52d4:	4b29      	ldr	r3, [pc, #164]	; (537c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    52d6:	681b      	ldr	r3, [r3, #0]
    52d8:	689b      	ldr	r3, [r3, #8]
    52da:	4a29      	ldr	r2, [pc, #164]	; (5380 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    52dc:	6812      	ldr	r2, [r2, #0]
    52de:	4610      	mov	r0, r2
    52e0:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    52e2:	4b24      	ldr	r3, [pc, #144]	; (5374 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    52e4:	681b      	ldr	r3, [r3, #0]
    52e6:	68db      	ldr	r3, [r3, #12]
    52e8:	4a23      	ldr	r2, [pc, #140]	; (5378 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    52ea:	6812      	ldr	r2, [r2, #0]
    52ec:	4610      	mov	r0, r2
    52ee:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    52f0:	4b20      	ldr	r3, [pc, #128]	; (5374 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    52f2:	681b      	ldr	r3, [r3, #0]
    52f4:	689b      	ldr	r3, [r3, #8]
    52f6:	4a20      	ldr	r2, [pc, #128]	; (5378 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    52f8:	6812      	ldr	r2, [r2, #0]
    52fa:	6812      	ldr	r2, [r2, #0]
    52fc:	4610      	mov	r0, r2
    52fe:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5300:	4b26      	ldr	r3, [pc, #152]	; (539c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5302:	681b      	ldr	r3, [r3, #0]
    5304:	685b      	ldr	r3, [r3, #4]
    5306:	4a26      	ldr	r2, [pc, #152]	; (53a0 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5308:	6812      	ldr	r2, [r2, #0]
    530a:	4610      	mov	r0, r2
    530c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    530e:	4b25      	ldr	r3, [pc, #148]	; (53a4 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5310:	681b      	ldr	r3, [r3, #0]
    5312:	681b      	ldr	r3, [r3, #0]
    5314:	4a24      	ldr	r2, [pc, #144]	; (53a8 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    5316:	6812      	ldr	r2, [r2, #0]
    5318:	4610      	mov	r0, r2
    531a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    531c:	4b23      	ldr	r3, [pc, #140]	; (53ac <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    531e:	681b      	ldr	r3, [r3, #0]
    5320:	681b      	ldr	r3, [r3, #0]
    5322:	4a23      	ldr	r2, [pc, #140]	; (53b0 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5324:	6812      	ldr	r2, [r2, #0]
    5326:	4610      	mov	r0, r2
    5328:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    532a:	4b22      	ldr	r3, [pc, #136]	; (53b4 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    532c:	681b      	ldr	r3, [r3, #0]
    532e:	681b      	ldr	r3, [r3, #0]
    5330:	4a21      	ldr	r2, [pc, #132]	; (53b8 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5332:	6812      	ldr	r2, [r2, #0]
    5334:	4610      	mov	r0, r2
    5336:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5338:	e005      	b.n	5346 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    533a:	bf00      	nop
    533c:	e004      	b.n	5348 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    533e:	bf00      	nop
    5340:	e002      	b.n	5348 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5342:	bf00      	nop
    5344:	e000      	b.n	5348 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5346:	bf00      	nop
    }

}
    5348:	bf00      	nop
    534a:	b003      	add	sp, #12
    534c:	f85d fb04 	ldr.w	pc, [sp], #4
    5350:	1fff8b21 	.word	0x1fff8b21
    5354:	1fff8bd0 	.word	0x1fff8bd0
    5358:	1fff8bf0 	.word	0x1fff8bf0
    535c:	1fff8bd4 	.word	0x1fff8bd4
    5360:	1fff8bf8 	.word	0x1fff8bf8
    5364:	1fff8bd8 	.word	0x1fff8bd8
    5368:	1fff8c00 	.word	0x1fff8c00
    536c:	1fff8bdc 	.word	0x1fff8bdc
    5370:	1fff8c08 	.word	0x1fff8c08
    5374:	1fff8bc4 	.word	0x1fff8bc4
    5378:	1fff8be8 	.word	0x1fff8be8
    537c:	1fff8bc8 	.word	0x1fff8bc8
    5380:	1fff8be4 	.word	0x1fff8be4
    5384:	1fff8bcc 	.word	0x1fff8bcc
    5388:	1fff8be0 	.word	0x1fff8be0
    538c:	1fff8bec 	.word	0x1fff8bec
    5390:	1fff8bf4 	.word	0x1fff8bf4
    5394:	1fff8bfc 	.word	0x1fff8bfc
    5398:	1fff8c04 	.word	0x1fff8c04
    539c:	1fff8c0c 	.word	0x1fff8c0c
    53a0:	1fff8c1c 	.word	0x1fff8c1c
    53a4:	1fff8c10 	.word	0x1fff8c10
    53a8:	1fff8c20 	.word	0x1fff8c20
    53ac:	1fff8c14 	.word	0x1fff8c14
    53b0:	1fff8c24 	.word	0x1fff8c24
    53b4:	1fff8c18 	.word	0x1fff8c18
    53b8:	1fff8c28 	.word	0x1fff8c28

000053bc <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    53bc:	b500      	push	{lr}
    53be:	b083      	sub	sp, #12
    53c0:	9001      	str	r0, [sp, #4]
    53c2:	9100      	str	r1, [sp, #0]
    switch(Command)
    53c4:	9b00      	ldr	r3, [sp, #0]
    53c6:	2b04      	cmp	r3, #4
    53c8:	d010      	beq.n	53ec <Clock_Ip_Command+0x30>
    53ca:	9b00      	ldr	r3, [sp, #0]
    53cc:	2b04      	cmp	r3, #4
    53ce:	d811      	bhi.n	53f4 <Clock_Ip_Command+0x38>
    53d0:	9b00      	ldr	r3, [sp, #0]
    53d2:	2b01      	cmp	r3, #1
    53d4:	d006      	beq.n	53e4 <Clock_Ip_Command+0x28>
    53d6:	9b00      	ldr	r3, [sp, #0]
    53d8:	2b02      	cmp	r3, #2
    53da:	d10b      	bne.n	53f4 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    53dc:	9801      	ldr	r0, [sp, #4]
    53de:	f7ff fdb3 	bl	4f48 <Clock_Ip_ClockInitializeObjects>
            break;
    53e2:	e008      	b.n	53f6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    53e4:	9801      	ldr	r0, [sp, #4]
    53e6:	f7ff f9db 	bl	47a0 <Clock_Ip_SpecificPlatformInitClock>
            break;
    53ea:	e004      	b.n	53f6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    53ec:	9801      	ldr	r0, [sp, #4]
    53ee:	f7ff f8ed 	bl	45cc <DisableSafeClock>
            break;
    53f2:	e000      	b.n	53f6 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    53f4:	bf00      	nop
    }
}
    53f6:	bf00      	nop
    53f8:	b003      	add	sp, #12
    53fa:	f85d fb04 	ldr.w	pc, [sp], #4
    53fe:	bf00      	nop

00005400 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5400:	b500      	push	{lr}
    5402:	b085      	sub	sp, #20
    5404:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5406:	4a20      	ldr	r2, [pc, #128]	; (5488 <Mcu_Init+0x88>)
    5408:	9b01      	ldr	r3, [sp, #4]
    540a:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    540c:	2300      	movs	r3, #0
    540e:	9303      	str	r3, [sp, #12]
    5410:	e010      	b.n	5434 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5412:	4b1d      	ldr	r3, [pc, #116]	; (5488 <Mcu_Init+0x88>)
    5414:	681b      	ldr	r3, [r3, #0]
    5416:	6919      	ldr	r1, [r3, #16]
    5418:	9a03      	ldr	r2, [sp, #12]
    541a:	4613      	mov	r3, r2
    541c:	005b      	lsls	r3, r3, #1
    541e:	4413      	add	r3, r2
    5420:	009b      	lsls	r3, r3, #2
    5422:	440b      	add	r3, r1
    5424:	681b      	ldr	r3, [r3, #0]
    5426:	9a03      	ldr	r2, [sp, #12]
    5428:	b2d1      	uxtb	r1, r2
    542a:	4a18      	ldr	r2, [pc, #96]	; (548c <Mcu_Init+0x8c>)
    542c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    542e:	9b03      	ldr	r3, [sp, #12]
    5430:	3301      	adds	r3, #1
    5432:	9303      	str	r3, [sp, #12]
    5434:	4b14      	ldr	r3, [pc, #80]	; (5488 <Mcu_Init+0x88>)
    5436:	681b      	ldr	r3, [r3, #0]
    5438:	689b      	ldr	r3, [r3, #8]
    543a:	9a03      	ldr	r2, [sp, #12]
    543c:	429a      	cmp	r2, r3
    543e:	d3e8      	bcc.n	5412 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5440:	2300      	movs	r3, #0
    5442:	9303      	str	r3, [sp, #12]
    5444:	e010      	b.n	5468 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5446:	4b10      	ldr	r3, [pc, #64]	; (5488 <Mcu_Init+0x88>)
    5448:	681b      	ldr	r3, [r3, #0]
    544a:	6959      	ldr	r1, [r3, #20]
    544c:	9a03      	ldr	r2, [sp, #12]
    544e:	4613      	mov	r3, r2
    5450:	01db      	lsls	r3, r3, #7
    5452:	1a9b      	subs	r3, r3, r2
    5454:	00db      	lsls	r3, r3, #3
    5456:	440b      	add	r3, r1
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	9a03      	ldr	r2, [sp, #12]
    545c:	b2d1      	uxtb	r1, r2
    545e:	4a0c      	ldr	r2, [pc, #48]	; (5490 <Mcu_Init+0x90>)
    5460:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5462:	9b03      	ldr	r3, [sp, #12]
    5464:	3301      	adds	r3, #1
    5466:	9303      	str	r3, [sp, #12]
    5468:	4b07      	ldr	r3, [pc, #28]	; (5488 <Mcu_Init+0x88>)
    546a:	681b      	ldr	r3, [r3, #0]
    546c:	68db      	ldr	r3, [r3, #12]
    546e:	9a03      	ldr	r2, [sp, #12]
    5470:	429a      	cmp	r2, r3
    5472:	d3e8      	bcc.n	5446 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5474:	4b04      	ldr	r3, [pc, #16]	; (5488 <Mcu_Init+0x88>)
    5476:	681b      	ldr	r3, [r3, #0]
    5478:	699b      	ldr	r3, [r3, #24]
    547a:	4618      	mov	r0, r3
    547c:	f000 f88a 	bl	5594 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5480:	bf00      	nop
    5482:	b005      	add	sp, #20
    5484:	f85d fb04 	ldr.w	pc, [sp], #4
    5488:	1fff8d04 	.word	0x1fff8d04
    548c:	1fff8d00 	.word	0x1fff8d00
    5490:	1fff8cfc 	.word	0x1fff8cfc

00005494 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5494:	b084      	sub	sp, #16
    5496:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5498:	2301      	movs	r3, #1
    549a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    549e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    54a2:	4618      	mov	r0, r3
    54a4:	b004      	add	sp, #16
    54a6:	4770      	bx	lr

000054a8 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    54a8:	b500      	push	{lr}
    54aa:	b085      	sub	sp, #20
    54ac:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    54ae:	4a0e      	ldr	r2, [pc, #56]	; (54e8 <Mcu_InitClock+0x40>)
    54b0:	9b01      	ldr	r3, [sp, #4]
    54b2:	4413      	add	r3, r2
    54b4:	781b      	ldrb	r3, [r3, #0]
    54b6:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    54ba:	4b0c      	ldr	r3, [pc, #48]	; (54ec <Mcu_InitClock+0x44>)
    54bc:	681b      	ldr	r3, [r3, #0]
    54be:	6959      	ldr	r1, [r3, #20]
    54c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    54c4:	4613      	mov	r3, r2
    54c6:	01db      	lsls	r3, r3, #7
    54c8:	1a9b      	subs	r3, r3, r2
    54ca:	00db      	lsls	r3, r3, #3
    54cc:	440b      	add	r3, r1
    54ce:	4618      	mov	r0, r3
    54d0:	f000 f86a 	bl	55a8 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    54d4:	2300      	movs	r3, #0
    54d6:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    54da:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    54de:	4618      	mov	r0, r3
    54e0:	b005      	add	sp, #20
    54e2:	f85d fb04 	ldr.w	pc, [sp], #4
    54e6:	bf00      	nop
    54e8:	1fff8cfc 	.word	0x1fff8cfc
    54ec:	1fff8d04 	.word	0x1fff8d04

000054f0 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    54f0:	b500      	push	{lr}
    54f2:	b085      	sub	sp, #20
    54f4:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    54f6:	4a0d      	ldr	r2, [pc, #52]	; (552c <Mcu_SetMode+0x3c>)
    54f8:	9b01      	ldr	r3, [sp, #4]
    54fa:	4413      	add	r3, r2
    54fc:	781b      	ldrb	r3, [r3, #0]
    54fe:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5502:	f001 fb27 	bl	6b54 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5506:	4b0a      	ldr	r3, [pc, #40]	; (5530 <Mcu_SetMode+0x40>)
    5508:	681b      	ldr	r3, [r3, #0]
    550a:	6919      	ldr	r1, [r3, #16]
    550c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5510:	4613      	mov	r3, r2
    5512:	005b      	lsls	r3, r3, #1
    5514:	4413      	add	r3, r2
    5516:	009b      	lsls	r3, r3, #2
    5518:	440b      	add	r3, r1
    551a:	4618      	mov	r0, r3
    551c:	f000 f84e 	bl	55bc <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5520:	f001 fb44 	bl	6bac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5524:	bf00      	nop
    5526:	b005      	add	sp, #20
    5528:	f85d fb04 	ldr.w	pc, [sp], #4
    552c:	1fff8d00 	.word	0x1fff8d00
    5530:	1fff8d04 	.word	0x1fff8d04

00005534 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5534:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5536:	2302      	movs	r3, #2
    5538:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    553a:	9b01      	ldr	r3, [sp, #4]
}
    553c:	4618      	mov	r0, r3
    553e:	b002      	add	sp, #8
    5540:	4770      	bx	lr

00005542 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5542:	b500      	push	{lr}
    5544:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5546:	f000 f843 	bl	55d0 <Mcu_Ipw_GetResetReason>
    554a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    554c:	9b01      	ldr	r3, [sp, #4]
}
    554e:	4618      	mov	r0, r3
    5550:	b003      	add	sp, #12
    5552:	f85d fb04 	ldr.w	pc, [sp], #4

00005556 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5556:	b500      	push	{lr}
    5558:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    555a:	f000 f83f 	bl	55dc <Mcu_Ipw_GetResetRawValue>
    555e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5560:	9b01      	ldr	r3, [sp, #4]
}
    5562:	4618      	mov	r0, r3
    5564:	b003      	add	sp, #12
    5566:	f85d fb04 	ldr.w	pc, [sp], #4

0000556a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    556a:	b500      	push	{lr}
    556c:	b083      	sub	sp, #12
    556e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5570:	9801      	ldr	r0, [sp, #4]
    5572:	f000 f839 	bl	55e8 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5576:	bf00      	nop
    5578:	b003      	add	sp, #12
    557a:	f85d fb04 	ldr.w	pc, [sp], #4

0000557e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    557e:	b082      	sub	sp, #8
    5580:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5582:	4b03      	ldr	r3, [pc, #12]	; (5590 <Mcu_ClkSrcFailureNotification+0x12>)
    5584:	681b      	ldr	r3, [r3, #0]
    5586:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5588:	bf00      	nop
    558a:	b002      	add	sp, #8
    558c:	4770      	bx	lr
    558e:	bf00      	nop
    5590:	1fff8d04 	.word	0x1fff8d04

00005594 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5594:	b500      	push	{lr}
    5596:	b083      	sub	sp, #12
    5598:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    559a:	9801      	ldr	r0, [sp, #4]
    559c:	f000 f882 	bl	56a4 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    55a0:	bf00      	nop
    55a2:	b003      	add	sp, #12
    55a4:	f85d fb04 	ldr.w	pc, [sp], #4

000055a8 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    55a8:	b500      	push	{lr}
    55aa:	b083      	sub	sp, #12
    55ac:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    55ae:	9801      	ldr	r0, [sp, #4]
    55b0:	f7fc fc6a 	bl	1e88 <Clock_Ip_InitClock>
}
    55b4:	bf00      	nop
    55b6:	b003      	add	sp, #12
    55b8:	f85d fb04 	ldr.w	pc, [sp], #4

000055bc <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    55bc:	b500      	push	{lr}
    55be:	b083      	sub	sp, #12
    55c0:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    55c2:	9801      	ldr	r0, [sp, #4]
    55c4:	f000 f820 	bl	5608 <Power_Ip_SetMode>
}
    55c8:	bf00      	nop
    55ca:	b003      	add	sp, #12
    55cc:	f85d fb04 	ldr.w	pc, [sp], #4

000055d0 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    55d0:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    55d2:	f000 f84f 	bl	5674 <Power_Ip_GetResetReason>
    55d6:	4603      	mov	r3, r0
}
    55d8:	4618      	mov	r0, r3
    55da:	bd08      	pop	{r3, pc}

000055dc <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    55dc:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    55de:	f000 f857 	bl	5690 <Power_Ip_GetResetRawValue>
    55e2:	4603      	mov	r3, r0
}
    55e4:	4618      	mov	r0, r3
    55e6:	bd08      	pop	{r3, pc}

000055e8 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    55e8:	b500      	push	{lr}
    55ea:	b083      	sub	sp, #12
    55ec:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    55ee:	9b01      	ldr	r3, [sp, #4]
    55f0:	2b00      	cmp	r3, #0
    55f2:	d102      	bne.n	55fa <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    55f4:	f000 f86c 	bl	56d0 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    55f8:	e001      	b.n	55fe <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    55fa:	f000 f86e 	bl	56da <Power_Ip_EnableSleepOnExit>
}
    55fe:	bf00      	nop
    5600:	b003      	add	sp, #12
    5602:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005608 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5608:	b500      	push	{lr}
    560a:	b085      	sub	sp, #20
    560c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    560e:	9b01      	ldr	r3, [sp, #4]
    5610:	685b      	ldr	r3, [r3, #4]
    5612:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5614:	9802      	ldr	r0, [sp, #8]
    5616:	f000 f9f5 	bl	5a04 <Power_Ip_SMC_ModeCheckEntry>
    561a:	4603      	mov	r3, r0
    561c:	2b00      	cmp	r3, #0
    561e:	d002      	beq.n	5626 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5620:	2301      	movs	r3, #1
    5622:	9303      	str	r3, [sp, #12]
    5624:	e003      	b.n	562e <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5626:	9801      	ldr	r0, [sp, #4]
    5628:	f000 fa1e 	bl	5a68 <Power_Ip_SMC_ModeConfig>
    562c:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    562e:	9b03      	ldr	r3, [sp, #12]
    5630:	2b01      	cmp	r3, #1
    5632:	d103      	bne.n	563c <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5634:	21ff      	movs	r1, #255	; 0xff
    5636:	2003      	movs	r0, #3
    5638:	f000 f8f4 	bl	5824 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    563c:	bf00      	nop
    563e:	b005      	add	sp, #20
    5640:	f85d fb04 	ldr.w	pc, [sp], #4

00005644 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5644:	b084      	sub	sp, #16
    5646:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5648:	230c      	movs	r3, #12
    564a:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    564c:	4a08      	ldr	r2, [pc, #32]	; (5670 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    564e:	9b01      	ldr	r3, [sp, #4]
    5650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5654:	2b0e      	cmp	r3, #14
    5656:	d805      	bhi.n	5664 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5658:	4a05      	ldr	r2, [pc, #20]	; (5670 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    565a:	9b01      	ldr	r3, [sp, #4]
    565c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5660:	9303      	str	r3, [sp, #12]
    5662:	e001      	b.n	5668 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5664:	230c      	movs	r3, #12
    5666:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5668:	9b03      	ldr	r3, [sp, #12]
}
    566a:	4618      	mov	r0, r3
    566c:	b004      	add	sp, #16
    566e:	4770      	bx	lr
    5670:	0000867c 	.word	0x0000867c

00005674 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5674:	b500      	push	{lr}
    5676:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5678:	f000 f940 	bl	58fc <Power_Ip_RCM_GetResetReason>
    567c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    567e:	9801      	ldr	r0, [sp, #4]
    5680:	f7ff ffe0 	bl	5644 <Power_Ip_ConvertIntergeToResetType>
    5684:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5686:	9b00      	ldr	r3, [sp, #0]
}
    5688:	4618      	mov	r0, r3
    568a:	b003      	add	sp, #12
    568c:	f85d fb04 	ldr.w	pc, [sp], #4

00005690 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5690:	b500      	push	{lr}
    5692:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5694:	f000 f98a 	bl	59ac <Power_Ip_RCM_GetResetRawValue>
    5698:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    569a:	9b01      	ldr	r3, [sp, #4]
}
    569c:	4618      	mov	r0, r3
    569e:	b003      	add	sp, #12
    56a0:	f85d fb04 	ldr.w	pc, [sp], #4

000056a4 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    56a4:	b500      	push	{lr}
    56a6:	b083      	sub	sp, #12
    56a8:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    56aa:	9b01      	ldr	r3, [sp, #4]
    56ac:	681b      	ldr	r3, [r3, #0]
    56ae:	4618      	mov	r0, r3
    56b0:	f000 f90e 	bl	58d0 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    56b4:	9b01      	ldr	r3, [sp, #4]
    56b6:	685b      	ldr	r3, [r3, #4]
    56b8:	4618      	mov	r0, r3
    56ba:	f000 f86d 	bl	5798 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    56be:	9b01      	ldr	r3, [sp, #4]
    56c0:	689b      	ldr	r3, [r3, #8]
    56c2:	4618      	mov	r0, r3
    56c4:	f000 f990 	bl	59e8 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    56c8:	bf00      	nop
    56ca:	b003      	add	sp, #12
    56cc:	f85d fb04 	ldr.w	pc, [sp], #4

000056d0 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    56d0:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    56d2:	f000 f811 	bl	56f8 <Power_Ip_CM4_DisableSleepOnExit>
}
    56d6:	bf00      	nop
    56d8:	bd08      	pop	{r3, pc}

000056da <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    56da:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    56dc:	f000 f820 	bl	5720 <Power_Ip_CM4_EnableSleepOnExit>
}
    56e0:	bf00      	nop
    56e2:	bd08      	pop	{r3, pc}

000056e4 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    56e4:	b082      	sub	sp, #8
    56e6:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    56e8:	4a02      	ldr	r2, [pc, #8]	; (56f4 <Power_Ip_InstallNotificationsCallback+0x10>)
    56ea:	9b01      	ldr	r3, [sp, #4]
    56ec:	6013      	str	r3, [r2, #0]
}
    56ee:	bf00      	nop
    56f0:	b002      	add	sp, #8
    56f2:	4770      	bx	lr
    56f4:	1fff8b24 	.word	0x1fff8b24

000056f8 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    56f8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    56fa:	2300      	movs	r3, #0
    56fc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    56fe:	4b07      	ldr	r3, [pc, #28]	; (571c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5700:	681b      	ldr	r3, [r3, #0]
    5702:	685b      	ldr	r3, [r3, #4]
    5704:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5706:	9b01      	ldr	r3, [sp, #4]
    5708:	f023 0302 	bic.w	r3, r3, #2
    570c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    570e:	4b03      	ldr	r3, [pc, #12]	; (571c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5710:	681b      	ldr	r3, [r3, #0]
    5712:	9a01      	ldr	r2, [sp, #4]
    5714:	605a      	str	r2, [r3, #4]
}
    5716:	bf00      	nop
    5718:	b002      	add	sp, #8
    571a:	4770      	bx	lr
    571c:	1fff8b28 	.word	0x1fff8b28

00005720 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5720:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5722:	2300      	movs	r3, #0
    5724:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5726:	4b07      	ldr	r3, [pc, #28]	; (5744 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5728:	681b      	ldr	r3, [r3, #0]
    572a:	685b      	ldr	r3, [r3, #4]
    572c:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    572e:	9b01      	ldr	r3, [sp, #4]
    5730:	f043 0302 	orr.w	r3, r3, #2
    5734:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5736:	4b03      	ldr	r3, [pc, #12]	; (5744 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5738:	681b      	ldr	r3, [r3, #0]
    573a:	9a01      	ldr	r2, [sp, #4]
    573c:	605a      	str	r2, [r3, #4]
}
    573e:	bf00      	nop
    5740:	b002      	add	sp, #8
    5742:	4770      	bx	lr
    5744:	1fff8b28 	.word	0x1fff8b28

00005748 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5748:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    574a:	2300      	movs	r3, #0
    574c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    574e:	4b07      	ldr	r3, [pc, #28]	; (576c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5750:	681b      	ldr	r3, [r3, #0]
    5752:	685b      	ldr	r3, [r3, #4]
    5754:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5756:	9b01      	ldr	r3, [sp, #4]
    5758:	f043 0304 	orr.w	r3, r3, #4
    575c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    575e:	4b03      	ldr	r3, [pc, #12]	; (576c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5760:	681b      	ldr	r3, [r3, #0]
    5762:	9a01      	ldr	r2, [sp, #4]
    5764:	605a      	str	r2, [r3, #4]
}
    5766:	bf00      	nop
    5768:	b002      	add	sp, #8
    576a:	4770      	bx	lr
    576c:	1fff8b28 	.word	0x1fff8b28

00005770 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5770:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5772:	2300      	movs	r3, #0
    5774:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5776:	4b07      	ldr	r3, [pc, #28]	; (5794 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	685b      	ldr	r3, [r3, #4]
    577c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    577e:	9b01      	ldr	r3, [sp, #4]
    5780:	f023 0304 	bic.w	r3, r3, #4
    5784:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5786:	4b03      	ldr	r3, [pc, #12]	; (5794 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5788:	681b      	ldr	r3, [r3, #0]
    578a:	9a01      	ldr	r2, [sp, #4]
    578c:	605a      	str	r2, [r3, #4]
}
    578e:	bf00      	nop
    5790:	b002      	add	sp, #8
    5792:	4770      	bx	lr
    5794:	1fff8b28 	.word	0x1fff8b28

00005798 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5798:	b084      	sub	sp, #16
    579a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    579c:	4b20      	ldr	r3, [pc, #128]	; (5820 <Power_Ip_PMC_PowerInit+0x88>)
    579e:	781b      	ldrb	r3, [r3, #0]
    57a0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    57a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    57a8:	f003 030f 	and.w	r3, r3, #15
    57ac:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    57b0:	9b01      	ldr	r3, [sp, #4]
    57b2:	781a      	ldrb	r2, [r3, #0]
    57b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    57b8:	4313      	orrs	r3, r2
    57ba:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    57be:	4a18      	ldr	r2, [pc, #96]	; (5820 <Power_Ip_PMC_PowerInit+0x88>)
    57c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    57c4:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    57c6:	4b16      	ldr	r3, [pc, #88]	; (5820 <Power_Ip_PMC_PowerInit+0x88>)
    57c8:	785b      	ldrb	r3, [r3, #1]
    57ca:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    57ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    57d2:	f003 031f 	and.w	r3, r3, #31
    57d6:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    57da:	9b01      	ldr	r3, [sp, #4]
    57dc:	785a      	ldrb	r2, [r3, #1]
    57de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    57e2:	4313      	orrs	r3, r2
    57e4:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    57e8:	4a0d      	ldr	r2, [pc, #52]	; (5820 <Power_Ip_PMC_PowerInit+0x88>)
    57ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    57ee:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    57f0:	4b0b      	ldr	r3, [pc, #44]	; (5820 <Power_Ip_PMC_PowerInit+0x88>)
    57f2:	789b      	ldrb	r3, [r3, #2]
    57f4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    57f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    57fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5800:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5804:	9b01      	ldr	r3, [sp, #4]
    5806:	789a      	ldrb	r2, [r3, #2]
    5808:	f89d 300f 	ldrb.w	r3, [sp, #15]
    580c:	4313      	orrs	r3, r2
    580e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5812:	4a03      	ldr	r2, [pc, #12]	; (5820 <Power_Ip_PMC_PowerInit+0x88>)
    5814:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5818:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    581a:	bf00      	nop
    581c:	b004      	add	sp, #16
    581e:	4770      	bx	lr
    5820:	4007d000 	.word	0x4007d000

00005824 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5824:	b500      	push	{lr}
    5826:	b083      	sub	sp, #12
    5828:	9001      	str	r0, [sp, #4]
    582a:	460b      	mov	r3, r1
    582c:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5830:	4b05      	ldr	r3, [pc, #20]	; (5848 <Power_Ip_ReportPowerErrors+0x24>)
    5832:	681b      	ldr	r3, [r3, #0]
    5834:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5838:	4611      	mov	r1, r2
    583a:	9801      	ldr	r0, [sp, #4]
    583c:	4798      	blx	r3
}
    583e:	bf00      	nop
    5840:	b003      	add	sp, #12
    5842:	f85d fb04 	ldr.w	pc, [sp], #4
    5846:	bf00      	nop
    5848:	1fff8b24 	.word	0x1fff8b24

0000584c <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    584c:	b082      	sub	sp, #8
    584e:	9001      	str	r0, [sp, #4]
    5850:	460b      	mov	r3, r1
    5852:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5856:	bf00      	nop
    5858:	b002      	add	sp, #8
    585a:	4770      	bx	lr

0000585c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    585c:	b500      	push	{lr}
    585e:	b085      	sub	sp, #20
    5860:	9003      	str	r0, [sp, #12]
    5862:	9102      	str	r1, [sp, #8]
    5864:	9201      	str	r2, [sp, #4]
    5866:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5868:	2000      	movs	r0, #0
    586a:	f7fc f83c 	bl	18e6 <OsIf_GetCounter>
    586e:	4602      	mov	r2, r0
    5870:	9b03      	ldr	r3, [sp, #12]
    5872:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5874:	9b02      	ldr	r3, [sp, #8]
    5876:	2200      	movs	r2, #0
    5878:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    587a:	2100      	movs	r1, #0
    587c:	9800      	ldr	r0, [sp, #0]
    587e:	f7fc f87e 	bl	197e <OsIf_MicrosToTicks>
    5882:	4602      	mov	r2, r0
    5884:	9b01      	ldr	r3, [sp, #4]
    5886:	601a      	str	r2, [r3, #0]
}
    5888:	bf00      	nop
    588a:	b005      	add	sp, #20
    588c:	f85d fb04 	ldr.w	pc, [sp], #4

00005890 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5890:	b500      	push	{lr}
    5892:	b087      	sub	sp, #28
    5894:	9003      	str	r0, [sp, #12]
    5896:	9102      	str	r1, [sp, #8]
    5898:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    589a:	2300      	movs	r3, #0
    589c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    58a0:	2100      	movs	r1, #0
    58a2:	9803      	ldr	r0, [sp, #12]
    58a4:	f7fc f838 	bl	1918 <OsIf_GetElapsed>
    58a8:	4602      	mov	r2, r0
    58aa:	9b02      	ldr	r3, [sp, #8]
    58ac:	681b      	ldr	r3, [r3, #0]
    58ae:	441a      	add	r2, r3
    58b0:	9b02      	ldr	r3, [sp, #8]
    58b2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    58b4:	9b02      	ldr	r3, [sp, #8]
    58b6:	681b      	ldr	r3, [r3, #0]
    58b8:	9a01      	ldr	r2, [sp, #4]
    58ba:	429a      	cmp	r2, r3
    58bc:	d802      	bhi.n	58c4 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    58be:	2301      	movs	r3, #1
    58c0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    58c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    58c8:	4618      	mov	r0, r3
    58ca:	b007      	add	sp, #28
    58cc:	f85d fb04 	ldr.w	pc, [sp], #4

000058d0 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    58d0:	b082      	sub	sp, #8
    58d2:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    58d4:	9b01      	ldr	r3, [sp, #4]
    58d6:	681a      	ldr	r2, [r3, #0]
    58d8:	4907      	ldr	r1, [pc, #28]	; (58f8 <Power_Ip_RCM_ResetInit+0x28>)
    58da:	f641 7307 	movw	r3, #7943	; 0x1f07
    58de:	4013      	ands	r3, r2
    58e0:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    58e2:	9b01      	ldr	r3, [sp, #4]
    58e4:	685a      	ldr	r2, [r3, #4]
    58e6:	4904      	ldr	r1, [pc, #16]	; (58f8 <Power_Ip_RCM_ResetInit+0x28>)
    58e8:	f642 73ff 	movw	r3, #12287	; 0x2fff
    58ec:	4013      	ands	r3, r2
    58ee:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    58f0:	bf00      	nop
    58f2:	b002      	add	sp, #8
    58f4:	4770      	bx	lr
    58f6:	bf00      	nop
    58f8:	4007f000 	.word	0x4007f000

000058fc <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    58fc:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    58fe:	230c      	movs	r3, #12
    5900:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5902:	2300      	movs	r3, #0
    5904:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5906:	2300      	movs	r3, #0
    5908:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    590a:	2300      	movs	r3, #0
    590c:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    590e:	4b25      	ldr	r3, [pc, #148]	; (59a4 <Power_Ip_RCM_GetResetReason+0xa8>)
    5910:	699a      	ldr	r2, [r3, #24]
    5912:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5916:	4013      	ands	r3, r2
    5918:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    591a:	9b03      	ldr	r3, [sp, #12]
    591c:	2b00      	cmp	r3, #0
    591e:	d008      	beq.n	5932 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5920:	4920      	ldr	r1, [pc, #128]	; (59a4 <Power_Ip_RCM_GetResetReason+0xa8>)
    5922:	9a03      	ldr	r2, [sp, #12]
    5924:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5928:	4013      	ands	r3, r2
    592a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    592c:	4a1e      	ldr	r2, [pc, #120]	; (59a8 <Power_Ip_RCM_GetResetReason+0xac>)
    592e:	9b03      	ldr	r3, [sp, #12]
    5930:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5932:	4b1d      	ldr	r3, [pc, #116]	; (59a8 <Power_Ip_RCM_GetResetReason+0xac>)
    5934:	681b      	ldr	r3, [r3, #0]
    5936:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5938:	9a02      	ldr	r2, [sp, #8]
    593a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    593e:	4013      	ands	r3, r2
    5940:	2b82      	cmp	r3, #130	; 0x82
    5942:	d102      	bne.n	594a <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5944:	2305      	movs	r3, #5
    5946:	9307      	str	r3, [sp, #28]
    5948:	e027      	b.n	599a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    594a:	2300      	movs	r3, #0
    594c:	9306      	str	r3, [sp, #24]
    594e:	e021      	b.n	5994 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5950:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5954:	9b06      	ldr	r3, [sp, #24]
    5956:	fa22 f303 	lsr.w	r3, r2, r3
    595a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    595c:	9a01      	ldr	r2, [sp, #4]
    595e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5962:	4013      	ands	r3, r2
    5964:	2b00      	cmp	r3, #0
    5966:	d012      	beq.n	598e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5968:	9a01      	ldr	r2, [sp, #4]
    596a:	9b02      	ldr	r3, [sp, #8]
    596c:	4013      	ands	r3, r2
    596e:	2b00      	cmp	r3, #0
    5970:	d00a      	beq.n	5988 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5972:	9b05      	ldr	r3, [sp, #20]
    5974:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5976:	9b04      	ldr	r3, [sp, #16]
    5978:	3301      	adds	r3, #1
    597a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    597c:	9b04      	ldr	r3, [sp, #16]
    597e:	2b01      	cmp	r3, #1
    5980:	d902      	bls.n	5988 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5982:	230d      	movs	r3, #13
    5984:	9307      	str	r3, [sp, #28]
                        break;
    5986:	e008      	b.n	599a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5988:	9b05      	ldr	r3, [sp, #20]
    598a:	3301      	adds	r3, #1
    598c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    598e:	9b06      	ldr	r3, [sp, #24]
    5990:	3301      	adds	r3, #1
    5992:	9306      	str	r3, [sp, #24]
    5994:	9b06      	ldr	r3, [sp, #24]
    5996:	2b1f      	cmp	r3, #31
    5998:	d9da      	bls.n	5950 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    599a:	9b07      	ldr	r3, [sp, #28]
}
    599c:	4618      	mov	r0, r3
    599e:	b008      	add	sp, #32
    59a0:	4770      	bx	lr
    59a2:	bf00      	nop
    59a4:	4007f000 	.word	0x4007f000
    59a8:	1fff8d08 	.word	0x1fff8d08

000059ac <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    59ac:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    59ae:	4b0c      	ldr	r3, [pc, #48]	; (59e0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    59b0:	699a      	ldr	r2, [r3, #24]
    59b2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    59b6:	4013      	ands	r3, r2
    59b8:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    59ba:	9b01      	ldr	r3, [sp, #4]
    59bc:	2b00      	cmp	r3, #0
    59be:	d008      	beq.n	59d2 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    59c0:	4907      	ldr	r1, [pc, #28]	; (59e0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    59c2:	9a01      	ldr	r2, [sp, #4]
    59c4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    59c8:	4013      	ands	r3, r2
    59ca:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    59cc:	4a05      	ldr	r2, [pc, #20]	; (59e4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    59ce:	9b01      	ldr	r3, [sp, #4]
    59d0:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    59d2:	4b04      	ldr	r3, [pc, #16]	; (59e4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    59d8:	9b00      	ldr	r3, [sp, #0]
}
    59da:	4618      	mov	r0, r3
    59dc:	b002      	add	sp, #8
    59de:	4770      	bx	lr
    59e0:	4007f000 	.word	0x4007f000
    59e4:	1fff8d08 	.word	0x1fff8d08

000059e8 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    59e8:	b082      	sub	sp, #8
    59ea:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    59ec:	9b01      	ldr	r3, [sp, #4]
    59ee:	681b      	ldr	r3, [r3, #0]
    59f0:	4a03      	ldr	r2, [pc, #12]	; (5a00 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    59f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    59f6:	6093      	str	r3, [r2, #8]
}
    59f8:	bf00      	nop
    59fa:	b002      	add	sp, #8
    59fc:	4770      	bx	lr
    59fe:	bf00      	nop
    5a00:	4007e000 	.word	0x4007e000

00005a04 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5a04:	b084      	sub	sp, #16
    5a06:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5a08:	2301      	movs	r3, #1
    5a0a:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5a0c:	4b15      	ldr	r3, [pc, #84]	; (5a64 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5a0e:	695b      	ldr	r3, [r3, #20]
    5a10:	b2db      	uxtb	r3, r3
    5a12:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5a14:	9b01      	ldr	r3, [sp, #4]
    5a16:	2b02      	cmp	r3, #2
    5a18:	d012      	beq.n	5a40 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5a1a:	9b01      	ldr	r3, [sp, #4]
    5a1c:	2b02      	cmp	r3, #2
    5a1e:	d818      	bhi.n	5a52 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5a20:	9b01      	ldr	r3, [sp, #4]
    5a22:	2b00      	cmp	r3, #0
    5a24:	d003      	beq.n	5a2e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5a26:	9b01      	ldr	r3, [sp, #4]
    5a28:	2b01      	cmp	r3, #1
    5a2a:	d003      	beq.n	5a34 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5a2c:	e011      	b.n	5a52 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5a2e:	2300      	movs	r3, #0
    5a30:	9303      	str	r3, [sp, #12]
            break;
    5a32:	e013      	b.n	5a5c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5a34:	9b02      	ldr	r3, [sp, #8]
    5a36:	2b01      	cmp	r3, #1
    5a38:	d10d      	bne.n	5a56 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5a3a:	2300      	movs	r3, #0
    5a3c:	9303      	str	r3, [sp, #12]
            break;
    5a3e:	e00a      	b.n	5a56 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5a40:	9b02      	ldr	r3, [sp, #8]
    5a42:	2b01      	cmp	r3, #1
    5a44:	d002      	beq.n	5a4c <Power_Ip_SMC_ModeCheckEntry+0x48>
    5a46:	9b02      	ldr	r3, [sp, #8]
    5a48:	2b10      	cmp	r3, #16
    5a4a:	d106      	bne.n	5a5a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5a4c:	2300      	movs	r3, #0
    5a4e:	9303      	str	r3, [sp, #12]
            break;
    5a50:	e003      	b.n	5a5a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5a52:	bf00      	nop
    5a54:	e002      	b.n	5a5c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5a56:	bf00      	nop
    5a58:	e000      	b.n	5a5c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5a5a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5a5c:	9b03      	ldr	r3, [sp, #12]
}
    5a5e:	4618      	mov	r0, r3
    5a60:	b004      	add	sp, #16
    5a62:	4770      	bx	lr
    5a64:	4007e000 	.word	0x4007e000

00005a68 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5a68:	b500      	push	{lr}
    5a6a:	b08b      	sub	sp, #44	; 0x2c
    5a6c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5a6e:	2300      	movs	r3, #0
    5a70:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5a72:	2300      	movs	r3, #0
    5a74:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5a76:	2300      	movs	r3, #0
    5a78:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5a7c:	9b01      	ldr	r3, [sp, #4]
    5a7e:	685b      	ldr	r3, [r3, #4]
    5a80:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5a82:	9b08      	ldr	r3, [sp, #32]
    5a84:	2b02      	cmp	r3, #2
    5a86:	d076      	beq.n	5b76 <Power_Ip_SMC_ModeConfig+0x10e>
    5a88:	9b08      	ldr	r3, [sp, #32]
    5a8a:	2b02      	cmp	r3, #2
    5a8c:	f200 80ab 	bhi.w	5be6 <Power_Ip_SMC_ModeConfig+0x17e>
    5a90:	9b08      	ldr	r3, [sp, #32]
    5a92:	2b00      	cmp	r3, #0
    5a94:	d003      	beq.n	5a9e <Power_Ip_SMC_ModeConfig+0x36>
    5a96:	9b08      	ldr	r3, [sp, #32]
    5a98:	2b01      	cmp	r3, #1
    5a9a:	d034      	beq.n	5b06 <Power_Ip_SMC_ModeConfig+0x9e>
    5a9c:	e0a3      	b.n	5be6 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5a9e:	4b58      	ldr	r3, [pc, #352]	; (5c00 <Power_Ip_SMC_ModeConfig+0x198>)
    5aa0:	68db      	ldr	r3, [r3, #12]
    5aa2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5aa4:	9b06      	ldr	r3, [sp, #24]
    5aa6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5aaa:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5aac:	4a54      	ldr	r2, [pc, #336]	; (5c00 <Power_Ip_SMC_ModeConfig+0x198>)
    5aae:	9b06      	ldr	r3, [sp, #24]
    5ab0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5ab2:	aa02      	add	r2, sp, #8
    5ab4:	a903      	add	r1, sp, #12
    5ab6:	a804      	add	r0, sp, #16
    5ab8:	f24c 3350 	movw	r3, #50000	; 0xc350
    5abc:	f7ff fece 	bl	585c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5ac0:	9a02      	ldr	r2, [sp, #8]
    5ac2:	a903      	add	r1, sp, #12
    5ac4:	ab04      	add	r3, sp, #16
    5ac6:	4618      	mov	r0, r3
    5ac8:	f7ff fee2 	bl	5890 <Power_Ip_TimeoutExpired>
    5acc:	4603      	mov	r3, r0
    5ace:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5ad2:	4b4b      	ldr	r3, [pc, #300]	; (5c00 <Power_Ip_SMC_ModeConfig+0x198>)
    5ad4:	695b      	ldr	r3, [r3, #20]
    5ad6:	f003 0301 	and.w	r3, r3, #1
    5ada:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5adc:	9b05      	ldr	r3, [sp, #20]
    5ade:	2b01      	cmp	r3, #1
    5ae0:	d006      	beq.n	5af0 <Power_Ip_SMC_ModeConfig+0x88>
    5ae2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5ae6:	f083 0301 	eor.w	r3, r3, #1
    5aea:	b2db      	uxtb	r3, r3
    5aec:	2b00      	cmp	r3, #0
    5aee:	d1e7      	bne.n	5ac0 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5af0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5af4:	2b00      	cmp	r3, #0
    5af6:	d079      	beq.n	5bec <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5af8:	2301      	movs	r3, #1
    5afa:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5afc:	21ff      	movs	r1, #255	; 0xff
    5afe:	2000      	movs	r0, #0
    5b00:	f7ff fe90 	bl	5824 <Power_Ip_ReportPowerErrors>
            }

            break;
    5b04:	e072      	b.n	5bec <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5b06:	4b3e      	ldr	r3, [pc, #248]	; (5c00 <Power_Ip_SMC_ModeConfig+0x198>)
    5b08:	68db      	ldr	r3, [r3, #12]
    5b0a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5b0c:	9b06      	ldr	r3, [sp, #24]
    5b0e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5b12:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5b14:	9b06      	ldr	r3, [sp, #24]
    5b16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5b1a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5b1c:	4a38      	ldr	r2, [pc, #224]	; (5c00 <Power_Ip_SMC_ModeConfig+0x198>)
    5b1e:	9b06      	ldr	r3, [sp, #24]
    5b20:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5b22:	aa02      	add	r2, sp, #8
    5b24:	a903      	add	r1, sp, #12
    5b26:	a804      	add	r0, sp, #16
    5b28:	f24c 3350 	movw	r3, #50000	; 0xc350
    5b2c:	f7ff fe96 	bl	585c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5b30:	9a02      	ldr	r2, [sp, #8]
    5b32:	a903      	add	r1, sp, #12
    5b34:	ab04      	add	r3, sp, #16
    5b36:	4618      	mov	r0, r3
    5b38:	f7ff feaa 	bl	5890 <Power_Ip_TimeoutExpired>
    5b3c:	4603      	mov	r3, r0
    5b3e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5b42:	4b2f      	ldr	r3, [pc, #188]	; (5c00 <Power_Ip_SMC_ModeConfig+0x198>)
    5b44:	695b      	ldr	r3, [r3, #20]
    5b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5b4a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5b4c:	9b05      	ldr	r3, [sp, #20]
    5b4e:	2b80      	cmp	r3, #128	; 0x80
    5b50:	d006      	beq.n	5b60 <Power_Ip_SMC_ModeConfig+0xf8>
    5b52:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5b56:	f083 0301 	eor.w	r3, r3, #1
    5b5a:	b2db      	uxtb	r3, r3
    5b5c:	2b00      	cmp	r3, #0
    5b5e:	d1e7      	bne.n	5b30 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5b60:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5b64:	2b00      	cmp	r3, #0
    5b66:	d043      	beq.n	5bf0 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5b68:	2301      	movs	r3, #1
    5b6a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5b6c:	21ff      	movs	r1, #255	; 0xff
    5b6e:	2000      	movs	r0, #0
    5b70:	f7ff fe58 	bl	5824 <Power_Ip_ReportPowerErrors>
            }

            break;
    5b74:	e03c      	b.n	5bf0 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5b76:	4b22      	ldr	r3, [pc, #136]	; (5c00 <Power_Ip_SMC_ModeConfig+0x198>)
    5b78:	68db      	ldr	r3, [r3, #12]
    5b7a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5b7c:	9b06      	ldr	r3, [sp, #24]
    5b7e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5b82:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5b84:	9b06      	ldr	r3, [sp, #24]
    5b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5b8a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5b8c:	4a1c      	ldr	r2, [pc, #112]	; (5c00 <Power_Ip_SMC_ModeConfig+0x198>)
    5b8e:	9b06      	ldr	r3, [sp, #24]
    5b90:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5b92:	aa02      	add	r2, sp, #8
    5b94:	a903      	add	r1, sp, #12
    5b96:	a804      	add	r0, sp, #16
    5b98:	f24c 3350 	movw	r3, #50000	; 0xc350
    5b9c:	f7ff fe5e 	bl	585c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5ba0:	9a02      	ldr	r2, [sp, #8]
    5ba2:	a903      	add	r1, sp, #12
    5ba4:	ab04      	add	r3, sp, #16
    5ba6:	4618      	mov	r0, r3
    5ba8:	f7ff fe72 	bl	5890 <Power_Ip_TimeoutExpired>
    5bac:	4603      	mov	r3, r0
    5bae:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5bb2:	4b13      	ldr	r3, [pc, #76]	; (5c00 <Power_Ip_SMC_ModeConfig+0x198>)
    5bb4:	695b      	ldr	r3, [r3, #20]
    5bb6:	f003 0304 	and.w	r3, r3, #4
    5bba:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5bbc:	9b05      	ldr	r3, [sp, #20]
    5bbe:	2b04      	cmp	r3, #4
    5bc0:	d006      	beq.n	5bd0 <Power_Ip_SMC_ModeConfig+0x168>
    5bc2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5bc6:	f083 0301 	eor.w	r3, r3, #1
    5bca:	b2db      	uxtb	r3, r3
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d1e7      	bne.n	5ba0 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5bd0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5bd4:	2b00      	cmp	r3, #0
    5bd6:	d00d      	beq.n	5bf4 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5bd8:	2301      	movs	r3, #1
    5bda:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5bdc:	21ff      	movs	r1, #255	; 0xff
    5bde:	2000      	movs	r0, #0
    5be0:	f7ff fe20 	bl	5824 <Power_Ip_ReportPowerErrors>
            }

            break;
    5be4:	e006      	b.n	5bf4 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5be6:	2301      	movs	r3, #1
    5be8:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5bea:	e004      	b.n	5bf6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5bec:	bf00      	nop
    5bee:	e002      	b.n	5bf6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5bf0:	bf00      	nop
    5bf2:	e000      	b.n	5bf6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5bf4:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5bf8:	4618      	mov	r0, r3
    5bfa:	b00b      	add	sp, #44	; 0x2c
    5bfc:	f85d fb04 	ldr.w	pc, [sp], #4
    5c00:	4007e000 	.word	0x4007e000

00005c04 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5c04:	b500      	push	{lr}
    5c06:	b085      	sub	sp, #20
    5c08:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5c0a:	9b01      	ldr	r3, [sp, #4]
    5c0c:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5c0e:	9803      	ldr	r0, [sp, #12]
    5c10:	f000 fbc8 	bl	63a4 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5c14:	4a03      	ldr	r2, [pc, #12]	; (5c24 <Port_Init+0x20>)
    5c16:	9b03      	ldr	r3, [sp, #12]
    5c18:	6013      	str	r3, [r2, #0]
        }
    }
}
    5c1a:	bf00      	nop
    5c1c:	b005      	add	sp, #20
    5c1e:	f85d fb04 	ldr.w	pc, [sp], #4
    5c22:	bf00      	nop
    5c24:	1fff8d0c 	.word	0x1fff8d0c

00005c28 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5c28:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5c2a:	4b03      	ldr	r3, [pc, #12]	; (5c38 <Port_RefreshPortDirection+0x10>)
    5c2c:	681b      	ldr	r3, [r3, #0]
    5c2e:	4618      	mov	r0, r3
    5c30:	f000 fc10 	bl	6454 <Port_Ipw_RefreshPortDirection>
    }
}
    5c34:	bf00      	nop
    5c36:	bd08      	pop	{r3, pc}
    5c38:	1fff8d0c 	.word	0x1fff8d0c

00005c3c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5c3c:	b086      	sub	sp, #24
    5c3e:	9003      	str	r0, [sp, #12]
    5c40:	9102      	str	r1, [sp, #8]
    5c42:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5c44:	23ff      	movs	r3, #255	; 0xff
    5c46:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5c48:	9b03      	ldr	r3, [sp, #12]
    5c4a:	4a39      	ldr	r2, [pc, #228]	; (5d30 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5c4c:	4293      	cmp	r3, r2
    5c4e:	d151      	bne.n	5cf4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5c50:	9b02      	ldr	r3, [sp, #8]
    5c52:	2b10      	cmp	r3, #16
    5c54:	d867      	bhi.n	5d26 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5c56:	a201      	add	r2, pc, #4	; (adr r2, 5c5c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5c5c:	00005ca1 	.word	0x00005ca1
    5c60:	00005caf 	.word	0x00005caf
    5c64:	00005d27 	.word	0x00005d27
    5c68:	00005d27 	.word	0x00005d27
    5c6c:	00005d27 	.word	0x00005d27
    5c70:	00005d27 	.word	0x00005d27
    5c74:	00005d27 	.word	0x00005d27
    5c78:	00005d27 	.word	0x00005d27
    5c7c:	00005d27 	.word	0x00005d27
    5c80:	00005d27 	.word	0x00005d27
    5c84:	00005d27 	.word	0x00005d27
    5c88:	00005d27 	.word	0x00005d27
    5c8c:	00005d27 	.word	0x00005d27
    5c90:	00005cbd 	.word	0x00005cbd
    5c94:	00005ccb 	.word	0x00005ccb
    5c98:	00005cd9 	.word	0x00005cd9
    5c9c:	00005ce7 	.word	0x00005ce7
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5ca0:	2301      	movs	r3, #1
    5ca2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5ca4:	9a05      	ldr	r2, [sp, #20]
    5ca6:	9b01      	ldr	r3, [sp, #4]
    5ca8:	4313      	orrs	r3, r2
    5caa:	9305      	str	r3, [sp, #20]
                break;
    5cac:	e03c      	b.n	5d28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5cae:	2302      	movs	r3, #2
    5cb0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5cb2:	9a05      	ldr	r2, [sp, #20]
    5cb4:	9b01      	ldr	r3, [sp, #4]
    5cb6:	4313      	orrs	r3, r2
    5cb8:	9305      	str	r3, [sp, #20]
                break;
    5cba:	e035      	b.n	5d28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5cbc:	2304      	movs	r3, #4
    5cbe:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5cc0:	9a05      	ldr	r2, [sp, #20]
    5cc2:	9b01      	ldr	r3, [sp, #4]
    5cc4:	4313      	orrs	r3, r2
    5cc6:	9305      	str	r3, [sp, #20]
                break;
    5cc8:	e02e      	b.n	5d28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5cca:	2308      	movs	r3, #8
    5ccc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5cce:	9a05      	ldr	r2, [sp, #20]
    5cd0:	9b01      	ldr	r3, [sp, #4]
    5cd2:	4313      	orrs	r3, r2
    5cd4:	9305      	str	r3, [sp, #20]
                break;
    5cd6:	e027      	b.n	5d28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5cd8:	230e      	movs	r3, #14
    5cda:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5cdc:	9a05      	ldr	r2, [sp, #20]
    5cde:	9b01      	ldr	r3, [sp, #4]
    5ce0:	4013      	ands	r3, r2
    5ce2:	9305      	str	r3, [sp, #20]
                break;
    5ce4:	e020      	b.n	5d28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5ce6:	230d      	movs	r3, #13
    5ce8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5cea:	9a05      	ldr	r2, [sp, #20]
    5cec:	9b01      	ldr	r3, [sp, #4]
    5cee:	4013      	ands	r3, r2
    5cf0:	9305      	str	r3, [sp, #20]
                break;
    5cf2:	e019      	b.n	5d28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5cf4:	9b03      	ldr	r3, [sp, #12]
    5cf6:	4a0f      	ldr	r2, [pc, #60]	; (5d34 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5cf8:	4293      	cmp	r3, r2
    5cfa:	d115      	bne.n	5d28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5cfc:	9b02      	ldr	r3, [sp, #8]
    5cfe:	2b00      	cmp	r3, #0
    5d00:	d003      	beq.n	5d0a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5d02:	9b02      	ldr	r3, [sp, #8]
    5d04:	2b01      	cmp	r3, #1
    5d06:	d007      	beq.n	5d18 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5d08:	e00e      	b.n	5d28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5d0a:	230b      	movs	r3, #11
    5d0c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5d0e:	9a05      	ldr	r2, [sp, #20]
    5d10:	9b01      	ldr	r3, [sp, #4]
    5d12:	4013      	ands	r3, r2
    5d14:	9305      	str	r3, [sp, #20]
                break;
    5d16:	e007      	b.n	5d28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5d18:	2307      	movs	r3, #7
    5d1a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5d1c:	9a05      	ldr	r2, [sp, #20]
    5d1e:	9b01      	ldr	r3, [sp, #4]
    5d20:	4013      	ands	r3, r2
    5d22:	9305      	str	r3, [sp, #20]
                break;
    5d24:	e000      	b.n	5d28 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5d26:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5d28:	9b05      	ldr	r3, [sp, #20]
}
    5d2a:	4618      	mov	r0, r3
    5d2c:	b006      	add	sp, #24
    5d2e:	4770      	bx	lr
    5d30:	4004a000 	.word	0x4004a000
    5d34:	4004b000 	.word	0x4004b000

00005d38 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5d38:	b500      	push	{lr}
    5d3a:	b089      	sub	sp, #36	; 0x24
    5d3c:	9003      	str	r0, [sp, #12]
    5d3e:	9102      	str	r1, [sp, #8]
    5d40:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5d42:	9b01      	ldr	r3, [sp, #4]
    5d44:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5d46:	9b01      	ldr	r3, [sp, #4]
    5d48:	2b08      	cmp	r3, #8
    5d4a:	d121      	bne.n	5d90 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5d4c:	4b13      	ldr	r3, [pc, #76]	; (5d9c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5d4e:	685b      	ldr	r3, [r3, #4]
    5d50:	f003 030f 	and.w	r3, r3, #15
    5d54:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5d56:	9a06      	ldr	r2, [sp, #24]
    5d58:	9902      	ldr	r1, [sp, #8]
    5d5a:	9803      	ldr	r0, [sp, #12]
    5d5c:	f7ff ff6e 	bl	5c3c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5d60:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5d62:	9b05      	ldr	r3, [sp, #20]
    5d64:	2bff      	cmp	r3, #255	; 0xff
    5d66:	d011      	beq.n	5d8c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5d68:	f001 f984 	bl	7074 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5d6c:	4b0b      	ldr	r3, [pc, #44]	; (5d9c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5d6e:	685b      	ldr	r3, [r3, #4]
    5d70:	4a0a      	ldr	r2, [pc, #40]	; (5d9c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5d72:	f023 030f 	bic.w	r3, r3, #15
    5d76:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5d78:	4b08      	ldr	r3, [pc, #32]	; (5d9c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5d7a:	685a      	ldr	r2, [r3, #4]
    5d7c:	9b05      	ldr	r3, [sp, #20]
    5d7e:	f003 030f 	and.w	r3, r3, #15
    5d82:	4906      	ldr	r1, [pc, #24]	; (5d9c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5d84:	4313      	orrs	r3, r2
    5d86:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5d88:	f001 f9a0 	bl	70cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5d8c:	2300      	movs	r3, #0
    5d8e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5d90:	9b07      	ldr	r3, [sp, #28]
}
    5d92:	4618      	mov	r0, r3
    5d94:	b009      	add	sp, #36	; 0x24
    5d96:	f85d fb04 	ldr.w	pc, [sp], #4
    5d9a:	bf00      	nop
    5d9c:	40048000 	.word	0x40048000

00005da0 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5da0:	b500      	push	{lr}
    5da2:	b087      	sub	sp, #28
    5da4:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5da6:	2300      	movs	r3, #0
    5da8:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5daa:	2300      	movs	r3, #0
    5dac:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    5dae:	2300      	movs	r3, #0
    5db0:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5db2:	9b01      	ldr	r3, [sp, #4]
    5db4:	68db      	ldr	r3, [r3, #12]
    5db6:	2b02      	cmp	r3, #2
    5db8:	d00a      	beq.n	5dd0 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5dba:	9b05      	ldr	r3, [sp, #20]
    5dbc:	f043 0302 	orr.w	r3, r3, #2
    5dc0:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5dc2:	9b01      	ldr	r3, [sp, #4]
    5dc4:	68db      	ldr	r3, [r3, #12]
    5dc6:	f003 0301 	and.w	r3, r3, #1
    5dca:	9a05      	ldr	r2, [sp, #20]
    5dcc:	4313      	orrs	r3, r2
    5dce:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5dd0:	9b01      	ldr	r3, [sp, #4]
    5dd2:	699b      	ldr	r3, [r3, #24]
    5dd4:	019b      	lsls	r3, r3, #6
    5dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5dda:	9a05      	ldr	r2, [sp, #20]
    5ddc:	4313      	orrs	r3, r2
    5dde:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5de0:	9b01      	ldr	r3, [sp, #4]
    5de2:	6a1b      	ldr	r3, [r3, #32]
    5de4:	03db      	lsls	r3, r3, #15
    5de6:	b29b      	uxth	r3, r3
    5de8:	9a05      	ldr	r2, [sp, #20]
    5dea:	4313      	orrs	r3, r2
    5dec:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    5dee:	9b01      	ldr	r3, [sp, #4]
    5df0:	7f1b      	ldrb	r3, [r3, #28]
    5df2:	2b00      	cmp	r3, #0
    5df4:	d001      	beq.n	5dfa <Port_Ci_Port_Ip_PinInit+0x5a>
    5df6:	2310      	movs	r3, #16
    5df8:	e000      	b.n	5dfc <Port_Ci_Port_Ip_PinInit+0x5c>
    5dfa:	2300      	movs	r3, #0
    5dfc:	9a05      	ldr	r2, [sp, #20]
    5dfe:	4313      	orrs	r3, r2
    5e00:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5e02:	9b01      	ldr	r3, [sp, #4]
    5e04:	691b      	ldr	r3, [r3, #16]
    5e06:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5e08:	9b01      	ldr	r3, [sp, #4]
    5e0a:	6818      	ldr	r0, [r3, #0]
    5e0c:	9b01      	ldr	r3, [sp, #4]
    5e0e:	689b      	ldr	r3, [r3, #8]
    5e10:	9a04      	ldr	r2, [sp, #16]
    5e12:	4619      	mov	r1, r3
    5e14:	f7ff ff90 	bl	5d38 <Port_Ci_Port_Ip_ConfigureInterleave>
    5e18:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    5e1a:	9b03      	ldr	r3, [sp, #12]
    5e1c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    5e1e:	9b04      	ldr	r3, [sp, #16]
    5e20:	021b      	lsls	r3, r3, #8
    5e22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5e26:	9a05      	ldr	r2, [sp, #20]
    5e28:	4313      	orrs	r3, r2
    5e2a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    5e2c:	f000 ff88 	bl	6d40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5e30:	9b01      	ldr	r3, [sp, #4]
    5e32:	681b      	ldr	r3, [r3, #0]
    5e34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5e38:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    5e3a:	9b01      	ldr	r3, [sp, #4]
    5e3c:	689b      	ldr	r3, [r3, #8]
    5e3e:	2201      	movs	r2, #1
    5e40:	fa02 f303 	lsl.w	r3, r2, r3
    5e44:	43db      	mvns	r3, r3
    5e46:	9a02      	ldr	r2, [sp, #8]
    5e48:	4013      	ands	r3, r2
    5e4a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    5e4c:	9b01      	ldr	r3, [sp, #4]
    5e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5e52:	2b00      	cmp	r3, #0
    5e54:	d001      	beq.n	5e5a <Port_Ci_Port_Ip_PinInit+0xba>
    5e56:	2201      	movs	r2, #1
    5e58:	e000      	b.n	5e5c <Port_Ci_Port_Ip_PinInit+0xbc>
    5e5a:	2200      	movs	r2, #0
    5e5c:	9b01      	ldr	r3, [sp, #4]
    5e5e:	689b      	ldr	r3, [r3, #8]
    5e60:	fa02 f303 	lsl.w	r3, r2, r3
    5e64:	9a02      	ldr	r2, [sp, #8]
    5e66:	4313      	orrs	r3, r2
    5e68:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    5e6a:	9b01      	ldr	r3, [sp, #4]
    5e6c:	681b      	ldr	r3, [r3, #0]
    5e6e:	9a02      	ldr	r2, [sp, #8]
    5e70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5e74:	f000 ff90 	bl	6d98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5e78:	9b04      	ldr	r3, [sp, #16]
    5e7a:	2b01      	cmp	r3, #1
    5e7c:	d16d      	bne.n	5f5a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    5e7e:	9b01      	ldr	r3, [sp, #4]
    5e80:	695b      	ldr	r3, [r3, #20]
    5e82:	2b02      	cmp	r3, #2
    5e84:	d138      	bne.n	5ef8 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5e86:	9b01      	ldr	r3, [sp, #4]
    5e88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5e8c:	2b01      	cmp	r3, #1
    5e8e:	d10f      	bne.n	5eb0 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    5e90:	f000 ffa8 	bl	6de4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5e94:	9b01      	ldr	r3, [sp, #4]
    5e96:	685b      	ldr	r3, [r3, #4]
    5e98:	6859      	ldr	r1, [r3, #4]
    5e9a:	9b01      	ldr	r3, [sp, #4]
    5e9c:	689b      	ldr	r3, [r3, #8]
    5e9e:	2201      	movs	r2, #1
    5ea0:	409a      	lsls	r2, r3
    5ea2:	9b01      	ldr	r3, [sp, #4]
    5ea4:	685b      	ldr	r3, [r3, #4]
    5ea6:	430a      	orrs	r2, r1
    5ea8:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    5eaa:	f000 ffc7 	bl	6e3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    5eae:	e013      	b.n	5ed8 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    5eb0:	9b01      	ldr	r3, [sp, #4]
    5eb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5eb6:	2b00      	cmp	r3, #0
    5eb8:	d10e      	bne.n	5ed8 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    5eba:	f000 ffe5 	bl	6e88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    5ebe:	9b01      	ldr	r3, [sp, #4]
    5ec0:	685b      	ldr	r3, [r3, #4]
    5ec2:	6899      	ldr	r1, [r3, #8]
    5ec4:	9b01      	ldr	r3, [sp, #4]
    5ec6:	689b      	ldr	r3, [r3, #8]
    5ec8:	2201      	movs	r2, #1
    5eca:	409a      	lsls	r2, r3
    5ecc:	9b01      	ldr	r3, [sp, #4]
    5ece:	685b      	ldr	r3, [r3, #4]
    5ed0:	430a      	orrs	r2, r1
    5ed2:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5ed4:	f001 f804 	bl	6ee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5ed8:	f001 f828 	bl	6f2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    5edc:	9b01      	ldr	r3, [sp, #4]
    5ede:	685b      	ldr	r3, [r3, #4]
    5ee0:	6959      	ldr	r1, [r3, #20]
    5ee2:	9b01      	ldr	r3, [sp, #4]
    5ee4:	689b      	ldr	r3, [r3, #8]
    5ee6:	2201      	movs	r2, #1
    5ee8:	409a      	lsls	r2, r3
    5eea:	9b01      	ldr	r3, [sp, #4]
    5eec:	685b      	ldr	r3, [r3, #4]
    5eee:	430a      	orrs	r2, r1
    5ef0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5ef2:	f001 f847 	bl	6f84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5ef6:	e030      	b.n	5f5a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5ef8:	f001 f818 	bl	6f2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5efc:	9b01      	ldr	r3, [sp, #4]
    5efe:	685b      	ldr	r3, [r3, #4]
    5f00:	6959      	ldr	r1, [r3, #20]
    5f02:	9b01      	ldr	r3, [sp, #4]
    5f04:	689b      	ldr	r3, [r3, #8]
    5f06:	2201      	movs	r2, #1
    5f08:	fa02 f303 	lsl.w	r3, r2, r3
    5f0c:	43da      	mvns	r2, r3
    5f0e:	9b01      	ldr	r3, [sp, #4]
    5f10:	685b      	ldr	r3, [r3, #4]
    5f12:	400a      	ands	r2, r1
    5f14:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5f16:	f001 f835 	bl	6f84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    5f1a:	f001 f859 	bl	6fd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    5f1e:	9b01      	ldr	r3, [sp, #4]
    5f20:	685b      	ldr	r3, [r3, #4]
    5f22:	6999      	ldr	r1, [r3, #24]
    5f24:	9b01      	ldr	r3, [sp, #4]
    5f26:	689b      	ldr	r3, [r3, #8]
    5f28:	2201      	movs	r2, #1
    5f2a:	fa02 f303 	lsl.w	r3, r2, r3
    5f2e:	43da      	mvns	r2, r3
    5f30:	9b01      	ldr	r3, [sp, #4]
    5f32:	685b      	ldr	r3, [r3, #4]
    5f34:	400a      	ands	r2, r1
    5f36:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5f38:	9b01      	ldr	r3, [sp, #4]
    5f3a:	695b      	ldr	r3, [r3, #20]
    5f3c:	2b03      	cmp	r3, #3
    5f3e:	d10a      	bne.n	5f56 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5f40:	9b01      	ldr	r3, [sp, #4]
    5f42:	685b      	ldr	r3, [r3, #4]
    5f44:	6999      	ldr	r1, [r3, #24]
    5f46:	9b01      	ldr	r3, [sp, #4]
    5f48:	689b      	ldr	r3, [r3, #8]
    5f4a:	2201      	movs	r2, #1
    5f4c:	409a      	lsls	r2, r3
    5f4e:	9b01      	ldr	r3, [sp, #4]
    5f50:	685b      	ldr	r3, [r3, #4]
    5f52:	430a      	orrs	r2, r1
    5f54:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5f56:	f001 f867 	bl	7028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    5f5a:	9b01      	ldr	r3, [sp, #4]
    5f5c:	681b      	ldr	r3, [r3, #0]
    5f5e:	9a01      	ldr	r2, [sp, #4]
    5f60:	6892      	ldr	r2, [r2, #8]
    5f62:	9905      	ldr	r1, [sp, #20]
    5f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5f68:	bf00      	nop
    5f6a:	b007      	add	sp, #28
    5f6c:	f85d fb04 	ldr.w	pc, [sp], #4

00005f70 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    5f70:	b500      	push	{lr}
    5f72:	b085      	sub	sp, #20
    5f74:	9001      	str	r0, [sp, #4]
    5f76:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5f78:	2300      	movs	r3, #0
    5f7a:	9303      	str	r3, [sp, #12]
    5f7c:	e00d      	b.n	5f9a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    5f7e:	9a03      	ldr	r2, [sp, #12]
    5f80:	4613      	mov	r3, r2
    5f82:	009b      	lsls	r3, r3, #2
    5f84:	4413      	add	r3, r2
    5f86:	00db      	lsls	r3, r3, #3
    5f88:	461a      	mov	r2, r3
    5f8a:	9b00      	ldr	r3, [sp, #0]
    5f8c:	4413      	add	r3, r2
    5f8e:	4618      	mov	r0, r3
    5f90:	f7ff ff06 	bl	5da0 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    5f94:	9b03      	ldr	r3, [sp, #12]
    5f96:	3301      	adds	r3, #1
    5f98:	9303      	str	r3, [sp, #12]
    5f9a:	9a03      	ldr	r2, [sp, #12]
    5f9c:	9b01      	ldr	r3, [sp, #4]
    5f9e:	429a      	cmp	r2, r3
    5fa0:	d3ed      	bcc.n	5f7e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    5fa2:	2300      	movs	r3, #0
}
    5fa4:	4618      	mov	r0, r3
    5fa6:	b005      	add	sp, #20
    5fa8:	f85d fb04 	ldr.w	pc, [sp], #4

00005fac <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    5fac:	b500      	push	{lr}
    5fae:	b087      	sub	sp, #28
    5fb0:	9003      	str	r0, [sp, #12]
    5fb2:	9102      	str	r1, [sp, #8]
    5fb4:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    5fb6:	9a01      	ldr	r2, [sp, #4]
    5fb8:	9902      	ldr	r1, [sp, #8]
    5fba:	9803      	ldr	r0, [sp, #12]
    5fbc:	f7ff febc 	bl	5d38 <Port_Ci_Port_Ip_ConfigureInterleave>
    5fc0:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    5fc2:	f001 f8a9 	bl	7118 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5fc6:	9b03      	ldr	r3, [sp, #12]
    5fc8:	9a02      	ldr	r2, [sp, #8]
    5fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5fce:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    5fd0:	9b04      	ldr	r3, [sp, #16]
    5fd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5fd6:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5fd8:	9b05      	ldr	r3, [sp, #20]
    5fda:	021b      	lsls	r3, r3, #8
    5fdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5fe0:	9a04      	ldr	r2, [sp, #16]
    5fe2:	4313      	orrs	r3, r2
    5fe4:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5fe6:	9b03      	ldr	r3, [sp, #12]
    5fe8:	9a02      	ldr	r2, [sp, #8]
    5fea:	9904      	ldr	r1, [sp, #16]
    5fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5ff0:	f001 f8be 	bl	7170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5ff4:	bf00      	nop
    5ff6:	b007      	add	sp, #28
    5ff8:	f85d fb04 	ldr.w	pc, [sp], #4

00005ffc <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5ffc:	b500      	push	{lr}
    5ffe:	b083      	sub	sp, #12
    6000:	9001      	str	r0, [sp, #4]
    6002:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6004:	f001 f8da 	bl	71bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6008:	9b01      	ldr	r3, [sp, #4]
    600a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    600e:	2101      	movs	r1, #1
    6010:	9b00      	ldr	r3, [sp, #0]
    6012:	fa01 f303 	lsl.w	r3, r1, r3
    6016:	431a      	orrs	r2, r3
    6018:	9b01      	ldr	r3, [sp, #4]
    601a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    601e:	f001 f8f9 	bl	7214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6022:	bf00      	nop
    6024:	b003      	add	sp, #12
    6026:	f85d fb04 	ldr.w	pc, [sp], #4

0000602a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    602a:	b500      	push	{lr}
    602c:	b083      	sub	sp, #12
    602e:	9001      	str	r0, [sp, #4]
    6030:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6032:	f001 f915 	bl	7260 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6036:	9b01      	ldr	r3, [sp, #4]
    6038:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    603c:	2101      	movs	r1, #1
    603e:	9b00      	ldr	r3, [sp, #0]
    6040:	fa01 f303 	lsl.w	r3, r1, r3
    6044:	43db      	mvns	r3, r3
    6046:	401a      	ands	r2, r3
    6048:	9b01      	ldr	r3, [sp, #4]
    604a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    604e:	f001 f933 	bl	72b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6052:	bf00      	nop
    6054:	b003      	add	sp, #12
    6056:	f85d fb04 	ldr.w	pc, [sp], #4

0000605a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    605a:	b082      	sub	sp, #8
    605c:	9001      	str	r0, [sp, #4]
    605e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6060:	9b00      	ldr	r3, [sp, #0]
    6062:	785b      	ldrb	r3, [r3, #1]
    6064:	f003 0201 	and.w	r2, r3, #1
    6068:	9b01      	ldr	r3, [sp, #4]
    606a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    606e:	9b00      	ldr	r3, [sp, #0]
    6070:	789b      	ldrb	r3, [r3, #2]
    6072:	f003 021f 	and.w	r2, r3, #31
    6076:	9b01      	ldr	r3, [sp, #4]
    6078:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    607c:	bf00      	nop
    607e:	b002      	add	sp, #8
    6080:	4770      	bx	lr

00006082 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6082:	b086      	sub	sp, #24
    6084:	9003      	str	r0, [sp, #12]
    6086:	9301      	str	r3, [sp, #4]
    6088:	460b      	mov	r3, r1
    608a:	f8ad 300a 	strh.w	r3, [sp, #10]
    608e:	4613      	mov	r3, r2
    6090:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6094:	2300      	movs	r3, #0
    6096:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    609a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    609e:	f043 0301 	orr.w	r3, r3, #1
    60a2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    60a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    60aa:	f043 0302 	orr.w	r3, r3, #2
    60ae:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    60b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    60b6:	f043 0310 	orr.w	r3, r3, #16
    60ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    60be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    60c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    60c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    60ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    60ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    60d2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    60d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    60da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    60de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    60e2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    60e6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    60ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    60ee:	4013      	ands	r3, r2
    60f0:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    60f4:	9b01      	ldr	r3, [sp, #4]
    60f6:	2b00      	cmp	r3, #0
    60f8:	d003      	beq.n	6102 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    60fa:	9b01      	ldr	r3, [sp, #4]
    60fc:	2b01      	cmp	r3, #1
    60fe:	d00a      	beq.n	6116 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6100:	e013      	b.n	612a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6102:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6106:	041a      	lsls	r2, r3, #16
    6108:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    610c:	431a      	orrs	r2, r3
    610e:	9b03      	ldr	r3, [sp, #12]
    6110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6114:	e009      	b.n	612a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6116:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    611a:	041a      	lsls	r2, r3, #16
    611c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6120:	431a      	orrs	r2, r3
    6122:	9b03      	ldr	r3, [sp, #12]
    6124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6128:	bf00      	nop
    }
}
    612a:	bf00      	nop
    612c:	b006      	add	sp, #24
    612e:	4770      	bx	lr

00006130 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6130:	b500      	push	{lr}
    6132:	b087      	sub	sp, #28
    6134:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6136:	9b01      	ldr	r3, [sp, #4]
    6138:	885b      	ldrh	r3, [r3, #2]
    613a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    613e:	9b01      	ldr	r3, [sp, #4]
    6140:	689b      	ldr	r3, [r3, #8]
    6142:	7a1b      	ldrb	r3, [r3, #8]
    6144:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6148:	9b01      	ldr	r3, [sp, #4]
    614a:	689b      	ldr	r3, [r3, #8]
    614c:	681b      	ldr	r3, [r3, #0]
    614e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6150:	9b01      	ldr	r3, [sp, #4]
    6152:	689b      	ldr	r3, [r3, #8]
    6154:	685b      	ldr	r3, [r3, #4]
    6156:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6158:	2300      	movs	r3, #0
    615a:	f8ad 3016 	strh.w	r3, [sp, #22]
    615e:	e111      	b.n	6384 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6160:	9b02      	ldr	r3, [sp, #8]
    6162:	2b02      	cmp	r3, #2
    6164:	d169      	bne.n	623a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6166:	f89d 3013 	ldrb.w	r3, [sp, #19]
    616a:	2b01      	cmp	r3, #1
    616c:	d11a      	bne.n	61a4 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    616e:	9b01      	ldr	r3, [sp, #4]
    6170:	685a      	ldr	r2, [r3, #4]
    6172:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6176:	005b      	lsls	r3, r3, #1
    6178:	4413      	add	r3, r2
    617a:	881b      	ldrh	r3, [r3, #0]
    617c:	f003 021f 	and.w	r2, r3, #31
    6180:	9b01      	ldr	r3, [sp, #4]
    6182:	6859      	ldr	r1, [r3, #4]
    6184:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6188:	005b      	lsls	r3, r3, #1
    618a:	440b      	add	r3, r1
    618c:	881b      	ldrh	r3, [r3, #0]
    618e:	095b      	lsrs	r3, r3, #5
    6190:	b29b      	uxth	r3, r3
    6192:	4619      	mov	r1, r3
    6194:	4b81      	ldr	r3, [pc, #516]	; (639c <Port_Ipw_Init_UnusedPins+0x26c>)
    6196:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    619a:	2101      	movs	r1, #1
    619c:	fa01 f202 	lsl.w	r2, r1, r2
    61a0:	605a      	str	r2, [r3, #4]
    61a2:	e01d      	b.n	61e0 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    61a4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    61a8:	2b00      	cmp	r3, #0
    61aa:	d119      	bne.n	61e0 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    61ac:	9b01      	ldr	r3, [sp, #4]
    61ae:	685a      	ldr	r2, [r3, #4]
    61b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    61b4:	005b      	lsls	r3, r3, #1
    61b6:	4413      	add	r3, r2
    61b8:	881b      	ldrh	r3, [r3, #0]
    61ba:	f003 021f 	and.w	r2, r3, #31
    61be:	9b01      	ldr	r3, [sp, #4]
    61c0:	6859      	ldr	r1, [r3, #4]
    61c2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    61c6:	005b      	lsls	r3, r3, #1
    61c8:	440b      	add	r3, r1
    61ca:	881b      	ldrh	r3, [r3, #0]
    61cc:	095b      	lsrs	r3, r3, #5
    61ce:	b29b      	uxth	r3, r3
    61d0:	4619      	mov	r1, r3
    61d2:	4b72      	ldr	r3, [pc, #456]	; (639c <Port_Ipw_Init_UnusedPins+0x26c>)
    61d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    61d8:	2101      	movs	r1, #1
    61da:	fa01 f202 	lsl.w	r2, r1, r2
    61de:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    61e0:	f001 f890 	bl	7304 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    61e4:	9b01      	ldr	r3, [sp, #4]
    61e6:	685a      	ldr	r2, [r3, #4]
    61e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    61ec:	005b      	lsls	r3, r3, #1
    61ee:	4413      	add	r3, r2
    61f0:	881b      	ldrh	r3, [r3, #0]
    61f2:	095b      	lsrs	r3, r3, #5
    61f4:	b29b      	uxth	r3, r3
    61f6:	461a      	mov	r2, r3
    61f8:	4b68      	ldr	r3, [pc, #416]	; (639c <Port_Ipw_Init_UnusedPins+0x26c>)
    61fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61fe:	6959      	ldr	r1, [r3, #20]
    6200:	9b01      	ldr	r3, [sp, #4]
    6202:	685a      	ldr	r2, [r3, #4]
    6204:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6208:	005b      	lsls	r3, r3, #1
    620a:	4413      	add	r3, r2
    620c:	881b      	ldrh	r3, [r3, #0]
    620e:	f003 031f 	and.w	r3, r3, #31
    6212:	2201      	movs	r2, #1
    6214:	409a      	lsls	r2, r3
    6216:	9b01      	ldr	r3, [sp, #4]
    6218:	6858      	ldr	r0, [r3, #4]
    621a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    621e:	005b      	lsls	r3, r3, #1
    6220:	4403      	add	r3, r0
    6222:	881b      	ldrh	r3, [r3, #0]
    6224:	095b      	lsrs	r3, r3, #5
    6226:	b29b      	uxth	r3, r3
    6228:	4618      	mov	r0, r3
    622a:	4b5c      	ldr	r3, [pc, #368]	; (639c <Port_Ipw_Init_UnusedPins+0x26c>)
    622c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6230:	430a      	orrs	r2, r1
    6232:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6234:	f001 f892 	bl	735c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6238:	e086      	b.n	6348 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    623a:	f001 f863 	bl	7304 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    623e:	9b01      	ldr	r3, [sp, #4]
    6240:	685a      	ldr	r2, [r3, #4]
    6242:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6246:	005b      	lsls	r3, r3, #1
    6248:	4413      	add	r3, r2
    624a:	881b      	ldrh	r3, [r3, #0]
    624c:	095b      	lsrs	r3, r3, #5
    624e:	b29b      	uxth	r3, r3
    6250:	461a      	mov	r2, r3
    6252:	4b52      	ldr	r3, [pc, #328]	; (639c <Port_Ipw_Init_UnusedPins+0x26c>)
    6254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6258:	6959      	ldr	r1, [r3, #20]
    625a:	9b01      	ldr	r3, [sp, #4]
    625c:	685a      	ldr	r2, [r3, #4]
    625e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6262:	005b      	lsls	r3, r3, #1
    6264:	4413      	add	r3, r2
    6266:	881b      	ldrh	r3, [r3, #0]
    6268:	f003 031f 	and.w	r3, r3, #31
    626c:	2201      	movs	r2, #1
    626e:	fa02 f303 	lsl.w	r3, r2, r3
    6272:	43da      	mvns	r2, r3
    6274:	9b01      	ldr	r3, [sp, #4]
    6276:	6858      	ldr	r0, [r3, #4]
    6278:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    627c:	005b      	lsls	r3, r3, #1
    627e:	4403      	add	r3, r0
    6280:	881b      	ldrh	r3, [r3, #0]
    6282:	095b      	lsrs	r3, r3, #5
    6284:	b29b      	uxth	r3, r3
    6286:	4618      	mov	r0, r3
    6288:	4b44      	ldr	r3, [pc, #272]	; (639c <Port_Ipw_Init_UnusedPins+0x26c>)
    628a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    628e:	400a      	ands	r2, r1
    6290:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6292:	f001 f863 	bl	735c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6296:	f001 f887 	bl	73a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    629a:	9b01      	ldr	r3, [sp, #4]
    629c:	685a      	ldr	r2, [r3, #4]
    629e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62a2:	005b      	lsls	r3, r3, #1
    62a4:	4413      	add	r3, r2
    62a6:	881b      	ldrh	r3, [r3, #0]
    62a8:	095b      	lsrs	r3, r3, #5
    62aa:	b29b      	uxth	r3, r3
    62ac:	461a      	mov	r2, r3
    62ae:	4b3b      	ldr	r3, [pc, #236]	; (639c <Port_Ipw_Init_UnusedPins+0x26c>)
    62b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    62b4:	6999      	ldr	r1, [r3, #24]
    62b6:	9b01      	ldr	r3, [sp, #4]
    62b8:	685a      	ldr	r2, [r3, #4]
    62ba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62be:	005b      	lsls	r3, r3, #1
    62c0:	4413      	add	r3, r2
    62c2:	881b      	ldrh	r3, [r3, #0]
    62c4:	f003 031f 	and.w	r3, r3, #31
    62c8:	2201      	movs	r2, #1
    62ca:	fa02 f303 	lsl.w	r3, r2, r3
    62ce:	43da      	mvns	r2, r3
    62d0:	9b01      	ldr	r3, [sp, #4]
    62d2:	6858      	ldr	r0, [r3, #4]
    62d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62d8:	005b      	lsls	r3, r3, #1
    62da:	4403      	add	r3, r0
    62dc:	881b      	ldrh	r3, [r3, #0]
    62de:	095b      	lsrs	r3, r3, #5
    62e0:	b29b      	uxth	r3, r3
    62e2:	4618      	mov	r0, r3
    62e4:	4b2d      	ldr	r3, [pc, #180]	; (639c <Port_Ipw_Init_UnusedPins+0x26c>)
    62e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    62ea:	400a      	ands	r2, r1
    62ec:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    62ee:	9b02      	ldr	r3, [sp, #8]
    62f0:	2b03      	cmp	r3, #3
    62f2:	d127      	bne.n	6344 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    62f4:	9b01      	ldr	r3, [sp, #4]
    62f6:	685a      	ldr	r2, [r3, #4]
    62f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    62fc:	005b      	lsls	r3, r3, #1
    62fe:	4413      	add	r3, r2
    6300:	881b      	ldrh	r3, [r3, #0]
    6302:	095b      	lsrs	r3, r3, #5
    6304:	b29b      	uxth	r3, r3
    6306:	461a      	mov	r2, r3
    6308:	4b24      	ldr	r3, [pc, #144]	; (639c <Port_Ipw_Init_UnusedPins+0x26c>)
    630a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    630e:	6999      	ldr	r1, [r3, #24]
    6310:	9b01      	ldr	r3, [sp, #4]
    6312:	685a      	ldr	r2, [r3, #4]
    6314:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6318:	005b      	lsls	r3, r3, #1
    631a:	4413      	add	r3, r2
    631c:	881b      	ldrh	r3, [r3, #0]
    631e:	f003 031f 	and.w	r3, r3, #31
    6322:	2201      	movs	r2, #1
    6324:	409a      	lsls	r2, r3
    6326:	9b01      	ldr	r3, [sp, #4]
    6328:	6858      	ldr	r0, [r3, #4]
    632a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    632e:	005b      	lsls	r3, r3, #1
    6330:	4403      	add	r3, r0
    6332:	881b      	ldrh	r3, [r3, #0]
    6334:	095b      	lsrs	r3, r3, #5
    6336:	b29b      	uxth	r3, r3
    6338:	4618      	mov	r0, r3
    633a:	4b18      	ldr	r3, [pc, #96]	; (639c <Port_Ipw_Init_UnusedPins+0x26c>)
    633c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6340:	430a      	orrs	r2, r1
    6342:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6344:	f001 f85c 	bl	7400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6348:	9b01      	ldr	r3, [sp, #4]
    634a:	685a      	ldr	r2, [r3, #4]
    634c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6350:	005b      	lsls	r3, r3, #1
    6352:	4413      	add	r3, r2
    6354:	881b      	ldrh	r3, [r3, #0]
    6356:	095b      	lsrs	r3, r3, #5
    6358:	b29b      	uxth	r3, r3
    635a:	461a      	mov	r2, r3
    635c:	4b10      	ldr	r3, [pc, #64]	; (63a0 <Port_Ipw_Init_UnusedPins+0x270>)
    635e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6362:	9a01      	ldr	r2, [sp, #4]
    6364:	6851      	ldr	r1, [r2, #4]
    6366:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    636a:	0052      	lsls	r2, r2, #1
    636c:	440a      	add	r2, r1
    636e:	8812      	ldrh	r2, [r2, #0]
    6370:	f002 021f 	and.w	r2, r2, #31
    6374:	9903      	ldr	r1, [sp, #12]
    6376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    637a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    637e:	3301      	adds	r3, #1
    6380:	f8ad 3016 	strh.w	r3, [sp, #22]
    6384:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6388:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    638c:	429a      	cmp	r2, r3
    638e:	f4ff aee7 	bcc.w	6160 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6392:	bf00      	nop
    6394:	bf00      	nop
    6396:	b007      	add	sp, #28
    6398:	f85d fb04 	ldr.w	pc, [sp], #4
    639c:	000086cc 	.word	0x000086cc
    63a0:	000086b8 	.word	0x000086b8

000063a4 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    63a4:	b500      	push	{lr}
    63a6:	b085      	sub	sp, #20
    63a8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    63aa:	9b01      	ldr	r3, [sp, #4]
    63ac:	7c1b      	ldrb	r3, [r3, #16]
    63ae:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    63b2:	2300      	movs	r3, #0
    63b4:	f8ad 300e 	strh.w	r3, [sp, #14]
    63b8:	e035      	b.n	6426 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    63ba:	9b01      	ldr	r3, [sp, #4]
    63bc:	695a      	ldr	r2, [r3, #20]
    63be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    63c2:	00db      	lsls	r3, r3, #3
    63c4:	4413      	add	r3, r2
    63c6:	781b      	ldrb	r3, [r3, #0]
    63c8:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    63cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    63d0:	4a1f      	ldr	r2, [pc, #124]	; (6450 <Port_Ipw_Init+0xac>)
    63d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    63d6:	9b01      	ldr	r3, [sp, #4]
    63d8:	695a      	ldr	r2, [r3, #20]
    63da:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    63de:	00db      	lsls	r3, r3, #3
    63e0:	4413      	add	r3, r2
    63e2:	4619      	mov	r1, r3
    63e4:	f7ff fe39 	bl	605a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    63e8:	f001 f978 	bl	76dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    63ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
    63f0:	4a17      	ldr	r2, [pc, #92]	; (6450 <Port_Ipw_Init+0xac>)
    63f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63f6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    63fa:	9b01      	ldr	r3, [sp, #4]
    63fc:	695a      	ldr	r2, [r3, #20]
    63fe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6402:	00db      	lsls	r3, r3, #3
    6404:	4413      	add	r3, r2
    6406:	685a      	ldr	r2, [r3, #4]
    6408:	f89d 300c 	ldrb.w	r3, [sp, #12]
    640c:	4810      	ldr	r0, [pc, #64]	; (6450 <Port_Ipw_Init+0xac>)
    640e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6412:	430a      	orrs	r2, r1
    6414:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6418:	f001 f98c 	bl	7734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    641c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6420:	3301      	adds	r3, #1
    6422:	f8ad 300e 	strh.w	r3, [sp, #14]
    6426:	f89d 300d 	ldrb.w	r3, [sp, #13]
    642a:	b29b      	uxth	r3, r3
    642c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6430:	429a      	cmp	r2, r3
    6432:	d3c2      	bcc.n	63ba <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6434:	9b01      	ldr	r3, [sp, #4]
    6436:	6a1b      	ldr	r3, [r3, #32]
    6438:	4619      	mov	r1, r3
    643a:	2009      	movs	r0, #9
    643c:	f7ff fd98 	bl	5f70 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6440:	9801      	ldr	r0, [sp, #4]
    6442:	f7ff fe75 	bl	6130 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6446:	bf00      	nop
    6448:	b005      	add	sp, #20
    644a:	f85d fb04 	ldr.w	pc, [sp], #4
    644e:	bf00      	nop
    6450:	000086b8 	.word	0x000086b8

00006454 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6454:	b500      	push	{lr}
    6456:	b085      	sub	sp, #20
    6458:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    645a:	9b01      	ldr	r3, [sp, #4]
    645c:	881b      	ldrh	r3, [r3, #0]
    645e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6462:	2300      	movs	r3, #0
    6464:	f8ad 300e 	strh.w	r3, [sp, #14]
    6468:	e0d2      	b.n	6610 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    646a:	9b01      	ldr	r3, [sp, #4]
    646c:	68d9      	ldr	r1, [r3, #12]
    646e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6472:	4613      	mov	r3, r2
    6474:	009b      	lsls	r3, r3, #2
    6476:	4413      	add	r3, r2
    6478:	009b      	lsls	r3, r3, #2
    647a:	440b      	add	r3, r1
    647c:	7c5b      	ldrb	r3, [r3, #17]
    647e:	f083 0301 	eor.w	r3, r3, #1
    6482:	b2db      	uxtb	r3, r3
    6484:	2b00      	cmp	r3, #0
    6486:	f000 80be 	beq.w	6606 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    648a:	9b01      	ldr	r3, [sp, #4]
    648c:	68d9      	ldr	r1, [r3, #12]
    648e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6492:	4613      	mov	r3, r2
    6494:	009b      	lsls	r3, r3, #2
    6496:	4413      	add	r3, r2
    6498:	009b      	lsls	r3, r3, #2
    649a:	440b      	add	r3, r1
    649c:	7c1b      	ldrb	r3, [r3, #16]
    649e:	2b00      	cmp	r3, #0
    64a0:	f000 80b1 	beq.w	6606 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    64a4:	9b01      	ldr	r3, [sp, #4]
    64a6:	68d9      	ldr	r1, [r3, #12]
    64a8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    64ac:	4613      	mov	r3, r2
    64ae:	009b      	lsls	r3, r3, #2
    64b0:	4413      	add	r3, r2
    64b2:	009b      	lsls	r3, r3, #2
    64b4:	440b      	add	r3, r1
    64b6:	881b      	ldrh	r3, [r3, #0]
    64b8:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    64bc:	9b01      	ldr	r3, [sp, #4]
    64be:	68d9      	ldr	r1, [r3, #12]
    64c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    64c4:	4613      	mov	r3, r2
    64c6:	009b      	lsls	r3, r3, #2
    64c8:	4413      	add	r3, r2
    64ca:	009b      	lsls	r3, r3, #2
    64cc:	440b      	add	r3, r1
    64ce:	68db      	ldr	r3, [r3, #12]
    64d0:	2b02      	cmp	r3, #2
    64d2:	d11d      	bne.n	6510 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    64d4:	f001 fa4a 	bl	796c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    64d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    64dc:	095b      	lsrs	r3, r3, #5
    64de:	b29b      	uxth	r3, r3
    64e0:	461a      	mov	r2, r3
    64e2:	4b51      	ldr	r3, [pc, #324]	; (6628 <Port_Ipw_RefreshPortDirection+0x1d4>)
    64e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64e8:	6959      	ldr	r1, [r3, #20]
    64ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    64ee:	f003 031f 	and.w	r3, r3, #31
    64f2:	2201      	movs	r2, #1
    64f4:	409a      	lsls	r2, r3
    64f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    64fa:	095b      	lsrs	r3, r3, #5
    64fc:	b29b      	uxth	r3, r3
    64fe:	4618      	mov	r0, r3
    6500:	4b49      	ldr	r3, [pc, #292]	; (6628 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6502:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6506:	430a      	orrs	r2, r1
    6508:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    650a:	f001 fa5b 	bl	79c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    650e:	e07a      	b.n	6606 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6510:	9b01      	ldr	r3, [sp, #4]
    6512:	68d9      	ldr	r1, [r3, #12]
    6514:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6518:	4613      	mov	r3, r2
    651a:	009b      	lsls	r3, r3, #2
    651c:	4413      	add	r3, r2
    651e:	009b      	lsls	r3, r3, #2
    6520:	440b      	add	r3, r1
    6522:	68db      	ldr	r3, [r3, #12]
    6524:	2b01      	cmp	r3, #1
    6526:	d00b      	beq.n	6540 <Port_Ipw_RefreshPortDirection+0xec>
    6528:	9b01      	ldr	r3, [sp, #4]
    652a:	68d9      	ldr	r1, [r3, #12]
    652c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6530:	4613      	mov	r3, r2
    6532:	009b      	lsls	r3, r3, #2
    6534:	4413      	add	r3, r2
    6536:	009b      	lsls	r3, r3, #2
    6538:	440b      	add	r3, r1
    653a:	68db      	ldr	r3, [r3, #12]
    653c:	2b03      	cmp	r3, #3
    653e:	d162      	bne.n	6606 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6540:	f001 fa14 	bl	796c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6544:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6548:	095b      	lsrs	r3, r3, #5
    654a:	b29b      	uxth	r3, r3
    654c:	461a      	mov	r2, r3
    654e:	4b36      	ldr	r3, [pc, #216]	; (6628 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6554:	6959      	ldr	r1, [r3, #20]
    6556:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    655a:	f003 031f 	and.w	r3, r3, #31
    655e:	2201      	movs	r2, #1
    6560:	fa02 f303 	lsl.w	r3, r2, r3
    6564:	43da      	mvns	r2, r3
    6566:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    656a:	095b      	lsrs	r3, r3, #5
    656c:	b29b      	uxth	r3, r3
    656e:	4618      	mov	r0, r3
    6570:	4b2d      	ldr	r3, [pc, #180]	; (6628 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6572:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6576:	400a      	ands	r2, r1
    6578:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    657a:	f001 fa23 	bl	79c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    657e:	f001 fa47 	bl	7a10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6582:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6586:	095b      	lsrs	r3, r3, #5
    6588:	b29b      	uxth	r3, r3
    658a:	461a      	mov	r2, r3
    658c:	4b26      	ldr	r3, [pc, #152]	; (6628 <Port_Ipw_RefreshPortDirection+0x1d4>)
    658e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6592:	6999      	ldr	r1, [r3, #24]
    6594:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6598:	f003 031f 	and.w	r3, r3, #31
    659c:	2201      	movs	r2, #1
    659e:	fa02 f303 	lsl.w	r3, r2, r3
    65a2:	43da      	mvns	r2, r3
    65a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    65a8:	095b      	lsrs	r3, r3, #5
    65aa:	b29b      	uxth	r3, r3
    65ac:	4618      	mov	r0, r3
    65ae:	4b1e      	ldr	r3, [pc, #120]	; (6628 <Port_Ipw_RefreshPortDirection+0x1d4>)
    65b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    65b4:	400a      	ands	r2, r1
    65b6:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    65b8:	9b01      	ldr	r3, [sp, #4]
    65ba:	68d9      	ldr	r1, [r3, #12]
    65bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    65c0:	4613      	mov	r3, r2
    65c2:	009b      	lsls	r3, r3, #2
    65c4:	4413      	add	r3, r2
    65c6:	009b      	lsls	r3, r3, #2
    65c8:	440b      	add	r3, r1
    65ca:	68db      	ldr	r3, [r3, #12]
    65cc:	2b03      	cmp	r3, #3
    65ce:	d118      	bne.n	6602 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    65d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    65d4:	095b      	lsrs	r3, r3, #5
    65d6:	b29b      	uxth	r3, r3
    65d8:	461a      	mov	r2, r3
    65da:	4b13      	ldr	r3, [pc, #76]	; (6628 <Port_Ipw_RefreshPortDirection+0x1d4>)
    65dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65e0:	6999      	ldr	r1, [r3, #24]
    65e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    65e6:	f003 031f 	and.w	r3, r3, #31
    65ea:	2201      	movs	r2, #1
    65ec:	409a      	lsls	r2, r3
    65ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    65f2:	095b      	lsrs	r3, r3, #5
    65f4:	b29b      	uxth	r3, r3
    65f6:	4618      	mov	r0, r3
    65f8:	4b0b      	ldr	r3, [pc, #44]	; (6628 <Port_Ipw_RefreshPortDirection+0x1d4>)
    65fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    65fe:	430a      	orrs	r2, r1
    6600:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6602:	f001 fa31 	bl	7a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6606:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    660a:	3301      	adds	r3, #1
    660c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6610:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6614:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6618:	429a      	cmp	r2, r3
    661a:	f4ff af26 	bcc.w	646a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    661e:	bf00      	nop
    6620:	bf00      	nop
    6622:	b005      	add	sp, #20
    6624:	f85d fb04 	ldr.w	pc, [sp], #4
    6628:	000086cc 	.word	0x000086cc

0000662c <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    662c:	b500      	push	{lr}
    662e:	b085      	sub	sp, #20
    6630:	4603      	mov	r3, r0
    6632:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6636:	2300      	movs	r3, #0
    6638:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    663c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6640:	4618      	mov	r0, r3
    6642:	f000 f871 	bl	6728 <Dio_Ipw_ReadChannel>
    6646:	4603      	mov	r3, r0
    6648:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    664c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6650:	4618      	mov	r0, r3
    6652:	b005      	add	sp, #20
    6654:	f85d fb04 	ldr.w	pc, [sp], #4

00006658 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6658:	b500      	push	{lr}
    665a:	b083      	sub	sp, #12
    665c:	4603      	mov	r3, r0
    665e:	460a      	mov	r2, r1
    6660:	f8ad 3006 	strh.w	r3, [sp, #6]
    6664:	4613      	mov	r3, r2
    6666:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    666a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    666e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6672:	4611      	mov	r1, r2
    6674:	4618      	mov	r0, r3
    6676:	f000 f87d 	bl	6774 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    667a:	bf00      	nop
    667c:	b003      	add	sp, #12
    667e:	f85d fb04 	ldr.w	pc, [sp], #4

00006682 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6682:	b500      	push	{lr}
    6684:	b085      	sub	sp, #20
    6686:	4603      	mov	r3, r0
    6688:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    668c:	2300      	movs	r3, #0
    668e:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    6692:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6696:	4618      	mov	r0, r3
    6698:	f000 f892 	bl	67c0 <Dio_Ipw_FlipChannel>
    669c:	4603      	mov	r3, r0
    669e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    66a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    66a6:	4618      	mov	r0, r3
    66a8:	b005      	add	sp, #20
    66aa:	f85d fb04 	ldr.w	pc, [sp], #4

000066ae <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    66ae:	b500      	push	{lr}
    66b0:	b085      	sub	sp, #20
    66b2:	4603      	mov	r3, r0
    66b4:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    66b8:	2300      	movs	r3, #0
    66ba:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    66bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66c0:	4618      	mov	r0, r3
    66c2:	f000 f8b3 	bl	682c <Dio_Ipw_ReadPort>
    66c6:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    66c8:	9b03      	ldr	r3, [sp, #12]
}
    66ca:	4618      	mov	r0, r3
    66cc:	b005      	add	sp, #20
    66ce:	f85d fb04 	ldr.w	pc, [sp], #4

000066d2 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    66d2:	b500      	push	{lr}
    66d4:	b083      	sub	sp, #12
    66d6:	4603      	mov	r3, r0
    66d8:	9100      	str	r1, [sp, #0]
    66da:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    66de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66e2:	9900      	ldr	r1, [sp, #0]
    66e4:	4618      	mov	r0, r3
    66e6:	f000 f8b9 	bl	685c <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    66ea:	bf00      	nop
    66ec:	b003      	add	sp, #12
    66ee:	f85d fb04 	ldr.w	pc, [sp], #4

000066f2 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    66f2:	b500      	push	{lr}
    66f4:	b085      	sub	sp, #20
    66f6:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    66f8:	2300      	movs	r3, #0
    66fa:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    66fc:	9801      	ldr	r0, [sp, #4]
    66fe:	f000 f8c5 	bl	688c <Dio_Ipw_ReadChannelGroup>
    6702:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6704:	9b03      	ldr	r3, [sp, #12]
}
    6706:	4618      	mov	r0, r3
    6708:	b005      	add	sp, #20
    670a:	f85d fb04 	ldr.w	pc, [sp], #4

0000670e <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    670e:	b500      	push	{lr}
    6710:	b083      	sub	sp, #12
    6712:	9001      	str	r0, [sp, #4]
    6714:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    6716:	9900      	ldr	r1, [sp, #0]
    6718:	9801      	ldr	r0, [sp, #4]
    671a:	f000 f8d7 	bl	68cc <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    671e:	bf00      	nop
    6720:	b003      	add	sp, #12
    6722:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006728 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6728:	b500      	push	{lr}
    672a:	b087      	sub	sp, #28
    672c:	4603      	mov	r3, r0
    672e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    6732:	2300      	movs	r3, #0
    6734:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6738:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    673c:	095b      	lsrs	r3, r3, #5
    673e:	b29b      	uxth	r3, r3
    6740:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6742:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6746:	f003 031f 	and.w	r3, r3, #31
    674a:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    674c:	4a08      	ldr	r2, [pc, #32]	; (6770 <Dio_Ipw_ReadChannel+0x48>)
    674e:	9b04      	ldr	r3, [sp, #16]
    6750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6754:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    6756:	9903      	ldr	r1, [sp, #12]
    6758:	9802      	ldr	r0, [sp, #8]
    675a:	f000 f940 	bl	69de <Gpio_Dio_Ip_ReadPin>
    675e:	4603      	mov	r3, r0
    6760:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    6764:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6768:	4618      	mov	r0, r3
    676a:	b007      	add	sp, #28
    676c:	f85d fb04 	ldr.w	pc, [sp], #4
    6770:	1fff8b2c 	.word	0x1fff8b2c

00006774 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6774:	b500      	push	{lr}
    6776:	b087      	sub	sp, #28
    6778:	4603      	mov	r3, r0
    677a:	460a      	mov	r2, r1
    677c:	f8ad 3006 	strh.w	r3, [sp, #6]
    6780:	4613      	mov	r3, r2
    6782:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6786:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    678a:	095b      	lsrs	r3, r3, #5
    678c:	b29b      	uxth	r3, r3
    678e:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6790:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6794:	f003 031f 	and.w	r3, r3, #31
    6798:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    679a:	4a08      	ldr	r2, [pc, #32]	; (67bc <Dio_Ipw_WriteChannel+0x48>)
    679c:	9b05      	ldr	r3, [sp, #20]
    679e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67a2:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    67a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    67a8:	461a      	mov	r2, r3
    67aa:	9904      	ldr	r1, [sp, #16]
    67ac:	9803      	ldr	r0, [sp, #12]
    67ae:	f000 f8b7 	bl	6920 <Gpio_Dio_Ip_WritePin>
}
    67b2:	bf00      	nop
    67b4:	b007      	add	sp, #28
    67b6:	f85d fb04 	ldr.w	pc, [sp], #4
    67ba:	bf00      	nop
    67bc:	1fff8b2c 	.word	0x1fff8b2c

000067c0 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    67c0:	b500      	push	{lr}
    67c2:	b089      	sub	sp, #36	; 0x24
    67c4:	4603      	mov	r3, r0
    67c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    67ca:	2300      	movs	r3, #0
    67cc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    67d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    67d4:	095b      	lsrs	r3, r3, #5
    67d6:	b29b      	uxth	r3, r3
    67d8:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    67da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    67de:	f003 031f 	and.w	r3, r3, #31
    67e2:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    67e4:	4a10      	ldr	r2, [pc, #64]	; (6828 <Dio_Ipw_FlipChannel+0x68>)
    67e6:	9b06      	ldr	r3, [sp, #24]
    67e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67ec:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    67ee:	2201      	movs	r2, #1
    67f0:	9b05      	ldr	r3, [sp, #20]
    67f2:	fa02 f303 	lsl.w	r3, r2, r3
    67f6:	4619      	mov	r1, r3
    67f8:	9804      	ldr	r0, [sp, #16]
    67fa:	f000 f8dc 	bl	69b6 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    67fe:	9804      	ldr	r0, [sp, #16]
    6800:	f000 f8bc 	bl	697c <Gpio_Dio_Ip_GetPinsOutput>
    6804:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6806:	2201      	movs	r2, #1
    6808:	9b05      	ldr	r3, [sp, #20]
    680a:	409a      	lsls	r2, r3
    680c:	9b03      	ldr	r3, [sp, #12]
    680e:	401a      	ands	r2, r3
    6810:	9b05      	ldr	r3, [sp, #20]
    6812:	fa22 f303 	lsr.w	r3, r2, r3
    6816:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    681a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    681e:	4618      	mov	r0, r3
    6820:	b009      	add	sp, #36	; 0x24
    6822:	f85d fb04 	ldr.w	pc, [sp], #4
    6826:	bf00      	nop
    6828:	1fff8b2c 	.word	0x1fff8b2c

0000682c <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    682c:	b500      	push	{lr}
    682e:	b085      	sub	sp, #20
    6830:	4603      	mov	r3, r0
    6832:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6836:	2300      	movs	r3, #0
    6838:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    683a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    683e:	4a06      	ldr	r2, [pc, #24]	; (6858 <Dio_Ipw_ReadPort+0x2c>)
    6840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6844:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6846:	9802      	ldr	r0, [sp, #8]
    6848:	f000 f8be 	bl	69c8 <Gpio_Dio_Ip_ReadPins>
    684c:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    684e:	9b03      	ldr	r3, [sp, #12]
}
    6850:	4618      	mov	r0, r3
    6852:	b005      	add	sp, #20
    6854:	f85d fb04 	ldr.w	pc, [sp], #4
    6858:	1fff8b2c 	.word	0x1fff8b2c

0000685c <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    685c:	b500      	push	{lr}
    685e:	b085      	sub	sp, #20
    6860:	4603      	mov	r3, r0
    6862:	9100      	str	r1, [sp, #0]
    6864:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6868:	9b00      	ldr	r3, [sp, #0]
    686a:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    686c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6870:	4a05      	ldr	r2, [pc, #20]	; (6888 <Dio_Ipw_WritePort+0x2c>)
    6872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6876:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6878:	9903      	ldr	r1, [sp, #12]
    687a:	9802      	ldr	r0, [sp, #8]
    687c:	f000 f875 	bl	696a <Gpio_Dio_Ip_WritePins>
}
    6880:	bf00      	nop
    6882:	b005      	add	sp, #20
    6884:	f85d fb04 	ldr.w	pc, [sp], #4
    6888:	1fff8b2c 	.word	0x1fff8b2c

0000688c <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    688c:	b500      	push	{lr}
    688e:	b087      	sub	sp, #28
    6890:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6892:	2300      	movs	r3, #0
    6894:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6896:	9b01      	ldr	r3, [sp, #4]
    6898:	781b      	ldrb	r3, [r3, #0]
    689a:	461a      	mov	r2, r3
    689c:	4b0a      	ldr	r3, [pc, #40]	; (68c8 <Dio_Ipw_ReadChannelGroup+0x3c>)
    689e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68a2:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    68a4:	9804      	ldr	r0, [sp, #16]
    68a6:	f000 f88f 	bl	69c8 <Gpio_Dio_Ip_ReadPins>
    68aa:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    68ac:	9b01      	ldr	r3, [sp, #4]
    68ae:	685a      	ldr	r2, [r3, #4]
    68b0:	9b03      	ldr	r3, [sp, #12]
    68b2:	4013      	ands	r3, r2
    68b4:	9a01      	ldr	r2, [sp, #4]
    68b6:	7852      	ldrb	r2, [r2, #1]
    68b8:	40d3      	lsrs	r3, r2
    68ba:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    68bc:	9b05      	ldr	r3, [sp, #20]
}
    68be:	4618      	mov	r0, r3
    68c0:	b007      	add	sp, #28
    68c2:	f85d fb04 	ldr.w	pc, [sp], #4
    68c6:	bf00      	nop
    68c8:	1fff8b2c 	.word	0x1fff8b2c

000068cc <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    68cc:	b500      	push	{lr}
    68ce:	b087      	sub	sp, #28
    68d0:	9001      	str	r0, [sp, #4]
    68d2:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    68d4:	9b01      	ldr	r3, [sp, #4]
    68d6:	781b      	ldrb	r3, [r3, #0]
    68d8:	461a      	mov	r2, r3
    68da:	4b10      	ldr	r3, [pc, #64]	; (691c <Dio_Ipw_WriteChannelGroup+0x50>)
    68dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68e0:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    68e2:	9b01      	ldr	r3, [sp, #4]
    68e4:	785b      	ldrb	r3, [r3, #1]
    68e6:	461a      	mov	r2, r3
    68e8:	9b00      	ldr	r3, [sp, #0]
    68ea:	fa03 f202 	lsl.w	r2, r3, r2
    68ee:	9b01      	ldr	r3, [sp, #4]
    68f0:	685b      	ldr	r3, [r3, #4]
    68f2:	4013      	ands	r3, r2
    68f4:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    68f6:	9904      	ldr	r1, [sp, #16]
    68f8:	9805      	ldr	r0, [sp, #20]
    68fa:	f000 f84a 	bl	6992 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    68fe:	9b04      	ldr	r3, [sp, #16]
    6900:	43da      	mvns	r2, r3
    6902:	9b01      	ldr	r3, [sp, #4]
    6904:	685b      	ldr	r3, [r3, #4]
    6906:	4013      	ands	r3, r2
    6908:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    690a:	9903      	ldr	r1, [sp, #12]
    690c:	9805      	ldr	r0, [sp, #20]
    690e:	f000 f849 	bl	69a4 <Gpio_Dio_Ip_ClearPins>

}
    6912:	bf00      	nop
    6914:	b007      	add	sp, #28
    6916:	f85d fb04 	ldr.w	pc, [sp], #4
    691a:	bf00      	nop
    691c:	1fff8b2c 	.word	0x1fff8b2c

00006920 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6920:	b500      	push	{lr}
    6922:	b087      	sub	sp, #28
    6924:	9003      	str	r0, [sp, #12]
    6926:	9102      	str	r1, [sp, #8]
    6928:	4613      	mov	r3, r2
    692a:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    692e:	f000 f86d 	bl	6a0c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6932:	9b03      	ldr	r3, [sp, #12]
    6934:	681b      	ldr	r3, [r3, #0]
    6936:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6938:	2201      	movs	r2, #1
    693a:	9b02      	ldr	r3, [sp, #8]
    693c:	fa02 f303 	lsl.w	r3, r2, r3
    6940:	43db      	mvns	r3, r3
    6942:	9a05      	ldr	r2, [sp, #20]
    6944:	4013      	ands	r3, r2
    6946:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6948:	f89d 2007 	ldrb.w	r2, [sp, #7]
    694c:	9b02      	ldr	r3, [sp, #8]
    694e:	fa02 f303 	lsl.w	r3, r2, r3
    6952:	9a05      	ldr	r2, [sp, #20]
    6954:	4313      	orrs	r3, r2
    6956:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6958:	9b03      	ldr	r3, [sp, #12]
    695a:	9a05      	ldr	r2, [sp, #20]
    695c:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    695e:	f000 f881 	bl	6a64 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6962:	bf00      	nop
    6964:	b007      	add	sp, #28
    6966:	f85d fb04 	ldr.w	pc, [sp], #4

0000696a <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    696a:	b082      	sub	sp, #8
    696c:	9001      	str	r0, [sp, #4]
    696e:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6970:	9b01      	ldr	r3, [sp, #4]
    6972:	9a00      	ldr	r2, [sp, #0]
    6974:	601a      	str	r2, [r3, #0]
}
    6976:	bf00      	nop
    6978:	b002      	add	sp, #8
    697a:	4770      	bx	lr

0000697c <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    697c:	b084      	sub	sp, #16
    697e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6980:	2300      	movs	r3, #0
    6982:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6984:	9b01      	ldr	r3, [sp, #4]
    6986:	681b      	ldr	r3, [r3, #0]
    6988:	9303      	str	r3, [sp, #12]
    return returnValue;
    698a:	9b03      	ldr	r3, [sp, #12]
}
    698c:	4618      	mov	r0, r3
    698e:	b004      	add	sp, #16
    6990:	4770      	bx	lr

00006992 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6992:	b082      	sub	sp, #8
    6994:	9001      	str	r0, [sp, #4]
    6996:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6998:	9b01      	ldr	r3, [sp, #4]
    699a:	9a00      	ldr	r2, [sp, #0]
    699c:	605a      	str	r2, [r3, #4]
}
    699e:	bf00      	nop
    69a0:	b002      	add	sp, #8
    69a2:	4770      	bx	lr

000069a4 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    69a4:	b082      	sub	sp, #8
    69a6:	9001      	str	r0, [sp, #4]
    69a8:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    69aa:	9b01      	ldr	r3, [sp, #4]
    69ac:	9a00      	ldr	r2, [sp, #0]
    69ae:	609a      	str	r2, [r3, #8]
}
    69b0:	bf00      	nop
    69b2:	b002      	add	sp, #8
    69b4:	4770      	bx	lr

000069b6 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    69b6:	b082      	sub	sp, #8
    69b8:	9001      	str	r0, [sp, #4]
    69ba:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    69bc:	9b01      	ldr	r3, [sp, #4]
    69be:	9a00      	ldr	r2, [sp, #0]
    69c0:	60da      	str	r2, [r3, #12]
}
    69c2:	bf00      	nop
    69c4:	b002      	add	sp, #8
    69c6:	4770      	bx	lr

000069c8 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    69c8:	b084      	sub	sp, #16
    69ca:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    69cc:	2300      	movs	r3, #0
    69ce:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    69d0:	9b01      	ldr	r3, [sp, #4]
    69d2:	691b      	ldr	r3, [r3, #16]
    69d4:	9303      	str	r3, [sp, #12]
    return returnValue;
    69d6:	9b03      	ldr	r3, [sp, #12]
}
    69d8:	4618      	mov	r0, r3
    69da:	b004      	add	sp, #16
    69dc:	4770      	bx	lr

000069de <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    69de:	b084      	sub	sp, #16
    69e0:	9001      	str	r0, [sp, #4]
    69e2:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    69e4:	2300      	movs	r3, #0
    69e6:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    69ea:	9b01      	ldr	r3, [sp, #4]
    69ec:	691a      	ldr	r2, [r3, #16]
    69ee:	2101      	movs	r1, #1
    69f0:	9b00      	ldr	r3, [sp, #0]
    69f2:	fa01 f303 	lsl.w	r3, r1, r3
    69f6:	401a      	ands	r2, r3
    69f8:	9b00      	ldr	r3, [sp, #0]
    69fa:	fa22 f303 	lsr.w	r3, r2, r3
    69fe:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6a02:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6a06:	4618      	mov	r0, r3
    6a08:	b004      	add	sp, #16
    6a0a:	4770      	bx	lr

00006a0c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    6a0c:	b500      	push	{lr}
    6a0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a10:	f7fa fdd6 	bl	15c0 <Sys_GetCoreID>
    6a14:	4603      	mov	r3, r0
    6a16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    6a18:	4a10      	ldr	r2, [pc, #64]	; (6a5c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    6a1a:	9b01      	ldr	r3, [sp, #4]
    6a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a20:	2b00      	cmp	r3, #0
    6a22:	d10d      	bne.n	6a40 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6a24:	f7f9 ff50 	bl	8c8 <Dio_schm_read_msr>
    6a28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6a2a:	9b00      	ldr	r3, [sp, #0]
    6a2c:	f003 0301 	and.w	r3, r3, #1
    6a30:	2b00      	cmp	r3, #0
    6a32:	d100      	bne.n	6a36 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6a34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6a36:	490a      	ldr	r1, [pc, #40]	; (6a60 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    6a38:	9b01      	ldr	r3, [sp, #4]
    6a3a:	9a00      	ldr	r2, [sp, #0]
    6a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    6a40:	4a06      	ldr	r2, [pc, #24]	; (6a5c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    6a42:	9b01      	ldr	r3, [sp, #4]
    6a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a48:	1c5a      	adds	r2, r3, #1
    6a4a:	4904      	ldr	r1, [pc, #16]	; (6a5c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    6a4c:	9b01      	ldr	r3, [sp, #4]
    6a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a52:	bf00      	nop
    6a54:	b003      	add	sp, #12
    6a56:	f85d fb04 	ldr.w	pc, [sp], #4
    6a5a:	bf00      	nop
    6a5c:	1fff8d14 	.word	0x1fff8d14
    6a60:	1fff8d10 	.word	0x1fff8d10

00006a64 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    6a64:	b500      	push	{lr}
    6a66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a68:	f7fa fdaa 	bl	15c0 <Sys_GetCoreID>
    6a6c:	4603      	mov	r3, r0
    6a6e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    6a70:	4a0d      	ldr	r2, [pc, #52]	; (6aa8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6a72:	9b01      	ldr	r3, [sp, #4]
    6a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a78:	1e5a      	subs	r2, r3, #1
    6a7a:	490b      	ldr	r1, [pc, #44]	; (6aa8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6a7c:	9b01      	ldr	r3, [sp, #4]
    6a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6a82:	4a0a      	ldr	r2, [pc, #40]	; (6aac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    6a84:	9b01      	ldr	r3, [sp, #4]
    6a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a8a:	f003 0301 	and.w	r3, r3, #1
    6a8e:	2b00      	cmp	r3, #0
    6a90:	d106      	bne.n	6aa0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    6a92:	4a05      	ldr	r2, [pc, #20]	; (6aa8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6a94:	9b01      	ldr	r3, [sp, #4]
    6a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a9a:	2b00      	cmp	r3, #0
    6a9c:	d100      	bne.n	6aa0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6a9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6aa0:	bf00      	nop
    6aa2:	b003      	add	sp, #12
    6aa4:	f85d fb04 	ldr.w	pc, [sp], #4
    6aa8:	1fff8d14 	.word	0x1fff8d14
    6aac:	1fff8d10 	.word	0x1fff8d10

00006ab0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6ab0:	b500      	push	{lr}
    6ab2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ab4:	f7fa fd84 	bl	15c0 <Sys_GetCoreID>
    6ab8:	4603      	mov	r3, r0
    6aba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    6abc:	4a10      	ldr	r2, [pc, #64]	; (6b00 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6abe:	9b01      	ldr	r3, [sp, #4]
    6ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ac4:	2b00      	cmp	r3, #0
    6ac6:	d10d      	bne.n	6ae4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ac8:	f7f9 fefe 	bl	8c8 <Dio_schm_read_msr>
    6acc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6ace:	9b00      	ldr	r3, [sp, #0]
    6ad0:	f003 0301 	and.w	r3, r3, #1
    6ad4:	2b00      	cmp	r3, #0
    6ad6:	d100      	bne.n	6ada <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6ad8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6ada:	490a      	ldr	r1, [pc, #40]	; (6b04 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    6adc:	9b01      	ldr	r3, [sp, #4]
    6ade:	9a00      	ldr	r2, [sp, #0]
    6ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    6ae4:	4a06      	ldr	r2, [pc, #24]	; (6b00 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6ae6:	9b01      	ldr	r3, [sp, #4]
    6ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aec:	1c5a      	adds	r2, r3, #1
    6aee:	4904      	ldr	r1, [pc, #16]	; (6b00 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6af0:	9b01      	ldr	r3, [sp, #4]
    6af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6af6:	bf00      	nop
    6af8:	b003      	add	sp, #12
    6afa:	f85d fb04 	ldr.w	pc, [sp], #4
    6afe:	bf00      	nop
    6b00:	1fff8d1c 	.word	0x1fff8d1c
    6b04:	1fff8d18 	.word	0x1fff8d18

00006b08 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6b08:	b500      	push	{lr}
    6b0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b0c:	f7fa fd58 	bl	15c0 <Sys_GetCoreID>
    6b10:	4603      	mov	r3, r0
    6b12:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    6b14:	4a0d      	ldr	r2, [pc, #52]	; (6b4c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6b16:	9b01      	ldr	r3, [sp, #4]
    6b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b1c:	1e5a      	subs	r2, r3, #1
    6b1e:	490b      	ldr	r1, [pc, #44]	; (6b4c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6b20:	9b01      	ldr	r3, [sp, #4]
    6b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6b26:	4a0a      	ldr	r2, [pc, #40]	; (6b50 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    6b28:	9b01      	ldr	r3, [sp, #4]
    6b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b2e:	f003 0301 	and.w	r3, r3, #1
    6b32:	2b00      	cmp	r3, #0
    6b34:	d106      	bne.n	6b44 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    6b36:	4a05      	ldr	r2, [pc, #20]	; (6b4c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6b38:	9b01      	ldr	r3, [sp, #4]
    6b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d100      	bne.n	6b44 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6b42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6b44:	bf00      	nop
    6b46:	b003      	add	sp, #12
    6b48:	f85d fb04 	ldr.w	pc, [sp], #4
    6b4c:	1fff8d1c 	.word	0x1fff8d1c
    6b50:	1fff8d18 	.word	0x1fff8d18

00006b54 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    6b54:	b500      	push	{lr}
    6b56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b58:	f7fa fd32 	bl	15c0 <Sys_GetCoreID>
    6b5c:	4603      	mov	r3, r0
    6b5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    6b60:	4a10      	ldr	r2, [pc, #64]	; (6ba4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6b62:	9b01      	ldr	r3, [sp, #4]
    6b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b68:	2b00      	cmp	r3, #0
    6b6a:	d10d      	bne.n	6b88 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6b6c:	f7f9 feb5 	bl	8da <Mcu_schm_read_msr>
    6b70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6b72:	9b00      	ldr	r3, [sp, #0]
    6b74:	f003 0301 	and.w	r3, r3, #1
    6b78:	2b00      	cmp	r3, #0
    6b7a:	d100      	bne.n	6b7e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6b7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6b7e:	490a      	ldr	r1, [pc, #40]	; (6ba8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    6b80:	9b01      	ldr	r3, [sp, #4]
    6b82:	9a00      	ldr	r2, [sp, #0]
    6b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    6b88:	4a06      	ldr	r2, [pc, #24]	; (6ba4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6b8a:	9b01      	ldr	r3, [sp, #4]
    6b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b90:	1c5a      	adds	r2, r3, #1
    6b92:	4904      	ldr	r1, [pc, #16]	; (6ba4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6b94:	9b01      	ldr	r3, [sp, #4]
    6b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b9a:	bf00      	nop
    6b9c:	b003      	add	sp, #12
    6b9e:	f85d fb04 	ldr.w	pc, [sp], #4
    6ba2:	bf00      	nop
    6ba4:	1fff8d24 	.word	0x1fff8d24
    6ba8:	1fff8d20 	.word	0x1fff8d20

00006bac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    6bac:	b500      	push	{lr}
    6bae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6bb0:	f7fa fd06 	bl	15c0 <Sys_GetCoreID>
    6bb4:	4603      	mov	r3, r0
    6bb6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    6bb8:	4a0d      	ldr	r2, [pc, #52]	; (6bf0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6bba:	9b01      	ldr	r3, [sp, #4]
    6bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bc0:	1e5a      	subs	r2, r3, #1
    6bc2:	490b      	ldr	r1, [pc, #44]	; (6bf0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6bc4:	9b01      	ldr	r3, [sp, #4]
    6bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6bca:	4a0a      	ldr	r2, [pc, #40]	; (6bf4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    6bcc:	9b01      	ldr	r3, [sp, #4]
    6bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bd2:	f003 0301 	and.w	r3, r3, #1
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d106      	bne.n	6be8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    6bda:	4a05      	ldr	r2, [pc, #20]	; (6bf0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6bdc:	9b01      	ldr	r3, [sp, #4]
    6bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6be2:	2b00      	cmp	r3, #0
    6be4:	d100      	bne.n	6be8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6be6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6be8:	bf00      	nop
    6bea:	b003      	add	sp, #12
    6bec:	f85d fb04 	ldr.w	pc, [sp], #4
    6bf0:	1fff8d24 	.word	0x1fff8d24
    6bf4:	1fff8d20 	.word	0x1fff8d20

00006bf8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    6bf8:	b500      	push	{lr}
    6bfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6bfc:	f7fa fce0 	bl	15c0 <Sys_GetCoreID>
    6c00:	4603      	mov	r3, r0
    6c02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    6c04:	4a10      	ldr	r2, [pc, #64]	; (6c48 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6c06:	9b01      	ldr	r3, [sp, #4]
    6c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c0c:	2b00      	cmp	r3, #0
    6c0e:	d10d      	bne.n	6c2c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6c10:	f7f9 fe63 	bl	8da <Mcu_schm_read_msr>
    6c14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6c16:	9b00      	ldr	r3, [sp, #0]
    6c18:	f003 0301 	and.w	r3, r3, #1
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d100      	bne.n	6c22 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6c20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6c22:	490a      	ldr	r1, [pc, #40]	; (6c4c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    6c24:	9b01      	ldr	r3, [sp, #4]
    6c26:	9a00      	ldr	r2, [sp, #0]
    6c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    6c2c:	4a06      	ldr	r2, [pc, #24]	; (6c48 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6c2e:	9b01      	ldr	r3, [sp, #4]
    6c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c34:	1c5a      	adds	r2, r3, #1
    6c36:	4904      	ldr	r1, [pc, #16]	; (6c48 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6c38:	9b01      	ldr	r3, [sp, #4]
    6c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c3e:	bf00      	nop
    6c40:	b003      	add	sp, #12
    6c42:	f85d fb04 	ldr.w	pc, [sp], #4
    6c46:	bf00      	nop
    6c48:	1fff8d2c 	.word	0x1fff8d2c
    6c4c:	1fff8d28 	.word	0x1fff8d28

00006c50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    6c50:	b500      	push	{lr}
    6c52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c54:	f7fa fcb4 	bl	15c0 <Sys_GetCoreID>
    6c58:	4603      	mov	r3, r0
    6c5a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    6c5c:	4a0d      	ldr	r2, [pc, #52]	; (6c94 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6c5e:	9b01      	ldr	r3, [sp, #4]
    6c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c64:	1e5a      	subs	r2, r3, #1
    6c66:	490b      	ldr	r1, [pc, #44]	; (6c94 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6c68:	9b01      	ldr	r3, [sp, #4]
    6c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6c6e:	4a0a      	ldr	r2, [pc, #40]	; (6c98 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    6c70:	9b01      	ldr	r3, [sp, #4]
    6c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c76:	f003 0301 	and.w	r3, r3, #1
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	d106      	bne.n	6c8c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    6c7e:	4a05      	ldr	r2, [pc, #20]	; (6c94 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6c80:	9b01      	ldr	r3, [sp, #4]
    6c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c86:	2b00      	cmp	r3, #0
    6c88:	d100      	bne.n	6c8c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6c8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6c8c:	bf00      	nop
    6c8e:	b003      	add	sp, #12
    6c90:	f85d fb04 	ldr.w	pc, [sp], #4
    6c94:	1fff8d2c 	.word	0x1fff8d2c
    6c98:	1fff8d28 	.word	0x1fff8d28

00006c9c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6c9c:	b500      	push	{lr}
    6c9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ca0:	f7fa fc8e 	bl	15c0 <Sys_GetCoreID>
    6ca4:	4603      	mov	r3, r0
    6ca6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    6ca8:	4a10      	ldr	r2, [pc, #64]	; (6cec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6caa:	9b01      	ldr	r3, [sp, #4]
    6cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cb0:	2b00      	cmp	r3, #0
    6cb2:	d10d      	bne.n	6cd0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6cb4:	f7f9 fe11 	bl	8da <Mcu_schm_read_msr>
    6cb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6cba:	9b00      	ldr	r3, [sp, #0]
    6cbc:	f003 0301 	and.w	r3, r3, #1
    6cc0:	2b00      	cmp	r3, #0
    6cc2:	d100      	bne.n	6cc6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6cc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6cc6:	490a      	ldr	r1, [pc, #40]	; (6cf0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    6cc8:	9b01      	ldr	r3, [sp, #4]
    6cca:	9a00      	ldr	r2, [sp, #0]
    6ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    6cd0:	4a06      	ldr	r2, [pc, #24]	; (6cec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6cd2:	9b01      	ldr	r3, [sp, #4]
    6cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cd8:	1c5a      	adds	r2, r3, #1
    6cda:	4904      	ldr	r1, [pc, #16]	; (6cec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6cdc:	9b01      	ldr	r3, [sp, #4]
    6cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6ce2:	bf00      	nop
    6ce4:	b003      	add	sp, #12
    6ce6:	f85d fb04 	ldr.w	pc, [sp], #4
    6cea:	bf00      	nop
    6cec:	1fff8d34 	.word	0x1fff8d34
    6cf0:	1fff8d30 	.word	0x1fff8d30

00006cf4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6cf4:	b500      	push	{lr}
    6cf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6cf8:	f7fa fc62 	bl	15c0 <Sys_GetCoreID>
    6cfc:	4603      	mov	r3, r0
    6cfe:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    6d00:	4a0d      	ldr	r2, [pc, #52]	; (6d38 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6d02:	9b01      	ldr	r3, [sp, #4]
    6d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d08:	1e5a      	subs	r2, r3, #1
    6d0a:	490b      	ldr	r1, [pc, #44]	; (6d38 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6d0c:	9b01      	ldr	r3, [sp, #4]
    6d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    6d12:	4a0a      	ldr	r2, [pc, #40]	; (6d3c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    6d14:	9b01      	ldr	r3, [sp, #4]
    6d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d1a:	f003 0301 	and.w	r3, r3, #1
    6d1e:	2b00      	cmp	r3, #0
    6d20:	d106      	bne.n	6d30 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    6d22:	4a05      	ldr	r2, [pc, #20]	; (6d38 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6d24:	9b01      	ldr	r3, [sp, #4]
    6d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	d100      	bne.n	6d30 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6d30:	bf00      	nop
    6d32:	b003      	add	sp, #12
    6d34:	f85d fb04 	ldr.w	pc, [sp], #4
    6d38:	1fff8d34 	.word	0x1fff8d34
    6d3c:	1fff8d30 	.word	0x1fff8d30

00006d40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6d40:	b500      	push	{lr}
    6d42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d44:	f7fa fc3c 	bl	15c0 <Sys_GetCoreID>
    6d48:	4603      	mov	r3, r0
    6d4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    6d4c:	4a10      	ldr	r2, [pc, #64]	; (6d90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6d4e:	9b01      	ldr	r3, [sp, #4]
    6d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d54:	2b00      	cmp	r3, #0
    6d56:	d10d      	bne.n	6d74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6d58:	f7f9 fdc8 	bl	8ec <Port_schm_read_msr>
    6d5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d5e:	9b00      	ldr	r3, [sp, #0]
    6d60:	f003 0301 	and.w	r3, r3, #1
    6d64:	2b00      	cmp	r3, #0
    6d66:	d100      	bne.n	6d6a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6d68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6d6a:	490a      	ldr	r1, [pc, #40]	; (6d94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    6d6c:	9b01      	ldr	r3, [sp, #4]
    6d6e:	9a00      	ldr	r2, [sp, #0]
    6d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    6d74:	4a06      	ldr	r2, [pc, #24]	; (6d90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6d76:	9b01      	ldr	r3, [sp, #4]
    6d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d7c:	1c5a      	adds	r2, r3, #1
    6d7e:	4904      	ldr	r1, [pc, #16]	; (6d90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6d80:	9b01      	ldr	r3, [sp, #4]
    6d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d86:	bf00      	nop
    6d88:	b003      	add	sp, #12
    6d8a:	f85d fb04 	ldr.w	pc, [sp], #4
    6d8e:	bf00      	nop
    6d90:	1fff8d3c 	.word	0x1fff8d3c
    6d94:	1fff8d38 	.word	0x1fff8d38

00006d98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6d98:	b500      	push	{lr}
    6d9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d9c:	f7fa fc10 	bl	15c0 <Sys_GetCoreID>
    6da0:	4603      	mov	r3, r0
    6da2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    6da4:	4a0d      	ldr	r2, [pc, #52]	; (6ddc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6da6:	9b01      	ldr	r3, [sp, #4]
    6da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dac:	1e5a      	subs	r2, r3, #1
    6dae:	490b      	ldr	r1, [pc, #44]	; (6ddc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6db0:	9b01      	ldr	r3, [sp, #4]
    6db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6db6:	4a0a      	ldr	r2, [pc, #40]	; (6de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    6db8:	9b01      	ldr	r3, [sp, #4]
    6dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dbe:	f003 0301 	and.w	r3, r3, #1
    6dc2:	2b00      	cmp	r3, #0
    6dc4:	d106      	bne.n	6dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    6dc6:	4a05      	ldr	r2, [pc, #20]	; (6ddc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6dc8:	9b01      	ldr	r3, [sp, #4]
    6dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dce:	2b00      	cmp	r3, #0
    6dd0:	d100      	bne.n	6dd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6dd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6dd4:	bf00      	nop
    6dd6:	b003      	add	sp, #12
    6dd8:	f85d fb04 	ldr.w	pc, [sp], #4
    6ddc:	1fff8d3c 	.word	0x1fff8d3c
    6de0:	1fff8d38 	.word	0x1fff8d38

00006de4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    6de4:	b500      	push	{lr}
    6de6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6de8:	f7fa fbea 	bl	15c0 <Sys_GetCoreID>
    6dec:	4603      	mov	r3, r0
    6dee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    6df0:	4a10      	ldr	r2, [pc, #64]	; (6e34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6df2:	9b01      	ldr	r3, [sp, #4]
    6df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6df8:	2b00      	cmp	r3, #0
    6dfa:	d10d      	bne.n	6e18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6dfc:	f7f9 fd76 	bl	8ec <Port_schm_read_msr>
    6e00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e02:	9b00      	ldr	r3, [sp, #0]
    6e04:	f003 0301 	and.w	r3, r3, #1
    6e08:	2b00      	cmp	r3, #0
    6e0a:	d100      	bne.n	6e0e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6e0e:	490a      	ldr	r1, [pc, #40]	; (6e38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    6e10:	9b01      	ldr	r3, [sp, #4]
    6e12:	9a00      	ldr	r2, [sp, #0]
    6e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    6e18:	4a06      	ldr	r2, [pc, #24]	; (6e34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6e1a:	9b01      	ldr	r3, [sp, #4]
    6e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e20:	1c5a      	adds	r2, r3, #1
    6e22:	4904      	ldr	r1, [pc, #16]	; (6e34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6e24:	9b01      	ldr	r3, [sp, #4]
    6e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e2a:	bf00      	nop
    6e2c:	b003      	add	sp, #12
    6e2e:	f85d fb04 	ldr.w	pc, [sp], #4
    6e32:	bf00      	nop
    6e34:	1fff8d44 	.word	0x1fff8d44
    6e38:	1fff8d40 	.word	0x1fff8d40

00006e3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    6e3c:	b500      	push	{lr}
    6e3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e40:	f7fa fbbe 	bl	15c0 <Sys_GetCoreID>
    6e44:	4603      	mov	r3, r0
    6e46:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    6e48:	4a0d      	ldr	r2, [pc, #52]	; (6e80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6e4a:	9b01      	ldr	r3, [sp, #4]
    6e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e50:	1e5a      	subs	r2, r3, #1
    6e52:	490b      	ldr	r1, [pc, #44]	; (6e80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6e54:	9b01      	ldr	r3, [sp, #4]
    6e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6e5a:	4a0a      	ldr	r2, [pc, #40]	; (6e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    6e5c:	9b01      	ldr	r3, [sp, #4]
    6e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e62:	f003 0301 	and.w	r3, r3, #1
    6e66:	2b00      	cmp	r3, #0
    6e68:	d106      	bne.n	6e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    6e6a:	4a05      	ldr	r2, [pc, #20]	; (6e80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6e6c:	9b01      	ldr	r3, [sp, #4]
    6e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e72:	2b00      	cmp	r3, #0
    6e74:	d100      	bne.n	6e78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e78:	bf00      	nop
    6e7a:	b003      	add	sp, #12
    6e7c:	f85d fb04 	ldr.w	pc, [sp], #4
    6e80:	1fff8d44 	.word	0x1fff8d44
    6e84:	1fff8d40 	.word	0x1fff8d40

00006e88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6e88:	b500      	push	{lr}
    6e8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e8c:	f7fa fb98 	bl	15c0 <Sys_GetCoreID>
    6e90:	4603      	mov	r3, r0
    6e92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    6e94:	4a10      	ldr	r2, [pc, #64]	; (6ed8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6e96:	9b01      	ldr	r3, [sp, #4]
    6e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	d10d      	bne.n	6ebc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ea0:	f7f9 fd24 	bl	8ec <Port_schm_read_msr>
    6ea4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6ea6:	9b00      	ldr	r3, [sp, #0]
    6ea8:	f003 0301 	and.w	r3, r3, #1
    6eac:	2b00      	cmp	r3, #0
    6eae:	d100      	bne.n	6eb2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6eb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6eb2:	490a      	ldr	r1, [pc, #40]	; (6edc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    6eb4:	9b01      	ldr	r3, [sp, #4]
    6eb6:	9a00      	ldr	r2, [sp, #0]
    6eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    6ebc:	4a06      	ldr	r2, [pc, #24]	; (6ed8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6ebe:	9b01      	ldr	r3, [sp, #4]
    6ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ec4:	1c5a      	adds	r2, r3, #1
    6ec6:	4904      	ldr	r1, [pc, #16]	; (6ed8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6ec8:	9b01      	ldr	r3, [sp, #4]
    6eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6ece:	bf00      	nop
    6ed0:	b003      	add	sp, #12
    6ed2:	f85d fb04 	ldr.w	pc, [sp], #4
    6ed6:	bf00      	nop
    6ed8:	1fff8d4c 	.word	0x1fff8d4c
    6edc:	1fff8d48 	.word	0x1fff8d48

00006ee0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6ee0:	b500      	push	{lr}
    6ee2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ee4:	f7fa fb6c 	bl	15c0 <Sys_GetCoreID>
    6ee8:	4603      	mov	r3, r0
    6eea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    6eec:	4a0d      	ldr	r2, [pc, #52]	; (6f24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6eee:	9b01      	ldr	r3, [sp, #4]
    6ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ef4:	1e5a      	subs	r2, r3, #1
    6ef6:	490b      	ldr	r1, [pc, #44]	; (6f24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6ef8:	9b01      	ldr	r3, [sp, #4]
    6efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    6efe:	4a0a      	ldr	r2, [pc, #40]	; (6f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    6f00:	9b01      	ldr	r3, [sp, #4]
    6f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f06:	f003 0301 	and.w	r3, r3, #1
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d106      	bne.n	6f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    6f0e:	4a05      	ldr	r2, [pc, #20]	; (6f24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6f10:	9b01      	ldr	r3, [sp, #4]
    6f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f16:	2b00      	cmp	r3, #0
    6f18:	d100      	bne.n	6f1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f1c:	bf00      	nop
    6f1e:	b003      	add	sp, #12
    6f20:	f85d fb04 	ldr.w	pc, [sp], #4
    6f24:	1fff8d4c 	.word	0x1fff8d4c
    6f28:	1fff8d48 	.word	0x1fff8d48

00006f2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6f2c:	b500      	push	{lr}
    6f2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f30:	f7fa fb46 	bl	15c0 <Sys_GetCoreID>
    6f34:	4603      	mov	r3, r0
    6f36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    6f38:	4a10      	ldr	r2, [pc, #64]	; (6f7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6f3a:	9b01      	ldr	r3, [sp, #4]
    6f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f40:	2b00      	cmp	r3, #0
    6f42:	d10d      	bne.n	6f60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f44:	f7f9 fcd2 	bl	8ec <Port_schm_read_msr>
    6f48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6f4a:	9b00      	ldr	r3, [sp, #0]
    6f4c:	f003 0301 	and.w	r3, r3, #1
    6f50:	2b00      	cmp	r3, #0
    6f52:	d100      	bne.n	6f56 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    6f56:	490a      	ldr	r1, [pc, #40]	; (6f80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    6f58:	9b01      	ldr	r3, [sp, #4]
    6f5a:	9a00      	ldr	r2, [sp, #0]
    6f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    6f60:	4a06      	ldr	r2, [pc, #24]	; (6f7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6f62:	9b01      	ldr	r3, [sp, #4]
    6f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f68:	1c5a      	adds	r2, r3, #1
    6f6a:	4904      	ldr	r1, [pc, #16]	; (6f7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6f6c:	9b01      	ldr	r3, [sp, #4]
    6f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f72:	bf00      	nop
    6f74:	b003      	add	sp, #12
    6f76:	f85d fb04 	ldr.w	pc, [sp], #4
    6f7a:	bf00      	nop
    6f7c:	1fff8d54 	.word	0x1fff8d54
    6f80:	1fff8d50 	.word	0x1fff8d50

00006f84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6f84:	b500      	push	{lr}
    6f86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f88:	f7fa fb1a 	bl	15c0 <Sys_GetCoreID>
    6f8c:	4603      	mov	r3, r0
    6f8e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    6f90:	4a0d      	ldr	r2, [pc, #52]	; (6fc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6f92:	9b01      	ldr	r3, [sp, #4]
    6f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f98:	1e5a      	subs	r2, r3, #1
    6f9a:	490b      	ldr	r1, [pc, #44]	; (6fc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6f9c:	9b01      	ldr	r3, [sp, #4]
    6f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    6fa2:	4a0a      	ldr	r2, [pc, #40]	; (6fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    6fa4:	9b01      	ldr	r3, [sp, #4]
    6fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6faa:	f003 0301 	and.w	r3, r3, #1
    6fae:	2b00      	cmp	r3, #0
    6fb0:	d106      	bne.n	6fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    6fb2:	4a05      	ldr	r2, [pc, #20]	; (6fc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6fb4:	9b01      	ldr	r3, [sp, #4]
    6fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fba:	2b00      	cmp	r3, #0
    6fbc:	d100      	bne.n	6fc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6fbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6fc0:	bf00      	nop
    6fc2:	b003      	add	sp, #12
    6fc4:	f85d fb04 	ldr.w	pc, [sp], #4
    6fc8:	1fff8d54 	.word	0x1fff8d54
    6fcc:	1fff8d50 	.word	0x1fff8d50

00006fd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6fd0:	b500      	push	{lr}
    6fd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fd4:	f7fa faf4 	bl	15c0 <Sys_GetCoreID>
    6fd8:	4603      	mov	r3, r0
    6fda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    6fdc:	4a10      	ldr	r2, [pc, #64]	; (7020 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6fde:	9b01      	ldr	r3, [sp, #4]
    6fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fe4:	2b00      	cmp	r3, #0
    6fe6:	d10d      	bne.n	7004 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6fe8:	f7f9 fc80 	bl	8ec <Port_schm_read_msr>
    6fec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6fee:	9b00      	ldr	r3, [sp, #0]
    6ff0:	f003 0301 	and.w	r3, r3, #1
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	d100      	bne.n	6ffa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6ff8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    6ffa:	490a      	ldr	r1, [pc, #40]	; (7024 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    6ffc:	9b01      	ldr	r3, [sp, #4]
    6ffe:	9a00      	ldr	r2, [sp, #0]
    7000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    7004:	4a06      	ldr	r2, [pc, #24]	; (7020 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    7006:	9b01      	ldr	r3, [sp, #4]
    7008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    700c:	1c5a      	adds	r2, r3, #1
    700e:	4904      	ldr	r1, [pc, #16]	; (7020 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    7010:	9b01      	ldr	r3, [sp, #4]
    7012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7016:	bf00      	nop
    7018:	b003      	add	sp, #12
    701a:	f85d fb04 	ldr.w	pc, [sp], #4
    701e:	bf00      	nop
    7020:	1fff8d5c 	.word	0x1fff8d5c
    7024:	1fff8d58 	.word	0x1fff8d58

00007028 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    7028:	b500      	push	{lr}
    702a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    702c:	f7fa fac8 	bl	15c0 <Sys_GetCoreID>
    7030:	4603      	mov	r3, r0
    7032:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    7034:	4a0d      	ldr	r2, [pc, #52]	; (706c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    7036:	9b01      	ldr	r3, [sp, #4]
    7038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    703c:	1e5a      	subs	r2, r3, #1
    703e:	490b      	ldr	r1, [pc, #44]	; (706c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    7040:	9b01      	ldr	r3, [sp, #4]
    7042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    7046:	4a0a      	ldr	r2, [pc, #40]	; (7070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    7048:	9b01      	ldr	r3, [sp, #4]
    704a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    704e:	f003 0301 	and.w	r3, r3, #1
    7052:	2b00      	cmp	r3, #0
    7054:	d106      	bne.n	7064 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    7056:	4a05      	ldr	r2, [pc, #20]	; (706c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    7058:	9b01      	ldr	r3, [sp, #4]
    705a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    705e:	2b00      	cmp	r3, #0
    7060:	d100      	bne.n	7064 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7062:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7064:	bf00      	nop
    7066:	b003      	add	sp, #12
    7068:	f85d fb04 	ldr.w	pc, [sp], #4
    706c:	1fff8d5c 	.word	0x1fff8d5c
    7070:	1fff8d58 	.word	0x1fff8d58

00007074 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    7074:	b500      	push	{lr}
    7076:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7078:	f7fa faa2 	bl	15c0 <Sys_GetCoreID>
    707c:	4603      	mov	r3, r0
    707e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    7080:	4a10      	ldr	r2, [pc, #64]	; (70c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    7082:	9b01      	ldr	r3, [sp, #4]
    7084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7088:	2b00      	cmp	r3, #0
    708a:	d10d      	bne.n	70a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    708c:	f7f9 fc2e 	bl	8ec <Port_schm_read_msr>
    7090:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7092:	9b00      	ldr	r3, [sp, #0]
    7094:	f003 0301 	and.w	r3, r3, #1
    7098:	2b00      	cmp	r3, #0
    709a:	d100      	bne.n	709e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    709c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    709e:	490a      	ldr	r1, [pc, #40]	; (70c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    70a0:	9b01      	ldr	r3, [sp, #4]
    70a2:	9a00      	ldr	r2, [sp, #0]
    70a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    70a8:	4a06      	ldr	r2, [pc, #24]	; (70c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    70aa:	9b01      	ldr	r3, [sp, #4]
    70ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70b0:	1c5a      	adds	r2, r3, #1
    70b2:	4904      	ldr	r1, [pc, #16]	; (70c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    70b4:	9b01      	ldr	r3, [sp, #4]
    70b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    70ba:	bf00      	nop
    70bc:	b003      	add	sp, #12
    70be:	f85d fb04 	ldr.w	pc, [sp], #4
    70c2:	bf00      	nop
    70c4:	1fff8d64 	.word	0x1fff8d64
    70c8:	1fff8d60 	.word	0x1fff8d60

000070cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    70cc:	b500      	push	{lr}
    70ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70d0:	f7fa fa76 	bl	15c0 <Sys_GetCoreID>
    70d4:	4603      	mov	r3, r0
    70d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    70d8:	4a0d      	ldr	r2, [pc, #52]	; (7110 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    70da:	9b01      	ldr	r3, [sp, #4]
    70dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70e0:	1e5a      	subs	r2, r3, #1
    70e2:	490b      	ldr	r1, [pc, #44]	; (7110 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    70e4:	9b01      	ldr	r3, [sp, #4]
    70e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    70ea:	4a0a      	ldr	r2, [pc, #40]	; (7114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    70ec:	9b01      	ldr	r3, [sp, #4]
    70ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70f2:	f003 0301 	and.w	r3, r3, #1
    70f6:	2b00      	cmp	r3, #0
    70f8:	d106      	bne.n	7108 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    70fa:	4a05      	ldr	r2, [pc, #20]	; (7110 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    70fc:	9b01      	ldr	r3, [sp, #4]
    70fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7102:	2b00      	cmp	r3, #0
    7104:	d100      	bne.n	7108 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7106:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7108:	bf00      	nop
    710a:	b003      	add	sp, #12
    710c:	f85d fb04 	ldr.w	pc, [sp], #4
    7110:	1fff8d64 	.word	0x1fff8d64
    7114:	1fff8d60 	.word	0x1fff8d60

00007118 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    7118:	b500      	push	{lr}
    711a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    711c:	f7fa fa50 	bl	15c0 <Sys_GetCoreID>
    7120:	4603      	mov	r3, r0
    7122:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    7124:	4a10      	ldr	r2, [pc, #64]	; (7168 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    7126:	9b01      	ldr	r3, [sp, #4]
    7128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    712c:	2b00      	cmp	r3, #0
    712e:	d10d      	bne.n	714c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7130:	f7f9 fbdc 	bl	8ec <Port_schm_read_msr>
    7134:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7136:	9b00      	ldr	r3, [sp, #0]
    7138:	f003 0301 	and.w	r3, r3, #1
    713c:	2b00      	cmp	r3, #0
    713e:	d100      	bne.n	7142 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7140:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    7142:	490a      	ldr	r1, [pc, #40]	; (716c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    7144:	9b01      	ldr	r3, [sp, #4]
    7146:	9a00      	ldr	r2, [sp, #0]
    7148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    714c:	4a06      	ldr	r2, [pc, #24]	; (7168 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    714e:	9b01      	ldr	r3, [sp, #4]
    7150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7154:	1c5a      	adds	r2, r3, #1
    7156:	4904      	ldr	r1, [pc, #16]	; (7168 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    7158:	9b01      	ldr	r3, [sp, #4]
    715a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    715e:	bf00      	nop
    7160:	b003      	add	sp, #12
    7162:	f85d fb04 	ldr.w	pc, [sp], #4
    7166:	bf00      	nop
    7168:	1fff8d6c 	.word	0x1fff8d6c
    716c:	1fff8d68 	.word	0x1fff8d68

00007170 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    7170:	b500      	push	{lr}
    7172:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7174:	f7fa fa24 	bl	15c0 <Sys_GetCoreID>
    7178:	4603      	mov	r3, r0
    717a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    717c:	4a0d      	ldr	r2, [pc, #52]	; (71b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    717e:	9b01      	ldr	r3, [sp, #4]
    7180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7184:	1e5a      	subs	r2, r3, #1
    7186:	490b      	ldr	r1, [pc, #44]	; (71b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    7188:	9b01      	ldr	r3, [sp, #4]
    718a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    718e:	4a0a      	ldr	r2, [pc, #40]	; (71b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    7190:	9b01      	ldr	r3, [sp, #4]
    7192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7196:	f003 0301 	and.w	r3, r3, #1
    719a:	2b00      	cmp	r3, #0
    719c:	d106      	bne.n	71ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    719e:	4a05      	ldr	r2, [pc, #20]	; (71b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    71a0:	9b01      	ldr	r3, [sp, #4]
    71a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71a6:	2b00      	cmp	r3, #0
    71a8:	d100      	bne.n	71ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    71aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    71ac:	bf00      	nop
    71ae:	b003      	add	sp, #12
    71b0:	f85d fb04 	ldr.w	pc, [sp], #4
    71b4:	1fff8d6c 	.word	0x1fff8d6c
    71b8:	1fff8d68 	.word	0x1fff8d68

000071bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    71bc:	b500      	push	{lr}
    71be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71c0:	f7fa f9fe 	bl	15c0 <Sys_GetCoreID>
    71c4:	4603      	mov	r3, r0
    71c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    71c8:	4a10      	ldr	r2, [pc, #64]	; (720c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    71ca:	9b01      	ldr	r3, [sp, #4]
    71cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71d0:	2b00      	cmp	r3, #0
    71d2:	d10d      	bne.n	71f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    71d4:	f7f9 fb8a 	bl	8ec <Port_schm_read_msr>
    71d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    71da:	9b00      	ldr	r3, [sp, #0]
    71dc:	f003 0301 	and.w	r3, r3, #1
    71e0:	2b00      	cmp	r3, #0
    71e2:	d100      	bne.n	71e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    71e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    71e6:	490a      	ldr	r1, [pc, #40]	; (7210 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    71e8:	9b01      	ldr	r3, [sp, #4]
    71ea:	9a00      	ldr	r2, [sp, #0]
    71ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    71f0:	4a06      	ldr	r2, [pc, #24]	; (720c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    71f2:	9b01      	ldr	r3, [sp, #4]
    71f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71f8:	1c5a      	adds	r2, r3, #1
    71fa:	4904      	ldr	r1, [pc, #16]	; (720c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    71fc:	9b01      	ldr	r3, [sp, #4]
    71fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7202:	bf00      	nop
    7204:	b003      	add	sp, #12
    7206:	f85d fb04 	ldr.w	pc, [sp], #4
    720a:	bf00      	nop
    720c:	1fff8d74 	.word	0x1fff8d74
    7210:	1fff8d70 	.word	0x1fff8d70

00007214 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    7214:	b500      	push	{lr}
    7216:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7218:	f7fa f9d2 	bl	15c0 <Sys_GetCoreID>
    721c:	4603      	mov	r3, r0
    721e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    7220:	4a0d      	ldr	r2, [pc, #52]	; (7258 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    7222:	9b01      	ldr	r3, [sp, #4]
    7224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7228:	1e5a      	subs	r2, r3, #1
    722a:	490b      	ldr	r1, [pc, #44]	; (7258 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    722c:	9b01      	ldr	r3, [sp, #4]
    722e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    7232:	4a0a      	ldr	r2, [pc, #40]	; (725c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    7234:	9b01      	ldr	r3, [sp, #4]
    7236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    723a:	f003 0301 	and.w	r3, r3, #1
    723e:	2b00      	cmp	r3, #0
    7240:	d106      	bne.n	7250 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    7242:	4a05      	ldr	r2, [pc, #20]	; (7258 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    7244:	9b01      	ldr	r3, [sp, #4]
    7246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    724a:	2b00      	cmp	r3, #0
    724c:	d100      	bne.n	7250 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    724e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7250:	bf00      	nop
    7252:	b003      	add	sp, #12
    7254:	f85d fb04 	ldr.w	pc, [sp], #4
    7258:	1fff8d74 	.word	0x1fff8d74
    725c:	1fff8d70 	.word	0x1fff8d70

00007260 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    7260:	b500      	push	{lr}
    7262:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7264:	f7fa f9ac 	bl	15c0 <Sys_GetCoreID>
    7268:	4603      	mov	r3, r0
    726a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    726c:	4a10      	ldr	r2, [pc, #64]	; (72b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    726e:	9b01      	ldr	r3, [sp, #4]
    7270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7274:	2b00      	cmp	r3, #0
    7276:	d10d      	bne.n	7294 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7278:	f7f9 fb38 	bl	8ec <Port_schm_read_msr>
    727c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    727e:	9b00      	ldr	r3, [sp, #0]
    7280:	f003 0301 	and.w	r3, r3, #1
    7284:	2b00      	cmp	r3, #0
    7286:	d100      	bne.n	728a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7288:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    728a:	490a      	ldr	r1, [pc, #40]	; (72b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    728c:	9b01      	ldr	r3, [sp, #4]
    728e:	9a00      	ldr	r2, [sp, #0]
    7290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    7294:	4a06      	ldr	r2, [pc, #24]	; (72b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    7296:	9b01      	ldr	r3, [sp, #4]
    7298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    729c:	1c5a      	adds	r2, r3, #1
    729e:	4904      	ldr	r1, [pc, #16]	; (72b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    72a0:	9b01      	ldr	r3, [sp, #4]
    72a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72a6:	bf00      	nop
    72a8:	b003      	add	sp, #12
    72aa:	f85d fb04 	ldr.w	pc, [sp], #4
    72ae:	bf00      	nop
    72b0:	1fff8d7c 	.word	0x1fff8d7c
    72b4:	1fff8d78 	.word	0x1fff8d78

000072b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    72b8:	b500      	push	{lr}
    72ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72bc:	f7fa f980 	bl	15c0 <Sys_GetCoreID>
    72c0:	4603      	mov	r3, r0
    72c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    72c4:	4a0d      	ldr	r2, [pc, #52]	; (72fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    72c6:	9b01      	ldr	r3, [sp, #4]
    72c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72cc:	1e5a      	subs	r2, r3, #1
    72ce:	490b      	ldr	r1, [pc, #44]	; (72fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    72d0:	9b01      	ldr	r3, [sp, #4]
    72d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    72d6:	4a0a      	ldr	r2, [pc, #40]	; (7300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    72d8:	9b01      	ldr	r3, [sp, #4]
    72da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72de:	f003 0301 	and.w	r3, r3, #1
    72e2:	2b00      	cmp	r3, #0
    72e4:	d106      	bne.n	72f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    72e6:	4a05      	ldr	r2, [pc, #20]	; (72fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    72e8:	9b01      	ldr	r3, [sp, #4]
    72ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72ee:	2b00      	cmp	r3, #0
    72f0:	d100      	bne.n	72f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    72f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    72f4:	bf00      	nop
    72f6:	b003      	add	sp, #12
    72f8:	f85d fb04 	ldr.w	pc, [sp], #4
    72fc:	1fff8d7c 	.word	0x1fff8d7c
    7300:	1fff8d78 	.word	0x1fff8d78

00007304 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    7304:	b500      	push	{lr}
    7306:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7308:	f7fa f95a 	bl	15c0 <Sys_GetCoreID>
    730c:	4603      	mov	r3, r0
    730e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    7310:	4a10      	ldr	r2, [pc, #64]	; (7354 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    7312:	9b01      	ldr	r3, [sp, #4]
    7314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7318:	2b00      	cmp	r3, #0
    731a:	d10d      	bne.n	7338 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    731c:	f7f9 fae6 	bl	8ec <Port_schm_read_msr>
    7320:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7322:	9b00      	ldr	r3, [sp, #0]
    7324:	f003 0301 	and.w	r3, r3, #1
    7328:	2b00      	cmp	r3, #0
    732a:	d100      	bne.n	732e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    732c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    732e:	490a      	ldr	r1, [pc, #40]	; (7358 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    7330:	9b01      	ldr	r3, [sp, #4]
    7332:	9a00      	ldr	r2, [sp, #0]
    7334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    7338:	4a06      	ldr	r2, [pc, #24]	; (7354 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    733a:	9b01      	ldr	r3, [sp, #4]
    733c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7340:	1c5a      	adds	r2, r3, #1
    7342:	4904      	ldr	r1, [pc, #16]	; (7354 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    7344:	9b01      	ldr	r3, [sp, #4]
    7346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    734a:	bf00      	nop
    734c:	b003      	add	sp, #12
    734e:	f85d fb04 	ldr.w	pc, [sp], #4
    7352:	bf00      	nop
    7354:	1fff8d84 	.word	0x1fff8d84
    7358:	1fff8d80 	.word	0x1fff8d80

0000735c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    735c:	b500      	push	{lr}
    735e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7360:	f7fa f92e 	bl	15c0 <Sys_GetCoreID>
    7364:	4603      	mov	r3, r0
    7366:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    7368:	4a0d      	ldr	r2, [pc, #52]	; (73a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    736a:	9b01      	ldr	r3, [sp, #4]
    736c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7370:	1e5a      	subs	r2, r3, #1
    7372:	490b      	ldr	r1, [pc, #44]	; (73a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    7374:	9b01      	ldr	r3, [sp, #4]
    7376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    737a:	4a0a      	ldr	r2, [pc, #40]	; (73a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    737c:	9b01      	ldr	r3, [sp, #4]
    737e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7382:	f003 0301 	and.w	r3, r3, #1
    7386:	2b00      	cmp	r3, #0
    7388:	d106      	bne.n	7398 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    738a:	4a05      	ldr	r2, [pc, #20]	; (73a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    738c:	9b01      	ldr	r3, [sp, #4]
    738e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7392:	2b00      	cmp	r3, #0
    7394:	d100      	bne.n	7398 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7396:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7398:	bf00      	nop
    739a:	b003      	add	sp, #12
    739c:	f85d fb04 	ldr.w	pc, [sp], #4
    73a0:	1fff8d84 	.word	0x1fff8d84
    73a4:	1fff8d80 	.word	0x1fff8d80

000073a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    73a8:	b500      	push	{lr}
    73aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73ac:	f7fa f908 	bl	15c0 <Sys_GetCoreID>
    73b0:	4603      	mov	r3, r0
    73b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    73b4:	4a10      	ldr	r2, [pc, #64]	; (73f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    73b6:	9b01      	ldr	r3, [sp, #4]
    73b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73bc:	2b00      	cmp	r3, #0
    73be:	d10d      	bne.n	73dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    73c0:	f7f9 fa94 	bl	8ec <Port_schm_read_msr>
    73c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    73c6:	9b00      	ldr	r3, [sp, #0]
    73c8:	f003 0301 	and.w	r3, r3, #1
    73cc:	2b00      	cmp	r3, #0
    73ce:	d100      	bne.n	73d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    73d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    73d2:	490a      	ldr	r1, [pc, #40]	; (73fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    73d4:	9b01      	ldr	r3, [sp, #4]
    73d6:	9a00      	ldr	r2, [sp, #0]
    73d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    73dc:	4a06      	ldr	r2, [pc, #24]	; (73f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    73de:	9b01      	ldr	r3, [sp, #4]
    73e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73e4:	1c5a      	adds	r2, r3, #1
    73e6:	4904      	ldr	r1, [pc, #16]	; (73f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    73e8:	9b01      	ldr	r3, [sp, #4]
    73ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    73ee:	bf00      	nop
    73f0:	b003      	add	sp, #12
    73f2:	f85d fb04 	ldr.w	pc, [sp], #4
    73f6:	bf00      	nop
    73f8:	1fff8d8c 	.word	0x1fff8d8c
    73fc:	1fff8d88 	.word	0x1fff8d88

00007400 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    7400:	b500      	push	{lr}
    7402:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7404:	f7fa f8dc 	bl	15c0 <Sys_GetCoreID>
    7408:	4603      	mov	r3, r0
    740a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    740c:	4a0d      	ldr	r2, [pc, #52]	; (7444 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    740e:	9b01      	ldr	r3, [sp, #4]
    7410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7414:	1e5a      	subs	r2, r3, #1
    7416:	490b      	ldr	r1, [pc, #44]	; (7444 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7418:	9b01      	ldr	r3, [sp, #4]
    741a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    741e:	4a0a      	ldr	r2, [pc, #40]	; (7448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    7420:	9b01      	ldr	r3, [sp, #4]
    7422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7426:	f003 0301 	and.w	r3, r3, #1
    742a:	2b00      	cmp	r3, #0
    742c:	d106      	bne.n	743c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    742e:	4a05      	ldr	r2, [pc, #20]	; (7444 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    7430:	9b01      	ldr	r3, [sp, #4]
    7432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7436:	2b00      	cmp	r3, #0
    7438:	d100      	bne.n	743c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    743a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    743c:	bf00      	nop
    743e:	b003      	add	sp, #12
    7440:	f85d fb04 	ldr.w	pc, [sp], #4
    7444:	1fff8d8c 	.word	0x1fff8d8c
    7448:	1fff8d88 	.word	0x1fff8d88

0000744c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    744c:	b500      	push	{lr}
    744e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7450:	f7fa f8b6 	bl	15c0 <Sys_GetCoreID>
    7454:	4603      	mov	r3, r0
    7456:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    7458:	4a10      	ldr	r2, [pc, #64]	; (749c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    745a:	9b01      	ldr	r3, [sp, #4]
    745c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7460:	2b00      	cmp	r3, #0
    7462:	d10d      	bne.n	7480 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7464:	f7f9 fa42 	bl	8ec <Port_schm_read_msr>
    7468:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    746a:	9b00      	ldr	r3, [sp, #0]
    746c:	f003 0301 	and.w	r3, r3, #1
    7470:	2b00      	cmp	r3, #0
    7472:	d100      	bne.n	7476 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7474:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    7476:	490a      	ldr	r1, [pc, #40]	; (74a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    7478:	9b01      	ldr	r3, [sp, #4]
    747a:	9a00      	ldr	r2, [sp, #0]
    747c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    7480:	4a06      	ldr	r2, [pc, #24]	; (749c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    7482:	9b01      	ldr	r3, [sp, #4]
    7484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7488:	1c5a      	adds	r2, r3, #1
    748a:	4904      	ldr	r1, [pc, #16]	; (749c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    748c:	9b01      	ldr	r3, [sp, #4]
    748e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7492:	bf00      	nop
    7494:	b003      	add	sp, #12
    7496:	f85d fb04 	ldr.w	pc, [sp], #4
    749a:	bf00      	nop
    749c:	1fff8d94 	.word	0x1fff8d94
    74a0:	1fff8d90 	.word	0x1fff8d90

000074a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    74a4:	b500      	push	{lr}
    74a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74a8:	f7fa f88a 	bl	15c0 <Sys_GetCoreID>
    74ac:	4603      	mov	r3, r0
    74ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    74b0:	4a0d      	ldr	r2, [pc, #52]	; (74e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    74b2:	9b01      	ldr	r3, [sp, #4]
    74b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74b8:	1e5a      	subs	r2, r3, #1
    74ba:	490b      	ldr	r1, [pc, #44]	; (74e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    74bc:	9b01      	ldr	r3, [sp, #4]
    74be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    74c2:	4a0a      	ldr	r2, [pc, #40]	; (74ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    74c4:	9b01      	ldr	r3, [sp, #4]
    74c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74ca:	f003 0301 	and.w	r3, r3, #1
    74ce:	2b00      	cmp	r3, #0
    74d0:	d106      	bne.n	74e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    74d2:	4a05      	ldr	r2, [pc, #20]	; (74e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    74d4:	9b01      	ldr	r3, [sp, #4]
    74d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74da:	2b00      	cmp	r3, #0
    74dc:	d100      	bne.n	74e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    74de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    74e0:	bf00      	nop
    74e2:	b003      	add	sp, #12
    74e4:	f85d fb04 	ldr.w	pc, [sp], #4
    74e8:	1fff8d94 	.word	0x1fff8d94
    74ec:	1fff8d90 	.word	0x1fff8d90

000074f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    74f0:	b500      	push	{lr}
    74f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74f4:	f7fa f864 	bl	15c0 <Sys_GetCoreID>
    74f8:	4603      	mov	r3, r0
    74fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    74fc:	4a10      	ldr	r2, [pc, #64]	; (7540 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    74fe:	9b01      	ldr	r3, [sp, #4]
    7500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7504:	2b00      	cmp	r3, #0
    7506:	d10d      	bne.n	7524 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7508:	f7f9 f9f0 	bl	8ec <Port_schm_read_msr>
    750c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    750e:	9b00      	ldr	r3, [sp, #0]
    7510:	f003 0301 	and.w	r3, r3, #1
    7514:	2b00      	cmp	r3, #0
    7516:	d100      	bne.n	751a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7518:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    751a:	490a      	ldr	r1, [pc, #40]	; (7544 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    751c:	9b01      	ldr	r3, [sp, #4]
    751e:	9a00      	ldr	r2, [sp, #0]
    7520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    7524:	4a06      	ldr	r2, [pc, #24]	; (7540 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7526:	9b01      	ldr	r3, [sp, #4]
    7528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    752c:	1c5a      	adds	r2, r3, #1
    752e:	4904      	ldr	r1, [pc, #16]	; (7540 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    7530:	9b01      	ldr	r3, [sp, #4]
    7532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7536:	bf00      	nop
    7538:	b003      	add	sp, #12
    753a:	f85d fb04 	ldr.w	pc, [sp], #4
    753e:	bf00      	nop
    7540:	1fff8d9c 	.word	0x1fff8d9c
    7544:	1fff8d98 	.word	0x1fff8d98

00007548 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    7548:	b500      	push	{lr}
    754a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    754c:	f7fa f838 	bl	15c0 <Sys_GetCoreID>
    7550:	4603      	mov	r3, r0
    7552:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    7554:	4a0d      	ldr	r2, [pc, #52]	; (758c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7556:	9b01      	ldr	r3, [sp, #4]
    7558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    755c:	1e5a      	subs	r2, r3, #1
    755e:	490b      	ldr	r1, [pc, #44]	; (758c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7560:	9b01      	ldr	r3, [sp, #4]
    7562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    7566:	4a0a      	ldr	r2, [pc, #40]	; (7590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    7568:	9b01      	ldr	r3, [sp, #4]
    756a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    756e:	f003 0301 	and.w	r3, r3, #1
    7572:	2b00      	cmp	r3, #0
    7574:	d106      	bne.n	7584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    7576:	4a05      	ldr	r2, [pc, #20]	; (758c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    7578:	9b01      	ldr	r3, [sp, #4]
    757a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    757e:	2b00      	cmp	r3, #0
    7580:	d100      	bne.n	7584 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7582:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7584:	bf00      	nop
    7586:	b003      	add	sp, #12
    7588:	f85d fb04 	ldr.w	pc, [sp], #4
    758c:	1fff8d9c 	.word	0x1fff8d9c
    7590:	1fff8d98 	.word	0x1fff8d98

00007594 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    7594:	b500      	push	{lr}
    7596:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7598:	f7fa f812 	bl	15c0 <Sys_GetCoreID>
    759c:	4603      	mov	r3, r0
    759e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    75a0:	4a10      	ldr	r2, [pc, #64]	; (75e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    75a2:	9b01      	ldr	r3, [sp, #4]
    75a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75a8:	2b00      	cmp	r3, #0
    75aa:	d10d      	bne.n	75c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    75ac:	f7f9 f99e 	bl	8ec <Port_schm_read_msr>
    75b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    75b2:	9b00      	ldr	r3, [sp, #0]
    75b4:	f003 0301 	and.w	r3, r3, #1
    75b8:	2b00      	cmp	r3, #0
    75ba:	d100      	bne.n	75be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    75bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    75be:	490a      	ldr	r1, [pc, #40]	; (75e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    75c0:	9b01      	ldr	r3, [sp, #4]
    75c2:	9a00      	ldr	r2, [sp, #0]
    75c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    75c8:	4a06      	ldr	r2, [pc, #24]	; (75e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    75ca:	9b01      	ldr	r3, [sp, #4]
    75cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75d0:	1c5a      	adds	r2, r3, #1
    75d2:	4904      	ldr	r1, [pc, #16]	; (75e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    75d4:	9b01      	ldr	r3, [sp, #4]
    75d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    75da:	bf00      	nop
    75dc:	b003      	add	sp, #12
    75de:	f85d fb04 	ldr.w	pc, [sp], #4
    75e2:	bf00      	nop
    75e4:	1fff8da4 	.word	0x1fff8da4
    75e8:	1fff8da0 	.word	0x1fff8da0

000075ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    75ec:	b500      	push	{lr}
    75ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75f0:	f7f9 ffe6 	bl	15c0 <Sys_GetCoreID>
    75f4:	4603      	mov	r3, r0
    75f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    75f8:	4a0d      	ldr	r2, [pc, #52]	; (7630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    75fa:	9b01      	ldr	r3, [sp, #4]
    75fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7600:	1e5a      	subs	r2, r3, #1
    7602:	490b      	ldr	r1, [pc, #44]	; (7630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    7604:	9b01      	ldr	r3, [sp, #4]
    7606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    760a:	4a0a      	ldr	r2, [pc, #40]	; (7634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    760c:	9b01      	ldr	r3, [sp, #4]
    760e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7612:	f003 0301 	and.w	r3, r3, #1
    7616:	2b00      	cmp	r3, #0
    7618:	d106      	bne.n	7628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    761a:	4a05      	ldr	r2, [pc, #20]	; (7630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    761c:	9b01      	ldr	r3, [sp, #4]
    761e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7622:	2b00      	cmp	r3, #0
    7624:	d100      	bne.n	7628 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7626:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7628:	bf00      	nop
    762a:	b003      	add	sp, #12
    762c:	f85d fb04 	ldr.w	pc, [sp], #4
    7630:	1fff8da4 	.word	0x1fff8da4
    7634:	1fff8da0 	.word	0x1fff8da0

00007638 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7638:	b500      	push	{lr}
    763a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    763c:	f7f9 ffc0 	bl	15c0 <Sys_GetCoreID>
    7640:	4603      	mov	r3, r0
    7642:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    7644:	4a10      	ldr	r2, [pc, #64]	; (7688 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7646:	9b01      	ldr	r3, [sp, #4]
    7648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    764c:	2b00      	cmp	r3, #0
    764e:	d10d      	bne.n	766c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7650:	f7f9 f94c 	bl	8ec <Port_schm_read_msr>
    7654:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7656:	9b00      	ldr	r3, [sp, #0]
    7658:	f003 0301 	and.w	r3, r3, #1
    765c:	2b00      	cmp	r3, #0
    765e:	d100      	bne.n	7662 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7660:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    7662:	490a      	ldr	r1, [pc, #40]	; (768c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    7664:	9b01      	ldr	r3, [sp, #4]
    7666:	9a00      	ldr	r2, [sp, #0]
    7668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    766c:	4a06      	ldr	r2, [pc, #24]	; (7688 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    766e:	9b01      	ldr	r3, [sp, #4]
    7670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7674:	1c5a      	adds	r2, r3, #1
    7676:	4904      	ldr	r1, [pc, #16]	; (7688 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    7678:	9b01      	ldr	r3, [sp, #4]
    767a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    767e:	bf00      	nop
    7680:	b003      	add	sp, #12
    7682:	f85d fb04 	ldr.w	pc, [sp], #4
    7686:	bf00      	nop
    7688:	1fff8dac 	.word	0x1fff8dac
    768c:	1fff8da8 	.word	0x1fff8da8

00007690 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7690:	b500      	push	{lr}
    7692:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7694:	f7f9 ff94 	bl	15c0 <Sys_GetCoreID>
    7698:	4603      	mov	r3, r0
    769a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    769c:	4a0d      	ldr	r2, [pc, #52]	; (76d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    769e:	9b01      	ldr	r3, [sp, #4]
    76a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76a4:	1e5a      	subs	r2, r3, #1
    76a6:	490b      	ldr	r1, [pc, #44]	; (76d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    76a8:	9b01      	ldr	r3, [sp, #4]
    76aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    76ae:	4a0a      	ldr	r2, [pc, #40]	; (76d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    76b0:	9b01      	ldr	r3, [sp, #4]
    76b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76b6:	f003 0301 	and.w	r3, r3, #1
    76ba:	2b00      	cmp	r3, #0
    76bc:	d106      	bne.n	76cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    76be:	4a05      	ldr	r2, [pc, #20]	; (76d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    76c0:	9b01      	ldr	r3, [sp, #4]
    76c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76c6:	2b00      	cmp	r3, #0
    76c8:	d100      	bne.n	76cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    76ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    76cc:	bf00      	nop
    76ce:	b003      	add	sp, #12
    76d0:	f85d fb04 	ldr.w	pc, [sp], #4
    76d4:	1fff8dac 	.word	0x1fff8dac
    76d8:	1fff8da8 	.word	0x1fff8da8

000076dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    76dc:	b500      	push	{lr}
    76de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    76e0:	f7f9 ff6e 	bl	15c0 <Sys_GetCoreID>
    76e4:	4603      	mov	r3, r0
    76e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    76e8:	4a10      	ldr	r2, [pc, #64]	; (772c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    76ea:	9b01      	ldr	r3, [sp, #4]
    76ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76f0:	2b00      	cmp	r3, #0
    76f2:	d10d      	bne.n	7710 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    76f4:	f7f9 f8fa 	bl	8ec <Port_schm_read_msr>
    76f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    76fa:	9b00      	ldr	r3, [sp, #0]
    76fc:	f003 0301 	and.w	r3, r3, #1
    7700:	2b00      	cmp	r3, #0
    7702:	d100      	bne.n	7706 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7704:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    7706:	490a      	ldr	r1, [pc, #40]	; (7730 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    7708:	9b01      	ldr	r3, [sp, #4]
    770a:	9a00      	ldr	r2, [sp, #0]
    770c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    7710:	4a06      	ldr	r2, [pc, #24]	; (772c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7712:	9b01      	ldr	r3, [sp, #4]
    7714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7718:	1c5a      	adds	r2, r3, #1
    771a:	4904      	ldr	r1, [pc, #16]	; (772c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    771c:	9b01      	ldr	r3, [sp, #4]
    771e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7722:	bf00      	nop
    7724:	b003      	add	sp, #12
    7726:	f85d fb04 	ldr.w	pc, [sp], #4
    772a:	bf00      	nop
    772c:	1fff8db4 	.word	0x1fff8db4
    7730:	1fff8db0 	.word	0x1fff8db0

00007734 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    7734:	b500      	push	{lr}
    7736:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7738:	f7f9 ff42 	bl	15c0 <Sys_GetCoreID>
    773c:	4603      	mov	r3, r0
    773e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    7740:	4a0d      	ldr	r2, [pc, #52]	; (7778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7742:	9b01      	ldr	r3, [sp, #4]
    7744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7748:	1e5a      	subs	r2, r3, #1
    774a:	490b      	ldr	r1, [pc, #44]	; (7778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    774c:	9b01      	ldr	r3, [sp, #4]
    774e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    7752:	4a0a      	ldr	r2, [pc, #40]	; (777c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    7754:	9b01      	ldr	r3, [sp, #4]
    7756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    775a:	f003 0301 	and.w	r3, r3, #1
    775e:	2b00      	cmp	r3, #0
    7760:	d106      	bne.n	7770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    7762:	4a05      	ldr	r2, [pc, #20]	; (7778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7764:	9b01      	ldr	r3, [sp, #4]
    7766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    776a:	2b00      	cmp	r3, #0
    776c:	d100      	bne.n	7770 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    776e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7770:	bf00      	nop
    7772:	b003      	add	sp, #12
    7774:	f85d fb04 	ldr.w	pc, [sp], #4
    7778:	1fff8db4 	.word	0x1fff8db4
    777c:	1fff8db0 	.word	0x1fff8db0

00007780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7780:	b500      	push	{lr}
    7782:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7784:	f7f9 ff1c 	bl	15c0 <Sys_GetCoreID>
    7788:	4603      	mov	r3, r0
    778a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    778c:	4a10      	ldr	r2, [pc, #64]	; (77d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    778e:	9b01      	ldr	r3, [sp, #4]
    7790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7794:	2b00      	cmp	r3, #0
    7796:	d10d      	bne.n	77b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7798:	f7f9 f8a8 	bl	8ec <Port_schm_read_msr>
    779c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    779e:	9b00      	ldr	r3, [sp, #0]
    77a0:	f003 0301 	and.w	r3, r3, #1
    77a4:	2b00      	cmp	r3, #0
    77a6:	d100      	bne.n	77aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    77a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    77aa:	490a      	ldr	r1, [pc, #40]	; (77d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    77ac:	9b01      	ldr	r3, [sp, #4]
    77ae:	9a00      	ldr	r2, [sp, #0]
    77b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    77b4:	4a06      	ldr	r2, [pc, #24]	; (77d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    77b6:	9b01      	ldr	r3, [sp, #4]
    77b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77bc:	1c5a      	adds	r2, r3, #1
    77be:	4904      	ldr	r1, [pc, #16]	; (77d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    77c0:	9b01      	ldr	r3, [sp, #4]
    77c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    77c6:	bf00      	nop
    77c8:	b003      	add	sp, #12
    77ca:	f85d fb04 	ldr.w	pc, [sp], #4
    77ce:	bf00      	nop
    77d0:	1fff8dbc 	.word	0x1fff8dbc
    77d4:	1fff8db8 	.word	0x1fff8db8

000077d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    77d8:	b500      	push	{lr}
    77da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    77dc:	f7f9 fef0 	bl	15c0 <Sys_GetCoreID>
    77e0:	4603      	mov	r3, r0
    77e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    77e4:	4a0d      	ldr	r2, [pc, #52]	; (781c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    77e6:	9b01      	ldr	r3, [sp, #4]
    77e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77ec:	1e5a      	subs	r2, r3, #1
    77ee:	490b      	ldr	r1, [pc, #44]	; (781c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    77f0:	9b01      	ldr	r3, [sp, #4]
    77f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    77f6:	4a0a      	ldr	r2, [pc, #40]	; (7820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    77f8:	9b01      	ldr	r3, [sp, #4]
    77fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77fe:	f003 0301 	and.w	r3, r3, #1
    7802:	2b00      	cmp	r3, #0
    7804:	d106      	bne.n	7814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    7806:	4a05      	ldr	r2, [pc, #20]	; (781c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7808:	9b01      	ldr	r3, [sp, #4]
    780a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    780e:	2b00      	cmp	r3, #0
    7810:	d100      	bne.n	7814 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7812:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7814:	bf00      	nop
    7816:	b003      	add	sp, #12
    7818:	f85d fb04 	ldr.w	pc, [sp], #4
    781c:	1fff8dbc 	.word	0x1fff8dbc
    7820:	1fff8db8 	.word	0x1fff8db8

00007824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7824:	b500      	push	{lr}
    7826:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7828:	f7f9 feca 	bl	15c0 <Sys_GetCoreID>
    782c:	4603      	mov	r3, r0
    782e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    7830:	4a10      	ldr	r2, [pc, #64]	; (7874 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7832:	9b01      	ldr	r3, [sp, #4]
    7834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7838:	2b00      	cmp	r3, #0
    783a:	d10d      	bne.n	7858 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    783c:	f7f9 f856 	bl	8ec <Port_schm_read_msr>
    7840:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7842:	9b00      	ldr	r3, [sp, #0]
    7844:	f003 0301 	and.w	r3, r3, #1
    7848:	2b00      	cmp	r3, #0
    784a:	d100      	bne.n	784e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    784c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    784e:	490a      	ldr	r1, [pc, #40]	; (7878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    7850:	9b01      	ldr	r3, [sp, #4]
    7852:	9a00      	ldr	r2, [sp, #0]
    7854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    7858:	4a06      	ldr	r2, [pc, #24]	; (7874 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    785a:	9b01      	ldr	r3, [sp, #4]
    785c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7860:	1c5a      	adds	r2, r3, #1
    7862:	4904      	ldr	r1, [pc, #16]	; (7874 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7864:	9b01      	ldr	r3, [sp, #4]
    7866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    786a:	bf00      	nop
    786c:	b003      	add	sp, #12
    786e:	f85d fb04 	ldr.w	pc, [sp], #4
    7872:	bf00      	nop
    7874:	1fff8dc4 	.word	0x1fff8dc4
    7878:	1fff8dc0 	.word	0x1fff8dc0

0000787c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    787c:	b500      	push	{lr}
    787e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7880:	f7f9 fe9e 	bl	15c0 <Sys_GetCoreID>
    7884:	4603      	mov	r3, r0
    7886:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    7888:	4a0d      	ldr	r2, [pc, #52]	; (78c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    788a:	9b01      	ldr	r3, [sp, #4]
    788c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7890:	1e5a      	subs	r2, r3, #1
    7892:	490b      	ldr	r1, [pc, #44]	; (78c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7894:	9b01      	ldr	r3, [sp, #4]
    7896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    789a:	4a0a      	ldr	r2, [pc, #40]	; (78c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    789c:	9b01      	ldr	r3, [sp, #4]
    789e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78a2:	f003 0301 	and.w	r3, r3, #1
    78a6:	2b00      	cmp	r3, #0
    78a8:	d106      	bne.n	78b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    78aa:	4a05      	ldr	r2, [pc, #20]	; (78c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    78ac:	9b01      	ldr	r3, [sp, #4]
    78ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78b2:	2b00      	cmp	r3, #0
    78b4:	d100      	bne.n	78b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    78b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    78b8:	bf00      	nop
    78ba:	b003      	add	sp, #12
    78bc:	f85d fb04 	ldr.w	pc, [sp], #4
    78c0:	1fff8dc4 	.word	0x1fff8dc4
    78c4:	1fff8dc0 	.word	0x1fff8dc0

000078c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    78c8:	b500      	push	{lr}
    78ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    78cc:	f7f9 fe78 	bl	15c0 <Sys_GetCoreID>
    78d0:	4603      	mov	r3, r0
    78d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    78d4:	4a10      	ldr	r2, [pc, #64]	; (7918 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    78d6:	9b01      	ldr	r3, [sp, #4]
    78d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78dc:	2b00      	cmp	r3, #0
    78de:	d10d      	bne.n	78fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    78e0:	f7f9 f804 	bl	8ec <Port_schm_read_msr>
    78e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    78e6:	9b00      	ldr	r3, [sp, #0]
    78e8:	f003 0301 	and.w	r3, r3, #1
    78ec:	2b00      	cmp	r3, #0
    78ee:	d100      	bne.n	78f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    78f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    78f2:	490a      	ldr	r1, [pc, #40]	; (791c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    78f4:	9b01      	ldr	r3, [sp, #4]
    78f6:	9a00      	ldr	r2, [sp, #0]
    78f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    78fc:	4a06      	ldr	r2, [pc, #24]	; (7918 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    78fe:	9b01      	ldr	r3, [sp, #4]
    7900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7904:	1c5a      	adds	r2, r3, #1
    7906:	4904      	ldr	r1, [pc, #16]	; (7918 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7908:	9b01      	ldr	r3, [sp, #4]
    790a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    790e:	bf00      	nop
    7910:	b003      	add	sp, #12
    7912:	f85d fb04 	ldr.w	pc, [sp], #4
    7916:	bf00      	nop
    7918:	1fff8dcc 	.word	0x1fff8dcc
    791c:	1fff8dc8 	.word	0x1fff8dc8

00007920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7920:	b500      	push	{lr}
    7922:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7924:	f7f9 fe4c 	bl	15c0 <Sys_GetCoreID>
    7928:	4603      	mov	r3, r0
    792a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    792c:	4a0d      	ldr	r2, [pc, #52]	; (7964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    792e:	9b01      	ldr	r3, [sp, #4]
    7930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7934:	1e5a      	subs	r2, r3, #1
    7936:	490b      	ldr	r1, [pc, #44]	; (7964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7938:	9b01      	ldr	r3, [sp, #4]
    793a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    793e:	4a0a      	ldr	r2, [pc, #40]	; (7968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    7940:	9b01      	ldr	r3, [sp, #4]
    7942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7946:	f003 0301 	and.w	r3, r3, #1
    794a:	2b00      	cmp	r3, #0
    794c:	d106      	bne.n	795c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    794e:	4a05      	ldr	r2, [pc, #20]	; (7964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7950:	9b01      	ldr	r3, [sp, #4]
    7952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7956:	2b00      	cmp	r3, #0
    7958:	d100      	bne.n	795c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    795a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    795c:	bf00      	nop
    795e:	b003      	add	sp, #12
    7960:	f85d fb04 	ldr.w	pc, [sp], #4
    7964:	1fff8dcc 	.word	0x1fff8dcc
    7968:	1fff8dc8 	.word	0x1fff8dc8

0000796c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    796c:	b500      	push	{lr}
    796e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7970:	f7f9 fe26 	bl	15c0 <Sys_GetCoreID>
    7974:	4603      	mov	r3, r0
    7976:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    7978:	4a10      	ldr	r2, [pc, #64]	; (79bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    797a:	9b01      	ldr	r3, [sp, #4]
    797c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7980:	2b00      	cmp	r3, #0
    7982:	d10d      	bne.n	79a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7984:	f7f8 ffb2 	bl	8ec <Port_schm_read_msr>
    7988:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    798a:	9b00      	ldr	r3, [sp, #0]
    798c:	f003 0301 	and.w	r3, r3, #1
    7990:	2b00      	cmp	r3, #0
    7992:	d100      	bne.n	7996 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7994:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    7996:	490a      	ldr	r1, [pc, #40]	; (79c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    7998:	9b01      	ldr	r3, [sp, #4]
    799a:	9a00      	ldr	r2, [sp, #0]
    799c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    79a0:	4a06      	ldr	r2, [pc, #24]	; (79bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    79a2:	9b01      	ldr	r3, [sp, #4]
    79a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79a8:	1c5a      	adds	r2, r3, #1
    79aa:	4904      	ldr	r1, [pc, #16]	; (79bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    79ac:	9b01      	ldr	r3, [sp, #4]
    79ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    79b2:	bf00      	nop
    79b4:	b003      	add	sp, #12
    79b6:	f85d fb04 	ldr.w	pc, [sp], #4
    79ba:	bf00      	nop
    79bc:	1fff8dd4 	.word	0x1fff8dd4
    79c0:	1fff8dd0 	.word	0x1fff8dd0

000079c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    79c4:	b500      	push	{lr}
    79c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    79c8:	f7f9 fdfa 	bl	15c0 <Sys_GetCoreID>
    79cc:	4603      	mov	r3, r0
    79ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    79d0:	4a0d      	ldr	r2, [pc, #52]	; (7a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    79d2:	9b01      	ldr	r3, [sp, #4]
    79d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d8:	1e5a      	subs	r2, r3, #1
    79da:	490b      	ldr	r1, [pc, #44]	; (7a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    79dc:	9b01      	ldr	r3, [sp, #4]
    79de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    79e2:	4a0a      	ldr	r2, [pc, #40]	; (7a0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    79e4:	9b01      	ldr	r3, [sp, #4]
    79e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79ea:	f003 0301 	and.w	r3, r3, #1
    79ee:	2b00      	cmp	r3, #0
    79f0:	d106      	bne.n	7a00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    79f2:	4a05      	ldr	r2, [pc, #20]	; (7a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    79f4:	9b01      	ldr	r3, [sp, #4]
    79f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79fa:	2b00      	cmp	r3, #0
    79fc:	d100      	bne.n	7a00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    79fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7a00:	bf00      	nop
    7a02:	b003      	add	sp, #12
    7a04:	f85d fb04 	ldr.w	pc, [sp], #4
    7a08:	1fff8dd4 	.word	0x1fff8dd4
    7a0c:	1fff8dd0 	.word	0x1fff8dd0

00007a10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7a10:	b500      	push	{lr}
    7a12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a14:	f7f9 fdd4 	bl	15c0 <Sys_GetCoreID>
    7a18:	4603      	mov	r3, r0
    7a1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    7a1c:	4a10      	ldr	r2, [pc, #64]	; (7a60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7a1e:	9b01      	ldr	r3, [sp, #4]
    7a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a24:	2b00      	cmp	r3, #0
    7a26:	d10d      	bne.n	7a44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7a28:	f7f8 ff60 	bl	8ec <Port_schm_read_msr>
    7a2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7a2e:	9b00      	ldr	r3, [sp, #0]
    7a30:	f003 0301 	and.w	r3, r3, #1
    7a34:	2b00      	cmp	r3, #0
    7a36:	d100      	bne.n	7a3a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7a38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    7a3a:	490a      	ldr	r1, [pc, #40]	; (7a64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    7a3c:	9b01      	ldr	r3, [sp, #4]
    7a3e:	9a00      	ldr	r2, [sp, #0]
    7a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    7a44:	4a06      	ldr	r2, [pc, #24]	; (7a60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7a46:	9b01      	ldr	r3, [sp, #4]
    7a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a4c:	1c5a      	adds	r2, r3, #1
    7a4e:	4904      	ldr	r1, [pc, #16]	; (7a60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7a50:	9b01      	ldr	r3, [sp, #4]
    7a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a56:	bf00      	nop
    7a58:	b003      	add	sp, #12
    7a5a:	f85d fb04 	ldr.w	pc, [sp], #4
    7a5e:	bf00      	nop
    7a60:	1fff8ddc 	.word	0x1fff8ddc
    7a64:	1fff8dd8 	.word	0x1fff8dd8

00007a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7a68:	b500      	push	{lr}
    7a6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7a6c:	f7f9 fda8 	bl	15c0 <Sys_GetCoreID>
    7a70:	4603      	mov	r3, r0
    7a72:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    7a74:	4a0d      	ldr	r2, [pc, #52]	; (7aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7a76:	9b01      	ldr	r3, [sp, #4]
    7a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a7c:	1e5a      	subs	r2, r3, #1
    7a7e:	490b      	ldr	r1, [pc, #44]	; (7aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7a80:	9b01      	ldr	r3, [sp, #4]
    7a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    7a86:	4a0a      	ldr	r2, [pc, #40]	; (7ab0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    7a88:	9b01      	ldr	r3, [sp, #4]
    7a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a8e:	f003 0301 	and.w	r3, r3, #1
    7a92:	2b00      	cmp	r3, #0
    7a94:	d106      	bne.n	7aa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    7a96:	4a05      	ldr	r2, [pc, #20]	; (7aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7a98:	9b01      	ldr	r3, [sp, #4]
    7a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a9e:	2b00      	cmp	r3, #0
    7aa0:	d100      	bne.n	7aa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7aa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7aa4:	bf00      	nop
    7aa6:	b003      	add	sp, #12
    7aa8:	f85d fb04 	ldr.w	pc, [sp], #4
    7aac:	1fff8ddc 	.word	0x1fff8ddc
    7ab0:	1fff8dd8 	.word	0x1fff8dd8

00007ab4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7ab4:	b500      	push	{lr}
    7ab6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ab8:	f7f9 fd82 	bl	15c0 <Sys_GetCoreID>
    7abc:	4603      	mov	r3, r0
    7abe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    7ac0:	4a10      	ldr	r2, [pc, #64]	; (7b04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7ac2:	9b01      	ldr	r3, [sp, #4]
    7ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ac8:	2b00      	cmp	r3, #0
    7aca:	d10d      	bne.n	7ae8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7acc:	f7f8 ff0e 	bl	8ec <Port_schm_read_msr>
    7ad0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7ad2:	9b00      	ldr	r3, [sp, #0]
    7ad4:	f003 0301 	and.w	r3, r3, #1
    7ad8:	2b00      	cmp	r3, #0
    7ada:	d100      	bne.n	7ade <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7adc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    7ade:	490a      	ldr	r1, [pc, #40]	; (7b08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    7ae0:	9b01      	ldr	r3, [sp, #4]
    7ae2:	9a00      	ldr	r2, [sp, #0]
    7ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    7ae8:	4a06      	ldr	r2, [pc, #24]	; (7b04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7aea:	9b01      	ldr	r3, [sp, #4]
    7aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7af0:	1c5a      	adds	r2, r3, #1
    7af2:	4904      	ldr	r1, [pc, #16]	; (7b04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7af4:	9b01      	ldr	r3, [sp, #4]
    7af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7afa:	bf00      	nop
    7afc:	b003      	add	sp, #12
    7afe:	f85d fb04 	ldr.w	pc, [sp], #4
    7b02:	bf00      	nop
    7b04:	1fff8de4 	.word	0x1fff8de4
    7b08:	1fff8de0 	.word	0x1fff8de0

00007b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7b0c:	b500      	push	{lr}
    7b0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b10:	f7f9 fd56 	bl	15c0 <Sys_GetCoreID>
    7b14:	4603      	mov	r3, r0
    7b16:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    7b18:	4a0d      	ldr	r2, [pc, #52]	; (7b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7b1a:	9b01      	ldr	r3, [sp, #4]
    7b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b20:	1e5a      	subs	r2, r3, #1
    7b22:	490b      	ldr	r1, [pc, #44]	; (7b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7b24:	9b01      	ldr	r3, [sp, #4]
    7b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    7b2a:	4a0a      	ldr	r2, [pc, #40]	; (7b54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    7b2c:	9b01      	ldr	r3, [sp, #4]
    7b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b32:	f003 0301 	and.w	r3, r3, #1
    7b36:	2b00      	cmp	r3, #0
    7b38:	d106      	bne.n	7b48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    7b3a:	4a05      	ldr	r2, [pc, #20]	; (7b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7b3c:	9b01      	ldr	r3, [sp, #4]
    7b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b42:	2b00      	cmp	r3, #0
    7b44:	d100      	bne.n	7b48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7b46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7b48:	bf00      	nop
    7b4a:	b003      	add	sp, #12
    7b4c:	f85d fb04 	ldr.w	pc, [sp], #4
    7b50:	1fff8de4 	.word	0x1fff8de4
    7b54:	1fff8de0 	.word	0x1fff8de0

00007b58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7b58:	b500      	push	{lr}
    7b5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7b5c:	f7f9 fd30 	bl	15c0 <Sys_GetCoreID>
    7b60:	4603      	mov	r3, r0
    7b62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    7b64:	4a10      	ldr	r2, [pc, #64]	; (7ba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7b66:	9b01      	ldr	r3, [sp, #4]
    7b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b6c:	2b00      	cmp	r3, #0
    7b6e:	d10d      	bne.n	7b8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7b70:	f7f8 febc 	bl	8ec <Port_schm_read_msr>
    7b74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7b76:	9b00      	ldr	r3, [sp, #0]
    7b78:	f003 0301 	and.w	r3, r3, #1
    7b7c:	2b00      	cmp	r3, #0
    7b7e:	d100      	bne.n	7b82 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7b80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    7b82:	490a      	ldr	r1, [pc, #40]	; (7bac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    7b84:	9b01      	ldr	r3, [sp, #4]
    7b86:	9a00      	ldr	r2, [sp, #0]
    7b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    7b8c:	4a06      	ldr	r2, [pc, #24]	; (7ba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7b8e:	9b01      	ldr	r3, [sp, #4]
    7b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b94:	1c5a      	adds	r2, r3, #1
    7b96:	4904      	ldr	r1, [pc, #16]	; (7ba8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7b98:	9b01      	ldr	r3, [sp, #4]
    7b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7b9e:	bf00      	nop
    7ba0:	b003      	add	sp, #12
    7ba2:	f85d fb04 	ldr.w	pc, [sp], #4
    7ba6:	bf00      	nop
    7ba8:	1fff8dec 	.word	0x1fff8dec
    7bac:	1fff8de8 	.word	0x1fff8de8

00007bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7bb0:	b500      	push	{lr}
    7bb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7bb4:	f7f9 fd04 	bl	15c0 <Sys_GetCoreID>
    7bb8:	4603      	mov	r3, r0
    7bba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    7bbc:	4a0d      	ldr	r2, [pc, #52]	; (7bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7bbe:	9b01      	ldr	r3, [sp, #4]
    7bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bc4:	1e5a      	subs	r2, r3, #1
    7bc6:	490b      	ldr	r1, [pc, #44]	; (7bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7bc8:	9b01      	ldr	r3, [sp, #4]
    7bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    7bce:	4a0a      	ldr	r2, [pc, #40]	; (7bf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    7bd0:	9b01      	ldr	r3, [sp, #4]
    7bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bd6:	f003 0301 	and.w	r3, r3, #1
    7bda:	2b00      	cmp	r3, #0
    7bdc:	d106      	bne.n	7bec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    7bde:	4a05      	ldr	r2, [pc, #20]	; (7bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7be0:	9b01      	ldr	r3, [sp, #4]
    7be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7be6:	2b00      	cmp	r3, #0
    7be8:	d100      	bne.n	7bec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7bea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7bec:	bf00      	nop
    7bee:	b003      	add	sp, #12
    7bf0:	f85d fb04 	ldr.w	pc, [sp], #4
    7bf4:	1fff8dec 	.word	0x1fff8dec
    7bf8:	1fff8de8 	.word	0x1fff8de8

00007bfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    7bfc:	b500      	push	{lr}
    7bfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c00:	f7f9 fcde 	bl	15c0 <Sys_GetCoreID>
    7c04:	4603      	mov	r3, r0
    7c06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    7c08:	4a10      	ldr	r2, [pc, #64]	; (7c4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    7c0a:	9b01      	ldr	r3, [sp, #4]
    7c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c10:	2b00      	cmp	r3, #0
    7c12:	d10d      	bne.n	7c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7c14:	f7f8 fe6a 	bl	8ec <Port_schm_read_msr>
    7c18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7c1a:	9b00      	ldr	r3, [sp, #0]
    7c1c:	f003 0301 	and.w	r3, r3, #1
    7c20:	2b00      	cmp	r3, #0
    7c22:	d100      	bne.n	7c26 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7c24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    7c26:	490a      	ldr	r1, [pc, #40]	; (7c50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    7c28:	9b01      	ldr	r3, [sp, #4]
    7c2a:	9a00      	ldr	r2, [sp, #0]
    7c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    7c30:	4a06      	ldr	r2, [pc, #24]	; (7c4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    7c32:	9b01      	ldr	r3, [sp, #4]
    7c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c38:	1c5a      	adds	r2, r3, #1
    7c3a:	4904      	ldr	r1, [pc, #16]	; (7c4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    7c3c:	9b01      	ldr	r3, [sp, #4]
    7c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c42:	bf00      	nop
    7c44:	b003      	add	sp, #12
    7c46:	f85d fb04 	ldr.w	pc, [sp], #4
    7c4a:	bf00      	nop
    7c4c:	1fff8df4 	.word	0x1fff8df4
    7c50:	1fff8df0 	.word	0x1fff8df0

00007c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    7c54:	b500      	push	{lr}
    7c56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7c58:	f7f9 fcb2 	bl	15c0 <Sys_GetCoreID>
    7c5c:	4603      	mov	r3, r0
    7c5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    7c60:	4a0d      	ldr	r2, [pc, #52]	; (7c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7c62:	9b01      	ldr	r3, [sp, #4]
    7c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c68:	1e5a      	subs	r2, r3, #1
    7c6a:	490b      	ldr	r1, [pc, #44]	; (7c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7c6c:	9b01      	ldr	r3, [sp, #4]
    7c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    7c72:	4a0a      	ldr	r2, [pc, #40]	; (7c9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    7c74:	9b01      	ldr	r3, [sp, #4]
    7c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c7a:	f003 0301 	and.w	r3, r3, #1
    7c7e:	2b00      	cmp	r3, #0
    7c80:	d106      	bne.n	7c90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    7c82:	4a05      	ldr	r2, [pc, #20]	; (7c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7c84:	9b01      	ldr	r3, [sp, #4]
    7c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c8a:	2b00      	cmp	r3, #0
    7c8c:	d100      	bne.n	7c90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7c8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7c90:	bf00      	nop
    7c92:	b003      	add	sp, #12
    7c94:	f85d fb04 	ldr.w	pc, [sp], #4
    7c98:	1fff8df4 	.word	0x1fff8df4
    7c9c:	1fff8df0 	.word	0x1fff8df0

00007ca0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7ca0:	b500      	push	{lr}
    7ca2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ca4:	f7f9 fc8c 	bl	15c0 <Sys_GetCoreID>
    7ca8:	4603      	mov	r3, r0
    7caa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    7cac:	4a10      	ldr	r2, [pc, #64]	; (7cf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7cae:	9b01      	ldr	r3, [sp, #4]
    7cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cb4:	2b00      	cmp	r3, #0
    7cb6:	d10d      	bne.n	7cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7cb8:	f7f8 fe18 	bl	8ec <Port_schm_read_msr>
    7cbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7cbe:	9b00      	ldr	r3, [sp, #0]
    7cc0:	f003 0301 	and.w	r3, r3, #1
    7cc4:	2b00      	cmp	r3, #0
    7cc6:	d100      	bne.n	7cca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7cc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    7cca:	490a      	ldr	r1, [pc, #40]	; (7cf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    7ccc:	9b01      	ldr	r3, [sp, #4]
    7cce:	9a00      	ldr	r2, [sp, #0]
    7cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    7cd4:	4a06      	ldr	r2, [pc, #24]	; (7cf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7cd6:	9b01      	ldr	r3, [sp, #4]
    7cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cdc:	1c5a      	adds	r2, r3, #1
    7cde:	4904      	ldr	r1, [pc, #16]	; (7cf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7ce0:	9b01      	ldr	r3, [sp, #4]
    7ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7ce6:	bf00      	nop
    7ce8:	b003      	add	sp, #12
    7cea:	f85d fb04 	ldr.w	pc, [sp], #4
    7cee:	bf00      	nop
    7cf0:	1fff8dfc 	.word	0x1fff8dfc
    7cf4:	1fff8df8 	.word	0x1fff8df8

00007cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7cf8:	b500      	push	{lr}
    7cfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7cfc:	f7f9 fc60 	bl	15c0 <Sys_GetCoreID>
    7d00:	4603      	mov	r3, r0
    7d02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    7d04:	4a0d      	ldr	r2, [pc, #52]	; (7d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7d06:	9b01      	ldr	r3, [sp, #4]
    7d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d0c:	1e5a      	subs	r2, r3, #1
    7d0e:	490b      	ldr	r1, [pc, #44]	; (7d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7d10:	9b01      	ldr	r3, [sp, #4]
    7d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    7d16:	4a0a      	ldr	r2, [pc, #40]	; (7d40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    7d18:	9b01      	ldr	r3, [sp, #4]
    7d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d1e:	f003 0301 	and.w	r3, r3, #1
    7d22:	2b00      	cmp	r3, #0
    7d24:	d106      	bne.n	7d34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    7d26:	4a05      	ldr	r2, [pc, #20]	; (7d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7d28:	9b01      	ldr	r3, [sp, #4]
    7d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d2e:	2b00      	cmp	r3, #0
    7d30:	d100      	bne.n	7d34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7d32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7d34:	bf00      	nop
    7d36:	b003      	add	sp, #12
    7d38:	f85d fb04 	ldr.w	pc, [sp], #4
    7d3c:	1fff8dfc 	.word	0x1fff8dfc
    7d40:	1fff8df8 	.word	0x1fff8df8

00007d44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    7d44:	b500      	push	{lr}
    7d46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7d48:	f7f9 fc3a 	bl	15c0 <Sys_GetCoreID>
    7d4c:	4603      	mov	r3, r0
    7d4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    7d50:	4a10      	ldr	r2, [pc, #64]	; (7d94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7d52:	9b01      	ldr	r3, [sp, #4]
    7d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d58:	2b00      	cmp	r3, #0
    7d5a:	d10d      	bne.n	7d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7d5c:	f7f8 fdc6 	bl	8ec <Port_schm_read_msr>
    7d60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7d62:	9b00      	ldr	r3, [sp, #0]
    7d64:	f003 0301 	and.w	r3, r3, #1
    7d68:	2b00      	cmp	r3, #0
    7d6a:	d100      	bne.n	7d6e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7d6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    7d6e:	490a      	ldr	r1, [pc, #40]	; (7d98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    7d70:	9b01      	ldr	r3, [sp, #4]
    7d72:	9a00      	ldr	r2, [sp, #0]
    7d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    7d78:	4a06      	ldr	r2, [pc, #24]	; (7d94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7d7a:	9b01      	ldr	r3, [sp, #4]
    7d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d80:	1c5a      	adds	r2, r3, #1
    7d82:	4904      	ldr	r1, [pc, #16]	; (7d94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7d84:	9b01      	ldr	r3, [sp, #4]
    7d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7d8a:	bf00      	nop
    7d8c:	b003      	add	sp, #12
    7d8e:	f85d fb04 	ldr.w	pc, [sp], #4
    7d92:	bf00      	nop
    7d94:	1fff8e04 	.word	0x1fff8e04
    7d98:	1fff8e00 	.word	0x1fff8e00

00007d9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    7d9c:	b500      	push	{lr}
    7d9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7da0:	f7f9 fc0e 	bl	15c0 <Sys_GetCoreID>
    7da4:	4603      	mov	r3, r0
    7da6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    7da8:	4a0d      	ldr	r2, [pc, #52]	; (7de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7daa:	9b01      	ldr	r3, [sp, #4]
    7dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7db0:	1e5a      	subs	r2, r3, #1
    7db2:	490b      	ldr	r1, [pc, #44]	; (7de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7db4:	9b01      	ldr	r3, [sp, #4]
    7db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    7dba:	4a0a      	ldr	r2, [pc, #40]	; (7de4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    7dbc:	9b01      	ldr	r3, [sp, #4]
    7dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dc2:	f003 0301 	and.w	r3, r3, #1
    7dc6:	2b00      	cmp	r3, #0
    7dc8:	d106      	bne.n	7dd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    7dca:	4a05      	ldr	r2, [pc, #20]	; (7de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7dcc:	9b01      	ldr	r3, [sp, #4]
    7dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dd2:	2b00      	cmp	r3, #0
    7dd4:	d100      	bne.n	7dd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7dd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7dd8:	bf00      	nop
    7dda:	b003      	add	sp, #12
    7ddc:	f85d fb04 	ldr.w	pc, [sp], #4
    7de0:	1fff8e04 	.word	0x1fff8e04
    7de4:	1fff8e00 	.word	0x1fff8e00

00007de8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7de8:	b500      	push	{lr}
    7dea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7dec:	f7f9 fbe8 	bl	15c0 <Sys_GetCoreID>
    7df0:	4603      	mov	r3, r0
    7df2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    7df4:	4a10      	ldr	r2, [pc, #64]	; (7e38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7df6:	9b01      	ldr	r3, [sp, #4]
    7df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dfc:	2b00      	cmp	r3, #0
    7dfe:	d10d      	bne.n	7e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7e00:	f7f8 fd74 	bl	8ec <Port_schm_read_msr>
    7e04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7e06:	9b00      	ldr	r3, [sp, #0]
    7e08:	f003 0301 	and.w	r3, r3, #1
    7e0c:	2b00      	cmp	r3, #0
    7e0e:	d100      	bne.n	7e12 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7e10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    7e12:	490a      	ldr	r1, [pc, #40]	; (7e3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    7e14:	9b01      	ldr	r3, [sp, #4]
    7e16:	9a00      	ldr	r2, [sp, #0]
    7e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    7e1c:	4a06      	ldr	r2, [pc, #24]	; (7e38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7e1e:	9b01      	ldr	r3, [sp, #4]
    7e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e24:	1c5a      	adds	r2, r3, #1
    7e26:	4904      	ldr	r1, [pc, #16]	; (7e38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7e28:	9b01      	ldr	r3, [sp, #4]
    7e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7e2e:	bf00      	nop
    7e30:	b003      	add	sp, #12
    7e32:	f85d fb04 	ldr.w	pc, [sp], #4
    7e36:	bf00      	nop
    7e38:	1fff8e0c 	.word	0x1fff8e0c
    7e3c:	1fff8e08 	.word	0x1fff8e08

00007e40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7e40:	b500      	push	{lr}
    7e42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e44:	f7f9 fbbc 	bl	15c0 <Sys_GetCoreID>
    7e48:	4603      	mov	r3, r0
    7e4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    7e4c:	4a0d      	ldr	r2, [pc, #52]	; (7e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7e4e:	9b01      	ldr	r3, [sp, #4]
    7e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e54:	1e5a      	subs	r2, r3, #1
    7e56:	490b      	ldr	r1, [pc, #44]	; (7e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7e58:	9b01      	ldr	r3, [sp, #4]
    7e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    7e5e:	4a0a      	ldr	r2, [pc, #40]	; (7e88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    7e60:	9b01      	ldr	r3, [sp, #4]
    7e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e66:	f003 0301 	and.w	r3, r3, #1
    7e6a:	2b00      	cmp	r3, #0
    7e6c:	d106      	bne.n	7e7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    7e6e:	4a05      	ldr	r2, [pc, #20]	; (7e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7e70:	9b01      	ldr	r3, [sp, #4]
    7e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e76:	2b00      	cmp	r3, #0
    7e78:	d100      	bne.n	7e7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7e7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7e7c:	bf00      	nop
    7e7e:	b003      	add	sp, #12
    7e80:	f85d fb04 	ldr.w	pc, [sp], #4
    7e84:	1fff8e0c 	.word	0x1fff8e0c
    7e88:	1fff8e08 	.word	0x1fff8e08

00007e8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7e8c:	b500      	push	{lr}
    7e8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7e90:	f7f9 fb96 	bl	15c0 <Sys_GetCoreID>
    7e94:	4603      	mov	r3, r0
    7e96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    7e98:	4a10      	ldr	r2, [pc, #64]	; (7edc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7e9a:	9b01      	ldr	r3, [sp, #4]
    7e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	d10d      	bne.n	7ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7ea4:	f7f8 fd22 	bl	8ec <Port_schm_read_msr>
    7ea8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7eaa:	9b00      	ldr	r3, [sp, #0]
    7eac:	f003 0301 	and.w	r3, r3, #1
    7eb0:	2b00      	cmp	r3, #0
    7eb2:	d100      	bne.n	7eb6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7eb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    7eb6:	490a      	ldr	r1, [pc, #40]	; (7ee0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    7eb8:	9b01      	ldr	r3, [sp, #4]
    7eba:	9a00      	ldr	r2, [sp, #0]
    7ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    7ec0:	4a06      	ldr	r2, [pc, #24]	; (7edc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7ec2:	9b01      	ldr	r3, [sp, #4]
    7ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ec8:	1c5a      	adds	r2, r3, #1
    7eca:	4904      	ldr	r1, [pc, #16]	; (7edc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7ecc:	9b01      	ldr	r3, [sp, #4]
    7ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7ed2:	bf00      	nop
    7ed4:	b003      	add	sp, #12
    7ed6:	f85d fb04 	ldr.w	pc, [sp], #4
    7eda:	bf00      	nop
    7edc:	1fff8e14 	.word	0x1fff8e14
    7ee0:	1fff8e10 	.word	0x1fff8e10

00007ee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7ee4:	b500      	push	{lr}
    7ee6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7ee8:	f7f9 fb6a 	bl	15c0 <Sys_GetCoreID>
    7eec:	4603      	mov	r3, r0
    7eee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    7ef0:	4a0d      	ldr	r2, [pc, #52]	; (7f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7ef2:	9b01      	ldr	r3, [sp, #4]
    7ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ef8:	1e5a      	subs	r2, r3, #1
    7efa:	490b      	ldr	r1, [pc, #44]	; (7f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7efc:	9b01      	ldr	r3, [sp, #4]
    7efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    7f02:	4a0a      	ldr	r2, [pc, #40]	; (7f2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    7f04:	9b01      	ldr	r3, [sp, #4]
    7f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f0a:	f003 0301 	and.w	r3, r3, #1
    7f0e:	2b00      	cmp	r3, #0
    7f10:	d106      	bne.n	7f20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    7f12:	4a05      	ldr	r2, [pc, #20]	; (7f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7f14:	9b01      	ldr	r3, [sp, #4]
    7f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f1a:	2b00      	cmp	r3, #0
    7f1c:	d100      	bne.n	7f20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7f1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7f20:	bf00      	nop
    7f22:	b003      	add	sp, #12
    7f24:	f85d fb04 	ldr.w	pc, [sp], #4
    7f28:	1fff8e14 	.word	0x1fff8e14
    7f2c:	1fff8e10 	.word	0x1fff8e10

00007f30 <Clock_Ip_au8DividerCallbackIndex>:
    7f30:	0e0d0c00 06030201 0a070409 000b0805     ................

00007f40 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00007f50 <Clock_Ip_au8XoscCallbackIndex>:
    7f50:	00000100 00000000 00000000 00000000     ................

00007f60 <Clock_Ip_au8IrcoscCallbackIndex>:
    7f60:	03020100 00000004 00000000 00000000     ................

00007f70 <Clock_Ip_au8GateCallbackIndex>:
    7f70:	06010200 01040301 00000500 00000000     ................

00007f80 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00007f90 <Clock_Ip_au8PllCallbackIndex>:
    7f90:	00000100 00000000 00000000 00000000     ................

00007fa0 <Clock_Ip_au8SelectorCallbackIndex>:
    7fa0:	0a090800 03020109 07060504 00000000     ................

00007fb0 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00007fc0 <Clock_Ip_au8CmuCallbackIndex>:
	...

00007fd0 <Clock_Ip_au8ClockFeatures>:
	...
    7fe0:	01000000 00000000 00000000 00000002     ................
    7ff0:	00000000 00000300 00000000 00040000     ................
    8000:	00000000 05000000 00000000 00000000     ................
    8010:	00000006 00000000 00000100 00000000     ................
    8020:	00010000 00000000 04000000 00000000     ................
    8030:	00000000 00000005 00000001 00000401     ................
    8040:	00000200 00050100 00030000 04020000     ................
    8050:	04000000 02000000 00000005 00000005     ................
    8060:	00000403 00000600 00050300 00070000     ................
    8070:	05000000 00000000 00000000 00000006     ................
	...
    80b0:	00050000 00000000 06000000 00000100     ................
    80c0:	00000000 00030007 00000000 00000000     ................
    80d0:	00000000 00060000 00000000 07000000     ................
    80e0:	00000100 00000000 00030008 00000000     ................
	...
    80f8:	00090000 00000000 0a000000 00000100     ................
    8108:	00000000 0003000b 00000000 00000000     ................
    8118:	00000000 000c0000 00000000 0d000000     ................
    8128:	00000100 00000000 0003000e 00000000     ................
    8138:	00000800 00000000 00090000 00000000     ................
    8148:	0a000000 00000000 00000000 0000000b     ................
    8158:	00000000 00000b01 00000000 000b0200     ................
    8168:	00000000 0b030000 00000000 00000000     ................
	...
    8180:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    8190:	01000000 00000000 00000000 00000007     ................
    81a0:	00007300 00000700 00320000 00090000     .s........2.....
    81b0:	02000000 07000000 00000000 00000021     ............!...
    81c0:	00000009 00000400 00000900 00030000     ................
    81d0:	00070000 61000000 07000000 00000000     .......a........
    81e0:	00000024 00000007 00002500 00000700     $........%......
    81f0:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    8200:	00000000 00000020 38000004 00003800     .... ......8.8..
    8210:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    8220:	04000000 00260000 00000026 66000004     ......&.&......f
    8230:	00006600 00000400 00370037 00040000     .f......7.7.....
    8240:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    8250:	2e000004 00002e00 00000200 00404040     ............@@@.
    8260:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    8270:	0000006b 6c000004 00006c00 00000900     k......l.l......
    8280:	00010000 00090000 00000000 07000000     ................
    8290:	00000000 00000036 00000007 00003100     ....6........1..
    82a0:	00000700 00490000 00070000 4a000000     ......I........J
    82b0:	07000000 00000000 0000004b 00000007     ........K.......
    82c0:	00004c00 00000700 004d0000 00070000     .L........M.....
    82d0:	3d000000 03000000 00000000 00000000     ...=............

000082e0 <Clock_Ip_au16SelectorEntryHardwareValue>:
    82e0:	01010a03 01010001 04040002 02000603     ................
    82f0:	00010810 02020100 00000000 00000007     ................
    8300:	00000009 00000000 00000c0e 00000000     ................
	...

00008338 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    8338:	00020000 00000300 00000601 00000000     ................
	...

00008368 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    8368:	00000700 00000000 02020000 01010303     ................
    8378:	03020606 00000000 00000000 00000000     ................
	...

00008398 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    8398:	00000001 00000000 02020000 01010303     ................
    83a8:	03020606 00000000 00000000 00000000     ................
	...

000083c8 <Clock_Ip_au8DividerValueHardwareValue>:
    83c8:	00020100 00000003 00000004 00000000     ................
    83d8:	00000005 00000000 00000000 00000000     ................
    83e8:	00000006 00000000 00000000 00000000     ................
	...
    8408:	00000007                                ....

0000840c <Clock_Ip_apxScgPeriphAsyncDivs>:
    840c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000841c <Clock_Ip_aeSourceTypeClockName>:
    841c:	00000000 00000001 00000001 00000001     ................
    842c:	00000001 00000001 00000001 00000001     ................
    843c:	00000002 00000003 00000001 00000001     ................
    844c:	00000001 00000001 00000002 00000002     ................
    845c:	00000003 00000003 00000001 00000001     ................
    846c:	00000004 00000004 00000004 00000004     ................
	...

000084d8 <Clock_Ip_aeHwPllName>:
    84d8:	00000009                                ....

000084dc <Clock_Ip_aeHwDfsName>:
    84dc:	00000057                                W...

000084e0 <Clock_Ip_axDividerCallbacks>:
    84e0:	000029a9 000029b3 000029cd 000029e7     .)...)...)...)..
    84f0:	00002a01 00002a1b 00002a35 00002a4f     .*...*..5*..O*..
    8500:	00002a69 00002a83 00002a9d 00002ab7     i*...*...*...*..
    8510:	00002ad1 00002aeb 00002b05              .*...*...+..

0000851c <Clock_Ip_axDividerTriggerCallbacks>:
    851c:	00002e79 00002e79                       y...y...

00008524 <Clock_Ip_axExtOscCallbacks>:
    8524:	00002e85 00002e85 00002e85 00002e8f     ................
    8534:	00002e85 00002e99 00002eb3 00002ecd     ................
    8544:	00002f51 00002f65                       Q/..e/..

0000854c <Clock_Ip_axFracDivCallbacks>:
    854c:	00003125 00003125 0000312f              %1..%1../1..

00008558 <Clock_Ip_axGateCallbacks>:
    8558:	00003149 00003153 00003253 0000326d     I1..S1..S2..m2..
    8568:	00003203 0000321d 000031b3 000031cd     .2...2...1...1..
    8578:	00003163 0000317d 000032a3 000032bd     c1..}1...2...2..
    8588:	000032f3 0000330d                       .2...3..

00008590 <Clock_Ip_axIntOscCallbacks>:
    8590:	000034b9 000034b9 000034c3 000034cd     .4...4...4...4..
    85a0:	000034e7 00003501 00003515 0000352f     .4...5...5../5..
    85b0:	00003549 0000355d 00003577 00003591     I5..]5..w5...5..
    85c0:	00003639 00003653 0000366d              96..S6..m6..

000085cc <Clock_Ip_axCmuCallbacks>:
    85cc:	00003c09 00003c13 00003c1f 00003c09     .<...<...<...<..

000085dc <Clock_Ip_axPllCallbacks>:
    85dc:	00003c29 00003c29 00003c33 00003c29     )<..)<..3<..)<..
    85ec:	00003c3f 00003c49 00003c63 00003c7d     ?<..I<..c<..}<..
    85fc:	00003d21 00003d0d                       !=...=..

00008604 <Clock_Ip_axPcfsCallbacks>:
    8604:	00003e7d                                }>..

00008608 <Clock_Ip_axSelectorCallbacks>:
    8608:	00003e89 00003e89 00003e93 00003ead     .>...>...>...>..
    8618:	00003e89 00003ec7 00003ee1 00003efb     .>...>...>...>..
    8628:	00003f15 00003f2f 00003f49 00003f63     .?../?..I?..c?..
    8638:	00003f7d 00003f97 00003fb1 00003fcb     }?...?...?...?..
    8648:	00003fe5 00003fff 00004019 00004033     .?...?...@..3@..
    8658:	0000404d 00004067                       M@..g@..

00008660 <ClockSource>:
    8660:	00000000 00000008 00000002 00000005     ................
	...
    8678:	00000009                                ....

0000867c <ResetReasonArray>:
    867c:	00000000 00000001 00000002 00000003     ................
    868c:	00000004 00000005 00000006 00000007     ................
    869c:	00000008 00000009 0000000a 0000000b     ................
    86ac:	0000000c 0000000d 0000000e              ............

000086b8 <Port_au32PortCiPortBaseAddr>:
    86b8:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    86c8:	4004d000                                ...@

000086cc <Port_au32PortCiGpioBaseAddr>:
    86cc:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    86dc:	400ff100                                ...@

000086e0 <Queue_Config>:
    86e0:	00000002 00000003 1fff8b50              ........P...

000086ec <Task_Config>:
    86ec:	00000032 00000001 000008ff 00000064     2...........d...
    86fc:	00000001 00000909                       ........

00008704 <Timer_Config>:
    8704:	0000012c 00000000 00000a13 0000012c     ,...........,...
    8714:	00000000 00000a1f 0000012c 00000000     ........,.......
    8724:	00000a2b                                +...

00008728 <Scheduler_Config>:
    8728:	0000000a 00000002 000086ec 00000003     ................
    8738:	00008704 00000001 000086e0              ............

00008744 <Mcu_aClockConfigPB>:
	...
    874c:	14000002 0400000e 01000020 00000002     ........ .......
    875c:	01000001 00000001 00000005 00000001     ................
    876c:	00000000 00000057 00000000 00000000     ....W...........
	...
    8784:	00000057 00000000 00000057 00000000     W.......W.......
	...
    87ac:	00000019 00000005 0000001a 00000002     ................
    87bc:	0000001b 00000005 0000002a 00000002     ........*.......
    87cc:	0000003f 0000000a 00000040 00000000     ?.......@.......
    87dc:	00000041 00000000 00000042 00000000     A.......B.......
    87ec:	00000031 00000000 00000045 00000000     1.......E.......
    87fc:	00000046 00000000 00000047 00000000     F.......G.......
    880c:	00000044 00000000 00000030 00000000     D.......0.......
    881c:	0000003d 00000000 00000043 00000000     =.......C.......
    882c:	00000049 00000000 0000004a 00000000     I.......J.......
    883c:	0000004b 00000000 00000048 00000000     K.......H.......
    884c:	00000057 00000057 00000057 00000057     W...W...W...W...
    885c:	00000057 00000057 00000057 00000057     W...W...W...W...
    886c:	00000057 00000057 00000057 00000057     W...W...W...W...
    887c:	00000057 00000057 00000057 00000057     W...W...W...W...
    888c:	0000000a 00000008 00000000 0000000b     ................
    889c:	00000001 00000000 0000000c 00000001     ................
    88ac:	00000000 0000000d 00000001 00000000     ................
    88bc:	0000001d 00000001 00000000 0000001e     ................
    88cc:	00000002 00000000 0000001f 00000001     ................
    88dc:	00000000 00000021 00000001 00000000     ....!...........
    88ec:	00000022 00000002 00000000 00000023     "...........#...
    88fc:	00000001 00000000 00000025 00000002     ........%.......
    890c:	00000000 00000026 00000004 00000000     ....&...........
    891c:	00000027 00000002 00000000 00000048     '...........H...
    892c:	00000001 00000001 00000057 00000000     ........W.......
    893c:	00000000 00000057 00000000 00000000     ....W...........
    894c:	00000057 00000000 00000000 00000057     W...........W...
	...
    8964:	00000057 00000000 00000000 00000057     W...........W...
	...
    897c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    8998:	00000014 00007d00 00000015 00007d00     .....}.......}..
    89a8:	00000016 00007d00 00000017 00008000     .....}..........
    89b8:	00000030 00000000 00000031 00000000     0.......1.......
    89c8:	00000033 00000000 00000034 00000000     3.......4.......
    89d8:	00000036 00000000 00000039 00000000     6.......9.......
    89e8:	0000003a 00000000 0000003b 00000000     :.......;.......
    89f8:	0000003c 00000000 0000003d 00000000     <.......=.......
    8a08:	0000003e 00000000 0000003f 00000000     >.......?.......
    8a18:	00000040 00000000 00000041 00000000     @.......A.......
    8a28:	00000042 00000000 00000043 00000000     B.......C.......
    8a38:	00000044 00000000 00000045 00000000     D.......E.......
    8a48:	00000046 00000000 00000047 00000000     F.......G.......
    8a58:	00000048 00000000 00000049 00000000     H.......I.......
    8a68:	0000004a 00000000 0000004b 00000000     J.......K.......
    8a78:	0000004e 00000000 0000004f 00000000     N.......O.......
    8a88:	00000050 00000001 00000051 00000001     P.......Q.......
    8a98:	00000052 00000001 00000053 00000001     R.......S.......
    8aa8:	00000054 00000001 00000055 00000000     T.......U.......
    8ab8:	00000057 00000000 00000057 00000000     W.......W.......
    8ac8:	00000057 00000000 00000057 00000000     W.......W.......
    8ad8:	00000057 00000000 00000057 00000000     W.......W.......
    8ae8:	00000057 00000000 00000057 00000000     W.......W.......
    8af8:	00000057 00000000 00000057 00000000     W.......W.......
    8b08:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00008b3c <Mcu_Config>:
    8b3c:	0000005a 00000000 00000001 00000001     Z...............
    8b4c:	00008e80 00008744 00008e8c              ....D.......

00008b58 <OsIf_xPredefinedConfig>:
    8b58:	00000000 02dc6c00                       .....l..

00008b60 <OsIf_apxPredefinedConfig>:
    8b60:	00008b58                                X...

00008b64 <g_pin_mux_InitConfigArr>:
    8b64:	4004b000 400ff080 00000008 00000002     ...@...@........
    8b74:	00000001 00000002 00000000 00000000     ................
	...
    8b8c:	4004b000 400ff080 00000009 00000002     ...@...@........
    8b9c:	00000001 00000002 00000000 00000000     ................
	...
    8bb4:	4004b000 400ff080 0000000a 00000002     ...@...@........
    8bc4:	00000001 00000002 00000000 00000000     ................
	...
    8bdc:	4004b000 400ff080 0000000b 00000002     ...@...@........
    8bec:	00000001 00000002 00000000 00000000     ................
	...
    8c04:	4004b000 400ff080 0000000d 00000002     ...@...@........
    8c14:	00000001 00000002 00000000 00000000     ................
	...
    8c2c:	4004b000 400ff080 0000000e 00000002     ...@...@........
    8c3c:	00000001 00000002 00000000 00000000     ................
	...
    8c54:	4004d000 400ff100 0000000c 00000002     ...@...@........
    8c64:	00000001 00000001 00000000 00000000     ................
	...
    8c7c:	4004c000 400ff0c0 00000011 00000002     ...@...@........
    8c8c:	00000001 00000001 00000000 00000000     ................
	...
    8ca4:	40049000 400ff000 0000000c 00000002     ...@...@........
    8cb4:	00000001 00000001 00000000 00000000     ................
	...

00008ccc <au8Port_PartitionList>:
    8ccc:	00000001                                ....

00008cd0 <au32Port_PinToPartitionMap>:
    8cd0:	00000001 00000001 00000001 00000001     ................
    8ce0:	00000001 00000001 00000001 00000001     ................
    8cf0:	00000001                                ....

00008cf4 <Port_au16NoUnUsedPadsArrayDefault>:
    8cf4:	00010000 00030002 00070006 00090008     ................
    8d04:	000d000b 000f000e 00110010 00210020     ............ .!.
    8d14:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
    8d24:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
    8d34:	00410040 00430042 00470046 004f004c     @.A.B.C.F.G.L.O.
    8d44:	00510050 00610060 00630062 00650064     P.Q.`.a.b.c.d.e.
    8d54:	00670066 00690068 006b006a 006d006c     f.g.h.i.j.k.l.m.
    8d64:	006f006e 00800070 00820081 00840083     n.o.p...........
    8d74:	00860085 00880087 008a0089 008d008b     ................
    8d84:	008f008e 00000090                       ........

00008d8c <Port_UnUsedPin>:
    8d8c:	00000000 00000001 00000000              ............

00008d98 <Port_aPinConfigDefault>:
    8d98:	00000048 00000100 00000000 00000002     H...............
    8da8:	00010001 00000049 00000100 00000000     ....I...........
    8db8:	00000002 00010101 0000004a 00000100     ........J.......
    8dc8:	00000000 00000002 00010101 0000008c     ................
    8dd8:	00000100 00000000 00000001 00010101     ................
    8de8:	0000004b 00000100 00000000 00000002     K...............
    8df8:	00010101 0000004d 00000100 00000000     ....M...........
    8e08:	00000002 00010101 0000004e 00000100     ........N.......
    8e18:	00000000 00000002 00010101 00000071     ............q...
    8e28:	00000100 00000000 00000001 00010101     ................
    8e38:	0000000c 00000100 00000000 00000001     ................
    8e48:	00010101                                ....

00008e4c <Port_Config>:
    8e4c:	004b0009 00008cf4 00008d8c 00008d98     ..K.............
	...
    8e64:	00008cd0 00008ccc 00008b64              ........d...

00008e70 <Power_Ip_RCM_ConfigPB>:
	...

00008e78 <Power_Ip_PMC_ConfigPB>:
    8e78:	00000000                                ....

00008e7c <Power_Ip_SMC_ConfigPB>:
    8e7c:	00000000                                ....

00008e80 <Power_Ip_aModeConfigPB>:
	...

00008e8c <Power_Ip_HwIPsConfigPB>:
    8e8c:	00008e70 00008e78 00008e7c              p...x...|...

00008e98 <__INIT_TABLE>:
    8e98:	00000002 	.word	0x00000002
    8e9c:	1fff8b10 	.word	0x1fff8b10
    8ea0:	00008ec0 	.word	0x00008ec0
    8ea4:	00008ef8 	.word	0x00008ef8
    8ea8:	1fff8800 	.word	0x1fff8800
    8eac:	00000000 	.word	0x00000000
    8eb0:	00000310 	.word	0x00000310

00008eb4 <__ZERO_TABLE>:
    8eb4:	00000001 	.word	0x00000001
    8eb8:	1fff8b50 	.word	0x1fff8b50
    8ebc:	1fff8e60 	.word	0x1fff8e60
