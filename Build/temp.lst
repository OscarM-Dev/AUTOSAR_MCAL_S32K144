
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000eff 	.word	0x00000eff
  10:	00000f01 	.word	0x00000f01
  14:	00000f03 	.word	0x00000f03
  18:	00000f05 	.word	0x00000f05
	...
  2c:	00000f07 	.word	0x00000f07
  30:	00000f09 	.word	0x00000f09
  34:	00000000 	.word	0x00000000
  38:	00000f0b 	.word	0x00000f0b
  3c:	00000f0d 	.word	0x00000f0d
  40:	00000f0f 	.word	0x00000f0f
  44:	00000f0f 	.word	0x00000f0f
  48:	00000f0f 	.word	0x00000f0f
  4c:	00000f0f 	.word	0x00000f0f
  50:	00000f0f 	.word	0x00000f0f
  54:	00000f0f 	.word	0x00000f0f
  58:	00000f0f 	.word	0x00000f0f
  5c:	00000f0f 	.word	0x00000f0f
  60:	00000f0f 	.word	0x00000f0f
  64:	00000f0f 	.word	0x00000f0f
  68:	00000f0f 	.word	0x00000f0f
  6c:	00000f0f 	.word	0x00000f0f
  70:	00000f0f 	.word	0x00000f0f
  74:	00000f0f 	.word	0x00000f0f
  78:	00000f0f 	.word	0x00000f0f
  7c:	00000f0f 	.word	0x00000f0f
  80:	00000f0f 	.word	0x00000f0f
  84:	00000f0f 	.word	0x00000f0f
  88:	00000f0f 	.word	0x00000f0f
  8c:	00000f0f 	.word	0x00000f0f
  90:	00000f0f 	.word	0x00000f0f
  94:	00000f0f 	.word	0x00000f0f
  98:	00000f0f 	.word	0x00000f0f
  9c:	00000f0f 	.word	0x00000f0f
  a0:	00000f0f 	.word	0x00000f0f
  a4:	00000f0f 	.word	0x00000f0f
  a8:	00000f0f 	.word	0x00000f0f
  ac:	00000f0f 	.word	0x00000f0f
  b0:	00000f0f 	.word	0x00000f0f
  b4:	00000f0f 	.word	0x00000f0f
  b8:	00000f0f 	.word	0x00000f0f
  bc:	00000f0f 	.word	0x00000f0f
  c0:	00000f0f 	.word	0x00000f0f
  c4:	00000f0f 	.word	0x00000f0f
  c8:	00000f0f 	.word	0x00000f0f
  cc:	00000f0f 	.word	0x00000f0f
  d0:	00000f0f 	.word	0x00000f0f
  d4:	00000f0f 	.word	0x00000f0f
  d8:	00000f0f 	.word	0x00000f0f
  dc:	00000f0f 	.word	0x00000f0f
  e0:	00000f0f 	.word	0x00000f0f
  e4:	00000f0f 	.word	0x00000f0f
  e8:	00000f0f 	.word	0x00000f0f
  ec:	00000f0f 	.word	0x00000f0f
  f0:	00000f0f 	.word	0x00000f0f
  f4:	00000f0f 	.word	0x00000f0f
  f8:	00000f0f 	.word	0x00000f0f
  fc:	00000f0f 	.word	0x00000f0f
 100:	00000f0f 	.word	0x00000f0f
 104:	00000f0f 	.word	0x00000f0f
 108:	00000f0f 	.word	0x00000f0f
 10c:	00000f0f 	.word	0x00000f0f
 110:	00000f0f 	.word	0x00000f0f
 114:	00000f0f 	.word	0x00000f0f
 118:	00000f0f 	.word	0x00000f0f
 11c:	00000f0f 	.word	0x00000f0f
 120:	00000f0f 	.word	0x00000f0f
 124:	00000f0f 	.word	0x00000f0f
 128:	00000f0f 	.word	0x00000f0f
 12c:	00000f0f 	.word	0x00000f0f
 130:	00000f0f 	.word	0x00000f0f
 134:	00000f0f 	.word	0x00000f0f
 138:	00000f0f 	.word	0x00000f0f
 13c:	00000f0f 	.word	0x00000f0f
 140:	00000f0f 	.word	0x00000f0f
 144:	00000f0f 	.word	0x00000f0f
 148:	00000f0f 	.word	0x00000f0f
 14c:	00000f0f 	.word	0x00000f0f
 150:	00000f0f 	.word	0x00000f0f
 154:	00000f0f 	.word	0x00000f0f
 158:	00000f0f 	.word	0x00000f0f
 15c:	00000f0f 	.word	0x00000f0f
 160:	00000f0f 	.word	0x00000f0f
 164:	00000f0f 	.word	0x00000f0f
 168:	00000f0f 	.word	0x00000f0f
 16c:	00000f0f 	.word	0x00000f0f
 170:	00000f0f 	.word	0x00000f0f
 174:	00000f0f 	.word	0x00000f0f
 178:	00000f0f 	.word	0x00000f0f
 17c:	00000f0f 	.word	0x00000f0f
 180:	00000f0f 	.word	0x00000f0f
 184:	00000f0f 	.word	0x00000f0f
 188:	00000f0f 	.word	0x00000f0f
 18c:	00000f0f 	.word	0x00000f0f
 190:	00000f0f 	.word	0x00000f0f
 194:	00000f0f 	.word	0x00000f0f
 198:	00000f0f 	.word	0x00000f0f
 19c:	00000f0f 	.word	0x00000f0f
 1a0:	00000f0f 	.word	0x00000f0f
 1a4:	00000f0f 	.word	0x00000f0f
 1a8:	00000f0f 	.word	0x00000f0f
 1ac:	00000f0f 	.word	0x00000f0f
 1b0:	00000f0f 	.word	0x00000f0f
 1b4:	00000f0f 	.word	0x00000f0f
 1b8:	00000f0f 	.word	0x00000f0f
 1bc:	00000f0f 	.word	0x00000f0f
 1c0:	00000f0f 	.word	0x00000f0f
 1c4:	00000f0f 	.word	0x00000f0f
 1c8:	00000f0f 	.word	0x00000f0f
 1cc:	00000f0f 	.word	0x00000f0f
 1d0:	00000f0f 	.word	0x00000f0f
 1d4:	00000f0f 	.word	0x00000f0f
 1d8:	00000f0f 	.word	0x00000f0f
 1dc:	00000f0f 	.word	0x00000f0f
 1e0:	00000f0f 	.word	0x00000f0f
 1e4:	00000f0f 	.word	0x00000f0f
 1e8:	00000f0f 	.word	0x00000f0f
 1ec:	00000f0f 	.word	0x00000f0f
 1f0:	00000f0f 	.word	0x00000f0f
 1f4:	00000f0f 	.word	0x00000f0f
 1f8:	00000f0f 	.word	0x00000f0f
 1fc:	00000f0f 	.word	0x00000f0f
 200:	00000f0f 	.word	0x00000f0f
 204:	00000f0f 	.word	0x00000f0f
 208:	00000f0f 	.word	0x00000f0f
 20c:	00000f0f 	.word	0x00000f0f
 210:	00000f0f 	.word	0x00000f0f
 214:	00000f0f 	.word	0x00000f0f
 218:	00000f0f 	.word	0x00000f0f
 21c:	00000f0f 	.word	0x00000f0f
 220:	00000f0f 	.word	0x00000f0f
 224:	00000f0f 	.word	0x00000f0f
 228:	00000f0f 	.word	0x00000f0f
 22c:	00000f0f 	.word	0x00000f0f
 230:	00000f0f 	.word	0x00000f0f
 234:	00000f0f 	.word	0x00000f0f
 238:	00000f0f 	.word	0x00000f0f
 23c:	00000f0f 	.word	0x00000f0f
 240:	00000f0f 	.word	0x00000f0f
 244:	00000f0f 	.word	0x00000f0f
 248:	00000f0f 	.word	0x00000f0f
 24c:	00000f0f 	.word	0x00000f0f
 250:	00000f0f 	.word	0x00000f0f
 254:	00000f0f 	.word	0x00000f0f
 258:	00000f0f 	.word	0x00000f0f
 25c:	00000f0f 	.word	0x00000f0f
 260:	00000f0f 	.word	0x00000f0f
 264:	00000f0f 	.word	0x00000f0f
 268:	00000f0f 	.word	0x00000f0f
 26c:	00000f0f 	.word	0x00000f0f
 270:	00000f0f 	.word	0x00000f0f
 274:	00000f0f 	.word	0x00000f0f
 278:	00000f0f 	.word	0x00000f0f
 27c:	00000f0f 	.word	0x00000f0f
 280:	00000f0f 	.word	0x00000f0f
 284:	00000f0f 	.word	0x00000f0f
 288:	00000f0f 	.word	0x00000f0f
 28c:	00000f0f 	.word	0x00000f0f
 290:	00000f0f 	.word	0x00000f0f
 294:	00000f0f 	.word	0x00000f0f
 298:	00000f0f 	.word	0x00000f0f
 29c:	00000f0f 	.word	0x00000f0f
 2a0:	00000f0f 	.word	0x00000f0f
 2a4:	00000f0f 	.word	0x00000f0f
 2a8:	00000f0f 	.word	0x00000f0f
 2ac:	00000f0f 	.word	0x00000f0f
 2b0:	00000f0f 	.word	0x00000f0f
 2b4:	00000f0f 	.word	0x00000f0f
 2b8:	00000f0f 	.word	0x00000f0f
 2bc:	00000f0f 	.word	0x00000f0f
 2c0:	00000f0f 	.word	0x00000f0f
 2c4:	00000f0f 	.word	0x00000f0f
 2c8:	00000f0f 	.word	0x00000f0f
 2cc:	00000f0f 	.word	0x00000f0f
 2d0:	00000f0f 	.word	0x00000f0f
 2d4:	00000f0f 	.word	0x00000f0f
 2d8:	00000f0f 	.word	0x00000f0f
 2dc:	00000f0f 	.word	0x00000f0f
 2e0:	00000f0f 	.word	0x00000f0f
 2e4:	00000f0f 	.word	0x00000f0f
 2e8:	00000f0f 	.word	0x00000f0f
 2ec:	00000f0f 	.word	0x00000f0f
 2f0:	00000f0f 	.word	0x00000f0f
 2f4:	00000f0f 	.word	0x00000f0f
 2f8:	00000f0f 	.word	0x00000f0f
 2fc:	00000f0f 	.word	0x00000f0f
 300:	00000f0f 	.word	0x00000f0f
 304:	00000f0f 	.word	0x00000f0f
 308:	00000f0f 	.word	0x00000f0f
 30c:	00000f0f 	.word	0x00000f0f

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fc73 	bl	d6c <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fd32 	bl	ef4 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e28 	.word	0x1fff8e28

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fc7d 	bl	e98 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}

    EcuM_Init();    //MCU configuration.
     8b2:	f000 fb3b 	bl	f2c <EcuM_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure 2 for scheduler.
     8b6:	4803      	ldr	r0, [pc, #12]	; (8c4 <main+0x14>)
     8b8:	f000 f892 	bl	9e0 <Scheduler_Init>
    
    while( 1u ) {
        Scheduler_MainFunction();
     8bc:	f000 f994 	bl	be8 <Scheduler_MainFunction>
     8c0:	e7fc      	b.n	8bc <main+0xc>
     8c2:	bf00      	nop
     8c4:	1fff8e00 	.word	0x1fff8e00

000008c8 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     8c8:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ca:	f3ef 8310 	mrs	r3, PRIMASK
     8ce:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8d0:	4623      	mov	r3, r4
}
     8d2:	4618      	mov	r0, r3
     8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
     8d8:	4770      	bx	lr

000008da <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     8da:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8dc:	f3ef 8310 	mrs	r3, PRIMASK
     8e0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8e2:	4623      	mov	r3, r4
}
     8e4:	4618      	mov	r0, r3
     8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
     8ea:	4770      	bx	lr

000008ec <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     8ec:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ee:	f3ef 8310 	mrs	r3, PRIMASK
     8f2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8f4:	4623      	mov	r3, r4
}
     8f6:	4618      	mov	r0, r3
     8f8:	f85d 4b04 	ldr.w	r4, [sp], #4
     8fc:	4770      	bx	lr

000008fe <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function toggles a led every 100ms.
 */
void Task1_callback( void ) {
     8fe:	b508      	push	{r3, lr}
    Dio_FlipChannel( DioConf_DioChannel_PTC8 );
     900:	2048      	movs	r0, #72	; 0x48
     902:	f005 fa0c 	bl	5d1e <Dio_FlipChannel>
}
     906:	bf00      	nop
     908:	bd08      	pop	{r3, pc}

0000090a <Task2_callback>:
/**
 * @brief This is the callback function for the task 2.
 *
 * This function toggles a led every 200ms.
 */
void Task2_callback( void ) {
     90a:	b508      	push	{r3, lr}
    Dio_FlipChannel( DioConf_DioChannel_PTC9 );
     90c:	2049      	movs	r0, #73	; 0x49
     90e:	f005 fa06 	bl	5d1e <Dio_FlipChannel>
}
     912:	bf00      	nop
     914:	bd08      	pop	{r3, pc}

00000916 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 * This function toggles a led every 300ms.
 */
void Timer1_callback( void ) {    
     916:	b508      	push	{r3, lr}
    Dio_FlipChannel( DioConf_DioChannel_PTC10 );
     918:	204a      	movs	r0, #74	; 0x4a
     91a:	f005 fa00 	bl	5d1e <Dio_FlipChannel>
    Scheduler_StartTimer( SCHEDULER_TIMER1_ID );    //Restarting timer.
     91e:	2001      	movs	r0, #1
     920:	f000 f8f2 	bl	b08 <Scheduler_StartTimer>
}
     924:	bf00      	nop
     926:	bd08      	pop	{r3, pc}

00000928 <Timer2_callback>:
/**
 * @brief This is the callback function for the timer 2. 
 *
 * This function toggles a led every 400ms.
 */
void Timer2_callback( void ) {
     928:	b508      	push	{r3, lr}
    Dio_FlipChannel( DioConf_DioChannel_PTC11 );
     92a:	204b      	movs	r0, #75	; 0x4b
     92c:	f005 f9f7 	bl	5d1e <Dio_FlipChannel>
    Scheduler_StartTimer( SCHEDULER_TIMER2_ID );   //Restarting timer.
     930:	2002      	movs	r0, #2
     932:	f000 f8e9 	bl	b08 <Scheduler_StartTimer>
     936:	bf00      	nop
     938:	bd08      	pop	{r3, pc}

0000093a <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     93a:	b082      	sub	sp, #8
     93c:	9001      	str	r0, [sp, #4]
     93e:	460b      	mov	r3, r1
     940:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     944:	9b01      	ldr	r3, [sp, #4]
     946:	681b      	ldr	r3, [r3, #0]
     948:	f89d 2003 	ldrb.w	r2, [sp, #3]
     94c:	2101      	movs	r1, #1
     94e:	fa01 f202 	lsl.w	r2, r1, r2
     952:	431a      	orrs	r2, r3
     954:	9b01      	ldr	r3, [sp, #4]
     956:	601a      	str	r2, [r3, #0]
}
     958:	bf00      	nop
     95a:	b002      	add	sp, #8
     95c:	4770      	bx	lr

0000095e <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     95e:	b084      	sub	sp, #16
     960:	9001      	str	r0, [sp, #4]
     962:	460b      	mov	r3, r1
     964:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     968:	2300      	movs	r3, #0
     96a:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     96e:	f89d 3003 	ldrb.w	r3, [sp, #3]
     972:	2201      	movs	r2, #1
     974:	fa02 f303 	lsl.w	r3, r2, r3
     978:	461a      	mov	r2, r3
     97a:	9b01      	ldr	r3, [sp, #4]
     97c:	4013      	ands	r3, r2
     97e:	2b00      	cmp	r3, #0
     980:	bf14      	ite	ne
     982:	2301      	movne	r3, #1
     984:	2300      	moveq	r3, #0
     986:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     98a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     98e:	4618      	mov	r0, r3
     990:	b004      	add	sp, #16
     992:	4770      	bx	lr

00000994 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     994:	b082      	sub	sp, #8
     996:	9001      	str	r0, [sp, #4]
     998:	460b      	mov	r3, r1
     99a:	f88d 3003 	strb.w	r3, [sp, #3]
     99e:	4613      	mov	r3, r2
     9a0:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     9a4:	f89d 3002 	ldrb.w	r3, [sp, #2]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d00a      	beq.n	9c2 <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     9ac:	9b01      	ldr	r3, [sp, #4]
     9ae:	681b      	ldr	r3, [r3, #0]
     9b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9b4:	2101      	movs	r1, #1
     9b6:	fa01 f202 	lsl.w	r2, r1, r2
     9ba:	431a      	orrs	r2, r3
     9bc:	9b01      	ldr	r3, [sp, #4]
     9be:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     9c0:	e00a      	b.n	9d8 <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     9c2:	9b01      	ldr	r3, [sp, #4]
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9ca:	2101      	movs	r1, #1
     9cc:	fa01 f202 	lsl.w	r2, r1, r2
     9d0:	43d2      	mvns	r2, r2
     9d2:	401a      	ands	r2, r3
     9d4:	9b01      	ldr	r3, [sp, #4]
     9d6:	601a      	str	r2, [r3, #0]
}
     9d8:	bf00      	nop
     9da:	b002      	add	sp, #8
     9dc:	4770      	bx	lr
	...

000009e0 <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     9e0:	b500      	push	{lr}
     9e2:	b085      	sub	sp, #20
     9e4:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = TRUE;
     9e6:	2301      	movs	r3, #1
     9e8:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 i = 0;
     9ec:	2300      	movs	r3, #0
     9ee:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing tasks related parameters.
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     9f2:	2300      	movs	r3, #0
     9f4:	f88d 300f 	strb.w	r3, [sp, #15]
     9f8:	e033      	b.n	a62 <Scheduler_Init+0x82>
        SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     9fa:	4b42      	ldr	r3, [pc, #264]	; (b04 <Scheduler_Init+0x124>)
     9fc:	681b      	ldr	r3, [r3, #0]
     9fe:	6899      	ldr	r1, [r3, #8]
     a00:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a04:	4613      	mov	r3, r2
     a06:	005b      	lsls	r3, r3, #1
     a08:	4413      	add	r3, r2
     a0a:	009b      	lsls	r3, r3, #2
     a0c:	440b      	add	r3, r1
     a0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a12:	6819      	ldr	r1, [r3, #0]
     a14:	9b01      	ldr	r3, [sp, #4]
     a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     a1a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a1e:	9b01      	ldr	r3, [sp, #4]
     a20:	3202      	adds	r2, #2
     a22:	2100      	movs	r1, #0
     a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     a28:	9b01      	ldr	r3, [sp, #4]
     a2a:	f103 0020 	add.w	r0, r3, #32
     a2e:	4b35      	ldr	r3, [pc, #212]	; (b04 <Scheduler_Init+0x124>)
     a30:	681b      	ldr	r3, [r3, #0]
     a32:	6899      	ldr	r1, [r3, #8]
     a34:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a38:	4613      	mov	r3, r2
     a3a:	005b      	lsls	r3, r3, #1
     a3c:	4413      	add	r3, r2
     a3e:	009b      	lsls	r3, r3, #2
     a40:	440b      	add	r3, r1
     a42:	791b      	ldrb	r3, [r3, #4]
     a44:	2b00      	cmp	r3, #0
     a46:	bf14      	ite	ne
     a48:	2301      	movne	r3, #1
     a4a:	2300      	moveq	r3, #0
     a4c:	b2da      	uxtb	r2, r3
     a4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a52:	4619      	mov	r1, r3
     a54:	f7ff ff9e 	bl	994 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     a58:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a5c:	3301      	adds	r3, #1
     a5e:	f88d 300f 	strb.w	r3, [sp, #15]
     a62:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a66:	2b01      	cmp	r3, #1
     a68:	d9c7      	bls.n	9fa <Scheduler_Init+0x1a>
    }

    //Initializing timers related parameters.
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     a6a:	2300      	movs	r3, #0
     a6c:	f88d 300f 	strb.w	r3, [sp, #15]
     a70:	e03e      	b.n	af0 <Scheduler_Init+0x110>
        SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     a72:	4b24      	ldr	r3, [pc, #144]	; (b04 <Scheduler_Init+0x124>)
     a74:	681b      	ldr	r3, [r3, #0]
     a76:	6919      	ldr	r1, [r3, #16]
     a78:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a7c:	4613      	mov	r3, r2
     a7e:	005b      	lsls	r3, r3, #1
     a80:	4413      	add	r3, r2
     a82:	009b      	lsls	r3, r3, #2
     a84:	440b      	add	r3, r1
     a86:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a8a:	6819      	ldr	r1, [r3, #0]
     a8c:	9b01      	ldr	r3, [sp, #4]
     a8e:	3204      	adds	r2, #4
     a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     a94:	4b1b      	ldr	r3, [pc, #108]	; (b04 <Scheduler_Init+0x124>)
     a96:	681b      	ldr	r3, [r3, #0]
     a98:	6919      	ldr	r1, [r3, #16]
     a9a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a9e:	4613      	mov	r3, r2
     aa0:	005b      	lsls	r3, r3, #1
     aa2:	4413      	add	r3, r2
     aa4:	009b      	lsls	r3, r3, #2
     aa6:	440b      	add	r3, r1
     aa8:	f89d 200f 	ldrb.w	r2, [sp, #15]
     aac:	6819      	ldr	r1, [r3, #0]
     aae:	9b01      	ldr	r3, [sp, #4]
     ab0:	3206      	adds	r2, #6
     ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     ab6:	9b01      	ldr	r3, [sp, #4]
     ab8:	f103 0024 	add.w	r0, r3, #36	; 0x24
     abc:	4b11      	ldr	r3, [pc, #68]	; (b04 <Scheduler_Init+0x124>)
     abe:	681b      	ldr	r3, [r3, #0]
     ac0:	6919      	ldr	r1, [r3, #16]
     ac2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ac6:	4613      	mov	r3, r2
     ac8:	005b      	lsls	r3, r3, #1
     aca:	4413      	add	r3, r2
     acc:	009b      	lsls	r3, r3, #2
     ace:	440b      	add	r3, r1
     ad0:	791b      	ldrb	r3, [r3, #4]
     ad2:	2b00      	cmp	r3, #0
     ad4:	bf14      	ite	ne
     ad6:	2301      	movne	r3, #1
     ad8:	2300      	moveq	r3, #0
     ada:	b2da      	uxtb	r2, r3
     adc:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ae0:	4619      	mov	r1, r3
     ae2:	f7ff ff57 	bl	994 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     ae6:	f89d 300f 	ldrb.w	r3, [sp, #15]
     aea:	3301      	adds	r3, #1
     aec:	f88d 300f 	strb.w	r3, [sp, #15]
     af0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     af4:	2b01      	cmp	r3, #1
     af6:	d9bc      	bls.n	a72 <Scheduler_Init+0x92>
    }    

    return status;
     af8:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     afc:	4618      	mov	r0, r3
     afe:	b005      	add	sp, #20
     b00:	f85d fb04 	ldr.w	pc, [sp], #4
     b04:	1fff8b38 	.word	0x1fff8b38

00000b08 <Scheduler_StartTimer>:
 *
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The timer ID must be valid.
 */
Std_ReturnType Scheduler_StartTimer( TimerType Timer ) {
     b08:	b500      	push	{lr}
     b0a:	b085      	sub	sp, #20
     b0c:	4603      	mov	r3, r0
     b0e:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    Std_ReturnType status = FALSE;
     b12:	2300      	movs	r3, #0
     b14:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     b18:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b1c:	2b00      	cmp	r3, #0
     b1e:	d030      	beq.n	b82 <Scheduler_StartTimer+0x7a>
     b20:	4b1c      	ldr	r3, [pc, #112]	; (b94 <Scheduler_StartTimer+0x8c>)
     b22:	681b      	ldr	r3, [r3, #0]
     b24:	7b1b      	ldrb	r3, [r3, #12]
     b26:	f89d 2007 	ldrb.w	r2, [sp, #7]
     b2a:	429a      	cmp	r2, r3
     b2c:	d829      	bhi.n	b82 <Scheduler_StartTimer+0x7a>
        Bfx_SetBit_u32u8( &SchedulerCtrl_Ptr->TimerFlags , Timer - 1 ); 
     b2e:	4b1a      	ldr	r3, [pc, #104]	; (b98 <Scheduler_StartTimer+0x90>)
     b30:	681b      	ldr	r3, [r3, #0]
     b32:	f103 0224 	add.w	r2, r3, #36	; 0x24
     b36:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b3a:	3b01      	subs	r3, #1
     b3c:	b2db      	uxtb	r3, r3
     b3e:	4619      	mov	r1, r3
     b40:	4610      	mov	r0, r2
     b42:	f7ff fefa 	bl	93a <Bfx_SetBit_u32u8>

        //Verifying if timer has reach 0.
        if ( SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ] == 0 ) {
     b46:	4b14      	ldr	r3, [pc, #80]	; (b98 <Scheduler_StartTimer+0x90>)
     b48:	681b      	ldr	r3, [r3, #0]
     b4a:	f89d 2007 	ldrb.w	r2, [sp, #7]
     b4e:	3a01      	subs	r2, #1
     b50:	3206      	adds	r2, #6
     b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     b56:	2b00      	cmp	r3, #0
     b58:	d10f      	bne.n	b7a <Scheduler_StartTimer+0x72>
             SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ] = SchedulerCtrl_Ptr->TimerTimeout[ Timer - 1 ]; //restarting timer.
     b5a:	4b0f      	ldr	r3, [pc, #60]	; (b98 <Scheduler_StartTimer+0x90>)
     b5c:	6819      	ldr	r1, [r3, #0]
     b5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b62:	1e58      	subs	r0, r3, #1
     b64:	4b0c      	ldr	r3, [pc, #48]	; (b98 <Scheduler_StartTimer+0x90>)
     b66:	681b      	ldr	r3, [r3, #0]
     b68:	f89d 2007 	ldrb.w	r2, [sp, #7]
     b6c:	3a01      	subs	r2, #1
     b6e:	3004      	adds	r0, #4
     b70:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
     b74:	3206      	adds	r2, #6
     b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        status = TRUE;
     b7a:	2301      	movs	r3, #1
     b7c:	f88d 300f 	strb.w	r3, [sp, #15]
     b80:	e002      	b.n	b88 <Scheduler_StartTimer+0x80>
    }

    else {
        status = FALSE; //invalid ID.
     b82:	2300      	movs	r3, #0
     b84:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
     b88:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     b8c:	4618      	mov	r0, r3
     b8e:	b005      	add	sp, #20
     b90:	f85d fb04 	ldr.w	pc, [sp], #4
     b94:	1fff8b38 	.word	0x1fff8b38
     b98:	1fff8b3c 	.word	0x1fff8b3c

00000b9c <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     b9c:	b084      	sub	sp, #16
     b9e:	4603      	mov	r3, r0
     ba0:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     ba4:	2300      	movs	r3, #0
     ba6:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     ba8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bac:	2b00      	cmp	r3, #0
     bae:	d010      	beq.n	bd2 <Scheduler_GetTimer+0x36>
     bb0:	4b0b      	ldr	r3, [pc, #44]	; (be0 <Scheduler_GetTimer+0x44>)
     bb2:	681b      	ldr	r3, [r3, #0]
     bb4:	7b1b      	ldrb	r3, [r3, #12]
     bb6:	f89d 2007 	ldrb.w	r2, [sp, #7]
     bba:	429a      	cmp	r2, r3
     bbc:	d809      	bhi.n	bd2 <Scheduler_GetTimer+0x36>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ];
     bbe:	4b09      	ldr	r3, [pc, #36]	; (be4 <Scheduler_GetTimer+0x48>)
     bc0:	681b      	ldr	r3, [r3, #0]
     bc2:	f89d 2007 	ldrb.w	r2, [sp, #7]
     bc6:	3a01      	subs	r2, #1
     bc8:	3206      	adds	r2, #6
     bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     bce:	9303      	str	r3, [sp, #12]
     bd0:	e001      	b.n	bd6 <Scheduler_GetTimer+0x3a>
    }

    else {
        counter_value = FALSE;  //invalid ID.
     bd2:	2300      	movs	r3, #0
     bd4:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     bd6:	9b03      	ldr	r3, [sp, #12]
}
     bd8:	4618      	mov	r0, r3
     bda:	b004      	add	sp, #16
     bdc:	4770      	bx	lr
     bde:	bf00      	nop
     be0:	1fff8b38 	.word	0x1fff8b38
     be4:	1fff8b3c 	.word	0x1fff8b3c

00000be8 <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     be8:	b500      	push	{lr}
     bea:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     bec:	4b5d      	ldr	r3, [pc, #372]	; (d64 <Scheduler_MainFunction+0x17c>)
     bee:	681b      	ldr	r3, [r3, #0]
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     bf6:	fb02 f303 	mul.w	r3, r2, r3
     bfa:	2101      	movs	r1, #1
     bfc:	4618      	mov	r0, r3
     bfe:	f000 fa0c 	bl	101a <OsIf_MicrosToTicks>
     c02:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     c04:	2001      	movs	r0, #1
     c06:	f000 f9bc 	bl	f82 <OsIf_GetCounter>
     c0a:	4603      	mov	r3, r0
     c0c:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     c0e:	2300      	movs	r3, #0
     c10:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     c12:	2300      	movs	r3, #0
     c14:	f88d 300b 	strb.w	r3, [sp, #11]

    while( 1 ) {    //tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     c18:	466b      	mov	r3, sp
     c1a:	2101      	movs	r1, #1
     c1c:	4618      	mov	r0, r3
     c1e:	f000 f9c9 	bl	fb4 <OsIf_GetElapsed>
     c22:	4602      	mov	r2, r0
     c24:	9b03      	ldr	r3, [sp, #12]
     c26:	4413      	add	r3, r2
     c28:	9303      	str	r3, [sp, #12]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
     c2a:	9a03      	ldr	r2, [sp, #12]
     c2c:	9b01      	ldr	r3, [sp, #4]
     c2e:	429a      	cmp	r2, r3
     c30:	d3f2      	bcc.n	c18 <Scheduler_MainFunction+0x30>
            
            //Executing timers
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     c32:	2300      	movs	r3, #0
     c34:	f88d 300b 	strb.w	r3, [sp, #11]
     c38:	e038      	b.n	cac <Scheduler_MainFunction+0xc4>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     c3a:	4b4b      	ldr	r3, [pc, #300]	; (d68 <Scheduler_MainFunction+0x180>)
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     c40:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c44:	4611      	mov	r1, r2
     c46:	4618      	mov	r0, r3
     c48:	f7ff fe89 	bl	95e <Bfx_GetBit_u32u8_u8>
     c4c:	4603      	mov	r3, r0
     c4e:	2b00      	cmp	r3, #0
     c50:	d027      	beq.n	ca2 <Scheduler_MainFunction+0xba>
                    SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     c52:	4b45      	ldr	r3, [pc, #276]	; (d68 <Scheduler_MainFunction+0x180>)
     c54:	681b      	ldr	r3, [r3, #0]
     c56:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c5a:	3206      	adds	r2, #6
     c5c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     c60:	4b40      	ldr	r3, [pc, #256]	; (d64 <Scheduler_MainFunction+0x17c>)
     c62:	681b      	ldr	r3, [r3, #0]
     c64:	6819      	ldr	r1, [r3, #0]
     c66:	4b40      	ldr	r3, [pc, #256]	; (d68 <Scheduler_MainFunction+0x180>)
     c68:	681b      	ldr	r3, [r3, #0]
     c6a:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c6e:	1a41      	subs	r1, r0, r1
     c70:	3206      	adds	r2, #6
     c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    
                    //Verifying execution of callback i
                    if ( Scheduler_GetTimer( i + 1 ) == 0 ) {   //timeout achieved.
     c76:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c7a:	3301      	adds	r3, #1
     c7c:	b2db      	uxtb	r3, r3
     c7e:	4618      	mov	r0, r3
     c80:	f7ff ff8c 	bl	b9c <Scheduler_GetTimer>
     c84:	4603      	mov	r3, r0
     c86:	2b00      	cmp	r3, #0
     c88:	d10b      	bne.n	ca2 <Scheduler_MainFunction+0xba>
                        SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     c8a:	4b36      	ldr	r3, [pc, #216]	; (d64 <Scheduler_MainFunction+0x17c>)
     c8c:	681b      	ldr	r3, [r3, #0]
     c8e:	6919      	ldr	r1, [r3, #16]
     c90:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c94:	4613      	mov	r3, r2
     c96:	005b      	lsls	r3, r3, #1
     c98:	4413      	add	r3, r2
     c9a:	009b      	lsls	r3, r3, #2
     c9c:	440b      	add	r3, r1
     c9e:	689b      	ldr	r3, [r3, #8]
     ca0:	4798      	blx	r3
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     ca2:	f89d 300b 	ldrb.w	r3, [sp, #11]
     ca6:	3301      	adds	r3, #1
     ca8:	f88d 300b 	strb.w	r3, [sp, #11]
     cac:	4b2d      	ldr	r3, [pc, #180]	; (d64 <Scheduler_MainFunction+0x17c>)
     cae:	681b      	ldr	r3, [r3, #0]
     cb0:	7b1b      	ldrb	r3, [r3, #12]
     cb2:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cb6:	429a      	cmp	r2, r3
     cb8:	d3bf      	bcc.n	c3a <Scheduler_MainFunction+0x52>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     cba:	2300      	movs	r3, #0
     cbc:	f88d 300b 	strb.w	r3, [sp, #11]
     cc0:	e045      	b.n	d4e <Scheduler_MainFunction+0x166>
                //Verifying execution of task i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     cc2:	4b29      	ldr	r3, [pc, #164]	; (d68 <Scheduler_MainFunction+0x180>)
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	6a1b      	ldr	r3, [r3, #32]
     cc8:	f89d 200b 	ldrb.w	r2, [sp, #11]
     ccc:	4611      	mov	r1, r2
     cce:	4618      	mov	r0, r3
     cd0:	f7ff fe45 	bl	95e <Bfx_GetBit_u32u8_u8>
     cd4:	4603      	mov	r3, r0
     cd6:	2b00      	cmp	r3, #0
     cd8:	d034      	beq.n	d44 <Scheduler_MainFunction+0x15c>
                    SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     cda:	4b23      	ldr	r3, [pc, #140]	; (d68 <Scheduler_MainFunction+0x180>)
     cdc:	681b      	ldr	r3, [r3, #0]
     cde:	f89d 200b 	ldrb.w	r2, [sp, #11]
     ce2:	3202      	adds	r2, #2
     ce4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     ce8:	4b1e      	ldr	r3, [pc, #120]	; (d64 <Scheduler_MainFunction+0x17c>)
     cea:	681b      	ldr	r3, [r3, #0]
     cec:	6819      	ldr	r1, [r3, #0]
     cee:	4b1e      	ldr	r3, [pc, #120]	; (d68 <Scheduler_MainFunction+0x180>)
     cf0:	681b      	ldr	r3, [r3, #0]
     cf2:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cf6:	4401      	add	r1, r0
     cf8:	3202      	adds	r2, #2
     cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                    //Verifying the execution of callback i.
                    if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     cfe:	4b1a      	ldr	r3, [pc, #104]	; (d68 <Scheduler_MainFunction+0x180>)
     d00:	681b      	ldr	r3, [r3, #0]
     d02:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d06:	3202      	adds	r2, #2
     d08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     d0c:	4b16      	ldr	r3, [pc, #88]	; (d68 <Scheduler_MainFunction+0x180>)
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	f89d 100b 	ldrb.w	r1, [sp, #11]
     d14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     d18:	429a      	cmp	r2, r3
     d1a:	d313      	bcc.n	d44 <Scheduler_MainFunction+0x15c>
                        SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     d1c:	4b11      	ldr	r3, [pc, #68]	; (d64 <Scheduler_MainFunction+0x17c>)
     d1e:	681b      	ldr	r3, [r3, #0]
     d20:	6899      	ldr	r1, [r3, #8]
     d22:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d26:	4613      	mov	r3, r2
     d28:	005b      	lsls	r3, r3, #1
     d2a:	4413      	add	r3, r2
     d2c:	009b      	lsls	r3, r3, #2
     d2e:	440b      	add	r3, r1
     d30:	689b      	ldr	r3, [r3, #8]
     d32:	4798      	blx	r3
                        SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     d34:	4b0c      	ldr	r3, [pc, #48]	; (d68 <Scheduler_MainFunction+0x180>)
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d3c:	3202      	adds	r2, #2
     d3e:	2100      	movs	r1, #0
     d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     d44:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d48:	3301      	adds	r3, #1
     d4a:	f88d 300b 	strb.w	r3, [sp, #11]
     d4e:	4b05      	ldr	r3, [pc, #20]	; (d64 <Scheduler_MainFunction+0x17c>)
     d50:	681b      	ldr	r3, [r3, #0]
     d52:	791b      	ldrb	r3, [r3, #4]
     d54:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d58:	429a      	cmp	r2, r3
     d5a:	d3b2      	bcc.n	cc2 <Scheduler_MainFunction+0xda>
                    }
                }
            }

            elapsed_time = 0;   //Reset time follow up for tick.
     d5c:	2300      	movs	r3, #0
     d5e:	9303      	str	r3, [sp, #12]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     d60:	e75a      	b.n	c18 <Scheduler_MainFunction+0x30>
     d62:	bf00      	nop
     d64:	1fff8b38 	.word	0x1fff8b38
     d68:	1fff8b3c 	.word	0x1fff8b3c

00000d6c <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     d6c:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     d6e:	2300      	movs	r3, #0
     d70:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     d72:	2300      	movs	r3, #0
     d74:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     d76:	2300      	movs	r3, #0
     d78:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     d7a:	2300      	movs	r3, #0
     d7c:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     d7e:	4b44      	ldr	r3, [pc, #272]	; (e90 <init_data_bss+0x124>)
     d80:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     d82:	4b44      	ldr	r3, [pc, #272]	; (e94 <init_data_bss+0x128>)
     d84:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     d86:	9b05      	ldr	r3, [sp, #20]
     d88:	681b      	ldr	r3, [r3, #0]
     d8a:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     d8c:	9b05      	ldr	r3, [sp, #20]
     d8e:	3304      	adds	r3, #4
     d90:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     d92:	9b05      	ldr	r3, [sp, #20]
     d94:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     d96:	2300      	movs	r3, #0
     d98:	9309      	str	r3, [sp, #36]	; 0x24
     d9a:	e03d      	b.n	e18 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d9e:	4613      	mov	r3, r2
     da0:	005b      	lsls	r3, r3, #1
     da2:	4413      	add	r3, r2
     da4:	009b      	lsls	r3, r3, #2
     da6:	461a      	mov	r2, r3
     da8:	9b03      	ldr	r3, [sp, #12]
     daa:	4413      	add	r3, r2
     dac:	685b      	ldr	r3, [r3, #4]
     dae:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     db2:	4613      	mov	r3, r2
     db4:	005b      	lsls	r3, r3, #1
     db6:	4413      	add	r3, r2
     db8:	009b      	lsls	r3, r3, #2
     dba:	461a      	mov	r2, r3
     dbc:	9b03      	ldr	r3, [sp, #12]
     dbe:	4413      	add	r3, r2
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     dc6:	4613      	mov	r3, r2
     dc8:	005b      	lsls	r3, r3, #1
     dca:	4413      	add	r3, r2
     dcc:	009b      	lsls	r3, r3, #2
     dce:	461a      	mov	r2, r3
     dd0:	9b03      	ldr	r3, [sp, #12]
     dd2:	4413      	add	r3, r2
     dd4:	689b      	ldr	r3, [r3, #8]
     dd6:	4619      	mov	r1, r3
     dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     dda:	4613      	mov	r3, r2
     ddc:	005b      	lsls	r3, r3, #1
     dde:	4413      	add	r3, r2
     de0:	009b      	lsls	r3, r3, #2
     de2:	461a      	mov	r2, r3
     de4:	9b03      	ldr	r3, [sp, #12]
     de6:	4413      	add	r3, r2
     de8:	685b      	ldr	r3, [r3, #4]
     dea:	1acb      	subs	r3, r1, r3
     dec:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     dee:	2300      	movs	r3, #0
     df0:	9308      	str	r3, [sp, #32]
     df2:	e00a      	b.n	e0a <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     df4:	9a00      	ldr	r2, [sp, #0]
     df6:	9b08      	ldr	r3, [sp, #32]
     df8:	441a      	add	r2, r3
     dfa:	9901      	ldr	r1, [sp, #4]
     dfc:	9b08      	ldr	r3, [sp, #32]
     dfe:	440b      	add	r3, r1
     e00:	7812      	ldrb	r2, [r2, #0]
     e02:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     e04:	9b08      	ldr	r3, [sp, #32]
     e06:	3301      	adds	r3, #1
     e08:	9308      	str	r3, [sp, #32]
     e0a:	9a08      	ldr	r2, [sp, #32]
     e0c:	9b06      	ldr	r3, [sp, #24]
     e0e:	429a      	cmp	r2, r3
     e10:	d3f0      	bcc.n	df4 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e14:	3301      	adds	r3, #1
     e16:	9309      	str	r3, [sp, #36]	; 0x24
     e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
     e1a:	9b07      	ldr	r3, [sp, #28]
     e1c:	429a      	cmp	r2, r3
     e1e:	d3bd      	bcc.n	d9c <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     e20:	9b04      	ldr	r3, [sp, #16]
     e22:	681b      	ldr	r3, [r3, #0]
     e24:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     e26:	9b04      	ldr	r3, [sp, #16]
     e28:	3304      	adds	r3, #4
     e2a:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     e2c:	9b04      	ldr	r3, [sp, #16]
     e2e:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     e30:	2300      	movs	r3, #0
     e32:	9309      	str	r3, [sp, #36]	; 0x24
     e34:	e024      	b.n	e80 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e38:	00db      	lsls	r3, r3, #3
     e3a:	9a02      	ldr	r2, [sp, #8]
     e3c:	4413      	add	r3, r2
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e44:	00db      	lsls	r3, r3, #3
     e46:	9a02      	ldr	r2, [sp, #8]
     e48:	4413      	add	r3, r2
     e4a:	685b      	ldr	r3, [r3, #4]
     e4c:	4619      	mov	r1, r3
     e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e50:	00db      	lsls	r3, r3, #3
     e52:	9a02      	ldr	r2, [sp, #8]
     e54:	4413      	add	r3, r2
     e56:	681b      	ldr	r3, [r3, #0]
     e58:	1acb      	subs	r3, r1, r3
     e5a:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     e5c:	2300      	movs	r3, #0
     e5e:	9308      	str	r3, [sp, #32]
     e60:	e007      	b.n	e72 <init_data_bss+0x106>
        {
            ram[j] = 0U;
     e62:	9a01      	ldr	r2, [sp, #4]
     e64:	9b08      	ldr	r3, [sp, #32]
     e66:	4413      	add	r3, r2
     e68:	2200      	movs	r2, #0
     e6a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     e6c:	9b08      	ldr	r3, [sp, #32]
     e6e:	3301      	adds	r3, #1
     e70:	9308      	str	r3, [sp, #32]
     e72:	9a08      	ldr	r2, [sp, #32]
     e74:	9b06      	ldr	r3, [sp, #24]
     e76:	429a      	cmp	r2, r3
     e78:	d3f3      	bcc.n	e62 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e7c:	3301      	adds	r3, #1
     e7e:	9309      	str	r3, [sp, #36]	; 0x24
     e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
     e82:	9b07      	ldr	r3, [sp, #28]
     e84:	429a      	cmp	r2, r3
     e86:	d3d6      	bcc.n	e36 <init_data_bss+0xca>
        }
    }
}
     e88:	bf00      	nop
     e8a:	bf00      	nop
     e8c:	b00a      	add	sp, #40	; 0x28
     e8e:	4770      	bx	lr
     e90:	0000841c 	.word	0x0000841c
     e94:	00008438 	.word	0x00008438

00000e98 <sys_m4_cache_init>:
{
     e98:	b084      	sub	sp, #16
     e9a:	4603      	mov	r3, r0
     e9c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     ea0:	2300      	movs	r3, #0
     ea2:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     ea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eaa:	2b00      	cmp	r3, #0
     eac:	d118      	bne.n	ee0 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     eae:	4b10      	ldr	r3, [pc, #64]	; (ef0 <sys_m4_cache_init+0x58>)
     eb0:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     eb4:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     eb6:	4b0e      	ldr	r3, [pc, #56]	; (ef0 <sys_m4_cache_init+0x58>)
     eb8:	681b      	ldr	r3, [r3, #0]
     eba:	4a0d      	ldr	r2, [pc, #52]	; (ef0 <sys_m4_cache_init+0x58>)
     ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     ec0:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     ec2:	bf00      	nop
     ec4:	4b0a      	ldr	r3, [pc, #40]	; (ef0 <sys_m4_cache_init+0x58>)
     ec6:	681b      	ldr	r3, [r3, #0]
     ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     ed0:	d0f8      	beq.n	ec4 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     ed2:	4b07      	ldr	r3, [pc, #28]	; (ef0 <sys_m4_cache_init+0x58>)
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	4a06      	ldr	r2, [pc, #24]	; (ef0 <sys_m4_cache_init+0x58>)
     ed8:	f043 0301 	orr.w	r3, r3, #1
     edc:	6013      	str	r3, [r2, #0]
     ede:	e002      	b.n	ee6 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     ee0:	2301      	movs	r3, #1
     ee2:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     ee6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     eea:	4618      	mov	r0, r3
     eec:	b004      	add	sp, #16
     eee:	4770      	bx	lr
     ef0:	e0082000 	.word	0xe0082000

00000ef4 <startup_go_to_user_mode>:
}
     ef4:	bf00      	nop
     ef6:	4770      	bx	lr

00000ef8 <Sys_GetCoreID>:
    return 0U;
     ef8:	2300      	movs	r3, #0
}
     efa:	4618      	mov	r0, r3
     efc:	4770      	bx	lr

00000efe <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     efe:	e7fe      	b.n	efe <HardFault_Handler>

00000f00 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     f00:	e7fe      	b.n	f00 <MemManage_Handler>

00000f02 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     f02:	e7fe      	b.n	f02 <BusFault_Handler>

00000f04 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     f04:	e7fe      	b.n	f04 <UsageFault_Handler>

00000f06 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     f06:	e7fe      	b.n	f06 <SVC_Handler>

00000f08 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     f08:	e7fe      	b.n	f08 <DebugMon_Handler>

00000f0a <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     f0a:	e7fe      	b.n	f0a <PendSV_Handler>

00000f0c <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     f0c:	e7fe      	b.n	f0c <SysTick_Handler>

00000f0e <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     f0e:	e7fe      	b.n	f0e <undefined_handler>

00000f10 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->1 Mhz.
 *  -SIRCDIV2_CLK -->Disabled
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
     f10:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
     f12:	4805      	ldr	r0, [pc, #20]	; (f28 <MCU_clocks+0x18>)
     f14:	f003 fdc2 	bl	4a9c <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
     f18:	2000      	movs	r0, #0
     f1a:	f003 fe37 	bl	4b8c <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
     f1e:	2000      	movs	r0, #0
     f20:	f003 fe10 	bl	4b44 <Mcu_InitClock>
    
    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
     f24:	bf00      	nop
     f26:	bd08      	pop	{r3, pc}
     f28:	000081b8 	.word	0x000081b8

00000f2c <EcuM_Init>:
 * @brief This function initialize the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
     f2c:	b508      	push	{r3, lr}
    MCU_clocks();
     f2e:	f7ff ffef 	bl	f10 <MCU_clocks>
    OsIf_Init( NULL_PTR );//Init Osif timer.
     f32:	2000      	movs	r0, #0
     f34:	f000 f81c 	bl	f70 <OsIf_Init>
    Port_Init( &Port_Config );//Init port driver and configuration.
     f38:	4802      	ldr	r0, [pc, #8]	; (f44 <EcuM_Init+0x18>)
     f3a:	f004 f9b1 	bl	52a0 <Port_Init>
     f3e:	bf00      	nop
     f40:	bd08      	pop	{r3, pc}
     f42:	bf00      	nop
     f44:	000083d0 	.word	0x000083d0

00000f48 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
     f48:	2300      	movs	r3, #0
}
     f4a:	4618      	mov	r0, r3
     f4c:	4770      	bx	lr

00000f4e <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
     f4e:	b082      	sub	sp, #8
     f50:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
     f52:	2301      	movs	r3, #1
}
     f54:	4618      	mov	r0, r3
     f56:	b002      	add	sp, #8
     f58:	4770      	bx	lr

00000f5a <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
     f5a:	b082      	sub	sp, #8
     f5c:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
     f5e:	bf00      	nop
     f60:	b002      	add	sp, #8
     f62:	4770      	bx	lr

00000f64 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
     f64:	b082      	sub	sp, #8
     f66:	9001      	str	r0, [sp, #4]
    return Micros;
     f68:	9b01      	ldr	r3, [sp, #4]
}
     f6a:	4618      	mov	r0, r3
     f6c:	b002      	add	sp, #8
     f6e:	4770      	bx	lr

00000f70 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
     f70:	b500      	push	{lr}
     f72:	b083      	sub	sp, #12
     f74:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
     f76:	f000 f86d 	bl	1054 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
     f7a:	bf00      	nop
     f7c:	b003      	add	sp, #12
     f7e:	f85d fb04 	ldr.w	pc, [sp], #4

00000f82 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
     f82:	b500      	push	{lr}
     f84:	b085      	sub	sp, #20
     f86:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
     f88:	2300      	movs	r3, #0
     f8a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     f8c:	9b01      	ldr	r3, [sp, #4]
     f8e:	2b00      	cmp	r3, #0
     f90:	d003      	beq.n	f9a <OsIf_GetCounter+0x18>
     f92:	9b01      	ldr	r3, [sp, #4]
     f94:	2b01      	cmp	r3, #1
     f96:	d004      	beq.n	fa2 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     f98:	e007      	b.n	faa <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
     f9a:	f7ff ffd5 	bl	f48 <OsIf_Timer_Dummy_GetCounter>
     f9e:	9003      	str	r0, [sp, #12]
            break;
     fa0:	e003      	b.n	faa <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
     fa2:	f000 f873 	bl	108c <OsIf_Timer_System_GetCounter>
     fa6:	9003      	str	r0, [sp, #12]
            break;
     fa8:	bf00      	nop
    }

    return Value;
     faa:	9b03      	ldr	r3, [sp, #12]
}
     fac:	4618      	mov	r0, r3
     fae:	b005      	add	sp, #20
     fb0:	f85d fb04 	ldr.w	pc, [sp], #4

00000fb4 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
     fb4:	b500      	push	{lr}
     fb6:	b085      	sub	sp, #20
     fb8:	9001      	str	r0, [sp, #4]
     fba:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     fbc:	2300      	movs	r3, #0
     fbe:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     fc0:	9b00      	ldr	r3, [sp, #0]
     fc2:	2b00      	cmp	r3, #0
     fc4:	d003      	beq.n	fce <OsIf_GetElapsed+0x1a>
     fc6:	9b00      	ldr	r3, [sp, #0]
     fc8:	2b01      	cmp	r3, #1
     fca:	d005      	beq.n	fd8 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     fcc:	e009      	b.n	fe2 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
     fce:	9801      	ldr	r0, [sp, #4]
     fd0:	f7ff ffbd 	bl	f4e <OsIf_Timer_Dummy_GetElapsed>
     fd4:	9003      	str	r0, [sp, #12]
            break;
     fd6:	e004      	b.n	fe2 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
     fd8:	9801      	ldr	r0, [sp, #4]
     fda:	f000 f865 	bl	10a8 <OsIf_Timer_System_GetElapsed>
     fde:	9003      	str	r0, [sp, #12]
            break;
     fe0:	bf00      	nop
    }

    return Value;
     fe2:	9b03      	ldr	r3, [sp, #12]
}
     fe4:	4618      	mov	r0, r3
     fe6:	b005      	add	sp, #20
     fe8:	f85d fb04 	ldr.w	pc, [sp], #4

00000fec <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
     fec:	b500      	push	{lr}
     fee:	b083      	sub	sp, #12
     ff0:	9001      	str	r0, [sp, #4]
     ff2:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
     ff4:	9b00      	ldr	r3, [sp, #0]
     ff6:	2b00      	cmp	r3, #0
     ff8:	d003      	beq.n	1002 <OsIf_SetTimerFrequency+0x16>
     ffa:	9b00      	ldr	r3, [sp, #0]
     ffc:	2b01      	cmp	r3, #1
     ffe:	d004      	beq.n	100a <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1000:	e007      	b.n	1012 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1002:	9801      	ldr	r0, [sp, #4]
    1004:	f7ff ffa9 	bl	f5a <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1008:	e003      	b.n	1012 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    100a:	9801      	ldr	r0, [sp, #4]
    100c:	f000 f85c 	bl	10c8 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1010:	bf00      	nop
    }
}
    1012:	bf00      	nop
    1014:	b003      	add	sp, #12
    1016:	f85d fb04 	ldr.w	pc, [sp], #4

0000101a <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    101a:	b500      	push	{lr}
    101c:	b085      	sub	sp, #20
    101e:	9001      	str	r0, [sp, #4]
    1020:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1022:	2300      	movs	r3, #0
    1024:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1026:	9b00      	ldr	r3, [sp, #0]
    1028:	2b00      	cmp	r3, #0
    102a:	d003      	beq.n	1034 <OsIf_MicrosToTicks+0x1a>
    102c:	9b00      	ldr	r3, [sp, #0]
    102e:	2b01      	cmp	r3, #1
    1030:	d005      	beq.n	103e <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1032:	e009      	b.n	1048 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1034:	9801      	ldr	r0, [sp, #4]
    1036:	f7ff ff95 	bl	f64 <OsIf_Timer_Dummy_MicrosToTicks>
    103a:	9003      	str	r0, [sp, #12]
            break;
    103c:	e004      	b.n	1048 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    103e:	9801      	ldr	r0, [sp, #4]
    1040:	f000 f850 	bl	10e4 <OsIf_Timer_System_MicrosToTicks>
    1044:	9003      	str	r0, [sp, #12]
            break;
    1046:	bf00      	nop
    }

    return Value;
    1048:	9b03      	ldr	r3, [sp, #12]
}
    104a:	4618      	mov	r0, r3
    104c:	b005      	add	sp, #20
    104e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001054 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1054:	b500      	push	{lr}
    1056:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1058:	2300      	movs	r3, #0
    105a:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    105c:	4a09      	ldr	r2, [pc, #36]	; (1084 <OsIf_Timer_System_Init+0x30>)
    105e:	9b01      	ldr	r3, [sp, #4]
    1060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1064:	685a      	ldr	r2, [r3, #4]
    1066:	4908      	ldr	r1, [pc, #32]	; (1088 <OsIf_Timer_System_Init+0x34>)
    1068:	9b01      	ldr	r3, [sp, #4]
    106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    106e:	4a06      	ldr	r2, [pc, #24]	; (1088 <OsIf_Timer_System_Init+0x34>)
    1070:	9b01      	ldr	r3, [sp, #4]
    1072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1076:	4618      	mov	r0, r3
    1078:	f000 f868 	bl	114c <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    107c:	bf00      	nop
    107e:	b003      	add	sp, #12
    1080:	f85d fb04 	ldr.w	pc, [sp], #4
    1084:	000081dc 	.word	0x000081dc
    1088:	1fff8b40 	.word	0x1fff8b40

0000108c <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    108c:	b500      	push	{lr}
    108e:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1090:	2300      	movs	r3, #0
    1092:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1094:	2300      	movs	r3, #0
    1096:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1098:	f000 f86c 	bl	1174 <OsIf_Timer_System_Internal_GetCounter>
    109c:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    109e:	9b01      	ldr	r3, [sp, #4]
}
    10a0:	4618      	mov	r0, r3
    10a2:	b003      	add	sp, #12
    10a4:	f85d fb04 	ldr.w	pc, [sp], #4

000010a8 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    10a8:	b500      	push	{lr}
    10aa:	b085      	sub	sp, #20
    10ac:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    10ae:	2300      	movs	r3, #0
    10b0:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    10b2:	2300      	movs	r3, #0
    10b4:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    10b6:	9801      	ldr	r0, [sp, #4]
    10b8:	f000 f864 	bl	1184 <OsIf_Timer_System_Internal_GetElapsed>
    10bc:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    10be:	9b03      	ldr	r3, [sp, #12]
}
    10c0:	4618      	mov	r0, r3
    10c2:	b005      	add	sp, #20
    10c4:	f85d fb04 	ldr.w	pc, [sp], #4

000010c8 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    10c8:	b084      	sub	sp, #16
    10ca:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    10cc:	2300      	movs	r3, #0
    10ce:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    10d0:	4903      	ldr	r1, [pc, #12]	; (10e0 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    10d2:	9b03      	ldr	r3, [sp, #12]
    10d4:	9a01      	ldr	r2, [sp, #4]
    10d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    10da:	bf00      	nop
    10dc:	b004      	add	sp, #16
    10de:	4770      	bx	lr
    10e0:	1fff8b40 	.word	0x1fff8b40

000010e4 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    10e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10e6:	b087      	sub	sp, #28
    10e8:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    10ea:	2100      	movs	r1, #0
    10ec:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    10ee:	2100      	movs	r1, #0
    10f0:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    10f2:	9901      	ldr	r1, [sp, #4]
    10f4:	2000      	movs	r0, #0
    10f6:	460e      	mov	r6, r1
    10f8:	4607      	mov	r7, r0
    10fa:	4812      	ldr	r0, [pc, #72]	; (1144 <OsIf_Timer_System_MicrosToTicks+0x60>)
    10fc:	9904      	ldr	r1, [sp, #16]
    10fe:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1102:	2000      	movs	r0, #0
    1104:	460c      	mov	r4, r1
    1106:	4605      	mov	r5, r0
    1108:	fb04 f007 	mul.w	r0, r4, r7
    110c:	fb06 f105 	mul.w	r1, r6, r5
    1110:	4401      	add	r1, r0
    1112:	fba6 2304 	umull	r2, r3, r6, r4
    1116:	4419      	add	r1, r3
    1118:	460b      	mov	r3, r1
    111a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    111e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1126:	4a08      	ldr	r2, [pc, #32]	; (1148 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1128:	f04f 0300 	mov.w	r3, #0
    112c:	f7ff fa3a 	bl	5a4 <__aeabi_uldivmod>
    1130:	4602      	mov	r2, r0
    1132:	460b      	mov	r3, r1
    1134:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1138:	9b02      	ldr	r3, [sp, #8]
    113a:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    113c:	9b05      	ldr	r3, [sp, #20]
}
    113e:	4618      	mov	r0, r3
    1140:	b007      	add	sp, #28
    1142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1144:	1fff8b40 	.word	0x1fff8b40
    1148:	000f4240 	.word	0x000f4240

0000114c <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    114c:	b082      	sub	sp, #8
    114e:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1150:	4b07      	ldr	r3, [pc, #28]	; (1170 <OsIf_Timer_System_Internal_Init+0x24>)
    1152:	2200      	movs	r2, #0
    1154:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1156:	4b06      	ldr	r3, [pc, #24]	; (1170 <OsIf_Timer_System_Internal_Init+0x24>)
    1158:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    115c:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    115e:	4b04      	ldr	r3, [pc, #16]	; (1170 <OsIf_Timer_System_Internal_Init+0x24>)
    1160:	2200      	movs	r2, #0
    1162:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1164:	4b02      	ldr	r3, [pc, #8]	; (1170 <OsIf_Timer_System_Internal_Init+0x24>)
    1166:	2205      	movs	r2, #5
    1168:	601a      	str	r2, [r3, #0]
}
    116a:	bf00      	nop
    116c:	b002      	add	sp, #8
    116e:	4770      	bx	lr
    1170:	e000e010 	.word	0xe000e010

00001174 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1174:	4b02      	ldr	r3, [pc, #8]	; (1180 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1176:	689b      	ldr	r3, [r3, #8]
    1178:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    117c:	4618      	mov	r0, r3
    117e:	4770      	bx	lr
    1180:	e000e010 	.word	0xe000e010

00001184 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1184:	b084      	sub	sp, #16
    1186:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1188:	4b10      	ldr	r3, [pc, #64]	; (11cc <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    118a:	689b      	ldr	r3, [r3, #8]
    118c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1190:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1192:	2300      	movs	r3, #0
    1194:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1196:	9b01      	ldr	r3, [sp, #4]
    1198:	681b      	ldr	r3, [r3, #0]
    119a:	9a02      	ldr	r2, [sp, #8]
    119c:	429a      	cmp	r2, r3
    119e:	d909      	bls.n	11b4 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    11a0:	9b01      	ldr	r3, [sp, #4]
    11a2:	681a      	ldr	r2, [r3, #0]
    11a4:	9b02      	ldr	r3, [sp, #8]
    11a6:	1ad3      	subs	r3, r2, r3
    11a8:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    11ac:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    11b0:	9303      	str	r3, [sp, #12]
    11b2:	e004      	b.n	11be <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    11b4:	9b01      	ldr	r3, [sp, #4]
    11b6:	681a      	ldr	r2, [r3, #0]
    11b8:	9b02      	ldr	r3, [sp, #8]
    11ba:	1ad3      	subs	r3, r2, r3
    11bc:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    11be:	9b01      	ldr	r3, [sp, #4]
    11c0:	9a02      	ldr	r2, [sp, #8]
    11c2:	601a      	str	r2, [r3, #0]

    return dif;
    11c4:	9b03      	ldr	r3, [sp, #12]
}
    11c6:	4618      	mov	r0, r3
    11c8:	b004      	add	sp, #16
    11ca:	4770      	bx	lr
    11cc:	e000e010 	.word	0xe000e010

000011d0 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    11d0:	b082      	sub	sp, #8
    11d2:	9001      	str	r0, [sp, #4]
    11d4:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    11d6:	bf00      	nop
    11d8:	b002      	add	sp, #8
    11da:	4770      	bx	lr

000011dc <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    11dc:	b500      	push	{lr}
    11de:	b085      	sub	sp, #20
    11e0:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    11e2:	4b24      	ldr	r3, [pc, #144]	; (1274 <Clock_Ip_UpdateDriverContext+0x98>)
    11e4:	2201      	movs	r2, #1
    11e6:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    11e8:	4b23      	ldr	r3, [pc, #140]	; (1278 <Clock_Ip_UpdateDriverContext+0x9c>)
    11ea:	681b      	ldr	r3, [r3, #0]
    11ec:	2102      	movs	r1, #2
    11ee:	4618      	mov	r0, r3
    11f0:	f003 fc32 	bl	4a58 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    11f4:	2300      	movs	r3, #0
    11f6:	f88d 300f 	strb.w	r3, [sp, #15]
    11fa:	e015      	b.n	1228 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    11fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1200:	9a01      	ldr	r2, [sp, #4]
    1202:	334a      	adds	r3, #74	; 0x4a
    1204:	00db      	lsls	r3, r3, #3
    1206:	4413      	add	r3, r2
    1208:	6858      	ldr	r0, [r3, #4]
    120a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    120e:	9a01      	ldr	r2, [sp, #4]
    1210:	334a      	adds	r3, #74	; 0x4a
    1212:	00db      	lsls	r3, r3, #3
    1214:	4413      	add	r3, r2
    1216:	689b      	ldr	r3, [r3, #8]
    1218:	4619      	mov	r1, r3
    121a:	f001 fadc 	bl	27d6 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    121e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1222:	3301      	adds	r3, #1
    1224:	f88d 300f 	strb.w	r3, [sp, #15]
    1228:	9b01      	ldr	r3, [sp, #4]
    122a:	7bdb      	ldrb	r3, [r3, #15]
    122c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1230:	429a      	cmp	r2, r3
    1232:	d3e3      	bcc.n	11fc <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1234:	f000 f824 	bl	1280 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1238:	2301      	movs	r3, #1
    123a:	f88d 300f 	strb.w	r3, [sp, #15]
    123e:	e00e      	b.n	125e <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1240:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1244:	9b01      	ldr	r3, [sp, #4]
    1246:	327e      	adds	r2, #126	; 0x7e
    1248:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    124c:	490b      	ldr	r1, [pc, #44]	; (127c <Clock_Ip_UpdateDriverContext+0xa0>)
    124e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1252:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1254:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1258:	3301      	adds	r3, #1
    125a:	f88d 300f 	strb.w	r3, [sp, #15]
    125e:	9b01      	ldr	r3, [sp, #4]
    1260:	7cdb      	ldrb	r3, [r3, #19]
    1262:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1266:	429a      	cmp	r2, r3
    1268:	d3ea      	bcc.n	1240 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    126a:	bf00      	nop
    126c:	bf00      	nop
    126e:	b005      	add	sp, #20
    1270:	f85d fb04 	ldr.w	pc, [sp], #4
    1274:	1fff8b10 	.word	0x1fff8b10
    1278:	1fff8b44 	.word	0x1fff8b44
    127c:	1fff8b50 	.word	0x1fff8b50

00001280 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1280:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1282:	4b23      	ldr	r3, [pc, #140]	; (1310 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1284:	781b      	ldrb	r3, [r3, #0]
    1286:	f083 0301 	eor.w	r3, r3, #1
    128a:	b2db      	uxtb	r3, r3
    128c:	2b00      	cmp	r3, #0
    128e:	d03d      	beq.n	130c <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1290:	4b1f      	ldr	r3, [pc, #124]	; (1310 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1292:	2201      	movs	r2, #1
    1294:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1296:	4b1f      	ldr	r3, [pc, #124]	; (1314 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1298:	685b      	ldr	r3, [r3, #4]
    129a:	2100      	movs	r1, #0
    129c:	2000      	movs	r0, #0
    129e:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    12a0:	4b1c      	ldr	r3, [pc, #112]	; (1314 <Clock_Ip_CallEmptyCallbacks+0x94>)
    12a2:	689b      	ldr	r3, [r3, #8]
    12a4:	2057      	movs	r0, #87	; 0x57
    12a6:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    12a8:	4b1b      	ldr	r3, [pc, #108]	; (1318 <Clock_Ip_CallEmptyCallbacks+0x98>)
    12aa:	681b      	ldr	r3, [r3, #0]
    12ac:	2000      	movs	r0, #0
    12ae:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    12b0:	4b1a      	ldr	r3, [pc, #104]	; (131c <Clock_Ip_CallEmptyCallbacks+0x9c>)
    12b2:	681b      	ldr	r3, [r3, #0]
    12b4:	2000      	movs	r0, #0
    12b6:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    12b8:	4b19      	ldr	r3, [pc, #100]	; (1320 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    12ba:	681b      	ldr	r3, [r3, #0]
    12bc:	2000      	movs	r0, #0
    12be:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    12c0:	4b18      	ldr	r3, [pc, #96]	; (1324 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    12c2:	685b      	ldr	r3, [r3, #4]
    12c4:	2000      	movs	r0, #0
    12c6:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    12c8:	4b16      	ldr	r3, [pc, #88]	; (1324 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    12ca:	689b      	ldr	r3, [r3, #8]
    12cc:	2057      	movs	r0, #87	; 0x57
    12ce:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    12d0:	4b15      	ldr	r3, [pc, #84]	; (1328 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    12d2:	681b      	ldr	r3, [r3, #0]
    12d4:	2000      	movs	r0, #0
    12d6:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    12d8:	4b13      	ldr	r3, [pc, #76]	; (1328 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    12da:	685b      	ldr	r3, [r3, #4]
    12dc:	2100      	movs	r1, #0
    12de:	2057      	movs	r0, #87	; 0x57
    12e0:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    12e2:	4b12      	ldr	r3, [pc, #72]	; (132c <Clock_Ip_CallEmptyCallbacks+0xac>)
    12e4:	681b      	ldr	r3, [r3, #0]
    12e6:	2000      	movs	r0, #0
    12e8:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    12ea:	4b11      	ldr	r3, [pc, #68]	; (1330 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    12ec:	685b      	ldr	r3, [r3, #4]
    12ee:	2000      	movs	r0, #0
    12f0:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    12f2:	4b0f      	ldr	r3, [pc, #60]	; (1330 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    12f4:	689b      	ldr	r3, [r3, #8]
    12f6:	2057      	movs	r0, #87	; 0x57
    12f8:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    12fa:	4b0e      	ldr	r3, [pc, #56]	; (1334 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    12fc:	685b      	ldr	r3, [r3, #4]
    12fe:	2000      	movs	r0, #0
    1300:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1302:	4b0d      	ldr	r3, [pc, #52]	; (1338 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	2100      	movs	r1, #0
    1308:	2000      	movs	r0, #0
    130a:	4798      	blx	r3
    }
}
    130c:	bf00      	nop
    130e:	bd08      	pop	{r3, pc}
    1310:	1fff8b48 	.word	0x1fff8b48
    1314:	00007c68 	.word	0x00007c68
    1318:	00007b7c 	.word	0x00007b7c
    131c:	00007bb8 	.word	0x00007bb8
    1320:	00007bc0 	.word	0x00007bc0
    1324:	00007be8 	.word	0x00007be8
    1328:	00007bf4 	.word	0x00007bf4
    132c:	00007c2c 	.word	0x00007c2c
    1330:	00007c78 	.word	0x00007c78
    1334:	00007ca4 	.word	0x00007ca4
    1338:	00007ca0 	.word	0x00007ca0

0000133c <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    133c:	b500      	push	{lr}
    133e:	b085      	sub	sp, #20
    1340:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1342:	9b01      	ldr	r3, [sp, #4]
    1344:	7adb      	ldrb	r3, [r3, #11]
    1346:	9303      	str	r3, [sp, #12]
    1348:	e01f      	b.n	138a <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    134a:	9b03      	ldr	r3, [sp, #12]
    134c:	1e5a      	subs	r2, r3, #1
    134e:	9b01      	ldr	r3, [sp, #4]
    1350:	320d      	adds	r2, #13
    1352:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1356:	495a      	ldr	r1, [pc, #360]	; (14c0 <Clock_Ip_ResetClockConfiguration+0x184>)
    1358:	4613      	mov	r3, r2
    135a:	00db      	lsls	r3, r3, #3
    135c:	4413      	add	r3, r2
    135e:	440b      	add	r3, r1
    1360:	3301      	adds	r3, #1
    1362:	781b      	ldrb	r3, [r3, #0]
    1364:	461a      	mov	r2, r3
    1366:	4b57      	ldr	r3, [pc, #348]	; (14c4 <Clock_Ip_ResetClockConfiguration+0x188>)
    1368:	5c9b      	ldrb	r3, [r3, r2]
    136a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    136c:	4a56      	ldr	r2, [pc, #344]	; (14c8 <Clock_Ip_ResetClockConfiguration+0x18c>)
    136e:	9b02      	ldr	r3, [sp, #8]
    1370:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1374:	9a03      	ldr	r2, [sp, #12]
    1376:	3a01      	subs	r2, #1
    1378:	320d      	adds	r2, #13
    137a:	00d2      	lsls	r2, r2, #3
    137c:	9901      	ldr	r1, [sp, #4]
    137e:	440a      	add	r2, r1
    1380:	4610      	mov	r0, r2
    1382:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1384:	9b03      	ldr	r3, [sp, #12]
    1386:	3b01      	subs	r3, #1
    1388:	9303      	str	r3, [sp, #12]
    138a:	9b03      	ldr	r3, [sp, #12]
    138c:	2b00      	cmp	r3, #0
    138e:	d1dc      	bne.n	134a <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1390:	9b01      	ldr	r3, [sp, #4]
    1392:	7b9b      	ldrb	r3, [r3, #14]
    1394:	9303      	str	r3, [sp, #12]
    1396:	e026      	b.n	13e6 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1398:	9b03      	ldr	r3, [sp, #12]
    139a:	3b01      	subs	r3, #1
    139c:	9a01      	ldr	r2, [sp, #4]
    139e:	3324      	adds	r3, #36	; 0x24
    13a0:	011b      	lsls	r3, r3, #4
    13a2:	4413      	add	r3, r2
    13a4:	3304      	adds	r3, #4
    13a6:	681a      	ldr	r2, [r3, #0]
    13a8:	4945      	ldr	r1, [pc, #276]	; (14c0 <Clock_Ip_ResetClockConfiguration+0x184>)
    13aa:	4613      	mov	r3, r2
    13ac:	00db      	lsls	r3, r3, #3
    13ae:	4413      	add	r3, r2
    13b0:	440b      	add	r3, r1
    13b2:	3301      	adds	r3, #1
    13b4:	781b      	ldrb	r3, [r3, #0]
    13b6:	461a      	mov	r2, r3
    13b8:	4b44      	ldr	r3, [pc, #272]	; (14cc <Clock_Ip_ResetClockConfiguration+0x190>)
    13ba:	5c9b      	ldrb	r3, [r3, r2]
    13bc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    13be:	4944      	ldr	r1, [pc, #272]	; (14d0 <Clock_Ip_ResetClockConfiguration+0x194>)
    13c0:	9a02      	ldr	r2, [sp, #8]
    13c2:	4613      	mov	r3, r2
    13c4:	005b      	lsls	r3, r3, #1
    13c6:	4413      	add	r3, r2
    13c8:	009b      	lsls	r3, r3, #2
    13ca:	440b      	add	r3, r1
    13cc:	681b      	ldr	r3, [r3, #0]
    13ce:	9a03      	ldr	r2, [sp, #12]
    13d0:	3a01      	subs	r2, #1
    13d2:	3224      	adds	r2, #36	; 0x24
    13d4:	0112      	lsls	r2, r2, #4
    13d6:	9901      	ldr	r1, [sp, #4]
    13d8:	440a      	add	r2, r1
    13da:	3204      	adds	r2, #4
    13dc:	4610      	mov	r0, r2
    13de:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    13e0:	9b03      	ldr	r3, [sp, #12]
    13e2:	3b01      	subs	r3, #1
    13e4:	9303      	str	r3, [sp, #12]
    13e6:	9b03      	ldr	r3, [sp, #12]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d1d5      	bne.n	1398 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    13ec:	9b01      	ldr	r3, [sp, #4]
    13ee:	7a9b      	ldrb	r3, [r3, #10]
    13f0:	9303      	str	r3, [sp, #12]
    13f2:	e02a      	b.n	144a <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    13f4:	9b03      	ldr	r3, [sp, #12]
    13f6:	1e5a      	subs	r2, r3, #1
    13f8:	9901      	ldr	r1, [sp, #4]
    13fa:	4613      	mov	r3, r2
    13fc:	009b      	lsls	r3, r3, #2
    13fe:	4413      	add	r3, r2
    1400:	00db      	lsls	r3, r3, #3
    1402:	440b      	add	r3, r1
    1404:	3340      	adds	r3, #64	; 0x40
    1406:	681a      	ldr	r2, [r3, #0]
    1408:	492d      	ldr	r1, [pc, #180]	; (14c0 <Clock_Ip_ResetClockConfiguration+0x184>)
    140a:	4613      	mov	r3, r2
    140c:	00db      	lsls	r3, r3, #3
    140e:	4413      	add	r3, r2
    1410:	440b      	add	r3, r1
    1412:	3301      	adds	r3, #1
    1414:	781b      	ldrb	r3, [r3, #0]
    1416:	461a      	mov	r2, r3
    1418:	4b2e      	ldr	r3, [pc, #184]	; (14d4 <Clock_Ip_ResetClockConfiguration+0x198>)
    141a:	5c9b      	ldrb	r3, [r3, r2]
    141c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    141e:	492e      	ldr	r1, [pc, #184]	; (14d8 <Clock_Ip_ResetClockConfiguration+0x19c>)
    1420:	9a02      	ldr	r2, [sp, #8]
    1422:	4613      	mov	r3, r2
    1424:	009b      	lsls	r3, r3, #2
    1426:	4413      	add	r3, r2
    1428:	009b      	lsls	r3, r3, #2
    142a:	440b      	add	r3, r1
    142c:	6819      	ldr	r1, [r3, #0]
    142e:	9b03      	ldr	r3, [sp, #12]
    1430:	1e5a      	subs	r2, r3, #1
    1432:	4613      	mov	r3, r2
    1434:	009b      	lsls	r3, r3, #2
    1436:	4413      	add	r3, r2
    1438:	00db      	lsls	r3, r3, #3
    143a:	3340      	adds	r3, #64	; 0x40
    143c:	9a01      	ldr	r2, [sp, #4]
    143e:	4413      	add	r3, r2
    1440:	4618      	mov	r0, r3
    1442:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1444:	9b03      	ldr	r3, [sp, #12]
    1446:	3b01      	subs	r3, #1
    1448:	9303      	str	r3, [sp, #12]
    144a:	9b03      	ldr	r3, [sp, #12]
    144c:	2b00      	cmp	r3, #0
    144e:	d1d1      	bne.n	13f4 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1450:	9b01      	ldr	r3, [sp, #4]
    1452:	7a5b      	ldrb	r3, [r3, #9]
    1454:	9303      	str	r3, [sp, #12]
    1456:	e02b      	b.n	14b0 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1458:	9b03      	ldr	r3, [sp, #12]
    145a:	1e5a      	subs	r2, r3, #1
    145c:	9901      	ldr	r1, [sp, #4]
    145e:	4613      	mov	r3, r2
    1460:	009b      	lsls	r3, r3, #2
    1462:	4413      	add	r3, r2
    1464:	009b      	lsls	r3, r3, #2
    1466:	440b      	add	r3, r1
    1468:	332c      	adds	r3, #44	; 0x2c
    146a:	681a      	ldr	r2, [r3, #0]
    146c:	4914      	ldr	r1, [pc, #80]	; (14c0 <Clock_Ip_ResetClockConfiguration+0x184>)
    146e:	4613      	mov	r3, r2
    1470:	00db      	lsls	r3, r3, #3
    1472:	4413      	add	r3, r2
    1474:	440b      	add	r3, r1
    1476:	3301      	adds	r3, #1
    1478:	781b      	ldrb	r3, [r3, #0]
    147a:	461a      	mov	r2, r3
    147c:	4b17      	ldr	r3, [pc, #92]	; (14dc <Clock_Ip_ResetClockConfiguration+0x1a0>)
    147e:	5c9b      	ldrb	r3, [r3, r2]
    1480:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1482:	4917      	ldr	r1, [pc, #92]	; (14e0 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1484:	9a02      	ldr	r2, [sp, #8]
    1486:	4613      	mov	r3, r2
    1488:	009b      	lsls	r3, r3, #2
    148a:	4413      	add	r3, r2
    148c:	009b      	lsls	r3, r3, #2
    148e:	440b      	add	r3, r1
    1490:	6819      	ldr	r1, [r3, #0]
    1492:	9b03      	ldr	r3, [sp, #12]
    1494:	1e5a      	subs	r2, r3, #1
    1496:	4613      	mov	r3, r2
    1498:	009b      	lsls	r3, r3, #2
    149a:	4413      	add	r3, r2
    149c:	009b      	lsls	r3, r3, #2
    149e:	3328      	adds	r3, #40	; 0x28
    14a0:	9a01      	ldr	r2, [sp, #4]
    14a2:	4413      	add	r3, r2
    14a4:	3304      	adds	r3, #4
    14a6:	4618      	mov	r0, r3
    14a8:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    14aa:	9b03      	ldr	r3, [sp, #12]
    14ac:	3b01      	subs	r3, #1
    14ae:	9303      	str	r3, [sp, #12]
    14b0:	9b03      	ldr	r3, [sp, #12]
    14b2:	2b00      	cmp	r3, #0
    14b4:	d1d0      	bne.n	1458 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    14b6:	bf00      	nop
    14b8:	bf00      	nop
    14ba:	b005      	add	sp, #20
    14bc:	f85d fb04 	ldr.w	pc, [sp], #4
    14c0:	0000766c 	.word	0x0000766c
    14c4:	0000763c 	.word	0x0000763c
    14c8:	00007ca4 	.word	0x00007ca4
    14cc:	0000761c 	.word	0x0000761c
    14d0:	00007be8 	.word	0x00007be8
    14d4:	0000762c 	.word	0x0000762c
    14d8:	00007c78 	.word	0x00007c78
    14dc:	000075ec 	.word	0x000075ec
    14e0:	00007bc0 	.word	0x00007bc0

000014e4 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    14e4:	b500      	push	{lr}
    14e6:	b085      	sub	sp, #20
    14e8:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    14ea:	2301      	movs	r3, #1
    14ec:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    14ee:	9801      	ldr	r0, [sp, #4]
    14f0:	f000 f818 	bl	1524 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    14f4:	4b0a      	ldr	r3, [pc, #40]	; (1520 <Clock_Ip_Init+0x3c>)
    14f6:	781b      	ldrb	r3, [r3, #0]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d00a      	beq.n	1512 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    14fc:	f000 fb74 	bl	1be8 <Clock_Ip_GetPllStatus>
    1500:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1502:	9b02      	ldr	r3, [sp, #8]
    1504:	2b00      	cmp	r3, #0
    1506:	d106      	bne.n	1516 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    1508:	f000 fbf2 	bl	1cf0 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    150c:	2300      	movs	r3, #0
    150e:	9303      	str	r3, [sp, #12]
    1510:	e001      	b.n	1516 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1512:	2300      	movs	r3, #0
    1514:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    1516:	9b03      	ldr	r3, [sp, #12]
}
    1518:	4618      	mov	r0, r3
    151a:	b005      	add	sp, #20
    151c:	f85d fb04 	ldr.w	pc, [sp], #4
    1520:	1fff8b4c 	.word	0x1fff8b4c

00001524 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1524:	b510      	push	{r4, lr}
    1526:	b084      	sub	sp, #16
    1528:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    152a:	4a9f      	ldr	r2, [pc, #636]	; (17a8 <Clock_Ip_InitClock+0x284>)
    152c:	9b01      	ldr	r3, [sp, #4]
    152e:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1530:	2101      	movs	r1, #1
    1532:	9801      	ldr	r0, [sp, #4]
    1534:	f003 fa90 	bl	4a58 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1538:	4b9b      	ldr	r3, [pc, #620]	; (17a8 <Clock_Ip_InitClock+0x284>)
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	2b00      	cmp	r3, #0
    153e:	d030      	beq.n	15a2 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1540:	2300      	movs	r3, #0
    1542:	9303      	str	r3, [sp, #12]
    1544:	e027      	b.n	1596 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1546:	9901      	ldr	r1, [sp, #4]
    1548:	9a03      	ldr	r2, [sp, #12]
    154a:	4613      	mov	r3, r2
    154c:	009b      	lsls	r3, r3, #2
    154e:	4413      	add	r3, r2
    1550:	009b      	lsls	r3, r3, #2
    1552:	440b      	add	r3, r1
    1554:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1558:	681a      	ldr	r2, [r3, #0]
    155a:	4994      	ldr	r1, [pc, #592]	; (17ac <Clock_Ip_InitClock+0x288>)
    155c:	4613      	mov	r3, r2
    155e:	00db      	lsls	r3, r3, #3
    1560:	4413      	add	r3, r2
    1562:	440b      	add	r3, r1
    1564:	3301      	adds	r3, #1
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	461a      	mov	r2, r3
    156a:	4b91      	ldr	r3, [pc, #580]	; (17b0 <Clock_Ip_InitClock+0x28c>)
    156c:	5c9b      	ldrb	r3, [r3, r2]
    156e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1570:	4a90      	ldr	r2, [pc, #576]	; (17b4 <Clock_Ip_InitClock+0x290>)
    1572:	9b02      	ldr	r3, [sp, #8]
    1574:	011b      	lsls	r3, r3, #4
    1576:	4413      	add	r3, r2
    1578:	6819      	ldr	r1, [r3, #0]
    157a:	9a03      	ldr	r2, [sp, #12]
    157c:	4613      	mov	r3, r2
    157e:	009b      	lsls	r3, r3, #2
    1580:	4413      	add	r3, r2
    1582:	009b      	lsls	r3, r3, #2
    1584:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1588:	9a01      	ldr	r2, [sp, #4]
    158a:	4413      	add	r3, r2
    158c:	4618      	mov	r0, r3
    158e:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1590:	9b03      	ldr	r3, [sp, #12]
    1592:	3301      	adds	r3, #1
    1594:	9303      	str	r3, [sp, #12]
    1596:	9b01      	ldr	r3, [sp, #4]
    1598:	7c9b      	ldrb	r3, [r3, #18]
    159a:	461a      	mov	r2, r3
    159c:	9b03      	ldr	r3, [sp, #12]
    159e:	4293      	cmp	r3, r2
    15a0:	d3d1      	bcc.n	1546 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    15a2:	9801      	ldr	r0, [sp, #4]
    15a4:	f7ff feca 	bl	133c <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    15a8:	2300      	movs	r3, #0
    15aa:	9303      	str	r3, [sp, #12]
    15ac:	e029      	b.n	1602 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    15ae:	9901      	ldr	r1, [sp, #4]
    15b0:	9a03      	ldr	r2, [sp, #12]
    15b2:	4613      	mov	r3, r2
    15b4:	005b      	lsls	r3, r3, #1
    15b6:	4413      	add	r3, r2
    15b8:	009b      	lsls	r3, r3, #2
    15ba:	440b      	add	r3, r1
    15bc:	3314      	adds	r3, #20
    15be:	681a      	ldr	r2, [r3, #0]
    15c0:	497a      	ldr	r1, [pc, #488]	; (17ac <Clock_Ip_InitClock+0x288>)
    15c2:	4613      	mov	r3, r2
    15c4:	00db      	lsls	r3, r3, #3
    15c6:	4413      	add	r3, r2
    15c8:	440b      	add	r3, r1
    15ca:	3301      	adds	r3, #1
    15cc:	781b      	ldrb	r3, [r3, #0]
    15ce:	461a      	mov	r2, r3
    15d0:	4b79      	ldr	r3, [pc, #484]	; (17b8 <Clock_Ip_InitClock+0x294>)
    15d2:	5c9b      	ldrb	r3, [r3, r2]
    15d4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    15d6:	4979      	ldr	r1, [pc, #484]	; (17bc <Clock_Ip_InitClock+0x298>)
    15d8:	9a02      	ldr	r2, [sp, #8]
    15da:	4613      	mov	r3, r2
    15dc:	005b      	lsls	r3, r3, #1
    15de:	4413      	add	r3, r2
    15e0:	009b      	lsls	r3, r3, #2
    15e2:	440b      	add	r3, r1
    15e4:	6819      	ldr	r1, [r3, #0]
    15e6:	9a03      	ldr	r2, [sp, #12]
    15e8:	4613      	mov	r3, r2
    15ea:	005b      	lsls	r3, r3, #1
    15ec:	4413      	add	r3, r2
    15ee:	009b      	lsls	r3, r3, #2
    15f0:	3310      	adds	r3, #16
    15f2:	9a01      	ldr	r2, [sp, #4]
    15f4:	4413      	add	r3, r2
    15f6:	3304      	adds	r3, #4
    15f8:	4618      	mov	r0, r3
    15fa:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    15fc:	9b03      	ldr	r3, [sp, #12]
    15fe:	3301      	adds	r3, #1
    1600:	9303      	str	r3, [sp, #12]
    1602:	9b01      	ldr	r3, [sp, #4]
    1604:	7a1b      	ldrb	r3, [r3, #8]
    1606:	461a      	mov	r2, r3
    1608:	9b03      	ldr	r3, [sp, #12]
    160a:	4293      	cmp	r3, r2
    160c:	d3cf      	bcc.n	15ae <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    160e:	2300      	movs	r3, #0
    1610:	9303      	str	r3, [sp, #12]
    1612:	e02a      	b.n	166a <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1614:	9901      	ldr	r1, [sp, #4]
    1616:	9a03      	ldr	r2, [sp, #12]
    1618:	4613      	mov	r3, r2
    161a:	009b      	lsls	r3, r3, #2
    161c:	4413      	add	r3, r2
    161e:	009b      	lsls	r3, r3, #2
    1620:	440b      	add	r3, r1
    1622:	332c      	adds	r3, #44	; 0x2c
    1624:	681a      	ldr	r2, [r3, #0]
    1626:	4961      	ldr	r1, [pc, #388]	; (17ac <Clock_Ip_InitClock+0x288>)
    1628:	4613      	mov	r3, r2
    162a:	00db      	lsls	r3, r3, #3
    162c:	4413      	add	r3, r2
    162e:	440b      	add	r3, r1
    1630:	3301      	adds	r3, #1
    1632:	781b      	ldrb	r3, [r3, #0]
    1634:	461a      	mov	r2, r3
    1636:	4b62      	ldr	r3, [pc, #392]	; (17c0 <Clock_Ip_InitClock+0x29c>)
    1638:	5c9b      	ldrb	r3, [r3, r2]
    163a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    163c:	4961      	ldr	r1, [pc, #388]	; (17c4 <Clock_Ip_InitClock+0x2a0>)
    163e:	9a02      	ldr	r2, [sp, #8]
    1640:	4613      	mov	r3, r2
    1642:	009b      	lsls	r3, r3, #2
    1644:	4413      	add	r3, r2
    1646:	009b      	lsls	r3, r3, #2
    1648:	440b      	add	r3, r1
    164a:	3304      	adds	r3, #4
    164c:	6819      	ldr	r1, [r3, #0]
    164e:	9a03      	ldr	r2, [sp, #12]
    1650:	4613      	mov	r3, r2
    1652:	009b      	lsls	r3, r3, #2
    1654:	4413      	add	r3, r2
    1656:	009b      	lsls	r3, r3, #2
    1658:	3328      	adds	r3, #40	; 0x28
    165a:	9a01      	ldr	r2, [sp, #4]
    165c:	4413      	add	r3, r2
    165e:	3304      	adds	r3, #4
    1660:	4618      	mov	r0, r3
    1662:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1664:	9b03      	ldr	r3, [sp, #12]
    1666:	3301      	adds	r3, #1
    1668:	9303      	str	r3, [sp, #12]
    166a:	9b01      	ldr	r3, [sp, #4]
    166c:	7a5b      	ldrb	r3, [r3, #9]
    166e:	461a      	mov	r2, r3
    1670:	9b03      	ldr	r3, [sp, #12]
    1672:	4293      	cmp	r3, r2
    1674:	d3ce      	bcc.n	1614 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    1676:	9801      	ldr	r0, [sp, #4]
    1678:	f7ff fdb0 	bl	11dc <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    167c:	2300      	movs	r3, #0
    167e:	9303      	str	r3, [sp, #12]
    1680:	e028      	b.n	16d4 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1682:	9901      	ldr	r1, [sp, #4]
    1684:	9a03      	ldr	r2, [sp, #12]
    1686:	4613      	mov	r3, r2
    1688:	009b      	lsls	r3, r3, #2
    168a:	4413      	add	r3, r2
    168c:	009b      	lsls	r3, r3, #2
    168e:	440b      	add	r3, r1
    1690:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1694:	681a      	ldr	r2, [r3, #0]
    1696:	4945      	ldr	r1, [pc, #276]	; (17ac <Clock_Ip_InitClock+0x288>)
    1698:	4613      	mov	r3, r2
    169a:	00db      	lsls	r3, r3, #3
    169c:	4413      	add	r3, r2
    169e:	440b      	add	r3, r1
    16a0:	3301      	adds	r3, #1
    16a2:	781b      	ldrb	r3, [r3, #0]
    16a4:	461a      	mov	r2, r3
    16a6:	4b48      	ldr	r3, [pc, #288]	; (17c8 <Clock_Ip_InitClock+0x2a4>)
    16a8:	5c9b      	ldrb	r3, [r3, r2]
    16aa:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    16ac:	4a47      	ldr	r2, [pc, #284]	; (17cc <Clock_Ip_InitClock+0x2a8>)
    16ae:	9b02      	ldr	r3, [sp, #8]
    16b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    16b4:	9a03      	ldr	r2, [sp, #12]
    16b6:	4613      	mov	r3, r2
    16b8:	009b      	lsls	r3, r3, #2
    16ba:	4413      	add	r3, r2
    16bc:	009b      	lsls	r3, r3, #2
    16be:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    16c2:	9a01      	ldr	r2, [sp, #4]
    16c4:	4413      	add	r3, r2
    16c6:	3304      	adds	r3, #4
    16c8:	9903      	ldr	r1, [sp, #12]
    16ca:	4618      	mov	r0, r3
    16cc:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    16ce:	9b03      	ldr	r3, [sp, #12]
    16d0:	3301      	adds	r3, #1
    16d2:	9303      	str	r3, [sp, #12]
    16d4:	9b01      	ldr	r3, [sp, #4]
    16d6:	7c5b      	ldrb	r3, [r3, #17]
    16d8:	461a      	mov	r2, r3
    16da:	9b03      	ldr	r3, [sp, #12]
    16dc:	4293      	cmp	r3, r2
    16de:	d3d0      	bcc.n	1682 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    16e0:	2300      	movs	r3, #0
    16e2:	9303      	str	r3, [sp, #12]
    16e4:	e026      	b.n	1734 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    16e6:	9901      	ldr	r1, [sp, #4]
    16e8:	9a03      	ldr	r2, [sp, #12]
    16ea:	4613      	mov	r3, r2
    16ec:	005b      	lsls	r3, r3, #1
    16ee:	4413      	add	r3, r2
    16f0:	009b      	lsls	r3, r3, #2
    16f2:	440b      	add	r3, r1
    16f4:	f503 730e 	add.w	r3, r3, #568	; 0x238
    16f8:	681a      	ldr	r2, [r3, #0]
    16fa:	492c      	ldr	r1, [pc, #176]	; (17ac <Clock_Ip_InitClock+0x288>)
    16fc:	4613      	mov	r3, r2
    16fe:	00db      	lsls	r3, r3, #3
    1700:	4413      	add	r3, r2
    1702:	440b      	add	r3, r1
    1704:	3301      	adds	r3, #1
    1706:	781b      	ldrb	r3, [r3, #0]
    1708:	461a      	mov	r2, r3
    170a:	4b31      	ldr	r3, [pc, #196]	; (17d0 <Clock_Ip_InitClock+0x2ac>)
    170c:	5c9b      	ldrb	r3, [r3, r2]
    170e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    1710:	4a30      	ldr	r2, [pc, #192]	; (17d4 <Clock_Ip_InitClock+0x2b0>)
    1712:	9b02      	ldr	r3, [sp, #8]
    1714:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    1718:	9a03      	ldr	r2, [sp, #12]
    171a:	4613      	mov	r3, r2
    171c:	005b      	lsls	r3, r3, #1
    171e:	4413      	add	r3, r2
    1720:	009b      	lsls	r3, r3, #2
    1722:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1726:	9a01      	ldr	r2, [sp, #4]
    1728:	4413      	add	r3, r2
    172a:	4618      	mov	r0, r3
    172c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    172e:	9b03      	ldr	r3, [sp, #12]
    1730:	3301      	adds	r3, #1
    1732:	9303      	str	r3, [sp, #12]
    1734:	9b01      	ldr	r3, [sp, #4]
    1736:	7b5b      	ldrb	r3, [r3, #13]
    1738:	461a      	mov	r2, r3
    173a:	9b03      	ldr	r3, [sp, #12]
    173c:	4293      	cmp	r3, r2
    173e:	d3d2      	bcc.n	16e6 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1740:	2300      	movs	r3, #0
    1742:	9303      	str	r3, [sp, #12]
    1744:	e026      	b.n	1794 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    1746:	9901      	ldr	r1, [sp, #4]
    1748:	9a03      	ldr	r2, [sp, #12]
    174a:	4613      	mov	r3, r2
    174c:	005b      	lsls	r3, r3, #1
    174e:	4413      	add	r3, r2
    1750:	009b      	lsls	r3, r3, #2
    1752:	440b      	add	r3, r1
    1754:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1758:	681a      	ldr	r2, [r3, #0]
    175a:	4914      	ldr	r1, [pc, #80]	; (17ac <Clock_Ip_InitClock+0x288>)
    175c:	4613      	mov	r3, r2
    175e:	00db      	lsls	r3, r3, #3
    1760:	4413      	add	r3, r2
    1762:	440b      	add	r3, r1
    1764:	3301      	adds	r3, #1
    1766:	781b      	ldrb	r3, [r3, #0]
    1768:	461a      	mov	r2, r3
    176a:	4b1b      	ldr	r3, [pc, #108]	; (17d8 <Clock_Ip_InitClock+0x2b4>)
    176c:	5c9b      	ldrb	r3, [r3, r2]
    176e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1770:	4a1a      	ldr	r2, [pc, #104]	; (17dc <Clock_Ip_InitClock+0x2b8>)
    1772:	9b02      	ldr	r3, [sp, #8]
    1774:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1778:	9a03      	ldr	r2, [sp, #12]
    177a:	4613      	mov	r3, r2
    177c:	005b      	lsls	r3, r3, #1
    177e:	4413      	add	r3, r2
    1780:	009b      	lsls	r3, r3, #2
    1782:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1786:	9a01      	ldr	r2, [sp, #4]
    1788:	4413      	add	r3, r2
    178a:	4618      	mov	r0, r3
    178c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    178e:	9b03      	ldr	r3, [sp, #12]
    1790:	3301      	adds	r3, #1
    1792:	9303      	str	r3, [sp, #12]
    1794:	9b01      	ldr	r3, [sp, #4]
    1796:	7b1b      	ldrb	r3, [r3, #12]
    1798:	461a      	mov	r2, r3
    179a:	9b03      	ldr	r3, [sp, #12]
    179c:	4293      	cmp	r3, r2
    179e:	d3d2      	bcc.n	1746 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    17a0:	2300      	movs	r3, #0
    17a2:	9303      	str	r3, [sp, #12]
    17a4:	e044      	b.n	1830 <Clock_Ip_InitClock+0x30c>
    17a6:	bf00      	nop
    17a8:	1fff8b44 	.word	0x1fff8b44
    17ac:	0000766c 	.word	0x0000766c
    17b0:	0000765c 	.word	0x0000765c
    17b4:	00007c68 	.word	0x00007c68
    17b8:	000075fc 	.word	0x000075fc
    17bc:	00007c2c 	.word	0x00007c2c
    17c0:	000075ec 	.word	0x000075ec
    17c4:	00007bc0 	.word	0x00007bc0
    17c8:	0000764c 	.word	0x0000764c
    17cc:	00007ca0 	.word	0x00007ca0
    17d0:	000075dc 	.word	0x000075dc
    17d4:	00007bb8 	.word	0x00007bb8
    17d8:	000075cc 	.word	0x000075cc
    17dc:	00007b7c 	.word	0x00007b7c
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    17e0:	9901      	ldr	r1, [sp, #4]
    17e2:	9a03      	ldr	r2, [sp, #12]
    17e4:	4613      	mov	r3, r2
    17e6:	005b      	lsls	r3, r3, #1
    17e8:	4413      	add	r3, r2
    17ea:	009b      	lsls	r3, r3, #2
    17ec:	440b      	add	r3, r1
    17ee:	f503 730e 	add.w	r3, r3, #568	; 0x238
    17f2:	681a      	ldr	r2, [r3, #0]
    17f4:	49ac      	ldr	r1, [pc, #688]	; (1aa8 <Clock_Ip_InitClock+0x584>)
    17f6:	4613      	mov	r3, r2
    17f8:	00db      	lsls	r3, r3, #3
    17fa:	4413      	add	r3, r2
    17fc:	440b      	add	r3, r1
    17fe:	3301      	adds	r3, #1
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	461a      	mov	r2, r3
    1804:	4ba9      	ldr	r3, [pc, #676]	; (1aac <Clock_Ip_InitClock+0x588>)
    1806:	5c9b      	ldrb	r3, [r3, r2]
    1808:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    180a:	4aa9      	ldr	r2, [pc, #676]	; (1ab0 <Clock_Ip_InitClock+0x58c>)
    180c:	9b02      	ldr	r3, [sp, #8]
    180e:	00db      	lsls	r3, r3, #3
    1810:	4413      	add	r3, r2
    1812:	6859      	ldr	r1, [r3, #4]
    1814:	9a03      	ldr	r2, [sp, #12]
    1816:	4613      	mov	r3, r2
    1818:	005b      	lsls	r3, r3, #1
    181a:	4413      	add	r3, r2
    181c:	009b      	lsls	r3, r3, #2
    181e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1822:	9a01      	ldr	r2, [sp, #4]
    1824:	4413      	add	r3, r2
    1826:	4618      	mov	r0, r3
    1828:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    182a:	9b03      	ldr	r3, [sp, #12]
    182c:	3301      	adds	r3, #1
    182e:	9303      	str	r3, [sp, #12]
    1830:	9b01      	ldr	r3, [sp, #4]
    1832:	7b5b      	ldrb	r3, [r3, #13]
    1834:	461a      	mov	r2, r3
    1836:	9b03      	ldr	r3, [sp, #12]
    1838:	4293      	cmp	r3, r2
    183a:	d3d1      	bcc.n	17e0 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    183c:	2300      	movs	r3, #0
    183e:	9303      	str	r3, [sp, #12]
    1840:	e029      	b.n	1896 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1842:	9901      	ldr	r1, [sp, #4]
    1844:	9a03      	ldr	r2, [sp, #12]
    1846:	4613      	mov	r3, r2
    1848:	009b      	lsls	r3, r3, #2
    184a:	4413      	add	r3, r2
    184c:	00db      	lsls	r3, r3, #3
    184e:	440b      	add	r3, r1
    1850:	3340      	adds	r3, #64	; 0x40
    1852:	681a      	ldr	r2, [r3, #0]
    1854:	4994      	ldr	r1, [pc, #592]	; (1aa8 <Clock_Ip_InitClock+0x584>)
    1856:	4613      	mov	r3, r2
    1858:	00db      	lsls	r3, r3, #3
    185a:	4413      	add	r3, r2
    185c:	440b      	add	r3, r1
    185e:	3301      	adds	r3, #1
    1860:	781b      	ldrb	r3, [r3, #0]
    1862:	461a      	mov	r2, r3
    1864:	4b93      	ldr	r3, [pc, #588]	; (1ab4 <Clock_Ip_InitClock+0x590>)
    1866:	5c9b      	ldrb	r3, [r3, r2]
    1868:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    186a:	4993      	ldr	r1, [pc, #588]	; (1ab8 <Clock_Ip_InitClock+0x594>)
    186c:	9a02      	ldr	r2, [sp, #8]
    186e:	4613      	mov	r3, r2
    1870:	009b      	lsls	r3, r3, #2
    1872:	4413      	add	r3, r2
    1874:	009b      	lsls	r3, r3, #2
    1876:	440b      	add	r3, r1
    1878:	3304      	adds	r3, #4
    187a:	6819      	ldr	r1, [r3, #0]
    187c:	9a03      	ldr	r2, [sp, #12]
    187e:	4613      	mov	r3, r2
    1880:	009b      	lsls	r3, r3, #2
    1882:	4413      	add	r3, r2
    1884:	00db      	lsls	r3, r3, #3
    1886:	3340      	adds	r3, #64	; 0x40
    1888:	9a01      	ldr	r2, [sp, #4]
    188a:	4413      	add	r3, r2
    188c:	4618      	mov	r0, r3
    188e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1890:	9b03      	ldr	r3, [sp, #12]
    1892:	3301      	adds	r3, #1
    1894:	9303      	str	r3, [sp, #12]
    1896:	9b01      	ldr	r3, [sp, #4]
    1898:	7a9b      	ldrb	r3, [r3, #10]
    189a:	461a      	mov	r2, r3
    189c:	9b03      	ldr	r3, [sp, #12]
    189e:	4293      	cmp	r3, r2
    18a0:	d3cf      	bcc.n	1842 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    18a2:	2300      	movs	r3, #0
    18a4:	9303      	str	r3, [sp, #12]
    18a6:	e029      	b.n	18fc <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    18a8:	9901      	ldr	r1, [sp, #4]
    18aa:	9a03      	ldr	r2, [sp, #12]
    18ac:	4613      	mov	r3, r2
    18ae:	009b      	lsls	r3, r3, #2
    18b0:	4413      	add	r3, r2
    18b2:	009b      	lsls	r3, r3, #2
    18b4:	440b      	add	r3, r1
    18b6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    18ba:	681a      	ldr	r2, [r3, #0]
    18bc:	497a      	ldr	r1, [pc, #488]	; (1aa8 <Clock_Ip_InitClock+0x584>)
    18be:	4613      	mov	r3, r2
    18c0:	00db      	lsls	r3, r3, #3
    18c2:	4413      	add	r3, r2
    18c4:	440b      	add	r3, r1
    18c6:	3301      	adds	r3, #1
    18c8:	781b      	ldrb	r3, [r3, #0]
    18ca:	461a      	mov	r2, r3
    18cc:	4b7b      	ldr	r3, [pc, #492]	; (1abc <Clock_Ip_InitClock+0x598>)
    18ce:	5c9b      	ldrb	r3, [r3, r2]
    18d0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    18d2:	4a7b      	ldr	r2, [pc, #492]	; (1ac0 <Clock_Ip_InitClock+0x59c>)
    18d4:	9b02      	ldr	r3, [sp, #8]
    18d6:	011b      	lsls	r3, r3, #4
    18d8:	4413      	add	r3, r2
    18da:	3304      	adds	r3, #4
    18dc:	681c      	ldr	r4, [r3, #0]
    18de:	9a03      	ldr	r2, [sp, #12]
    18e0:	4613      	mov	r3, r2
    18e2:	009b      	lsls	r3, r3, #2
    18e4:	4413      	add	r3, r2
    18e6:	009b      	lsls	r3, r3, #2
    18e8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    18ec:	9a01      	ldr	r2, [sp, #4]
    18ee:	4413      	add	r3, r2
    18f0:	9903      	ldr	r1, [sp, #12]
    18f2:	4618      	mov	r0, r3
    18f4:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    18f6:	9b03      	ldr	r3, [sp, #12]
    18f8:	3301      	adds	r3, #1
    18fa:	9303      	str	r3, [sp, #12]
    18fc:	9b01      	ldr	r3, [sp, #4]
    18fe:	7c9b      	ldrb	r3, [r3, #18]
    1900:	461a      	mov	r2, r3
    1902:	9b03      	ldr	r3, [sp, #12]
    1904:	4293      	cmp	r3, r2
    1906:	d3cf      	bcc.n	18a8 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1908:	2300      	movs	r3, #0
    190a:	9303      	str	r3, [sp, #12]
    190c:	e02a      	b.n	1964 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    190e:	9901      	ldr	r1, [sp, #4]
    1910:	9a03      	ldr	r2, [sp, #12]
    1912:	4613      	mov	r3, r2
    1914:	009b      	lsls	r3, r3, #2
    1916:	4413      	add	r3, r2
    1918:	009b      	lsls	r3, r3, #2
    191a:	440b      	add	r3, r1
    191c:	332c      	adds	r3, #44	; 0x2c
    191e:	681a      	ldr	r2, [r3, #0]
    1920:	4961      	ldr	r1, [pc, #388]	; (1aa8 <Clock_Ip_InitClock+0x584>)
    1922:	4613      	mov	r3, r2
    1924:	00db      	lsls	r3, r3, #3
    1926:	4413      	add	r3, r2
    1928:	440b      	add	r3, r1
    192a:	3301      	adds	r3, #1
    192c:	781b      	ldrb	r3, [r3, #0]
    192e:	461a      	mov	r2, r3
    1930:	4b64      	ldr	r3, [pc, #400]	; (1ac4 <Clock_Ip_InitClock+0x5a0>)
    1932:	5c9b      	ldrb	r3, [r3, r2]
    1934:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1936:	4964      	ldr	r1, [pc, #400]	; (1ac8 <Clock_Ip_InitClock+0x5a4>)
    1938:	9a02      	ldr	r2, [sp, #8]
    193a:	4613      	mov	r3, r2
    193c:	009b      	lsls	r3, r3, #2
    193e:	4413      	add	r3, r2
    1940:	009b      	lsls	r3, r3, #2
    1942:	440b      	add	r3, r1
    1944:	3308      	adds	r3, #8
    1946:	6819      	ldr	r1, [r3, #0]
    1948:	9a03      	ldr	r2, [sp, #12]
    194a:	4613      	mov	r3, r2
    194c:	009b      	lsls	r3, r3, #2
    194e:	4413      	add	r3, r2
    1950:	009b      	lsls	r3, r3, #2
    1952:	3328      	adds	r3, #40	; 0x28
    1954:	9a01      	ldr	r2, [sp, #4]
    1956:	4413      	add	r3, r2
    1958:	3304      	adds	r3, #4
    195a:	4618      	mov	r0, r3
    195c:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    195e:	9b03      	ldr	r3, [sp, #12]
    1960:	3301      	adds	r3, #1
    1962:	9303      	str	r3, [sp, #12]
    1964:	9b01      	ldr	r3, [sp, #4]
    1966:	7a5b      	ldrb	r3, [r3, #9]
    1968:	461a      	mov	r2, r3
    196a:	9b03      	ldr	r3, [sp, #12]
    196c:	4293      	cmp	r3, r2
    196e:	d3ce      	bcc.n	190e <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1970:	2300      	movs	r3, #0
    1972:	9303      	str	r3, [sp, #12]
    1974:	e029      	b.n	19ca <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1976:	9901      	ldr	r1, [sp, #4]
    1978:	9a03      	ldr	r2, [sp, #12]
    197a:	4613      	mov	r3, r2
    197c:	009b      	lsls	r3, r3, #2
    197e:	4413      	add	r3, r2
    1980:	00db      	lsls	r3, r3, #3
    1982:	440b      	add	r3, r1
    1984:	3340      	adds	r3, #64	; 0x40
    1986:	681a      	ldr	r2, [r3, #0]
    1988:	4947      	ldr	r1, [pc, #284]	; (1aa8 <Clock_Ip_InitClock+0x584>)
    198a:	4613      	mov	r3, r2
    198c:	00db      	lsls	r3, r3, #3
    198e:	4413      	add	r3, r2
    1990:	440b      	add	r3, r1
    1992:	3301      	adds	r3, #1
    1994:	781b      	ldrb	r3, [r3, #0]
    1996:	461a      	mov	r2, r3
    1998:	4b46      	ldr	r3, [pc, #280]	; (1ab4 <Clock_Ip_InitClock+0x590>)
    199a:	5c9b      	ldrb	r3, [r3, r2]
    199c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    199e:	4946      	ldr	r1, [pc, #280]	; (1ab8 <Clock_Ip_InitClock+0x594>)
    19a0:	9a02      	ldr	r2, [sp, #8]
    19a2:	4613      	mov	r3, r2
    19a4:	009b      	lsls	r3, r3, #2
    19a6:	4413      	add	r3, r2
    19a8:	009b      	lsls	r3, r3, #2
    19aa:	440b      	add	r3, r1
    19ac:	330c      	adds	r3, #12
    19ae:	6819      	ldr	r1, [r3, #0]
    19b0:	9a03      	ldr	r2, [sp, #12]
    19b2:	4613      	mov	r3, r2
    19b4:	009b      	lsls	r3, r3, #2
    19b6:	4413      	add	r3, r2
    19b8:	00db      	lsls	r3, r3, #3
    19ba:	3340      	adds	r3, #64	; 0x40
    19bc:	9a01      	ldr	r2, [sp, #4]
    19be:	4413      	add	r3, r2
    19c0:	4618      	mov	r0, r3
    19c2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    19c4:	9b03      	ldr	r3, [sp, #12]
    19c6:	3301      	adds	r3, #1
    19c8:	9303      	str	r3, [sp, #12]
    19ca:	9b01      	ldr	r3, [sp, #4]
    19cc:	7a9b      	ldrb	r3, [r3, #10]
    19ce:	461a      	mov	r2, r3
    19d0:	9b03      	ldr	r3, [sp, #12]
    19d2:	4293      	cmp	r3, r2
    19d4:	d3cf      	bcc.n	1976 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    19d6:	2300      	movs	r3, #0
    19d8:	9303      	str	r3, [sp, #12]
    19da:	e025      	b.n	1a28 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    19dc:	9a01      	ldr	r2, [sp, #4]
    19de:	9b03      	ldr	r3, [sp, #12]
    19e0:	3324      	adds	r3, #36	; 0x24
    19e2:	011b      	lsls	r3, r3, #4
    19e4:	4413      	add	r3, r2
    19e6:	3304      	adds	r3, #4
    19e8:	681a      	ldr	r2, [r3, #0]
    19ea:	492f      	ldr	r1, [pc, #188]	; (1aa8 <Clock_Ip_InitClock+0x584>)
    19ec:	4613      	mov	r3, r2
    19ee:	00db      	lsls	r3, r3, #3
    19f0:	4413      	add	r3, r2
    19f2:	440b      	add	r3, r1
    19f4:	3301      	adds	r3, #1
    19f6:	781b      	ldrb	r3, [r3, #0]
    19f8:	461a      	mov	r2, r3
    19fa:	4b34      	ldr	r3, [pc, #208]	; (1acc <Clock_Ip_InitClock+0x5a8>)
    19fc:	5c9b      	ldrb	r3, [r3, r2]
    19fe:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1a00:	4933      	ldr	r1, [pc, #204]	; (1ad0 <Clock_Ip_InitClock+0x5ac>)
    1a02:	9a02      	ldr	r2, [sp, #8]
    1a04:	4613      	mov	r3, r2
    1a06:	005b      	lsls	r3, r3, #1
    1a08:	4413      	add	r3, r2
    1a0a:	009b      	lsls	r3, r3, #2
    1a0c:	440b      	add	r3, r1
    1a0e:	3304      	adds	r3, #4
    1a10:	681b      	ldr	r3, [r3, #0]
    1a12:	9a03      	ldr	r2, [sp, #12]
    1a14:	3224      	adds	r2, #36	; 0x24
    1a16:	0112      	lsls	r2, r2, #4
    1a18:	9901      	ldr	r1, [sp, #4]
    1a1a:	440a      	add	r2, r1
    1a1c:	3204      	adds	r2, #4
    1a1e:	4610      	mov	r0, r2
    1a20:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1a22:	9b03      	ldr	r3, [sp, #12]
    1a24:	3301      	adds	r3, #1
    1a26:	9303      	str	r3, [sp, #12]
    1a28:	9b01      	ldr	r3, [sp, #4]
    1a2a:	7b9b      	ldrb	r3, [r3, #14]
    1a2c:	461a      	mov	r2, r3
    1a2e:	9b03      	ldr	r3, [sp, #12]
    1a30:	4293      	cmp	r3, r2
    1a32:	d3d3      	bcc.n	19dc <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1a34:	4b27      	ldr	r3, [pc, #156]	; (1ad4 <Clock_Ip_InitClock+0x5b0>)
    1a36:	2200      	movs	r2, #0
    1a38:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1a3a:	4b26      	ldr	r3, [pc, #152]	; (1ad4 <Clock_Ip_InitClock+0x5b0>)
    1a3c:	2200      	movs	r2, #0
    1a3e:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1a40:	4b24      	ldr	r3, [pc, #144]	; (1ad4 <Clock_Ip_InitClock+0x5b0>)
    1a42:	2201      	movs	r2, #1
    1a44:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1a46:	4b23      	ldr	r3, [pc, #140]	; (1ad4 <Clock_Ip_InitClock+0x5b0>)
    1a48:	2200      	movs	r2, #0
    1a4a:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1a4c:	f000 fa9c 	bl	1f88 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1a50:	2300      	movs	r3, #0
    1a52:	9303      	str	r3, [sp, #12]
    1a54:	e04c      	b.n	1af0 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1a56:	9a01      	ldr	r2, [sp, #4]
    1a58:	9b03      	ldr	r3, [sp, #12]
    1a5a:	330d      	adds	r3, #13
    1a5c:	00db      	lsls	r3, r3, #3
    1a5e:	4413      	add	r3, r2
    1a60:	685b      	ldr	r3, [r3, #4]
    1a62:	4a1d      	ldr	r2, [pc, #116]	; (1ad8 <Clock_Ip_InitClock+0x5b4>)
    1a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1a68:	2b03      	cmp	r3, #3
    1a6a:	d03b      	beq.n	1ae4 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1a6c:	9b01      	ldr	r3, [sp, #4]
    1a6e:	9a03      	ldr	r2, [sp, #12]
    1a70:	320d      	adds	r2, #13
    1a72:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1a76:	490c      	ldr	r1, [pc, #48]	; (1aa8 <Clock_Ip_InitClock+0x584>)
    1a78:	4613      	mov	r3, r2
    1a7a:	00db      	lsls	r3, r3, #3
    1a7c:	4413      	add	r3, r2
    1a7e:	440b      	add	r3, r1
    1a80:	3301      	adds	r3, #1
    1a82:	781b      	ldrb	r3, [r3, #0]
    1a84:	461a      	mov	r2, r3
    1a86:	4b15      	ldr	r3, [pc, #84]	; (1adc <Clock_Ip_InitClock+0x5b8>)
    1a88:	5c9b      	ldrb	r3, [r3, r2]
    1a8a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1a8c:	4a14      	ldr	r2, [pc, #80]	; (1ae0 <Clock_Ip_InitClock+0x5bc>)
    1a8e:	9b02      	ldr	r3, [sp, #8]
    1a90:	00db      	lsls	r3, r3, #3
    1a92:	4413      	add	r3, r2
    1a94:	685b      	ldr	r3, [r3, #4]
    1a96:	9a03      	ldr	r2, [sp, #12]
    1a98:	320d      	adds	r2, #13
    1a9a:	00d2      	lsls	r2, r2, #3
    1a9c:	9901      	ldr	r1, [sp, #4]
    1a9e:	440a      	add	r2, r1
    1aa0:	4610      	mov	r0, r2
    1aa2:	4798      	blx	r3
    1aa4:	e021      	b.n	1aea <Clock_Ip_InitClock+0x5c6>
    1aa6:	bf00      	nop
    1aa8:	0000766c 	.word	0x0000766c
    1aac:	000075dc 	.word	0x000075dc
    1ab0:	00007bb8 	.word	0x00007bb8
    1ab4:	0000762c 	.word	0x0000762c
    1ab8:	00007c78 	.word	0x00007c78
    1abc:	0000765c 	.word	0x0000765c
    1ac0:	00007c68 	.word	0x00007c68
    1ac4:	000075ec 	.word	0x000075ec
    1ac8:	00007bc0 	.word	0x00007bc0
    1acc:	0000761c 	.word	0x0000761c
    1ad0:	00007be8 	.word	0x00007be8
    1ad4:	1fff8b4c 	.word	0x1fff8b4c
    1ad8:	00007ab8 	.word	0x00007ab8
    1adc:	0000763c 	.word	0x0000763c
    1ae0:	00007ca4 	.word	0x00007ca4
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1ae4:	4b3a      	ldr	r3, [pc, #232]	; (1bd0 <Clock_Ip_InitClock+0x6ac>)
    1ae6:	2201      	movs	r2, #1
    1ae8:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1aea:	9b03      	ldr	r3, [sp, #12]
    1aec:	3301      	adds	r3, #1
    1aee:	9303      	str	r3, [sp, #12]
    1af0:	9b01      	ldr	r3, [sp, #4]
    1af2:	7adb      	ldrb	r3, [r3, #11]
    1af4:	461a      	mov	r2, r3
    1af6:	9b03      	ldr	r3, [sp, #12]
    1af8:	4293      	cmp	r3, r2
    1afa:	d3ac      	bcc.n	1a56 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1afc:	4b34      	ldr	r3, [pc, #208]	; (1bd0 <Clock_Ip_InitClock+0x6ac>)
    1afe:	781b      	ldrb	r3, [r3, #0]
    1b00:	f083 0301 	eor.w	r3, r3, #1
    1b04:	b2db      	uxtb	r3, r3
    1b06:	2b00      	cmp	r3, #0
    1b08:	d05e      	beq.n	1bc8 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1b0a:	2300      	movs	r3, #0
    1b0c:	9303      	str	r3, [sp, #12]
    1b0e:	e01f      	b.n	1b50 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1b10:	9a01      	ldr	r2, [sp, #4]
    1b12:	9b03      	ldr	r3, [sp, #12]
    1b14:	334e      	adds	r3, #78	; 0x4e
    1b16:	00db      	lsls	r3, r3, #3
    1b18:	4413      	add	r3, r2
    1b1a:	685a      	ldr	r2, [r3, #4]
    1b1c:	492d      	ldr	r1, [pc, #180]	; (1bd4 <Clock_Ip_InitClock+0x6b0>)
    1b1e:	4613      	mov	r3, r2
    1b20:	00db      	lsls	r3, r3, #3
    1b22:	4413      	add	r3, r2
    1b24:	440b      	add	r3, r1
    1b26:	3301      	adds	r3, #1
    1b28:	781b      	ldrb	r3, [r3, #0]
    1b2a:	461a      	mov	r2, r3
    1b2c:	4b2a      	ldr	r3, [pc, #168]	; (1bd8 <Clock_Ip_InitClock+0x6b4>)
    1b2e:	5c9b      	ldrb	r3, [r3, r2]
    1b30:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1b32:	4a2a      	ldr	r2, [pc, #168]	; (1bdc <Clock_Ip_InitClock+0x6b8>)
    1b34:	9b02      	ldr	r3, [sp, #8]
    1b36:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1b3a:	9a03      	ldr	r2, [sp, #12]
    1b3c:	324e      	adds	r2, #78	; 0x4e
    1b3e:	00d2      	lsls	r2, r2, #3
    1b40:	9901      	ldr	r1, [sp, #4]
    1b42:	440a      	add	r2, r1
    1b44:	3204      	adds	r2, #4
    1b46:	4610      	mov	r0, r2
    1b48:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1b4a:	9b03      	ldr	r3, [sp, #12]
    1b4c:	3301      	adds	r3, #1
    1b4e:	9303      	str	r3, [sp, #12]
    1b50:	9b01      	ldr	r3, [sp, #4]
    1b52:	7c1b      	ldrb	r3, [r3, #16]
    1b54:	461a      	mov	r2, r3
    1b56:	9b03      	ldr	r3, [sp, #12]
    1b58:	4293      	cmp	r3, r2
    1b5a:	d3d9      	bcc.n	1b10 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1b5c:	2300      	movs	r3, #0
    1b5e:	9303      	str	r3, [sp, #12]
    1b60:	e028      	b.n	1bb4 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1b62:	9901      	ldr	r1, [sp, #4]
    1b64:	9a03      	ldr	r2, [sp, #12]
    1b66:	4613      	mov	r3, r2
    1b68:	009b      	lsls	r3, r3, #2
    1b6a:	4413      	add	r3, r2
    1b6c:	009b      	lsls	r3, r3, #2
    1b6e:	440b      	add	r3, r1
    1b70:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1b74:	681a      	ldr	r2, [r3, #0]
    1b76:	4917      	ldr	r1, [pc, #92]	; (1bd4 <Clock_Ip_InitClock+0x6b0>)
    1b78:	4613      	mov	r3, r2
    1b7a:	00db      	lsls	r3, r3, #3
    1b7c:	4413      	add	r3, r2
    1b7e:	440b      	add	r3, r1
    1b80:	3301      	adds	r3, #1
    1b82:	781b      	ldrb	r3, [r3, #0]
    1b84:	461a      	mov	r2, r3
    1b86:	4b16      	ldr	r3, [pc, #88]	; (1be0 <Clock_Ip_InitClock+0x6bc>)
    1b88:	5c9b      	ldrb	r3, [r3, r2]
    1b8a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1b8c:	4a15      	ldr	r2, [pc, #84]	; (1be4 <Clock_Ip_InitClock+0x6c0>)
    1b8e:	9b02      	ldr	r3, [sp, #8]
    1b90:	011b      	lsls	r3, r3, #4
    1b92:	4413      	add	r3, r2
    1b94:	330c      	adds	r3, #12
    1b96:	6819      	ldr	r1, [r3, #0]
    1b98:	9a03      	ldr	r2, [sp, #12]
    1b9a:	4613      	mov	r3, r2
    1b9c:	009b      	lsls	r3, r3, #2
    1b9e:	4413      	add	r3, r2
    1ba0:	009b      	lsls	r3, r3, #2
    1ba2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1ba6:	9a01      	ldr	r2, [sp, #4]
    1ba8:	4413      	add	r3, r2
    1baa:	4618      	mov	r0, r3
    1bac:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1bae:	9b03      	ldr	r3, [sp, #12]
    1bb0:	3301      	adds	r3, #1
    1bb2:	9303      	str	r3, [sp, #12]
    1bb4:	9b01      	ldr	r3, [sp, #4]
    1bb6:	7c9b      	ldrb	r3, [r3, #18]
    1bb8:	461a      	mov	r2, r3
    1bba:	9b03      	ldr	r3, [sp, #12]
    1bbc:	4293      	cmp	r3, r2
    1bbe:	d3d0      	bcc.n	1b62 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1bc0:	2104      	movs	r1, #4
    1bc2:	9801      	ldr	r0, [sp, #4]
    1bc4:	f002 ff48 	bl	4a58 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1bc8:	bf00      	nop
    1bca:	b004      	add	sp, #16
    1bcc:	bd10      	pop	{r4, pc}
    1bce:	bf00      	nop
    1bd0:	1fff8b4c 	.word	0x1fff8b4c
    1bd4:	0000766c 	.word	0x0000766c
    1bd8:	0000760c 	.word	0x0000760c
    1bdc:	00007bf4 	.word	0x00007bf4
    1be0:	0000765c 	.word	0x0000765c
    1be4:	00007c68 	.word	0x00007c68

00001be8 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1be8:	b500      	push	{lr}
    1bea:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1bec:	2302      	movs	r3, #2
    1bee:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1bf0:	2300      	movs	r3, #0
    1bf2:	9304      	str	r3, [sp, #16]
    1bf4:	e02c      	b.n	1c50 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1bf6:	4a36      	ldr	r2, [pc, #216]	; (1cd0 <Clock_Ip_GetPllStatus+0xe8>)
    1bf8:	9b04      	ldr	r3, [sp, #16]
    1bfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1bfe:	4935      	ldr	r1, [pc, #212]	; (1cd4 <Clock_Ip_GetPllStatus+0xec>)
    1c00:	4613      	mov	r3, r2
    1c02:	00db      	lsls	r3, r3, #3
    1c04:	4413      	add	r3, r2
    1c06:	440b      	add	r3, r1
    1c08:	3301      	adds	r3, #1
    1c0a:	781b      	ldrb	r3, [r3, #0]
    1c0c:	461a      	mov	r2, r3
    1c0e:	4b32      	ldr	r3, [pc, #200]	; (1cd8 <Clock_Ip_GetPllStatus+0xf0>)
    1c10:	5c9b      	ldrb	r3, [r3, r2]
    1c12:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1c14:	4931      	ldr	r1, [pc, #196]	; (1cdc <Clock_Ip_GetPllStatus+0xf4>)
    1c16:	9a03      	ldr	r2, [sp, #12]
    1c18:	4613      	mov	r3, r2
    1c1a:	009b      	lsls	r3, r3, #2
    1c1c:	4413      	add	r3, r2
    1c1e:	009b      	lsls	r3, r3, #2
    1c20:	440b      	add	r3, r1
    1c22:	3308      	adds	r3, #8
    1c24:	681b      	ldr	r3, [r3, #0]
    1c26:	492a      	ldr	r1, [pc, #168]	; (1cd0 <Clock_Ip_GetPllStatus+0xe8>)
    1c28:	9a04      	ldr	r2, [sp, #16]
    1c2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1c2e:	4610      	mov	r0, r2
    1c30:	4798      	blx	r3
    1c32:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1c34:	9b02      	ldr	r3, [sp, #8]
    1c36:	2b01      	cmp	r3, #1
    1c38:	d102      	bne.n	1c40 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1c3a:	2301      	movs	r3, #1
    1c3c:	9305      	str	r3, [sp, #20]
            break;
    1c3e:	e00d      	b.n	1c5c <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1c40:	9b02      	ldr	r3, [sp, #8]
    1c42:	2b02      	cmp	r3, #2
    1c44:	d101      	bne.n	1c4a <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1c46:	2300      	movs	r3, #0
    1c48:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1c4a:	9b04      	ldr	r3, [sp, #16]
    1c4c:	3301      	adds	r3, #1
    1c4e:	9304      	str	r3, [sp, #16]
    1c50:	4b23      	ldr	r3, [pc, #140]	; (1ce0 <Clock_Ip_GetPllStatus+0xf8>)
    1c52:	789b      	ldrb	r3, [r3, #2]
    1c54:	461a      	mov	r2, r3
    1c56:	9b04      	ldr	r3, [sp, #16]
    1c58:	4293      	cmp	r3, r2
    1c5a:	d3cc      	bcc.n	1bf6 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1c5c:	9b05      	ldr	r3, [sp, #20]
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d130      	bne.n	1cc4 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1c62:	2300      	movs	r3, #0
    1c64:	9304      	str	r3, [sp, #16]
    1c66:	e027      	b.n	1cb8 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1c68:	4a1e      	ldr	r2, [pc, #120]	; (1ce4 <Clock_Ip_GetPllStatus+0xfc>)
    1c6a:	9b04      	ldr	r3, [sp, #16]
    1c6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1c70:	4918      	ldr	r1, [pc, #96]	; (1cd4 <Clock_Ip_GetPllStatus+0xec>)
    1c72:	4613      	mov	r3, r2
    1c74:	00db      	lsls	r3, r3, #3
    1c76:	4413      	add	r3, r2
    1c78:	440b      	add	r3, r1
    1c7a:	3301      	adds	r3, #1
    1c7c:	781b      	ldrb	r3, [r3, #0]
    1c7e:	461a      	mov	r2, r3
    1c80:	4b19      	ldr	r3, [pc, #100]	; (1ce8 <Clock_Ip_GetPllStatus+0x100>)
    1c82:	5c9b      	ldrb	r3, [r3, r2]
    1c84:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1c86:	4919      	ldr	r1, [pc, #100]	; (1cec <Clock_Ip_GetPllStatus+0x104>)
    1c88:	9a03      	ldr	r2, [sp, #12]
    1c8a:	4613      	mov	r3, r2
    1c8c:	005b      	lsls	r3, r3, #1
    1c8e:	4413      	add	r3, r2
    1c90:	009b      	lsls	r3, r3, #2
    1c92:	440b      	add	r3, r1
    1c94:	3308      	adds	r3, #8
    1c96:	681b      	ldr	r3, [r3, #0]
    1c98:	4912      	ldr	r1, [pc, #72]	; (1ce4 <Clock_Ip_GetPllStatus+0xfc>)
    1c9a:	9a04      	ldr	r2, [sp, #16]
    1c9c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1ca0:	4610      	mov	r0, r2
    1ca2:	4798      	blx	r3
    1ca4:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1ca6:	9b01      	ldr	r3, [sp, #4]
    1ca8:	2b01      	cmp	r3, #1
    1caa:	d102      	bne.n	1cb2 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1cac:	2301      	movs	r3, #1
    1cae:	9305      	str	r3, [sp, #20]
                break;
    1cb0:	e008      	b.n	1cc4 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1cb2:	9b04      	ldr	r3, [sp, #16]
    1cb4:	3301      	adds	r3, #1
    1cb6:	9304      	str	r3, [sp, #16]
    1cb8:	4b09      	ldr	r3, [pc, #36]	; (1ce0 <Clock_Ip_GetPllStatus+0xf8>)
    1cba:	78db      	ldrb	r3, [r3, #3]
    1cbc:	461a      	mov	r2, r3
    1cbe:	9b04      	ldr	r3, [sp, #16]
    1cc0:	4293      	cmp	r3, r2
    1cc2:	d3d1      	bcc.n	1c68 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1cc4:	9b05      	ldr	r3, [sp, #20]
}
    1cc6:	4618      	mov	r0, r3
    1cc8:	b007      	add	sp, #28
    1cca:	f85d fb04 	ldr.w	pc, [sp], #4
    1cce:	bf00      	nop
    1cd0:	00007b74 	.word	0x00007b74
    1cd4:	0000766c 	.word	0x0000766c
    1cd8:	0000762c 	.word	0x0000762c
    1cdc:	00007c78 	.word	0x00007c78
    1ce0:	1fff8b4c 	.word	0x1fff8b4c
    1ce4:	00007b78 	.word	0x00007b78
    1ce8:	0000761c 	.word	0x0000761c
    1cec:	00007be8 	.word	0x00007be8

00001cf0 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1cf0:	b500      	push	{lr}
    1cf2:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1cf4:	4b55      	ldr	r3, [pc, #340]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1cf6:	681b      	ldr	r3, [r3, #0]
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	f000 80a2 	beq.w	1e42 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1cfe:	2300      	movs	r3, #0
    1d00:	9301      	str	r3, [sp, #4]
    1d02:	e02c      	b.n	1d5e <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1d04:	4b51      	ldr	r3, [pc, #324]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1d06:	681a      	ldr	r2, [r3, #0]
    1d08:	9b01      	ldr	r3, [sp, #4]
    1d0a:	330d      	adds	r3, #13
    1d0c:	00db      	lsls	r3, r3, #3
    1d0e:	4413      	add	r3, r2
    1d10:	685b      	ldr	r3, [r3, #4]
    1d12:	4a4f      	ldr	r2, [pc, #316]	; (1e50 <Clock_Ip_DistributePll+0x160>)
    1d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d18:	2b03      	cmp	r3, #3
    1d1a:	d11d      	bne.n	1d58 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1d1c:	4b4b      	ldr	r3, [pc, #300]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1d1e:	681b      	ldr	r3, [r3, #0]
    1d20:	9a01      	ldr	r2, [sp, #4]
    1d22:	320d      	adds	r2, #13
    1d24:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1d28:	494a      	ldr	r1, [pc, #296]	; (1e54 <Clock_Ip_DistributePll+0x164>)
    1d2a:	4613      	mov	r3, r2
    1d2c:	00db      	lsls	r3, r3, #3
    1d2e:	4413      	add	r3, r2
    1d30:	440b      	add	r3, r1
    1d32:	3301      	adds	r3, #1
    1d34:	781b      	ldrb	r3, [r3, #0]
    1d36:	461a      	mov	r2, r3
    1d38:	4b47      	ldr	r3, [pc, #284]	; (1e58 <Clock_Ip_DistributePll+0x168>)
    1d3a:	5c9b      	ldrb	r3, [r3, r2]
    1d3c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1d3e:	4a47      	ldr	r2, [pc, #284]	; (1e5c <Clock_Ip_DistributePll+0x16c>)
    1d40:	9b00      	ldr	r3, [sp, #0]
    1d42:	00db      	lsls	r3, r3, #3
    1d44:	4413      	add	r3, r2
    1d46:	685b      	ldr	r3, [r3, #4]
    1d48:	4a40      	ldr	r2, [pc, #256]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1d4a:	6811      	ldr	r1, [r2, #0]
    1d4c:	9a01      	ldr	r2, [sp, #4]
    1d4e:	320d      	adds	r2, #13
    1d50:	00d2      	lsls	r2, r2, #3
    1d52:	440a      	add	r2, r1
    1d54:	4610      	mov	r0, r2
    1d56:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1d58:	9b01      	ldr	r3, [sp, #4]
    1d5a:	3301      	adds	r3, #1
    1d5c:	9301      	str	r3, [sp, #4]
    1d5e:	4b3b      	ldr	r3, [pc, #236]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1d60:	681b      	ldr	r3, [r3, #0]
    1d62:	7adb      	ldrb	r3, [r3, #11]
    1d64:	461a      	mov	r2, r3
    1d66:	9b01      	ldr	r3, [sp, #4]
    1d68:	4293      	cmp	r3, r2
    1d6a:	d3cb      	bcc.n	1d04 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1d6c:	4b3c      	ldr	r3, [pc, #240]	; (1e60 <Clock_Ip_DistributePll+0x170>)
    1d6e:	781b      	ldrb	r3, [r3, #0]
    1d70:	2b00      	cmp	r3, #0
    1d72:	d066      	beq.n	1e42 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1d74:	2300      	movs	r3, #0
    1d76:	9301      	str	r3, [sp, #4]
    1d78:	e021      	b.n	1dbe <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1d7a:	4b34      	ldr	r3, [pc, #208]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1d7c:	681a      	ldr	r2, [r3, #0]
    1d7e:	9b01      	ldr	r3, [sp, #4]
    1d80:	334e      	adds	r3, #78	; 0x4e
    1d82:	00db      	lsls	r3, r3, #3
    1d84:	4413      	add	r3, r2
    1d86:	685a      	ldr	r2, [r3, #4]
    1d88:	4932      	ldr	r1, [pc, #200]	; (1e54 <Clock_Ip_DistributePll+0x164>)
    1d8a:	4613      	mov	r3, r2
    1d8c:	00db      	lsls	r3, r3, #3
    1d8e:	4413      	add	r3, r2
    1d90:	440b      	add	r3, r1
    1d92:	3301      	adds	r3, #1
    1d94:	781b      	ldrb	r3, [r3, #0]
    1d96:	461a      	mov	r2, r3
    1d98:	4b32      	ldr	r3, [pc, #200]	; (1e64 <Clock_Ip_DistributePll+0x174>)
    1d9a:	5c9b      	ldrb	r3, [r3, r2]
    1d9c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    1d9e:	4a32      	ldr	r2, [pc, #200]	; (1e68 <Clock_Ip_DistributePll+0x178>)
    1da0:	9b00      	ldr	r3, [sp, #0]
    1da2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1da6:	4a29      	ldr	r2, [pc, #164]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1da8:	6811      	ldr	r1, [r2, #0]
    1daa:	9a01      	ldr	r2, [sp, #4]
    1dac:	324e      	adds	r2, #78	; 0x4e
    1dae:	00d2      	lsls	r2, r2, #3
    1db0:	440a      	add	r2, r1
    1db2:	3204      	adds	r2, #4
    1db4:	4610      	mov	r0, r2
    1db6:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1db8:	9b01      	ldr	r3, [sp, #4]
    1dba:	3301      	adds	r3, #1
    1dbc:	9301      	str	r3, [sp, #4]
    1dbe:	4b23      	ldr	r3, [pc, #140]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1dc0:	681b      	ldr	r3, [r3, #0]
    1dc2:	7c1b      	ldrb	r3, [r3, #16]
    1dc4:	461a      	mov	r2, r3
    1dc6:	9b01      	ldr	r3, [sp, #4]
    1dc8:	4293      	cmp	r3, r2
    1dca:	d3d6      	bcc.n	1d7a <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1dcc:	2300      	movs	r3, #0
    1dce:	9301      	str	r3, [sp, #4]
    1dd0:	e02a      	b.n	1e28 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1dd2:	4b1e      	ldr	r3, [pc, #120]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1dd4:	6819      	ldr	r1, [r3, #0]
    1dd6:	9a01      	ldr	r2, [sp, #4]
    1dd8:	4613      	mov	r3, r2
    1dda:	009b      	lsls	r3, r3, #2
    1ddc:	4413      	add	r3, r2
    1dde:	009b      	lsls	r3, r3, #2
    1de0:	440b      	add	r3, r1
    1de2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1de6:	681a      	ldr	r2, [r3, #0]
    1de8:	491a      	ldr	r1, [pc, #104]	; (1e54 <Clock_Ip_DistributePll+0x164>)
    1dea:	4613      	mov	r3, r2
    1dec:	00db      	lsls	r3, r3, #3
    1dee:	4413      	add	r3, r2
    1df0:	440b      	add	r3, r1
    1df2:	3301      	adds	r3, #1
    1df4:	781b      	ldrb	r3, [r3, #0]
    1df6:	461a      	mov	r2, r3
    1df8:	4b1c      	ldr	r3, [pc, #112]	; (1e6c <Clock_Ip_DistributePll+0x17c>)
    1dfa:	5c9b      	ldrb	r3, [r3, r2]
    1dfc:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1dfe:	4a1c      	ldr	r2, [pc, #112]	; (1e70 <Clock_Ip_DistributePll+0x180>)
    1e00:	9b00      	ldr	r3, [sp, #0]
    1e02:	011b      	lsls	r3, r3, #4
    1e04:	4413      	add	r3, r2
    1e06:	330c      	adds	r3, #12
    1e08:	6819      	ldr	r1, [r3, #0]
    1e0a:	4b10      	ldr	r3, [pc, #64]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1e0c:	6818      	ldr	r0, [r3, #0]
    1e0e:	9a01      	ldr	r2, [sp, #4]
    1e10:	4613      	mov	r3, r2
    1e12:	009b      	lsls	r3, r3, #2
    1e14:	4413      	add	r3, r2
    1e16:	009b      	lsls	r3, r3, #2
    1e18:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1e1c:	4403      	add	r3, r0
    1e1e:	4618      	mov	r0, r3
    1e20:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1e22:	9b01      	ldr	r3, [sp, #4]
    1e24:	3301      	adds	r3, #1
    1e26:	9301      	str	r3, [sp, #4]
    1e28:	4b08      	ldr	r3, [pc, #32]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1e2a:	681b      	ldr	r3, [r3, #0]
    1e2c:	7c9b      	ldrb	r3, [r3, #18]
    1e2e:	461a      	mov	r2, r3
    1e30:	9b01      	ldr	r3, [sp, #4]
    1e32:	4293      	cmp	r3, r2
    1e34:	d3cd      	bcc.n	1dd2 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1e36:	4b05      	ldr	r3, [pc, #20]	; (1e4c <Clock_Ip_DistributePll+0x15c>)
    1e38:	681b      	ldr	r3, [r3, #0]
    1e3a:	2104      	movs	r1, #4
    1e3c:	4618      	mov	r0, r3
    1e3e:	f002 fe0b 	bl	4a58 <Clock_Ip_Command>
        }
    }
}
    1e42:	bf00      	nop
    1e44:	b003      	add	sp, #12
    1e46:	f85d fb04 	ldr.w	pc, [sp], #4
    1e4a:	bf00      	nop
    1e4c:	1fff8b44 	.word	0x1fff8b44
    1e50:	00007ab8 	.word	0x00007ab8
    1e54:	0000766c 	.word	0x0000766c
    1e58:	0000763c 	.word	0x0000763c
    1e5c:	00007ca4 	.word	0x00007ca4
    1e60:	1fff8b4c 	.word	0x1fff8b4c
    1e64:	0000760c 	.word	0x0000760c
    1e68:	00007bf4 	.word	0x00007bf4
    1e6c:	0000765c 	.word	0x0000765c
    1e70:	00007c68 	.word	0x00007c68

00001e74 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    1e74:	b500      	push	{lr}
    1e76:	b085      	sub	sp, #20
    1e78:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1e7a:	490c      	ldr	r1, [pc, #48]	; (1eac <Clock_Ip_DisableClockMonitor+0x38>)
    1e7c:	9a01      	ldr	r2, [sp, #4]
    1e7e:	4613      	mov	r3, r2
    1e80:	00db      	lsls	r3, r3, #3
    1e82:	4413      	add	r3, r2
    1e84:	440b      	add	r3, r1
    1e86:	3301      	adds	r3, #1
    1e88:	781b      	ldrb	r3, [r3, #0]
    1e8a:	461a      	mov	r2, r3
    1e8c:	4b08      	ldr	r3, [pc, #32]	; (1eb0 <Clock_Ip_DisableClockMonitor+0x3c>)
    1e8e:	5c9b      	ldrb	r3, [r3, r2]
    1e90:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    1e92:	4a08      	ldr	r2, [pc, #32]	; (1eb4 <Clock_Ip_DisableClockMonitor+0x40>)
    1e94:	9b03      	ldr	r3, [sp, #12]
    1e96:	011b      	lsls	r3, r3, #4
    1e98:	4413      	add	r3, r2
    1e9a:	3308      	adds	r3, #8
    1e9c:	681b      	ldr	r3, [r3, #0]
    1e9e:	9801      	ldr	r0, [sp, #4]
    1ea0:	4798      	blx	r3
}
    1ea2:	bf00      	nop
    1ea4:	b005      	add	sp, #20
    1ea6:	f85d fb04 	ldr.w	pc, [sp], #4
    1eaa:	bf00      	nop
    1eac:	0000766c 	.word	0x0000766c
    1eb0:	0000765c 	.word	0x0000765c
    1eb4:	00007c68 	.word	0x00007c68

00001eb8 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    1eb8:	b082      	sub	sp, #8
    1eba:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    1ebc:	4a02      	ldr	r2, [pc, #8]	; (1ec8 <Clock_Ip_InstallNotificationsCallback+0x10>)
    1ebe:	9b01      	ldr	r3, [sp, #4]
    1ec0:	6013      	str	r3, [r2, #0]
}
    1ec2:	bf00      	nop
    1ec4:	b002      	add	sp, #8
    1ec6:	4770      	bx	lr
    1ec8:	1fff8b14 	.word	0x1fff8b14

00001ecc <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    1ecc:	b500      	push	{lr}
    1ece:	b085      	sub	sp, #20
    1ed0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1ed2:	490c      	ldr	r1, [pc, #48]	; (1f04 <Clock_Ip_DisableModuleClock+0x38>)
    1ed4:	9a01      	ldr	r2, [sp, #4]
    1ed6:	4613      	mov	r3, r2
    1ed8:	00db      	lsls	r3, r3, #3
    1eda:	4413      	add	r3, r2
    1edc:	440b      	add	r3, r1
    1ede:	3301      	adds	r3, #1
    1ee0:	781b      	ldrb	r3, [r3, #0]
    1ee2:	461a      	mov	r2, r3
    1ee4:	4b08      	ldr	r3, [pc, #32]	; (1f08 <Clock_Ip_DisableModuleClock+0x3c>)
    1ee6:	5c9b      	ldrb	r3, [r3, r2]
    1ee8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    1eea:	4a08      	ldr	r2, [pc, #32]	; (1f0c <Clock_Ip_DisableModuleClock+0x40>)
    1eec:	9b03      	ldr	r3, [sp, #12]
    1eee:	00db      	lsls	r3, r3, #3
    1ef0:	4413      	add	r3, r2
    1ef2:	685b      	ldr	r3, [r3, #4]
    1ef4:	2101      	movs	r1, #1
    1ef6:	9801      	ldr	r0, [sp, #4]
    1ef8:	4798      	blx	r3
}
    1efa:	bf00      	nop
    1efc:	b005      	add	sp, #20
    1efe:	f85d fb04 	ldr.w	pc, [sp], #4
    1f02:	bf00      	nop
    1f04:	0000766c 	.word	0x0000766c
    1f08:	0000760c 	.word	0x0000760c
    1f0c:	00007bf4 	.word	0x00007bf4

00001f10 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    1f10:	b500      	push	{lr}
    1f12:	b085      	sub	sp, #20
    1f14:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1f16:	490c      	ldr	r1, [pc, #48]	; (1f48 <Clock_Ip_EnableModuleClock+0x38>)
    1f18:	9a01      	ldr	r2, [sp, #4]
    1f1a:	4613      	mov	r3, r2
    1f1c:	00db      	lsls	r3, r3, #3
    1f1e:	4413      	add	r3, r2
    1f20:	440b      	add	r3, r1
    1f22:	3301      	adds	r3, #1
    1f24:	781b      	ldrb	r3, [r3, #0]
    1f26:	461a      	mov	r2, r3
    1f28:	4b08      	ldr	r3, [pc, #32]	; (1f4c <Clock_Ip_EnableModuleClock+0x3c>)
    1f2a:	5c9b      	ldrb	r3, [r3, r2]
    1f2c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    1f2e:	4a08      	ldr	r2, [pc, #32]	; (1f50 <Clock_Ip_EnableModuleClock+0x40>)
    1f30:	9b03      	ldr	r3, [sp, #12]
    1f32:	00db      	lsls	r3, r3, #3
    1f34:	4413      	add	r3, r2
    1f36:	685b      	ldr	r3, [r3, #4]
    1f38:	2100      	movs	r1, #0
    1f3a:	9801      	ldr	r0, [sp, #4]
    1f3c:	4798      	blx	r3
}
    1f3e:	bf00      	nop
    1f40:	b005      	add	sp, #20
    1f42:	f85d fb04 	ldr.w	pc, [sp], #4
    1f46:	bf00      	nop
    1f48:	0000766c 	.word	0x0000766c
    1f4c:	0000760c 	.word	0x0000760c
    1f50:	00007bf4 	.word	0x00007bf4

00001f54 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    1f54:	b500      	push	{lr}
    1f56:	b083      	sub	sp, #12
    1f58:	9001      	str	r0, [sp, #4]
    1f5a:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    1f5c:	4b08      	ldr	r3, [pc, #32]	; (1f80 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    1f5e:	2200      	movs	r2, #0
    1f60:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1f62:	4b08      	ldr	r3, [pc, #32]	; (1f84 <Clock_Ip_PowerModeChangeNotification+0x30>)
    1f64:	681b      	ldr	r3, [r3, #0]
    1f66:	2102      	movs	r1, #2
    1f68:	4618      	mov	r0, r3
    1f6a:	f002 fd75 	bl	4a58 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    1f6e:	9900      	ldr	r1, [sp, #0]
    1f70:	9801      	ldr	r0, [sp, #4]
    1f72:	f002 fc51 	bl	4818 <Clock_Ip_ClockPowerModeChangeNotification>
}
    1f76:	bf00      	nop
    1f78:	b003      	add	sp, #12
    1f7a:	f85d fb04 	ldr.w	pc, [sp], #4
    1f7e:	bf00      	nop
    1f80:	1fff8b10 	.word	0x1fff8b10
    1f84:	1fff8b44 	.word	0x1fff8b44

00001f88 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    1f88:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    1f8a:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    1f8e:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    1f90:	4b06      	ldr	r3, [pc, #24]	; (1fac <Clock_Ip_SetWaitStates+0x24>)
    1f92:	785b      	ldrb	r3, [r3, #1]
    1f94:	2b00      	cmp	r3, #0
    1f96:	d005      	beq.n	1fa4 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    1f98:	9b01      	ldr	r3, [sp, #4]
    1f9a:	3b01      	subs	r3, #1
    1f9c:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    1f9e:	9b01      	ldr	r3, [sp, #4]
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d1f9      	bne.n	1f98 <Clock_Ip_SetWaitStates+0x10>
    }
}
    1fa4:	bf00      	nop
    1fa6:	b002      	add	sp, #8
    1fa8:	4770      	bx	lr
    1faa:	bf00      	nop
    1fac:	1fff8b4c 	.word	0x1fff8b4c

00001fb0 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    1fb0:	b500      	push	{lr}
    1fb2:	b083      	sub	sp, #12
    1fb4:	9001      	str	r0, [sp, #4]
    1fb6:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    1fb8:	4b04      	ldr	r3, [pc, #16]	; (1fcc <Clock_Ip_ReportClockErrors+0x1c>)
    1fba:	681b      	ldr	r3, [r3, #0]
    1fbc:	9900      	ldr	r1, [sp, #0]
    1fbe:	9801      	ldr	r0, [sp, #4]
    1fc0:	4798      	blx	r3
}
    1fc2:	bf00      	nop
    1fc4:	b003      	add	sp, #12
    1fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    1fca:	bf00      	nop
    1fcc:	1fff8b14 	.word	0x1fff8b14

00001fd0 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    1fd0:	b500      	push	{lr}
    1fd2:	b085      	sub	sp, #20
    1fd4:	9003      	str	r0, [sp, #12]
    1fd6:	9102      	str	r1, [sp, #8]
    1fd8:	9201      	str	r2, [sp, #4]
    1fda:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    1fdc:	2000      	movs	r0, #0
    1fde:	f7fe ffd0 	bl	f82 <OsIf_GetCounter>
    1fe2:	4602      	mov	r2, r0
    1fe4:	9b03      	ldr	r3, [sp, #12]
    1fe6:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    1fe8:	9b02      	ldr	r3, [sp, #8]
    1fea:	2200      	movs	r2, #0
    1fec:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    1fee:	2100      	movs	r1, #0
    1ff0:	9800      	ldr	r0, [sp, #0]
    1ff2:	f7ff f812 	bl	101a <OsIf_MicrosToTicks>
    1ff6:	4602      	mov	r2, r0
    1ff8:	9b01      	ldr	r3, [sp, #4]
    1ffa:	601a      	str	r2, [r3, #0]
}
    1ffc:	bf00      	nop
    1ffe:	b005      	add	sp, #20
    2000:	f85d fb04 	ldr.w	pc, [sp], #4

00002004 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2004:	b500      	push	{lr}
    2006:	b087      	sub	sp, #28
    2008:	9003      	str	r0, [sp, #12]
    200a:	9102      	str	r1, [sp, #8]
    200c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    200e:	2300      	movs	r3, #0
    2010:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2014:	2100      	movs	r1, #0
    2016:	9803      	ldr	r0, [sp, #12]
    2018:	f7fe ffcc 	bl	fb4 <OsIf_GetElapsed>
    201c:	4602      	mov	r2, r0
    201e:	9b02      	ldr	r3, [sp, #8]
    2020:	681b      	ldr	r3, [r3, #0]
    2022:	441a      	add	r2, r3
    2024:	9b02      	ldr	r3, [sp, #8]
    2026:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2028:	9b02      	ldr	r3, [sp, #8]
    202a:	681b      	ldr	r3, [r3, #0]
    202c:	9a01      	ldr	r2, [sp, #4]
    202e:	429a      	cmp	r2, r3
    2030:	d802      	bhi.n	2038 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2032:	2301      	movs	r3, #1
    2034:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2038:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    203c:	4618      	mov	r0, r3
    203e:	b007      	add	sp, #28
    2040:	f85d fb04 	ldr.w	pc, [sp], #4

00002044 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2044:	b082      	sub	sp, #8
    2046:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2048:	bf00      	nop
    204a:	b002      	add	sp, #8
    204c:	4770      	bx	lr

0000204e <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    204e:	b500      	push	{lr}
    2050:	b083      	sub	sp, #12
    2052:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2054:	9b01      	ldr	r3, [sp, #4]
    2056:	2b00      	cmp	r3, #0
    2058:	d002      	beq.n	2060 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    205a:	9801      	ldr	r0, [sp, #4]
    205c:	f000 f8ad 	bl	21ba <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2060:	bf00      	nop
    2062:	b003      	add	sp, #12
    2064:	f85d fb04 	ldr.w	pc, [sp], #4

00002068 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2068:	b500      	push	{lr}
    206a:	b083      	sub	sp, #12
    206c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    206e:	9b01      	ldr	r3, [sp, #4]
    2070:	2b00      	cmp	r3, #0
    2072:	d002      	beq.n	207a <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2074:	9801      	ldr	r0, [sp, #4]
    2076:	f000 f8cd 	bl	2214 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    207a:	bf00      	nop
    207c:	b003      	add	sp, #12
    207e:	f85d fb04 	ldr.w	pc, [sp], #4

00002082 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2082:	b500      	push	{lr}
    2084:	b083      	sub	sp, #12
    2086:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2088:	9b01      	ldr	r3, [sp, #4]
    208a:	2b00      	cmp	r3, #0
    208c:	d002      	beq.n	2094 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    208e:	9801      	ldr	r0, [sp, #4]
    2090:	f000 f8ee 	bl	2270 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2094:	bf00      	nop
    2096:	b003      	add	sp, #12
    2098:	f85d fb04 	ldr.w	pc, [sp], #4

0000209c <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    209c:	b500      	push	{lr}
    209e:	b083      	sub	sp, #12
    20a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    20a2:	9b01      	ldr	r3, [sp, #4]
    20a4:	2b00      	cmp	r3, #0
    20a6:	d002      	beq.n	20ae <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    20a8:	9801      	ldr	r0, [sp, #4]
    20aa:	f000 f8f9 	bl	22a0 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    20ae:	bf00      	nop
    20b0:	b003      	add	sp, #12
    20b2:	f85d fb04 	ldr.w	pc, [sp], #4

000020b6 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    20b6:	b500      	push	{lr}
    20b8:	b083      	sub	sp, #12
    20ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    20bc:	9b01      	ldr	r3, [sp, #4]
    20be:	2b00      	cmp	r3, #0
    20c0:	d002      	beq.n	20c8 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    20c2:	9801      	ldr	r0, [sp, #4]
    20c4:	f000 f904 	bl	22d0 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    20c8:	bf00      	nop
    20ca:	b003      	add	sp, #12
    20cc:	f85d fb04 	ldr.w	pc, [sp], #4

000020d0 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    20d0:	b500      	push	{lr}
    20d2:	b083      	sub	sp, #12
    20d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    20d6:	9b01      	ldr	r3, [sp, #4]
    20d8:	2b00      	cmp	r3, #0
    20da:	d002      	beq.n	20e2 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    20dc:	9801      	ldr	r0, [sp, #4]
    20de:	f000 f90f 	bl	2300 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    20e2:	bf00      	nop
    20e4:	b003      	add	sp, #12
    20e6:	f85d fb04 	ldr.w	pc, [sp], #4

000020ea <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    20ea:	b500      	push	{lr}
    20ec:	b083      	sub	sp, #12
    20ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    20f0:	9b01      	ldr	r3, [sp, #4]
    20f2:	2b00      	cmp	r3, #0
    20f4:	d002      	beq.n	20fc <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    20f6:	9801      	ldr	r0, [sp, #4]
    20f8:	f000 f91a 	bl	2330 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    20fc:	bf00      	nop
    20fe:	b003      	add	sp, #12
    2100:	f85d fb04 	ldr.w	pc, [sp], #4

00002104 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2104:	b500      	push	{lr}
    2106:	b083      	sub	sp, #12
    2108:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    210a:	9b01      	ldr	r3, [sp, #4]
    210c:	2b00      	cmp	r3, #0
    210e:	d002      	beq.n	2116 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2110:	9801      	ldr	r0, [sp, #4]
    2112:	f000 f925 	bl	2360 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2116:	bf00      	nop
    2118:	b003      	add	sp, #12
    211a:	f85d fb04 	ldr.w	pc, [sp], #4

0000211e <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    211e:	b500      	push	{lr}
    2120:	b083      	sub	sp, #12
    2122:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2124:	9b01      	ldr	r3, [sp, #4]
    2126:	2b00      	cmp	r3, #0
    2128:	d002      	beq.n	2130 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    212a:	9801      	ldr	r0, [sp, #4]
    212c:	f000 f930 	bl	2390 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2130:	bf00      	nop
    2132:	b003      	add	sp, #12
    2134:	f85d fb04 	ldr.w	pc, [sp], #4

00002138 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2138:	b500      	push	{lr}
    213a:	b083      	sub	sp, #12
    213c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    213e:	9b01      	ldr	r3, [sp, #4]
    2140:	2b00      	cmp	r3, #0
    2142:	d002      	beq.n	214a <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2144:	9801      	ldr	r0, [sp, #4]
    2146:	f000 f93b 	bl	23c0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    214a:	bf00      	nop
    214c:	b003      	add	sp, #12
    214e:	f85d fb04 	ldr.w	pc, [sp], #4

00002152 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2152:	b500      	push	{lr}
    2154:	b083      	sub	sp, #12
    2156:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2158:	9b01      	ldr	r3, [sp, #4]
    215a:	2b00      	cmp	r3, #0
    215c:	d002      	beq.n	2164 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    215e:	9801      	ldr	r0, [sp, #4]
    2160:	f000 f946 	bl	23f0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2164:	bf00      	nop
    2166:	b003      	add	sp, #12
    2168:	f85d fb04 	ldr.w	pc, [sp], #4

0000216c <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    216c:	b500      	push	{lr}
    216e:	b083      	sub	sp, #12
    2170:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2172:	9b01      	ldr	r3, [sp, #4]
    2174:	2b00      	cmp	r3, #0
    2176:	d002      	beq.n	217e <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2178:	9801      	ldr	r0, [sp, #4]
    217a:	f000 f951 	bl	2420 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    217e:	bf00      	nop
    2180:	b003      	add	sp, #12
    2182:	f85d fb04 	ldr.w	pc, [sp], #4

00002186 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2186:	b500      	push	{lr}
    2188:	b083      	sub	sp, #12
    218a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    218c:	9b01      	ldr	r3, [sp, #4]
    218e:	2b00      	cmp	r3, #0
    2190:	d002      	beq.n	2198 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2192:	9801      	ldr	r0, [sp, #4]
    2194:	f000 f95e 	bl	2454 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2198:	bf00      	nop
    219a:	b003      	add	sp, #12
    219c:	f85d fb04 	ldr.w	pc, [sp], #4

000021a0 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    21a0:	b500      	push	{lr}
    21a2:	b083      	sub	sp, #12
    21a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21a6:	9b01      	ldr	r3, [sp, #4]
    21a8:	2b00      	cmp	r3, #0
    21aa:	d002      	beq.n	21b2 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    21ac:	9801      	ldr	r0, [sp, #4]
    21ae:	f000 f98b 	bl	24c8 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21b2:	bf00      	nop
    21b4:	b003      	add	sp, #12
    21b6:	f85d fb04 	ldr.w	pc, [sp], #4

000021ba <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    21ba:	b086      	sub	sp, #24
    21bc:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    21be:	9b01      	ldr	r3, [sp, #4]
    21c0:	681a      	ldr	r2, [r3, #0]
    21c2:	4911      	ldr	r1, [pc, #68]	; (2208 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    21c4:	4613      	mov	r3, r2
    21c6:	00db      	lsls	r3, r3, #3
    21c8:	4413      	add	r3, r2
    21ca:	440b      	add	r3, r1
    21cc:	781b      	ldrb	r3, [r3, #0]
    21ce:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    21d0:	9b01      	ldr	r3, [sp, #4]
    21d2:	685b      	ldr	r3, [r3, #4]
    21d4:	4a0d      	ldr	r2, [pc, #52]	; (220c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    21d6:	5cd3      	ldrb	r3, [r2, r3]
    21d8:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    21da:	4a0d      	ldr	r2, [pc, #52]	; (2210 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    21dc:	9b05      	ldr	r3, [sp, #20]
    21de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    21e2:	681b      	ldr	r3, [r3, #0]
    21e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    21e6:	9b03      	ldr	r3, [sp, #12]
    21e8:	f023 0307 	bic.w	r3, r3, #7
    21ec:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    21ee:	9a03      	ldr	r2, [sp, #12]
    21f0:	9b04      	ldr	r3, [sp, #16]
    21f2:	4313      	orrs	r3, r2
    21f4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    21f6:	4a06      	ldr	r2, [pc, #24]	; (2210 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    21f8:	9b05      	ldr	r3, [sp, #20]
    21fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    21fe:	9a03      	ldr	r2, [sp, #12]
    2200:	601a      	str	r2, [r3, #0]
}
    2202:	bf00      	nop
    2204:	b006      	add	sp, #24
    2206:	4770      	bx	lr
    2208:	0000766c 	.word	0x0000766c
    220c:	00007a64 	.word	0x00007a64
    2210:	00007aa8 	.word	0x00007aa8

00002214 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2214:	b086      	sub	sp, #24
    2216:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2218:	9b01      	ldr	r3, [sp, #4]
    221a:	681a      	ldr	r2, [r3, #0]
    221c:	4911      	ldr	r1, [pc, #68]	; (2264 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    221e:	4613      	mov	r3, r2
    2220:	00db      	lsls	r3, r3, #3
    2222:	4413      	add	r3, r2
    2224:	440b      	add	r3, r1
    2226:	781b      	ldrb	r3, [r3, #0]
    2228:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    222a:	9b01      	ldr	r3, [sp, #4]
    222c:	685b      	ldr	r3, [r3, #4]
    222e:	4a0e      	ldr	r2, [pc, #56]	; (2268 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2230:	5cd3      	ldrb	r3, [r2, r3]
    2232:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2234:	4a0d      	ldr	r2, [pc, #52]	; (226c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2236:	9b05      	ldr	r3, [sp, #20]
    2238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    223c:	681b      	ldr	r3, [r3, #0]
    223e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2240:	9b03      	ldr	r3, [sp, #12]
    2242:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2246:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2248:	9b04      	ldr	r3, [sp, #16]
    224a:	021b      	lsls	r3, r3, #8
    224c:	9a03      	ldr	r2, [sp, #12]
    224e:	4313      	orrs	r3, r2
    2250:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2252:	4a06      	ldr	r2, [pc, #24]	; (226c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2254:	9b05      	ldr	r3, [sp, #20]
    2256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    225a:	9a03      	ldr	r2, [sp, #12]
    225c:	601a      	str	r2, [r3, #0]
}
    225e:	bf00      	nop
    2260:	b006      	add	sp, #24
    2262:	4770      	bx	lr
    2264:	0000766c 	.word	0x0000766c
    2268:	00007a64 	.word	0x00007a64
    226c:	00007aa8 	.word	0x00007aa8

00002270 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2270:	b084      	sub	sp, #16
    2272:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2274:	4b09      	ldr	r3, [pc, #36]	; (229c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2276:	695b      	ldr	r3, [r3, #20]
    2278:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    227a:	9b03      	ldr	r3, [sp, #12]
    227c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2280:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2282:	9b01      	ldr	r3, [sp, #4]
    2284:	685b      	ldr	r3, [r3, #4]
    2286:	3b01      	subs	r3, #1
    2288:	041b      	lsls	r3, r3, #16
    228a:	9a03      	ldr	r2, [sp, #12]
    228c:	4313      	orrs	r3, r2
    228e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2290:	4a02      	ldr	r2, [pc, #8]	; (229c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2292:	9b03      	ldr	r3, [sp, #12]
    2294:	6153      	str	r3, [r2, #20]
}
    2296:	bf00      	nop
    2298:	b004      	add	sp, #16
    229a:	4770      	bx	lr
    229c:	40064000 	.word	0x40064000

000022a0 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    22a0:	b084      	sub	sp, #16
    22a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    22a4:	4b09      	ldr	r3, [pc, #36]	; (22cc <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    22a6:	695b      	ldr	r3, [r3, #20]
    22a8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    22aa:	9b03      	ldr	r3, [sp, #12]
    22ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    22b0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    22b2:	9b01      	ldr	r3, [sp, #4]
    22b4:	685b      	ldr	r3, [r3, #4]
    22b6:	3b01      	subs	r3, #1
    22b8:	011b      	lsls	r3, r3, #4
    22ba:	9a03      	ldr	r2, [sp, #12]
    22bc:	4313      	orrs	r3, r2
    22be:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    22c0:	4a02      	ldr	r2, [pc, #8]	; (22cc <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    22c2:	9b03      	ldr	r3, [sp, #12]
    22c4:	6153      	str	r3, [r2, #20]
}
    22c6:	bf00      	nop
    22c8:	b004      	add	sp, #16
    22ca:	4770      	bx	lr
    22cc:	40064000 	.word	0x40064000

000022d0 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    22d0:	b084      	sub	sp, #16
    22d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    22d4:	4b09      	ldr	r3, [pc, #36]	; (22fc <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    22d6:	695b      	ldr	r3, [r3, #20]
    22d8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    22da:	9b03      	ldr	r3, [sp, #12]
    22dc:	f023 030f 	bic.w	r3, r3, #15
    22e0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    22e2:	9b01      	ldr	r3, [sp, #4]
    22e4:	685b      	ldr	r3, [r3, #4]
    22e6:	3b01      	subs	r3, #1
    22e8:	9a03      	ldr	r2, [sp, #12]
    22ea:	4313      	orrs	r3, r2
    22ec:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    22ee:	4a03      	ldr	r2, [pc, #12]	; (22fc <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    22f0:	9b03      	ldr	r3, [sp, #12]
    22f2:	6153      	str	r3, [r2, #20]
}
    22f4:	bf00      	nop
    22f6:	b004      	add	sp, #16
    22f8:	4770      	bx	lr
    22fa:	bf00      	nop
    22fc:	40064000 	.word	0x40064000

00002300 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2300:	b084      	sub	sp, #16
    2302:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2304:	4b09      	ldr	r3, [pc, #36]	; (232c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2306:	699b      	ldr	r3, [r3, #24]
    2308:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    230a:	9b03      	ldr	r3, [sp, #12]
    230c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2310:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2312:	9b01      	ldr	r3, [sp, #4]
    2314:	685b      	ldr	r3, [r3, #4]
    2316:	3b01      	subs	r3, #1
    2318:	041b      	lsls	r3, r3, #16
    231a:	9a03      	ldr	r2, [sp, #12]
    231c:	4313      	orrs	r3, r2
    231e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2320:	4a02      	ldr	r2, [pc, #8]	; (232c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2322:	9b03      	ldr	r3, [sp, #12]
    2324:	6193      	str	r3, [r2, #24]
}
    2326:	bf00      	nop
    2328:	b004      	add	sp, #16
    232a:	4770      	bx	lr
    232c:	40064000 	.word	0x40064000

00002330 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2330:	b084      	sub	sp, #16
    2332:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2334:	4b09      	ldr	r3, [pc, #36]	; (235c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2336:	699b      	ldr	r3, [r3, #24]
    2338:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    233a:	9b03      	ldr	r3, [sp, #12]
    233c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2340:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2342:	9b01      	ldr	r3, [sp, #4]
    2344:	685b      	ldr	r3, [r3, #4]
    2346:	3b01      	subs	r3, #1
    2348:	011b      	lsls	r3, r3, #4
    234a:	9a03      	ldr	r2, [sp, #12]
    234c:	4313      	orrs	r3, r2
    234e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2350:	4a02      	ldr	r2, [pc, #8]	; (235c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2352:	9b03      	ldr	r3, [sp, #12]
    2354:	6193      	str	r3, [r2, #24]
}
    2356:	bf00      	nop
    2358:	b004      	add	sp, #16
    235a:	4770      	bx	lr
    235c:	40064000 	.word	0x40064000

00002360 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2360:	b084      	sub	sp, #16
    2362:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2364:	4b09      	ldr	r3, [pc, #36]	; (238c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2366:	699b      	ldr	r3, [r3, #24]
    2368:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    236a:	9b03      	ldr	r3, [sp, #12]
    236c:	f023 030f 	bic.w	r3, r3, #15
    2370:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2372:	9b01      	ldr	r3, [sp, #4]
    2374:	685b      	ldr	r3, [r3, #4]
    2376:	3b01      	subs	r3, #1
    2378:	9a03      	ldr	r2, [sp, #12]
    237a:	4313      	orrs	r3, r2
    237c:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    237e:	4a03      	ldr	r2, [pc, #12]	; (238c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2380:	9b03      	ldr	r3, [sp, #12]
    2382:	6193      	str	r3, [r2, #24]
}
    2384:	bf00      	nop
    2386:	b004      	add	sp, #16
    2388:	4770      	bx	lr
    238a:	bf00      	nop
    238c:	40064000 	.word	0x40064000

00002390 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2390:	b084      	sub	sp, #16
    2392:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2394:	4b09      	ldr	r3, [pc, #36]	; (23bc <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2396:	69db      	ldr	r3, [r3, #28]
    2398:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    239a:	9b03      	ldr	r3, [sp, #12]
    239c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    23a0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    23a2:	9b01      	ldr	r3, [sp, #4]
    23a4:	685b      	ldr	r3, [r3, #4]
    23a6:	3b01      	subs	r3, #1
    23a8:	041b      	lsls	r3, r3, #16
    23aa:	9a03      	ldr	r2, [sp, #12]
    23ac:	4313      	orrs	r3, r2
    23ae:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    23b0:	4a02      	ldr	r2, [pc, #8]	; (23bc <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    23b2:	9b03      	ldr	r3, [sp, #12]
    23b4:	61d3      	str	r3, [r2, #28]
}
    23b6:	bf00      	nop
    23b8:	b004      	add	sp, #16
    23ba:	4770      	bx	lr
    23bc:	40064000 	.word	0x40064000

000023c0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    23c0:	b084      	sub	sp, #16
    23c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    23c4:	4b09      	ldr	r3, [pc, #36]	; (23ec <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    23c6:	69db      	ldr	r3, [r3, #28]
    23c8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    23ca:	9b03      	ldr	r3, [sp, #12]
    23cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    23d0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    23d2:	9b01      	ldr	r3, [sp, #4]
    23d4:	685b      	ldr	r3, [r3, #4]
    23d6:	3b01      	subs	r3, #1
    23d8:	011b      	lsls	r3, r3, #4
    23da:	9a03      	ldr	r2, [sp, #12]
    23dc:	4313      	orrs	r3, r2
    23de:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    23e0:	4a02      	ldr	r2, [pc, #8]	; (23ec <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    23e2:	9b03      	ldr	r3, [sp, #12]
    23e4:	61d3      	str	r3, [r2, #28]
}
    23e6:	bf00      	nop
    23e8:	b004      	add	sp, #16
    23ea:	4770      	bx	lr
    23ec:	40064000 	.word	0x40064000

000023f0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    23f0:	b084      	sub	sp, #16
    23f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    23f4:	4b09      	ldr	r3, [pc, #36]	; (241c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    23f6:	69db      	ldr	r3, [r3, #28]
    23f8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    23fa:	9b03      	ldr	r3, [sp, #12]
    23fc:	f023 030f 	bic.w	r3, r3, #15
    2400:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2402:	9b01      	ldr	r3, [sp, #4]
    2404:	685b      	ldr	r3, [r3, #4]
    2406:	3b01      	subs	r3, #1
    2408:	9a03      	ldr	r2, [sp, #12]
    240a:	4313      	orrs	r3, r2
    240c:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    240e:	4a03      	ldr	r2, [pc, #12]	; (241c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2410:	9b03      	ldr	r3, [sp, #12]
    2412:	61d3      	str	r3, [r2, #28]
}
    2414:	bf00      	nop
    2416:	b004      	add	sp, #16
    2418:	4770      	bx	lr
    241a:	bf00      	nop
    241c:	40064000 	.word	0x40064000

00002420 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2420:	b084      	sub	sp, #16
    2422:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2424:	4b0a      	ldr	r3, [pc, #40]	; (2450 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2426:	685b      	ldr	r3, [r3, #4]
    2428:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    242a:	9b03      	ldr	r3, [sp, #12]
    242c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2430:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2432:	9b01      	ldr	r3, [sp, #4]
    2434:	685b      	ldr	r3, [r3, #4]
    2436:	3b01      	subs	r3, #1
    2438:	021b      	lsls	r3, r3, #8
    243a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    243e:	9a03      	ldr	r2, [sp, #12]
    2440:	4313      	orrs	r3, r2
    2442:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2444:	4a02      	ldr	r2, [pc, #8]	; (2450 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    2446:	9b03      	ldr	r3, [sp, #12]
    2448:	6053      	str	r3, [r2, #4]
}
    244a:	bf00      	nop
    244c:	b004      	add	sp, #16
    244e:	4770      	bx	lr
    2450:	40048000 	.word	0x40048000

00002454 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2454:	b084      	sub	sp, #16
    2456:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    2458:	4919      	ldr	r1, [pc, #100]	; (24c0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    245a:	9b01      	ldr	r3, [sp, #4]
    245c:	681a      	ldr	r2, [r3, #0]
    245e:	4819      	ldr	r0, [pc, #100]	; (24c4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2460:	4613      	mov	r3, r2
    2462:	00db      	lsls	r3, r3, #3
    2464:	4413      	add	r3, r2
    2466:	4403      	add	r3, r0
    2468:	3305      	adds	r3, #5
    246a:	781b      	ldrb	r3, [r3, #0]
    246c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2470:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2472:	9b03      	ldr	r3, [sp, #12]
    2474:	f023 030f 	bic.w	r3, r3, #15
    2478:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    247a:	9b01      	ldr	r3, [sp, #4]
    247c:	685b      	ldr	r3, [r3, #4]
    247e:	3b01      	subs	r3, #1
    2480:	f003 0307 	and.w	r3, r3, #7
    2484:	9a03      	ldr	r2, [sp, #12]
    2486:	4313      	orrs	r3, r2
    2488:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    248a:	9b01      	ldr	r3, [sp, #4]
    248c:	7a1b      	ldrb	r3, [r3, #8]
    248e:	3b01      	subs	r3, #1
    2490:	00db      	lsls	r3, r3, #3
    2492:	f003 0308 	and.w	r3, r3, #8
    2496:	9a03      	ldr	r2, [sp, #12]
    2498:	4313      	orrs	r3, r2
    249a:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    249c:	4908      	ldr	r1, [pc, #32]	; (24c0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    249e:	9b01      	ldr	r3, [sp, #4]
    24a0:	681a      	ldr	r2, [r3, #0]
    24a2:	4808      	ldr	r0, [pc, #32]	; (24c4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    24a4:	4613      	mov	r3, r2
    24a6:	00db      	lsls	r3, r3, #3
    24a8:	4413      	add	r3, r2
    24aa:	4403      	add	r3, r0
    24ac:	3305      	adds	r3, #5
    24ae:	781b      	ldrb	r3, [r3, #0]
    24b0:	461a      	mov	r2, r3
    24b2:	9b03      	ldr	r3, [sp, #12]
    24b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    24b8:	bf00      	nop
    24ba:	b004      	add	sp, #16
    24bc:	4770      	bx	lr
    24be:	bf00      	nop
    24c0:	40065000 	.word	0x40065000
    24c4:	0000766c 	.word	0x0000766c

000024c8 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24c8:	b084      	sub	sp, #16
    24ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    24cc:	4b10      	ldr	r3, [pc, #64]	; (2510 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    24ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    24d0:	4a0f      	ldr	r2, [pc, #60]	; (2510 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    24d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    24d6:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    24d8:	4b0d      	ldr	r3, [pc, #52]	; (2510 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    24da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    24dc:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    24de:	9b03      	ldr	r3, [sp, #12]
    24e0:	f023 030f 	bic.w	r3, r3, #15
    24e4:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    24e6:	9b01      	ldr	r3, [sp, #4]
    24e8:	685b      	ldr	r3, [r3, #4]
    24ea:	3b01      	subs	r3, #1
    24ec:	005b      	lsls	r3, r3, #1
    24ee:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    24f2:	9b01      	ldr	r3, [sp, #4]
    24f4:	7a1b      	ldrb	r3, [r3, #8]
    24f6:	3b01      	subs	r3, #1
    24f8:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    24fc:	4313      	orrs	r3, r2
    24fe:	9a03      	ldr	r2, [sp, #12]
    2500:	4313      	orrs	r3, r2
    2502:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2504:	4a02      	ldr	r2, [pc, #8]	; (2510 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2506:	9b03      	ldr	r3, [sp, #12]
    2508:	6693      	str	r3, [r2, #104]	; 0x68
}
    250a:	bf00      	nop
    250c:	b004      	add	sp, #16
    250e:	4770      	bx	lr
    2510:	40048000 	.word	0x40048000

00002514 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2514:	b082      	sub	sp, #8
    2516:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2518:	bf00      	nop
    251a:	b002      	add	sp, #8
    251c:	4770      	bx	lr
	...

00002520 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2520:	b082      	sub	sp, #8
    2522:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2524:	bf00      	nop
    2526:	b002      	add	sp, #8
    2528:	4770      	bx	lr

0000252a <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    252a:	b082      	sub	sp, #8
    252c:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    252e:	bf00      	nop
    2530:	b002      	add	sp, #8
    2532:	4770      	bx	lr

00002534 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2534:	b500      	push	{lr}
    2536:	b083      	sub	sp, #12
    2538:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    253a:	9b01      	ldr	r3, [sp, #4]
    253c:	2b00      	cmp	r3, #0
    253e:	d002      	beq.n	2546 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2540:	9801      	ldr	r0, [sp, #4]
    2542:	f000 f86a 	bl	261a <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2546:	bf00      	nop
    2548:	b003      	add	sp, #12
    254a:	f85d fb04 	ldr.w	pc, [sp], #4

0000254e <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    254e:	b500      	push	{lr}
    2550:	b083      	sub	sp, #12
    2552:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2554:	9b01      	ldr	r3, [sp, #4]
    2556:	2b00      	cmp	r3, #0
    2558:	d002      	beq.n	2560 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    255a:	9801      	ldr	r0, [sp, #4]
    255c:	f000 f884 	bl	2668 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    2560:	bf00      	nop
    2562:	b003      	add	sp, #12
    2564:	f85d fb04 	ldr.w	pc, [sp], #4

00002568 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2568:	b500      	push	{lr}
    256a:	b089      	sub	sp, #36	; 0x24
    256c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    256e:	2300      	movs	r3, #0
    2570:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2574:	9b01      	ldr	r3, [sp, #4]
    2576:	2b00      	cmp	r3, #0
    2578:	d031      	beq.n	25de <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    257a:	4b1b      	ldr	r3, [pc, #108]	; (25e8 <Clock_Ip_CompleteSOSC+0x80>)
    257c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2580:	f003 0301 	and.w	r3, r3, #1
    2584:	2b00      	cmp	r3, #0
    2586:	d02a      	beq.n	25de <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2588:	aa03      	add	r2, sp, #12
    258a:	a904      	add	r1, sp, #16
    258c:	a805      	add	r0, sp, #20
    258e:	f24c 3350 	movw	r3, #50000	; 0xc350
    2592:	f7ff fd1d 	bl	1fd0 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    2596:	4b14      	ldr	r3, [pc, #80]	; (25e8 <Clock_Ip_CompleteSOSC+0x80>)
    2598:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    259c:	0e1b      	lsrs	r3, r3, #24
    259e:	f003 0301 	and.w	r3, r3, #1
    25a2:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    25a4:	9a03      	ldr	r2, [sp, #12]
    25a6:	a904      	add	r1, sp, #16
    25a8:	ab05      	add	r3, sp, #20
    25aa:	4618      	mov	r0, r3
    25ac:	f7ff fd2a 	bl	2004 <Clock_Ip_TimeoutExpired>
    25b0:	4603      	mov	r3, r0
    25b2:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    25b6:	9b06      	ldr	r3, [sp, #24]
    25b8:	2b00      	cmp	r3, #0
    25ba:	d106      	bne.n	25ca <Clock_Ip_CompleteSOSC+0x62>
    25bc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    25c0:	f083 0301 	eor.w	r3, r3, #1
    25c4:	b2db      	uxtb	r3, r3
    25c6:	2b00      	cmp	r3, #0
    25c8:	d1e5      	bne.n	2596 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    25ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    25ce:	2b00      	cmp	r3, #0
    25d0:	d005      	beq.n	25de <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    25d2:	9b01      	ldr	r3, [sp, #4]
    25d4:	681b      	ldr	r3, [r3, #0]
    25d6:	4619      	mov	r1, r3
    25d8:	2001      	movs	r0, #1
    25da:	f7ff fce9 	bl	1fb0 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    25de:	bf00      	nop
    25e0:	b009      	add	sp, #36	; 0x24
    25e2:	f85d fb04 	ldr.w	pc, [sp], #4
    25e6:	bf00      	nop
    25e8:	40064000 	.word	0x40064000

000025ec <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    25ec:	b500      	push	{lr}
    25ee:	b083      	sub	sp, #12
    25f0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    25f2:	9801      	ldr	r0, [sp, #4]
    25f4:	f000 f8c0 	bl	2778 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    25f8:	bf00      	nop
    25fa:	b003      	add	sp, #12
    25fc:	f85d fb04 	ldr.w	pc, [sp], #4

00002600 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2600:	b500      	push	{lr}
    2602:	b083      	sub	sp, #12
    2604:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2606:	9b01      	ldr	r3, [sp, #4]
    2608:	2b00      	cmp	r3, #0
    260a:	d002      	beq.n	2612 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    260c:	9801      	ldr	r0, [sp, #4]
    260e:	f000 f8c3 	bl	2798 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2612:	bf00      	nop
    2614:	b003      	add	sp, #12
    2616:	f85d fb04 	ldr.w	pc, [sp], #4

0000261a <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    261a:	b082      	sub	sp, #8
    261c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    261e:	4b11      	ldr	r3, [pc, #68]	; (2664 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2620:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2624:	4a0f      	ldr	r2, [pc, #60]	; (2664 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2626:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    262a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    262e:	4b0d      	ldr	r3, [pc, #52]	; (2664 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2630:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2634:	4a0b      	ldr	r2, [pc, #44]	; (2664 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    263a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    263e:	4b09      	ldr	r3, [pc, #36]	; (2664 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2640:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2644:	4a07      	ldr	r2, [pc, #28]	; (2664 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2646:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    264a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    264e:	4b05      	ldr	r3, [pc, #20]	; (2664 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2650:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2654:	4a03      	ldr	r2, [pc, #12]	; (2664 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2656:	f023 0301 	bic.w	r3, r3, #1
    265a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    265e:	bf00      	nop
    2660:	b002      	add	sp, #8
    2662:	4770      	bx	lr
    2664:	40064000 	.word	0x40064000

00002668 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2668:	b082      	sub	sp, #8
    266a:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    266c:	9b01      	ldr	r3, [sp, #4]
    266e:	891b      	ldrh	r3, [r3, #8]
    2670:	2b01      	cmp	r3, #1
    2672:	d174      	bne.n	275e <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2674:	9b01      	ldr	r3, [sp, #4]
    2676:	7bdb      	ldrb	r3, [r3, #15]
    2678:	2b00      	cmp	r3, #0
    267a:	d002      	beq.n	2682 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    267c:	2b01      	cmp	r3, #1
    267e:	d009      	beq.n	2694 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2680:	e011      	b.n	26a6 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2682:	4b39      	ldr	r3, [pc, #228]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2684:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2688:	4a37      	ldr	r2, [pc, #220]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    268a:	f023 0308 	bic.w	r3, r3, #8
    268e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2692:	e008      	b.n	26a6 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2694:	4b34      	ldr	r3, [pc, #208]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2696:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    269a:	4a33      	ldr	r2, [pc, #204]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    269c:	f043 0308 	orr.w	r3, r3, #8
    26a0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    26a4:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    26a6:	4b30      	ldr	r3, [pc, #192]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    26a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    26ac:	4a2e      	ldr	r2, [pc, #184]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    26ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    26b2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    26b6:	9b01      	ldr	r3, [sp, #4]
    26b8:	685b      	ldr	r3, [r3, #4]
    26ba:	4a2c      	ldr	r2, [pc, #176]	; (276c <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    26bc:	4293      	cmp	r3, r2
    26be:	d90d      	bls.n	26dc <Clock_Ip_SetSOSC_TrustedCall+0x74>
    26c0:	9b01      	ldr	r3, [sp, #4]
    26c2:	685b      	ldr	r3, [r3, #4]
    26c4:	4a2a      	ldr	r2, [pc, #168]	; (2770 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    26c6:	4293      	cmp	r3, r2
    26c8:	d208      	bcs.n	26dc <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    26ca:	4b27      	ldr	r3, [pc, #156]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    26cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    26d0:	4a25      	ldr	r2, [pc, #148]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    26d2:	f043 0320 	orr.w	r3, r3, #32
    26d6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    26da:	e007      	b.n	26ec <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    26dc:	4b22      	ldr	r3, [pc, #136]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    26de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    26e2:	4a21      	ldr	r2, [pc, #132]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    26e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    26e8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    26ec:	9b01      	ldr	r3, [sp, #4]
    26ee:	7b1b      	ldrb	r3, [r3, #12]
    26f0:	2b00      	cmp	r3, #0
    26f2:	d108      	bne.n	2706 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    26f4:	4b1c      	ldr	r3, [pc, #112]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    26f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    26fa:	4a1b      	ldr	r2, [pc, #108]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    26fc:	f043 0304 	orr.w	r3, r3, #4
    2700:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2704:	e007      	b.n	2716 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    2706:	4b18      	ldr	r3, [pc, #96]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2708:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    270c:	4a16      	ldr	r2, [pc, #88]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    270e:	f023 0304 	bic.w	r3, r3, #4
    2712:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    2716:	9b01      	ldr	r3, [sp, #4]
    2718:	7c1b      	ldrb	r3, [r3, #16]
    271a:	2b02      	cmp	r3, #2
    271c:	d011      	beq.n	2742 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    271e:	2b02      	cmp	r3, #2
    2720:	dc14      	bgt.n	274c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    2722:	2b00      	cmp	r3, #0
    2724:	d002      	beq.n	272c <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    2726:	2b01      	cmp	r3, #1
    2728:	d005      	beq.n	2736 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    272a:	e00f      	b.n	274c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    272c:	4b0e      	ldr	r3, [pc, #56]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    272e:	2201      	movs	r2, #1
    2730:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2734:	e014      	b.n	2760 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2736:	4b0c      	ldr	r3, [pc, #48]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2738:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    273c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2740:	e00e      	b.n	2760 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2742:	4b09      	ldr	r3, [pc, #36]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2744:	4a0b      	ldr	r2, [pc, #44]	; (2774 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    2746:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    274a:	e009      	b.n	2760 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    274c:	4b06      	ldr	r3, [pc, #24]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    274e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2752:	4a05      	ldr	r2, [pc, #20]	; (2768 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2754:	f043 0301 	orr.w	r3, r3, #1
    2758:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    275c:	e000      	b.n	2760 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    275e:	bf00      	nop
}
    2760:	bf00      	nop
    2762:	b002      	add	sp, #8
    2764:	4770      	bx	lr
    2766:	bf00      	nop
    2768:	40064000 	.word	0x40064000
    276c:	003d08ff 	.word	0x003d08ff
    2770:	007a1200 	.word	0x007a1200
    2774:	00030001 	.word	0x00030001

00002778 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    2778:	b082      	sub	sp, #8
    277a:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    277c:	4b05      	ldr	r3, [pc, #20]	; (2794 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    277e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2782:	4a04      	ldr	r2, [pc, #16]	; (2794 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2784:	f023 0301 	bic.w	r3, r3, #1
    2788:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    278c:	bf00      	nop
    278e:	b002      	add	sp, #8
    2790:	4770      	bx	lr
    2792:	bf00      	nop
    2794:	40064000 	.word	0x40064000

00002798 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2798:	b082      	sub	sp, #8
    279a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    279c:	9b01      	ldr	r3, [sp, #4]
    279e:	891b      	ldrh	r3, [r3, #8]
    27a0:	2b01      	cmp	r3, #1
    27a2:	d107      	bne.n	27b4 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    27a4:	4b05      	ldr	r3, [pc, #20]	; (27bc <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    27a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27aa:	4a04      	ldr	r2, [pc, #16]	; (27bc <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    27ac:	f043 0301 	orr.w	r3, r3, #1
    27b0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    27b4:	bf00      	nop
    27b6:	b002      	add	sp, #8
    27b8:	4770      	bx	lr
    27ba:	bf00      	nop
    27bc:	40064000 	.word	0x40064000

000027c0 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    27c0:	b082      	sub	sp, #8
    27c2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    27c4:	bf00      	nop
    27c6:	b002      	add	sp, #8
    27c8:	4770      	bx	lr

000027ca <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    27ca:	b082      	sub	sp, #8
    27cc:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    27ce:	2300      	movs	r3, #0
}
    27d0:	4618      	mov	r0, r3
    27d2:	b002      	add	sp, #8
    27d4:	4770      	bx	lr

000027d6 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    27d6:	b082      	sub	sp, #8
    27d8:	9001      	str	r0, [sp, #4]
    27da:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    27dc:	bf00      	nop
    27de:	b002      	add	sp, #8
    27e0:	4770      	bx	lr
	...

000027e4 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    27e4:	b082      	sub	sp, #8
    27e6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    27e8:	bf00      	nop
    27ea:	b002      	add	sp, #8
    27ec:	4770      	bx	lr

000027ee <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    27ee:	b082      	sub	sp, #8
    27f0:	9001      	str	r0, [sp, #4]
    27f2:	460b      	mov	r3, r1
    27f4:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    27f8:	bf00      	nop
    27fa:	b002      	add	sp, #8
    27fc:	4770      	bx	lr

000027fe <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    27fe:	b500      	push	{lr}
    2800:	b083      	sub	sp, #12
    2802:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2804:	9b01      	ldr	r3, [sp, #4]
    2806:	2b00      	cmp	r3, #0
    2808:	d002      	beq.n	2810 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    280a:	9801      	ldr	r0, [sp, #4]
    280c:	f000 f8e7 	bl	29de <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2810:	bf00      	nop
    2812:	b003      	add	sp, #12
    2814:	f85d fb04 	ldr.w	pc, [sp], #4

00002818 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2818:	b500      	push	{lr}
    281a:	b085      	sub	sp, #20
    281c:	9001      	str	r0, [sp, #4]
    281e:	460b      	mov	r3, r1
    2820:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2824:	9b01      	ldr	r3, [sp, #4]
    2826:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2828:	f89d 3003 	ldrb.w	r3, [sp, #3]
    282c:	2b00      	cmp	r3, #0
    282e:	d003      	beq.n	2838 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2830:	2300      	movs	r3, #0
    2832:	f8ad 300c 	strh.w	r3, [sp, #12]
    2836:	e002      	b.n	283e <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2838:	2301      	movs	r3, #1
    283a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    283e:	ab02      	add	r3, sp, #8
    2840:	4618      	mov	r0, r3
    2842:	f7ff ffdc 	bl	27fe <Clock_Ip_ClockSetSimLPO1KEnable>
}
    2846:	bf00      	nop
    2848:	b005      	add	sp, #20
    284a:	f85d fb04 	ldr.w	pc, [sp], #4

0000284e <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    284e:	b500      	push	{lr}
    2850:	b083      	sub	sp, #12
    2852:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2854:	9b01      	ldr	r3, [sp, #4]
    2856:	2b00      	cmp	r3, #0
    2858:	d002      	beq.n	2860 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    285a:	9801      	ldr	r0, [sp, #4]
    285c:	f000 f8d6 	bl	2a0c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2860:	bf00      	nop
    2862:	b003      	add	sp, #12
    2864:	f85d fb04 	ldr.w	pc, [sp], #4

00002868 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2868:	b500      	push	{lr}
    286a:	b085      	sub	sp, #20
    286c:	9001      	str	r0, [sp, #4]
    286e:	460b      	mov	r3, r1
    2870:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2874:	9b01      	ldr	r3, [sp, #4]
    2876:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2878:	f89d 3003 	ldrb.w	r3, [sp, #3]
    287c:	2b00      	cmp	r3, #0
    287e:	d003      	beq.n	2888 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2880:	2300      	movs	r3, #0
    2882:	f8ad 300c 	strh.w	r3, [sp, #12]
    2886:	e002      	b.n	288e <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2888:	2301      	movs	r3, #1
    288a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    288e:	ab02      	add	r3, sp, #8
    2890:	4618      	mov	r0, r3
    2892:	f7ff ffdc 	bl	284e <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2896:	bf00      	nop
    2898:	b005      	add	sp, #20
    289a:	f85d fb04 	ldr.w	pc, [sp], #4

0000289e <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    289e:	b500      	push	{lr}
    28a0:	b083      	sub	sp, #12
    28a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    28a4:	9b01      	ldr	r3, [sp, #4]
    28a6:	2b00      	cmp	r3, #0
    28a8:	d002      	beq.n	28b0 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    28aa:	9801      	ldr	r0, [sp, #4]
    28ac:	f000 f8c6 	bl	2a3c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    28b0:	bf00      	nop
    28b2:	b003      	add	sp, #12
    28b4:	f85d fb04 	ldr.w	pc, [sp], #4

000028b8 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    28b8:	b500      	push	{lr}
    28ba:	b085      	sub	sp, #20
    28bc:	9001      	str	r0, [sp, #4]
    28be:	460b      	mov	r3, r1
    28c0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    28c4:	9b01      	ldr	r3, [sp, #4]
    28c6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    28c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    28cc:	2b00      	cmp	r3, #0
    28ce:	d003      	beq.n	28d8 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    28d0:	2300      	movs	r3, #0
    28d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    28d6:	e002      	b.n	28de <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    28d8:	2301      	movs	r3, #1
    28da:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    28de:	ab02      	add	r3, sp, #8
    28e0:	4618      	mov	r0, r3
    28e2:	f7ff ffdc 	bl	289e <Clock_Ip_ClockSetSimClkoutEnable>
}
    28e6:	bf00      	nop
    28e8:	b005      	add	sp, #20
    28ea:	f85d fb04 	ldr.w	pc, [sp], #4

000028ee <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    28ee:	b500      	push	{lr}
    28f0:	b083      	sub	sp, #12
    28f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    28f4:	9b01      	ldr	r3, [sp, #4]
    28f6:	2b00      	cmp	r3, #0
    28f8:	d002      	beq.n	2900 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    28fa:	9801      	ldr	r0, [sp, #4]
    28fc:	f000 f8b6 	bl	2a6c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2900:	bf00      	nop
    2902:	b003      	add	sp, #12
    2904:	f85d fb04 	ldr.w	pc, [sp], #4

00002908 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2908:	b500      	push	{lr}
    290a:	b085      	sub	sp, #20
    290c:	9001      	str	r0, [sp, #4]
    290e:	460b      	mov	r3, r1
    2910:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2914:	9b01      	ldr	r3, [sp, #4]
    2916:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2918:	f89d 3003 	ldrb.w	r3, [sp, #3]
    291c:	2b00      	cmp	r3, #0
    291e:	d003      	beq.n	2928 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2920:	2300      	movs	r3, #0
    2922:	f8ad 300c 	strh.w	r3, [sp, #12]
    2926:	e002      	b.n	292e <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2928:	2301      	movs	r3, #1
    292a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    292e:	ab02      	add	r3, sp, #8
    2930:	4618      	mov	r0, r3
    2932:	f7ff ffdc 	bl	28ee <Clock_Ip_ClockSetPccCgcEnable>
}
    2936:	bf00      	nop
    2938:	b005      	add	sp, #20
    293a:	f85d fb04 	ldr.w	pc, [sp], #4

0000293e <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    293e:	b500      	push	{lr}
    2940:	b083      	sub	sp, #12
    2942:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2944:	9b01      	ldr	r3, [sp, #4]
    2946:	2b00      	cmp	r3, #0
    2948:	d002      	beq.n	2950 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    294a:	9801      	ldr	r0, [sp, #4]
    294c:	f000 f8bc 	bl	2ac8 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2950:	bf00      	nop
    2952:	b003      	add	sp, #12
    2954:	f85d fb04 	ldr.w	pc, [sp], #4

00002958 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2958:	b500      	push	{lr}
    295a:	b085      	sub	sp, #20
    295c:	9001      	str	r0, [sp, #4]
    295e:	460b      	mov	r3, r1
    2960:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2964:	9b01      	ldr	r3, [sp, #4]
    2966:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2968:	f89d 3003 	ldrb.w	r3, [sp, #3]
    296c:	2b00      	cmp	r3, #0
    296e:	d003      	beq.n	2978 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2970:	2300      	movs	r3, #0
    2972:	f8ad 300c 	strh.w	r3, [sp, #12]
    2976:	e002      	b.n	297e <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2978:	2301      	movs	r3, #1
    297a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    297e:	ab02      	add	r3, sp, #8
    2980:	4618      	mov	r0, r3
    2982:	f7ff ffdc 	bl	293e <Clock_Ip_ClockSetSimGate>
}
    2986:	bf00      	nop
    2988:	b005      	add	sp, #20
    298a:	f85d fb04 	ldr.w	pc, [sp], #4

0000298e <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    298e:	b500      	push	{lr}
    2990:	b083      	sub	sp, #12
    2992:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2994:	9b01      	ldr	r3, [sp, #4]
    2996:	2b00      	cmp	r3, #0
    2998:	d002      	beq.n	29a0 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    299a:	9801      	ldr	r0, [sp, #4]
    299c:	f000 f8c0 	bl	2b20 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29a0:	bf00      	nop
    29a2:	b003      	add	sp, #12
    29a4:	f85d fb04 	ldr.w	pc, [sp], #4

000029a8 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    29a8:	b500      	push	{lr}
    29aa:	b085      	sub	sp, #20
    29ac:	9001      	str	r0, [sp, #4]
    29ae:	460b      	mov	r3, r1
    29b0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    29b4:	9b01      	ldr	r3, [sp, #4]
    29b6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    29b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29bc:	2b00      	cmp	r3, #0
    29be:	d003      	beq.n	29c8 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    29c0:	2300      	movs	r3, #0
    29c2:	f8ad 300c 	strh.w	r3, [sp, #12]
    29c6:	e002      	b.n	29ce <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    29c8:	2301      	movs	r3, #1
    29ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    29ce:	ab02      	add	r3, sp, #8
    29d0:	4618      	mov	r0, r3
    29d2:	f7ff ffdc 	bl	298e <Clock_Ip_ClockSetSimTraceEnable>
}
    29d6:	bf00      	nop
    29d8:	b005      	add	sp, #20
    29da:	f85d fb04 	ldr.w	pc, [sp], #4

000029de <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    29de:	b084      	sub	sp, #16
    29e0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    29e2:	4b09      	ldr	r3, [pc, #36]	; (2a08 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    29e4:	691b      	ldr	r3, [r3, #16]
    29e6:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    29e8:	9b03      	ldr	r3, [sp, #12]
    29ea:	f023 0301 	bic.w	r3, r3, #1
    29ee:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    29f0:	9b01      	ldr	r3, [sp, #4]
    29f2:	889b      	ldrh	r3, [r3, #4]
    29f4:	461a      	mov	r2, r3
    29f6:	9b03      	ldr	r3, [sp, #12]
    29f8:	4313      	orrs	r3, r2
    29fa:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    29fc:	4a02      	ldr	r2, [pc, #8]	; (2a08 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    29fe:	9b03      	ldr	r3, [sp, #12]
    2a00:	6113      	str	r3, [r2, #16]
}
    2a02:	bf00      	nop
    2a04:	b004      	add	sp, #16
    2a06:	4770      	bx	lr
    2a08:	40048000 	.word	0x40048000

00002a0c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2a0c:	b084      	sub	sp, #16
    2a0e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2a10:	4b09      	ldr	r3, [pc, #36]	; (2a38 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2a12:	691b      	ldr	r3, [r3, #16]
    2a14:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2a16:	9b03      	ldr	r3, [sp, #12]
    2a18:	f023 0302 	bic.w	r3, r3, #2
    2a1c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2a1e:	9b01      	ldr	r3, [sp, #4]
    2a20:	889b      	ldrh	r3, [r3, #4]
    2a22:	005b      	lsls	r3, r3, #1
    2a24:	9a03      	ldr	r2, [sp, #12]
    2a26:	4313      	orrs	r3, r2
    2a28:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2a2a:	4a03      	ldr	r2, [pc, #12]	; (2a38 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2a2c:	9b03      	ldr	r3, [sp, #12]
    2a2e:	6113      	str	r3, [r2, #16]
}
    2a30:	bf00      	nop
    2a32:	b004      	add	sp, #16
    2a34:	4770      	bx	lr
    2a36:	bf00      	nop
    2a38:	40048000 	.word	0x40048000

00002a3c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2a3c:	b084      	sub	sp, #16
    2a3e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2a40:	4b09      	ldr	r3, [pc, #36]	; (2a68 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2a42:	685b      	ldr	r3, [r3, #4]
    2a44:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2a46:	9b03      	ldr	r3, [sp, #12]
    2a48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2a4c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2a4e:	9b01      	ldr	r3, [sp, #4]
    2a50:	889b      	ldrh	r3, [r3, #4]
    2a52:	02db      	lsls	r3, r3, #11
    2a54:	9a03      	ldr	r2, [sp, #12]
    2a56:	4313      	orrs	r3, r2
    2a58:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2a5a:	4a03      	ldr	r2, [pc, #12]	; (2a68 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2a5c:	9b03      	ldr	r3, [sp, #12]
    2a5e:	6053      	str	r3, [r2, #4]
}
    2a60:	bf00      	nop
    2a62:	b004      	add	sp, #16
    2a64:	4770      	bx	lr
    2a66:	bf00      	nop
    2a68:	40048000 	.word	0x40048000

00002a6c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2a6c:	b084      	sub	sp, #16
    2a6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2a70:	4913      	ldr	r1, [pc, #76]	; (2ac0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2a72:	9b01      	ldr	r3, [sp, #4]
    2a74:	681a      	ldr	r2, [r3, #0]
    2a76:	4813      	ldr	r0, [pc, #76]	; (2ac4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2a78:	4613      	mov	r3, r2
    2a7a:	00db      	lsls	r3, r3, #3
    2a7c:	4413      	add	r3, r2
    2a7e:	4403      	add	r3, r0
    2a80:	3306      	adds	r3, #6
    2a82:	781b      	ldrb	r3, [r3, #0]
    2a84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2a88:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2a8a:	9b03      	ldr	r3, [sp, #12]
    2a8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2a90:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2a92:	9b01      	ldr	r3, [sp, #4]
    2a94:	889b      	ldrh	r3, [r3, #4]
    2a96:	079b      	lsls	r3, r3, #30
    2a98:	9a03      	ldr	r2, [sp, #12]
    2a9a:	4313      	orrs	r3, r2
    2a9c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2a9e:	4908      	ldr	r1, [pc, #32]	; (2ac0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2aa0:	9b01      	ldr	r3, [sp, #4]
    2aa2:	681a      	ldr	r2, [r3, #0]
    2aa4:	4807      	ldr	r0, [pc, #28]	; (2ac4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2aa6:	4613      	mov	r3, r2
    2aa8:	00db      	lsls	r3, r3, #3
    2aaa:	4413      	add	r3, r2
    2aac:	4403      	add	r3, r0
    2aae:	3306      	adds	r3, #6
    2ab0:	781b      	ldrb	r3, [r3, #0]
    2ab2:	461a      	mov	r2, r3
    2ab4:	9b03      	ldr	r3, [sp, #12]
    2ab6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2aba:	bf00      	nop
    2abc:	b004      	add	sp, #16
    2abe:	4770      	bx	lr
    2ac0:	40065000 	.word	0x40065000
    2ac4:	0000766c 	.word	0x0000766c

00002ac8 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2ac8:	b086      	sub	sp, #24
    2aca:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2acc:	9b01      	ldr	r3, [sp, #4]
    2ace:	889b      	ldrh	r3, [r3, #4]
    2ad0:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2ad2:	9b01      	ldr	r3, [sp, #4]
    2ad4:	681a      	ldr	r2, [r3, #0]
    2ad6:	4910      	ldr	r1, [pc, #64]	; (2b18 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2ad8:	4613      	mov	r3, r2
    2ada:	00db      	lsls	r3, r3, #3
    2adc:	4413      	add	r3, r2
    2ade:	440b      	add	r3, r1
    2ae0:	3306      	adds	r3, #6
    2ae2:	781b      	ldrb	r3, [r3, #0]
    2ae4:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2ae6:	4b0d      	ldr	r3, [pc, #52]	; (2b1c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2aea:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2aec:	2201      	movs	r2, #1
    2aee:	9b04      	ldr	r3, [sp, #16]
    2af0:	fa02 f303 	lsl.w	r3, r2, r3
    2af4:	43db      	mvns	r3, r3
    2af6:	9a03      	ldr	r2, [sp, #12]
    2af8:	4013      	ands	r3, r2
    2afa:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2afc:	9a05      	ldr	r2, [sp, #20]
    2afe:	9b04      	ldr	r3, [sp, #16]
    2b00:	fa02 f303 	lsl.w	r3, r2, r3
    2b04:	9a03      	ldr	r2, [sp, #12]
    2b06:	4313      	orrs	r3, r2
    2b08:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2b0a:	4a04      	ldr	r2, [pc, #16]	; (2b1c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2b0c:	9b03      	ldr	r3, [sp, #12]
    2b0e:	6413      	str	r3, [r2, #64]	; 0x40
}
    2b10:	bf00      	nop
    2b12:	b006      	add	sp, #24
    2b14:	4770      	bx	lr
    2b16:	bf00      	nop
    2b18:	0000766c 	.word	0x0000766c
    2b1c:	40048000 	.word	0x40048000

00002b20 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2b20:	b084      	sub	sp, #16
    2b22:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2b24:	4b0a      	ldr	r3, [pc, #40]	; (2b50 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2b28:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2b2a:	9b01      	ldr	r3, [sp, #4]
    2b2c:	889b      	ldrh	r3, [r3, #4]
    2b2e:	2b01      	cmp	r3, #1
    2b30:	d104      	bne.n	2b3c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2b32:	9b03      	ldr	r3, [sp, #12]
    2b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2b38:	9303      	str	r3, [sp, #12]
    2b3a:	e003      	b.n	2b44 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2b3c:	9b03      	ldr	r3, [sp, #12]
    2b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2b42:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2b44:	4a02      	ldr	r2, [pc, #8]	; (2b50 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2b46:	9b03      	ldr	r3, [sp, #12]
    2b48:	6693      	str	r3, [r2, #104]	; 0x68
}
    2b4a:	bf00      	nop
    2b4c:	b004      	add	sp, #16
    2b4e:	4770      	bx	lr
    2b50:	40048000 	.word	0x40048000

00002b54 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2b54:	b082      	sub	sp, #8
    2b56:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2b58:	bf00      	nop
    2b5a:	b002      	add	sp, #8
    2b5c:	4770      	bx	lr

00002b5e <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2b5e:	b082      	sub	sp, #8
    2b60:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2b62:	bf00      	nop
    2b64:	b002      	add	sp, #8
    2b66:	4770      	bx	lr

00002b68 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2b68:	b500      	push	{lr}
    2b6a:	b083      	sub	sp, #12
    2b6c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b6e:	9b01      	ldr	r3, [sp, #4]
    2b70:	2b00      	cmp	r3, #0
    2b72:	d002      	beq.n	2b7a <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2b74:	9801      	ldr	r0, [sp, #4]
    2b76:	f000 f8d1 	bl	2d1c <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b7a:	bf00      	nop
    2b7c:	b003      	add	sp, #12
    2b7e:	f85d fb04 	ldr.w	pc, [sp], #4

00002b82 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2b82:	b500      	push	{lr}
    2b84:	b083      	sub	sp, #12
    2b86:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b88:	9b01      	ldr	r3, [sp, #4]
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d002      	beq.n	2b94 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2b8e:	9801      	ldr	r0, [sp, #4]
    2b90:	f000 f950 	bl	2e34 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b94:	bf00      	nop
    2b96:	b003      	add	sp, #12
    2b98:	f85d fb04 	ldr.w	pc, [sp], #4

00002b9c <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2b9c:	b500      	push	{lr}
    2b9e:	b083      	sub	sp, #12
    2ba0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2ba2:	9801      	ldr	r0, [sp, #4]
    2ba4:	f000 f98e 	bl	2ec4 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2ba8:	bf00      	nop
    2baa:	b003      	add	sp, #12
    2bac:	f85d fb04 	ldr.w	pc, [sp], #4

00002bb0 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2bb0:	b500      	push	{lr}
    2bb2:	b083      	sub	sp, #12
    2bb4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bb6:	9b01      	ldr	r3, [sp, #4]
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d002      	beq.n	2bc2 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2bbc:	9801      	ldr	r0, [sp, #4]
    2bbe:	f000 f999 	bl	2ef4 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bc2:	bf00      	nop
    2bc4:	b003      	add	sp, #12
    2bc6:	f85d fb04 	ldr.w	pc, [sp], #4

00002bca <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2bca:	b500      	push	{lr}
    2bcc:	b083      	sub	sp, #12
    2bce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bd0:	9b01      	ldr	r3, [sp, #4]
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	d002      	beq.n	2bdc <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2bd6:	9801      	ldr	r0, [sp, #4]
    2bd8:	f000 f9b0 	bl	2f3c <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bdc:	bf00      	nop
    2bde:	b003      	add	sp, #12
    2be0:	f85d fb04 	ldr.w	pc, [sp], #4

00002be4 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2be4:	b500      	push	{lr}
    2be6:	b083      	sub	sp, #12
    2be8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2bea:	9801      	ldr	r0, [sp, #4]
    2bec:	f000 f9ba 	bl	2f64 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2bf0:	bf00      	nop
    2bf2:	b003      	add	sp, #12
    2bf4:	f85d fb04 	ldr.w	pc, [sp], #4

00002bf8 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2bf8:	b500      	push	{lr}
    2bfa:	b083      	sub	sp, #12
    2bfc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bfe:	9b01      	ldr	r3, [sp, #4]
    2c00:	2b00      	cmp	r3, #0
    2c02:	d002      	beq.n	2c0a <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2c04:	9801      	ldr	r0, [sp, #4]
    2c06:	f000 f9bd 	bl	2f84 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c0a:	bf00      	nop
    2c0c:	b003      	add	sp, #12
    2c0e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c12 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2c12:	b500      	push	{lr}
    2c14:	b083      	sub	sp, #12
    2c16:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c18:	9b01      	ldr	r3, [sp, #4]
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d002      	beq.n	2c24 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2c1e:	9801      	ldr	r0, [sp, #4]
    2c20:	f000 f9d4 	bl	2fcc <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c24:	bf00      	nop
    2c26:	b003      	add	sp, #12
    2c28:	f85d fb04 	ldr.w	pc, [sp], #4

00002c2c <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2c2c:	b500      	push	{lr}
    2c2e:	b083      	sub	sp, #12
    2c30:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2c32:	9801      	ldr	r0, [sp, #4]
    2c34:	f000 f9de 	bl	2ff4 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2c38:	bf00      	nop
    2c3a:	b003      	add	sp, #12
    2c3c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c40 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2c40:	b500      	push	{lr}
    2c42:	b089      	sub	sp, #36	; 0x24
    2c44:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2c46:	2300      	movs	r3, #0
    2c48:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2c4c:	4b20      	ldr	r3, [pc, #128]	; (2cd0 <SetInputSouceSytemClock+0x90>)
    2c4e:	695b      	ldr	r3, [r3, #20]
    2c50:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2c52:	9b06      	ldr	r3, [sp, #24]
    2c54:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2c58:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2c5a:	9b01      	ldr	r3, [sp, #4]
    2c5c:	061b      	lsls	r3, r3, #24
    2c5e:	9a06      	ldr	r2, [sp, #24]
    2c60:	4313      	orrs	r3, r2
    2c62:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2c64:	4a1a      	ldr	r2, [pc, #104]	; (2cd0 <SetInputSouceSytemClock+0x90>)
    2c66:	9b06      	ldr	r3, [sp, #24]
    2c68:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2c6a:	aa02      	add	r2, sp, #8
    2c6c:	a903      	add	r1, sp, #12
    2c6e:	a804      	add	r0, sp, #16
    2c70:	f24c 3350 	movw	r3, #50000	; 0xc350
    2c74:	f7ff f9ac 	bl	1fd0 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2c78:	4b15      	ldr	r3, [pc, #84]	; (2cd0 <SetInputSouceSytemClock+0x90>)
    2c7a:	691b      	ldr	r3, [r3, #16]
    2c7c:	0e1b      	lsrs	r3, r3, #24
    2c7e:	f003 030f 	and.w	r3, r3, #15
    2c82:	9a01      	ldr	r2, [sp, #4]
    2c84:	429a      	cmp	r2, r3
    2c86:	bf0c      	ite	eq
    2c88:	2301      	moveq	r3, #1
    2c8a:	2300      	movne	r3, #0
    2c8c:	b2db      	uxtb	r3, r3
    2c8e:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2c90:	9a02      	ldr	r2, [sp, #8]
    2c92:	a903      	add	r1, sp, #12
    2c94:	ab04      	add	r3, sp, #16
    2c96:	4618      	mov	r0, r3
    2c98:	f7ff f9b4 	bl	2004 <Clock_Ip_TimeoutExpired>
    2c9c:	4603      	mov	r3, r0
    2c9e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2ca2:	9b05      	ldr	r3, [sp, #20]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d106      	bne.n	2cb6 <SetInputSouceSytemClock+0x76>
    2ca8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2cac:	f083 0301 	eor.w	r3, r3, #1
    2cb0:	b2db      	uxtb	r3, r3
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	d1e0      	bne.n	2c78 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2cb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d003      	beq.n	2cc6 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2cbe:	2105      	movs	r1, #5
    2cc0:	2001      	movs	r0, #1
    2cc2:	f7ff f975 	bl	1fb0 <Clock_Ip_ReportClockErrors>
    }
}
    2cc6:	bf00      	nop
    2cc8:	b009      	add	sp, #36	; 0x24
    2cca:	f85d fb04 	ldr.w	pc, [sp], #4
    2cce:	bf00      	nop
    2cd0:	40064000 	.word	0x40064000

00002cd4 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2cd4:	b500      	push	{lr}
    2cd6:	b083      	sub	sp, #12
    2cd8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cda:	9b01      	ldr	r3, [sp, #4]
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d002      	beq.n	2ce6 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2ce0:	9801      	ldr	r0, [sp, #4]
    2ce2:	f000 f997 	bl	3014 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ce6:	bf00      	nop
    2ce8:	b003      	add	sp, #12
    2cea:	f85d fb04 	ldr.w	pc, [sp], #4

00002cee <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2cee:	b500      	push	{lr}
    2cf0:	b083      	sub	sp, #12
    2cf2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cf4:	9b01      	ldr	r3, [sp, #4]
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d002      	beq.n	2d00 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2cfa:	9801      	ldr	r0, [sp, #4]
    2cfc:	f000 fa7e 	bl	31fc <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d00:	bf00      	nop
    2d02:	b003      	add	sp, #12
    2d04:	f85d fb04 	ldr.w	pc, [sp], #4

00002d08 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2d08:	b500      	push	{lr}
    2d0a:	b083      	sub	sp, #12
    2d0c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2d0e:	9801      	ldr	r0, [sp, #4]
    2d10:	f000 fab8 	bl	3284 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d14:	bf00      	nop
    2d16:	b003      	add	sp, #12
    2d18:	f85d fb04 	ldr.w	pc, [sp], #4

00002d1c <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2d1c:	b500      	push	{lr}
    2d1e:	b08b      	sub	sp, #44	; 0x2c
    2d20:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2d22:	2300      	movs	r3, #0
    2d24:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2d28:	9b01      	ldr	r3, [sp, #4]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d10b      	bne.n	2d46 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2d2e:	2305      	movs	r3, #5
    2d30:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2d32:	2301      	movs	r3, #1
    2d34:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2d38:	2301      	movs	r3, #1
    2d3a:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2d3e:	2301      	movs	r3, #1
    2d40:	f88d 3010 	strb.w	r3, [sp, #16]
    2d44:	e00e      	b.n	2d64 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2d46:	9b01      	ldr	r3, [sp, #4]
    2d48:	681b      	ldr	r3, [r3, #0]
    2d4a:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2d4c:	9b01      	ldr	r3, [sp, #4]
    2d4e:	79db      	ldrb	r3, [r3, #7]
    2d50:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2d54:	9b01      	ldr	r3, [sp, #4]
    2d56:	889b      	ldrh	r3, [r3, #4]
    2d58:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2d5c:	9b01      	ldr	r3, [sp, #4]
    2d5e:	7a1b      	ldrb	r3, [r3, #8]
    2d60:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2d64:	4b32      	ldr	r3, [pc, #200]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2d66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2d6a:	4a31      	ldr	r2, [pc, #196]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2d6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2d70:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2d74:	4b2e      	ldr	r3, [pc, #184]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2d76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2d7a:	4a2d      	ldr	r2, [pc, #180]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2d7c:	f023 0301 	bic.w	r3, r3, #1
    2d80:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2d84:	4b2a      	ldr	r3, [pc, #168]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2d86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2d8a:	4a29      	ldr	r2, [pc, #164]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2d8c:	f023 0304 	bic.w	r3, r3, #4
    2d90:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2d94:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2d98:	2b01      	cmp	r3, #1
    2d9a:	d144      	bne.n	2e26 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2d9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2da0:	4a23      	ldr	r2, [pc, #140]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2da2:	f003 0301 	and.w	r3, r3, #1
    2da6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2daa:	4b21      	ldr	r3, [pc, #132]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2dac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2db0:	4a1f      	ldr	r2, [pc, #124]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2db2:	f043 0301 	orr.w	r3, r3, #1
    2db6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    2dba:	4b1d      	ldr	r3, [pc, #116]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2dbc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2dc0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2dc4:	009b      	lsls	r3, r3, #2
    2dc6:	f003 0304 	and.w	r3, r3, #4
    2dca:	4919      	ldr	r1, [pc, #100]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2dcc:	4313      	orrs	r3, r2
    2dce:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2dd2:	aa05      	add	r2, sp, #20
    2dd4:	a906      	add	r1, sp, #24
    2dd6:	a807      	add	r0, sp, #28
    2dd8:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ddc:	f7ff f8f8 	bl	1fd0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2de0:	4b13      	ldr	r3, [pc, #76]	; (2e30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2de2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2de6:	0e1b      	lsrs	r3, r3, #24
    2de8:	f003 0301 	and.w	r3, r3, #1
    2dec:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2dee:	9a05      	ldr	r2, [sp, #20]
    2df0:	a906      	add	r1, sp, #24
    2df2:	ab07      	add	r3, sp, #28
    2df4:	4618      	mov	r0, r3
    2df6:	f7ff f905 	bl	2004 <Clock_Ip_TimeoutExpired>
    2dfa:	4603      	mov	r3, r0
    2dfc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2e00:	9b08      	ldr	r3, [sp, #32]
    2e02:	2b00      	cmp	r3, #0
    2e04:	d106      	bne.n	2e14 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2e06:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2e0a:	f083 0301 	eor.w	r3, r3, #1
    2e0e:	b2db      	uxtb	r3, r3
    2e10:	2b00      	cmp	r3, #0
    2e12:	d1e5      	bne.n	2de0 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2e14:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2e18:	2b00      	cmp	r3, #0
    2e1a:	d004      	beq.n	2e26 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    2e1c:	9b02      	ldr	r3, [sp, #8]
    2e1e:	4619      	mov	r1, r3
    2e20:	2001      	movs	r0, #1
    2e22:	f7ff f8c5 	bl	1fb0 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2e26:	bf00      	nop
    2e28:	b00b      	add	sp, #44	; 0x2c
    2e2a:	f85d fb04 	ldr.w	pc, [sp], #4
    2e2e:	bf00      	nop
    2e30:	40064000 	.word	0x40064000

00002e34 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2e34:	b500      	push	{lr}
    2e36:	b089      	sub	sp, #36	; 0x24
    2e38:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2e3a:	2300      	movs	r3, #0
    2e3c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2e40:	4b1f      	ldr	r3, [pc, #124]	; (2ec0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2e42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2e46:	4a1e      	ldr	r2, [pc, #120]	; (2ec0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2e48:	f043 0301 	orr.w	r3, r3, #1
    2e4c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    2e50:	4b1b      	ldr	r3, [pc, #108]	; (2ec0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2e52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2e56:	4a1a      	ldr	r2, [pc, #104]	; (2ec0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2e58:	f043 0304 	orr.w	r3, r3, #4
    2e5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2e60:	aa03      	add	r2, sp, #12
    2e62:	a904      	add	r1, sp, #16
    2e64:	a805      	add	r0, sp, #20
    2e66:	f24c 3350 	movw	r3, #50000	; 0xc350
    2e6a:	f7ff f8b1 	bl	1fd0 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2e6e:	4b14      	ldr	r3, [pc, #80]	; (2ec0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2e70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2e74:	0e1b      	lsrs	r3, r3, #24
    2e76:	f003 0301 	and.w	r3, r3, #1
    2e7a:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2e7c:	9a03      	ldr	r2, [sp, #12]
    2e7e:	a904      	add	r1, sp, #16
    2e80:	ab05      	add	r3, sp, #20
    2e82:	4618      	mov	r0, r3
    2e84:	f7ff f8be 	bl	2004 <Clock_Ip_TimeoutExpired>
    2e88:	4603      	mov	r3, r0
    2e8a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2e8e:	9b06      	ldr	r3, [sp, #24]
    2e90:	2b00      	cmp	r3, #0
    2e92:	d106      	bne.n	2ea2 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    2e94:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e98:	f083 0301 	eor.w	r3, r3, #1
    2e9c:	b2db      	uxtb	r3, r3
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d1e5      	bne.n	2e6e <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    2ea2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2ea6:	2b00      	cmp	r3, #0
    2ea8:	d005      	beq.n	2eb6 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2eaa:	9b01      	ldr	r3, [sp, #4]
    2eac:	681b      	ldr	r3, [r3, #0]
    2eae:	4619      	mov	r1, r3
    2eb0:	2001      	movs	r0, #1
    2eb2:	f7ff f87d 	bl	1fb0 <Clock_Ip_ReportClockErrors>
    }
}
    2eb6:	bf00      	nop
    2eb8:	b009      	add	sp, #36	; 0x24
    2eba:	f85d fb04 	ldr.w	pc, [sp], #4
    2ebe:	bf00      	nop
    2ec0:	40064000 	.word	0x40064000

00002ec4 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    2ec4:	b082      	sub	sp, #8
    2ec6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    2ec8:	4b09      	ldr	r3, [pc, #36]	; (2ef0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2eca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ece:	4a08      	ldr	r2, [pc, #32]	; (2ef0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2ed0:	f023 0301 	bic.w	r3, r3, #1
    2ed4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2ed8:	4b05      	ldr	r3, [pc, #20]	; (2ef0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2eda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ede:	4a04      	ldr	r2, [pc, #16]	; (2ef0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2ee0:	f023 0304 	bic.w	r3, r3, #4
    2ee4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2ee8:	bf00      	nop
    2eea:	b002      	add	sp, #8
    2eec:	4770      	bx	lr
    2eee:	bf00      	nop
    2ef0:	40064000 	.word	0x40064000

00002ef4 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2ef4:	b082      	sub	sp, #8
    2ef6:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2ef8:	4b0f      	ldr	r3, [pc, #60]	; (2f38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2efa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2efe:	4a0e      	ldr	r2, [pc, #56]	; (2f38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2f00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2f04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2f08:	4b0b      	ldr	r3, [pc, #44]	; (2f38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f0e:	4a0a      	ldr	r2, [pc, #40]	; (2f38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2f10:	f023 0304 	bic.w	r3, r3, #4
    2f14:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    2f18:	4b07      	ldr	r3, [pc, #28]	; (2f38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2f1a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2f1e:	9b01      	ldr	r3, [sp, #4]
    2f20:	7a1b      	ldrb	r3, [r3, #8]
    2f22:	009b      	lsls	r3, r3, #2
    2f24:	f003 0304 	and.w	r3, r3, #4
    2f28:	4903      	ldr	r1, [pc, #12]	; (2f38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2f2a:	4313      	orrs	r3, r2
    2f2c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2f30:	bf00      	nop
    2f32:	b002      	add	sp, #8
    2f34:	4770      	bx	lr
    2f36:	bf00      	nop
    2f38:	40064000 	.word	0x40064000

00002f3c <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2f3c:	b082      	sub	sp, #8
    2f3e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2f40:	9b01      	ldr	r3, [sp, #4]
    2f42:	889b      	ldrh	r3, [r3, #4]
    2f44:	2b01      	cmp	r3, #1
    2f46:	d107      	bne.n	2f58 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    2f48:	4b05      	ldr	r3, [pc, #20]	; (2f60 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2f4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f4e:	4a04      	ldr	r2, [pc, #16]	; (2f60 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2f50:	f043 0304 	orr.w	r3, r3, #4
    2f54:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2f58:	bf00      	nop
    2f5a:	b002      	add	sp, #8
    2f5c:	4770      	bx	lr
    2f5e:	bf00      	nop
    2f60:	40064000 	.word	0x40064000

00002f64 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    2f64:	b082      	sub	sp, #8
    2f66:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2f68:	4b05      	ldr	r3, [pc, #20]	; (2f80 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2f6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f6e:	4a04      	ldr	r2, [pc, #16]	; (2f80 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2f70:	f023 0304 	bic.w	r3, r3, #4
    2f74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2f78:	bf00      	nop
    2f7a:	b002      	add	sp, #8
    2f7c:	4770      	bx	lr
    2f7e:	bf00      	nop
    2f80:	40064000 	.word	0x40064000

00002f84 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2f84:	b082      	sub	sp, #8
    2f86:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2f88:	4b0f      	ldr	r3, [pc, #60]	; (2fc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2f8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f8e:	4a0e      	ldr	r2, [pc, #56]	; (2fc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2f90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2f94:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2f98:	4b0b      	ldr	r3, [pc, #44]	; (2fc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2f9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f9e:	4a0a      	ldr	r2, [pc, #40]	; (2fc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2fa0:	f023 0302 	bic.w	r3, r3, #2
    2fa4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    2fa8:	4b07      	ldr	r3, [pc, #28]	; (2fc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2faa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2fae:	9b01      	ldr	r3, [sp, #4]
    2fb0:	7a5b      	ldrb	r3, [r3, #9]
    2fb2:	005b      	lsls	r3, r3, #1
    2fb4:	f003 0302 	and.w	r3, r3, #2
    2fb8:	4903      	ldr	r1, [pc, #12]	; (2fc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2fba:	4313      	orrs	r3, r2
    2fbc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2fc0:	bf00      	nop
    2fc2:	b002      	add	sp, #8
    2fc4:	4770      	bx	lr
    2fc6:	bf00      	nop
    2fc8:	40064000 	.word	0x40064000

00002fcc <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2fcc:	b082      	sub	sp, #8
    2fce:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2fd0:	9b01      	ldr	r3, [sp, #4]
    2fd2:	889b      	ldrh	r3, [r3, #4]
    2fd4:	2b01      	cmp	r3, #1
    2fd6:	d107      	bne.n	2fe8 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    2fd8:	4b05      	ldr	r3, [pc, #20]	; (2ff0 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2fda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fde:	4a04      	ldr	r2, [pc, #16]	; (2ff0 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2fe0:	f043 0302 	orr.w	r3, r3, #2
    2fe4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2fe8:	bf00      	nop
    2fea:	b002      	add	sp, #8
    2fec:	4770      	bx	lr
    2fee:	bf00      	nop
    2ff0:	40064000 	.word	0x40064000

00002ff4 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    2ff4:	b082      	sub	sp, #8
    2ff6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2ff8:	4b05      	ldr	r3, [pc, #20]	; (3010 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2ffa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ffe:	4a04      	ldr	r2, [pc, #16]	; (3010 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3000:	f023 0302 	bic.w	r3, r3, #2
    3004:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3008:	bf00      	nop
    300a:	b002      	add	sp, #8
    300c:	4770      	bx	lr
    300e:	bf00      	nop
    3010:	40064000 	.word	0x40064000

00003014 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3014:	b500      	push	{lr}
    3016:	b08b      	sub	sp, #44	; 0x2c
    3018:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    301a:	9b01      	ldr	r3, [sp, #4]
    301c:	681a      	ldr	r2, [r3, #0]
    301e:	4975      	ldr	r1, [pc, #468]	; (31f4 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3020:	4613      	mov	r3, r2
    3022:	00db      	lsls	r3, r3, #3
    3024:	4413      	add	r3, r2
    3026:	440b      	add	r3, r1
    3028:	781b      	ldrb	r3, [r3, #0]
    302a:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    302c:	2300      	movs	r3, #0
    302e:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3032:	2300      	movs	r3, #0
    3034:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3038:	4b6f      	ldr	r3, [pc, #444]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    303a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    303e:	4a6e      	ldr	r2, [pc, #440]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3040:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3044:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3048:	4b6b      	ldr	r3, [pc, #428]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    304a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3052:	2b00      	cmp	r3, #0
    3054:	d07d      	beq.n	3152 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3056:	9b01      	ldr	r3, [sp, #4]
    3058:	79db      	ldrb	r3, [r3, #7]
    305a:	461a      	mov	r2, r3
    305c:	4b66      	ldr	r3, [pc, #408]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    305e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3062:	f003 0303 	and.w	r3, r3, #3
    3066:	429a      	cmp	r2, r3
    3068:	d10b      	bne.n	3082 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    306a:	9b01      	ldr	r3, [sp, #4]
    306c:	799b      	ldrb	r3, [r3, #6]
    306e:	461a      	mov	r2, r3
    3070:	4b61      	ldr	r3, [pc, #388]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3072:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3076:	08db      	lsrs	r3, r3, #3
    3078:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    307c:	429a      	cmp	r2, r3
    307e:	f000 80b4 	beq.w	31ea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3082:	4b5d      	ldr	r3, [pc, #372]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3084:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3088:	f003 0301 	and.w	r3, r3, #1
    308c:	2b00      	cmp	r3, #0
    308e:	d105      	bne.n	309c <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3090:	2301      	movs	r3, #1
    3092:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3096:	2000      	movs	r0, #0
    3098:	f7ff fd66 	bl	2b68 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    309c:	2002      	movs	r0, #2
    309e:	f7ff fdcf 	bl	2c40 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    30a2:	4b55      	ldr	r3, [pc, #340]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    30a4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    30a8:	4a53      	ldr	r2, [pc, #332]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    30aa:	f023 0301 	bic.w	r3, r3, #1
    30ae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    30b2:	9b01      	ldr	r3, [sp, #4]
    30b4:	889b      	ldrh	r3, [r3, #4]
    30b6:	2b01      	cmp	r3, #1
    30b8:	f040 8097 	bne.w	31ea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    30bc:	9b01      	ldr	r3, [sp, #4]
    30be:	79db      	ldrb	r3, [r3, #7]
    30c0:	4a4d      	ldr	r2, [pc, #308]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    30c2:	f003 0303 	and.w	r3, r3, #3
    30c6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    30ca:	4b4b      	ldr	r3, [pc, #300]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    30cc:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    30d0:	9b01      	ldr	r3, [sp, #4]
    30d2:	799b      	ldrb	r3, [r3, #6]
    30d4:	00db      	lsls	r3, r3, #3
    30d6:	f003 0308 	and.w	r3, r3, #8
    30da:	4313      	orrs	r3, r2
    30dc:	4a46      	ldr	r2, [pc, #280]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    30de:	f043 0301 	orr.w	r3, r3, #1
    30e2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    30e6:	aa03      	add	r2, sp, #12
    30e8:	a904      	add	r1, sp, #16
    30ea:	a805      	add	r0, sp, #20
    30ec:	f24c 3350 	movw	r3, #50000	; 0xc350
    30f0:	f7fe ff6e 	bl	1fd0 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    30f4:	4b40      	ldr	r3, [pc, #256]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    30f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    30fa:	0e1b      	lsrs	r3, r3, #24
    30fc:	f003 0301 	and.w	r3, r3, #1
    3100:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3102:	9a03      	ldr	r2, [sp, #12]
    3104:	a904      	add	r1, sp, #16
    3106:	ab05      	add	r3, sp, #20
    3108:	4618      	mov	r0, r3
    310a:	f7fe ff7b 	bl	2004 <Clock_Ip_TimeoutExpired>
    310e:	4603      	mov	r3, r0
    3110:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3114:	9b06      	ldr	r3, [sp, #24]
    3116:	2b00      	cmp	r3, #0
    3118:	d106      	bne.n	3128 <Clock_Ip_SetFirc_TrustedCall+0x114>
    311a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    311e:	f083 0301 	eor.w	r3, r3, #1
    3122:	b2db      	uxtb	r3, r3
    3124:	2b00      	cmp	r3, #0
    3126:	d1e5      	bne.n	30f4 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3128:	f89d 301f 	ldrb.w	r3, [sp, #31]
    312c:	2b00      	cmp	r3, #0
    312e:	d005      	beq.n	313c <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3130:	9b01      	ldr	r3, [sp, #4]
    3132:	681b      	ldr	r3, [r3, #0]
    3134:	4619      	mov	r1, r3
    3136:	2001      	movs	r0, #1
    3138:	f7fe ff3a 	bl	1fb0 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    313c:	2003      	movs	r0, #3
    313e:	f7ff fd7f 	bl	2c40 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3142:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3146:	2b00      	cmp	r3, #0
    3148:	d04f      	beq.n	31ea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    314a:	2002      	movs	r0, #2
    314c:	f7ff fd26 	bl	2b9c <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3150:	e04b      	b.n	31ea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3152:	4b29      	ldr	r3, [pc, #164]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3154:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3158:	4a27      	ldr	r2, [pc, #156]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    315a:	f023 0301 	bic.w	r3, r3, #1
    315e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3162:	9b01      	ldr	r3, [sp, #4]
    3164:	889b      	ldrh	r3, [r3, #4]
    3166:	2b01      	cmp	r3, #1
    3168:	d13f      	bne.n	31ea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    316a:	9b01      	ldr	r3, [sp, #4]
    316c:	79db      	ldrb	r3, [r3, #7]
    316e:	4a22      	ldr	r2, [pc, #136]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3170:	f003 0303 	and.w	r3, r3, #3
    3174:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3178:	4b1f      	ldr	r3, [pc, #124]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    317a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    317e:	9b01      	ldr	r3, [sp, #4]
    3180:	799b      	ldrb	r3, [r3, #6]
    3182:	00db      	lsls	r3, r3, #3
    3184:	f003 0308 	and.w	r3, r3, #8
    3188:	4313      	orrs	r3, r2
    318a:	4a1b      	ldr	r2, [pc, #108]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    318c:	f043 0301 	orr.w	r3, r3, #1
    3190:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3194:	aa03      	add	r2, sp, #12
    3196:	a904      	add	r1, sp, #16
    3198:	a805      	add	r0, sp, #20
    319a:	f24c 3350 	movw	r3, #50000	; 0xc350
    319e:	f7fe ff17 	bl	1fd0 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    31a2:	4b15      	ldr	r3, [pc, #84]	; (31f8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31a4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    31a8:	0e1b      	lsrs	r3, r3, #24
    31aa:	f003 0301 	and.w	r3, r3, #1
    31ae:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    31b0:	9a03      	ldr	r2, [sp, #12]
    31b2:	a904      	add	r1, sp, #16
    31b4:	ab05      	add	r3, sp, #20
    31b6:	4618      	mov	r0, r3
    31b8:	f7fe ff24 	bl	2004 <Clock_Ip_TimeoutExpired>
    31bc:	4603      	mov	r3, r0
    31be:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    31c2:	9b06      	ldr	r3, [sp, #24]
    31c4:	2b00      	cmp	r3, #0
    31c6:	d106      	bne.n	31d6 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    31c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31cc:	f083 0301 	eor.w	r3, r3, #1
    31d0:	b2db      	uxtb	r3, r3
    31d2:	2b00      	cmp	r3, #0
    31d4:	d1e5      	bne.n	31a2 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    31d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31da:	2b00      	cmp	r3, #0
    31dc:	d005      	beq.n	31ea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    31de:	9b01      	ldr	r3, [sp, #4]
    31e0:	681b      	ldr	r3, [r3, #0]
    31e2:	4619      	mov	r1, r3
    31e4:	2001      	movs	r0, #1
    31e6:	f7fe fee3 	bl	1fb0 <Clock_Ip_ReportClockErrors>
}
    31ea:	bf00      	nop
    31ec:	b00b      	add	sp, #44	; 0x2c
    31ee:	f85d fb04 	ldr.w	pc, [sp], #4
    31f2:	bf00      	nop
    31f4:	0000766c 	.word	0x0000766c
    31f8:	40064000 	.word	0x40064000

000031fc <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    31fc:	b500      	push	{lr}
    31fe:	b089      	sub	sp, #36	; 0x24
    3200:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3202:	2300      	movs	r3, #0
    3204:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3208:	9b01      	ldr	r3, [sp, #4]
    320a:	889b      	ldrh	r3, [r3, #4]
    320c:	2b01      	cmp	r3, #1
    320e:	d132      	bne.n	3276 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3210:	4b1b      	ldr	r3, [pc, #108]	; (3280 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3212:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3216:	4a1a      	ldr	r2, [pc, #104]	; (3280 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3218:	f043 0301 	orr.w	r3, r3, #1
    321c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3220:	aa03      	add	r2, sp, #12
    3222:	a904      	add	r1, sp, #16
    3224:	a805      	add	r0, sp, #20
    3226:	f24c 3350 	movw	r3, #50000	; 0xc350
    322a:	f7fe fed1 	bl	1fd0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    322e:	4b14      	ldr	r3, [pc, #80]	; (3280 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3230:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3234:	0e1b      	lsrs	r3, r3, #24
    3236:	f003 0301 	and.w	r3, r3, #1
    323a:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    323c:	9a03      	ldr	r2, [sp, #12]
    323e:	a904      	add	r1, sp, #16
    3240:	ab05      	add	r3, sp, #20
    3242:	4618      	mov	r0, r3
    3244:	f7fe fede 	bl	2004 <Clock_Ip_TimeoutExpired>
    3248:	4603      	mov	r3, r0
    324a:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    324e:	9b06      	ldr	r3, [sp, #24]
    3250:	2b00      	cmp	r3, #0
    3252:	d106      	bne.n	3262 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3254:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3258:	f083 0301 	eor.w	r3, r3, #1
    325c:	b2db      	uxtb	r3, r3
    325e:	2b00      	cmp	r3, #0
    3260:	d1e5      	bne.n	322e <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3262:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3266:	2b00      	cmp	r3, #0
    3268:	d005      	beq.n	3276 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    326a:	9b01      	ldr	r3, [sp, #4]
    326c:	681b      	ldr	r3, [r3, #0]
    326e:	4619      	mov	r1, r3
    3270:	2001      	movs	r0, #1
    3272:	f7fe fe9d 	bl	1fb0 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3276:	bf00      	nop
    3278:	b009      	add	sp, #36	; 0x24
    327a:	f85d fb04 	ldr.w	pc, [sp], #4
    327e:	bf00      	nop
    3280:	40064000 	.word	0x40064000

00003284 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3284:	b082      	sub	sp, #8
    3286:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3288:	4b05      	ldr	r3, [pc, #20]	; (32a0 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    328a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    328e:	4a04      	ldr	r2, [pc, #16]	; (32a0 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3290:	f023 0301 	bic.w	r3, r3, #1
    3294:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3298:	bf00      	nop
    329a:	b002      	add	sp, #8
    329c:	4770      	bx	lr
    329e:	bf00      	nop
    32a0:	40064000 	.word	0x40064000

000032a4 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    32a4:	b082      	sub	sp, #8
    32a6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    32a8:	bf00      	nop
    32aa:	b002      	add	sp, #8
    32ac:	4770      	bx	lr

000032ae <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    32ae:	b082      	sub	sp, #8
    32b0:	9001      	str	r0, [sp, #4]
    32b2:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    32b4:	bf00      	nop
    32b6:	b002      	add	sp, #8
    32b8:	4770      	bx	lr

000032ba <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    32ba:	b082      	sub	sp, #8
    32bc:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    32be:	bf00      	nop
    32c0:	b002      	add	sp, #8
    32c2:	4770      	bx	lr

000032c4 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    32c4:	b082      	sub	sp, #8
    32c6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    32c8:	bf00      	nop
    32ca:	b002      	add	sp, #8
    32cc:	4770      	bx	lr

000032ce <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    32ce:	b082      	sub	sp, #8
    32d0:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    32d2:	2302      	movs	r3, #2
}
    32d4:	4618      	mov	r0, r3
    32d6:	b002      	add	sp, #8
    32d8:	4770      	bx	lr

000032da <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    32da:	b082      	sub	sp, #8
    32dc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    32de:	bf00      	nop
    32e0:	b002      	add	sp, #8
    32e2:	4770      	bx	lr

000032e4 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    32e4:	b500      	push	{lr}
    32e6:	b083      	sub	sp, #12
    32e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32ea:	9b01      	ldr	r3, [sp, #4]
    32ec:	2b00      	cmp	r3, #0
    32ee:	d002      	beq.n	32f6 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    32f0:	9801      	ldr	r0, [sp, #4]
    32f2:	f000 f870 	bl	33d6 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32f6:	bf00      	nop
    32f8:	b003      	add	sp, #12
    32fa:	f85d fb04 	ldr.w	pc, [sp], #4

000032fe <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    32fe:	b500      	push	{lr}
    3300:	b083      	sub	sp, #12
    3302:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3304:	9b01      	ldr	r3, [sp, #4]
    3306:	2b00      	cmp	r3, #0
    3308:	d002      	beq.n	3310 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    330a:	9801      	ldr	r0, [sp, #4]
    330c:	f000 f89a 	bl	3444 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3310:	bf00      	nop
    3312:	b003      	add	sp, #12
    3314:	f85d fb04 	ldr.w	pc, [sp], #4

00003318 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3318:	b500      	push	{lr}
    331a:	b089      	sub	sp, #36	; 0x24
    331c:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    331e:	2301      	movs	r3, #1
    3320:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3322:	2300      	movs	r3, #0
    3324:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3328:	4b1e      	ldr	r3, [pc, #120]	; (33a4 <Clock_Ip_CompleteSpll+0x8c>)
    332a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    332e:	f003 0301 	and.w	r3, r3, #1
    3332:	2b00      	cmp	r3, #0
    3334:	d02f      	beq.n	3396 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3336:	aa02      	add	r2, sp, #8
    3338:	a903      	add	r1, sp, #12
    333a:	a804      	add	r0, sp, #16
    333c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3340:	f7fe fe46 	bl	1fd0 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3344:	4b17      	ldr	r3, [pc, #92]	; (33a4 <Clock_Ip_CompleteSpll+0x8c>)
    3346:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    334a:	0e1b      	lsrs	r3, r3, #24
    334c:	f003 0301 	and.w	r3, r3, #1
    3350:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3352:	9a02      	ldr	r2, [sp, #8]
    3354:	a903      	add	r1, sp, #12
    3356:	ab04      	add	r3, sp, #16
    3358:	4618      	mov	r0, r3
    335a:	f7fe fe53 	bl	2004 <Clock_Ip_TimeoutExpired>
    335e:	4603      	mov	r3, r0
    3360:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3364:	9b05      	ldr	r3, [sp, #20]
    3366:	2b00      	cmp	r3, #0
    3368:	d106      	bne.n	3378 <Clock_Ip_CompleteSpll+0x60>
    336a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    336e:	f083 0301 	eor.w	r3, r3, #1
    3372:	b2db      	uxtb	r3, r3
    3374:	2b00      	cmp	r3, #0
    3376:	d1e5      	bne.n	3344 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3378:	f89d 301b 	ldrb.w	r3, [sp, #27]
    337c:	f083 0301 	eor.w	r3, r3, #1
    3380:	b2db      	uxtb	r3, r3
    3382:	2b00      	cmp	r3, #0
    3384:	d002      	beq.n	338c <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3386:	2302      	movs	r3, #2
    3388:	9307      	str	r3, [sp, #28]
    338a:	e006      	b.n	339a <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    338c:	9901      	ldr	r1, [sp, #4]
    338e:	2001      	movs	r0, #1
    3390:	f7fe fe0e 	bl	1fb0 <Clock_Ip_ReportClockErrors>
    3394:	e001      	b.n	339a <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3396:	2300      	movs	r3, #0
    3398:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    339a:	9b07      	ldr	r3, [sp, #28]
}
    339c:	4618      	mov	r0, r3
    339e:	b009      	add	sp, #36	; 0x24
    33a0:	f85d fb04 	ldr.w	pc, [sp], #4
    33a4:	40064000 	.word	0x40064000

000033a8 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    33a8:	b500      	push	{lr}
    33aa:	b083      	sub	sp, #12
    33ac:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    33ae:	9801      	ldr	r0, [sp, #4]
    33b0:	f000 f886 	bl	34c0 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    33b4:	bf00      	nop
    33b6:	b003      	add	sp, #12
    33b8:	f85d fb04 	ldr.w	pc, [sp], #4

000033bc <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    33bc:	b500      	push	{lr}
    33be:	b083      	sub	sp, #12
    33c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33c2:	9b01      	ldr	r3, [sp, #4]
    33c4:	2b00      	cmp	r3, #0
    33c6:	d002      	beq.n	33ce <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    33c8:	9801      	ldr	r0, [sp, #4]
    33ca:	f000 f891 	bl	34f0 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33ce:	bf00      	nop
    33d0:	b003      	add	sp, #12
    33d2:	f85d fb04 	ldr.w	pc, [sp], #4

000033d6 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    33d6:	b082      	sub	sp, #8
    33d8:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    33da:	4b19      	ldr	r3, [pc, #100]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    33dc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    33e0:	4a17      	ldr	r2, [pc, #92]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    33e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    33e6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    33ea:	4b15      	ldr	r3, [pc, #84]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    33ec:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    33f0:	4a13      	ldr	r2, [pc, #76]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    33f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    33f6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    33fa:	4b11      	ldr	r3, [pc, #68]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    33fc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3400:	4a0f      	ldr	r2, [pc, #60]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3402:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3406:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    340a:	4b0d      	ldr	r3, [pc, #52]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    340c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3410:	4a0b      	ldr	r2, [pc, #44]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3412:	f023 0301 	bic.w	r3, r3, #1
    3416:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    341a:	4b09      	ldr	r3, [pc, #36]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    341c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3420:	4a07      	ldr	r2, [pc, #28]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3422:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3426:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    342a:	4b05      	ldr	r3, [pc, #20]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    342c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3430:	4a03      	ldr	r2, [pc, #12]	; (3440 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3432:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    3436:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    343a:	bf00      	nop
    343c:	b002      	add	sp, #8
    343e:	4770      	bx	lr
    3440:	40064000 	.word	0x40064000

00003444 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3444:	b082      	sub	sp, #8
    3446:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3448:	9b01      	ldr	r3, [sp, #4]
    344a:	889b      	ldrh	r3, [r3, #4]
    344c:	2b01      	cmp	r3, #1
    344e:	d12f      	bne.n	34b0 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3450:	4b1a      	ldr	r3, [pc, #104]	; (34bc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3452:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    3456:	9b01      	ldr	r3, [sp, #4]
    3458:	7b5b      	ldrb	r3, [r3, #13]
    345a:	3b01      	subs	r3, #1
    345c:	021b      	lsls	r3, r3, #8
    345e:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3462:	9b01      	ldr	r3, [sp, #4]
    3464:	7d1b      	ldrb	r3, [r3, #20]
    3466:	3b10      	subs	r3, #16
    3468:	041b      	lsls	r3, r3, #16
    346a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    346e:	430b      	orrs	r3, r1
    3470:	4912      	ldr	r1, [pc, #72]	; (34bc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3472:	4313      	orrs	r3, r2
    3474:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3478:	9b01      	ldr	r3, [sp, #4]
    347a:	7fdb      	ldrb	r3, [r3, #31]
    347c:	2b02      	cmp	r3, #2
    347e:	d011      	beq.n	34a4 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3480:	2b02      	cmp	r3, #2
    3482:	dc17      	bgt.n	34b4 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3484:	2b00      	cmp	r3, #0
    3486:	d002      	beq.n	348e <Clock_Ip_SetSpll_TrustedCall+0x4a>
    3488:	2b01      	cmp	r3, #1
    348a:	d005      	beq.n	3498 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    348c:	e012      	b.n	34b4 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    348e:	4b0b      	ldr	r3, [pc, #44]	; (34bc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3490:	2200      	movs	r2, #0
    3492:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3496:	e00e      	b.n	34b6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3498:	4b08      	ldr	r3, [pc, #32]	; (34bc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    349a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    349e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    34a2:	e008      	b.n	34b6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    34a4:	4b05      	ldr	r3, [pc, #20]	; (34bc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    34a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    34aa:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    34ae:	e002      	b.n	34b6 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    34b0:	bf00      	nop
    34b2:	e000      	b.n	34b6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    34b4:	bf00      	nop
}
    34b6:	bf00      	nop
    34b8:	b002      	add	sp, #8
    34ba:	4770      	bx	lr
    34bc:	40064000 	.word	0x40064000

000034c0 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    34c0:	b082      	sub	sp, #8
    34c2:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    34c4:	4b09      	ldr	r3, [pc, #36]	; (34ec <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    34c6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34ca:	4a08      	ldr	r2, [pc, #32]	; (34ec <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    34cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    34d0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    34d4:	4b05      	ldr	r3, [pc, #20]	; (34ec <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    34d6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34da:	4a04      	ldr	r2, [pc, #16]	; (34ec <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    34dc:	f023 0301 	bic.w	r3, r3, #1
    34e0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    34e4:	bf00      	nop
    34e6:	b002      	add	sp, #8
    34e8:	4770      	bx	lr
    34ea:	bf00      	nop
    34ec:	40064000 	.word	0x40064000

000034f0 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    34f0:	b082      	sub	sp, #8
    34f2:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    34f4:	9b01      	ldr	r3, [sp, #4]
    34f6:	889b      	ldrh	r3, [r3, #4]
    34f8:	2b01      	cmp	r3, #1
    34fa:	d107      	bne.n	350c <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    34fc:	4b05      	ldr	r3, [pc, #20]	; (3514 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    34fe:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3502:	4a04      	ldr	r2, [pc, #16]	; (3514 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3504:	f043 0301 	orr.w	r3, r3, #1
    3508:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    350c:	bf00      	nop
    350e:	b002      	add	sp, #8
    3510:	4770      	bx	lr
    3512:	bf00      	nop
    3514:	40064000 	.word	0x40064000

00003518 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    3518:	b082      	sub	sp, #8
    351a:	9001      	str	r0, [sp, #4]
    351c:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    351e:	bf00      	nop
    3520:	b002      	add	sp, #8
    3522:	4770      	bx	lr

00003524 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3524:	b082      	sub	sp, #8
    3526:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3528:	bf00      	nop
    352a:	b002      	add	sp, #8
    352c:	4770      	bx	lr

0000352e <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    352e:	b500      	push	{lr}
    3530:	b083      	sub	sp, #12
    3532:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3534:	9b01      	ldr	r3, [sp, #4]
    3536:	2b00      	cmp	r3, #0
    3538:	d002      	beq.n	3540 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    353a:	9801      	ldr	r0, [sp, #4]
    353c:	f000 f8ee 	bl	371c <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3540:	bf00      	nop
    3542:	b003      	add	sp, #12
    3544:	f85d fb04 	ldr.w	pc, [sp], #4

00003548 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3548:	b500      	push	{lr}
    354a:	b083      	sub	sp, #12
    354c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    354e:	9b01      	ldr	r3, [sp, #4]
    3550:	2b00      	cmp	r3, #0
    3552:	d002      	beq.n	355a <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3554:	9801      	ldr	r0, [sp, #4]
    3556:	f000 f8ff 	bl	3758 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    355a:	bf00      	nop
    355c:	b003      	add	sp, #12
    355e:	f85d fb04 	ldr.w	pc, [sp], #4

00003562 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    3562:	b500      	push	{lr}
    3564:	b083      	sub	sp, #12
    3566:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3568:	9b01      	ldr	r3, [sp, #4]
    356a:	2b00      	cmp	r3, #0
    356c:	d002      	beq.n	3574 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    356e:	9801      	ldr	r0, [sp, #4]
    3570:	f000 f912 	bl	3798 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3574:	bf00      	nop
    3576:	b003      	add	sp, #12
    3578:	f85d fb04 	ldr.w	pc, [sp], #4

0000357c <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    357c:	b500      	push	{lr}
    357e:	b083      	sub	sp, #12
    3580:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3582:	9b01      	ldr	r3, [sp, #4]
    3584:	2b00      	cmp	r3, #0
    3586:	d002      	beq.n	358e <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    3588:	9801      	ldr	r0, [sp, #4]
    358a:	f000 f925 	bl	37d8 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    358e:	bf00      	nop
    3590:	b003      	add	sp, #12
    3592:	f85d fb04 	ldr.w	pc, [sp], #4

00003596 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3596:	b500      	push	{lr}
    3598:	b083      	sub	sp, #12
    359a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    359c:	9b01      	ldr	r3, [sp, #4]
    359e:	2b00      	cmp	r3, #0
    35a0:	d002      	beq.n	35a8 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    35a2:	9801      	ldr	r0, [sp, #4]
    35a4:	f000 f936 	bl	3814 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35a8:	bf00      	nop
    35aa:	b003      	add	sp, #12
    35ac:	f85d fb04 	ldr.w	pc, [sp], #4

000035b0 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    35b0:	b500      	push	{lr}
    35b2:	b083      	sub	sp, #12
    35b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35b6:	9b01      	ldr	r3, [sp, #4]
    35b8:	2b00      	cmp	r3, #0
    35ba:	d002      	beq.n	35c2 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    35bc:	9801      	ldr	r0, [sp, #4]
    35be:	f000 f949 	bl	3854 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35c2:	bf00      	nop
    35c4:	b003      	add	sp, #12
    35c6:	f85d fb04 	ldr.w	pc, [sp], #4

000035ca <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    35ca:	b500      	push	{lr}
    35cc:	b083      	sub	sp, #12
    35ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35d0:	9b01      	ldr	r3, [sp, #4]
    35d2:	2b00      	cmp	r3, #0
    35d4:	d002      	beq.n	35dc <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    35d6:	9801      	ldr	r0, [sp, #4]
    35d8:	f000 f958 	bl	388c <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35dc:	bf00      	nop
    35de:	b003      	add	sp, #12
    35e0:	f85d fb04 	ldr.w	pc, [sp], #4

000035e4 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    35e4:	b500      	push	{lr}
    35e6:	b083      	sub	sp, #12
    35e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35ea:	9b01      	ldr	r3, [sp, #4]
    35ec:	2b00      	cmp	r3, #0
    35ee:	d002      	beq.n	35f6 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    35f0:	9801      	ldr	r0, [sp, #4]
    35f2:	f000 f969 	bl	38c8 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35f6:	bf00      	nop
    35f8:	b003      	add	sp, #12
    35fa:	f85d fb04 	ldr.w	pc, [sp], #4

000035fe <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    35fe:	b500      	push	{lr}
    3600:	b083      	sub	sp, #12
    3602:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3604:	9b01      	ldr	r3, [sp, #4]
    3606:	2b00      	cmp	r3, #0
    3608:	d002      	beq.n	3610 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    360a:	9801      	ldr	r0, [sp, #4]
    360c:	f000 f978 	bl	3900 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3610:	bf00      	nop
    3612:	b003      	add	sp, #12
    3614:	f85d fb04 	ldr.w	pc, [sp], #4

00003618 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3618:	b500      	push	{lr}
    361a:	b083      	sub	sp, #12
    361c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    361e:	9b01      	ldr	r3, [sp, #4]
    3620:	2b00      	cmp	r3, #0
    3622:	d002      	beq.n	362a <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3624:	9801      	ldr	r0, [sp, #4]
    3626:	f000 f989 	bl	393c <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    362a:	bf00      	nop
    362c:	b003      	add	sp, #12
    362e:	f85d fb04 	ldr.w	pc, [sp], #4

00003632 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3632:	b500      	push	{lr}
    3634:	b083      	sub	sp, #12
    3636:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3638:	9b01      	ldr	r3, [sp, #4]
    363a:	2b00      	cmp	r3, #0
    363c:	d002      	beq.n	3644 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    363e:	9801      	ldr	r0, [sp, #4]
    3640:	f000 f998 	bl	3974 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3644:	bf00      	nop
    3646:	b003      	add	sp, #12
    3648:	f85d fb04 	ldr.w	pc, [sp], #4

0000364c <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    364c:	b500      	push	{lr}
    364e:	b083      	sub	sp, #12
    3650:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3652:	9b01      	ldr	r3, [sp, #4]
    3654:	2b00      	cmp	r3, #0
    3656:	d002      	beq.n	365e <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    3658:	9801      	ldr	r0, [sp, #4]
    365a:	f000 f9a9 	bl	39b0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    365e:	bf00      	nop
    3660:	b003      	add	sp, #12
    3662:	f85d fb04 	ldr.w	pc, [sp], #4

00003666 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3666:	b500      	push	{lr}
    3668:	b083      	sub	sp, #12
    366a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    366c:	9b01      	ldr	r3, [sp, #4]
    366e:	2b00      	cmp	r3, #0
    3670:	d002      	beq.n	3678 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3672:	9801      	ldr	r0, [sp, #4]
    3674:	f000 f9e6 	bl	3a44 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3678:	bf00      	nop
    367a:	b003      	add	sp, #12
    367c:	f85d fb04 	ldr.w	pc, [sp], #4

00003680 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3680:	b500      	push	{lr}
    3682:	b083      	sub	sp, #12
    3684:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3686:	9b01      	ldr	r3, [sp, #4]
    3688:	2b00      	cmp	r3, #0
    368a:	d002      	beq.n	3692 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    368c:	9801      	ldr	r0, [sp, #4]
    368e:	f000 fa25 	bl	3adc <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3692:	bf00      	nop
    3694:	b003      	add	sp, #12
    3696:	f85d fb04 	ldr.w	pc, [sp], #4

0000369a <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    369a:	b500      	push	{lr}
    369c:	b083      	sub	sp, #12
    369e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36a0:	9b01      	ldr	r3, [sp, #4]
    36a2:	2b00      	cmp	r3, #0
    36a4:	d002      	beq.n	36ac <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    36a6:	9801      	ldr	r0, [sp, #4]
    36a8:	f000 fa2a 	bl	3b00 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36ac:	bf00      	nop
    36ae:	b003      	add	sp, #12
    36b0:	f85d fb04 	ldr.w	pc, [sp], #4

000036b4 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    36b4:	b500      	push	{lr}
    36b6:	b083      	sub	sp, #12
    36b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36ba:	9b01      	ldr	r3, [sp, #4]
    36bc:	2b00      	cmp	r3, #0
    36be:	d002      	beq.n	36c6 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    36c0:	9801      	ldr	r0, [sp, #4]
    36c2:	f000 fa3b 	bl	3b3c <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36c6:	bf00      	nop
    36c8:	b003      	add	sp, #12
    36ca:	f85d fb04 	ldr.w	pc, [sp], #4

000036ce <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    36ce:	b500      	push	{lr}
    36d0:	b083      	sub	sp, #12
    36d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36d4:	9b01      	ldr	r3, [sp, #4]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d002      	beq.n	36e0 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    36da:	9801      	ldr	r0, [sp, #4]
    36dc:	f000 fa56 	bl	3b8c <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36e0:	bf00      	nop
    36e2:	b003      	add	sp, #12
    36e4:	f85d fb04 	ldr.w	pc, [sp], #4

000036e8 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    36e8:	b500      	push	{lr}
    36ea:	b083      	sub	sp, #12
    36ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36ee:	9b01      	ldr	r3, [sp, #4]
    36f0:	2b00      	cmp	r3, #0
    36f2:	d002      	beq.n	36fa <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    36f4:	9801      	ldr	r0, [sp, #4]
    36f6:	f000 fa79 	bl	3bec <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36fa:	bf00      	nop
    36fc:	b003      	add	sp, #12
    36fe:	f85d fb04 	ldr.w	pc, [sp], #4

00003702 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3702:	b500      	push	{lr}
    3704:	b083      	sub	sp, #12
    3706:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3708:	9b01      	ldr	r3, [sp, #4]
    370a:	2b00      	cmp	r3, #0
    370c:	d002      	beq.n	3714 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    370e:	9801      	ldr	r0, [sp, #4]
    3710:	f000 fa8a 	bl	3c28 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3714:	bf00      	nop
    3716:	b003      	add	sp, #12
    3718:	f85d fb04 	ldr.w	pc, [sp], #4

0000371c <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    371c:	b084      	sub	sp, #16
    371e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3720:	4b0b      	ldr	r3, [pc, #44]	; (3750 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    3722:	795b      	ldrb	r3, [r3, #5]
    3724:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    3726:	4b0b      	ldr	r3, [pc, #44]	; (3754 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3728:	695b      	ldr	r3, [r3, #20]
    372a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    372c:	9b02      	ldr	r3, [sp, #8]
    372e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3732:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3734:	9b03      	ldr	r3, [sp, #12]
    3736:	061b      	lsls	r3, r3, #24
    3738:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    373c:	9a02      	ldr	r2, [sp, #8]
    373e:	4313      	orrs	r3, r2
    3740:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3742:	4a04      	ldr	r2, [pc, #16]	; (3754 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3744:	9b02      	ldr	r3, [sp, #8]
    3746:	6153      	str	r3, [r2, #20]
}
    3748:	bf00      	nop
    374a:	b004      	add	sp, #16
    374c:	4770      	bx	lr
    374e:	bf00      	nop
    3750:	000079d4 	.word	0x000079d4
    3754:	40064000 	.word	0x40064000

00003758 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3758:	b084      	sub	sp, #16
    375a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    375c:	9b01      	ldr	r3, [sp, #4]
    375e:	685b      	ldr	r3, [r3, #4]
    3760:	4a0b      	ldr	r2, [pc, #44]	; (3790 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    3762:	5cd3      	ldrb	r3, [r2, r3]
    3764:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    3766:	4b0b      	ldr	r3, [pc, #44]	; (3794 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3768:	695b      	ldr	r3, [r3, #20]
    376a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    376c:	9b02      	ldr	r3, [sp, #8]
    376e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3772:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3774:	9b03      	ldr	r3, [sp, #12]
    3776:	061b      	lsls	r3, r3, #24
    3778:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    377c:	9a02      	ldr	r2, [sp, #8]
    377e:	4313      	orrs	r3, r2
    3780:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3782:	4a04      	ldr	r2, [pc, #16]	; (3794 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3784:	9b02      	ldr	r3, [sp, #8]
    3786:	6153      	str	r3, [r2, #20]
}
    3788:	bf00      	nop
    378a:	b004      	add	sp, #16
    378c:	4770      	bx	lr
    378e:	bf00      	nop
    3790:	000079d4 	.word	0x000079d4
    3794:	40064000 	.word	0x40064000

00003798 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3798:	b084      	sub	sp, #16
    379a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    379c:	9b01      	ldr	r3, [sp, #4]
    379e:	685b      	ldr	r3, [r3, #4]
    37a0:	4a0b      	ldr	r2, [pc, #44]	; (37d0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    37a2:	5cd3      	ldrb	r3, [r2, r3]
    37a4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    37a6:	4b0b      	ldr	r3, [pc, #44]	; (37d4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    37a8:	699b      	ldr	r3, [r3, #24]
    37aa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    37ac:	9b02      	ldr	r3, [sp, #8]
    37ae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    37b2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    37b4:	9b03      	ldr	r3, [sp, #12]
    37b6:	061b      	lsls	r3, r3, #24
    37b8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    37bc:	9a02      	ldr	r2, [sp, #8]
    37be:	4313      	orrs	r3, r2
    37c0:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    37c2:	4a04      	ldr	r2, [pc, #16]	; (37d4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    37c4:	9b02      	ldr	r3, [sp, #8]
    37c6:	6193      	str	r3, [r2, #24]
}
    37c8:	bf00      	nop
    37ca:	b004      	add	sp, #16
    37cc:	4770      	bx	lr
    37ce:	bf00      	nop
    37d0:	000079d4 	.word	0x000079d4
    37d4:	40064000 	.word	0x40064000

000037d8 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    37d8:	b084      	sub	sp, #16
    37da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    37dc:	4b0b      	ldr	r3, [pc, #44]	; (380c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    37de:	795b      	ldrb	r3, [r3, #5]
    37e0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    37e2:	4b0b      	ldr	r3, [pc, #44]	; (3810 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    37e4:	69db      	ldr	r3, [r3, #28]
    37e6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    37e8:	9b02      	ldr	r3, [sp, #8]
    37ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    37ee:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    37f0:	9b03      	ldr	r3, [sp, #12]
    37f2:	061b      	lsls	r3, r3, #24
    37f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    37f8:	9a02      	ldr	r2, [sp, #8]
    37fa:	4313      	orrs	r3, r2
    37fc:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    37fe:	4a04      	ldr	r2, [pc, #16]	; (3810 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3800:	9b02      	ldr	r3, [sp, #8]
    3802:	61d3      	str	r3, [r2, #28]
}
    3804:	bf00      	nop
    3806:	b004      	add	sp, #16
    3808:	4770      	bx	lr
    380a:	bf00      	nop
    380c:	000079d4 	.word	0x000079d4
    3810:	40064000 	.word	0x40064000

00003814 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3814:	b084      	sub	sp, #16
    3816:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3818:	9b01      	ldr	r3, [sp, #4]
    381a:	685b      	ldr	r3, [r3, #4]
    381c:	4a0b      	ldr	r2, [pc, #44]	; (384c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    381e:	5cd3      	ldrb	r3, [r2, r3]
    3820:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3822:	4b0b      	ldr	r3, [pc, #44]	; (3850 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3824:	69db      	ldr	r3, [r3, #28]
    3826:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3828:	9b02      	ldr	r3, [sp, #8]
    382a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    382e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3830:	9b03      	ldr	r3, [sp, #12]
    3832:	061b      	lsls	r3, r3, #24
    3834:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3838:	9a02      	ldr	r2, [sp, #8]
    383a:	4313      	orrs	r3, r2
    383c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    383e:	4a04      	ldr	r2, [pc, #16]	; (3850 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3840:	9b02      	ldr	r3, [sp, #8]
    3842:	61d3      	str	r3, [r2, #28]
}
    3844:	bf00      	nop
    3846:	b004      	add	sp, #16
    3848:	4770      	bx	lr
    384a:	bf00      	nop
    384c:	000079d4 	.word	0x000079d4
    3850:	40064000 	.word	0x40064000

00003854 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3854:	b084      	sub	sp, #16
    3856:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3858:	4b0a      	ldr	r3, [pc, #40]	; (3884 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    385a:	7b9b      	ldrb	r3, [r3, #14]
    385c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    385e:	4b0a      	ldr	r3, [pc, #40]	; (3888 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3860:	691b      	ldr	r3, [r3, #16]
    3862:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3864:	9b02      	ldr	r3, [sp, #8]
    3866:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    386a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    386c:	9b03      	ldr	r3, [sp, #12]
    386e:	011b      	lsls	r3, r3, #4
    3870:	9a02      	ldr	r2, [sp, #8]
    3872:	4313      	orrs	r3, r2
    3874:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3876:	4a04      	ldr	r2, [pc, #16]	; (3888 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3878:	9b02      	ldr	r3, [sp, #8]
    387a:	6113      	str	r3, [r2, #16]
}
    387c:	bf00      	nop
    387e:	b004      	add	sp, #16
    3880:	4770      	bx	lr
    3882:	bf00      	nop
    3884:	0000797c 	.word	0x0000797c
    3888:	40048000 	.word	0x40048000

0000388c <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    388c:	b084      	sub	sp, #16
    388e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3890:	9b01      	ldr	r3, [sp, #4]
    3892:	685b      	ldr	r3, [r3, #4]
    3894:	4a0a      	ldr	r2, [pc, #40]	; (38c0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3896:	5cd3      	ldrb	r3, [r2, r3]
    3898:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    389a:	4b0a      	ldr	r3, [pc, #40]	; (38c4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    389c:	691b      	ldr	r3, [r3, #16]
    389e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    38a0:	9b02      	ldr	r3, [sp, #8]
    38a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    38a6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    38a8:	9b03      	ldr	r3, [sp, #12]
    38aa:	011b      	lsls	r3, r3, #4
    38ac:	9a02      	ldr	r2, [sp, #8]
    38ae:	4313      	orrs	r3, r2
    38b0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    38b2:	4a04      	ldr	r2, [pc, #16]	; (38c4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    38b4:	9b02      	ldr	r3, [sp, #8]
    38b6:	6113      	str	r3, [r2, #16]
}
    38b8:	bf00      	nop
    38ba:	b004      	add	sp, #16
    38bc:	4770      	bx	lr
    38be:	bf00      	nop
    38c0:	0000797c 	.word	0x0000797c
    38c4:	40048000 	.word	0x40048000

000038c8 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    38c8:	b084      	sub	sp, #16
    38ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38cc:	4b0a      	ldr	r3, [pc, #40]	; (38f8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    38ce:	785b      	ldrb	r3, [r3, #1]
    38d0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    38d2:	4b0a      	ldr	r3, [pc, #40]	; (38fc <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    38d4:	691b      	ldr	r3, [r3, #16]
    38d6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    38d8:	9b02      	ldr	r3, [sp, #8]
    38da:	f023 030c 	bic.w	r3, r3, #12
    38de:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    38e0:	9b03      	ldr	r3, [sp, #12]
    38e2:	009b      	lsls	r3, r3, #2
    38e4:	9a02      	ldr	r2, [sp, #8]
    38e6:	4313      	orrs	r3, r2
    38e8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    38ea:	4a04      	ldr	r2, [pc, #16]	; (38fc <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    38ec:	9b02      	ldr	r3, [sp, #8]
    38ee:	6113      	str	r3, [r2, #16]
}
    38f0:	bf00      	nop
    38f2:	b004      	add	sp, #16
    38f4:	4770      	bx	lr
    38f6:	bf00      	nop
    38f8:	00007a34 	.word	0x00007a34
    38fc:	40048000 	.word	0x40048000

00003900 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3900:	b084      	sub	sp, #16
    3902:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3904:	9b01      	ldr	r3, [sp, #4]
    3906:	685b      	ldr	r3, [r3, #4]
    3908:	4a0a      	ldr	r2, [pc, #40]	; (3934 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    390a:	5cd3      	ldrb	r3, [r2, r3]
    390c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    390e:	4b0a      	ldr	r3, [pc, #40]	; (3938 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3910:	691b      	ldr	r3, [r3, #16]
    3912:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3914:	9b02      	ldr	r3, [sp, #8]
    3916:	f023 030c 	bic.w	r3, r3, #12
    391a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    391c:	9b03      	ldr	r3, [sp, #12]
    391e:	009b      	lsls	r3, r3, #2
    3920:	9a02      	ldr	r2, [sp, #8]
    3922:	4313      	orrs	r3, r2
    3924:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3926:	4a04      	ldr	r2, [pc, #16]	; (3938 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3928:	9b02      	ldr	r3, [sp, #8]
    392a:	6113      	str	r3, [r2, #16]
}
    392c:	bf00      	nop
    392e:	b004      	add	sp, #16
    3930:	4770      	bx	lr
    3932:	bf00      	nop
    3934:	00007a34 	.word	0x00007a34
    3938:	40048000 	.word	0x40048000

0000393c <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    393c:	b084      	sub	sp, #16
    393e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3940:	4b0a      	ldr	r3, [pc, #40]	; (396c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3942:	795b      	ldrb	r3, [r3, #5]
    3944:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3946:	4b0a      	ldr	r3, [pc, #40]	; (3970 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3948:	6a1b      	ldr	r3, [r3, #32]
    394a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    394c:	9b02      	ldr	r3, [sp, #8]
    394e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3952:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3954:	9b03      	ldr	r3, [sp, #12]
    3956:	061b      	lsls	r3, r3, #24
    3958:	9a02      	ldr	r2, [sp, #8]
    395a:	4313      	orrs	r3, r2
    395c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    395e:	4a04      	ldr	r2, [pc, #16]	; (3970 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3960:	9b02      	ldr	r3, [sp, #8]
    3962:	6213      	str	r3, [r2, #32]
}
    3964:	bf00      	nop
    3966:	b004      	add	sp, #16
    3968:	4770      	bx	lr
    396a:	bf00      	nop
    396c:	000079d4 	.word	0x000079d4
    3970:	40064000 	.word	0x40064000

00003974 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3974:	b084      	sub	sp, #16
    3976:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3978:	9b01      	ldr	r3, [sp, #4]
    397a:	685b      	ldr	r3, [r3, #4]
    397c:	4a0a      	ldr	r2, [pc, #40]	; (39a8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    397e:	5cd3      	ldrb	r3, [r2, r3]
    3980:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3982:	4b0a      	ldr	r3, [pc, #40]	; (39ac <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3984:	6a1b      	ldr	r3, [r3, #32]
    3986:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3988:	9b02      	ldr	r3, [sp, #8]
    398a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    398e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3990:	9b03      	ldr	r3, [sp, #12]
    3992:	061b      	lsls	r3, r3, #24
    3994:	9a02      	ldr	r2, [sp, #8]
    3996:	4313      	orrs	r3, r2
    3998:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    399a:	4a04      	ldr	r2, [pc, #16]	; (39ac <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    399c:	9b02      	ldr	r3, [sp, #8]
    399e:	6213      	str	r3, [r2, #32]
}
    39a0:	bf00      	nop
    39a2:	b004      	add	sp, #16
    39a4:	4770      	bx	lr
    39a6:	bf00      	nop
    39a8:	000079d4 	.word	0x000079d4
    39ac:	40064000 	.word	0x40064000

000039b0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39b0:	b086      	sub	sp, #24
    39b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39b4:	4b20      	ldr	r3, [pc, #128]	; (3a38 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    39b6:	795b      	ldrb	r3, [r3, #5]
    39b8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    39ba:	9b01      	ldr	r3, [sp, #4]
    39bc:	681a      	ldr	r2, [r3, #0]
    39be:	491f      	ldr	r1, [pc, #124]	; (3a3c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    39c0:	4613      	mov	r3, r2
    39c2:	00db      	lsls	r3, r3, #3
    39c4:	4413      	add	r3, r2
    39c6:	440b      	add	r3, r1
    39c8:	781b      	ldrb	r3, [r3, #0]
    39ca:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    39cc:	4b1c      	ldr	r3, [pc, #112]	; (3a40 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    39ce:	68db      	ldr	r3, [r3, #12]
    39d0:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    39d2:	9b03      	ldr	r3, [sp, #12]
    39d4:	2b03      	cmp	r3, #3
    39d6:	d813      	bhi.n	3a00 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    39d8:	9b03      	ldr	r3, [sp, #12]
    39da:	005b      	lsls	r3, r3, #1
    39dc:	3318      	adds	r3, #24
    39de:	2203      	movs	r2, #3
    39e0:	fa02 f303 	lsl.w	r3, r2, r3
    39e4:	43db      	mvns	r3, r3
    39e6:	9a05      	ldr	r2, [sp, #20]
    39e8:	4013      	ands	r3, r2
    39ea:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    39ec:	9b03      	ldr	r3, [sp, #12]
    39ee:	005b      	lsls	r3, r3, #1
    39f0:	3318      	adds	r3, #24
    39f2:	9a04      	ldr	r2, [sp, #16]
    39f4:	fa02 f303 	lsl.w	r3, r2, r3
    39f8:	9a05      	ldr	r2, [sp, #20]
    39fa:	4313      	orrs	r3, r2
    39fc:	9305      	str	r3, [sp, #20]
    39fe:	e014      	b.n	3a2a <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3a00:	9b03      	ldr	r3, [sp, #12]
    3a02:	3b04      	subs	r3, #4
    3a04:	005b      	lsls	r3, r3, #1
    3a06:	3310      	adds	r3, #16
    3a08:	2203      	movs	r2, #3
    3a0a:	fa02 f303 	lsl.w	r3, r2, r3
    3a0e:	43db      	mvns	r3, r3
    3a10:	9a05      	ldr	r2, [sp, #20]
    3a12:	4013      	ands	r3, r2
    3a14:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3a16:	9b03      	ldr	r3, [sp, #12]
    3a18:	3b04      	subs	r3, #4
    3a1a:	005b      	lsls	r3, r3, #1
    3a1c:	3310      	adds	r3, #16
    3a1e:	9a04      	ldr	r2, [sp, #16]
    3a20:	fa02 f303 	lsl.w	r3, r2, r3
    3a24:	9a05      	ldr	r2, [sp, #20]
    3a26:	4313      	orrs	r3, r2
    3a28:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3a2a:	4a05      	ldr	r2, [pc, #20]	; (3a40 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3a2c:	9b05      	ldr	r3, [sp, #20]
    3a2e:	60d3      	str	r3, [r2, #12]
}
    3a30:	bf00      	nop
    3a32:	b006      	add	sp, #24
    3a34:	4770      	bx	lr
    3a36:	bf00      	nop
    3a38:	0000797c 	.word	0x0000797c
    3a3c:	0000766c 	.word	0x0000766c
    3a40:	40048000 	.word	0x40048000

00003a44 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a44:	b086      	sub	sp, #24
    3a46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a48:	9b01      	ldr	r3, [sp, #4]
    3a4a:	685b      	ldr	r3, [r3, #4]
    3a4c:	4a20      	ldr	r2, [pc, #128]	; (3ad0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3a4e:	5cd3      	ldrb	r3, [r2, r3]
    3a50:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3a52:	9b01      	ldr	r3, [sp, #4]
    3a54:	681a      	ldr	r2, [r3, #0]
    3a56:	491f      	ldr	r1, [pc, #124]	; (3ad4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3a58:	4613      	mov	r3, r2
    3a5a:	00db      	lsls	r3, r3, #3
    3a5c:	4413      	add	r3, r2
    3a5e:	440b      	add	r3, r1
    3a60:	781b      	ldrb	r3, [r3, #0]
    3a62:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3a64:	4b1c      	ldr	r3, [pc, #112]	; (3ad8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3a66:	68db      	ldr	r3, [r3, #12]
    3a68:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3a6a:	9b03      	ldr	r3, [sp, #12]
    3a6c:	2b03      	cmp	r3, #3
    3a6e:	d813      	bhi.n	3a98 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3a70:	9b03      	ldr	r3, [sp, #12]
    3a72:	005b      	lsls	r3, r3, #1
    3a74:	3318      	adds	r3, #24
    3a76:	2203      	movs	r2, #3
    3a78:	fa02 f303 	lsl.w	r3, r2, r3
    3a7c:	43db      	mvns	r3, r3
    3a7e:	9a05      	ldr	r2, [sp, #20]
    3a80:	4013      	ands	r3, r2
    3a82:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3a84:	9b03      	ldr	r3, [sp, #12]
    3a86:	005b      	lsls	r3, r3, #1
    3a88:	3318      	adds	r3, #24
    3a8a:	9a04      	ldr	r2, [sp, #16]
    3a8c:	fa02 f303 	lsl.w	r3, r2, r3
    3a90:	9a05      	ldr	r2, [sp, #20]
    3a92:	4313      	orrs	r3, r2
    3a94:	9305      	str	r3, [sp, #20]
    3a96:	e014      	b.n	3ac2 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3a98:	9b03      	ldr	r3, [sp, #12]
    3a9a:	3b04      	subs	r3, #4
    3a9c:	005b      	lsls	r3, r3, #1
    3a9e:	3310      	adds	r3, #16
    3aa0:	2203      	movs	r2, #3
    3aa2:	fa02 f303 	lsl.w	r3, r2, r3
    3aa6:	43db      	mvns	r3, r3
    3aa8:	9a05      	ldr	r2, [sp, #20]
    3aaa:	4013      	ands	r3, r2
    3aac:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3aae:	9b03      	ldr	r3, [sp, #12]
    3ab0:	3b04      	subs	r3, #4
    3ab2:	005b      	lsls	r3, r3, #1
    3ab4:	3310      	adds	r3, #16
    3ab6:	9a04      	ldr	r2, [sp, #16]
    3ab8:	fa02 f303 	lsl.w	r3, r2, r3
    3abc:	9a05      	ldr	r2, [sp, #20]
    3abe:	4313      	orrs	r3, r2
    3ac0:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3ac2:	4a05      	ldr	r2, [pc, #20]	; (3ad8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3ac4:	9b05      	ldr	r3, [sp, #20]
    3ac6:	60d3      	str	r3, [r2, #12]
}
    3ac8:	bf00      	nop
    3aca:	b006      	add	sp, #24
    3acc:	4770      	bx	lr
    3ace:	bf00      	nop
    3ad0:	0000797c 	.word	0x0000797c
    3ad4:	0000766c 	.word	0x0000766c
    3ad8:	40048000 	.word	0x40048000

00003adc <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3adc:	b084      	sub	sp, #16
    3ade:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3ae0:	4b06      	ldr	r3, [pc, #24]	; (3afc <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3ae2:	685b      	ldr	r3, [r3, #4]
    3ae4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3ae6:	9b03      	ldr	r3, [sp, #12]
    3ae8:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3aec:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3aee:	4a03      	ldr	r2, [pc, #12]	; (3afc <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3af0:	9b03      	ldr	r3, [sp, #12]
    3af2:	6053      	str	r3, [r2, #4]
}
    3af4:	bf00      	nop
    3af6:	b004      	add	sp, #16
    3af8:	4770      	bx	lr
    3afa:	bf00      	nop
    3afc:	40048000 	.word	0x40048000

00003b00 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b00:	b084      	sub	sp, #16
    3b02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b04:	9b01      	ldr	r3, [sp, #4]
    3b06:	685b      	ldr	r3, [r3, #4]
    3b08:	4a0a      	ldr	r2, [pc, #40]	; (3b34 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3b0a:	5cd3      	ldrb	r3, [r2, r3]
    3b0c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3b0e:	4b0a      	ldr	r3, [pc, #40]	; (3b38 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3b10:	685b      	ldr	r3, [r3, #4]
    3b12:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3b14:	9b02      	ldr	r3, [sp, #8]
    3b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3b1a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3b1c:	9b03      	ldr	r3, [sp, #12]
    3b1e:	011b      	lsls	r3, r3, #4
    3b20:	9a02      	ldr	r2, [sp, #8]
    3b22:	4313      	orrs	r3, r2
    3b24:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3b26:	4a04      	ldr	r2, [pc, #16]	; (3b38 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3b28:	9b02      	ldr	r3, [sp, #8]
    3b2a:	6053      	str	r3, [r2, #4]
}
    3b2c:	bf00      	nop
    3b2e:	b004      	add	sp, #16
    3b30:	4770      	bx	lr
    3b32:	bf00      	nop
    3b34:	0000797c 	.word	0x0000797c
    3b38:	40048000 	.word	0x40048000

00003b3c <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b3c:	b084      	sub	sp, #16
    3b3e:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3b40:	9b01      	ldr	r3, [sp, #4]
    3b42:	681a      	ldr	r2, [r3, #0]
    3b44:	490f      	ldr	r1, [pc, #60]	; (3b84 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3b46:	4613      	mov	r3, r2
    3b48:	00db      	lsls	r3, r3, #3
    3b4a:	4413      	add	r3, r2
    3b4c:	440b      	add	r3, r1
    3b4e:	3304      	adds	r3, #4
    3b50:	781b      	ldrb	r3, [r3, #0]
    3b52:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3b54:	4a0c      	ldr	r2, [pc, #48]	; (3b88 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3b56:	9b03      	ldr	r3, [sp, #12]
    3b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3b5c:	490a      	ldr	r1, [pc, #40]	; (3b88 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3b5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3b62:	9b03      	ldr	r3, [sp, #12]
    3b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3b68:	4a07      	ldr	r2, [pc, #28]	; (3b88 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3b6a:	9b03      	ldr	r3, [sp, #12]
    3b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3b70:	4905      	ldr	r1, [pc, #20]	; (3b88 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3b72:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3b76:	9b03      	ldr	r3, [sp, #12]
    3b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3b7c:	bf00      	nop
    3b7e:	b004      	add	sp, #16
    3b80:	4770      	bx	lr
    3b82:	bf00      	nop
    3b84:	0000766c 	.word	0x0000766c
    3b88:	40065000 	.word	0x40065000

00003b8c <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b8c:	b086      	sub	sp, #24
    3b8e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3b90:	9b01      	ldr	r3, [sp, #4]
    3b92:	681a      	ldr	r2, [r3, #0]
    3b94:	4912      	ldr	r1, [pc, #72]	; (3be0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3b96:	4613      	mov	r3, r2
    3b98:	00db      	lsls	r3, r3, #3
    3b9a:	4413      	add	r3, r2
    3b9c:	440b      	add	r3, r1
    3b9e:	3304      	adds	r3, #4
    3ba0:	781b      	ldrb	r3, [r3, #0]
    3ba2:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ba4:	9b01      	ldr	r3, [sp, #4]
    3ba6:	685b      	ldr	r3, [r3, #4]
    3ba8:	4a0e      	ldr	r2, [pc, #56]	; (3be4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3baa:	5cd3      	ldrb	r3, [r2, r3]
    3bac:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3bae:	4a0e      	ldr	r2, [pc, #56]	; (3be8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3bb0:	9b05      	ldr	r3, [sp, #20]
    3bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3bb6:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3bb8:	9b03      	ldr	r3, [sp, #12]
    3bba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3bbe:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3bc0:	9b04      	ldr	r3, [sp, #16]
    3bc2:	061b      	lsls	r3, r3, #24
    3bc4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3bc8:	9a03      	ldr	r2, [sp, #12]
    3bca:	4313      	orrs	r3, r2
    3bcc:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3bce:	4906      	ldr	r1, [pc, #24]	; (3be8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3bd0:	9b05      	ldr	r3, [sp, #20]
    3bd2:	9a03      	ldr	r2, [sp, #12]
    3bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3bd8:	bf00      	nop
    3bda:	b006      	add	sp, #24
    3bdc:	4770      	bx	lr
    3bde:	bf00      	nop
    3be0:	0000766c 	.word	0x0000766c
    3be4:	00007a04 	.word	0x00007a04
    3be8:	40065000 	.word	0x40065000

00003bec <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3bec:	b084      	sub	sp, #16
    3bee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3bf0:	4b0b      	ldr	r3, [pc, #44]	; (3c20 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3bf2:	7f1b      	ldrb	r3, [r3, #28]
    3bf4:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3bf6:	4b0b      	ldr	r3, [pc, #44]	; (3c24 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3bf8:	685b      	ldr	r3, [r3, #4]
    3bfa:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3bfc:	9b02      	ldr	r3, [sp, #8]
    3bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3c02:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3c04:	9b03      	ldr	r3, [sp, #12]
    3c06:	031b      	lsls	r3, r3, #12
    3c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3c0c:	9a02      	ldr	r2, [sp, #8]
    3c0e:	4313      	orrs	r3, r2
    3c10:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3c12:	4a04      	ldr	r2, [pc, #16]	; (3c24 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3c14:	9b02      	ldr	r3, [sp, #8]
    3c16:	6053      	str	r3, [r2, #4]
}
    3c18:	bf00      	nop
    3c1a:	b004      	add	sp, #16
    3c1c:	4770      	bx	lr
    3c1e:	bf00      	nop
    3c20:	0000797c 	.word	0x0000797c
    3c24:	40048000 	.word	0x40048000

00003c28 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c28:	b084      	sub	sp, #16
    3c2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c2c:	9b01      	ldr	r3, [sp, #4]
    3c2e:	685b      	ldr	r3, [r3, #4]
    3c30:	4a0b      	ldr	r2, [pc, #44]	; (3c60 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3c32:	5cd3      	ldrb	r3, [r2, r3]
    3c34:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3c36:	4b0b      	ldr	r3, [pc, #44]	; (3c64 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3c38:	685b      	ldr	r3, [r3, #4]
    3c3a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3c3c:	9b02      	ldr	r3, [sp, #8]
    3c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3c42:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3c44:	9b03      	ldr	r3, [sp, #12]
    3c46:	031b      	lsls	r3, r3, #12
    3c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3c4c:	9a02      	ldr	r2, [sp, #8]
    3c4e:	4313      	orrs	r3, r2
    3c50:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3c52:	4a04      	ldr	r2, [pc, #16]	; (3c64 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3c54:	9b02      	ldr	r3, [sp, #8]
    3c56:	6053      	str	r3, [r2, #4]
}
    3c58:	bf00      	nop
    3c5a:	b004      	add	sp, #16
    3c5c:	4770      	bx	lr
    3c5e:	bf00      	nop
    3c60:	0000797c 	.word	0x0000797c
    3c64:	40048000 	.word	0x40048000

00003c68 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3c68:	b500      	push	{lr}
    3c6a:	b085      	sub	sp, #20
    3c6c:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3c6e:	2300      	movs	r3, #0
    3c70:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3c74:	9b01      	ldr	r3, [sp, #4]
    3c76:	2b00      	cmp	r3, #0
    3c78:	d037      	beq.n	3cea <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3c7a:	2300      	movs	r3, #0
    3c7c:	9303      	str	r3, [sp, #12]
    3c7e:	e02b      	b.n	3cd8 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3c80:	4b29      	ldr	r3, [pc, #164]	; (3d28 <DisableSafeClock+0xc0>)
    3c82:	6819      	ldr	r1, [r3, #0]
    3c84:	9a03      	ldr	r2, [sp, #12]
    3c86:	4613      	mov	r3, r2
    3c88:	005b      	lsls	r3, r3, #1
    3c8a:	4413      	add	r3, r2
    3c8c:	009b      	lsls	r3, r3, #2
    3c8e:	440b      	add	r3, r1
    3c90:	3314      	adds	r3, #20
    3c92:	681b      	ldr	r3, [r3, #0]
    3c94:	2b05      	cmp	r3, #5
    3c96:	d11c      	bne.n	3cd2 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3c98:	2301      	movs	r3, #1
    3c9a:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3c9e:	4b22      	ldr	r3, [pc, #136]	; (3d28 <DisableSafeClock+0xc0>)
    3ca0:	6819      	ldr	r1, [r3, #0]
    3ca2:	9a03      	ldr	r2, [sp, #12]
    3ca4:	4613      	mov	r3, r2
    3ca6:	005b      	lsls	r3, r3, #1
    3ca8:	4413      	add	r3, r2
    3caa:	009b      	lsls	r3, r3, #2
    3cac:	440b      	add	r3, r1
    3cae:	3318      	adds	r3, #24
    3cb0:	881b      	ldrh	r3, [r3, #0]
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	d118      	bne.n	3ce8 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3cb6:	4b1d      	ldr	r3, [pc, #116]	; (3d2c <DisableSafeClock+0xc4>)
    3cb8:	791b      	ldrb	r3, [r3, #4]
    3cba:	4619      	mov	r1, r3
    3cbc:	4a1c      	ldr	r2, [pc, #112]	; (3d30 <DisableSafeClock+0xc8>)
    3cbe:	460b      	mov	r3, r1
    3cc0:	005b      	lsls	r3, r3, #1
    3cc2:	440b      	add	r3, r1
    3cc4:	009b      	lsls	r3, r3, #2
    3cc6:	4413      	add	r3, r2
    3cc8:	3308      	adds	r3, #8
    3cca:	681b      	ldr	r3, [r3, #0]
    3ccc:	2005      	movs	r0, #5
    3cce:	4798      	blx	r3
                }
                break;
    3cd0:	e00a      	b.n	3ce8 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3cd2:	9b03      	ldr	r3, [sp, #12]
    3cd4:	3301      	adds	r3, #1
    3cd6:	9303      	str	r3, [sp, #12]
    3cd8:	4b13      	ldr	r3, [pc, #76]	; (3d28 <DisableSafeClock+0xc0>)
    3cda:	681b      	ldr	r3, [r3, #0]
    3cdc:	7a1b      	ldrb	r3, [r3, #8]
    3cde:	461a      	mov	r2, r3
    3ce0:	9b03      	ldr	r3, [sp, #12]
    3ce2:	4293      	cmp	r3, r2
    3ce4:	d3cc      	bcc.n	3c80 <DisableSafeClock+0x18>
    3ce6:	e000      	b.n	3cea <DisableSafeClock+0x82>
                break;
    3ce8:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3cea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3cee:	f083 0301 	eor.w	r3, r3, #1
    3cf2:	b2db      	uxtb	r3, r3
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	d013      	beq.n	3d20 <DisableSafeClock+0xb8>
    3cf8:	4b0e      	ldr	r3, [pc, #56]	; (3d34 <DisableSafeClock+0xcc>)
    3cfa:	781b      	ldrb	r3, [r3, #0]
    3cfc:	f083 0301 	eor.w	r3, r3, #1
    3d00:	b2db      	uxtb	r3, r3
    3d02:	2b00      	cmp	r3, #0
    3d04:	d00c      	beq.n	3d20 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3d06:	4b09      	ldr	r3, [pc, #36]	; (3d2c <DisableSafeClock+0xc4>)
    3d08:	791b      	ldrb	r3, [r3, #4]
    3d0a:	4619      	mov	r1, r3
    3d0c:	4a08      	ldr	r2, [pc, #32]	; (3d30 <DisableSafeClock+0xc8>)
    3d0e:	460b      	mov	r3, r1
    3d10:	005b      	lsls	r3, r3, #1
    3d12:	440b      	add	r3, r1
    3d14:	009b      	lsls	r3, r3, #2
    3d16:	4413      	add	r3, r2
    3d18:	3308      	adds	r3, #8
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	2005      	movs	r0, #5
    3d1e:	4798      	blx	r3
    }
}
    3d20:	bf00      	nop
    3d22:	b005      	add	sp, #20
    3d24:	f85d fb04 	ldr.w	pc, [sp], #4
    3d28:	1fff8ba8 	.word	0x1fff8ba8
    3d2c:	000075fc 	.word	0x000075fc
    3d30:	00007c2c 	.word	0x00007c2c
    3d34:	1fff8b18 	.word	0x1fff8b18

00003d38 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3d38:	4b06      	ldr	r3, [pc, #24]	; (3d54 <SetFircToResetValue_TrustedCall+0x1c>)
    3d3a:	2200      	movs	r2, #0
    3d3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3d40:	4b04      	ldr	r3, [pc, #16]	; (3d54 <SetFircToResetValue_TrustedCall+0x1c>)
    3d42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d46:	4a03      	ldr	r2, [pc, #12]	; (3d54 <SetFircToResetValue_TrustedCall+0x1c>)
    3d48:	f043 0301 	orr.w	r3, r3, #1
    3d4c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3d50:	bf00      	nop
    3d52:	4770      	bx	lr
    3d54:	40064000 	.word	0x40064000

00003d58 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3d58:	b084      	sub	sp, #16
    3d5a:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3d5c:	2303      	movs	r3, #3
    3d5e:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3d60:	2300      	movs	r3, #0
    3d62:	9302      	str	r3, [sp, #8]
    3d64:	e028      	b.n	3db8 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3d66:	9b01      	ldr	r3, [sp, #4]
    3d68:	9a02      	ldr	r2, [sp, #8]
    3d6a:	320d      	adds	r2, #13
    3d6c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3d70:	2b28      	cmp	r3, #40	; 0x28
    3d72:	d10b      	bne.n	3d8c <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3d74:	9a01      	ldr	r2, [sp, #4]
    3d76:	9b02      	ldr	r3, [sp, #8]
    3d78:	330d      	adds	r3, #13
    3d7a:	00db      	lsls	r3, r3, #3
    3d7c:	4413      	add	r3, r2
    3d7e:	685b      	ldr	r3, [r3, #4]
    3d80:	4a2b      	ldr	r2, [pc, #172]	; (3e30 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3d82:	5cd3      	ldrb	r3, [r2, r3]
    3d84:	011b      	lsls	r3, r3, #4
    3d86:	9a03      	ldr	r2, [sp, #12]
    3d88:	4313      	orrs	r3, r2
    3d8a:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3d8c:	9b01      	ldr	r3, [sp, #4]
    3d8e:	9a02      	ldr	r2, [sp, #8]
    3d90:	320d      	adds	r2, #13
    3d92:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3d96:	2b29      	cmp	r3, #41	; 0x29
    3d98:	d10b      	bne.n	3db2 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3d9a:	9a01      	ldr	r2, [sp, #4]
    3d9c:	9b02      	ldr	r3, [sp, #8]
    3d9e:	330d      	adds	r3, #13
    3da0:	00db      	lsls	r3, r3, #3
    3da2:	4413      	add	r3, r2
    3da4:	685b      	ldr	r3, [r3, #4]
    3da6:	4a23      	ldr	r2, [pc, #140]	; (3e34 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3da8:	5cd3      	ldrb	r3, [r2, r3]
    3daa:	009b      	lsls	r3, r3, #2
    3dac:	9a03      	ldr	r2, [sp, #12]
    3dae:	4313      	orrs	r3, r2
    3db0:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3db2:	9b02      	ldr	r3, [sp, #8]
    3db4:	3301      	adds	r3, #1
    3db6:	9302      	str	r3, [sp, #8]
    3db8:	9b01      	ldr	r3, [sp, #4]
    3dba:	7adb      	ldrb	r3, [r3, #11]
    3dbc:	461a      	mov	r2, r3
    3dbe:	9b02      	ldr	r3, [sp, #8]
    3dc0:	4293      	cmp	r3, r2
    3dc2:	d3d0      	bcc.n	3d66 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3dc4:	2300      	movs	r3, #0
    3dc6:	9302      	str	r3, [sp, #8]
    3dc8:	e026      	b.n	3e18 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    3dca:	9a01      	ldr	r2, [sp, #4]
    3dcc:	9b02      	ldr	r3, [sp, #8]
    3dce:	334e      	adds	r3, #78	; 0x4e
    3dd0:	00db      	lsls	r3, r3, #3
    3dd2:	4413      	add	r3, r2
    3dd4:	685b      	ldr	r3, [r3, #4]
    3dd6:	2b12      	cmp	r3, #18
    3dd8:	d109      	bne.n	3dee <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3dda:	9a01      	ldr	r2, [sp, #4]
    3ddc:	9b02      	ldr	r3, [sp, #8]
    3dde:	334e      	adds	r3, #78	; 0x4e
    3de0:	00db      	lsls	r3, r3, #3
    3de2:	4413      	add	r3, r2
    3de4:	891b      	ldrh	r3, [r3, #8]
    3de6:	005b      	lsls	r3, r3, #1
    3de8:	9a03      	ldr	r2, [sp, #12]
    3dea:	4313      	orrs	r3, r2
    3dec:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3dee:	9a01      	ldr	r2, [sp, #4]
    3df0:	9b02      	ldr	r3, [sp, #8]
    3df2:	334e      	adds	r3, #78	; 0x4e
    3df4:	00db      	lsls	r3, r3, #3
    3df6:	4413      	add	r3, r2
    3df8:	685b      	ldr	r3, [r3, #4]
    3dfa:	2b13      	cmp	r3, #19
    3dfc:	d109      	bne.n	3e12 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3dfe:	9a01      	ldr	r2, [sp, #4]
    3e00:	9b02      	ldr	r3, [sp, #8]
    3e02:	334e      	adds	r3, #78	; 0x4e
    3e04:	00db      	lsls	r3, r3, #3
    3e06:	4413      	add	r3, r2
    3e08:	891b      	ldrh	r3, [r3, #8]
    3e0a:	461a      	mov	r2, r3
    3e0c:	9b03      	ldr	r3, [sp, #12]
    3e0e:	4313      	orrs	r3, r2
    3e10:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3e12:	9b02      	ldr	r3, [sp, #8]
    3e14:	3301      	adds	r3, #1
    3e16:	9302      	str	r3, [sp, #8]
    3e18:	9b01      	ldr	r3, [sp, #4]
    3e1a:	7c1b      	ldrb	r3, [r3, #16]
    3e1c:	461a      	mov	r2, r3
    3e1e:	9b02      	ldr	r3, [sp, #8]
    3e20:	4293      	cmp	r3, r2
    3e22:	d3d2      	bcc.n	3dca <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3e24:	4a04      	ldr	r2, [pc, #16]	; (3e38 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3e26:	9b03      	ldr	r3, [sp, #12]
    3e28:	6113      	str	r3, [r2, #16]
}
    3e2a:	bf00      	nop
    3e2c:	b004      	add	sp, #16
    3e2e:	4770      	bx	lr
    3e30:	0000797c 	.word	0x0000797c
    3e34:	00007a34 	.word	0x00007a34
    3e38:	40048000 	.word	0x40048000

00003e3c <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    3e3c:	b500      	push	{lr}
    3e3e:	b089      	sub	sp, #36	; 0x24
    3e40:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3e42:	2300      	movs	r3, #0
    3e44:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    3e48:	4a21      	ldr	r2, [pc, #132]	; (3ed0 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    3e4a:	9b01      	ldr	r3, [sp, #4]
    3e4c:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    3e4e:	4b21      	ldr	r3, [pc, #132]	; (3ed4 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3e50:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e54:	f003 0301 	and.w	r3, r3, #1
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d12e      	bne.n	3eba <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    3e5c:	4b1e      	ldr	r3, [pc, #120]	; (3ed8 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3e5e:	2200      	movs	r2, #0
    3e60:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    3e62:	f7ff ff69 	bl	3d38 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e66:	aa03      	add	r2, sp, #12
    3e68:	a904      	add	r1, sp, #16
    3e6a:	a805      	add	r0, sp, #20
    3e6c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e70:	f7fe f8ae 	bl	1fd0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3e74:	4b17      	ldr	r3, [pc, #92]	; (3ed4 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3e76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e7a:	0e1b      	lsrs	r3, r3, #24
    3e7c:	f003 0301 	and.w	r3, r3, #1
    3e80:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e82:	9a03      	ldr	r2, [sp, #12]
    3e84:	a904      	add	r1, sp, #16
    3e86:	ab05      	add	r3, sp, #20
    3e88:	4618      	mov	r0, r3
    3e8a:	f7fe f8bb 	bl	2004 <Clock_Ip_TimeoutExpired>
    3e8e:	4603      	mov	r3, r0
    3e90:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    3e94:	9b06      	ldr	r3, [sp, #24]
    3e96:	2b00      	cmp	r3, #0
    3e98:	d106      	bne.n	3ea8 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    3e9a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e9e:	f083 0301 	eor.w	r3, r3, #1
    3ea2:	b2db      	uxtb	r3, r3
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d1e5      	bne.n	3e74 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    3ea8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3eac:	2b00      	cmp	r3, #0
    3eae:	d007      	beq.n	3ec0 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3eb0:	2105      	movs	r1, #5
    3eb2:	2001      	movs	r0, #1
    3eb4:	f7fe f87c 	bl	1fb0 <Clock_Ip_ReportClockErrors>
    3eb8:	e002      	b.n	3ec0 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    3eba:	4b07      	ldr	r3, [pc, #28]	; (3ed8 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3ebc:	2201      	movs	r2, #1
    3ebe:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    3ec0:	9801      	ldr	r0, [sp, #4]
    3ec2:	f7ff ff49 	bl	3d58 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    3ec6:	bf00      	nop
    3ec8:	b009      	add	sp, #36	; 0x24
    3eca:	f85d fb04 	ldr.w	pc, [sp], #4
    3ece:	bf00      	nop
    3ed0:	1fff8ba8 	.word	0x1fff8ba8
    3ed4:	40064000 	.word	0x40064000
    3ed8:	1fff8b18 	.word	0x1fff8b18

00003edc <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    3edc:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    3ede:	2300      	movs	r3, #0
    3ee0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3ee2:	4b29      	ldr	r3, [pc, #164]	; (3f88 <getFircConfig+0xac>)
    3ee4:	681b      	ldr	r3, [r3, #0]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d024      	beq.n	3f34 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3eea:	2300      	movs	r3, #0
    3eec:	9301      	str	r3, [sp, #4]
    3eee:	e01a      	b.n	3f26 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3ef0:	4b25      	ldr	r3, [pc, #148]	; (3f88 <getFircConfig+0xac>)
    3ef2:	6819      	ldr	r1, [r3, #0]
    3ef4:	9a01      	ldr	r2, [sp, #4]
    3ef6:	4613      	mov	r3, r2
    3ef8:	005b      	lsls	r3, r3, #1
    3efa:	4413      	add	r3, r2
    3efc:	009b      	lsls	r3, r3, #2
    3efe:	440b      	add	r3, r1
    3f00:	3314      	adds	r3, #20
    3f02:	681b      	ldr	r3, [r3, #0]
    3f04:	2b05      	cmp	r3, #5
    3f06:	d10b      	bne.n	3f20 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    3f08:	4b1f      	ldr	r3, [pc, #124]	; (3f88 <getFircConfig+0xac>)
    3f0a:	6819      	ldr	r1, [r3, #0]
    3f0c:	9a01      	ldr	r2, [sp, #4]
    3f0e:	4613      	mov	r3, r2
    3f10:	005b      	lsls	r3, r3, #1
    3f12:	4413      	add	r3, r2
    3f14:	009b      	lsls	r3, r3, #2
    3f16:	3310      	adds	r3, #16
    3f18:	440b      	add	r3, r1
    3f1a:	3304      	adds	r3, #4
    3f1c:	9300      	str	r3, [sp, #0]
                break;
    3f1e:	e009      	b.n	3f34 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3f20:	9b01      	ldr	r3, [sp, #4]
    3f22:	3301      	adds	r3, #1
    3f24:	9301      	str	r3, [sp, #4]
    3f26:	4b18      	ldr	r3, [pc, #96]	; (3f88 <getFircConfig+0xac>)
    3f28:	681b      	ldr	r3, [r3, #0]
    3f2a:	7a1b      	ldrb	r3, [r3, #8]
    3f2c:	461a      	mov	r2, r3
    3f2e:	9b01      	ldr	r3, [sp, #4]
    3f30:	4293      	cmp	r3, r2
    3f32:	d3dd      	bcc.n	3ef0 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3f34:	9b00      	ldr	r3, [sp, #0]
    3f36:	2b00      	cmp	r3, #0
    3f38:	d121      	bne.n	3f7e <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    3f3a:	4b14      	ldr	r3, [pc, #80]	; (3f8c <getFircConfig+0xb0>)
    3f3c:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    3f3e:	4b13      	ldr	r3, [pc, #76]	; (3f8c <getFircConfig+0xb0>)
    3f40:	2205      	movs	r2, #5
    3f42:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    3f44:	4b12      	ldr	r3, [pc, #72]	; (3f90 <getFircConfig+0xb4>)
    3f46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f4a:	b29b      	uxth	r3, r3
    3f4c:	f003 0301 	and.w	r3, r3, #1
    3f50:	b29a      	uxth	r2, r3
    3f52:	4b0e      	ldr	r3, [pc, #56]	; (3f8c <getFircConfig+0xb0>)
    3f54:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    3f56:	4b0e      	ldr	r3, [pc, #56]	; (3f90 <getFircConfig+0xb4>)
    3f58:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3f5c:	b2db      	uxtb	r3, r3
    3f5e:	f003 0303 	and.w	r3, r3, #3
    3f62:	b2da      	uxtb	r2, r3
    3f64:	4b09      	ldr	r3, [pc, #36]	; (3f8c <getFircConfig+0xb0>)
    3f66:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    3f68:	4b09      	ldr	r3, [pc, #36]	; (3f90 <getFircConfig+0xb4>)
    3f6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f6e:	b2db      	uxtb	r3, r3
    3f70:	10db      	asrs	r3, r3, #3
    3f72:	b2db      	uxtb	r3, r3
    3f74:	f003 0301 	and.w	r3, r3, #1
    3f78:	b2da      	uxtb	r2, r3
    3f7a:	4b04      	ldr	r3, [pc, #16]	; (3f8c <getFircConfig+0xb0>)
    3f7c:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    3f7e:	9b00      	ldr	r3, [sp, #0]
}
    3f80:	4618      	mov	r0, r3
    3f82:	b002      	add	sp, #8
    3f84:	4770      	bx	lr
    3f86:	bf00      	nop
    3f88:	1fff8ba8 	.word	0x1fff8ba8
    3f8c:	1fff8c14 	.word	0x1fff8c14
    3f90:	40064000 	.word	0x40064000

00003f94 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    3f94:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    3f96:	2300      	movs	r3, #0
    3f98:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3f9a:	4b20      	ldr	r3, [pc, #128]	; (401c <getSoscConfig+0x88>)
    3f9c:	681b      	ldr	r3, [r3, #0]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d024      	beq.n	3fec <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3fa2:	2300      	movs	r3, #0
    3fa4:	9301      	str	r3, [sp, #4]
    3fa6:	e01a      	b.n	3fde <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    3fa8:	4b1c      	ldr	r3, [pc, #112]	; (401c <getSoscConfig+0x88>)
    3faa:	6819      	ldr	r1, [r3, #0]
    3fac:	9a01      	ldr	r2, [sp, #4]
    3fae:	4613      	mov	r3, r2
    3fb0:	009b      	lsls	r3, r3, #2
    3fb2:	4413      	add	r3, r2
    3fb4:	009b      	lsls	r3, r3, #2
    3fb6:	440b      	add	r3, r1
    3fb8:	332c      	adds	r3, #44	; 0x2c
    3fba:	681b      	ldr	r3, [r3, #0]
    3fbc:	2b08      	cmp	r3, #8
    3fbe:	d10b      	bne.n	3fd8 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    3fc0:	4b16      	ldr	r3, [pc, #88]	; (401c <getSoscConfig+0x88>)
    3fc2:	6819      	ldr	r1, [r3, #0]
    3fc4:	9a01      	ldr	r2, [sp, #4]
    3fc6:	4613      	mov	r3, r2
    3fc8:	009b      	lsls	r3, r3, #2
    3fca:	4413      	add	r3, r2
    3fcc:	009b      	lsls	r3, r3, #2
    3fce:	3328      	adds	r3, #40	; 0x28
    3fd0:	440b      	add	r3, r1
    3fd2:	3304      	adds	r3, #4
    3fd4:	9300      	str	r3, [sp, #0]
                break;
    3fd6:	e009      	b.n	3fec <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3fd8:	9b01      	ldr	r3, [sp, #4]
    3fda:	3301      	adds	r3, #1
    3fdc:	9301      	str	r3, [sp, #4]
    3fde:	4b0f      	ldr	r3, [pc, #60]	; (401c <getSoscConfig+0x88>)
    3fe0:	681b      	ldr	r3, [r3, #0]
    3fe2:	7a5b      	ldrb	r3, [r3, #9]
    3fe4:	461a      	mov	r2, r3
    3fe6:	9b01      	ldr	r3, [sp, #4]
    3fe8:	4293      	cmp	r3, r2
    3fea:	d3dd      	bcc.n	3fa8 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3fec:	9b00      	ldr	r3, [sp, #0]
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d110      	bne.n	4014 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    3ff2:	4b0b      	ldr	r3, [pc, #44]	; (4020 <getSoscConfig+0x8c>)
    3ff4:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    3ff6:	4b0a      	ldr	r3, [pc, #40]	; (4020 <getSoscConfig+0x8c>)
    3ff8:	2208      	movs	r2, #8
    3ffa:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    3ffc:	4b09      	ldr	r3, [pc, #36]	; (4024 <getSoscConfig+0x90>)
    3ffe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4002:	b29b      	uxth	r3, r3
    4004:	f003 0301 	and.w	r3, r3, #1
    4008:	b29a      	uxth	r2, r3
    400a:	4b05      	ldr	r3, [pc, #20]	; (4020 <getSoscConfig+0x8c>)
    400c:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    400e:	4b04      	ldr	r3, [pc, #16]	; (4020 <getSoscConfig+0x8c>)
    4010:	4a05      	ldr	r2, [pc, #20]	; (4028 <getSoscConfig+0x94>)
    4012:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4014:	9b00      	ldr	r3, [sp, #0]
}
    4016:	4618      	mov	r0, r3
    4018:	b002      	add	sp, #8
    401a:	4770      	bx	lr
    401c:	1fff8ba8 	.word	0x1fff8ba8
    4020:	1fff8c20 	.word	0x1fff8c20
    4024:	40064000 	.word	0x40064000
    4028:	02625a00 	.word	0x02625a00

0000402c <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    402c:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    402e:	2300      	movs	r3, #0
    4030:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4032:	4b28      	ldr	r3, [pc, #160]	; (40d4 <getSpllConfig+0xa8>)
    4034:	681b      	ldr	r3, [r3, #0]
    4036:	2b00      	cmp	r3, #0
    4038:	d023      	beq.n	4082 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    403a:	2300      	movs	r3, #0
    403c:	9301      	str	r3, [sp, #4]
    403e:	e019      	b.n	4074 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4040:	4b24      	ldr	r3, [pc, #144]	; (40d4 <getSpllConfig+0xa8>)
    4042:	6819      	ldr	r1, [r3, #0]
    4044:	9a01      	ldr	r2, [sp, #4]
    4046:	4613      	mov	r3, r2
    4048:	009b      	lsls	r3, r3, #2
    404a:	4413      	add	r3, r2
    404c:	00db      	lsls	r3, r3, #3
    404e:	440b      	add	r3, r1
    4050:	3340      	adds	r3, #64	; 0x40
    4052:	681b      	ldr	r3, [r3, #0]
    4054:	2b09      	cmp	r3, #9
    4056:	d10a      	bne.n	406e <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4058:	4b1e      	ldr	r3, [pc, #120]	; (40d4 <getSpllConfig+0xa8>)
    405a:	6819      	ldr	r1, [r3, #0]
    405c:	9a01      	ldr	r2, [sp, #4]
    405e:	4613      	mov	r3, r2
    4060:	009b      	lsls	r3, r3, #2
    4062:	4413      	add	r3, r2
    4064:	00db      	lsls	r3, r3, #3
    4066:	3340      	adds	r3, #64	; 0x40
    4068:	440b      	add	r3, r1
    406a:	9300      	str	r3, [sp, #0]
                break;
    406c:	e009      	b.n	4082 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    406e:	9b01      	ldr	r3, [sp, #4]
    4070:	3301      	adds	r3, #1
    4072:	9301      	str	r3, [sp, #4]
    4074:	4b17      	ldr	r3, [pc, #92]	; (40d4 <getSpllConfig+0xa8>)
    4076:	681b      	ldr	r3, [r3, #0]
    4078:	7a9b      	ldrb	r3, [r3, #10]
    407a:	461a      	mov	r2, r3
    407c:	9b01      	ldr	r3, [sp, #4]
    407e:	4293      	cmp	r3, r2
    4080:	d3de      	bcc.n	4040 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4082:	9b00      	ldr	r3, [sp, #0]
    4084:	2b00      	cmp	r3, #0
    4086:	d121      	bne.n	40cc <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4088:	4b13      	ldr	r3, [pc, #76]	; (40d8 <getSpllConfig+0xac>)
    408a:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    408c:	4b12      	ldr	r3, [pc, #72]	; (40d8 <getSpllConfig+0xac>)
    408e:	2209      	movs	r2, #9
    4090:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4092:	4b12      	ldr	r3, [pc, #72]	; (40dc <getSpllConfig+0xb0>)
    4094:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4098:	b29b      	uxth	r3, r3
    409a:	f003 0301 	and.w	r3, r3, #1
    409e:	b29a      	uxth	r2, r3
    40a0:	4b0d      	ldr	r3, [pc, #52]	; (40d8 <getSpllConfig+0xac>)
    40a2:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    40a4:	4b0d      	ldr	r3, [pc, #52]	; (40dc <getSpllConfig+0xb0>)
    40a6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    40aa:	0a1b      	lsrs	r3, r3, #8
    40ac:	b2db      	uxtb	r3, r3
    40ae:	f003 0307 	and.w	r3, r3, #7
    40b2:	b2da      	uxtb	r2, r3
    40b4:	4b08      	ldr	r3, [pc, #32]	; (40d8 <getSpllConfig+0xac>)
    40b6:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    40b8:	4b08      	ldr	r3, [pc, #32]	; (40dc <getSpllConfig+0xb0>)
    40ba:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    40be:	0c1b      	lsrs	r3, r3, #16
    40c0:	b2db      	uxtb	r3, r3
    40c2:	f003 031f 	and.w	r3, r3, #31
    40c6:	b2da      	uxtb	r2, r3
    40c8:	4b03      	ldr	r3, [pc, #12]	; (40d8 <getSpllConfig+0xac>)
    40ca:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    40cc:	9b00      	ldr	r3, [sp, #0]
}
    40ce:	4618      	mov	r0, r3
    40d0:	b002      	add	sp, #8
    40d2:	4770      	bx	lr
    40d4:	1fff8ba8 	.word	0x1fff8ba8
    40d8:	1fff8c34 	.word	0x1fff8c34
    40dc:	40064000 	.word	0x40064000

000040e0 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    40e0:	b086      	sub	sp, #24
    40e2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    40e4:	2300      	movs	r3, #0
    40e6:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    40e8:	9b01      	ldr	r3, [sp, #4]
    40ea:	2b1b      	cmp	r3, #27
    40ec:	d00f      	beq.n	410e <getSelectorConfig+0x2e>
    40ee:	9b01      	ldr	r3, [sp, #4]
    40f0:	2b1b      	cmp	r3, #27
    40f2:	d80f      	bhi.n	4114 <getSelectorConfig+0x34>
    40f4:	9b01      	ldr	r3, [sp, #4]
    40f6:	2b19      	cmp	r3, #25
    40f8:	d003      	beq.n	4102 <getSelectorConfig+0x22>
    40fa:	9b01      	ldr	r3, [sp, #4]
    40fc:	2b1a      	cmp	r3, #26
    40fe:	d003      	beq.n	4108 <getSelectorConfig+0x28>
    4100:	e008      	b.n	4114 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4102:	2300      	movs	r3, #0
    4104:	9304      	str	r3, [sp, #16]
            break;
    4106:	e008      	b.n	411a <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4108:	2301      	movs	r3, #1
    410a:	9304      	str	r3, [sp, #16]
            break;
    410c:	e005      	b.n	411a <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    410e:	2302      	movs	r3, #2
    4110:	9304      	str	r3, [sp, #16]
            break;
    4112:	e002      	b.n	411a <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4114:	2300      	movs	r3, #0
    4116:	9304      	str	r3, [sp, #16]
            break;
    4118:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    411a:	4b36      	ldr	r3, [pc, #216]	; (41f4 <getSelectorConfig+0x114>)
    411c:	681b      	ldr	r3, [r3, #0]
    411e:	2b00      	cmp	r3, #0
    4120:	d01d      	beq.n	415e <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4122:	2300      	movs	r3, #0
    4124:	9303      	str	r3, [sp, #12]
    4126:	e013      	b.n	4150 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4128:	4b32      	ldr	r3, [pc, #200]	; (41f4 <getSelectorConfig+0x114>)
    412a:	681b      	ldr	r3, [r3, #0]
    412c:	9a03      	ldr	r2, [sp, #12]
    412e:	320d      	adds	r2, #13
    4130:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4134:	9a01      	ldr	r2, [sp, #4]
    4136:	429a      	cmp	r2, r3
    4138:	d107      	bne.n	414a <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    413a:	4b2e      	ldr	r3, [pc, #184]	; (41f4 <getSelectorConfig+0x114>)
    413c:	681a      	ldr	r2, [r3, #0]
    413e:	9b03      	ldr	r3, [sp, #12]
    4140:	330d      	adds	r3, #13
    4142:	00db      	lsls	r3, r3, #3
    4144:	4413      	add	r3, r2
    4146:	9305      	str	r3, [sp, #20]
                break;
    4148:	e009      	b.n	415e <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    414a:	9b03      	ldr	r3, [sp, #12]
    414c:	3301      	adds	r3, #1
    414e:	9303      	str	r3, [sp, #12]
    4150:	4b28      	ldr	r3, [pc, #160]	; (41f4 <getSelectorConfig+0x114>)
    4152:	681b      	ldr	r3, [r3, #0]
    4154:	7adb      	ldrb	r3, [r3, #11]
    4156:	461a      	mov	r2, r3
    4158:	9b03      	ldr	r3, [sp, #12]
    415a:	4293      	cmp	r3, r2
    415c:	d3e4      	bcc.n	4128 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    415e:	9b05      	ldr	r3, [sp, #20]
    4160:	2b00      	cmp	r3, #0
    4162:	d140      	bne.n	41e6 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4164:	9b04      	ldr	r3, [sp, #16]
    4166:	00db      	lsls	r3, r3, #3
    4168:	4a23      	ldr	r2, [pc, #140]	; (41f8 <getSelectorConfig+0x118>)
    416a:	4413      	add	r3, r2
    416c:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    416e:	4922      	ldr	r1, [pc, #136]	; (41f8 <getSelectorConfig+0x118>)
    4170:	9b04      	ldr	r3, [sp, #16]
    4172:	9a01      	ldr	r2, [sp, #4]
    4174:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4178:	9b01      	ldr	r3, [sp, #4]
    417a:	2b1b      	cmp	r3, #27
    417c:	d025      	beq.n	41ca <getSelectorConfig+0xea>
    417e:	9b01      	ldr	r3, [sp, #4]
    4180:	2b1b      	cmp	r3, #27
    4182:	d832      	bhi.n	41ea <getSelectorConfig+0x10a>
    4184:	9b01      	ldr	r3, [sp, #4]
    4186:	2b19      	cmp	r3, #25
    4188:	d003      	beq.n	4192 <getSelectorConfig+0xb2>
    418a:	9b01      	ldr	r3, [sp, #4]
    418c:	2b1a      	cmp	r3, #26
    418e:	d00e      	beq.n	41ae <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4190:	e02b      	b.n	41ea <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4192:	4b1a      	ldr	r3, [pc, #104]	; (41fc <getSelectorConfig+0x11c>)
    4194:	695b      	ldr	r3, [r3, #20]
    4196:	0e1b      	lsrs	r3, r3, #24
    4198:	f003 030f 	and.w	r3, r3, #15
    419c:	4a18      	ldr	r2, [pc, #96]	; (4200 <getSelectorConfig+0x120>)
    419e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    41a2:	4915      	ldr	r1, [pc, #84]	; (41f8 <getSelectorConfig+0x118>)
    41a4:	9b04      	ldr	r3, [sp, #16]
    41a6:	00db      	lsls	r3, r3, #3
    41a8:	440b      	add	r3, r1
    41aa:	605a      	str	r2, [r3, #4]
                break;
    41ac:	e01e      	b.n	41ec <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    41ae:	4b13      	ldr	r3, [pc, #76]	; (41fc <getSelectorConfig+0x11c>)
    41b0:	699b      	ldr	r3, [r3, #24]
    41b2:	0e1b      	lsrs	r3, r3, #24
    41b4:	f003 030f 	and.w	r3, r3, #15
    41b8:	4a11      	ldr	r2, [pc, #68]	; (4200 <getSelectorConfig+0x120>)
    41ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    41be:	490e      	ldr	r1, [pc, #56]	; (41f8 <getSelectorConfig+0x118>)
    41c0:	9b04      	ldr	r3, [sp, #16]
    41c2:	00db      	lsls	r3, r3, #3
    41c4:	440b      	add	r3, r1
    41c6:	605a      	str	r2, [r3, #4]
                break;
    41c8:	e010      	b.n	41ec <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    41ca:	4b0c      	ldr	r3, [pc, #48]	; (41fc <getSelectorConfig+0x11c>)
    41cc:	69db      	ldr	r3, [r3, #28]
    41ce:	0e1b      	lsrs	r3, r3, #24
    41d0:	f003 030f 	and.w	r3, r3, #15
    41d4:	4a0a      	ldr	r2, [pc, #40]	; (4200 <getSelectorConfig+0x120>)
    41d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    41da:	4907      	ldr	r1, [pc, #28]	; (41f8 <getSelectorConfig+0x118>)
    41dc:	9b04      	ldr	r3, [sp, #16]
    41de:	00db      	lsls	r3, r3, #3
    41e0:	440b      	add	r3, r1
    41e2:	605a      	str	r2, [r3, #4]
                break;
    41e4:	e002      	b.n	41ec <getSelectorConfig+0x10c>
        }
    }
    41e6:	bf00      	nop
    41e8:	e000      	b.n	41ec <getSelectorConfig+0x10c>
                break;
    41ea:	bf00      	nop

    return ReturnValue;
    41ec:	9b05      	ldr	r3, [sp, #20]
}
    41ee:	4618      	mov	r0, r3
    41f0:	b006      	add	sp, #24
    41f2:	4770      	bx	lr
    41f4:	1fff8ba8 	.word	0x1fff8ba8
    41f8:	1fff8c5c 	.word	0x1fff8c5c
    41fc:	40064000 	.word	0x40064000
    4200:	00007cfc 	.word	0x00007cfc

00004204 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4204:	b086      	sub	sp, #24
    4206:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4208:	2300      	movs	r3, #0
    420a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    420c:	2300      	movs	r3, #0
    420e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4210:	9b01      	ldr	r3, [sp, #4]
    4212:	2b1f      	cmp	r3, #31
    4214:	d00f      	beq.n	4236 <getCoreDividerConfig+0x32>
    4216:	9b01      	ldr	r3, [sp, #4]
    4218:	2b1f      	cmp	r3, #31
    421a:	d80f      	bhi.n	423c <getCoreDividerConfig+0x38>
    421c:	9b01      	ldr	r3, [sp, #4]
    421e:	2b1d      	cmp	r3, #29
    4220:	d003      	beq.n	422a <getCoreDividerConfig+0x26>
    4222:	9b01      	ldr	r3, [sp, #4]
    4224:	2b1e      	cmp	r3, #30
    4226:	d003      	beq.n	4230 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4228:	e008      	b.n	423c <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    422a:	2300      	movs	r3, #0
    422c:	9304      	str	r3, [sp, #16]
            break;
    422e:	e006      	b.n	423e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4230:	2301      	movs	r3, #1
    4232:	9304      	str	r3, [sp, #16]
            break;
    4234:	e003      	b.n	423e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4236:	2302      	movs	r3, #2
    4238:	9304      	str	r3, [sp, #16]
            break;
    423a:	e000      	b.n	423e <getCoreDividerConfig+0x3a>
                break;
    423c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    423e:	4b41      	ldr	r3, [pc, #260]	; (4344 <getCoreDividerConfig+0x140>)
    4240:	681b      	ldr	r3, [r3, #0]
    4242:	2b00      	cmp	r3, #0
    4244:	d026      	beq.n	4294 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4246:	2300      	movs	r3, #0
    4248:	9303      	str	r3, [sp, #12]
    424a:	e01c      	b.n	4286 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    424c:	4b3d      	ldr	r3, [pc, #244]	; (4344 <getCoreDividerConfig+0x140>)
    424e:	6819      	ldr	r1, [r3, #0]
    4250:	9a03      	ldr	r2, [sp, #12]
    4252:	4613      	mov	r3, r2
    4254:	005b      	lsls	r3, r3, #1
    4256:	4413      	add	r3, r2
    4258:	009b      	lsls	r3, r3, #2
    425a:	440b      	add	r3, r1
    425c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4260:	681b      	ldr	r3, [r3, #0]
    4262:	9a01      	ldr	r2, [sp, #4]
    4264:	429a      	cmp	r2, r3
    4266:	d10b      	bne.n	4280 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4268:	4b36      	ldr	r3, [pc, #216]	; (4344 <getCoreDividerConfig+0x140>)
    426a:	6819      	ldr	r1, [r3, #0]
    426c:	9a03      	ldr	r2, [sp, #12]
    426e:	4613      	mov	r3, r2
    4270:	005b      	lsls	r3, r3, #1
    4272:	4413      	add	r3, r2
    4274:	009b      	lsls	r3, r3, #2
    4276:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    427a:	440b      	add	r3, r1
    427c:	9305      	str	r3, [sp, #20]
                break;
    427e:	e009      	b.n	4294 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4280:	9b03      	ldr	r3, [sp, #12]
    4282:	3301      	adds	r3, #1
    4284:	9303      	str	r3, [sp, #12]
    4286:	4b2f      	ldr	r3, [pc, #188]	; (4344 <getCoreDividerConfig+0x140>)
    4288:	681b      	ldr	r3, [r3, #0]
    428a:	7b1b      	ldrb	r3, [r3, #12]
    428c:	461a      	mov	r2, r3
    428e:	9b03      	ldr	r3, [sp, #12]
    4290:	4293      	cmp	r3, r2
    4292:	d3db      	bcc.n	424c <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4294:	9b05      	ldr	r3, [sp, #20]
    4296:	2b00      	cmp	r3, #0
    4298:	d14d      	bne.n	4336 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    429a:	9a04      	ldr	r2, [sp, #16]
    429c:	4613      	mov	r3, r2
    429e:	005b      	lsls	r3, r3, #1
    42a0:	4413      	add	r3, r2
    42a2:	009b      	lsls	r3, r3, #2
    42a4:	4a28      	ldr	r2, [pc, #160]	; (4348 <getCoreDividerConfig+0x144>)
    42a6:	4413      	add	r3, r2
    42a8:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    42aa:	4927      	ldr	r1, [pc, #156]	; (4348 <getCoreDividerConfig+0x144>)
    42ac:	9a04      	ldr	r2, [sp, #16]
    42ae:	4613      	mov	r3, r2
    42b0:	005b      	lsls	r3, r3, #1
    42b2:	4413      	add	r3, r2
    42b4:	009b      	lsls	r3, r3, #2
    42b6:	440b      	add	r3, r1
    42b8:	9a01      	ldr	r2, [sp, #4]
    42ba:	601a      	str	r2, [r3, #0]
        switch(Name)
    42bc:	9b01      	ldr	r3, [sp, #4]
    42be:	2b1f      	cmp	r3, #31
    42c0:	d029      	beq.n	4316 <getCoreDividerConfig+0x112>
    42c2:	9b01      	ldr	r3, [sp, #4]
    42c4:	2b1f      	cmp	r3, #31
    42c6:	d838      	bhi.n	433a <getCoreDividerConfig+0x136>
    42c8:	9b01      	ldr	r3, [sp, #4]
    42ca:	2b1d      	cmp	r3, #29
    42cc:	d003      	beq.n	42d6 <getCoreDividerConfig+0xd2>
    42ce:	9b01      	ldr	r3, [sp, #4]
    42d0:	2b1e      	cmp	r3, #30
    42d2:	d010      	beq.n	42f6 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    42d4:	e031      	b.n	433a <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    42d6:	4b1d      	ldr	r3, [pc, #116]	; (434c <getCoreDividerConfig+0x148>)
    42d8:	695b      	ldr	r3, [r3, #20]
    42da:	0c1b      	lsrs	r3, r3, #16
    42dc:	f003 030f 	and.w	r3, r3, #15
    42e0:	1c59      	adds	r1, r3, #1
    42e2:	4819      	ldr	r0, [pc, #100]	; (4348 <getCoreDividerConfig+0x144>)
    42e4:	9a04      	ldr	r2, [sp, #16]
    42e6:	4613      	mov	r3, r2
    42e8:	005b      	lsls	r3, r3, #1
    42ea:	4413      	add	r3, r2
    42ec:	009b      	lsls	r3, r3, #2
    42ee:	4403      	add	r3, r0
    42f0:	3304      	adds	r3, #4
    42f2:	6019      	str	r1, [r3, #0]
                break;
    42f4:	e022      	b.n	433c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    42f6:	4b15      	ldr	r3, [pc, #84]	; (434c <getCoreDividerConfig+0x148>)
    42f8:	699b      	ldr	r3, [r3, #24]
    42fa:	0c1b      	lsrs	r3, r3, #16
    42fc:	f003 030f 	and.w	r3, r3, #15
    4300:	1c59      	adds	r1, r3, #1
    4302:	4811      	ldr	r0, [pc, #68]	; (4348 <getCoreDividerConfig+0x144>)
    4304:	9a04      	ldr	r2, [sp, #16]
    4306:	4613      	mov	r3, r2
    4308:	005b      	lsls	r3, r3, #1
    430a:	4413      	add	r3, r2
    430c:	009b      	lsls	r3, r3, #2
    430e:	4403      	add	r3, r0
    4310:	3304      	adds	r3, #4
    4312:	6019      	str	r1, [r3, #0]
                break;
    4314:	e012      	b.n	433c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4316:	4b0d      	ldr	r3, [pc, #52]	; (434c <getCoreDividerConfig+0x148>)
    4318:	69db      	ldr	r3, [r3, #28]
    431a:	0c1b      	lsrs	r3, r3, #16
    431c:	f003 030f 	and.w	r3, r3, #15
    4320:	1c59      	adds	r1, r3, #1
    4322:	4809      	ldr	r0, [pc, #36]	; (4348 <getCoreDividerConfig+0x144>)
    4324:	9a04      	ldr	r2, [sp, #16]
    4326:	4613      	mov	r3, r2
    4328:	005b      	lsls	r3, r3, #1
    432a:	4413      	add	r3, r2
    432c:	009b      	lsls	r3, r3, #2
    432e:	4403      	add	r3, r0
    4330:	3304      	adds	r3, #4
    4332:	6019      	str	r1, [r3, #0]
                break;
    4334:	e002      	b.n	433c <getCoreDividerConfig+0x138>
        }
    }
    4336:	bf00      	nop
    4338:	e000      	b.n	433c <getCoreDividerConfig+0x138>
                break;
    433a:	bf00      	nop

    return ReturnValue;
    433c:	9b05      	ldr	r3, [sp, #20]
}
    433e:	4618      	mov	r0, r3
    4340:	b006      	add	sp, #24
    4342:	4770      	bx	lr
    4344:	1fff8ba8 	.word	0x1fff8ba8
    4348:	1fff8c74 	.word	0x1fff8c74
    434c:	40064000 	.word	0x40064000

00004350 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4350:	b086      	sub	sp, #24
    4352:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4354:	2300      	movs	r3, #0
    4356:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4358:	2300      	movs	r3, #0
    435a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    435c:	9b01      	ldr	r3, [sp, #4]
    435e:	2b23      	cmp	r3, #35	; 0x23
    4360:	d00f      	beq.n	4382 <getBusDividerConfig+0x32>
    4362:	9b01      	ldr	r3, [sp, #4]
    4364:	2b23      	cmp	r3, #35	; 0x23
    4366:	d80f      	bhi.n	4388 <getBusDividerConfig+0x38>
    4368:	9b01      	ldr	r3, [sp, #4]
    436a:	2b21      	cmp	r3, #33	; 0x21
    436c:	d003      	beq.n	4376 <getBusDividerConfig+0x26>
    436e:	9b01      	ldr	r3, [sp, #4]
    4370:	2b22      	cmp	r3, #34	; 0x22
    4372:	d003      	beq.n	437c <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4374:	e008      	b.n	4388 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4376:	2300      	movs	r3, #0
    4378:	9304      	str	r3, [sp, #16]
            break;
    437a:	e006      	b.n	438a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    437c:	2301      	movs	r3, #1
    437e:	9304      	str	r3, [sp, #16]
            break;
    4380:	e003      	b.n	438a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4382:	2302      	movs	r3, #2
    4384:	9304      	str	r3, [sp, #16]
            break;
    4386:	e000      	b.n	438a <getBusDividerConfig+0x3a>
                break;
    4388:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    438a:	4b41      	ldr	r3, [pc, #260]	; (4490 <getBusDividerConfig+0x140>)
    438c:	681b      	ldr	r3, [r3, #0]
    438e:	2b00      	cmp	r3, #0
    4390:	d026      	beq.n	43e0 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4392:	2300      	movs	r3, #0
    4394:	9303      	str	r3, [sp, #12]
    4396:	e01c      	b.n	43d2 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4398:	4b3d      	ldr	r3, [pc, #244]	; (4490 <getBusDividerConfig+0x140>)
    439a:	6819      	ldr	r1, [r3, #0]
    439c:	9a03      	ldr	r2, [sp, #12]
    439e:	4613      	mov	r3, r2
    43a0:	005b      	lsls	r3, r3, #1
    43a2:	4413      	add	r3, r2
    43a4:	009b      	lsls	r3, r3, #2
    43a6:	440b      	add	r3, r1
    43a8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43ac:	681b      	ldr	r3, [r3, #0]
    43ae:	9a01      	ldr	r2, [sp, #4]
    43b0:	429a      	cmp	r2, r3
    43b2:	d10b      	bne.n	43cc <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    43b4:	4b36      	ldr	r3, [pc, #216]	; (4490 <getBusDividerConfig+0x140>)
    43b6:	6819      	ldr	r1, [r3, #0]
    43b8:	9a03      	ldr	r2, [sp, #12]
    43ba:	4613      	mov	r3, r2
    43bc:	005b      	lsls	r3, r3, #1
    43be:	4413      	add	r3, r2
    43c0:	009b      	lsls	r3, r3, #2
    43c2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    43c6:	440b      	add	r3, r1
    43c8:	9305      	str	r3, [sp, #20]
                break;
    43ca:	e009      	b.n	43e0 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    43cc:	9b03      	ldr	r3, [sp, #12]
    43ce:	3301      	adds	r3, #1
    43d0:	9303      	str	r3, [sp, #12]
    43d2:	4b2f      	ldr	r3, [pc, #188]	; (4490 <getBusDividerConfig+0x140>)
    43d4:	681b      	ldr	r3, [r3, #0]
    43d6:	7b1b      	ldrb	r3, [r3, #12]
    43d8:	461a      	mov	r2, r3
    43da:	9b03      	ldr	r3, [sp, #12]
    43dc:	4293      	cmp	r3, r2
    43de:	d3db      	bcc.n	4398 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    43e0:	9b05      	ldr	r3, [sp, #20]
    43e2:	2b00      	cmp	r3, #0
    43e4:	d14d      	bne.n	4482 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    43e6:	9a04      	ldr	r2, [sp, #16]
    43e8:	4613      	mov	r3, r2
    43ea:	005b      	lsls	r3, r3, #1
    43ec:	4413      	add	r3, r2
    43ee:	009b      	lsls	r3, r3, #2
    43f0:	4a28      	ldr	r2, [pc, #160]	; (4494 <getBusDividerConfig+0x144>)
    43f2:	4413      	add	r3, r2
    43f4:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    43f6:	4927      	ldr	r1, [pc, #156]	; (4494 <getBusDividerConfig+0x144>)
    43f8:	9a04      	ldr	r2, [sp, #16]
    43fa:	4613      	mov	r3, r2
    43fc:	005b      	lsls	r3, r3, #1
    43fe:	4413      	add	r3, r2
    4400:	009b      	lsls	r3, r3, #2
    4402:	440b      	add	r3, r1
    4404:	9a01      	ldr	r2, [sp, #4]
    4406:	601a      	str	r2, [r3, #0]
        switch(Name)
    4408:	9b01      	ldr	r3, [sp, #4]
    440a:	2b23      	cmp	r3, #35	; 0x23
    440c:	d029      	beq.n	4462 <getBusDividerConfig+0x112>
    440e:	9b01      	ldr	r3, [sp, #4]
    4410:	2b23      	cmp	r3, #35	; 0x23
    4412:	d838      	bhi.n	4486 <getBusDividerConfig+0x136>
    4414:	9b01      	ldr	r3, [sp, #4]
    4416:	2b21      	cmp	r3, #33	; 0x21
    4418:	d003      	beq.n	4422 <getBusDividerConfig+0xd2>
    441a:	9b01      	ldr	r3, [sp, #4]
    441c:	2b22      	cmp	r3, #34	; 0x22
    441e:	d010      	beq.n	4442 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4420:	e031      	b.n	4486 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4422:	4b1d      	ldr	r3, [pc, #116]	; (4498 <getBusDividerConfig+0x148>)
    4424:	695b      	ldr	r3, [r3, #20]
    4426:	091b      	lsrs	r3, r3, #4
    4428:	f003 030f 	and.w	r3, r3, #15
    442c:	1c59      	adds	r1, r3, #1
    442e:	4819      	ldr	r0, [pc, #100]	; (4494 <getBusDividerConfig+0x144>)
    4430:	9a04      	ldr	r2, [sp, #16]
    4432:	4613      	mov	r3, r2
    4434:	005b      	lsls	r3, r3, #1
    4436:	4413      	add	r3, r2
    4438:	009b      	lsls	r3, r3, #2
    443a:	4403      	add	r3, r0
    443c:	3304      	adds	r3, #4
    443e:	6019      	str	r1, [r3, #0]
                break;
    4440:	e022      	b.n	4488 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4442:	4b15      	ldr	r3, [pc, #84]	; (4498 <getBusDividerConfig+0x148>)
    4444:	699b      	ldr	r3, [r3, #24]
    4446:	091b      	lsrs	r3, r3, #4
    4448:	f003 030f 	and.w	r3, r3, #15
    444c:	1c59      	adds	r1, r3, #1
    444e:	4811      	ldr	r0, [pc, #68]	; (4494 <getBusDividerConfig+0x144>)
    4450:	9a04      	ldr	r2, [sp, #16]
    4452:	4613      	mov	r3, r2
    4454:	005b      	lsls	r3, r3, #1
    4456:	4413      	add	r3, r2
    4458:	009b      	lsls	r3, r3, #2
    445a:	4403      	add	r3, r0
    445c:	3304      	adds	r3, #4
    445e:	6019      	str	r1, [r3, #0]
                break;
    4460:	e012      	b.n	4488 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4462:	4b0d      	ldr	r3, [pc, #52]	; (4498 <getBusDividerConfig+0x148>)
    4464:	69db      	ldr	r3, [r3, #28]
    4466:	091b      	lsrs	r3, r3, #4
    4468:	f003 030f 	and.w	r3, r3, #15
    446c:	1c59      	adds	r1, r3, #1
    446e:	4809      	ldr	r0, [pc, #36]	; (4494 <getBusDividerConfig+0x144>)
    4470:	9a04      	ldr	r2, [sp, #16]
    4472:	4613      	mov	r3, r2
    4474:	005b      	lsls	r3, r3, #1
    4476:	4413      	add	r3, r2
    4478:	009b      	lsls	r3, r3, #2
    447a:	4403      	add	r3, r0
    447c:	3304      	adds	r3, #4
    447e:	6019      	str	r1, [r3, #0]
                break;
    4480:	e002      	b.n	4488 <getBusDividerConfig+0x138>
        }
    }
    4482:	bf00      	nop
    4484:	e000      	b.n	4488 <getBusDividerConfig+0x138>
                break;
    4486:	bf00      	nop

    return ReturnValue;
    4488:	9b05      	ldr	r3, [sp, #20]
}
    448a:	4618      	mov	r0, r3
    448c:	b006      	add	sp, #24
    448e:	4770      	bx	lr
    4490:	1fff8ba8 	.word	0x1fff8ba8
    4494:	1fff8c98 	.word	0x1fff8c98
    4498:	40064000 	.word	0x40064000

0000449c <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    449c:	b086      	sub	sp, #24
    449e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    44a0:	2300      	movs	r3, #0
    44a2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    44a4:	2300      	movs	r3, #0
    44a6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    44a8:	9b01      	ldr	r3, [sp, #4]
    44aa:	2b27      	cmp	r3, #39	; 0x27
    44ac:	d00f      	beq.n	44ce <getSlowDividerConfig+0x32>
    44ae:	9b01      	ldr	r3, [sp, #4]
    44b0:	2b27      	cmp	r3, #39	; 0x27
    44b2:	d80f      	bhi.n	44d4 <getSlowDividerConfig+0x38>
    44b4:	9b01      	ldr	r3, [sp, #4]
    44b6:	2b25      	cmp	r3, #37	; 0x25
    44b8:	d003      	beq.n	44c2 <getSlowDividerConfig+0x26>
    44ba:	9b01      	ldr	r3, [sp, #4]
    44bc:	2b26      	cmp	r3, #38	; 0x26
    44be:	d003      	beq.n	44c8 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    44c0:	e008      	b.n	44d4 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    44c2:	2300      	movs	r3, #0
    44c4:	9304      	str	r3, [sp, #16]
            break;
    44c6:	e006      	b.n	44d6 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    44c8:	2301      	movs	r3, #1
    44ca:	9304      	str	r3, [sp, #16]
            break;
    44cc:	e003      	b.n	44d6 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    44ce:	2302      	movs	r3, #2
    44d0:	9304      	str	r3, [sp, #16]
            break;
    44d2:	e000      	b.n	44d6 <getSlowDividerConfig+0x3a>
                break;
    44d4:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    44d6:	4b40      	ldr	r3, [pc, #256]	; (45d8 <getSlowDividerConfig+0x13c>)
    44d8:	681b      	ldr	r3, [r3, #0]
    44da:	2b00      	cmp	r3, #0
    44dc:	d026      	beq.n	452c <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    44de:	2300      	movs	r3, #0
    44e0:	9303      	str	r3, [sp, #12]
    44e2:	e01c      	b.n	451e <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    44e4:	4b3c      	ldr	r3, [pc, #240]	; (45d8 <getSlowDividerConfig+0x13c>)
    44e6:	6819      	ldr	r1, [r3, #0]
    44e8:	9a03      	ldr	r2, [sp, #12]
    44ea:	4613      	mov	r3, r2
    44ec:	005b      	lsls	r3, r3, #1
    44ee:	4413      	add	r3, r2
    44f0:	009b      	lsls	r3, r3, #2
    44f2:	440b      	add	r3, r1
    44f4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    44f8:	681b      	ldr	r3, [r3, #0]
    44fa:	9a01      	ldr	r2, [sp, #4]
    44fc:	429a      	cmp	r2, r3
    44fe:	d10b      	bne.n	4518 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4500:	4b35      	ldr	r3, [pc, #212]	; (45d8 <getSlowDividerConfig+0x13c>)
    4502:	6819      	ldr	r1, [r3, #0]
    4504:	9a03      	ldr	r2, [sp, #12]
    4506:	4613      	mov	r3, r2
    4508:	005b      	lsls	r3, r3, #1
    450a:	4413      	add	r3, r2
    450c:	009b      	lsls	r3, r3, #2
    450e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4512:	440b      	add	r3, r1
    4514:	9305      	str	r3, [sp, #20]
                break;
    4516:	e009      	b.n	452c <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4518:	9b03      	ldr	r3, [sp, #12]
    451a:	3301      	adds	r3, #1
    451c:	9303      	str	r3, [sp, #12]
    451e:	4b2e      	ldr	r3, [pc, #184]	; (45d8 <getSlowDividerConfig+0x13c>)
    4520:	681b      	ldr	r3, [r3, #0]
    4522:	7b1b      	ldrb	r3, [r3, #12]
    4524:	461a      	mov	r2, r3
    4526:	9b03      	ldr	r3, [sp, #12]
    4528:	4293      	cmp	r3, r2
    452a:	d3db      	bcc.n	44e4 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    452c:	9b05      	ldr	r3, [sp, #20]
    452e:	2b00      	cmp	r3, #0
    4530:	d14a      	bne.n	45c8 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4532:	9a04      	ldr	r2, [sp, #16]
    4534:	4613      	mov	r3, r2
    4536:	005b      	lsls	r3, r3, #1
    4538:	4413      	add	r3, r2
    453a:	009b      	lsls	r3, r3, #2
    453c:	4a27      	ldr	r2, [pc, #156]	; (45dc <getSlowDividerConfig+0x140>)
    453e:	4413      	add	r3, r2
    4540:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    4542:	4926      	ldr	r1, [pc, #152]	; (45dc <getSlowDividerConfig+0x140>)
    4544:	9a04      	ldr	r2, [sp, #16]
    4546:	4613      	mov	r3, r2
    4548:	005b      	lsls	r3, r3, #1
    454a:	4413      	add	r3, r2
    454c:	009b      	lsls	r3, r3, #2
    454e:	440b      	add	r3, r1
    4550:	9a01      	ldr	r2, [sp, #4]
    4552:	601a      	str	r2, [r3, #0]
        switch(Name)
    4554:	9b01      	ldr	r3, [sp, #4]
    4556:	2b27      	cmp	r3, #39	; 0x27
    4558:	d027      	beq.n	45aa <getSlowDividerConfig+0x10e>
    455a:	9b01      	ldr	r3, [sp, #4]
    455c:	2b27      	cmp	r3, #39	; 0x27
    455e:	d835      	bhi.n	45cc <getSlowDividerConfig+0x130>
    4560:	9b01      	ldr	r3, [sp, #4]
    4562:	2b25      	cmp	r3, #37	; 0x25
    4564:	d003      	beq.n	456e <getSlowDividerConfig+0xd2>
    4566:	9b01      	ldr	r3, [sp, #4]
    4568:	2b26      	cmp	r3, #38	; 0x26
    456a:	d00f      	beq.n	458c <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    456c:	e02e      	b.n	45cc <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    456e:	4b1c      	ldr	r3, [pc, #112]	; (45e0 <getSlowDividerConfig+0x144>)
    4570:	695b      	ldr	r3, [r3, #20]
    4572:	f003 030f 	and.w	r3, r3, #15
    4576:	1c59      	adds	r1, r3, #1
    4578:	4818      	ldr	r0, [pc, #96]	; (45dc <getSlowDividerConfig+0x140>)
    457a:	9a04      	ldr	r2, [sp, #16]
    457c:	4613      	mov	r3, r2
    457e:	005b      	lsls	r3, r3, #1
    4580:	4413      	add	r3, r2
    4582:	009b      	lsls	r3, r3, #2
    4584:	4403      	add	r3, r0
    4586:	3304      	adds	r3, #4
    4588:	6019      	str	r1, [r3, #0]
                break;
    458a:	e020      	b.n	45ce <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    458c:	4b14      	ldr	r3, [pc, #80]	; (45e0 <getSlowDividerConfig+0x144>)
    458e:	699b      	ldr	r3, [r3, #24]
    4590:	f003 030f 	and.w	r3, r3, #15
    4594:	1c59      	adds	r1, r3, #1
    4596:	4811      	ldr	r0, [pc, #68]	; (45dc <getSlowDividerConfig+0x140>)
    4598:	9a04      	ldr	r2, [sp, #16]
    459a:	4613      	mov	r3, r2
    459c:	005b      	lsls	r3, r3, #1
    459e:	4413      	add	r3, r2
    45a0:	009b      	lsls	r3, r3, #2
    45a2:	4403      	add	r3, r0
    45a4:	3304      	adds	r3, #4
    45a6:	6019      	str	r1, [r3, #0]
                break;
    45a8:	e011      	b.n	45ce <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    45aa:	4b0d      	ldr	r3, [pc, #52]	; (45e0 <getSlowDividerConfig+0x144>)
    45ac:	69db      	ldr	r3, [r3, #28]
    45ae:	f003 030f 	and.w	r3, r3, #15
    45b2:	1c59      	adds	r1, r3, #1
    45b4:	4809      	ldr	r0, [pc, #36]	; (45dc <getSlowDividerConfig+0x140>)
    45b6:	9a04      	ldr	r2, [sp, #16]
    45b8:	4613      	mov	r3, r2
    45ba:	005b      	lsls	r3, r3, #1
    45bc:	4413      	add	r3, r2
    45be:	009b      	lsls	r3, r3, #2
    45c0:	4403      	add	r3, r0
    45c2:	3304      	adds	r3, #4
    45c4:	6019      	str	r1, [r3, #0]
                break;
    45c6:	e002      	b.n	45ce <getSlowDividerConfig+0x132>
        }
    }
    45c8:	bf00      	nop
    45ca:	e000      	b.n	45ce <getSlowDividerConfig+0x132>
                break;
    45cc:	bf00      	nop

    return ReturnValue;
    45ce:	9b05      	ldr	r3, [sp, #20]
}
    45d0:	4618      	mov	r0, r3
    45d2:	b006      	add	sp, #24
    45d4:	4770      	bx	lr
    45d6:	bf00      	nop
    45d8:	1fff8ba8 	.word	0x1fff8ba8
    45dc:	1fff8cbc 	.word	0x1fff8cbc
    45e0:	40064000 	.word	0x40064000

000045e4 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    45e4:	b500      	push	{lr}
    45e6:	b083      	sub	sp, #12
    45e8:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    45ea:	4b64      	ldr	r3, [pc, #400]	; (477c <Clock_Ip_ClockInitializeObjects+0x198>)
    45ec:	781b      	ldrb	r3, [r3, #0]
    45ee:	f083 0301 	eor.w	r3, r3, #1
    45f2:	b2db      	uxtb	r3, r3
    45f4:	2b00      	cmp	r3, #0
    45f6:	d05b      	beq.n	46b0 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    45f8:	4b60      	ldr	r3, [pc, #384]	; (477c <Clock_Ip_ClockInitializeObjects+0x198>)
    45fa:	2201      	movs	r2, #1
    45fc:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    45fe:	4b60      	ldr	r3, [pc, #384]	; (4780 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4600:	785b      	ldrb	r3, [r3, #1]
    4602:	461a      	mov	r2, r3
    4604:	4613      	mov	r3, r2
    4606:	009b      	lsls	r3, r3, #2
    4608:	4413      	add	r3, r2
    460a:	009b      	lsls	r3, r3, #2
    460c:	4a5d      	ldr	r2, [pc, #372]	; (4784 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    460e:	4413      	add	r3, r2
    4610:	4a5d      	ldr	r2, [pc, #372]	; (4788 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4612:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4614:	4b5d      	ldr	r3, [pc, #372]	; (478c <Clock_Ip_ClockInitializeObjects+0x1a8>)
    4616:	785b      	ldrb	r3, [r3, #1]
    4618:	461a      	mov	r2, r3
    461a:	4613      	mov	r3, r2
    461c:	009b      	lsls	r3, r3, #2
    461e:	4413      	add	r3, r2
    4620:	009b      	lsls	r3, r3, #2
    4622:	4a5b      	ldr	r2, [pc, #364]	; (4790 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4624:	4413      	add	r3, r2
    4626:	4a5b      	ldr	r2, [pc, #364]	; (4794 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    4628:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    462a:	4b5b      	ldr	r3, [pc, #364]	; (4798 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    462c:	791b      	ldrb	r3, [r3, #4]
    462e:	461a      	mov	r2, r3
    4630:	4613      	mov	r3, r2
    4632:	005b      	lsls	r3, r3, #1
    4634:	4413      	add	r3, r2
    4636:	009b      	lsls	r3, r3, #2
    4638:	4a58      	ldr	r2, [pc, #352]	; (479c <Clock_Ip_ClockInitializeObjects+0x1b8>)
    463a:	4413      	add	r3, r2
    463c:	4a58      	ldr	r2, [pc, #352]	; (47a0 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    463e:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    4640:	4b58      	ldr	r3, [pc, #352]	; (47a4 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4642:	795b      	ldrb	r3, [r3, #5]
    4644:	00db      	lsls	r3, r3, #3
    4646:	4a58      	ldr	r2, [pc, #352]	; (47a8 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4648:	4413      	add	r3, r2
    464a:	4a58      	ldr	r2, [pc, #352]	; (47ac <Clock_Ip_ClockInitializeObjects+0x1c8>)
    464c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    464e:	4b55      	ldr	r3, [pc, #340]	; (47a4 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4650:	79db      	ldrb	r3, [r3, #7]
    4652:	00db      	lsls	r3, r3, #3
    4654:	4a54      	ldr	r2, [pc, #336]	; (47a8 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    4656:	4413      	add	r3, r2
    4658:	4a55      	ldr	r2, [pc, #340]	; (47b0 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    465a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    465c:	4b55      	ldr	r3, [pc, #340]	; (47b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    465e:	799b      	ldrb	r3, [r3, #6]
    4660:	009b      	lsls	r3, r3, #2
    4662:	4a55      	ldr	r2, [pc, #340]	; (47b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4664:	4413      	add	r3, r2
    4666:	4a55      	ldr	r2, [pc, #340]	; (47bc <Clock_Ip_ClockInitializeObjects+0x1d8>)
    4668:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    466a:	4b52      	ldr	r3, [pc, #328]	; (47b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    466c:	7a1b      	ldrb	r3, [r3, #8]
    466e:	009b      	lsls	r3, r3, #2
    4670:	4a51      	ldr	r2, [pc, #324]	; (47b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4672:	4413      	add	r3, r2
    4674:	4a52      	ldr	r2, [pc, #328]	; (47c0 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    4676:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    4678:	4b4e      	ldr	r3, [pc, #312]	; (47b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    467a:	7a5b      	ldrb	r3, [r3, #9]
    467c:	009b      	lsls	r3, r3, #2
    467e:	4a4e      	ldr	r2, [pc, #312]	; (47b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4680:	4413      	add	r3, r2
    4682:	4a50      	ldr	r2, [pc, #320]	; (47c4 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4684:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    4686:	4b4b      	ldr	r3, [pc, #300]	; (47b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4688:	7adb      	ldrb	r3, [r3, #11]
    468a:	009b      	lsls	r3, r3, #2
    468c:	4a4a      	ldr	r2, [pc, #296]	; (47b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    468e:	4413      	add	r3, r2
    4690:	4a4d      	ldr	r2, [pc, #308]	; (47c8 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4692:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4694:	4b47      	ldr	r3, [pc, #284]	; (47b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4696:	7b1b      	ldrb	r3, [r3, #12]
    4698:	009b      	lsls	r3, r3, #2
    469a:	4a47      	ldr	r2, [pc, #284]	; (47b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    469c:	4413      	add	r3, r2
    469e:	4a4b      	ldr	r2, [pc, #300]	; (47cc <Clock_Ip_ClockInitializeObjects+0x1e8>)
    46a0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    46a2:	4b44      	ldr	r3, [pc, #272]	; (47b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    46a4:	7b9b      	ldrb	r3, [r3, #14]
    46a6:	009b      	lsls	r3, r3, #2
    46a8:	4a43      	ldr	r2, [pc, #268]	; (47b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    46aa:	4413      	add	r3, r2
    46ac:	4a48      	ldr	r2, [pc, #288]	; (47d0 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    46ae:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    46b0:	4b48      	ldr	r3, [pc, #288]	; (47d4 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    46b2:	781b      	ldrb	r3, [r3, #0]
    46b4:	2b00      	cmp	r3, #0
    46b6:	d002      	beq.n	46be <Clock_Ip_ClockInitializeObjects+0xda>
    46b8:	9b01      	ldr	r3, [sp, #4]
    46ba:	2b00      	cmp	r3, #0
    46bc:	d003      	beq.n	46c6 <Clock_Ip_ClockInitializeObjects+0xe2>
    46be:	4b46      	ldr	r3, [pc, #280]	; (47d8 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    46c0:	781b      	ldrb	r3, [r3, #0]
    46c2:	2b00      	cmp	r3, #0
    46c4:	d056      	beq.n	4774 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    46c6:	f7ff fc09 	bl	3edc <getFircConfig>
    46ca:	4603      	mov	r3, r0
    46cc:	4a43      	ldr	r2, [pc, #268]	; (47dc <Clock_Ip_ClockInitializeObjects+0x1f8>)
    46ce:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    46d0:	f7ff fc60 	bl	3f94 <getSoscConfig>
    46d4:	4603      	mov	r3, r0
    46d6:	4a42      	ldr	r2, [pc, #264]	; (47e0 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    46d8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    46da:	f7ff fca7 	bl	402c <getSpllConfig>
    46de:	4603      	mov	r3, r0
    46e0:	4a40      	ldr	r2, [pc, #256]	; (47e4 <Clock_Ip_ClockInitializeObjects+0x200>)
    46e2:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    46e4:	2019      	movs	r0, #25
    46e6:	f7ff fcfb 	bl	40e0 <getSelectorConfig>
    46ea:	4603      	mov	r3, r0
    46ec:	4a3e      	ldr	r2, [pc, #248]	; (47e8 <Clock_Ip_ClockInitializeObjects+0x204>)
    46ee:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    46f0:	201a      	movs	r0, #26
    46f2:	f7ff fcf5 	bl	40e0 <getSelectorConfig>
    46f6:	4603      	mov	r3, r0
    46f8:	4a3c      	ldr	r2, [pc, #240]	; (47ec <Clock_Ip_ClockInitializeObjects+0x208>)
    46fa:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    46fc:	201b      	movs	r0, #27
    46fe:	f7ff fcef 	bl	40e0 <getSelectorConfig>
    4702:	4603      	mov	r3, r0
    4704:	4a3a      	ldr	r2, [pc, #232]	; (47f0 <Clock_Ip_ClockInitializeObjects+0x20c>)
    4706:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    4708:	201d      	movs	r0, #29
    470a:	f7ff fd7b 	bl	4204 <getCoreDividerConfig>
    470e:	4603      	mov	r3, r0
    4710:	4a38      	ldr	r2, [pc, #224]	; (47f4 <Clock_Ip_ClockInitializeObjects+0x210>)
    4712:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4714:	201e      	movs	r0, #30
    4716:	f7ff fd75 	bl	4204 <getCoreDividerConfig>
    471a:	4603      	mov	r3, r0
    471c:	4a36      	ldr	r2, [pc, #216]	; (47f8 <Clock_Ip_ClockInitializeObjects+0x214>)
    471e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    4720:	201f      	movs	r0, #31
    4722:	f7ff fd6f 	bl	4204 <getCoreDividerConfig>
    4726:	4603      	mov	r3, r0
    4728:	4a34      	ldr	r2, [pc, #208]	; (47fc <Clock_Ip_ClockInitializeObjects+0x218>)
    472a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    472c:	2021      	movs	r0, #33	; 0x21
    472e:	f7ff fe0f 	bl	4350 <getBusDividerConfig>
    4732:	4603      	mov	r3, r0
    4734:	4a32      	ldr	r2, [pc, #200]	; (4800 <Clock_Ip_ClockInitializeObjects+0x21c>)
    4736:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    4738:	2022      	movs	r0, #34	; 0x22
    473a:	f7ff fe09 	bl	4350 <getBusDividerConfig>
    473e:	4603      	mov	r3, r0
    4740:	4a30      	ldr	r2, [pc, #192]	; (4804 <Clock_Ip_ClockInitializeObjects+0x220>)
    4742:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    4744:	2023      	movs	r0, #35	; 0x23
    4746:	f7ff fe03 	bl	4350 <getBusDividerConfig>
    474a:	4603      	mov	r3, r0
    474c:	4a2e      	ldr	r2, [pc, #184]	; (4808 <Clock_Ip_ClockInitializeObjects+0x224>)
    474e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    4750:	2025      	movs	r0, #37	; 0x25
    4752:	f7ff fea3 	bl	449c <getSlowDividerConfig>
    4756:	4603      	mov	r3, r0
    4758:	4a2c      	ldr	r2, [pc, #176]	; (480c <Clock_Ip_ClockInitializeObjects+0x228>)
    475a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    475c:	2026      	movs	r0, #38	; 0x26
    475e:	f7ff fe9d 	bl	449c <getSlowDividerConfig>
    4762:	4603      	mov	r3, r0
    4764:	4a2a      	ldr	r2, [pc, #168]	; (4810 <Clock_Ip_ClockInitializeObjects+0x22c>)
    4766:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    4768:	2027      	movs	r0, #39	; 0x27
    476a:	f7ff fe97 	bl	449c <getSlowDividerConfig>
    476e:	4603      	mov	r3, r0
    4770:	4a28      	ldr	r2, [pc, #160]	; (4814 <Clock_Ip_ClockInitializeObjects+0x230>)
    4772:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4774:	bf00      	nop
    4776:	b003      	add	sp, #12
    4778:	f85d fb04 	ldr.w	pc, [sp], #4
    477c:	1fff8ce0 	.word	0x1fff8ce0
    4780:	0000762c 	.word	0x0000762c
    4784:	00007c78 	.word	0x00007c78
    4788:	1fff8bac 	.word	0x1fff8bac
    478c:	000075ec 	.word	0x000075ec
    4790:	00007bc0 	.word	0x00007bc0
    4794:	1fff8bb0 	.word	0x1fff8bb0
    4798:	000075fc 	.word	0x000075fc
    479c:	00007c2c 	.word	0x00007c2c
    47a0:	1fff8bb4 	.word	0x1fff8bb4
    47a4:	0000763c 	.word	0x0000763c
    47a8:	00007ca4 	.word	0x00007ca4
    47ac:	1fff8bb8 	.word	0x1fff8bb8
    47b0:	1fff8bf4 	.word	0x1fff8bf4
    47b4:	000075cc 	.word	0x000075cc
    47b8:	00007b7c 	.word	0x00007b7c
    47bc:	1fff8bbc 	.word	0x1fff8bbc
    47c0:	1fff8bf8 	.word	0x1fff8bf8
    47c4:	1fff8bc0 	.word	0x1fff8bc0
    47c8:	1fff8bfc 	.word	0x1fff8bfc
    47cc:	1fff8bc4 	.word	0x1fff8bc4
    47d0:	1fff8c00 	.word	0x1fff8c00
    47d4:	1fff8b19 	.word	0x1fff8b19
    47d8:	1fff8b10 	.word	0x1fff8b10
    47dc:	1fff8bc8 	.word	0x1fff8bc8
    47e0:	1fff8bcc 	.word	0x1fff8bcc
    47e4:	1fff8bd0 	.word	0x1fff8bd0
    47e8:	1fff8bd4 	.word	0x1fff8bd4
    47ec:	1fff8bd8 	.word	0x1fff8bd8
    47f0:	1fff8c04 	.word	0x1fff8c04
    47f4:	1fff8bdc 	.word	0x1fff8bdc
    47f8:	1fff8be0 	.word	0x1fff8be0
    47fc:	1fff8c08 	.word	0x1fff8c08
    4800:	1fff8be4 	.word	0x1fff8be4
    4804:	1fff8be8 	.word	0x1fff8be8
    4808:	1fff8c0c 	.word	0x1fff8c0c
    480c:	1fff8bec 	.word	0x1fff8bec
    4810:	1fff8bf0 	.word	0x1fff8bf0
    4814:	1fff8c10 	.word	0x1fff8c10

00004818 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4818:	b500      	push	{lr}
    481a:	b083      	sub	sp, #12
    481c:	9001      	str	r0, [sp, #4]
    481e:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4820:	9b01      	ldr	r3, [sp, #4]
    4822:	2b03      	cmp	r3, #3
    4824:	f000 8090 	beq.w	4948 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4828:	9b01      	ldr	r3, [sp, #4]
    482a:	2b03      	cmp	r3, #3
    482c:	f200 80d3 	bhi.w	49d6 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4830:	9b01      	ldr	r3, [sp, #4]
    4832:	2b00      	cmp	r3, #0
    4834:	d040      	beq.n	48b8 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    4836:	9b01      	ldr	r3, [sp, #4]
    4838:	3b01      	subs	r3, #1
    483a:	2b01      	cmp	r3, #1
    483c:	f200 80cb 	bhi.w	49d6 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4840:	9b00      	ldr	r3, [sp, #0]
    4842:	2b00      	cmp	r3, #0
    4844:	f040 80c9 	bne.w	49da <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    4848:	4b68      	ldr	r3, [pc, #416]	; (49ec <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    484a:	2200      	movs	r2, #0
    484c:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    484e:	4b68      	ldr	r3, [pc, #416]	; (49f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4850:	681b      	ldr	r3, [r3, #0]
    4852:	685b      	ldr	r3, [r3, #4]
    4854:	4a67      	ldr	r2, [pc, #412]	; (49f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4856:	6812      	ldr	r2, [r2, #0]
    4858:	4610      	mov	r0, r2
    485a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    485c:	4b66      	ldr	r3, [pc, #408]	; (49f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    485e:	681b      	ldr	r3, [r3, #0]
    4860:	681b      	ldr	r3, [r3, #0]
    4862:	4a66      	ldr	r2, [pc, #408]	; (49fc <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4864:	6812      	ldr	r2, [r2, #0]
    4866:	4610      	mov	r0, r2
    4868:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    486a:	4b65      	ldr	r3, [pc, #404]	; (4a00 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    486c:	681b      	ldr	r3, [r3, #0]
    486e:	681b      	ldr	r3, [r3, #0]
    4870:	4a64      	ldr	r2, [pc, #400]	; (4a04 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4872:	6812      	ldr	r2, [r2, #0]
    4874:	4610      	mov	r0, r2
    4876:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4878:	4b63      	ldr	r3, [pc, #396]	; (4a08 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    487a:	681b      	ldr	r3, [r3, #0]
    487c:	681b      	ldr	r3, [r3, #0]
    487e:	4a63      	ldr	r2, [pc, #396]	; (4a0c <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4880:	6812      	ldr	r2, [r2, #0]
    4882:	4610      	mov	r0, r2
    4884:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4886:	4b62      	ldr	r3, [pc, #392]	; (4a10 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4888:	681b      	ldr	r3, [r3, #0]
    488a:	691b      	ldr	r3, [r3, #16]
    488c:	4a61      	ldr	r2, [pc, #388]	; (4a14 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    488e:	6812      	ldr	r2, [r2, #0]
    4890:	6812      	ldr	r2, [r2, #0]
    4892:	4610      	mov	r0, r2
    4894:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4896:	4b60      	ldr	r3, [pc, #384]	; (4a18 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4898:	681b      	ldr	r3, [r3, #0]
    489a:	68db      	ldr	r3, [r3, #12]
    489c:	4a5f      	ldr	r2, [pc, #380]	; (4a1c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    489e:	6812      	ldr	r2, [r2, #0]
    48a0:	6812      	ldr	r2, [r2, #0]
    48a2:	4610      	mov	r0, r2
    48a4:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    48a6:	4b5e      	ldr	r3, [pc, #376]	; (4a20 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    48a8:	681b      	ldr	r3, [r3, #0]
    48aa:	689b      	ldr	r3, [r3, #8]
    48ac:	4a5d      	ldr	r2, [pc, #372]	; (4a24 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    48ae:	6812      	ldr	r2, [r2, #0]
    48b0:	6812      	ldr	r2, [r2, #0]
    48b2:	4610      	mov	r0, r2
    48b4:	4798      	blx	r3
            }
        }
        break;
    48b6:	e090      	b.n	49da <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    48b8:	9b00      	ldr	r3, [sp, #0]
    48ba:	2b02      	cmp	r3, #2
    48bc:	f040 808f 	bne.w	49de <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    48c0:	4b4a      	ldr	r3, [pc, #296]	; (49ec <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    48c2:	2201      	movs	r2, #1
    48c4:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    48c6:	4b56      	ldr	r3, [pc, #344]	; (4a20 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    48c8:	681b      	ldr	r3, [r3, #0]
    48ca:	685b      	ldr	r3, [r3, #4]
    48cc:	4a55      	ldr	r2, [pc, #340]	; (4a24 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    48ce:	6812      	ldr	r2, [r2, #0]
    48d0:	4610      	mov	r0, r2
    48d2:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    48d4:	4b50      	ldr	r3, [pc, #320]	; (4a18 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    48d6:	681b      	ldr	r3, [r3, #0]
    48d8:	691b      	ldr	r3, [r3, #16]
    48da:	4a50      	ldr	r2, [pc, #320]	; (4a1c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    48dc:	6812      	ldr	r2, [r2, #0]
    48de:	4610      	mov	r0, r2
    48e0:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    48e2:	4b4d      	ldr	r3, [pc, #308]	; (4a18 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    48e4:	681b      	ldr	r3, [r3, #0]
    48e6:	689b      	ldr	r3, [r3, #8]
    48e8:	4a4c      	ldr	r2, [pc, #304]	; (4a1c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    48ea:	6812      	ldr	r2, [r2, #0]
    48ec:	4610      	mov	r0, r2
    48ee:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    48f0:	4b47      	ldr	r3, [pc, #284]	; (4a10 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    48f2:	681b      	ldr	r3, [r3, #0]
    48f4:	68db      	ldr	r3, [r3, #12]
    48f6:	4a47      	ldr	r2, [pc, #284]	; (4a14 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    48f8:	6812      	ldr	r2, [r2, #0]
    48fa:	4610      	mov	r0, r2
    48fc:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    48fe:	4b44      	ldr	r3, [pc, #272]	; (4a10 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4900:	681b      	ldr	r3, [r3, #0]
    4902:	689b      	ldr	r3, [r3, #8]
    4904:	4a43      	ldr	r2, [pc, #268]	; (4a14 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4906:	6812      	ldr	r2, [r2, #0]
    4908:	6812      	ldr	r2, [r2, #0]
    490a:	4610      	mov	r0, r2
    490c:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    490e:	4b38      	ldr	r3, [pc, #224]	; (49f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4910:	681b      	ldr	r3, [r3, #0]
    4912:	685b      	ldr	r3, [r3, #4]
    4914:	4a44      	ldr	r2, [pc, #272]	; (4a28 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4916:	6812      	ldr	r2, [r2, #0]
    4918:	4610      	mov	r0, r2
    491a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    491c:	4b36      	ldr	r3, [pc, #216]	; (49f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    491e:	681b      	ldr	r3, [r3, #0]
    4920:	681b      	ldr	r3, [r3, #0]
    4922:	4a42      	ldr	r2, [pc, #264]	; (4a2c <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4924:	6812      	ldr	r2, [r2, #0]
    4926:	4610      	mov	r0, r2
    4928:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    492a:	4b35      	ldr	r3, [pc, #212]	; (4a00 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    492c:	681b      	ldr	r3, [r3, #0]
    492e:	681b      	ldr	r3, [r3, #0]
    4930:	4a3f      	ldr	r2, [pc, #252]	; (4a30 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4932:	6812      	ldr	r2, [r2, #0]
    4934:	4610      	mov	r0, r2
    4936:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4938:	4b33      	ldr	r3, [pc, #204]	; (4a08 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    493a:	681b      	ldr	r3, [r3, #0]
    493c:	681b      	ldr	r3, [r3, #0]
    493e:	4a3d      	ldr	r2, [pc, #244]	; (4a34 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4940:	6812      	ldr	r2, [r2, #0]
    4942:	4610      	mov	r0, r2
    4944:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4946:	e04a      	b.n	49de <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4948:	9b00      	ldr	r3, [sp, #0]
    494a:	2b02      	cmp	r3, #2
    494c:	d149      	bne.n	49e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    494e:	4b27      	ldr	r3, [pc, #156]	; (49ec <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4950:	2201      	movs	r2, #1
    4952:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4954:	4b32      	ldr	r3, [pc, #200]	; (4a20 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4956:	681b      	ldr	r3, [r3, #0]
    4958:	685b      	ldr	r3, [r3, #4]
    495a:	4a32      	ldr	r2, [pc, #200]	; (4a24 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    495c:	6812      	ldr	r2, [r2, #0]
    495e:	4610      	mov	r0, r2
    4960:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4962:	4b2d      	ldr	r3, [pc, #180]	; (4a18 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4964:	681b      	ldr	r3, [r3, #0]
    4966:	691b      	ldr	r3, [r3, #16]
    4968:	4a2c      	ldr	r2, [pc, #176]	; (4a1c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    496a:	6812      	ldr	r2, [r2, #0]
    496c:	4610      	mov	r0, r2
    496e:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4970:	4b29      	ldr	r3, [pc, #164]	; (4a18 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4972:	681b      	ldr	r3, [r3, #0]
    4974:	689b      	ldr	r3, [r3, #8]
    4976:	4a29      	ldr	r2, [pc, #164]	; (4a1c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4978:	6812      	ldr	r2, [r2, #0]
    497a:	4610      	mov	r0, r2
    497c:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    497e:	4b24      	ldr	r3, [pc, #144]	; (4a10 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4980:	681b      	ldr	r3, [r3, #0]
    4982:	68db      	ldr	r3, [r3, #12]
    4984:	4a23      	ldr	r2, [pc, #140]	; (4a14 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4986:	6812      	ldr	r2, [r2, #0]
    4988:	4610      	mov	r0, r2
    498a:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    498c:	4b20      	ldr	r3, [pc, #128]	; (4a10 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    498e:	681b      	ldr	r3, [r3, #0]
    4990:	689b      	ldr	r3, [r3, #8]
    4992:	4a20      	ldr	r2, [pc, #128]	; (4a14 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4994:	6812      	ldr	r2, [r2, #0]
    4996:	6812      	ldr	r2, [r2, #0]
    4998:	4610      	mov	r0, r2
    499a:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    499c:	4b26      	ldr	r3, [pc, #152]	; (4a38 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    499e:	681b      	ldr	r3, [r3, #0]
    49a0:	685b      	ldr	r3, [r3, #4]
    49a2:	4a26      	ldr	r2, [pc, #152]	; (4a3c <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    49a4:	6812      	ldr	r2, [r2, #0]
    49a6:	4610      	mov	r0, r2
    49a8:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    49aa:	4b25      	ldr	r3, [pc, #148]	; (4a40 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    49ac:	681b      	ldr	r3, [r3, #0]
    49ae:	681b      	ldr	r3, [r3, #0]
    49b0:	4a24      	ldr	r2, [pc, #144]	; (4a44 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    49b2:	6812      	ldr	r2, [r2, #0]
    49b4:	4610      	mov	r0, r2
    49b6:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    49b8:	4b23      	ldr	r3, [pc, #140]	; (4a48 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    49ba:	681b      	ldr	r3, [r3, #0]
    49bc:	681b      	ldr	r3, [r3, #0]
    49be:	4a23      	ldr	r2, [pc, #140]	; (4a4c <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    49c0:	6812      	ldr	r2, [r2, #0]
    49c2:	4610      	mov	r0, r2
    49c4:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    49c6:	4b22      	ldr	r3, [pc, #136]	; (4a50 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    49c8:	681b      	ldr	r3, [r3, #0]
    49ca:	681b      	ldr	r3, [r3, #0]
    49cc:	4a21      	ldr	r2, [pc, #132]	; (4a54 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    49ce:	6812      	ldr	r2, [r2, #0]
    49d0:	4610      	mov	r0, r2
    49d2:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    49d4:	e005      	b.n	49e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    49d6:	bf00      	nop
    49d8:	e004      	b.n	49e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    49da:	bf00      	nop
    49dc:	e002      	b.n	49e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    49de:	bf00      	nop
    49e0:	e000      	b.n	49e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    49e2:	bf00      	nop
    }

}
    49e4:	bf00      	nop
    49e6:	b003      	add	sp, #12
    49e8:	f85d fb04 	ldr.w	pc, [sp], #4
    49ec:	1fff8b19 	.word	0x1fff8b19
    49f0:	1fff8bb8 	.word	0x1fff8bb8
    49f4:	1fff8bd8 	.word	0x1fff8bd8
    49f8:	1fff8bbc 	.word	0x1fff8bbc
    49fc:	1fff8be0 	.word	0x1fff8be0
    4a00:	1fff8bc0 	.word	0x1fff8bc0
    4a04:	1fff8be8 	.word	0x1fff8be8
    4a08:	1fff8bc4 	.word	0x1fff8bc4
    4a0c:	1fff8bf0 	.word	0x1fff8bf0
    4a10:	1fff8bac 	.word	0x1fff8bac
    4a14:	1fff8bd0 	.word	0x1fff8bd0
    4a18:	1fff8bb0 	.word	0x1fff8bb0
    4a1c:	1fff8bcc 	.word	0x1fff8bcc
    4a20:	1fff8bb4 	.word	0x1fff8bb4
    4a24:	1fff8bc8 	.word	0x1fff8bc8
    4a28:	1fff8bd4 	.word	0x1fff8bd4
    4a2c:	1fff8bdc 	.word	0x1fff8bdc
    4a30:	1fff8be4 	.word	0x1fff8be4
    4a34:	1fff8bec 	.word	0x1fff8bec
    4a38:	1fff8bf4 	.word	0x1fff8bf4
    4a3c:	1fff8c04 	.word	0x1fff8c04
    4a40:	1fff8bf8 	.word	0x1fff8bf8
    4a44:	1fff8c08 	.word	0x1fff8c08
    4a48:	1fff8bfc 	.word	0x1fff8bfc
    4a4c:	1fff8c0c 	.word	0x1fff8c0c
    4a50:	1fff8c00 	.word	0x1fff8c00
    4a54:	1fff8c10 	.word	0x1fff8c10

00004a58 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4a58:	b500      	push	{lr}
    4a5a:	b083      	sub	sp, #12
    4a5c:	9001      	str	r0, [sp, #4]
    4a5e:	9100      	str	r1, [sp, #0]
    switch(Command)
    4a60:	9b00      	ldr	r3, [sp, #0]
    4a62:	2b04      	cmp	r3, #4
    4a64:	d010      	beq.n	4a88 <Clock_Ip_Command+0x30>
    4a66:	9b00      	ldr	r3, [sp, #0]
    4a68:	2b04      	cmp	r3, #4
    4a6a:	d811      	bhi.n	4a90 <Clock_Ip_Command+0x38>
    4a6c:	9b00      	ldr	r3, [sp, #0]
    4a6e:	2b01      	cmp	r3, #1
    4a70:	d006      	beq.n	4a80 <Clock_Ip_Command+0x28>
    4a72:	9b00      	ldr	r3, [sp, #0]
    4a74:	2b02      	cmp	r3, #2
    4a76:	d10b      	bne.n	4a90 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4a78:	9801      	ldr	r0, [sp, #4]
    4a7a:	f7ff fdb3 	bl	45e4 <Clock_Ip_ClockInitializeObjects>
            break;
    4a7e:	e008      	b.n	4a92 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4a80:	9801      	ldr	r0, [sp, #4]
    4a82:	f7ff f9db 	bl	3e3c <Clock_Ip_SpecificPlatformInitClock>
            break;
    4a86:	e004      	b.n	4a92 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4a88:	9801      	ldr	r0, [sp, #4]
    4a8a:	f7ff f8ed 	bl	3c68 <DisableSafeClock>
            break;
    4a8e:	e000      	b.n	4a92 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4a90:	bf00      	nop
    }
}
    4a92:	bf00      	nop
    4a94:	b003      	add	sp, #12
    4a96:	f85d fb04 	ldr.w	pc, [sp], #4
    4a9a:	bf00      	nop

00004a9c <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4a9c:	b500      	push	{lr}
    4a9e:	b085      	sub	sp, #20
    4aa0:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4aa2:	4a20      	ldr	r2, [pc, #128]	; (4b24 <Mcu_Init+0x88>)
    4aa4:	9b01      	ldr	r3, [sp, #4]
    4aa6:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4aa8:	2300      	movs	r3, #0
    4aaa:	9303      	str	r3, [sp, #12]
    4aac:	e010      	b.n	4ad0 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4aae:	4b1d      	ldr	r3, [pc, #116]	; (4b24 <Mcu_Init+0x88>)
    4ab0:	681b      	ldr	r3, [r3, #0]
    4ab2:	6919      	ldr	r1, [r3, #16]
    4ab4:	9a03      	ldr	r2, [sp, #12]
    4ab6:	4613      	mov	r3, r2
    4ab8:	005b      	lsls	r3, r3, #1
    4aba:	4413      	add	r3, r2
    4abc:	009b      	lsls	r3, r3, #2
    4abe:	440b      	add	r3, r1
    4ac0:	681b      	ldr	r3, [r3, #0]
    4ac2:	9a03      	ldr	r2, [sp, #12]
    4ac4:	b2d1      	uxtb	r1, r2
    4ac6:	4a18      	ldr	r2, [pc, #96]	; (4b28 <Mcu_Init+0x8c>)
    4ac8:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4aca:	9b03      	ldr	r3, [sp, #12]
    4acc:	3301      	adds	r3, #1
    4ace:	9303      	str	r3, [sp, #12]
    4ad0:	4b14      	ldr	r3, [pc, #80]	; (4b24 <Mcu_Init+0x88>)
    4ad2:	681b      	ldr	r3, [r3, #0]
    4ad4:	689b      	ldr	r3, [r3, #8]
    4ad6:	9a03      	ldr	r2, [sp, #12]
    4ad8:	429a      	cmp	r2, r3
    4ada:	d3e8      	bcc.n	4aae <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4adc:	2300      	movs	r3, #0
    4ade:	9303      	str	r3, [sp, #12]
    4ae0:	e010      	b.n	4b04 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4ae2:	4b10      	ldr	r3, [pc, #64]	; (4b24 <Mcu_Init+0x88>)
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	6959      	ldr	r1, [r3, #20]
    4ae8:	9a03      	ldr	r2, [sp, #12]
    4aea:	4613      	mov	r3, r2
    4aec:	01db      	lsls	r3, r3, #7
    4aee:	1a9b      	subs	r3, r3, r2
    4af0:	00db      	lsls	r3, r3, #3
    4af2:	440b      	add	r3, r1
    4af4:	681b      	ldr	r3, [r3, #0]
    4af6:	9a03      	ldr	r2, [sp, #12]
    4af8:	b2d1      	uxtb	r1, r2
    4afa:	4a0c      	ldr	r2, [pc, #48]	; (4b2c <Mcu_Init+0x90>)
    4afc:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4afe:	9b03      	ldr	r3, [sp, #12]
    4b00:	3301      	adds	r3, #1
    4b02:	9303      	str	r3, [sp, #12]
    4b04:	4b07      	ldr	r3, [pc, #28]	; (4b24 <Mcu_Init+0x88>)
    4b06:	681b      	ldr	r3, [r3, #0]
    4b08:	68db      	ldr	r3, [r3, #12]
    4b0a:	9a03      	ldr	r2, [sp, #12]
    4b0c:	429a      	cmp	r2, r3
    4b0e:	d3e8      	bcc.n	4ae2 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4b10:	4b04      	ldr	r3, [pc, #16]	; (4b24 <Mcu_Init+0x88>)
    4b12:	681b      	ldr	r3, [r3, #0]
    4b14:	699b      	ldr	r3, [r3, #24]
    4b16:	4618      	mov	r0, r3
    4b18:	f000 f88a 	bl	4c30 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4b1c:	bf00      	nop
    4b1e:	b005      	add	sp, #20
    4b20:	f85d fb04 	ldr.w	pc, [sp], #4
    4b24:	1fff8cec 	.word	0x1fff8cec
    4b28:	1fff8ce8 	.word	0x1fff8ce8
    4b2c:	1fff8ce4 	.word	0x1fff8ce4

00004b30 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4b30:	b084      	sub	sp, #16
    4b32:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4b34:	2301      	movs	r3, #1
    4b36:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4b3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4b3e:	4618      	mov	r0, r3
    4b40:	b004      	add	sp, #16
    4b42:	4770      	bx	lr

00004b44 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4b44:	b500      	push	{lr}
    4b46:	b085      	sub	sp, #20
    4b48:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4b4a:	4a0e      	ldr	r2, [pc, #56]	; (4b84 <Mcu_InitClock+0x40>)
    4b4c:	9b01      	ldr	r3, [sp, #4]
    4b4e:	4413      	add	r3, r2
    4b50:	781b      	ldrb	r3, [r3, #0]
    4b52:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4b56:	4b0c      	ldr	r3, [pc, #48]	; (4b88 <Mcu_InitClock+0x44>)
    4b58:	681b      	ldr	r3, [r3, #0]
    4b5a:	6959      	ldr	r1, [r3, #20]
    4b5c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4b60:	4613      	mov	r3, r2
    4b62:	01db      	lsls	r3, r3, #7
    4b64:	1a9b      	subs	r3, r3, r2
    4b66:	00db      	lsls	r3, r3, #3
    4b68:	440b      	add	r3, r1
    4b6a:	4618      	mov	r0, r3
    4b6c:	f000 f86a 	bl	4c44 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4b70:	2300      	movs	r3, #0
    4b72:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4b76:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4b7a:	4618      	mov	r0, r3
    4b7c:	b005      	add	sp, #20
    4b7e:	f85d fb04 	ldr.w	pc, [sp], #4
    4b82:	bf00      	nop
    4b84:	1fff8ce4 	.word	0x1fff8ce4
    4b88:	1fff8cec 	.word	0x1fff8cec

00004b8c <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4b8c:	b500      	push	{lr}
    4b8e:	b085      	sub	sp, #20
    4b90:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4b92:	4a0d      	ldr	r2, [pc, #52]	; (4bc8 <Mcu_SetMode+0x3c>)
    4b94:	9b01      	ldr	r3, [sp, #4]
    4b96:	4413      	add	r3, r2
    4b98:	781b      	ldrb	r3, [r3, #0]
    4b9a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4b9e:	f001 fb27 	bl	61f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4ba2:	4b0a      	ldr	r3, [pc, #40]	; (4bcc <Mcu_SetMode+0x40>)
    4ba4:	681b      	ldr	r3, [r3, #0]
    4ba6:	6919      	ldr	r1, [r3, #16]
    4ba8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4bac:	4613      	mov	r3, r2
    4bae:	005b      	lsls	r3, r3, #1
    4bb0:	4413      	add	r3, r2
    4bb2:	009b      	lsls	r3, r3, #2
    4bb4:	440b      	add	r3, r1
    4bb6:	4618      	mov	r0, r3
    4bb8:	f000 f84e 	bl	4c58 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4bbc:	f001 fb44 	bl	6248 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4bc0:	bf00      	nop
    4bc2:	b005      	add	sp, #20
    4bc4:	f85d fb04 	ldr.w	pc, [sp], #4
    4bc8:	1fff8ce8 	.word	0x1fff8ce8
    4bcc:	1fff8cec 	.word	0x1fff8cec

00004bd0 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4bd0:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4bd2:	2302      	movs	r3, #2
    4bd4:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4bd6:	9b01      	ldr	r3, [sp, #4]
}
    4bd8:	4618      	mov	r0, r3
    4bda:	b002      	add	sp, #8
    4bdc:	4770      	bx	lr

00004bde <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4bde:	b500      	push	{lr}
    4be0:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4be2:	f000 f843 	bl	4c6c <Mcu_Ipw_GetResetReason>
    4be6:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4be8:	9b01      	ldr	r3, [sp, #4]
}
    4bea:	4618      	mov	r0, r3
    4bec:	b003      	add	sp, #12
    4bee:	f85d fb04 	ldr.w	pc, [sp], #4

00004bf2 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4bf2:	b500      	push	{lr}
    4bf4:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4bf6:	f000 f83f 	bl	4c78 <Mcu_Ipw_GetResetRawValue>
    4bfa:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4bfc:	9b01      	ldr	r3, [sp, #4]
}
    4bfe:	4618      	mov	r0, r3
    4c00:	b003      	add	sp, #12
    4c02:	f85d fb04 	ldr.w	pc, [sp], #4

00004c06 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4c06:	b500      	push	{lr}
    4c08:	b083      	sub	sp, #12
    4c0a:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4c0c:	9801      	ldr	r0, [sp, #4]
    4c0e:	f000 f839 	bl	4c84 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4c12:	bf00      	nop
    4c14:	b003      	add	sp, #12
    4c16:	f85d fb04 	ldr.w	pc, [sp], #4

00004c1a <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4c1a:	b082      	sub	sp, #8
    4c1c:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4c1e:	4b03      	ldr	r3, [pc, #12]	; (4c2c <Mcu_ClkSrcFailureNotification+0x12>)
    4c20:	681b      	ldr	r3, [r3, #0]
    4c22:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4c24:	bf00      	nop
    4c26:	b002      	add	sp, #8
    4c28:	4770      	bx	lr
    4c2a:	bf00      	nop
    4c2c:	1fff8cec 	.word	0x1fff8cec

00004c30 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4c30:	b500      	push	{lr}
    4c32:	b083      	sub	sp, #12
    4c34:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4c36:	9801      	ldr	r0, [sp, #4]
    4c38:	f000 f882 	bl	4d40 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4c3c:	bf00      	nop
    4c3e:	b003      	add	sp, #12
    4c40:	f85d fb04 	ldr.w	pc, [sp], #4

00004c44 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4c44:	b500      	push	{lr}
    4c46:	b083      	sub	sp, #12
    4c48:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4c4a:	9801      	ldr	r0, [sp, #4]
    4c4c:	f7fc fc6a 	bl	1524 <Clock_Ip_InitClock>
}
    4c50:	bf00      	nop
    4c52:	b003      	add	sp, #12
    4c54:	f85d fb04 	ldr.w	pc, [sp], #4

00004c58 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4c58:	b500      	push	{lr}
    4c5a:	b083      	sub	sp, #12
    4c5c:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4c5e:	9801      	ldr	r0, [sp, #4]
    4c60:	f000 f820 	bl	4ca4 <Power_Ip_SetMode>
}
    4c64:	bf00      	nop
    4c66:	b003      	add	sp, #12
    4c68:	f85d fb04 	ldr.w	pc, [sp], #4

00004c6c <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4c6c:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4c6e:	f000 f84f 	bl	4d10 <Power_Ip_GetResetReason>
    4c72:	4603      	mov	r3, r0
}
    4c74:	4618      	mov	r0, r3
    4c76:	bd08      	pop	{r3, pc}

00004c78 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4c78:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4c7a:	f000 f857 	bl	4d2c <Power_Ip_GetResetRawValue>
    4c7e:	4603      	mov	r3, r0
}
    4c80:	4618      	mov	r0, r3
    4c82:	bd08      	pop	{r3, pc}

00004c84 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4c84:	b500      	push	{lr}
    4c86:	b083      	sub	sp, #12
    4c88:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4c8a:	9b01      	ldr	r3, [sp, #4]
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d102      	bne.n	4c96 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4c90:	f000 f86c 	bl	4d6c <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4c94:	e001      	b.n	4c9a <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4c96:	f000 f86e 	bl	4d76 <Power_Ip_EnableSleepOnExit>
}
    4c9a:	bf00      	nop
    4c9c:	b003      	add	sp, #12
    4c9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004ca4 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4ca4:	b500      	push	{lr}
    4ca6:	b085      	sub	sp, #20
    4ca8:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4caa:	9b01      	ldr	r3, [sp, #4]
    4cac:	685b      	ldr	r3, [r3, #4]
    4cae:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4cb0:	9802      	ldr	r0, [sp, #8]
    4cb2:	f000 f9f5 	bl	50a0 <Power_Ip_SMC_ModeCheckEntry>
    4cb6:	4603      	mov	r3, r0
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d002      	beq.n	4cc2 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4cbc:	2301      	movs	r3, #1
    4cbe:	9303      	str	r3, [sp, #12]
    4cc0:	e003      	b.n	4cca <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4cc2:	9801      	ldr	r0, [sp, #4]
    4cc4:	f000 fa1e 	bl	5104 <Power_Ip_SMC_ModeConfig>
    4cc8:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4cca:	9b03      	ldr	r3, [sp, #12]
    4ccc:	2b01      	cmp	r3, #1
    4cce:	d103      	bne.n	4cd8 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4cd0:	21ff      	movs	r1, #255	; 0xff
    4cd2:	2003      	movs	r0, #3
    4cd4:	f000 f8f4 	bl	4ec0 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4cd8:	bf00      	nop
    4cda:	b005      	add	sp, #20
    4cdc:	f85d fb04 	ldr.w	pc, [sp], #4

00004ce0 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4ce0:	b084      	sub	sp, #16
    4ce2:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4ce4:	230c      	movs	r3, #12
    4ce6:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4ce8:	4a08      	ldr	r2, [pc, #32]	; (4d0c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4cea:	9b01      	ldr	r3, [sp, #4]
    4cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4cf0:	2b0e      	cmp	r3, #14
    4cf2:	d805      	bhi.n	4d00 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4cf4:	4a05      	ldr	r2, [pc, #20]	; (4d0c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4cf6:	9b01      	ldr	r3, [sp, #4]
    4cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4cfc:	9303      	str	r3, [sp, #12]
    4cfe:	e001      	b.n	4d04 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4d00:	230c      	movs	r3, #12
    4d02:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4d04:	9b03      	ldr	r3, [sp, #12]
}
    4d06:	4618      	mov	r0, r3
    4d08:	b004      	add	sp, #16
    4d0a:	4770      	bx	lr
    4d0c:	00007d18 	.word	0x00007d18

00004d10 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4d10:	b500      	push	{lr}
    4d12:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4d14:	f000 f940 	bl	4f98 <Power_Ip_RCM_GetResetReason>
    4d18:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4d1a:	9801      	ldr	r0, [sp, #4]
    4d1c:	f7ff ffe0 	bl	4ce0 <Power_Ip_ConvertIntergeToResetType>
    4d20:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4d22:	9b00      	ldr	r3, [sp, #0]
}
    4d24:	4618      	mov	r0, r3
    4d26:	b003      	add	sp, #12
    4d28:	f85d fb04 	ldr.w	pc, [sp], #4

00004d2c <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4d2c:	b500      	push	{lr}
    4d2e:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4d30:	f000 f98a 	bl	5048 <Power_Ip_RCM_GetResetRawValue>
    4d34:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4d36:	9b01      	ldr	r3, [sp, #4]
}
    4d38:	4618      	mov	r0, r3
    4d3a:	b003      	add	sp, #12
    4d3c:	f85d fb04 	ldr.w	pc, [sp], #4

00004d40 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4d40:	b500      	push	{lr}
    4d42:	b083      	sub	sp, #12
    4d44:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4d46:	9b01      	ldr	r3, [sp, #4]
    4d48:	681b      	ldr	r3, [r3, #0]
    4d4a:	4618      	mov	r0, r3
    4d4c:	f000 f90e 	bl	4f6c <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4d50:	9b01      	ldr	r3, [sp, #4]
    4d52:	685b      	ldr	r3, [r3, #4]
    4d54:	4618      	mov	r0, r3
    4d56:	f000 f86d 	bl	4e34 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4d5a:	9b01      	ldr	r3, [sp, #4]
    4d5c:	689b      	ldr	r3, [r3, #8]
    4d5e:	4618      	mov	r0, r3
    4d60:	f000 f990 	bl	5084 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4d64:	bf00      	nop
    4d66:	b003      	add	sp, #12
    4d68:	f85d fb04 	ldr.w	pc, [sp], #4

00004d6c <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4d6c:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4d6e:	f000 f811 	bl	4d94 <Power_Ip_CM4_DisableSleepOnExit>
}
    4d72:	bf00      	nop
    4d74:	bd08      	pop	{r3, pc}

00004d76 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4d76:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4d78:	f000 f820 	bl	4dbc <Power_Ip_CM4_EnableSleepOnExit>
}
    4d7c:	bf00      	nop
    4d7e:	bd08      	pop	{r3, pc}

00004d80 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4d80:	b082      	sub	sp, #8
    4d82:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4d84:	4a02      	ldr	r2, [pc, #8]	; (4d90 <Power_Ip_InstallNotificationsCallback+0x10>)
    4d86:	9b01      	ldr	r3, [sp, #4]
    4d88:	6013      	str	r3, [r2, #0]
}
    4d8a:	bf00      	nop
    4d8c:	b002      	add	sp, #8
    4d8e:	4770      	bx	lr
    4d90:	1fff8b1c 	.word	0x1fff8b1c

00004d94 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4d94:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4d96:	2300      	movs	r3, #0
    4d98:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4d9a:	4b07      	ldr	r3, [pc, #28]	; (4db8 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4d9c:	681b      	ldr	r3, [r3, #0]
    4d9e:	685b      	ldr	r3, [r3, #4]
    4da0:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4da2:	9b01      	ldr	r3, [sp, #4]
    4da4:	f023 0302 	bic.w	r3, r3, #2
    4da8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4daa:	4b03      	ldr	r3, [pc, #12]	; (4db8 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4dac:	681b      	ldr	r3, [r3, #0]
    4dae:	9a01      	ldr	r2, [sp, #4]
    4db0:	605a      	str	r2, [r3, #4]
}
    4db2:	bf00      	nop
    4db4:	b002      	add	sp, #8
    4db6:	4770      	bx	lr
    4db8:	1fff8b20 	.word	0x1fff8b20

00004dbc <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4dbc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4dbe:	2300      	movs	r3, #0
    4dc0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4dc2:	4b07      	ldr	r3, [pc, #28]	; (4de0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4dc4:	681b      	ldr	r3, [r3, #0]
    4dc6:	685b      	ldr	r3, [r3, #4]
    4dc8:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4dca:	9b01      	ldr	r3, [sp, #4]
    4dcc:	f043 0302 	orr.w	r3, r3, #2
    4dd0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4dd2:	4b03      	ldr	r3, [pc, #12]	; (4de0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4dd4:	681b      	ldr	r3, [r3, #0]
    4dd6:	9a01      	ldr	r2, [sp, #4]
    4dd8:	605a      	str	r2, [r3, #4]
}
    4dda:	bf00      	nop
    4ddc:	b002      	add	sp, #8
    4dde:	4770      	bx	lr
    4de0:	1fff8b20 	.word	0x1fff8b20

00004de4 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    4de4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4de6:	2300      	movs	r3, #0
    4de8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4dea:	4b07      	ldr	r3, [pc, #28]	; (4e08 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4dec:	681b      	ldr	r3, [r3, #0]
    4dee:	685b      	ldr	r3, [r3, #4]
    4df0:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4df2:	9b01      	ldr	r3, [sp, #4]
    4df4:	f043 0304 	orr.w	r3, r3, #4
    4df8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4dfa:	4b03      	ldr	r3, [pc, #12]	; (4e08 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4dfc:	681b      	ldr	r3, [r3, #0]
    4dfe:	9a01      	ldr	r2, [sp, #4]
    4e00:	605a      	str	r2, [r3, #4]
}
    4e02:	bf00      	nop
    4e04:	b002      	add	sp, #8
    4e06:	4770      	bx	lr
    4e08:	1fff8b20 	.word	0x1fff8b20

00004e0c <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    4e0c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4e0e:	2300      	movs	r3, #0
    4e10:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4e12:	4b07      	ldr	r3, [pc, #28]	; (4e30 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4e14:	681b      	ldr	r3, [r3, #0]
    4e16:	685b      	ldr	r3, [r3, #4]
    4e18:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4e1a:	9b01      	ldr	r3, [sp, #4]
    4e1c:	f023 0304 	bic.w	r3, r3, #4
    4e20:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4e22:	4b03      	ldr	r3, [pc, #12]	; (4e30 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4e24:	681b      	ldr	r3, [r3, #0]
    4e26:	9a01      	ldr	r2, [sp, #4]
    4e28:	605a      	str	r2, [r3, #4]
}
    4e2a:	bf00      	nop
    4e2c:	b002      	add	sp, #8
    4e2e:	4770      	bx	lr
    4e30:	1fff8b20 	.word	0x1fff8b20

00004e34 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    4e34:	b084      	sub	sp, #16
    4e36:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    4e38:	4b20      	ldr	r3, [pc, #128]	; (4ebc <Power_Ip_PMC_PowerInit+0x88>)
    4e3a:	781b      	ldrb	r3, [r3, #0]
    4e3c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    4e40:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4e44:	f003 030f 	and.w	r3, r3, #15
    4e48:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4e4c:	9b01      	ldr	r3, [sp, #4]
    4e4e:	781a      	ldrb	r2, [r3, #0]
    4e50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4e54:	4313      	orrs	r3, r2
    4e56:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4e5a:	4a18      	ldr	r2, [pc, #96]	; (4ebc <Power_Ip_PMC_PowerInit+0x88>)
    4e5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4e60:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4e62:	4b16      	ldr	r3, [pc, #88]	; (4ebc <Power_Ip_PMC_PowerInit+0x88>)
    4e64:	785b      	ldrb	r3, [r3, #1]
    4e66:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4e6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4e6e:	f003 031f 	and.w	r3, r3, #31
    4e72:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4e76:	9b01      	ldr	r3, [sp, #4]
    4e78:	785a      	ldrb	r2, [r3, #1]
    4e7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4e7e:	4313      	orrs	r3, r2
    4e80:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    4e84:	4a0d      	ldr	r2, [pc, #52]	; (4ebc <Power_Ip_PMC_PowerInit+0x88>)
    4e86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4e8a:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    4e8c:	4b0b      	ldr	r3, [pc, #44]	; (4ebc <Power_Ip_PMC_PowerInit+0x88>)
    4e8e:	789b      	ldrb	r3, [r3, #2]
    4e90:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    4e94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4e98:	f003 0338 	and.w	r3, r3, #56	; 0x38
    4e9c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    4ea0:	9b01      	ldr	r3, [sp, #4]
    4ea2:	789a      	ldrb	r2, [r3, #2]
    4ea4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ea8:	4313      	orrs	r3, r2
    4eaa:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    4eae:	4a03      	ldr	r2, [pc, #12]	; (4ebc <Power_Ip_PMC_PowerInit+0x88>)
    4eb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4eb4:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    4eb6:	bf00      	nop
    4eb8:	b004      	add	sp, #16
    4eba:	4770      	bx	lr
    4ebc:	4007d000 	.word	0x4007d000

00004ec0 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4ec0:	b500      	push	{lr}
    4ec2:	b083      	sub	sp, #12
    4ec4:	9001      	str	r0, [sp, #4]
    4ec6:	460b      	mov	r3, r1
    4ec8:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    4ecc:	4b05      	ldr	r3, [pc, #20]	; (4ee4 <Power_Ip_ReportPowerErrors+0x24>)
    4ece:	681b      	ldr	r3, [r3, #0]
    4ed0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4ed4:	4611      	mov	r1, r2
    4ed6:	9801      	ldr	r0, [sp, #4]
    4ed8:	4798      	blx	r3
}
    4eda:	bf00      	nop
    4edc:	b003      	add	sp, #12
    4ede:	f85d fb04 	ldr.w	pc, [sp], #4
    4ee2:	bf00      	nop
    4ee4:	1fff8b1c 	.word	0x1fff8b1c

00004ee8 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4ee8:	b082      	sub	sp, #8
    4eea:	9001      	str	r0, [sp, #4]
    4eec:	460b      	mov	r3, r1
    4eee:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    4ef2:	bf00      	nop
    4ef4:	b002      	add	sp, #8
    4ef6:	4770      	bx	lr

00004ef8 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    4ef8:	b500      	push	{lr}
    4efa:	b085      	sub	sp, #20
    4efc:	9003      	str	r0, [sp, #12]
    4efe:	9102      	str	r1, [sp, #8]
    4f00:	9201      	str	r2, [sp, #4]
    4f02:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    4f04:	2000      	movs	r0, #0
    4f06:	f7fc f83c 	bl	f82 <OsIf_GetCounter>
    4f0a:	4602      	mov	r2, r0
    4f0c:	9b03      	ldr	r3, [sp, #12]
    4f0e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    4f10:	9b02      	ldr	r3, [sp, #8]
    4f12:	2200      	movs	r2, #0
    4f14:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    4f16:	2100      	movs	r1, #0
    4f18:	9800      	ldr	r0, [sp, #0]
    4f1a:	f7fc f87e 	bl	101a <OsIf_MicrosToTicks>
    4f1e:	4602      	mov	r2, r0
    4f20:	9b01      	ldr	r3, [sp, #4]
    4f22:	601a      	str	r2, [r3, #0]
}
    4f24:	bf00      	nop
    4f26:	b005      	add	sp, #20
    4f28:	f85d fb04 	ldr.w	pc, [sp], #4

00004f2c <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    4f2c:	b500      	push	{lr}
    4f2e:	b087      	sub	sp, #28
    4f30:	9003      	str	r0, [sp, #12]
    4f32:	9102      	str	r1, [sp, #8]
    4f34:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    4f36:	2300      	movs	r3, #0
    4f38:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    4f3c:	2100      	movs	r1, #0
    4f3e:	9803      	ldr	r0, [sp, #12]
    4f40:	f7fc f838 	bl	fb4 <OsIf_GetElapsed>
    4f44:	4602      	mov	r2, r0
    4f46:	9b02      	ldr	r3, [sp, #8]
    4f48:	681b      	ldr	r3, [r3, #0]
    4f4a:	441a      	add	r2, r3
    4f4c:	9b02      	ldr	r3, [sp, #8]
    4f4e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    4f50:	9b02      	ldr	r3, [sp, #8]
    4f52:	681b      	ldr	r3, [r3, #0]
    4f54:	9a01      	ldr	r2, [sp, #4]
    4f56:	429a      	cmp	r2, r3
    4f58:	d802      	bhi.n	4f60 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    4f5a:	2301      	movs	r3, #1
    4f5c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    4f60:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    4f64:	4618      	mov	r0, r3
    4f66:	b007      	add	sp, #28
    4f68:	f85d fb04 	ldr.w	pc, [sp], #4

00004f6c <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    4f6c:	b082      	sub	sp, #8
    4f6e:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    4f70:	9b01      	ldr	r3, [sp, #4]
    4f72:	681a      	ldr	r2, [r3, #0]
    4f74:	4907      	ldr	r1, [pc, #28]	; (4f94 <Power_Ip_RCM_ResetInit+0x28>)
    4f76:	f641 7307 	movw	r3, #7943	; 0x1f07
    4f7a:	4013      	ands	r3, r2
    4f7c:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    4f7e:	9b01      	ldr	r3, [sp, #4]
    4f80:	685a      	ldr	r2, [r3, #4]
    4f82:	4904      	ldr	r1, [pc, #16]	; (4f94 <Power_Ip_RCM_ResetInit+0x28>)
    4f84:	f642 73ff 	movw	r3, #12287	; 0x2fff
    4f88:	4013      	ands	r3, r2
    4f8a:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    4f8c:	bf00      	nop
    4f8e:	b002      	add	sp, #8
    4f90:	4770      	bx	lr
    4f92:	bf00      	nop
    4f94:	4007f000 	.word	0x4007f000

00004f98 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    4f98:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    4f9a:	230c      	movs	r3, #12
    4f9c:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    4f9e:	2300      	movs	r3, #0
    4fa0:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    4fa2:	2300      	movs	r3, #0
    4fa4:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    4fa6:	2300      	movs	r3, #0
    4fa8:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4faa:	4b25      	ldr	r3, [pc, #148]	; (5040 <Power_Ip_RCM_GetResetReason+0xa8>)
    4fac:	699a      	ldr	r2, [r3, #24]
    4fae:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4fb2:	4013      	ands	r3, r2
    4fb4:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    4fb6:	9b03      	ldr	r3, [sp, #12]
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d008      	beq.n	4fce <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4fbc:	4920      	ldr	r1, [pc, #128]	; (5040 <Power_Ip_RCM_GetResetReason+0xa8>)
    4fbe:	9a03      	ldr	r2, [sp, #12]
    4fc0:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4fc4:	4013      	ands	r3, r2
    4fc6:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4fc8:	4a1e      	ldr	r2, [pc, #120]	; (5044 <Power_Ip_RCM_GetResetReason+0xac>)
    4fca:	9b03      	ldr	r3, [sp, #12]
    4fcc:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    4fce:	4b1d      	ldr	r3, [pc, #116]	; (5044 <Power_Ip_RCM_GetResetReason+0xac>)
    4fd0:	681b      	ldr	r3, [r3, #0]
    4fd2:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    4fd4:	9a02      	ldr	r2, [sp, #8]
    4fd6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4fda:	4013      	ands	r3, r2
    4fdc:	2b82      	cmp	r3, #130	; 0x82
    4fde:	d102      	bne.n	4fe6 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    4fe0:	2305      	movs	r3, #5
    4fe2:	9307      	str	r3, [sp, #28]
    4fe4:	e027      	b.n	5036 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    4fe6:	2300      	movs	r3, #0
    4fe8:	9306      	str	r3, [sp, #24]
    4fea:	e021      	b.n	5030 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    4fec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4ff0:	9b06      	ldr	r3, [sp, #24]
    4ff2:	fa22 f303 	lsr.w	r3, r2, r3
    4ff6:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    4ff8:	9a01      	ldr	r2, [sp, #4]
    4ffa:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    4ffe:	4013      	ands	r3, r2
    5000:	2b00      	cmp	r3, #0
    5002:	d012      	beq.n	502a <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5004:	9a01      	ldr	r2, [sp, #4]
    5006:	9b02      	ldr	r3, [sp, #8]
    5008:	4013      	ands	r3, r2
    500a:	2b00      	cmp	r3, #0
    500c:	d00a      	beq.n	5024 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    500e:	9b05      	ldr	r3, [sp, #20]
    5010:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5012:	9b04      	ldr	r3, [sp, #16]
    5014:	3301      	adds	r3, #1
    5016:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5018:	9b04      	ldr	r3, [sp, #16]
    501a:	2b01      	cmp	r3, #1
    501c:	d902      	bls.n	5024 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    501e:	230d      	movs	r3, #13
    5020:	9307      	str	r3, [sp, #28]
                        break;
    5022:	e008      	b.n	5036 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5024:	9b05      	ldr	r3, [sp, #20]
    5026:	3301      	adds	r3, #1
    5028:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    502a:	9b06      	ldr	r3, [sp, #24]
    502c:	3301      	adds	r3, #1
    502e:	9306      	str	r3, [sp, #24]
    5030:	9b06      	ldr	r3, [sp, #24]
    5032:	2b1f      	cmp	r3, #31
    5034:	d9da      	bls.n	4fec <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5036:	9b07      	ldr	r3, [sp, #28]
}
    5038:	4618      	mov	r0, r3
    503a:	b008      	add	sp, #32
    503c:	4770      	bx	lr
    503e:	bf00      	nop
    5040:	4007f000 	.word	0x4007f000
    5044:	1fff8cf0 	.word	0x1fff8cf0

00005048 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5048:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    504a:	4b0c      	ldr	r3, [pc, #48]	; (507c <Power_Ip_RCM_GetResetRawValue+0x34>)
    504c:	699a      	ldr	r2, [r3, #24]
    504e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5052:	4013      	ands	r3, r2
    5054:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5056:	9b01      	ldr	r3, [sp, #4]
    5058:	2b00      	cmp	r3, #0
    505a:	d008      	beq.n	506e <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    505c:	4907      	ldr	r1, [pc, #28]	; (507c <Power_Ip_RCM_GetResetRawValue+0x34>)
    505e:	9a01      	ldr	r2, [sp, #4]
    5060:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5064:	4013      	ands	r3, r2
    5066:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5068:	4a05      	ldr	r2, [pc, #20]	; (5080 <Power_Ip_RCM_GetResetRawValue+0x38>)
    506a:	9b01      	ldr	r3, [sp, #4]
    506c:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    506e:	4b04      	ldr	r3, [pc, #16]	; (5080 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5070:	681b      	ldr	r3, [r3, #0]
    5072:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5074:	9b00      	ldr	r3, [sp, #0]
}
    5076:	4618      	mov	r0, r3
    5078:	b002      	add	sp, #8
    507a:	4770      	bx	lr
    507c:	4007f000 	.word	0x4007f000
    5080:	1fff8cf0 	.word	0x1fff8cf0

00005084 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5084:	b082      	sub	sp, #8
    5086:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5088:	9b01      	ldr	r3, [sp, #4]
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	4a03      	ldr	r2, [pc, #12]	; (509c <Power_Ip_SMC_AllowedModesConfig+0x18>)
    508e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5092:	6093      	str	r3, [r2, #8]
}
    5094:	bf00      	nop
    5096:	b002      	add	sp, #8
    5098:	4770      	bx	lr
    509a:	bf00      	nop
    509c:	4007e000 	.word	0x4007e000

000050a0 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    50a0:	b084      	sub	sp, #16
    50a2:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    50a4:	2301      	movs	r3, #1
    50a6:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    50a8:	4b15      	ldr	r3, [pc, #84]	; (5100 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    50aa:	695b      	ldr	r3, [r3, #20]
    50ac:	b2db      	uxtb	r3, r3
    50ae:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    50b0:	9b01      	ldr	r3, [sp, #4]
    50b2:	2b02      	cmp	r3, #2
    50b4:	d012      	beq.n	50dc <Power_Ip_SMC_ModeCheckEntry+0x3c>
    50b6:	9b01      	ldr	r3, [sp, #4]
    50b8:	2b02      	cmp	r3, #2
    50ba:	d818      	bhi.n	50ee <Power_Ip_SMC_ModeCheckEntry+0x4e>
    50bc:	9b01      	ldr	r3, [sp, #4]
    50be:	2b00      	cmp	r3, #0
    50c0:	d003      	beq.n	50ca <Power_Ip_SMC_ModeCheckEntry+0x2a>
    50c2:	9b01      	ldr	r3, [sp, #4]
    50c4:	2b01      	cmp	r3, #1
    50c6:	d003      	beq.n	50d0 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    50c8:	e011      	b.n	50ee <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    50ca:	2300      	movs	r3, #0
    50cc:	9303      	str	r3, [sp, #12]
            break;
    50ce:	e013      	b.n	50f8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    50d0:	9b02      	ldr	r3, [sp, #8]
    50d2:	2b01      	cmp	r3, #1
    50d4:	d10d      	bne.n	50f2 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    50d6:	2300      	movs	r3, #0
    50d8:	9303      	str	r3, [sp, #12]
            break;
    50da:	e00a      	b.n	50f2 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    50dc:	9b02      	ldr	r3, [sp, #8]
    50de:	2b01      	cmp	r3, #1
    50e0:	d002      	beq.n	50e8 <Power_Ip_SMC_ModeCheckEntry+0x48>
    50e2:	9b02      	ldr	r3, [sp, #8]
    50e4:	2b10      	cmp	r3, #16
    50e6:	d106      	bne.n	50f6 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    50e8:	2300      	movs	r3, #0
    50ea:	9303      	str	r3, [sp, #12]
            break;
    50ec:	e003      	b.n	50f6 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    50ee:	bf00      	nop
    50f0:	e002      	b.n	50f8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    50f2:	bf00      	nop
    50f4:	e000      	b.n	50f8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    50f6:	bf00      	nop
        }
    }

    return PowerModeCheck;
    50f8:	9b03      	ldr	r3, [sp, #12]
}
    50fa:	4618      	mov	r0, r3
    50fc:	b004      	add	sp, #16
    50fe:	4770      	bx	lr
    5100:	4007e000 	.word	0x4007e000

00005104 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5104:	b500      	push	{lr}
    5106:	b08b      	sub	sp, #44	; 0x2c
    5108:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    510a:	2300      	movs	r3, #0
    510c:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    510e:	2300      	movs	r3, #0
    5110:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5112:	2300      	movs	r3, #0
    5114:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5118:	9b01      	ldr	r3, [sp, #4]
    511a:	685b      	ldr	r3, [r3, #4]
    511c:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    511e:	9b08      	ldr	r3, [sp, #32]
    5120:	2b02      	cmp	r3, #2
    5122:	d076      	beq.n	5212 <Power_Ip_SMC_ModeConfig+0x10e>
    5124:	9b08      	ldr	r3, [sp, #32]
    5126:	2b02      	cmp	r3, #2
    5128:	f200 80ab 	bhi.w	5282 <Power_Ip_SMC_ModeConfig+0x17e>
    512c:	9b08      	ldr	r3, [sp, #32]
    512e:	2b00      	cmp	r3, #0
    5130:	d003      	beq.n	513a <Power_Ip_SMC_ModeConfig+0x36>
    5132:	9b08      	ldr	r3, [sp, #32]
    5134:	2b01      	cmp	r3, #1
    5136:	d034      	beq.n	51a2 <Power_Ip_SMC_ModeConfig+0x9e>
    5138:	e0a3      	b.n	5282 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    513a:	4b58      	ldr	r3, [pc, #352]	; (529c <Power_Ip_SMC_ModeConfig+0x198>)
    513c:	68db      	ldr	r3, [r3, #12]
    513e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5140:	9b06      	ldr	r3, [sp, #24]
    5142:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5146:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5148:	4a54      	ldr	r2, [pc, #336]	; (529c <Power_Ip_SMC_ModeConfig+0x198>)
    514a:	9b06      	ldr	r3, [sp, #24]
    514c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    514e:	aa02      	add	r2, sp, #8
    5150:	a903      	add	r1, sp, #12
    5152:	a804      	add	r0, sp, #16
    5154:	f24c 3350 	movw	r3, #50000	; 0xc350
    5158:	f7ff fece 	bl	4ef8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    515c:	9a02      	ldr	r2, [sp, #8]
    515e:	a903      	add	r1, sp, #12
    5160:	ab04      	add	r3, sp, #16
    5162:	4618      	mov	r0, r3
    5164:	f7ff fee2 	bl	4f2c <Power_Ip_TimeoutExpired>
    5168:	4603      	mov	r3, r0
    516a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    516e:	4b4b      	ldr	r3, [pc, #300]	; (529c <Power_Ip_SMC_ModeConfig+0x198>)
    5170:	695b      	ldr	r3, [r3, #20]
    5172:	f003 0301 	and.w	r3, r3, #1
    5176:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5178:	9b05      	ldr	r3, [sp, #20]
    517a:	2b01      	cmp	r3, #1
    517c:	d006      	beq.n	518c <Power_Ip_SMC_ModeConfig+0x88>
    517e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5182:	f083 0301 	eor.w	r3, r3, #1
    5186:	b2db      	uxtb	r3, r3
    5188:	2b00      	cmp	r3, #0
    518a:	d1e7      	bne.n	515c <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    518c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5190:	2b00      	cmp	r3, #0
    5192:	d079      	beq.n	5288 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5194:	2301      	movs	r3, #1
    5196:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5198:	21ff      	movs	r1, #255	; 0xff
    519a:	2000      	movs	r0, #0
    519c:	f7ff fe90 	bl	4ec0 <Power_Ip_ReportPowerErrors>
            }

            break;
    51a0:	e072      	b.n	5288 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    51a2:	4b3e      	ldr	r3, [pc, #248]	; (529c <Power_Ip_SMC_ModeConfig+0x198>)
    51a4:	68db      	ldr	r3, [r3, #12]
    51a6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    51a8:	9b06      	ldr	r3, [sp, #24]
    51aa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    51ae:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    51b0:	9b06      	ldr	r3, [sp, #24]
    51b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    51b6:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    51b8:	4a38      	ldr	r2, [pc, #224]	; (529c <Power_Ip_SMC_ModeConfig+0x198>)
    51ba:	9b06      	ldr	r3, [sp, #24]
    51bc:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    51be:	aa02      	add	r2, sp, #8
    51c0:	a903      	add	r1, sp, #12
    51c2:	a804      	add	r0, sp, #16
    51c4:	f24c 3350 	movw	r3, #50000	; 0xc350
    51c8:	f7ff fe96 	bl	4ef8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    51cc:	9a02      	ldr	r2, [sp, #8]
    51ce:	a903      	add	r1, sp, #12
    51d0:	ab04      	add	r3, sp, #16
    51d2:	4618      	mov	r0, r3
    51d4:	f7ff feaa 	bl	4f2c <Power_Ip_TimeoutExpired>
    51d8:	4603      	mov	r3, r0
    51da:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    51de:	4b2f      	ldr	r3, [pc, #188]	; (529c <Power_Ip_SMC_ModeConfig+0x198>)
    51e0:	695b      	ldr	r3, [r3, #20]
    51e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    51e6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    51e8:	9b05      	ldr	r3, [sp, #20]
    51ea:	2b80      	cmp	r3, #128	; 0x80
    51ec:	d006      	beq.n	51fc <Power_Ip_SMC_ModeConfig+0xf8>
    51ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
    51f2:	f083 0301 	eor.w	r3, r3, #1
    51f6:	b2db      	uxtb	r3, r3
    51f8:	2b00      	cmp	r3, #0
    51fa:	d1e7      	bne.n	51cc <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    51fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5200:	2b00      	cmp	r3, #0
    5202:	d043      	beq.n	528c <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5204:	2301      	movs	r3, #1
    5206:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5208:	21ff      	movs	r1, #255	; 0xff
    520a:	2000      	movs	r0, #0
    520c:	f7ff fe58 	bl	4ec0 <Power_Ip_ReportPowerErrors>
            }

            break;
    5210:	e03c      	b.n	528c <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5212:	4b22      	ldr	r3, [pc, #136]	; (529c <Power_Ip_SMC_ModeConfig+0x198>)
    5214:	68db      	ldr	r3, [r3, #12]
    5216:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5218:	9b06      	ldr	r3, [sp, #24]
    521a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    521e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5220:	9b06      	ldr	r3, [sp, #24]
    5222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5226:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5228:	4a1c      	ldr	r2, [pc, #112]	; (529c <Power_Ip_SMC_ModeConfig+0x198>)
    522a:	9b06      	ldr	r3, [sp, #24]
    522c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    522e:	aa02      	add	r2, sp, #8
    5230:	a903      	add	r1, sp, #12
    5232:	a804      	add	r0, sp, #16
    5234:	f24c 3350 	movw	r3, #50000	; 0xc350
    5238:	f7ff fe5e 	bl	4ef8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    523c:	9a02      	ldr	r2, [sp, #8]
    523e:	a903      	add	r1, sp, #12
    5240:	ab04      	add	r3, sp, #16
    5242:	4618      	mov	r0, r3
    5244:	f7ff fe72 	bl	4f2c <Power_Ip_TimeoutExpired>
    5248:	4603      	mov	r3, r0
    524a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    524e:	4b13      	ldr	r3, [pc, #76]	; (529c <Power_Ip_SMC_ModeConfig+0x198>)
    5250:	695b      	ldr	r3, [r3, #20]
    5252:	f003 0304 	and.w	r3, r3, #4
    5256:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5258:	9b05      	ldr	r3, [sp, #20]
    525a:	2b04      	cmp	r3, #4
    525c:	d006      	beq.n	526c <Power_Ip_SMC_ModeConfig+0x168>
    525e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5262:	f083 0301 	eor.w	r3, r3, #1
    5266:	b2db      	uxtb	r3, r3
    5268:	2b00      	cmp	r3, #0
    526a:	d1e7      	bne.n	523c <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    526c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5270:	2b00      	cmp	r3, #0
    5272:	d00d      	beq.n	5290 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5274:	2301      	movs	r3, #1
    5276:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5278:	21ff      	movs	r1, #255	; 0xff
    527a:	2000      	movs	r0, #0
    527c:	f7ff fe20 	bl	4ec0 <Power_Ip_ReportPowerErrors>
            }

            break;
    5280:	e006      	b.n	5290 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5282:	2301      	movs	r3, #1
    5284:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5286:	e004      	b.n	5292 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5288:	bf00      	nop
    528a:	e002      	b.n	5292 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    528c:	bf00      	nop
    528e:	e000      	b.n	5292 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5290:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5292:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5294:	4618      	mov	r0, r3
    5296:	b00b      	add	sp, #44	; 0x2c
    5298:	f85d fb04 	ldr.w	pc, [sp], #4
    529c:	4007e000 	.word	0x4007e000

000052a0 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    52a0:	b500      	push	{lr}
    52a2:	b085      	sub	sp, #20
    52a4:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    52a6:	9b01      	ldr	r3, [sp, #4]
    52a8:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    52aa:	9803      	ldr	r0, [sp, #12]
    52ac:	f000 fbc8 	bl	5a40 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    52b0:	4a03      	ldr	r2, [pc, #12]	; (52c0 <Port_Init+0x20>)
    52b2:	9b03      	ldr	r3, [sp, #12]
    52b4:	6013      	str	r3, [r2, #0]
        }
    }
}
    52b6:	bf00      	nop
    52b8:	b005      	add	sp, #20
    52ba:	f85d fb04 	ldr.w	pc, [sp], #4
    52be:	bf00      	nop
    52c0:	1fff8cf4 	.word	0x1fff8cf4

000052c4 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    52c4:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    52c6:	4b03      	ldr	r3, [pc, #12]	; (52d4 <Port_RefreshPortDirection+0x10>)
    52c8:	681b      	ldr	r3, [r3, #0]
    52ca:	4618      	mov	r0, r3
    52cc:	f000 fc10 	bl	5af0 <Port_Ipw_RefreshPortDirection>
    }
}
    52d0:	bf00      	nop
    52d2:	bd08      	pop	{r3, pc}
    52d4:	1fff8cf4 	.word	0x1fff8cf4

000052d8 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    52d8:	b086      	sub	sp, #24
    52da:	9003      	str	r0, [sp, #12]
    52dc:	9102      	str	r1, [sp, #8]
    52de:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    52e0:	23ff      	movs	r3, #255	; 0xff
    52e2:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    52e4:	9b03      	ldr	r3, [sp, #12]
    52e6:	4a39      	ldr	r2, [pc, #228]	; (53cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    52e8:	4293      	cmp	r3, r2
    52ea:	d151      	bne.n	5390 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    52ec:	9b02      	ldr	r3, [sp, #8]
    52ee:	2b10      	cmp	r3, #16
    52f0:	d867      	bhi.n	53c2 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    52f2:	a201      	add	r2, pc, #4	; (adr r2, 52f8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    52f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    52f8:	0000533d 	.word	0x0000533d
    52fc:	0000534b 	.word	0x0000534b
    5300:	000053c3 	.word	0x000053c3
    5304:	000053c3 	.word	0x000053c3
    5308:	000053c3 	.word	0x000053c3
    530c:	000053c3 	.word	0x000053c3
    5310:	000053c3 	.word	0x000053c3
    5314:	000053c3 	.word	0x000053c3
    5318:	000053c3 	.word	0x000053c3
    531c:	000053c3 	.word	0x000053c3
    5320:	000053c3 	.word	0x000053c3
    5324:	000053c3 	.word	0x000053c3
    5328:	000053c3 	.word	0x000053c3
    532c:	00005359 	.word	0x00005359
    5330:	00005367 	.word	0x00005367
    5334:	00005375 	.word	0x00005375
    5338:	00005383 	.word	0x00005383
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    533c:	2301      	movs	r3, #1
    533e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5340:	9a05      	ldr	r2, [sp, #20]
    5342:	9b01      	ldr	r3, [sp, #4]
    5344:	4313      	orrs	r3, r2
    5346:	9305      	str	r3, [sp, #20]
                break;
    5348:	e03c      	b.n	53c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    534a:	2302      	movs	r3, #2
    534c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    534e:	9a05      	ldr	r2, [sp, #20]
    5350:	9b01      	ldr	r3, [sp, #4]
    5352:	4313      	orrs	r3, r2
    5354:	9305      	str	r3, [sp, #20]
                break;
    5356:	e035      	b.n	53c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5358:	2304      	movs	r3, #4
    535a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    535c:	9a05      	ldr	r2, [sp, #20]
    535e:	9b01      	ldr	r3, [sp, #4]
    5360:	4313      	orrs	r3, r2
    5362:	9305      	str	r3, [sp, #20]
                break;
    5364:	e02e      	b.n	53c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5366:	2308      	movs	r3, #8
    5368:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    536a:	9a05      	ldr	r2, [sp, #20]
    536c:	9b01      	ldr	r3, [sp, #4]
    536e:	4313      	orrs	r3, r2
    5370:	9305      	str	r3, [sp, #20]
                break;
    5372:	e027      	b.n	53c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5374:	230e      	movs	r3, #14
    5376:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5378:	9a05      	ldr	r2, [sp, #20]
    537a:	9b01      	ldr	r3, [sp, #4]
    537c:	4013      	ands	r3, r2
    537e:	9305      	str	r3, [sp, #20]
                break;
    5380:	e020      	b.n	53c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5382:	230d      	movs	r3, #13
    5384:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5386:	9a05      	ldr	r2, [sp, #20]
    5388:	9b01      	ldr	r3, [sp, #4]
    538a:	4013      	ands	r3, r2
    538c:	9305      	str	r3, [sp, #20]
                break;
    538e:	e019      	b.n	53c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5390:	9b03      	ldr	r3, [sp, #12]
    5392:	4a0f      	ldr	r2, [pc, #60]	; (53d0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5394:	4293      	cmp	r3, r2
    5396:	d115      	bne.n	53c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5398:	9b02      	ldr	r3, [sp, #8]
    539a:	2b00      	cmp	r3, #0
    539c:	d003      	beq.n	53a6 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    539e:	9b02      	ldr	r3, [sp, #8]
    53a0:	2b01      	cmp	r3, #1
    53a2:	d007      	beq.n	53b4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    53a4:	e00e      	b.n	53c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    53a6:	230b      	movs	r3, #11
    53a8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    53aa:	9a05      	ldr	r2, [sp, #20]
    53ac:	9b01      	ldr	r3, [sp, #4]
    53ae:	4013      	ands	r3, r2
    53b0:	9305      	str	r3, [sp, #20]
                break;
    53b2:	e007      	b.n	53c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    53b4:	2307      	movs	r3, #7
    53b6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    53b8:	9a05      	ldr	r2, [sp, #20]
    53ba:	9b01      	ldr	r3, [sp, #4]
    53bc:	4013      	ands	r3, r2
    53be:	9305      	str	r3, [sp, #20]
                break;
    53c0:	e000      	b.n	53c4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    53c2:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    53c4:	9b05      	ldr	r3, [sp, #20]
}
    53c6:	4618      	mov	r0, r3
    53c8:	b006      	add	sp, #24
    53ca:	4770      	bx	lr
    53cc:	4004a000 	.word	0x4004a000
    53d0:	4004b000 	.word	0x4004b000

000053d4 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    53d4:	b500      	push	{lr}
    53d6:	b089      	sub	sp, #36	; 0x24
    53d8:	9003      	str	r0, [sp, #12]
    53da:	9102      	str	r1, [sp, #8]
    53dc:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    53de:	9b01      	ldr	r3, [sp, #4]
    53e0:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    53e2:	9b01      	ldr	r3, [sp, #4]
    53e4:	2b08      	cmp	r3, #8
    53e6:	d121      	bne.n	542c <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    53e8:	4b13      	ldr	r3, [pc, #76]	; (5438 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    53ea:	685b      	ldr	r3, [r3, #4]
    53ec:	f003 030f 	and.w	r3, r3, #15
    53f0:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    53f2:	9a06      	ldr	r2, [sp, #24]
    53f4:	9902      	ldr	r1, [sp, #8]
    53f6:	9803      	ldr	r0, [sp, #12]
    53f8:	f7ff ff6e 	bl	52d8 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    53fc:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    53fe:	9b05      	ldr	r3, [sp, #20]
    5400:	2bff      	cmp	r3, #255	; 0xff
    5402:	d011      	beq.n	5428 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5404:	f001 f984 	bl	6710 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    5408:	4b0b      	ldr	r3, [pc, #44]	; (5438 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    540a:	685b      	ldr	r3, [r3, #4]
    540c:	4a0a      	ldr	r2, [pc, #40]	; (5438 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    540e:	f023 030f 	bic.w	r3, r3, #15
    5412:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5414:	4b08      	ldr	r3, [pc, #32]	; (5438 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5416:	685a      	ldr	r2, [r3, #4]
    5418:	9b05      	ldr	r3, [sp, #20]
    541a:	f003 030f 	and.w	r3, r3, #15
    541e:	4906      	ldr	r1, [pc, #24]	; (5438 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5420:	4313      	orrs	r3, r2
    5422:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5424:	f001 f9a0 	bl	6768 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    5428:	2300      	movs	r3, #0
    542a:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    542c:	9b07      	ldr	r3, [sp, #28]
}
    542e:	4618      	mov	r0, r3
    5430:	b009      	add	sp, #36	; 0x24
    5432:	f85d fb04 	ldr.w	pc, [sp], #4
    5436:	bf00      	nop
    5438:	40048000 	.word	0x40048000

0000543c <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    543c:	b500      	push	{lr}
    543e:	b087      	sub	sp, #28
    5440:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5442:	2300      	movs	r3, #0
    5444:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    5446:	2300      	movs	r3, #0
    5448:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    544a:	2300      	movs	r3, #0
    544c:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    544e:	9b01      	ldr	r3, [sp, #4]
    5450:	68db      	ldr	r3, [r3, #12]
    5452:	2b02      	cmp	r3, #2
    5454:	d00a      	beq.n	546c <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    5456:	9b05      	ldr	r3, [sp, #20]
    5458:	f043 0302 	orr.w	r3, r3, #2
    545c:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    545e:	9b01      	ldr	r3, [sp, #4]
    5460:	68db      	ldr	r3, [r3, #12]
    5462:	f003 0301 	and.w	r3, r3, #1
    5466:	9a05      	ldr	r2, [sp, #20]
    5468:	4313      	orrs	r3, r2
    546a:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    546c:	9b01      	ldr	r3, [sp, #4]
    546e:	699b      	ldr	r3, [r3, #24]
    5470:	019b      	lsls	r3, r3, #6
    5472:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5476:	9a05      	ldr	r2, [sp, #20]
    5478:	4313      	orrs	r3, r2
    547a:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    547c:	9b01      	ldr	r3, [sp, #4]
    547e:	6a1b      	ldr	r3, [r3, #32]
    5480:	03db      	lsls	r3, r3, #15
    5482:	b29b      	uxth	r3, r3
    5484:	9a05      	ldr	r2, [sp, #20]
    5486:	4313      	orrs	r3, r2
    5488:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    548a:	9b01      	ldr	r3, [sp, #4]
    548c:	7f1b      	ldrb	r3, [r3, #28]
    548e:	2b00      	cmp	r3, #0
    5490:	d001      	beq.n	5496 <Port_Ci_Port_Ip_PinInit+0x5a>
    5492:	2310      	movs	r3, #16
    5494:	e000      	b.n	5498 <Port_Ci_Port_Ip_PinInit+0x5c>
    5496:	2300      	movs	r3, #0
    5498:	9a05      	ldr	r2, [sp, #20]
    549a:	4313      	orrs	r3, r2
    549c:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    549e:	9b01      	ldr	r3, [sp, #4]
    54a0:	691b      	ldr	r3, [r3, #16]
    54a2:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    54a4:	9b01      	ldr	r3, [sp, #4]
    54a6:	6818      	ldr	r0, [r3, #0]
    54a8:	9b01      	ldr	r3, [sp, #4]
    54aa:	689b      	ldr	r3, [r3, #8]
    54ac:	9a04      	ldr	r2, [sp, #16]
    54ae:	4619      	mov	r1, r3
    54b0:	f7ff ff90 	bl	53d4 <Port_Ci_Port_Ip_ConfigureInterleave>
    54b4:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    54b6:	9b03      	ldr	r3, [sp, #12]
    54b8:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    54ba:	9b04      	ldr	r3, [sp, #16]
    54bc:	021b      	lsls	r3, r3, #8
    54be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    54c2:	9a05      	ldr	r2, [sp, #20]
    54c4:	4313      	orrs	r3, r2
    54c6:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    54c8:	f000 ff88 	bl	63dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    54cc:	9b01      	ldr	r3, [sp, #4]
    54ce:	681b      	ldr	r3, [r3, #0]
    54d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    54d4:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    54d6:	9b01      	ldr	r3, [sp, #4]
    54d8:	689b      	ldr	r3, [r3, #8]
    54da:	2201      	movs	r2, #1
    54dc:	fa02 f303 	lsl.w	r3, r2, r3
    54e0:	43db      	mvns	r3, r3
    54e2:	9a02      	ldr	r2, [sp, #8]
    54e4:	4013      	ands	r3, r2
    54e6:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    54e8:	9b01      	ldr	r3, [sp, #4]
    54ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    54ee:	2b00      	cmp	r3, #0
    54f0:	d001      	beq.n	54f6 <Port_Ci_Port_Ip_PinInit+0xba>
    54f2:	2201      	movs	r2, #1
    54f4:	e000      	b.n	54f8 <Port_Ci_Port_Ip_PinInit+0xbc>
    54f6:	2200      	movs	r2, #0
    54f8:	9b01      	ldr	r3, [sp, #4]
    54fa:	689b      	ldr	r3, [r3, #8]
    54fc:	fa02 f303 	lsl.w	r3, r2, r3
    5500:	9a02      	ldr	r2, [sp, #8]
    5502:	4313      	orrs	r3, r2
    5504:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    5506:	9b01      	ldr	r3, [sp, #4]
    5508:	681b      	ldr	r3, [r3, #0]
    550a:	9a02      	ldr	r2, [sp, #8]
    550c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5510:	f000 ff90 	bl	6434 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5514:	9b04      	ldr	r3, [sp, #16]
    5516:	2b01      	cmp	r3, #1
    5518:	d16d      	bne.n	55f6 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    551a:	9b01      	ldr	r3, [sp, #4]
    551c:	695b      	ldr	r3, [r3, #20]
    551e:	2b02      	cmp	r3, #2
    5520:	d138      	bne.n	5594 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5522:	9b01      	ldr	r3, [sp, #4]
    5524:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5528:	2b01      	cmp	r3, #1
    552a:	d10f      	bne.n	554c <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    552c:	f000 ffa8 	bl	6480 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5530:	9b01      	ldr	r3, [sp, #4]
    5532:	685b      	ldr	r3, [r3, #4]
    5534:	6859      	ldr	r1, [r3, #4]
    5536:	9b01      	ldr	r3, [sp, #4]
    5538:	689b      	ldr	r3, [r3, #8]
    553a:	2201      	movs	r2, #1
    553c:	409a      	lsls	r2, r3
    553e:	9b01      	ldr	r3, [sp, #4]
    5540:	685b      	ldr	r3, [r3, #4]
    5542:	430a      	orrs	r2, r1
    5544:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    5546:	f000 ffc7 	bl	64d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    554a:	e013      	b.n	5574 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    554c:	9b01      	ldr	r3, [sp, #4]
    554e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5552:	2b00      	cmp	r3, #0
    5554:	d10e      	bne.n	5574 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    5556:	f000 ffe5 	bl	6524 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    555a:	9b01      	ldr	r3, [sp, #4]
    555c:	685b      	ldr	r3, [r3, #4]
    555e:	6899      	ldr	r1, [r3, #8]
    5560:	9b01      	ldr	r3, [sp, #4]
    5562:	689b      	ldr	r3, [r3, #8]
    5564:	2201      	movs	r2, #1
    5566:	409a      	lsls	r2, r3
    5568:	9b01      	ldr	r3, [sp, #4]
    556a:	685b      	ldr	r3, [r3, #4]
    556c:	430a      	orrs	r2, r1
    556e:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5570:	f001 f804 	bl	657c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5574:	f001 f828 	bl	65c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    5578:	9b01      	ldr	r3, [sp, #4]
    557a:	685b      	ldr	r3, [r3, #4]
    557c:	6959      	ldr	r1, [r3, #20]
    557e:	9b01      	ldr	r3, [sp, #4]
    5580:	689b      	ldr	r3, [r3, #8]
    5582:	2201      	movs	r2, #1
    5584:	409a      	lsls	r2, r3
    5586:	9b01      	ldr	r3, [sp, #4]
    5588:	685b      	ldr	r3, [r3, #4]
    558a:	430a      	orrs	r2, r1
    558c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    558e:	f001 f847 	bl	6620 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5592:	e030      	b.n	55f6 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5594:	f001 f818 	bl	65c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    5598:	9b01      	ldr	r3, [sp, #4]
    559a:	685b      	ldr	r3, [r3, #4]
    559c:	6959      	ldr	r1, [r3, #20]
    559e:	9b01      	ldr	r3, [sp, #4]
    55a0:	689b      	ldr	r3, [r3, #8]
    55a2:	2201      	movs	r2, #1
    55a4:	fa02 f303 	lsl.w	r3, r2, r3
    55a8:	43da      	mvns	r2, r3
    55aa:	9b01      	ldr	r3, [sp, #4]
    55ac:	685b      	ldr	r3, [r3, #4]
    55ae:	400a      	ands	r2, r1
    55b0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    55b2:	f001 f835 	bl	6620 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    55b6:	f001 f859 	bl	666c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    55ba:	9b01      	ldr	r3, [sp, #4]
    55bc:	685b      	ldr	r3, [r3, #4]
    55be:	6999      	ldr	r1, [r3, #24]
    55c0:	9b01      	ldr	r3, [sp, #4]
    55c2:	689b      	ldr	r3, [r3, #8]
    55c4:	2201      	movs	r2, #1
    55c6:	fa02 f303 	lsl.w	r3, r2, r3
    55ca:	43da      	mvns	r2, r3
    55cc:	9b01      	ldr	r3, [sp, #4]
    55ce:	685b      	ldr	r3, [r3, #4]
    55d0:	400a      	ands	r2, r1
    55d2:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    55d4:	9b01      	ldr	r3, [sp, #4]
    55d6:	695b      	ldr	r3, [r3, #20]
    55d8:	2b03      	cmp	r3, #3
    55da:	d10a      	bne.n	55f2 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    55dc:	9b01      	ldr	r3, [sp, #4]
    55de:	685b      	ldr	r3, [r3, #4]
    55e0:	6999      	ldr	r1, [r3, #24]
    55e2:	9b01      	ldr	r3, [sp, #4]
    55e4:	689b      	ldr	r3, [r3, #8]
    55e6:	2201      	movs	r2, #1
    55e8:	409a      	lsls	r2, r3
    55ea:	9b01      	ldr	r3, [sp, #4]
    55ec:	685b      	ldr	r3, [r3, #4]
    55ee:	430a      	orrs	r2, r1
    55f0:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    55f2:	f001 f867 	bl	66c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    55f6:	9b01      	ldr	r3, [sp, #4]
    55f8:	681b      	ldr	r3, [r3, #0]
    55fa:	9a01      	ldr	r2, [sp, #4]
    55fc:	6892      	ldr	r2, [r2, #8]
    55fe:	9905      	ldr	r1, [sp, #20]
    5600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5604:	bf00      	nop
    5606:	b007      	add	sp, #28
    5608:	f85d fb04 	ldr.w	pc, [sp], #4

0000560c <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    560c:	b500      	push	{lr}
    560e:	b085      	sub	sp, #20
    5610:	9001      	str	r0, [sp, #4]
    5612:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5614:	2300      	movs	r3, #0
    5616:	9303      	str	r3, [sp, #12]
    5618:	e00d      	b.n	5636 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    561a:	9a03      	ldr	r2, [sp, #12]
    561c:	4613      	mov	r3, r2
    561e:	009b      	lsls	r3, r3, #2
    5620:	4413      	add	r3, r2
    5622:	00db      	lsls	r3, r3, #3
    5624:	461a      	mov	r2, r3
    5626:	9b00      	ldr	r3, [sp, #0]
    5628:	4413      	add	r3, r2
    562a:	4618      	mov	r0, r3
    562c:	f7ff ff06 	bl	543c <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    5630:	9b03      	ldr	r3, [sp, #12]
    5632:	3301      	adds	r3, #1
    5634:	9303      	str	r3, [sp, #12]
    5636:	9a03      	ldr	r2, [sp, #12]
    5638:	9b01      	ldr	r3, [sp, #4]
    563a:	429a      	cmp	r2, r3
    563c:	d3ed      	bcc.n	561a <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    563e:	2300      	movs	r3, #0
}
    5640:	4618      	mov	r0, r3
    5642:	b005      	add	sp, #20
    5644:	f85d fb04 	ldr.w	pc, [sp], #4

00005648 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    5648:	b500      	push	{lr}
    564a:	b087      	sub	sp, #28
    564c:	9003      	str	r0, [sp, #12]
    564e:	9102      	str	r1, [sp, #8]
    5650:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    5652:	9a01      	ldr	r2, [sp, #4]
    5654:	9902      	ldr	r1, [sp, #8]
    5656:	9803      	ldr	r0, [sp, #12]
    5658:	f7ff febc 	bl	53d4 <Port_Ci_Port_Ip_ConfigureInterleave>
    565c:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    565e:	f001 f8a9 	bl	67b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5662:	9b03      	ldr	r3, [sp, #12]
    5664:	9a02      	ldr	r2, [sp, #8]
    5666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    566a:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    566c:	9b04      	ldr	r3, [sp, #16]
    566e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5672:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5674:	9b05      	ldr	r3, [sp, #20]
    5676:	021b      	lsls	r3, r3, #8
    5678:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    567c:	9a04      	ldr	r2, [sp, #16]
    567e:	4313      	orrs	r3, r2
    5680:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5682:	9b03      	ldr	r3, [sp, #12]
    5684:	9a02      	ldr	r2, [sp, #8]
    5686:	9904      	ldr	r1, [sp, #16]
    5688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    568c:	f001 f8be 	bl	680c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5690:	bf00      	nop
    5692:	b007      	add	sp, #28
    5694:	f85d fb04 	ldr.w	pc, [sp], #4

00005698 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    5698:	b500      	push	{lr}
    569a:	b083      	sub	sp, #12
    569c:	9001      	str	r0, [sp, #4]
    569e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    56a0:	f001 f8da 	bl	6858 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    56a4:	9b01      	ldr	r3, [sp, #4]
    56a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    56aa:	2101      	movs	r1, #1
    56ac:	9b00      	ldr	r3, [sp, #0]
    56ae:	fa01 f303 	lsl.w	r3, r1, r3
    56b2:	431a      	orrs	r2, r3
    56b4:	9b01      	ldr	r3, [sp, #4]
    56b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    56ba:	f001 f8f9 	bl	68b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    56be:	bf00      	nop
    56c0:	b003      	add	sp, #12
    56c2:	f85d fb04 	ldr.w	pc, [sp], #4

000056c6 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    56c6:	b500      	push	{lr}
    56c8:	b083      	sub	sp, #12
    56ca:	9001      	str	r0, [sp, #4]
    56cc:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    56ce:	f001 f915 	bl	68fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    56d2:	9b01      	ldr	r3, [sp, #4]
    56d4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    56d8:	2101      	movs	r1, #1
    56da:	9b00      	ldr	r3, [sp, #0]
    56dc:	fa01 f303 	lsl.w	r3, r1, r3
    56e0:	43db      	mvns	r3, r3
    56e2:	401a      	ands	r2, r3
    56e4:	9b01      	ldr	r3, [sp, #4]
    56e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    56ea:	f001 f933 	bl	6954 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    56ee:	bf00      	nop
    56f0:	b003      	add	sp, #12
    56f2:	f85d fb04 	ldr.w	pc, [sp], #4

000056f6 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    56f6:	b082      	sub	sp, #8
    56f8:	9001      	str	r0, [sp, #4]
    56fa:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    56fc:	9b00      	ldr	r3, [sp, #0]
    56fe:	785b      	ldrb	r3, [r3, #1]
    5700:	f003 0201 	and.w	r2, r3, #1
    5704:	9b01      	ldr	r3, [sp, #4]
    5706:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    570a:	9b00      	ldr	r3, [sp, #0]
    570c:	789b      	ldrb	r3, [r3, #2]
    570e:	f003 021f 	and.w	r2, r3, #31
    5712:	9b01      	ldr	r3, [sp, #4]
    5714:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    5718:	bf00      	nop
    571a:	b002      	add	sp, #8
    571c:	4770      	bx	lr

0000571e <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    571e:	b086      	sub	sp, #24
    5720:	9003      	str	r0, [sp, #12]
    5722:	9301      	str	r3, [sp, #4]
    5724:	460b      	mov	r3, r1
    5726:	f8ad 300a 	strh.w	r3, [sp, #10]
    572a:	4613      	mov	r3, r2
    572c:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    5730:	2300      	movs	r3, #0
    5732:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    5736:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    573a:	f043 0301 	orr.w	r3, r3, #1
    573e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    5742:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5746:	f043 0302 	orr.w	r3, r3, #2
    574a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    574e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5752:	f043 0310 	orr.w	r3, r3, #16
    5756:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    575a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    575e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5762:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    5766:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    576a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    576e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5772:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    577a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    577e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5782:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5786:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    578a:	4013      	ands	r3, r2
    578c:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5790:	9b01      	ldr	r3, [sp, #4]
    5792:	2b00      	cmp	r3, #0
    5794:	d003      	beq.n	579e <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5796:	9b01      	ldr	r3, [sp, #4]
    5798:	2b01      	cmp	r3, #1
    579a:	d00a      	beq.n	57b2 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    579c:	e013      	b.n	57c6 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    579e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57a2:	041a      	lsls	r2, r3, #16
    57a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    57a8:	431a      	orrs	r2, r3
    57aa:	9b03      	ldr	r3, [sp, #12]
    57ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    57b0:	e009      	b.n	57c6 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    57b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    57b6:	041a      	lsls	r2, r3, #16
    57b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    57bc:	431a      	orrs	r2, r3
    57be:	9b03      	ldr	r3, [sp, #12]
    57c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    57c4:	bf00      	nop
    }
}
    57c6:	bf00      	nop
    57c8:	b006      	add	sp, #24
    57ca:	4770      	bx	lr

000057cc <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    57cc:	b500      	push	{lr}
    57ce:	b087      	sub	sp, #28
    57d0:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    57d2:	9b01      	ldr	r3, [sp, #4]
    57d4:	885b      	ldrh	r3, [r3, #2]
    57d6:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    57da:	9b01      	ldr	r3, [sp, #4]
    57dc:	689b      	ldr	r3, [r3, #8]
    57de:	7a1b      	ldrb	r3, [r3, #8]
    57e0:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    57e4:	9b01      	ldr	r3, [sp, #4]
    57e6:	689b      	ldr	r3, [r3, #8]
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    57ec:	9b01      	ldr	r3, [sp, #4]
    57ee:	689b      	ldr	r3, [r3, #8]
    57f0:	685b      	ldr	r3, [r3, #4]
    57f2:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    57f4:	2300      	movs	r3, #0
    57f6:	f8ad 3016 	strh.w	r3, [sp, #22]
    57fa:	e111      	b.n	5a20 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    57fc:	9b02      	ldr	r3, [sp, #8]
    57fe:	2b02      	cmp	r3, #2
    5800:	d169      	bne.n	58d6 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5802:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5806:	2b01      	cmp	r3, #1
    5808:	d11a      	bne.n	5840 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    580a:	9b01      	ldr	r3, [sp, #4]
    580c:	685a      	ldr	r2, [r3, #4]
    580e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5812:	005b      	lsls	r3, r3, #1
    5814:	4413      	add	r3, r2
    5816:	881b      	ldrh	r3, [r3, #0]
    5818:	f003 021f 	and.w	r2, r3, #31
    581c:	9b01      	ldr	r3, [sp, #4]
    581e:	6859      	ldr	r1, [r3, #4]
    5820:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5824:	005b      	lsls	r3, r3, #1
    5826:	440b      	add	r3, r1
    5828:	881b      	ldrh	r3, [r3, #0]
    582a:	095b      	lsrs	r3, r3, #5
    582c:	b29b      	uxth	r3, r3
    582e:	4619      	mov	r1, r3
    5830:	4b81      	ldr	r3, [pc, #516]	; (5a38 <Port_Ipw_Init_UnusedPins+0x26c>)
    5832:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5836:	2101      	movs	r1, #1
    5838:	fa01 f202 	lsl.w	r2, r1, r2
    583c:	605a      	str	r2, [r3, #4]
    583e:	e01d      	b.n	587c <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    5840:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5844:	2b00      	cmp	r3, #0
    5846:	d119      	bne.n	587c <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5848:	9b01      	ldr	r3, [sp, #4]
    584a:	685a      	ldr	r2, [r3, #4]
    584c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5850:	005b      	lsls	r3, r3, #1
    5852:	4413      	add	r3, r2
    5854:	881b      	ldrh	r3, [r3, #0]
    5856:	f003 021f 	and.w	r2, r3, #31
    585a:	9b01      	ldr	r3, [sp, #4]
    585c:	6859      	ldr	r1, [r3, #4]
    585e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5862:	005b      	lsls	r3, r3, #1
    5864:	440b      	add	r3, r1
    5866:	881b      	ldrh	r3, [r3, #0]
    5868:	095b      	lsrs	r3, r3, #5
    586a:	b29b      	uxth	r3, r3
    586c:	4619      	mov	r1, r3
    586e:	4b72      	ldr	r3, [pc, #456]	; (5a38 <Port_Ipw_Init_UnusedPins+0x26c>)
    5870:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5874:	2101      	movs	r1, #1
    5876:	fa01 f202 	lsl.w	r2, r1, r2
    587a:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    587c:	f001 f890 	bl	69a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5880:	9b01      	ldr	r3, [sp, #4]
    5882:	685a      	ldr	r2, [r3, #4]
    5884:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5888:	005b      	lsls	r3, r3, #1
    588a:	4413      	add	r3, r2
    588c:	881b      	ldrh	r3, [r3, #0]
    588e:	095b      	lsrs	r3, r3, #5
    5890:	b29b      	uxth	r3, r3
    5892:	461a      	mov	r2, r3
    5894:	4b68      	ldr	r3, [pc, #416]	; (5a38 <Port_Ipw_Init_UnusedPins+0x26c>)
    5896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    589a:	6959      	ldr	r1, [r3, #20]
    589c:	9b01      	ldr	r3, [sp, #4]
    589e:	685a      	ldr	r2, [r3, #4]
    58a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58a4:	005b      	lsls	r3, r3, #1
    58a6:	4413      	add	r3, r2
    58a8:	881b      	ldrh	r3, [r3, #0]
    58aa:	f003 031f 	and.w	r3, r3, #31
    58ae:	2201      	movs	r2, #1
    58b0:	409a      	lsls	r2, r3
    58b2:	9b01      	ldr	r3, [sp, #4]
    58b4:	6858      	ldr	r0, [r3, #4]
    58b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58ba:	005b      	lsls	r3, r3, #1
    58bc:	4403      	add	r3, r0
    58be:	881b      	ldrh	r3, [r3, #0]
    58c0:	095b      	lsrs	r3, r3, #5
    58c2:	b29b      	uxth	r3, r3
    58c4:	4618      	mov	r0, r3
    58c6:	4b5c      	ldr	r3, [pc, #368]	; (5a38 <Port_Ipw_Init_UnusedPins+0x26c>)
    58c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    58cc:	430a      	orrs	r2, r1
    58ce:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    58d0:	f001 f892 	bl	69f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    58d4:	e086      	b.n	59e4 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    58d6:	f001 f863 	bl	69a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    58da:	9b01      	ldr	r3, [sp, #4]
    58dc:	685a      	ldr	r2, [r3, #4]
    58de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58e2:	005b      	lsls	r3, r3, #1
    58e4:	4413      	add	r3, r2
    58e6:	881b      	ldrh	r3, [r3, #0]
    58e8:	095b      	lsrs	r3, r3, #5
    58ea:	b29b      	uxth	r3, r3
    58ec:	461a      	mov	r2, r3
    58ee:	4b52      	ldr	r3, [pc, #328]	; (5a38 <Port_Ipw_Init_UnusedPins+0x26c>)
    58f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    58f4:	6959      	ldr	r1, [r3, #20]
    58f6:	9b01      	ldr	r3, [sp, #4]
    58f8:	685a      	ldr	r2, [r3, #4]
    58fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58fe:	005b      	lsls	r3, r3, #1
    5900:	4413      	add	r3, r2
    5902:	881b      	ldrh	r3, [r3, #0]
    5904:	f003 031f 	and.w	r3, r3, #31
    5908:	2201      	movs	r2, #1
    590a:	fa02 f303 	lsl.w	r3, r2, r3
    590e:	43da      	mvns	r2, r3
    5910:	9b01      	ldr	r3, [sp, #4]
    5912:	6858      	ldr	r0, [r3, #4]
    5914:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5918:	005b      	lsls	r3, r3, #1
    591a:	4403      	add	r3, r0
    591c:	881b      	ldrh	r3, [r3, #0]
    591e:	095b      	lsrs	r3, r3, #5
    5920:	b29b      	uxth	r3, r3
    5922:	4618      	mov	r0, r3
    5924:	4b44      	ldr	r3, [pc, #272]	; (5a38 <Port_Ipw_Init_UnusedPins+0x26c>)
    5926:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    592a:	400a      	ands	r2, r1
    592c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    592e:	f001 f863 	bl	69f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5932:	f001 f887 	bl	6a44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5936:	9b01      	ldr	r3, [sp, #4]
    5938:	685a      	ldr	r2, [r3, #4]
    593a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    593e:	005b      	lsls	r3, r3, #1
    5940:	4413      	add	r3, r2
    5942:	881b      	ldrh	r3, [r3, #0]
    5944:	095b      	lsrs	r3, r3, #5
    5946:	b29b      	uxth	r3, r3
    5948:	461a      	mov	r2, r3
    594a:	4b3b      	ldr	r3, [pc, #236]	; (5a38 <Port_Ipw_Init_UnusedPins+0x26c>)
    594c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5950:	6999      	ldr	r1, [r3, #24]
    5952:	9b01      	ldr	r3, [sp, #4]
    5954:	685a      	ldr	r2, [r3, #4]
    5956:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    595a:	005b      	lsls	r3, r3, #1
    595c:	4413      	add	r3, r2
    595e:	881b      	ldrh	r3, [r3, #0]
    5960:	f003 031f 	and.w	r3, r3, #31
    5964:	2201      	movs	r2, #1
    5966:	fa02 f303 	lsl.w	r3, r2, r3
    596a:	43da      	mvns	r2, r3
    596c:	9b01      	ldr	r3, [sp, #4]
    596e:	6858      	ldr	r0, [r3, #4]
    5970:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5974:	005b      	lsls	r3, r3, #1
    5976:	4403      	add	r3, r0
    5978:	881b      	ldrh	r3, [r3, #0]
    597a:	095b      	lsrs	r3, r3, #5
    597c:	b29b      	uxth	r3, r3
    597e:	4618      	mov	r0, r3
    5980:	4b2d      	ldr	r3, [pc, #180]	; (5a38 <Port_Ipw_Init_UnusedPins+0x26c>)
    5982:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5986:	400a      	ands	r2, r1
    5988:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    598a:	9b02      	ldr	r3, [sp, #8]
    598c:	2b03      	cmp	r3, #3
    598e:	d127      	bne.n	59e0 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5990:	9b01      	ldr	r3, [sp, #4]
    5992:	685a      	ldr	r2, [r3, #4]
    5994:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5998:	005b      	lsls	r3, r3, #1
    599a:	4413      	add	r3, r2
    599c:	881b      	ldrh	r3, [r3, #0]
    599e:	095b      	lsrs	r3, r3, #5
    59a0:	b29b      	uxth	r3, r3
    59a2:	461a      	mov	r2, r3
    59a4:	4b24      	ldr	r3, [pc, #144]	; (5a38 <Port_Ipw_Init_UnusedPins+0x26c>)
    59a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    59aa:	6999      	ldr	r1, [r3, #24]
    59ac:	9b01      	ldr	r3, [sp, #4]
    59ae:	685a      	ldr	r2, [r3, #4]
    59b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59b4:	005b      	lsls	r3, r3, #1
    59b6:	4413      	add	r3, r2
    59b8:	881b      	ldrh	r3, [r3, #0]
    59ba:	f003 031f 	and.w	r3, r3, #31
    59be:	2201      	movs	r2, #1
    59c0:	409a      	lsls	r2, r3
    59c2:	9b01      	ldr	r3, [sp, #4]
    59c4:	6858      	ldr	r0, [r3, #4]
    59c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59ca:	005b      	lsls	r3, r3, #1
    59cc:	4403      	add	r3, r0
    59ce:	881b      	ldrh	r3, [r3, #0]
    59d0:	095b      	lsrs	r3, r3, #5
    59d2:	b29b      	uxth	r3, r3
    59d4:	4618      	mov	r0, r3
    59d6:	4b18      	ldr	r3, [pc, #96]	; (5a38 <Port_Ipw_Init_UnusedPins+0x26c>)
    59d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    59dc:	430a      	orrs	r2, r1
    59de:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    59e0:	f001 f85c 	bl	6a9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    59e4:	9b01      	ldr	r3, [sp, #4]
    59e6:	685a      	ldr	r2, [r3, #4]
    59e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59ec:	005b      	lsls	r3, r3, #1
    59ee:	4413      	add	r3, r2
    59f0:	881b      	ldrh	r3, [r3, #0]
    59f2:	095b      	lsrs	r3, r3, #5
    59f4:	b29b      	uxth	r3, r3
    59f6:	461a      	mov	r2, r3
    59f8:	4b10      	ldr	r3, [pc, #64]	; (5a3c <Port_Ipw_Init_UnusedPins+0x270>)
    59fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    59fe:	9a01      	ldr	r2, [sp, #4]
    5a00:	6851      	ldr	r1, [r2, #4]
    5a02:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5a06:	0052      	lsls	r2, r2, #1
    5a08:	440a      	add	r2, r1
    5a0a:	8812      	ldrh	r2, [r2, #0]
    5a0c:	f002 021f 	and.w	r2, r2, #31
    5a10:	9903      	ldr	r1, [sp, #12]
    5a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5a16:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a1a:	3301      	adds	r3, #1
    5a1c:	f8ad 3016 	strh.w	r3, [sp, #22]
    5a20:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5a24:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5a28:	429a      	cmp	r2, r3
    5a2a:	f4ff aee7 	bcc.w	57fc <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5a2e:	bf00      	nop
    5a30:	bf00      	nop
    5a32:	b007      	add	sp, #28
    5a34:	f85d fb04 	ldr.w	pc, [sp], #4
    5a38:	00007d68 	.word	0x00007d68
    5a3c:	00007d54 	.word	0x00007d54

00005a40 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5a40:	b500      	push	{lr}
    5a42:	b085      	sub	sp, #20
    5a44:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5a46:	9b01      	ldr	r3, [sp, #4]
    5a48:	7c1b      	ldrb	r3, [r3, #16]
    5a4a:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5a4e:	2300      	movs	r3, #0
    5a50:	f8ad 300e 	strh.w	r3, [sp, #14]
    5a54:	e035      	b.n	5ac2 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5a56:	9b01      	ldr	r3, [sp, #4]
    5a58:	695a      	ldr	r2, [r3, #20]
    5a5a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5a5e:	00db      	lsls	r3, r3, #3
    5a60:	4413      	add	r3, r2
    5a62:	781b      	ldrb	r3, [r3, #0]
    5a64:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5a68:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5a6c:	4a1f      	ldr	r2, [pc, #124]	; (5aec <Port_Ipw_Init+0xac>)
    5a6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5a72:	9b01      	ldr	r3, [sp, #4]
    5a74:	695a      	ldr	r2, [r3, #20]
    5a76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5a7a:	00db      	lsls	r3, r3, #3
    5a7c:	4413      	add	r3, r2
    5a7e:	4619      	mov	r1, r3
    5a80:	f7ff fe39 	bl	56f6 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5a84:	f001 f978 	bl	6d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5a88:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5a8c:	4a17      	ldr	r2, [pc, #92]	; (5aec <Port_Ipw_Init+0xac>)
    5a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a92:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5a96:	9b01      	ldr	r3, [sp, #4]
    5a98:	695a      	ldr	r2, [r3, #20]
    5a9a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5a9e:	00db      	lsls	r3, r3, #3
    5aa0:	4413      	add	r3, r2
    5aa2:	685a      	ldr	r2, [r3, #4]
    5aa4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5aa8:	4810      	ldr	r0, [pc, #64]	; (5aec <Port_Ipw_Init+0xac>)
    5aaa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5aae:	430a      	orrs	r2, r1
    5ab0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5ab4:	f001 f98c 	bl	6dd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5ab8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5abc:	3301      	adds	r3, #1
    5abe:	f8ad 300e 	strh.w	r3, [sp, #14]
    5ac2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5ac6:	b29b      	uxth	r3, r3
    5ac8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5acc:	429a      	cmp	r2, r3
    5ace:	d3c2      	bcc.n	5a56 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5ad0:	9b01      	ldr	r3, [sp, #4]
    5ad2:	6a1b      	ldr	r3, [r3, #32]
    5ad4:	4619      	mov	r1, r3
    5ad6:	2005      	movs	r0, #5
    5ad8:	f7ff fd98 	bl	560c <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5adc:	9801      	ldr	r0, [sp, #4]
    5ade:	f7ff fe75 	bl	57cc <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5ae2:	bf00      	nop
    5ae4:	b005      	add	sp, #20
    5ae6:	f85d fb04 	ldr.w	pc, [sp], #4
    5aea:	bf00      	nop
    5aec:	00007d54 	.word	0x00007d54

00005af0 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5af0:	b500      	push	{lr}
    5af2:	b085      	sub	sp, #20
    5af4:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    5af6:	9b01      	ldr	r3, [sp, #4]
    5af8:	881b      	ldrh	r3, [r3, #0]
    5afa:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5afe:	2300      	movs	r3, #0
    5b00:	f8ad 300e 	strh.w	r3, [sp, #14]
    5b04:	e0d2      	b.n	5cac <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    5b06:	9b01      	ldr	r3, [sp, #4]
    5b08:	68d9      	ldr	r1, [r3, #12]
    5b0a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5b0e:	4613      	mov	r3, r2
    5b10:	009b      	lsls	r3, r3, #2
    5b12:	4413      	add	r3, r2
    5b14:	009b      	lsls	r3, r3, #2
    5b16:	440b      	add	r3, r1
    5b18:	7c5b      	ldrb	r3, [r3, #17]
    5b1a:	f083 0301 	eor.w	r3, r3, #1
    5b1e:	b2db      	uxtb	r3, r3
    5b20:	2b00      	cmp	r3, #0
    5b22:	f000 80be 	beq.w	5ca2 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    5b26:	9b01      	ldr	r3, [sp, #4]
    5b28:	68d9      	ldr	r1, [r3, #12]
    5b2a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5b2e:	4613      	mov	r3, r2
    5b30:	009b      	lsls	r3, r3, #2
    5b32:	4413      	add	r3, r2
    5b34:	009b      	lsls	r3, r3, #2
    5b36:	440b      	add	r3, r1
    5b38:	7c1b      	ldrb	r3, [r3, #16]
    5b3a:	2b00      	cmp	r3, #0
    5b3c:	f000 80b1 	beq.w	5ca2 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5b40:	9b01      	ldr	r3, [sp, #4]
    5b42:	68d9      	ldr	r1, [r3, #12]
    5b44:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5b48:	4613      	mov	r3, r2
    5b4a:	009b      	lsls	r3, r3, #2
    5b4c:	4413      	add	r3, r2
    5b4e:	009b      	lsls	r3, r3, #2
    5b50:	440b      	add	r3, r1
    5b52:	881b      	ldrh	r3, [r3, #0]
    5b54:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5b58:	9b01      	ldr	r3, [sp, #4]
    5b5a:	68d9      	ldr	r1, [r3, #12]
    5b5c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5b60:	4613      	mov	r3, r2
    5b62:	009b      	lsls	r3, r3, #2
    5b64:	4413      	add	r3, r2
    5b66:	009b      	lsls	r3, r3, #2
    5b68:	440b      	add	r3, r1
    5b6a:	68db      	ldr	r3, [r3, #12]
    5b6c:	2b02      	cmp	r3, #2
    5b6e:	d11d      	bne.n	5bac <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5b70:	f001 fa4a 	bl	7008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5b74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5b78:	095b      	lsrs	r3, r3, #5
    5b7a:	b29b      	uxth	r3, r3
    5b7c:	461a      	mov	r2, r3
    5b7e:	4b51      	ldr	r3, [pc, #324]	; (5cc4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b84:	6959      	ldr	r1, [r3, #20]
    5b86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5b8a:	f003 031f 	and.w	r3, r3, #31
    5b8e:	2201      	movs	r2, #1
    5b90:	409a      	lsls	r2, r3
    5b92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5b96:	095b      	lsrs	r3, r3, #5
    5b98:	b29b      	uxth	r3, r3
    5b9a:	4618      	mov	r0, r3
    5b9c:	4b49      	ldr	r3, [pc, #292]	; (5cc4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5b9e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5ba2:	430a      	orrs	r2, r1
    5ba4:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5ba6:	f001 fa5b 	bl	7060 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5baa:	e07a      	b.n	5ca2 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5bac:	9b01      	ldr	r3, [sp, #4]
    5bae:	68d9      	ldr	r1, [r3, #12]
    5bb0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5bb4:	4613      	mov	r3, r2
    5bb6:	009b      	lsls	r3, r3, #2
    5bb8:	4413      	add	r3, r2
    5bba:	009b      	lsls	r3, r3, #2
    5bbc:	440b      	add	r3, r1
    5bbe:	68db      	ldr	r3, [r3, #12]
    5bc0:	2b01      	cmp	r3, #1
    5bc2:	d00b      	beq.n	5bdc <Port_Ipw_RefreshPortDirection+0xec>
    5bc4:	9b01      	ldr	r3, [sp, #4]
    5bc6:	68d9      	ldr	r1, [r3, #12]
    5bc8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5bcc:	4613      	mov	r3, r2
    5bce:	009b      	lsls	r3, r3, #2
    5bd0:	4413      	add	r3, r2
    5bd2:	009b      	lsls	r3, r3, #2
    5bd4:	440b      	add	r3, r1
    5bd6:	68db      	ldr	r3, [r3, #12]
    5bd8:	2b03      	cmp	r3, #3
    5bda:	d162      	bne.n	5ca2 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5bdc:	f001 fa14 	bl	7008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5be0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5be4:	095b      	lsrs	r3, r3, #5
    5be6:	b29b      	uxth	r3, r3
    5be8:	461a      	mov	r2, r3
    5bea:	4b36      	ldr	r3, [pc, #216]	; (5cc4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5bf0:	6959      	ldr	r1, [r3, #20]
    5bf2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5bf6:	f003 031f 	and.w	r3, r3, #31
    5bfa:	2201      	movs	r2, #1
    5bfc:	fa02 f303 	lsl.w	r3, r2, r3
    5c00:	43da      	mvns	r2, r3
    5c02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5c06:	095b      	lsrs	r3, r3, #5
    5c08:	b29b      	uxth	r3, r3
    5c0a:	4618      	mov	r0, r3
    5c0c:	4b2d      	ldr	r3, [pc, #180]	; (5cc4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5c0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5c12:	400a      	ands	r2, r1
    5c14:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5c16:	f001 fa23 	bl	7060 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    5c1a:	f001 fa47 	bl	70ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5c1e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5c22:	095b      	lsrs	r3, r3, #5
    5c24:	b29b      	uxth	r3, r3
    5c26:	461a      	mov	r2, r3
    5c28:	4b26      	ldr	r3, [pc, #152]	; (5cc4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5c2e:	6999      	ldr	r1, [r3, #24]
    5c30:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5c34:	f003 031f 	and.w	r3, r3, #31
    5c38:	2201      	movs	r2, #1
    5c3a:	fa02 f303 	lsl.w	r3, r2, r3
    5c3e:	43da      	mvns	r2, r3
    5c40:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5c44:	095b      	lsrs	r3, r3, #5
    5c46:	b29b      	uxth	r3, r3
    5c48:	4618      	mov	r0, r3
    5c4a:	4b1e      	ldr	r3, [pc, #120]	; (5cc4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5c4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5c50:	400a      	ands	r2, r1
    5c52:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5c54:	9b01      	ldr	r3, [sp, #4]
    5c56:	68d9      	ldr	r1, [r3, #12]
    5c58:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c5c:	4613      	mov	r3, r2
    5c5e:	009b      	lsls	r3, r3, #2
    5c60:	4413      	add	r3, r2
    5c62:	009b      	lsls	r3, r3, #2
    5c64:	440b      	add	r3, r1
    5c66:	68db      	ldr	r3, [r3, #12]
    5c68:	2b03      	cmp	r3, #3
    5c6a:	d118      	bne.n	5c9e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5c6c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5c70:	095b      	lsrs	r3, r3, #5
    5c72:	b29b      	uxth	r3, r3
    5c74:	461a      	mov	r2, r3
    5c76:	4b13      	ldr	r3, [pc, #76]	; (5cc4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5c7c:	6999      	ldr	r1, [r3, #24]
    5c7e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5c82:	f003 031f 	and.w	r3, r3, #31
    5c86:	2201      	movs	r2, #1
    5c88:	409a      	lsls	r2, r3
    5c8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5c8e:	095b      	lsrs	r3, r3, #5
    5c90:	b29b      	uxth	r3, r3
    5c92:	4618      	mov	r0, r3
    5c94:	4b0b      	ldr	r3, [pc, #44]	; (5cc4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5c96:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5c9a:	430a      	orrs	r2, r1
    5c9c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5c9e:	f001 fa31 	bl	7104 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5ca2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5ca6:	3301      	adds	r3, #1
    5ca8:	f8ad 300e 	strh.w	r3, [sp, #14]
    5cac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cb0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5cb4:	429a      	cmp	r2, r3
    5cb6:	f4ff af26 	bcc.w	5b06 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5cba:	bf00      	nop
    5cbc:	bf00      	nop
    5cbe:	b005      	add	sp, #20
    5cc0:	f85d fb04 	ldr.w	pc, [sp], #4
    5cc4:	00007d68 	.word	0x00007d68

00005cc8 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5cc8:	b500      	push	{lr}
    5cca:	b085      	sub	sp, #20
    5ccc:	4603      	mov	r3, r0
    5cce:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5cd2:	2300      	movs	r3, #0
    5cd4:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    5cd8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5cdc:	4618      	mov	r0, r3
    5cde:	f000 f871 	bl	5dc4 <Dio_Ipw_ReadChannel>
    5ce2:	4603      	mov	r3, r0
    5ce4:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    5ce8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5cec:	4618      	mov	r0, r3
    5cee:	b005      	add	sp, #20
    5cf0:	f85d fb04 	ldr.w	pc, [sp], #4

00005cf4 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5cf4:	b500      	push	{lr}
    5cf6:	b083      	sub	sp, #12
    5cf8:	4603      	mov	r3, r0
    5cfa:	460a      	mov	r2, r1
    5cfc:	f8ad 3006 	strh.w	r3, [sp, #6]
    5d00:	4613      	mov	r3, r2
    5d02:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    5d06:	f89d 2005 	ldrb.w	r2, [sp, #5]
    5d0a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5d0e:	4611      	mov	r1, r2
    5d10:	4618      	mov	r0, r3
    5d12:	f000 f87d 	bl	5e10 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    5d16:	bf00      	nop
    5d18:	b003      	add	sp, #12
    5d1a:	f85d fb04 	ldr.w	pc, [sp], #4

00005d1e <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5d1e:	b500      	push	{lr}
    5d20:	b085      	sub	sp, #20
    5d22:	4603      	mov	r3, r0
    5d24:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5d28:	2300      	movs	r3, #0
    5d2a:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    5d2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5d32:	4618      	mov	r0, r3
    5d34:	f000 f892 	bl	5e5c <Dio_Ipw_FlipChannel>
    5d38:	4603      	mov	r3, r0
    5d3a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    5d3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5d42:	4618      	mov	r0, r3
    5d44:	b005      	add	sp, #20
    5d46:	f85d fb04 	ldr.w	pc, [sp], #4

00005d4a <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    5d4a:	b500      	push	{lr}
    5d4c:	b085      	sub	sp, #20
    5d4e:	4603      	mov	r3, r0
    5d50:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5d54:	2300      	movs	r3, #0
    5d56:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    5d58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5d5c:	4618      	mov	r0, r3
    5d5e:	f000 f8b3 	bl	5ec8 <Dio_Ipw_ReadPort>
    5d62:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    5d64:	9b03      	ldr	r3, [sp, #12]
}
    5d66:	4618      	mov	r0, r3
    5d68:	b005      	add	sp, #20
    5d6a:	f85d fb04 	ldr.w	pc, [sp], #4

00005d6e <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5d6e:	b500      	push	{lr}
    5d70:	b083      	sub	sp, #12
    5d72:	4603      	mov	r3, r0
    5d74:	9100      	str	r1, [sp, #0]
    5d76:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    5d7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5d7e:	9900      	ldr	r1, [sp, #0]
    5d80:	4618      	mov	r0, r3
    5d82:	f000 f8b9 	bl	5ef8 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    5d86:	bf00      	nop
    5d88:	b003      	add	sp, #12
    5d8a:	f85d fb04 	ldr.w	pc, [sp], #4

00005d8e <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    5d8e:	b500      	push	{lr}
    5d90:	b085      	sub	sp, #20
    5d92:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5d94:	2300      	movs	r3, #0
    5d96:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    5d98:	9801      	ldr	r0, [sp, #4]
    5d9a:	f000 f8c5 	bl	5f28 <Dio_Ipw_ReadChannelGroup>
    5d9e:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    5da0:	9b03      	ldr	r3, [sp, #12]
}
    5da2:	4618      	mov	r0, r3
    5da4:	b005      	add	sp, #20
    5da6:	f85d fb04 	ldr.w	pc, [sp], #4

00005daa <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    5daa:	b500      	push	{lr}
    5dac:	b083      	sub	sp, #12
    5dae:	9001      	str	r0, [sp, #4]
    5db0:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    5db2:	9900      	ldr	r1, [sp, #0]
    5db4:	9801      	ldr	r0, [sp, #4]
    5db6:	f000 f8d7 	bl	5f68 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    5dba:	bf00      	nop
    5dbc:	b003      	add	sp, #12
    5dbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005dc4 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5dc4:	b500      	push	{lr}
    5dc6:	b087      	sub	sp, #28
    5dc8:	4603      	mov	r3, r0
    5dca:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    5dce:	2300      	movs	r3, #0
    5dd0:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5dd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5dd8:	095b      	lsrs	r3, r3, #5
    5dda:	b29b      	uxth	r3, r3
    5ddc:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5dde:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5de2:	f003 031f 	and.w	r3, r3, #31
    5de6:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5de8:	4a08      	ldr	r2, [pc, #32]	; (5e0c <Dio_Ipw_ReadChannel+0x48>)
    5dea:	9b04      	ldr	r3, [sp, #16]
    5dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5df0:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    5df2:	9903      	ldr	r1, [sp, #12]
    5df4:	9802      	ldr	r0, [sp, #8]
    5df6:	f000 f940 	bl	607a <Gpio_Dio_Ip_ReadPin>
    5dfa:	4603      	mov	r3, r0
    5dfc:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    5e00:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5e04:	4618      	mov	r0, r3
    5e06:	b007      	add	sp, #28
    5e08:	f85d fb04 	ldr.w	pc, [sp], #4
    5e0c:	1fff8b24 	.word	0x1fff8b24

00005e10 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5e10:	b500      	push	{lr}
    5e12:	b087      	sub	sp, #28
    5e14:	4603      	mov	r3, r0
    5e16:	460a      	mov	r2, r1
    5e18:	f8ad 3006 	strh.w	r3, [sp, #6]
    5e1c:	4613      	mov	r3, r2
    5e1e:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5e22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e26:	095b      	lsrs	r3, r3, #5
    5e28:	b29b      	uxth	r3, r3
    5e2a:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5e2c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e30:	f003 031f 	and.w	r3, r3, #31
    5e34:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5e36:	4a08      	ldr	r2, [pc, #32]	; (5e58 <Dio_Ipw_WriteChannel+0x48>)
    5e38:	9b05      	ldr	r3, [sp, #20]
    5e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e3e:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    5e40:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5e44:	461a      	mov	r2, r3
    5e46:	9904      	ldr	r1, [sp, #16]
    5e48:	9803      	ldr	r0, [sp, #12]
    5e4a:	f000 f8b7 	bl	5fbc <Gpio_Dio_Ip_WritePin>
}
    5e4e:	bf00      	nop
    5e50:	b007      	add	sp, #28
    5e52:	f85d fb04 	ldr.w	pc, [sp], #4
    5e56:	bf00      	nop
    5e58:	1fff8b24 	.word	0x1fff8b24

00005e5c <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5e5c:	b500      	push	{lr}
    5e5e:	b089      	sub	sp, #36	; 0x24
    5e60:	4603      	mov	r3, r0
    5e62:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5e66:	2300      	movs	r3, #0
    5e68:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    5e6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e70:	095b      	lsrs	r3, r3, #5
    5e72:	b29b      	uxth	r3, r3
    5e74:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    5e76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e7a:	f003 031f 	and.w	r3, r3, #31
    5e7e:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    5e80:	4a10      	ldr	r2, [pc, #64]	; (5ec4 <Dio_Ipw_FlipChannel+0x68>)
    5e82:	9b06      	ldr	r3, [sp, #24]
    5e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5e88:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    5e8a:	2201      	movs	r2, #1
    5e8c:	9b05      	ldr	r3, [sp, #20]
    5e8e:	fa02 f303 	lsl.w	r3, r2, r3
    5e92:	4619      	mov	r1, r3
    5e94:	9804      	ldr	r0, [sp, #16]
    5e96:	f000 f8dc 	bl	6052 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    5e9a:	9804      	ldr	r0, [sp, #16]
    5e9c:	f000 f8bc 	bl	6018 <Gpio_Dio_Ip_GetPinsOutput>
    5ea0:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    5ea2:	2201      	movs	r2, #1
    5ea4:	9b05      	ldr	r3, [sp, #20]
    5ea6:	409a      	lsls	r2, r3
    5ea8:	9b03      	ldr	r3, [sp, #12]
    5eaa:	401a      	ands	r2, r3
    5eac:	9b05      	ldr	r3, [sp, #20]
    5eae:	fa22 f303 	lsr.w	r3, r2, r3
    5eb2:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    5eb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    5eba:	4618      	mov	r0, r3
    5ebc:	b009      	add	sp, #36	; 0x24
    5ebe:	f85d fb04 	ldr.w	pc, [sp], #4
    5ec2:	bf00      	nop
    5ec4:	1fff8b24 	.word	0x1fff8b24

00005ec8 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    5ec8:	b500      	push	{lr}
    5eca:	b085      	sub	sp, #20
    5ecc:	4603      	mov	r3, r0
    5ece:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5ed2:	2300      	movs	r3, #0
    5ed4:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    5ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5eda:	4a06      	ldr	r2, [pc, #24]	; (5ef4 <Dio_Ipw_ReadPort+0x2c>)
    5edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ee0:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    5ee2:	9802      	ldr	r0, [sp, #8]
    5ee4:	f000 f8be 	bl	6064 <Gpio_Dio_Ip_ReadPins>
    5ee8:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    5eea:	9b03      	ldr	r3, [sp, #12]
}
    5eec:	4618      	mov	r0, r3
    5eee:	b005      	add	sp, #20
    5ef0:	f85d fb04 	ldr.w	pc, [sp], #4
    5ef4:	1fff8b24 	.word	0x1fff8b24

00005ef8 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5ef8:	b500      	push	{lr}
    5efa:	b085      	sub	sp, #20
    5efc:	4603      	mov	r3, r0
    5efe:	9100      	str	r1, [sp, #0]
    5f00:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    5f04:	9b00      	ldr	r3, [sp, #0]
    5f06:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    5f08:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5f0c:	4a05      	ldr	r2, [pc, #20]	; (5f24 <Dio_Ipw_WritePort+0x2c>)
    5f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f12:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    5f14:	9903      	ldr	r1, [sp, #12]
    5f16:	9802      	ldr	r0, [sp, #8]
    5f18:	f000 f875 	bl	6006 <Gpio_Dio_Ip_WritePins>
}
    5f1c:	bf00      	nop
    5f1e:	b005      	add	sp, #20
    5f20:	f85d fb04 	ldr.w	pc, [sp], #4
    5f24:	1fff8b24 	.word	0x1fff8b24

00005f28 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    5f28:	b500      	push	{lr}
    5f2a:	b087      	sub	sp, #28
    5f2c:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5f2e:	2300      	movs	r3, #0
    5f30:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    5f32:	9b01      	ldr	r3, [sp, #4]
    5f34:	781b      	ldrb	r3, [r3, #0]
    5f36:	461a      	mov	r2, r3
    5f38:	4b0a      	ldr	r3, [pc, #40]	; (5f64 <Dio_Ipw_ReadChannelGroup+0x3c>)
    5f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f3e:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    5f40:	9804      	ldr	r0, [sp, #16]
    5f42:	f000 f88f 	bl	6064 <Gpio_Dio_Ip_ReadPins>
    5f46:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    5f48:	9b01      	ldr	r3, [sp, #4]
    5f4a:	685a      	ldr	r2, [r3, #4]
    5f4c:	9b03      	ldr	r3, [sp, #12]
    5f4e:	4013      	ands	r3, r2
    5f50:	9a01      	ldr	r2, [sp, #4]
    5f52:	7852      	ldrb	r2, [r2, #1]
    5f54:	40d3      	lsrs	r3, r2
    5f56:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    5f58:	9b05      	ldr	r3, [sp, #20]
}
    5f5a:	4618      	mov	r0, r3
    5f5c:	b007      	add	sp, #28
    5f5e:	f85d fb04 	ldr.w	pc, [sp], #4
    5f62:	bf00      	nop
    5f64:	1fff8b24 	.word	0x1fff8b24

00005f68 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    5f68:	b500      	push	{lr}
    5f6a:	b087      	sub	sp, #28
    5f6c:	9001      	str	r0, [sp, #4]
    5f6e:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    5f70:	9b01      	ldr	r3, [sp, #4]
    5f72:	781b      	ldrb	r3, [r3, #0]
    5f74:	461a      	mov	r2, r3
    5f76:	4b10      	ldr	r3, [pc, #64]	; (5fb8 <Dio_Ipw_WriteChannelGroup+0x50>)
    5f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f7c:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    5f7e:	9b01      	ldr	r3, [sp, #4]
    5f80:	785b      	ldrb	r3, [r3, #1]
    5f82:	461a      	mov	r2, r3
    5f84:	9b00      	ldr	r3, [sp, #0]
    5f86:	fa03 f202 	lsl.w	r2, r3, r2
    5f8a:	9b01      	ldr	r3, [sp, #4]
    5f8c:	685b      	ldr	r3, [r3, #4]
    5f8e:	4013      	ands	r3, r2
    5f90:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    5f92:	9904      	ldr	r1, [sp, #16]
    5f94:	9805      	ldr	r0, [sp, #20]
    5f96:	f000 f84a 	bl	602e <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    5f9a:	9b04      	ldr	r3, [sp, #16]
    5f9c:	43da      	mvns	r2, r3
    5f9e:	9b01      	ldr	r3, [sp, #4]
    5fa0:	685b      	ldr	r3, [r3, #4]
    5fa2:	4013      	ands	r3, r2
    5fa4:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    5fa6:	9903      	ldr	r1, [sp, #12]
    5fa8:	9805      	ldr	r0, [sp, #20]
    5faa:	f000 f849 	bl	6040 <Gpio_Dio_Ip_ClearPins>

}
    5fae:	bf00      	nop
    5fb0:	b007      	add	sp, #28
    5fb2:	f85d fb04 	ldr.w	pc, [sp], #4
    5fb6:	bf00      	nop
    5fb8:	1fff8b24 	.word	0x1fff8b24

00005fbc <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    5fbc:	b500      	push	{lr}
    5fbe:	b087      	sub	sp, #28
    5fc0:	9003      	str	r0, [sp, #12]
    5fc2:	9102      	str	r1, [sp, #8]
    5fc4:	4613      	mov	r3, r2
    5fc6:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    5fca:	f000 f86d 	bl	60a8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    5fce:	9b03      	ldr	r3, [sp, #12]
    5fd0:	681b      	ldr	r3, [r3, #0]
    5fd2:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    5fd4:	2201      	movs	r2, #1
    5fd6:	9b02      	ldr	r3, [sp, #8]
    5fd8:	fa02 f303 	lsl.w	r3, r2, r3
    5fdc:	43db      	mvns	r3, r3
    5fde:	9a05      	ldr	r2, [sp, #20]
    5fe0:	4013      	ands	r3, r2
    5fe2:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    5fe4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5fe8:	9b02      	ldr	r3, [sp, #8]
    5fea:	fa02 f303 	lsl.w	r3, r2, r3
    5fee:	9a05      	ldr	r2, [sp, #20]
    5ff0:	4313      	orrs	r3, r2
    5ff2:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    5ff4:	9b03      	ldr	r3, [sp, #12]
    5ff6:	9a05      	ldr	r2, [sp, #20]
    5ff8:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    5ffa:	f000 f881 	bl	6100 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    5ffe:	bf00      	nop
    6000:	b007      	add	sp, #28
    6002:	f85d fb04 	ldr.w	pc, [sp], #4

00006006 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6006:	b082      	sub	sp, #8
    6008:	9001      	str	r0, [sp, #4]
    600a:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    600c:	9b01      	ldr	r3, [sp, #4]
    600e:	9a00      	ldr	r2, [sp, #0]
    6010:	601a      	str	r2, [r3, #0]
}
    6012:	bf00      	nop
    6014:	b002      	add	sp, #8
    6016:	4770      	bx	lr

00006018 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    6018:	b084      	sub	sp, #16
    601a:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    601c:	2300      	movs	r3, #0
    601e:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6020:	9b01      	ldr	r3, [sp, #4]
    6022:	681b      	ldr	r3, [r3, #0]
    6024:	9303      	str	r3, [sp, #12]
    return returnValue;
    6026:	9b03      	ldr	r3, [sp, #12]
}
    6028:	4618      	mov	r0, r3
    602a:	b004      	add	sp, #16
    602c:	4770      	bx	lr

0000602e <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    602e:	b082      	sub	sp, #8
    6030:	9001      	str	r0, [sp, #4]
    6032:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6034:	9b01      	ldr	r3, [sp, #4]
    6036:	9a00      	ldr	r2, [sp, #0]
    6038:	605a      	str	r2, [r3, #4]
}
    603a:	bf00      	nop
    603c:	b002      	add	sp, #8
    603e:	4770      	bx	lr

00006040 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6040:	b082      	sub	sp, #8
    6042:	9001      	str	r0, [sp, #4]
    6044:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    6046:	9b01      	ldr	r3, [sp, #4]
    6048:	9a00      	ldr	r2, [sp, #0]
    604a:	609a      	str	r2, [r3, #8]
}
    604c:	bf00      	nop
    604e:	b002      	add	sp, #8
    6050:	4770      	bx	lr

00006052 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6052:	b082      	sub	sp, #8
    6054:	9001      	str	r0, [sp, #4]
    6056:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    6058:	9b01      	ldr	r3, [sp, #4]
    605a:	9a00      	ldr	r2, [sp, #0]
    605c:	60da      	str	r2, [r3, #12]
}
    605e:	bf00      	nop
    6060:	b002      	add	sp, #8
    6062:	4770      	bx	lr

00006064 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6064:	b084      	sub	sp, #16
    6066:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6068:	2300      	movs	r3, #0
    606a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    606c:	9b01      	ldr	r3, [sp, #4]
    606e:	691b      	ldr	r3, [r3, #16]
    6070:	9303      	str	r3, [sp, #12]
    return returnValue;
    6072:	9b03      	ldr	r3, [sp, #12]
}
    6074:	4618      	mov	r0, r3
    6076:	b004      	add	sp, #16
    6078:	4770      	bx	lr

0000607a <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    607a:	b084      	sub	sp, #16
    607c:	9001      	str	r0, [sp, #4]
    607e:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6080:	2300      	movs	r3, #0
    6082:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    6086:	9b01      	ldr	r3, [sp, #4]
    6088:	691a      	ldr	r2, [r3, #16]
    608a:	2101      	movs	r1, #1
    608c:	9b00      	ldr	r3, [sp, #0]
    608e:	fa01 f303 	lsl.w	r3, r1, r3
    6092:	401a      	ands	r2, r3
    6094:	9b00      	ldr	r3, [sp, #0]
    6096:	fa22 f303 	lsr.w	r3, r2, r3
    609a:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    609e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    60a2:	4618      	mov	r0, r3
    60a4:	b004      	add	sp, #16
    60a6:	4770      	bx	lr

000060a8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    60a8:	b500      	push	{lr}
    60aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    60ac:	f7fa ff24 	bl	ef8 <Sys_GetCoreID>
    60b0:	4603      	mov	r3, r0
    60b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    60b4:	4a10      	ldr	r2, [pc, #64]	; (60f8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    60b6:	9b01      	ldr	r3, [sp, #4]
    60b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60bc:	2b00      	cmp	r3, #0
    60be:	d10d      	bne.n	60dc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    60c0:	f7fa fc02 	bl	8c8 <Dio_schm_read_msr>
    60c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    60c6:	9b00      	ldr	r3, [sp, #0]
    60c8:	f003 0301 	and.w	r3, r3, #1
    60cc:	2b00      	cmp	r3, #0
    60ce:	d100      	bne.n	60d2 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    60d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    60d2:	490a      	ldr	r1, [pc, #40]	; (60fc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    60d4:	9b01      	ldr	r3, [sp, #4]
    60d6:	9a00      	ldr	r2, [sp, #0]
    60d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    60dc:	4a06      	ldr	r2, [pc, #24]	; (60f8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    60de:	9b01      	ldr	r3, [sp, #4]
    60e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60e4:	1c5a      	adds	r2, r3, #1
    60e6:	4904      	ldr	r1, [pc, #16]	; (60f8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    60e8:	9b01      	ldr	r3, [sp, #4]
    60ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    60ee:	bf00      	nop
    60f0:	b003      	add	sp, #12
    60f2:	f85d fb04 	ldr.w	pc, [sp], #4
    60f6:	bf00      	nop
    60f8:	1fff8cfc 	.word	0x1fff8cfc
    60fc:	1fff8cf8 	.word	0x1fff8cf8

00006100 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    6100:	b500      	push	{lr}
    6102:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6104:	f7fa fef8 	bl	ef8 <Sys_GetCoreID>
    6108:	4603      	mov	r3, r0
    610a:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    610c:	4a0d      	ldr	r2, [pc, #52]	; (6144 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    610e:	9b01      	ldr	r3, [sp, #4]
    6110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6114:	1e5a      	subs	r2, r3, #1
    6116:	490b      	ldr	r1, [pc, #44]	; (6144 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6118:	9b01      	ldr	r3, [sp, #4]
    611a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    611e:	4a0a      	ldr	r2, [pc, #40]	; (6148 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    6120:	9b01      	ldr	r3, [sp, #4]
    6122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6126:	f003 0301 	and.w	r3, r3, #1
    612a:	2b00      	cmp	r3, #0
    612c:	d106      	bne.n	613c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    612e:	4a05      	ldr	r2, [pc, #20]	; (6144 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6130:	9b01      	ldr	r3, [sp, #4]
    6132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6136:	2b00      	cmp	r3, #0
    6138:	d100      	bne.n	613c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    613a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    613c:	bf00      	nop
    613e:	b003      	add	sp, #12
    6140:	f85d fb04 	ldr.w	pc, [sp], #4
    6144:	1fff8cfc 	.word	0x1fff8cfc
    6148:	1fff8cf8 	.word	0x1fff8cf8

0000614c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    614c:	b500      	push	{lr}
    614e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6150:	f7fa fed2 	bl	ef8 <Sys_GetCoreID>
    6154:	4603      	mov	r3, r0
    6156:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    6158:	4a10      	ldr	r2, [pc, #64]	; (619c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    615a:	9b01      	ldr	r3, [sp, #4]
    615c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6160:	2b00      	cmp	r3, #0
    6162:	d10d      	bne.n	6180 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6164:	f7fa fbb0 	bl	8c8 <Dio_schm_read_msr>
    6168:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    616a:	9b00      	ldr	r3, [sp, #0]
    616c:	f003 0301 	and.w	r3, r3, #1
    6170:	2b00      	cmp	r3, #0
    6172:	d100      	bne.n	6176 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6174:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6176:	490a      	ldr	r1, [pc, #40]	; (61a0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    6178:	9b01      	ldr	r3, [sp, #4]
    617a:	9a00      	ldr	r2, [sp, #0]
    617c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    6180:	4a06      	ldr	r2, [pc, #24]	; (619c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6182:	9b01      	ldr	r3, [sp, #4]
    6184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6188:	1c5a      	adds	r2, r3, #1
    618a:	4904      	ldr	r1, [pc, #16]	; (619c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    618c:	9b01      	ldr	r3, [sp, #4]
    618e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6192:	bf00      	nop
    6194:	b003      	add	sp, #12
    6196:	f85d fb04 	ldr.w	pc, [sp], #4
    619a:	bf00      	nop
    619c:	1fff8d04 	.word	0x1fff8d04
    61a0:	1fff8d00 	.word	0x1fff8d00

000061a4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    61a4:	b500      	push	{lr}
    61a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    61a8:	f7fa fea6 	bl	ef8 <Sys_GetCoreID>
    61ac:	4603      	mov	r3, r0
    61ae:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    61b0:	4a0d      	ldr	r2, [pc, #52]	; (61e8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    61b2:	9b01      	ldr	r3, [sp, #4]
    61b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61b8:	1e5a      	subs	r2, r3, #1
    61ba:	490b      	ldr	r1, [pc, #44]	; (61e8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    61bc:	9b01      	ldr	r3, [sp, #4]
    61be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    61c2:	4a0a      	ldr	r2, [pc, #40]	; (61ec <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    61c4:	9b01      	ldr	r3, [sp, #4]
    61c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61ca:	f003 0301 	and.w	r3, r3, #1
    61ce:	2b00      	cmp	r3, #0
    61d0:	d106      	bne.n	61e0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    61d2:	4a05      	ldr	r2, [pc, #20]	; (61e8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    61d4:	9b01      	ldr	r3, [sp, #4]
    61d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61da:	2b00      	cmp	r3, #0
    61dc:	d100      	bne.n	61e0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    61de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    61e0:	bf00      	nop
    61e2:	b003      	add	sp, #12
    61e4:	f85d fb04 	ldr.w	pc, [sp], #4
    61e8:	1fff8d04 	.word	0x1fff8d04
    61ec:	1fff8d00 	.word	0x1fff8d00

000061f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    61f0:	b500      	push	{lr}
    61f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    61f4:	f7fa fe80 	bl	ef8 <Sys_GetCoreID>
    61f8:	4603      	mov	r3, r0
    61fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    61fc:	4a10      	ldr	r2, [pc, #64]	; (6240 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    61fe:	9b01      	ldr	r3, [sp, #4]
    6200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6204:	2b00      	cmp	r3, #0
    6206:	d10d      	bne.n	6224 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6208:	f7fa fb67 	bl	8da <Mcu_schm_read_msr>
    620c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    620e:	9b00      	ldr	r3, [sp, #0]
    6210:	f003 0301 	and.w	r3, r3, #1
    6214:	2b00      	cmp	r3, #0
    6216:	d100      	bne.n	621a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6218:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    621a:	490a      	ldr	r1, [pc, #40]	; (6244 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    621c:	9b01      	ldr	r3, [sp, #4]
    621e:	9a00      	ldr	r2, [sp, #0]
    6220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    6224:	4a06      	ldr	r2, [pc, #24]	; (6240 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6226:	9b01      	ldr	r3, [sp, #4]
    6228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    622c:	1c5a      	adds	r2, r3, #1
    622e:	4904      	ldr	r1, [pc, #16]	; (6240 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6230:	9b01      	ldr	r3, [sp, #4]
    6232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6236:	bf00      	nop
    6238:	b003      	add	sp, #12
    623a:	f85d fb04 	ldr.w	pc, [sp], #4
    623e:	bf00      	nop
    6240:	1fff8d0c 	.word	0x1fff8d0c
    6244:	1fff8d08 	.word	0x1fff8d08

00006248 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    6248:	b500      	push	{lr}
    624a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    624c:	f7fa fe54 	bl	ef8 <Sys_GetCoreID>
    6250:	4603      	mov	r3, r0
    6252:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    6254:	4a0d      	ldr	r2, [pc, #52]	; (628c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6256:	9b01      	ldr	r3, [sp, #4]
    6258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    625c:	1e5a      	subs	r2, r3, #1
    625e:	490b      	ldr	r1, [pc, #44]	; (628c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6260:	9b01      	ldr	r3, [sp, #4]
    6262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6266:	4a0a      	ldr	r2, [pc, #40]	; (6290 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    6268:	9b01      	ldr	r3, [sp, #4]
    626a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    626e:	f003 0301 	and.w	r3, r3, #1
    6272:	2b00      	cmp	r3, #0
    6274:	d106      	bne.n	6284 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    6276:	4a05      	ldr	r2, [pc, #20]	; (628c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6278:	9b01      	ldr	r3, [sp, #4]
    627a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    627e:	2b00      	cmp	r3, #0
    6280:	d100      	bne.n	6284 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6282:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6284:	bf00      	nop
    6286:	b003      	add	sp, #12
    6288:	f85d fb04 	ldr.w	pc, [sp], #4
    628c:	1fff8d0c 	.word	0x1fff8d0c
    6290:	1fff8d08 	.word	0x1fff8d08

00006294 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    6294:	b500      	push	{lr}
    6296:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6298:	f7fa fe2e 	bl	ef8 <Sys_GetCoreID>
    629c:	4603      	mov	r3, r0
    629e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    62a0:	4a10      	ldr	r2, [pc, #64]	; (62e4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    62a2:	9b01      	ldr	r3, [sp, #4]
    62a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62a8:	2b00      	cmp	r3, #0
    62aa:	d10d      	bne.n	62c8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    62ac:	f7fa fb15 	bl	8da <Mcu_schm_read_msr>
    62b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    62b2:	9b00      	ldr	r3, [sp, #0]
    62b4:	f003 0301 	and.w	r3, r3, #1
    62b8:	2b00      	cmp	r3, #0
    62ba:	d100      	bne.n	62be <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    62bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    62be:	490a      	ldr	r1, [pc, #40]	; (62e8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    62c0:	9b01      	ldr	r3, [sp, #4]
    62c2:	9a00      	ldr	r2, [sp, #0]
    62c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    62c8:	4a06      	ldr	r2, [pc, #24]	; (62e4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    62ca:	9b01      	ldr	r3, [sp, #4]
    62cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62d0:	1c5a      	adds	r2, r3, #1
    62d2:	4904      	ldr	r1, [pc, #16]	; (62e4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    62d4:	9b01      	ldr	r3, [sp, #4]
    62d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    62da:	bf00      	nop
    62dc:	b003      	add	sp, #12
    62de:	f85d fb04 	ldr.w	pc, [sp], #4
    62e2:	bf00      	nop
    62e4:	1fff8d14 	.word	0x1fff8d14
    62e8:	1fff8d10 	.word	0x1fff8d10

000062ec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    62ec:	b500      	push	{lr}
    62ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    62f0:	f7fa fe02 	bl	ef8 <Sys_GetCoreID>
    62f4:	4603      	mov	r3, r0
    62f6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    62f8:	4a0d      	ldr	r2, [pc, #52]	; (6330 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    62fa:	9b01      	ldr	r3, [sp, #4]
    62fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6300:	1e5a      	subs	r2, r3, #1
    6302:	490b      	ldr	r1, [pc, #44]	; (6330 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6304:	9b01      	ldr	r3, [sp, #4]
    6306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    630a:	4a0a      	ldr	r2, [pc, #40]	; (6334 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    630c:	9b01      	ldr	r3, [sp, #4]
    630e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6312:	f003 0301 	and.w	r3, r3, #1
    6316:	2b00      	cmp	r3, #0
    6318:	d106      	bne.n	6328 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    631a:	4a05      	ldr	r2, [pc, #20]	; (6330 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    631c:	9b01      	ldr	r3, [sp, #4]
    631e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6322:	2b00      	cmp	r3, #0
    6324:	d100      	bne.n	6328 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6326:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6328:	bf00      	nop
    632a:	b003      	add	sp, #12
    632c:	f85d fb04 	ldr.w	pc, [sp], #4
    6330:	1fff8d14 	.word	0x1fff8d14
    6334:	1fff8d10 	.word	0x1fff8d10

00006338 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6338:	b500      	push	{lr}
    633a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    633c:	f7fa fddc 	bl	ef8 <Sys_GetCoreID>
    6340:	4603      	mov	r3, r0
    6342:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    6344:	4a10      	ldr	r2, [pc, #64]	; (6388 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6346:	9b01      	ldr	r3, [sp, #4]
    6348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    634c:	2b00      	cmp	r3, #0
    634e:	d10d      	bne.n	636c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6350:	f7fa fac3 	bl	8da <Mcu_schm_read_msr>
    6354:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6356:	9b00      	ldr	r3, [sp, #0]
    6358:	f003 0301 	and.w	r3, r3, #1
    635c:	2b00      	cmp	r3, #0
    635e:	d100      	bne.n	6362 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6360:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6362:	490a      	ldr	r1, [pc, #40]	; (638c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    6364:	9b01      	ldr	r3, [sp, #4]
    6366:	9a00      	ldr	r2, [sp, #0]
    6368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    636c:	4a06      	ldr	r2, [pc, #24]	; (6388 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    636e:	9b01      	ldr	r3, [sp, #4]
    6370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6374:	1c5a      	adds	r2, r3, #1
    6376:	4904      	ldr	r1, [pc, #16]	; (6388 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6378:	9b01      	ldr	r3, [sp, #4]
    637a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    637e:	bf00      	nop
    6380:	b003      	add	sp, #12
    6382:	f85d fb04 	ldr.w	pc, [sp], #4
    6386:	bf00      	nop
    6388:	1fff8d1c 	.word	0x1fff8d1c
    638c:	1fff8d18 	.word	0x1fff8d18

00006390 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6390:	b500      	push	{lr}
    6392:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6394:	f7fa fdb0 	bl	ef8 <Sys_GetCoreID>
    6398:	4603      	mov	r3, r0
    639a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    639c:	4a0d      	ldr	r2, [pc, #52]	; (63d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    639e:	9b01      	ldr	r3, [sp, #4]
    63a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63a4:	1e5a      	subs	r2, r3, #1
    63a6:	490b      	ldr	r1, [pc, #44]	; (63d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    63a8:	9b01      	ldr	r3, [sp, #4]
    63aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    63ae:	4a0a      	ldr	r2, [pc, #40]	; (63d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    63b0:	9b01      	ldr	r3, [sp, #4]
    63b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63b6:	f003 0301 	and.w	r3, r3, #1
    63ba:	2b00      	cmp	r3, #0
    63bc:	d106      	bne.n	63cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    63be:	4a05      	ldr	r2, [pc, #20]	; (63d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    63c0:	9b01      	ldr	r3, [sp, #4]
    63c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63c6:	2b00      	cmp	r3, #0
    63c8:	d100      	bne.n	63cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    63ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    63cc:	bf00      	nop
    63ce:	b003      	add	sp, #12
    63d0:	f85d fb04 	ldr.w	pc, [sp], #4
    63d4:	1fff8d1c 	.word	0x1fff8d1c
    63d8:	1fff8d18 	.word	0x1fff8d18

000063dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    63dc:	b500      	push	{lr}
    63de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    63e0:	f7fa fd8a 	bl	ef8 <Sys_GetCoreID>
    63e4:	4603      	mov	r3, r0
    63e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    63e8:	4a10      	ldr	r2, [pc, #64]	; (642c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    63ea:	9b01      	ldr	r3, [sp, #4]
    63ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63f0:	2b00      	cmp	r3, #0
    63f2:	d10d      	bne.n	6410 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    63f4:	f7fa fa7a 	bl	8ec <Port_schm_read_msr>
    63f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    63fa:	9b00      	ldr	r3, [sp, #0]
    63fc:	f003 0301 	and.w	r3, r3, #1
    6400:	2b00      	cmp	r3, #0
    6402:	d100      	bne.n	6406 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6404:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6406:	490a      	ldr	r1, [pc, #40]	; (6430 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    6408:	9b01      	ldr	r3, [sp, #4]
    640a:	9a00      	ldr	r2, [sp, #0]
    640c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    6410:	4a06      	ldr	r2, [pc, #24]	; (642c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6412:	9b01      	ldr	r3, [sp, #4]
    6414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6418:	1c5a      	adds	r2, r3, #1
    641a:	4904      	ldr	r1, [pc, #16]	; (642c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    641c:	9b01      	ldr	r3, [sp, #4]
    641e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6422:	bf00      	nop
    6424:	b003      	add	sp, #12
    6426:	f85d fb04 	ldr.w	pc, [sp], #4
    642a:	bf00      	nop
    642c:	1fff8d24 	.word	0x1fff8d24
    6430:	1fff8d20 	.word	0x1fff8d20

00006434 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6434:	b500      	push	{lr}
    6436:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6438:	f7fa fd5e 	bl	ef8 <Sys_GetCoreID>
    643c:	4603      	mov	r3, r0
    643e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    6440:	4a0d      	ldr	r2, [pc, #52]	; (6478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6442:	9b01      	ldr	r3, [sp, #4]
    6444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6448:	1e5a      	subs	r2, r3, #1
    644a:	490b      	ldr	r1, [pc, #44]	; (6478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    644c:	9b01      	ldr	r3, [sp, #4]
    644e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6452:	4a0a      	ldr	r2, [pc, #40]	; (647c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    6454:	9b01      	ldr	r3, [sp, #4]
    6456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    645a:	f003 0301 	and.w	r3, r3, #1
    645e:	2b00      	cmp	r3, #0
    6460:	d106      	bne.n	6470 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    6462:	4a05      	ldr	r2, [pc, #20]	; (6478 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6464:	9b01      	ldr	r3, [sp, #4]
    6466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    646a:	2b00      	cmp	r3, #0
    646c:	d100      	bne.n	6470 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    646e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6470:	bf00      	nop
    6472:	b003      	add	sp, #12
    6474:	f85d fb04 	ldr.w	pc, [sp], #4
    6478:	1fff8d24 	.word	0x1fff8d24
    647c:	1fff8d20 	.word	0x1fff8d20

00006480 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    6480:	b500      	push	{lr}
    6482:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6484:	f7fa fd38 	bl	ef8 <Sys_GetCoreID>
    6488:	4603      	mov	r3, r0
    648a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    648c:	4a10      	ldr	r2, [pc, #64]	; (64d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    648e:	9b01      	ldr	r3, [sp, #4]
    6490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6494:	2b00      	cmp	r3, #0
    6496:	d10d      	bne.n	64b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6498:	f7fa fa28 	bl	8ec <Port_schm_read_msr>
    649c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    649e:	9b00      	ldr	r3, [sp, #0]
    64a0:	f003 0301 	and.w	r3, r3, #1
    64a4:	2b00      	cmp	r3, #0
    64a6:	d100      	bne.n	64aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    64a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    64aa:	490a      	ldr	r1, [pc, #40]	; (64d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    64ac:	9b01      	ldr	r3, [sp, #4]
    64ae:	9a00      	ldr	r2, [sp, #0]
    64b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    64b4:	4a06      	ldr	r2, [pc, #24]	; (64d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    64b6:	9b01      	ldr	r3, [sp, #4]
    64b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64bc:	1c5a      	adds	r2, r3, #1
    64be:	4904      	ldr	r1, [pc, #16]	; (64d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    64c0:	9b01      	ldr	r3, [sp, #4]
    64c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    64c6:	bf00      	nop
    64c8:	b003      	add	sp, #12
    64ca:	f85d fb04 	ldr.w	pc, [sp], #4
    64ce:	bf00      	nop
    64d0:	1fff8d2c 	.word	0x1fff8d2c
    64d4:	1fff8d28 	.word	0x1fff8d28

000064d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    64d8:	b500      	push	{lr}
    64da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    64dc:	f7fa fd0c 	bl	ef8 <Sys_GetCoreID>
    64e0:	4603      	mov	r3, r0
    64e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    64e4:	4a0d      	ldr	r2, [pc, #52]	; (651c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    64e6:	9b01      	ldr	r3, [sp, #4]
    64e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64ec:	1e5a      	subs	r2, r3, #1
    64ee:	490b      	ldr	r1, [pc, #44]	; (651c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    64f0:	9b01      	ldr	r3, [sp, #4]
    64f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    64f6:	4a0a      	ldr	r2, [pc, #40]	; (6520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    64f8:	9b01      	ldr	r3, [sp, #4]
    64fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64fe:	f003 0301 	and.w	r3, r3, #1
    6502:	2b00      	cmp	r3, #0
    6504:	d106      	bne.n	6514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    6506:	4a05      	ldr	r2, [pc, #20]	; (651c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6508:	9b01      	ldr	r3, [sp, #4]
    650a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    650e:	2b00      	cmp	r3, #0
    6510:	d100      	bne.n	6514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6512:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6514:	bf00      	nop
    6516:	b003      	add	sp, #12
    6518:	f85d fb04 	ldr.w	pc, [sp], #4
    651c:	1fff8d2c 	.word	0x1fff8d2c
    6520:	1fff8d28 	.word	0x1fff8d28

00006524 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6524:	b500      	push	{lr}
    6526:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6528:	f7fa fce6 	bl	ef8 <Sys_GetCoreID>
    652c:	4603      	mov	r3, r0
    652e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    6530:	4a10      	ldr	r2, [pc, #64]	; (6574 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6532:	9b01      	ldr	r3, [sp, #4]
    6534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6538:	2b00      	cmp	r3, #0
    653a:	d10d      	bne.n	6558 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    653c:	f7fa f9d6 	bl	8ec <Port_schm_read_msr>
    6540:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6542:	9b00      	ldr	r3, [sp, #0]
    6544:	f003 0301 	and.w	r3, r3, #1
    6548:	2b00      	cmp	r3, #0
    654a:	d100      	bne.n	654e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    654c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    654e:	490a      	ldr	r1, [pc, #40]	; (6578 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    6550:	9b01      	ldr	r3, [sp, #4]
    6552:	9a00      	ldr	r2, [sp, #0]
    6554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    6558:	4a06      	ldr	r2, [pc, #24]	; (6574 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    655a:	9b01      	ldr	r3, [sp, #4]
    655c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6560:	1c5a      	adds	r2, r3, #1
    6562:	4904      	ldr	r1, [pc, #16]	; (6574 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6564:	9b01      	ldr	r3, [sp, #4]
    6566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    656a:	bf00      	nop
    656c:	b003      	add	sp, #12
    656e:	f85d fb04 	ldr.w	pc, [sp], #4
    6572:	bf00      	nop
    6574:	1fff8d34 	.word	0x1fff8d34
    6578:	1fff8d30 	.word	0x1fff8d30

0000657c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    657c:	b500      	push	{lr}
    657e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6580:	f7fa fcba 	bl	ef8 <Sys_GetCoreID>
    6584:	4603      	mov	r3, r0
    6586:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    6588:	4a0d      	ldr	r2, [pc, #52]	; (65c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    658a:	9b01      	ldr	r3, [sp, #4]
    658c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6590:	1e5a      	subs	r2, r3, #1
    6592:	490b      	ldr	r1, [pc, #44]	; (65c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6594:	9b01      	ldr	r3, [sp, #4]
    6596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    659a:	4a0a      	ldr	r2, [pc, #40]	; (65c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    659c:	9b01      	ldr	r3, [sp, #4]
    659e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65a2:	f003 0301 	and.w	r3, r3, #1
    65a6:	2b00      	cmp	r3, #0
    65a8:	d106      	bne.n	65b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    65aa:	4a05      	ldr	r2, [pc, #20]	; (65c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    65ac:	9b01      	ldr	r3, [sp, #4]
    65ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65b2:	2b00      	cmp	r3, #0
    65b4:	d100      	bne.n	65b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    65b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    65b8:	bf00      	nop
    65ba:	b003      	add	sp, #12
    65bc:	f85d fb04 	ldr.w	pc, [sp], #4
    65c0:	1fff8d34 	.word	0x1fff8d34
    65c4:	1fff8d30 	.word	0x1fff8d30

000065c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    65c8:	b500      	push	{lr}
    65ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    65cc:	f7fa fc94 	bl	ef8 <Sys_GetCoreID>
    65d0:	4603      	mov	r3, r0
    65d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    65d4:	4a10      	ldr	r2, [pc, #64]	; (6618 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    65d6:	9b01      	ldr	r3, [sp, #4]
    65d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65dc:	2b00      	cmp	r3, #0
    65de:	d10d      	bne.n	65fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    65e0:	f7fa f984 	bl	8ec <Port_schm_read_msr>
    65e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    65e6:	9b00      	ldr	r3, [sp, #0]
    65e8:	f003 0301 	and.w	r3, r3, #1
    65ec:	2b00      	cmp	r3, #0
    65ee:	d100      	bne.n	65f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    65f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    65f2:	490a      	ldr	r1, [pc, #40]	; (661c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    65f4:	9b01      	ldr	r3, [sp, #4]
    65f6:	9a00      	ldr	r2, [sp, #0]
    65f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    65fc:	4a06      	ldr	r2, [pc, #24]	; (6618 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    65fe:	9b01      	ldr	r3, [sp, #4]
    6600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6604:	1c5a      	adds	r2, r3, #1
    6606:	4904      	ldr	r1, [pc, #16]	; (6618 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6608:	9b01      	ldr	r3, [sp, #4]
    660a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    660e:	bf00      	nop
    6610:	b003      	add	sp, #12
    6612:	f85d fb04 	ldr.w	pc, [sp], #4
    6616:	bf00      	nop
    6618:	1fff8d3c 	.word	0x1fff8d3c
    661c:	1fff8d38 	.word	0x1fff8d38

00006620 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6620:	b500      	push	{lr}
    6622:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6624:	f7fa fc68 	bl	ef8 <Sys_GetCoreID>
    6628:	4603      	mov	r3, r0
    662a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    662c:	4a0d      	ldr	r2, [pc, #52]	; (6664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    662e:	9b01      	ldr	r3, [sp, #4]
    6630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6634:	1e5a      	subs	r2, r3, #1
    6636:	490b      	ldr	r1, [pc, #44]	; (6664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6638:	9b01      	ldr	r3, [sp, #4]
    663a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    663e:	4a0a      	ldr	r2, [pc, #40]	; (6668 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    6640:	9b01      	ldr	r3, [sp, #4]
    6642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6646:	f003 0301 	and.w	r3, r3, #1
    664a:	2b00      	cmp	r3, #0
    664c:	d106      	bne.n	665c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    664e:	4a05      	ldr	r2, [pc, #20]	; (6664 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6650:	9b01      	ldr	r3, [sp, #4]
    6652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6656:	2b00      	cmp	r3, #0
    6658:	d100      	bne.n	665c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    665a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    665c:	bf00      	nop
    665e:	b003      	add	sp, #12
    6660:	f85d fb04 	ldr.w	pc, [sp], #4
    6664:	1fff8d3c 	.word	0x1fff8d3c
    6668:	1fff8d38 	.word	0x1fff8d38

0000666c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    666c:	b500      	push	{lr}
    666e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6670:	f7fa fc42 	bl	ef8 <Sys_GetCoreID>
    6674:	4603      	mov	r3, r0
    6676:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    6678:	4a10      	ldr	r2, [pc, #64]	; (66bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    667a:	9b01      	ldr	r3, [sp, #4]
    667c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6680:	2b00      	cmp	r3, #0
    6682:	d10d      	bne.n	66a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6684:	f7fa f932 	bl	8ec <Port_schm_read_msr>
    6688:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    668a:	9b00      	ldr	r3, [sp, #0]
    668c:	f003 0301 	and.w	r3, r3, #1
    6690:	2b00      	cmp	r3, #0
    6692:	d100      	bne.n	6696 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6694:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    6696:	490a      	ldr	r1, [pc, #40]	; (66c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    6698:	9b01      	ldr	r3, [sp, #4]
    669a:	9a00      	ldr	r2, [sp, #0]
    669c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    66a0:	4a06      	ldr	r2, [pc, #24]	; (66bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    66a2:	9b01      	ldr	r3, [sp, #4]
    66a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66a8:	1c5a      	adds	r2, r3, #1
    66aa:	4904      	ldr	r1, [pc, #16]	; (66bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    66ac:	9b01      	ldr	r3, [sp, #4]
    66ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    66b2:	bf00      	nop
    66b4:	b003      	add	sp, #12
    66b6:	f85d fb04 	ldr.w	pc, [sp], #4
    66ba:	bf00      	nop
    66bc:	1fff8d44 	.word	0x1fff8d44
    66c0:	1fff8d40 	.word	0x1fff8d40

000066c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    66c4:	b500      	push	{lr}
    66c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    66c8:	f7fa fc16 	bl	ef8 <Sys_GetCoreID>
    66cc:	4603      	mov	r3, r0
    66ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    66d0:	4a0d      	ldr	r2, [pc, #52]	; (6708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    66d2:	9b01      	ldr	r3, [sp, #4]
    66d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66d8:	1e5a      	subs	r2, r3, #1
    66da:	490b      	ldr	r1, [pc, #44]	; (6708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    66dc:	9b01      	ldr	r3, [sp, #4]
    66de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    66e2:	4a0a      	ldr	r2, [pc, #40]	; (670c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    66e4:	9b01      	ldr	r3, [sp, #4]
    66e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ea:	f003 0301 	and.w	r3, r3, #1
    66ee:	2b00      	cmp	r3, #0
    66f0:	d106      	bne.n	6700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    66f2:	4a05      	ldr	r2, [pc, #20]	; (6708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    66f4:	9b01      	ldr	r3, [sp, #4]
    66f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66fa:	2b00      	cmp	r3, #0
    66fc:	d100      	bne.n	6700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    66fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6700:	bf00      	nop
    6702:	b003      	add	sp, #12
    6704:	f85d fb04 	ldr.w	pc, [sp], #4
    6708:	1fff8d44 	.word	0x1fff8d44
    670c:	1fff8d40 	.word	0x1fff8d40

00006710 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6710:	b500      	push	{lr}
    6712:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6714:	f7fa fbf0 	bl	ef8 <Sys_GetCoreID>
    6718:	4603      	mov	r3, r0
    671a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    671c:	4a10      	ldr	r2, [pc, #64]	; (6760 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    671e:	9b01      	ldr	r3, [sp, #4]
    6720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6724:	2b00      	cmp	r3, #0
    6726:	d10d      	bne.n	6744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6728:	f7fa f8e0 	bl	8ec <Port_schm_read_msr>
    672c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    672e:	9b00      	ldr	r3, [sp, #0]
    6730:	f003 0301 	and.w	r3, r3, #1
    6734:	2b00      	cmp	r3, #0
    6736:	d100      	bne.n	673a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6738:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    673a:	490a      	ldr	r1, [pc, #40]	; (6764 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    673c:	9b01      	ldr	r3, [sp, #4]
    673e:	9a00      	ldr	r2, [sp, #0]
    6740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    6744:	4a06      	ldr	r2, [pc, #24]	; (6760 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6746:	9b01      	ldr	r3, [sp, #4]
    6748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    674c:	1c5a      	adds	r2, r3, #1
    674e:	4904      	ldr	r1, [pc, #16]	; (6760 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6750:	9b01      	ldr	r3, [sp, #4]
    6752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6756:	bf00      	nop
    6758:	b003      	add	sp, #12
    675a:	f85d fb04 	ldr.w	pc, [sp], #4
    675e:	bf00      	nop
    6760:	1fff8d4c 	.word	0x1fff8d4c
    6764:	1fff8d48 	.word	0x1fff8d48

00006768 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6768:	b500      	push	{lr}
    676a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    676c:	f7fa fbc4 	bl	ef8 <Sys_GetCoreID>
    6770:	4603      	mov	r3, r0
    6772:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    6774:	4a0d      	ldr	r2, [pc, #52]	; (67ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6776:	9b01      	ldr	r3, [sp, #4]
    6778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    677c:	1e5a      	subs	r2, r3, #1
    677e:	490b      	ldr	r1, [pc, #44]	; (67ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6780:	9b01      	ldr	r3, [sp, #4]
    6782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    6786:	4a0a      	ldr	r2, [pc, #40]	; (67b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    6788:	9b01      	ldr	r3, [sp, #4]
    678a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    678e:	f003 0301 	and.w	r3, r3, #1
    6792:	2b00      	cmp	r3, #0
    6794:	d106      	bne.n	67a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    6796:	4a05      	ldr	r2, [pc, #20]	; (67ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6798:	9b01      	ldr	r3, [sp, #4]
    679a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    679e:	2b00      	cmp	r3, #0
    67a0:	d100      	bne.n	67a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    67a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    67a4:	bf00      	nop
    67a6:	b003      	add	sp, #12
    67a8:	f85d fb04 	ldr.w	pc, [sp], #4
    67ac:	1fff8d4c 	.word	0x1fff8d4c
    67b0:	1fff8d48 	.word	0x1fff8d48

000067b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    67b4:	b500      	push	{lr}
    67b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67b8:	f7fa fb9e 	bl	ef8 <Sys_GetCoreID>
    67bc:	4603      	mov	r3, r0
    67be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    67c0:	4a10      	ldr	r2, [pc, #64]	; (6804 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    67c2:	9b01      	ldr	r3, [sp, #4]
    67c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67c8:	2b00      	cmp	r3, #0
    67ca:	d10d      	bne.n	67e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    67cc:	f7fa f88e 	bl	8ec <Port_schm_read_msr>
    67d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    67d2:	9b00      	ldr	r3, [sp, #0]
    67d4:	f003 0301 	and.w	r3, r3, #1
    67d8:	2b00      	cmp	r3, #0
    67da:	d100      	bne.n	67de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    67dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    67de:	490a      	ldr	r1, [pc, #40]	; (6808 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    67e0:	9b01      	ldr	r3, [sp, #4]
    67e2:	9a00      	ldr	r2, [sp, #0]
    67e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    67e8:	4a06      	ldr	r2, [pc, #24]	; (6804 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    67ea:	9b01      	ldr	r3, [sp, #4]
    67ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67f0:	1c5a      	adds	r2, r3, #1
    67f2:	4904      	ldr	r1, [pc, #16]	; (6804 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    67f4:	9b01      	ldr	r3, [sp, #4]
    67f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    67fa:	bf00      	nop
    67fc:	b003      	add	sp, #12
    67fe:	f85d fb04 	ldr.w	pc, [sp], #4
    6802:	bf00      	nop
    6804:	1fff8d54 	.word	0x1fff8d54
    6808:	1fff8d50 	.word	0x1fff8d50

0000680c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    680c:	b500      	push	{lr}
    680e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6810:	f7fa fb72 	bl	ef8 <Sys_GetCoreID>
    6814:	4603      	mov	r3, r0
    6816:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    6818:	4a0d      	ldr	r2, [pc, #52]	; (6850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    681a:	9b01      	ldr	r3, [sp, #4]
    681c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6820:	1e5a      	subs	r2, r3, #1
    6822:	490b      	ldr	r1, [pc, #44]	; (6850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6824:	9b01      	ldr	r3, [sp, #4]
    6826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    682a:	4a0a      	ldr	r2, [pc, #40]	; (6854 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    682c:	9b01      	ldr	r3, [sp, #4]
    682e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6832:	f003 0301 	and.w	r3, r3, #1
    6836:	2b00      	cmp	r3, #0
    6838:	d106      	bne.n	6848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    683a:	4a05      	ldr	r2, [pc, #20]	; (6850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    683c:	9b01      	ldr	r3, [sp, #4]
    683e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6842:	2b00      	cmp	r3, #0
    6844:	d100      	bne.n	6848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6846:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6848:	bf00      	nop
    684a:	b003      	add	sp, #12
    684c:	f85d fb04 	ldr.w	pc, [sp], #4
    6850:	1fff8d54 	.word	0x1fff8d54
    6854:	1fff8d50 	.word	0x1fff8d50

00006858 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6858:	b500      	push	{lr}
    685a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    685c:	f7fa fb4c 	bl	ef8 <Sys_GetCoreID>
    6860:	4603      	mov	r3, r0
    6862:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    6864:	4a10      	ldr	r2, [pc, #64]	; (68a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6866:	9b01      	ldr	r3, [sp, #4]
    6868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    686c:	2b00      	cmp	r3, #0
    686e:	d10d      	bne.n	688c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6870:	f7fa f83c 	bl	8ec <Port_schm_read_msr>
    6874:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6876:	9b00      	ldr	r3, [sp, #0]
    6878:	f003 0301 	and.w	r3, r3, #1
    687c:	2b00      	cmp	r3, #0
    687e:	d100      	bne.n	6882 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6880:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    6882:	490a      	ldr	r1, [pc, #40]	; (68ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    6884:	9b01      	ldr	r3, [sp, #4]
    6886:	9a00      	ldr	r2, [sp, #0]
    6888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    688c:	4a06      	ldr	r2, [pc, #24]	; (68a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    688e:	9b01      	ldr	r3, [sp, #4]
    6890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6894:	1c5a      	adds	r2, r3, #1
    6896:	4904      	ldr	r1, [pc, #16]	; (68a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6898:	9b01      	ldr	r3, [sp, #4]
    689a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    689e:	bf00      	nop
    68a0:	b003      	add	sp, #12
    68a2:	f85d fb04 	ldr.w	pc, [sp], #4
    68a6:	bf00      	nop
    68a8:	1fff8d5c 	.word	0x1fff8d5c
    68ac:	1fff8d58 	.word	0x1fff8d58

000068b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    68b0:	b500      	push	{lr}
    68b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    68b4:	f7fa fb20 	bl	ef8 <Sys_GetCoreID>
    68b8:	4603      	mov	r3, r0
    68ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    68bc:	4a0d      	ldr	r2, [pc, #52]	; (68f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    68be:	9b01      	ldr	r3, [sp, #4]
    68c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68c4:	1e5a      	subs	r2, r3, #1
    68c6:	490b      	ldr	r1, [pc, #44]	; (68f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    68c8:	9b01      	ldr	r3, [sp, #4]
    68ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    68ce:	4a0a      	ldr	r2, [pc, #40]	; (68f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    68d0:	9b01      	ldr	r3, [sp, #4]
    68d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68d6:	f003 0301 	and.w	r3, r3, #1
    68da:	2b00      	cmp	r3, #0
    68dc:	d106      	bne.n	68ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    68de:	4a05      	ldr	r2, [pc, #20]	; (68f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    68e0:	9b01      	ldr	r3, [sp, #4]
    68e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68e6:	2b00      	cmp	r3, #0
    68e8:	d100      	bne.n	68ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    68ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    68ec:	bf00      	nop
    68ee:	b003      	add	sp, #12
    68f0:	f85d fb04 	ldr.w	pc, [sp], #4
    68f4:	1fff8d5c 	.word	0x1fff8d5c
    68f8:	1fff8d58 	.word	0x1fff8d58

000068fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    68fc:	b500      	push	{lr}
    68fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6900:	f7fa fafa 	bl	ef8 <Sys_GetCoreID>
    6904:	4603      	mov	r3, r0
    6906:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    6908:	4a10      	ldr	r2, [pc, #64]	; (694c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    690a:	9b01      	ldr	r3, [sp, #4]
    690c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6910:	2b00      	cmp	r3, #0
    6912:	d10d      	bne.n	6930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6914:	f7f9 ffea 	bl	8ec <Port_schm_read_msr>
    6918:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    691a:	9b00      	ldr	r3, [sp, #0]
    691c:	f003 0301 	and.w	r3, r3, #1
    6920:	2b00      	cmp	r3, #0
    6922:	d100      	bne.n	6926 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6924:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    6926:	490a      	ldr	r1, [pc, #40]	; (6950 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    6928:	9b01      	ldr	r3, [sp, #4]
    692a:	9a00      	ldr	r2, [sp, #0]
    692c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    6930:	4a06      	ldr	r2, [pc, #24]	; (694c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6932:	9b01      	ldr	r3, [sp, #4]
    6934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6938:	1c5a      	adds	r2, r3, #1
    693a:	4904      	ldr	r1, [pc, #16]	; (694c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    693c:	9b01      	ldr	r3, [sp, #4]
    693e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6942:	bf00      	nop
    6944:	b003      	add	sp, #12
    6946:	f85d fb04 	ldr.w	pc, [sp], #4
    694a:	bf00      	nop
    694c:	1fff8d64 	.word	0x1fff8d64
    6950:	1fff8d60 	.word	0x1fff8d60

00006954 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6954:	b500      	push	{lr}
    6956:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6958:	f7fa face 	bl	ef8 <Sys_GetCoreID>
    695c:	4603      	mov	r3, r0
    695e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    6960:	4a0d      	ldr	r2, [pc, #52]	; (6998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6962:	9b01      	ldr	r3, [sp, #4]
    6964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6968:	1e5a      	subs	r2, r3, #1
    696a:	490b      	ldr	r1, [pc, #44]	; (6998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    696c:	9b01      	ldr	r3, [sp, #4]
    696e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    6972:	4a0a      	ldr	r2, [pc, #40]	; (699c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    6974:	9b01      	ldr	r3, [sp, #4]
    6976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    697a:	f003 0301 	and.w	r3, r3, #1
    697e:	2b00      	cmp	r3, #0
    6980:	d106      	bne.n	6990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    6982:	4a05      	ldr	r2, [pc, #20]	; (6998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6984:	9b01      	ldr	r3, [sp, #4]
    6986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    698a:	2b00      	cmp	r3, #0
    698c:	d100      	bne.n	6990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    698e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6990:	bf00      	nop
    6992:	b003      	add	sp, #12
    6994:	f85d fb04 	ldr.w	pc, [sp], #4
    6998:	1fff8d64 	.word	0x1fff8d64
    699c:	1fff8d60 	.word	0x1fff8d60

000069a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    69a0:	b500      	push	{lr}
    69a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    69a4:	f7fa faa8 	bl	ef8 <Sys_GetCoreID>
    69a8:	4603      	mov	r3, r0
    69aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    69ac:	4a10      	ldr	r2, [pc, #64]	; (69f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    69ae:	9b01      	ldr	r3, [sp, #4]
    69b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69b4:	2b00      	cmp	r3, #0
    69b6:	d10d      	bne.n	69d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    69b8:	f7f9 ff98 	bl	8ec <Port_schm_read_msr>
    69bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    69be:	9b00      	ldr	r3, [sp, #0]
    69c0:	f003 0301 	and.w	r3, r3, #1
    69c4:	2b00      	cmp	r3, #0
    69c6:	d100      	bne.n	69ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    69c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    69ca:	490a      	ldr	r1, [pc, #40]	; (69f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    69cc:	9b01      	ldr	r3, [sp, #4]
    69ce:	9a00      	ldr	r2, [sp, #0]
    69d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    69d4:	4a06      	ldr	r2, [pc, #24]	; (69f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    69d6:	9b01      	ldr	r3, [sp, #4]
    69d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69dc:	1c5a      	adds	r2, r3, #1
    69de:	4904      	ldr	r1, [pc, #16]	; (69f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    69e0:	9b01      	ldr	r3, [sp, #4]
    69e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    69e6:	bf00      	nop
    69e8:	b003      	add	sp, #12
    69ea:	f85d fb04 	ldr.w	pc, [sp], #4
    69ee:	bf00      	nop
    69f0:	1fff8d6c 	.word	0x1fff8d6c
    69f4:	1fff8d68 	.word	0x1fff8d68

000069f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    69f8:	b500      	push	{lr}
    69fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    69fc:	f7fa fa7c 	bl	ef8 <Sys_GetCoreID>
    6a00:	4603      	mov	r3, r0
    6a02:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    6a04:	4a0d      	ldr	r2, [pc, #52]	; (6a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6a06:	9b01      	ldr	r3, [sp, #4]
    6a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a0c:	1e5a      	subs	r2, r3, #1
    6a0e:	490b      	ldr	r1, [pc, #44]	; (6a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6a10:	9b01      	ldr	r3, [sp, #4]
    6a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    6a16:	4a0a      	ldr	r2, [pc, #40]	; (6a40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    6a18:	9b01      	ldr	r3, [sp, #4]
    6a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a1e:	f003 0301 	and.w	r3, r3, #1
    6a22:	2b00      	cmp	r3, #0
    6a24:	d106      	bne.n	6a34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    6a26:	4a05      	ldr	r2, [pc, #20]	; (6a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6a28:	9b01      	ldr	r3, [sp, #4]
    6a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d100      	bne.n	6a34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6a32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6a34:	bf00      	nop
    6a36:	b003      	add	sp, #12
    6a38:	f85d fb04 	ldr.w	pc, [sp], #4
    6a3c:	1fff8d6c 	.word	0x1fff8d6c
    6a40:	1fff8d68 	.word	0x1fff8d68

00006a44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    6a44:	b500      	push	{lr}
    6a46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a48:	f7fa fa56 	bl	ef8 <Sys_GetCoreID>
    6a4c:	4603      	mov	r3, r0
    6a4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    6a50:	4a10      	ldr	r2, [pc, #64]	; (6a94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6a52:	9b01      	ldr	r3, [sp, #4]
    6a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d10d      	bne.n	6a78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6a5c:	f7f9 ff46 	bl	8ec <Port_schm_read_msr>
    6a60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6a62:	9b00      	ldr	r3, [sp, #0]
    6a64:	f003 0301 	and.w	r3, r3, #1
    6a68:	2b00      	cmp	r3, #0
    6a6a:	d100      	bne.n	6a6e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6a6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    6a6e:	490a      	ldr	r1, [pc, #40]	; (6a98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    6a70:	9b01      	ldr	r3, [sp, #4]
    6a72:	9a00      	ldr	r2, [sp, #0]
    6a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    6a78:	4a06      	ldr	r2, [pc, #24]	; (6a94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6a7a:	9b01      	ldr	r3, [sp, #4]
    6a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a80:	1c5a      	adds	r2, r3, #1
    6a82:	4904      	ldr	r1, [pc, #16]	; (6a94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6a84:	9b01      	ldr	r3, [sp, #4]
    6a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a8a:	bf00      	nop
    6a8c:	b003      	add	sp, #12
    6a8e:	f85d fb04 	ldr.w	pc, [sp], #4
    6a92:	bf00      	nop
    6a94:	1fff8d74 	.word	0x1fff8d74
    6a98:	1fff8d70 	.word	0x1fff8d70

00006a9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    6a9c:	b500      	push	{lr}
    6a9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6aa0:	f7fa fa2a 	bl	ef8 <Sys_GetCoreID>
    6aa4:	4603      	mov	r3, r0
    6aa6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    6aa8:	4a0d      	ldr	r2, [pc, #52]	; (6ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6aaa:	9b01      	ldr	r3, [sp, #4]
    6aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ab0:	1e5a      	subs	r2, r3, #1
    6ab2:	490b      	ldr	r1, [pc, #44]	; (6ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6ab4:	9b01      	ldr	r3, [sp, #4]
    6ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    6aba:	4a0a      	ldr	r2, [pc, #40]	; (6ae4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    6abc:	9b01      	ldr	r3, [sp, #4]
    6abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ac2:	f003 0301 	and.w	r3, r3, #1
    6ac6:	2b00      	cmp	r3, #0
    6ac8:	d106      	bne.n	6ad8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    6aca:	4a05      	ldr	r2, [pc, #20]	; (6ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6acc:	9b01      	ldr	r3, [sp, #4]
    6ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ad2:	2b00      	cmp	r3, #0
    6ad4:	d100      	bne.n	6ad8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ad6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ad8:	bf00      	nop
    6ada:	b003      	add	sp, #12
    6adc:	f85d fb04 	ldr.w	pc, [sp], #4
    6ae0:	1fff8d74 	.word	0x1fff8d74
    6ae4:	1fff8d70 	.word	0x1fff8d70

00006ae8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    6ae8:	b500      	push	{lr}
    6aea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6aec:	f7fa fa04 	bl	ef8 <Sys_GetCoreID>
    6af0:	4603      	mov	r3, r0
    6af2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    6af4:	4a10      	ldr	r2, [pc, #64]	; (6b38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6af6:	9b01      	ldr	r3, [sp, #4]
    6af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6afc:	2b00      	cmp	r3, #0
    6afe:	d10d      	bne.n	6b1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6b00:	f7f9 fef4 	bl	8ec <Port_schm_read_msr>
    6b04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6b06:	9b00      	ldr	r3, [sp, #0]
    6b08:	f003 0301 	and.w	r3, r3, #1
    6b0c:	2b00      	cmp	r3, #0
    6b0e:	d100      	bne.n	6b12 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6b10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    6b12:	490a      	ldr	r1, [pc, #40]	; (6b3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    6b14:	9b01      	ldr	r3, [sp, #4]
    6b16:	9a00      	ldr	r2, [sp, #0]
    6b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    6b1c:	4a06      	ldr	r2, [pc, #24]	; (6b38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6b1e:	9b01      	ldr	r3, [sp, #4]
    6b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b24:	1c5a      	adds	r2, r3, #1
    6b26:	4904      	ldr	r1, [pc, #16]	; (6b38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6b28:	9b01      	ldr	r3, [sp, #4]
    6b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b2e:	bf00      	nop
    6b30:	b003      	add	sp, #12
    6b32:	f85d fb04 	ldr.w	pc, [sp], #4
    6b36:	bf00      	nop
    6b38:	1fff8d7c 	.word	0x1fff8d7c
    6b3c:	1fff8d78 	.word	0x1fff8d78

00006b40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    6b40:	b500      	push	{lr}
    6b42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b44:	f7fa f9d8 	bl	ef8 <Sys_GetCoreID>
    6b48:	4603      	mov	r3, r0
    6b4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    6b4c:	4a0d      	ldr	r2, [pc, #52]	; (6b84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6b4e:	9b01      	ldr	r3, [sp, #4]
    6b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b54:	1e5a      	subs	r2, r3, #1
    6b56:	490b      	ldr	r1, [pc, #44]	; (6b84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6b58:	9b01      	ldr	r3, [sp, #4]
    6b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    6b5e:	4a0a      	ldr	r2, [pc, #40]	; (6b88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    6b60:	9b01      	ldr	r3, [sp, #4]
    6b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b66:	f003 0301 	and.w	r3, r3, #1
    6b6a:	2b00      	cmp	r3, #0
    6b6c:	d106      	bne.n	6b7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    6b6e:	4a05      	ldr	r2, [pc, #20]	; (6b84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6b70:	9b01      	ldr	r3, [sp, #4]
    6b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b76:	2b00      	cmp	r3, #0
    6b78:	d100      	bne.n	6b7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6b7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6b7c:	bf00      	nop
    6b7e:	b003      	add	sp, #12
    6b80:	f85d fb04 	ldr.w	pc, [sp], #4
    6b84:	1fff8d7c 	.word	0x1fff8d7c
    6b88:	1fff8d78 	.word	0x1fff8d78

00006b8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    6b8c:	b500      	push	{lr}
    6b8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b90:	f7fa f9b2 	bl	ef8 <Sys_GetCoreID>
    6b94:	4603      	mov	r3, r0
    6b96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    6b98:	4a10      	ldr	r2, [pc, #64]	; (6bdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6b9a:	9b01      	ldr	r3, [sp, #4]
    6b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ba0:	2b00      	cmp	r3, #0
    6ba2:	d10d      	bne.n	6bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ba4:	f7f9 fea2 	bl	8ec <Port_schm_read_msr>
    6ba8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6baa:	9b00      	ldr	r3, [sp, #0]
    6bac:	f003 0301 	and.w	r3, r3, #1
    6bb0:	2b00      	cmp	r3, #0
    6bb2:	d100      	bne.n	6bb6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6bb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    6bb6:	490a      	ldr	r1, [pc, #40]	; (6be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    6bb8:	9b01      	ldr	r3, [sp, #4]
    6bba:	9a00      	ldr	r2, [sp, #0]
    6bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    6bc0:	4a06      	ldr	r2, [pc, #24]	; (6bdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6bc2:	9b01      	ldr	r3, [sp, #4]
    6bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bc8:	1c5a      	adds	r2, r3, #1
    6bca:	4904      	ldr	r1, [pc, #16]	; (6bdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6bcc:	9b01      	ldr	r3, [sp, #4]
    6bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6bd2:	bf00      	nop
    6bd4:	b003      	add	sp, #12
    6bd6:	f85d fb04 	ldr.w	pc, [sp], #4
    6bda:	bf00      	nop
    6bdc:	1fff8d84 	.word	0x1fff8d84
    6be0:	1fff8d80 	.word	0x1fff8d80

00006be4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    6be4:	b500      	push	{lr}
    6be6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6be8:	f7fa f986 	bl	ef8 <Sys_GetCoreID>
    6bec:	4603      	mov	r3, r0
    6bee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    6bf0:	4a0d      	ldr	r2, [pc, #52]	; (6c28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6bf2:	9b01      	ldr	r3, [sp, #4]
    6bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bf8:	1e5a      	subs	r2, r3, #1
    6bfa:	490b      	ldr	r1, [pc, #44]	; (6c28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6bfc:	9b01      	ldr	r3, [sp, #4]
    6bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    6c02:	4a0a      	ldr	r2, [pc, #40]	; (6c2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    6c04:	9b01      	ldr	r3, [sp, #4]
    6c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c0a:	f003 0301 	and.w	r3, r3, #1
    6c0e:	2b00      	cmp	r3, #0
    6c10:	d106      	bne.n	6c20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    6c12:	4a05      	ldr	r2, [pc, #20]	; (6c28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6c14:	9b01      	ldr	r3, [sp, #4]
    6c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	d100      	bne.n	6c20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6c1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6c20:	bf00      	nop
    6c22:	b003      	add	sp, #12
    6c24:	f85d fb04 	ldr.w	pc, [sp], #4
    6c28:	1fff8d84 	.word	0x1fff8d84
    6c2c:	1fff8d80 	.word	0x1fff8d80

00006c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    6c30:	b500      	push	{lr}
    6c32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c34:	f7fa f960 	bl	ef8 <Sys_GetCoreID>
    6c38:	4603      	mov	r3, r0
    6c3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    6c3c:	4a10      	ldr	r2, [pc, #64]	; (6c80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6c3e:	9b01      	ldr	r3, [sp, #4]
    6c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c44:	2b00      	cmp	r3, #0
    6c46:	d10d      	bne.n	6c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6c48:	f7f9 fe50 	bl	8ec <Port_schm_read_msr>
    6c4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6c4e:	9b00      	ldr	r3, [sp, #0]
    6c50:	f003 0301 	and.w	r3, r3, #1
    6c54:	2b00      	cmp	r3, #0
    6c56:	d100      	bne.n	6c5a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6c58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    6c5a:	490a      	ldr	r1, [pc, #40]	; (6c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    6c5c:	9b01      	ldr	r3, [sp, #4]
    6c5e:	9a00      	ldr	r2, [sp, #0]
    6c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    6c64:	4a06      	ldr	r2, [pc, #24]	; (6c80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6c66:	9b01      	ldr	r3, [sp, #4]
    6c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c6c:	1c5a      	adds	r2, r3, #1
    6c6e:	4904      	ldr	r1, [pc, #16]	; (6c80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6c70:	9b01      	ldr	r3, [sp, #4]
    6c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c76:	bf00      	nop
    6c78:	b003      	add	sp, #12
    6c7a:	f85d fb04 	ldr.w	pc, [sp], #4
    6c7e:	bf00      	nop
    6c80:	1fff8d8c 	.word	0x1fff8d8c
    6c84:	1fff8d88 	.word	0x1fff8d88

00006c88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    6c88:	b500      	push	{lr}
    6c8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c8c:	f7fa f934 	bl	ef8 <Sys_GetCoreID>
    6c90:	4603      	mov	r3, r0
    6c92:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    6c94:	4a0d      	ldr	r2, [pc, #52]	; (6ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6c96:	9b01      	ldr	r3, [sp, #4]
    6c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c9c:	1e5a      	subs	r2, r3, #1
    6c9e:	490b      	ldr	r1, [pc, #44]	; (6ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6ca0:	9b01      	ldr	r3, [sp, #4]
    6ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    6ca6:	4a0a      	ldr	r2, [pc, #40]	; (6cd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    6ca8:	9b01      	ldr	r3, [sp, #4]
    6caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cae:	f003 0301 	and.w	r3, r3, #1
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d106      	bne.n	6cc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    6cb6:	4a05      	ldr	r2, [pc, #20]	; (6ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6cb8:	9b01      	ldr	r3, [sp, #4]
    6cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cbe:	2b00      	cmp	r3, #0
    6cc0:	d100      	bne.n	6cc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6cc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6cc4:	bf00      	nop
    6cc6:	b003      	add	sp, #12
    6cc8:	f85d fb04 	ldr.w	pc, [sp], #4
    6ccc:	1fff8d8c 	.word	0x1fff8d8c
    6cd0:	1fff8d88 	.word	0x1fff8d88

00006cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    6cd4:	b500      	push	{lr}
    6cd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6cd8:	f7fa f90e 	bl	ef8 <Sys_GetCoreID>
    6cdc:	4603      	mov	r3, r0
    6cde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    6ce0:	4a10      	ldr	r2, [pc, #64]	; (6d24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6ce2:	9b01      	ldr	r3, [sp, #4]
    6ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ce8:	2b00      	cmp	r3, #0
    6cea:	d10d      	bne.n	6d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6cec:	f7f9 fdfe 	bl	8ec <Port_schm_read_msr>
    6cf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6cf2:	9b00      	ldr	r3, [sp, #0]
    6cf4:	f003 0301 	and.w	r3, r3, #1
    6cf8:	2b00      	cmp	r3, #0
    6cfa:	d100      	bne.n	6cfe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6cfc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    6cfe:	490a      	ldr	r1, [pc, #40]	; (6d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    6d00:	9b01      	ldr	r3, [sp, #4]
    6d02:	9a00      	ldr	r2, [sp, #0]
    6d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    6d08:	4a06      	ldr	r2, [pc, #24]	; (6d24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6d0a:	9b01      	ldr	r3, [sp, #4]
    6d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d10:	1c5a      	adds	r2, r3, #1
    6d12:	4904      	ldr	r1, [pc, #16]	; (6d24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6d14:	9b01      	ldr	r3, [sp, #4]
    6d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d1a:	bf00      	nop
    6d1c:	b003      	add	sp, #12
    6d1e:	f85d fb04 	ldr.w	pc, [sp], #4
    6d22:	bf00      	nop
    6d24:	1fff8d94 	.word	0x1fff8d94
    6d28:	1fff8d90 	.word	0x1fff8d90

00006d2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    6d2c:	b500      	push	{lr}
    6d2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d30:	f7fa f8e2 	bl	ef8 <Sys_GetCoreID>
    6d34:	4603      	mov	r3, r0
    6d36:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    6d38:	4a0d      	ldr	r2, [pc, #52]	; (6d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    6d3a:	9b01      	ldr	r3, [sp, #4]
    6d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d40:	1e5a      	subs	r2, r3, #1
    6d42:	490b      	ldr	r1, [pc, #44]	; (6d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    6d44:	9b01      	ldr	r3, [sp, #4]
    6d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    6d4a:	4a0a      	ldr	r2, [pc, #40]	; (6d74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    6d4c:	9b01      	ldr	r3, [sp, #4]
    6d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d52:	f003 0301 	and.w	r3, r3, #1
    6d56:	2b00      	cmp	r3, #0
    6d58:	d106      	bne.n	6d68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    6d5a:	4a05      	ldr	r2, [pc, #20]	; (6d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    6d5c:	9b01      	ldr	r3, [sp, #4]
    6d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d62:	2b00      	cmp	r3, #0
    6d64:	d100      	bne.n	6d68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6d68:	bf00      	nop
    6d6a:	b003      	add	sp, #12
    6d6c:	f85d fb04 	ldr.w	pc, [sp], #4
    6d70:	1fff8d94 	.word	0x1fff8d94
    6d74:	1fff8d90 	.word	0x1fff8d90

00006d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    6d78:	b500      	push	{lr}
    6d7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d7c:	f7fa f8bc 	bl	ef8 <Sys_GetCoreID>
    6d80:	4603      	mov	r3, r0
    6d82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    6d84:	4a10      	ldr	r2, [pc, #64]	; (6dc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    6d86:	9b01      	ldr	r3, [sp, #4]
    6d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d10d      	bne.n	6dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6d90:	f7f9 fdac 	bl	8ec <Port_schm_read_msr>
    6d94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d96:	9b00      	ldr	r3, [sp, #0]
    6d98:	f003 0301 	and.w	r3, r3, #1
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	d100      	bne.n	6da2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6da0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    6da2:	490a      	ldr	r1, [pc, #40]	; (6dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    6da4:	9b01      	ldr	r3, [sp, #4]
    6da6:	9a00      	ldr	r2, [sp, #0]
    6da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    6dac:	4a06      	ldr	r2, [pc, #24]	; (6dc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    6dae:	9b01      	ldr	r3, [sp, #4]
    6db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6db4:	1c5a      	adds	r2, r3, #1
    6db6:	4904      	ldr	r1, [pc, #16]	; (6dc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    6db8:	9b01      	ldr	r3, [sp, #4]
    6dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6dbe:	bf00      	nop
    6dc0:	b003      	add	sp, #12
    6dc2:	f85d fb04 	ldr.w	pc, [sp], #4
    6dc6:	bf00      	nop
    6dc8:	1fff8d9c 	.word	0x1fff8d9c
    6dcc:	1fff8d98 	.word	0x1fff8d98

00006dd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    6dd0:	b500      	push	{lr}
    6dd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6dd4:	f7fa f890 	bl	ef8 <Sys_GetCoreID>
    6dd8:	4603      	mov	r3, r0
    6dda:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    6ddc:	4a0d      	ldr	r2, [pc, #52]	; (6e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    6dde:	9b01      	ldr	r3, [sp, #4]
    6de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6de4:	1e5a      	subs	r2, r3, #1
    6de6:	490b      	ldr	r1, [pc, #44]	; (6e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    6de8:	9b01      	ldr	r3, [sp, #4]
    6dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    6dee:	4a0a      	ldr	r2, [pc, #40]	; (6e18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    6df0:	9b01      	ldr	r3, [sp, #4]
    6df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6df6:	f003 0301 	and.w	r3, r3, #1
    6dfa:	2b00      	cmp	r3, #0
    6dfc:	d106      	bne.n	6e0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    6dfe:	4a05      	ldr	r2, [pc, #20]	; (6e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    6e00:	9b01      	ldr	r3, [sp, #4]
    6e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e06:	2b00      	cmp	r3, #0
    6e08:	d100      	bne.n	6e0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e0c:	bf00      	nop
    6e0e:	b003      	add	sp, #12
    6e10:	f85d fb04 	ldr.w	pc, [sp], #4
    6e14:	1fff8d9c 	.word	0x1fff8d9c
    6e18:	1fff8d98 	.word	0x1fff8d98

00006e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    6e1c:	b500      	push	{lr}
    6e1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e20:	f7fa f86a 	bl	ef8 <Sys_GetCoreID>
    6e24:	4603      	mov	r3, r0
    6e26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    6e28:	4a10      	ldr	r2, [pc, #64]	; (6e6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    6e2a:	9b01      	ldr	r3, [sp, #4]
    6e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e30:	2b00      	cmp	r3, #0
    6e32:	d10d      	bne.n	6e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6e34:	f7f9 fd5a 	bl	8ec <Port_schm_read_msr>
    6e38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e3a:	9b00      	ldr	r3, [sp, #0]
    6e3c:	f003 0301 	and.w	r3, r3, #1
    6e40:	2b00      	cmp	r3, #0
    6e42:	d100      	bne.n	6e46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    6e46:	490a      	ldr	r1, [pc, #40]	; (6e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    6e48:	9b01      	ldr	r3, [sp, #4]
    6e4a:	9a00      	ldr	r2, [sp, #0]
    6e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    6e50:	4a06      	ldr	r2, [pc, #24]	; (6e6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    6e52:	9b01      	ldr	r3, [sp, #4]
    6e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e58:	1c5a      	adds	r2, r3, #1
    6e5a:	4904      	ldr	r1, [pc, #16]	; (6e6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    6e5c:	9b01      	ldr	r3, [sp, #4]
    6e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e62:	bf00      	nop
    6e64:	b003      	add	sp, #12
    6e66:	f85d fb04 	ldr.w	pc, [sp], #4
    6e6a:	bf00      	nop
    6e6c:	1fff8da4 	.word	0x1fff8da4
    6e70:	1fff8da0 	.word	0x1fff8da0

00006e74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    6e74:	b500      	push	{lr}
    6e76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e78:	f7fa f83e 	bl	ef8 <Sys_GetCoreID>
    6e7c:	4603      	mov	r3, r0
    6e7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    6e80:	4a0d      	ldr	r2, [pc, #52]	; (6eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    6e82:	9b01      	ldr	r3, [sp, #4]
    6e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e88:	1e5a      	subs	r2, r3, #1
    6e8a:	490b      	ldr	r1, [pc, #44]	; (6eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    6e8c:	9b01      	ldr	r3, [sp, #4]
    6e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    6e92:	4a0a      	ldr	r2, [pc, #40]	; (6ebc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    6e94:	9b01      	ldr	r3, [sp, #4]
    6e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e9a:	f003 0301 	and.w	r3, r3, #1
    6e9e:	2b00      	cmp	r3, #0
    6ea0:	d106      	bne.n	6eb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    6ea2:	4a05      	ldr	r2, [pc, #20]	; (6eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    6ea4:	9b01      	ldr	r3, [sp, #4]
    6ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eaa:	2b00      	cmp	r3, #0
    6eac:	d100      	bne.n	6eb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6eae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6eb0:	bf00      	nop
    6eb2:	b003      	add	sp, #12
    6eb4:	f85d fb04 	ldr.w	pc, [sp], #4
    6eb8:	1fff8da4 	.word	0x1fff8da4
    6ebc:	1fff8da0 	.word	0x1fff8da0

00006ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    6ec0:	b500      	push	{lr}
    6ec2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ec4:	f7fa f818 	bl	ef8 <Sys_GetCoreID>
    6ec8:	4603      	mov	r3, r0
    6eca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    6ecc:	4a10      	ldr	r2, [pc, #64]	; (6f10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6ece:	9b01      	ldr	r3, [sp, #4]
    6ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ed4:	2b00      	cmp	r3, #0
    6ed6:	d10d      	bne.n	6ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ed8:	f7f9 fd08 	bl	8ec <Port_schm_read_msr>
    6edc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6ede:	9b00      	ldr	r3, [sp, #0]
    6ee0:	f003 0301 	and.w	r3, r3, #1
    6ee4:	2b00      	cmp	r3, #0
    6ee6:	d100      	bne.n	6eea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6ee8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    6eea:	490a      	ldr	r1, [pc, #40]	; (6f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    6eec:	9b01      	ldr	r3, [sp, #4]
    6eee:	9a00      	ldr	r2, [sp, #0]
    6ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    6ef4:	4a06      	ldr	r2, [pc, #24]	; (6f10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6ef6:	9b01      	ldr	r3, [sp, #4]
    6ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6efc:	1c5a      	adds	r2, r3, #1
    6efe:	4904      	ldr	r1, [pc, #16]	; (6f10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    6f00:	9b01      	ldr	r3, [sp, #4]
    6f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f06:	bf00      	nop
    6f08:	b003      	add	sp, #12
    6f0a:	f85d fb04 	ldr.w	pc, [sp], #4
    6f0e:	bf00      	nop
    6f10:	1fff8dac 	.word	0x1fff8dac
    6f14:	1fff8da8 	.word	0x1fff8da8

00006f18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    6f18:	b500      	push	{lr}
    6f1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f1c:	f7f9 ffec 	bl	ef8 <Sys_GetCoreID>
    6f20:	4603      	mov	r3, r0
    6f22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    6f24:	4a0d      	ldr	r2, [pc, #52]	; (6f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6f26:	9b01      	ldr	r3, [sp, #4]
    6f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f2c:	1e5a      	subs	r2, r3, #1
    6f2e:	490b      	ldr	r1, [pc, #44]	; (6f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6f30:	9b01      	ldr	r3, [sp, #4]
    6f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    6f36:	4a0a      	ldr	r2, [pc, #40]	; (6f60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    6f38:	9b01      	ldr	r3, [sp, #4]
    6f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f3e:	f003 0301 	and.w	r3, r3, #1
    6f42:	2b00      	cmp	r3, #0
    6f44:	d106      	bne.n	6f54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    6f46:	4a05      	ldr	r2, [pc, #20]	; (6f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    6f48:	9b01      	ldr	r3, [sp, #4]
    6f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f4e:	2b00      	cmp	r3, #0
    6f50:	d100      	bne.n	6f54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f54:	bf00      	nop
    6f56:	b003      	add	sp, #12
    6f58:	f85d fb04 	ldr.w	pc, [sp], #4
    6f5c:	1fff8dac 	.word	0x1fff8dac
    6f60:	1fff8da8 	.word	0x1fff8da8

00006f64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    6f64:	b500      	push	{lr}
    6f66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f68:	f7f9 ffc6 	bl	ef8 <Sys_GetCoreID>
    6f6c:	4603      	mov	r3, r0
    6f6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    6f70:	4a10      	ldr	r2, [pc, #64]	; (6fb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6f72:	9b01      	ldr	r3, [sp, #4]
    6f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f78:	2b00      	cmp	r3, #0
    6f7a:	d10d      	bne.n	6f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f7c:	f7f9 fcb6 	bl	8ec <Port_schm_read_msr>
    6f80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6f82:	9b00      	ldr	r3, [sp, #0]
    6f84:	f003 0301 	and.w	r3, r3, #1
    6f88:	2b00      	cmp	r3, #0
    6f8a:	d100      	bne.n	6f8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    6f8e:	490a      	ldr	r1, [pc, #40]	; (6fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    6f90:	9b01      	ldr	r3, [sp, #4]
    6f92:	9a00      	ldr	r2, [sp, #0]
    6f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    6f98:	4a06      	ldr	r2, [pc, #24]	; (6fb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6f9a:	9b01      	ldr	r3, [sp, #4]
    6f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fa0:	1c5a      	adds	r2, r3, #1
    6fa2:	4904      	ldr	r1, [pc, #16]	; (6fb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    6fa4:	9b01      	ldr	r3, [sp, #4]
    6fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6faa:	bf00      	nop
    6fac:	b003      	add	sp, #12
    6fae:	f85d fb04 	ldr.w	pc, [sp], #4
    6fb2:	bf00      	nop
    6fb4:	1fff8db4 	.word	0x1fff8db4
    6fb8:	1fff8db0 	.word	0x1fff8db0

00006fbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    6fbc:	b500      	push	{lr}
    6fbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fc0:	f7f9 ff9a 	bl	ef8 <Sys_GetCoreID>
    6fc4:	4603      	mov	r3, r0
    6fc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    6fc8:	4a0d      	ldr	r2, [pc, #52]	; (7000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6fca:	9b01      	ldr	r3, [sp, #4]
    6fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fd0:	1e5a      	subs	r2, r3, #1
    6fd2:	490b      	ldr	r1, [pc, #44]	; (7000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6fd4:	9b01      	ldr	r3, [sp, #4]
    6fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    6fda:	4a0a      	ldr	r2, [pc, #40]	; (7004 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    6fdc:	9b01      	ldr	r3, [sp, #4]
    6fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fe2:	f003 0301 	and.w	r3, r3, #1
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d106      	bne.n	6ff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    6fea:	4a05      	ldr	r2, [pc, #20]	; (7000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    6fec:	9b01      	ldr	r3, [sp, #4]
    6fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ff2:	2b00      	cmp	r3, #0
    6ff4:	d100      	bne.n	6ff8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ff6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ff8:	bf00      	nop
    6ffa:	b003      	add	sp, #12
    6ffc:	f85d fb04 	ldr.w	pc, [sp], #4
    7000:	1fff8db4 	.word	0x1fff8db4
    7004:	1fff8db0 	.word	0x1fff8db0

00007008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    7008:	b500      	push	{lr}
    700a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    700c:	f7f9 ff74 	bl	ef8 <Sys_GetCoreID>
    7010:	4603      	mov	r3, r0
    7012:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    7014:	4a10      	ldr	r2, [pc, #64]	; (7058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7016:	9b01      	ldr	r3, [sp, #4]
    7018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    701c:	2b00      	cmp	r3, #0
    701e:	d10d      	bne.n	703c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7020:	f7f9 fc64 	bl	8ec <Port_schm_read_msr>
    7024:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7026:	9b00      	ldr	r3, [sp, #0]
    7028:	f003 0301 	and.w	r3, r3, #1
    702c:	2b00      	cmp	r3, #0
    702e:	d100      	bne.n	7032 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7030:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    7032:	490a      	ldr	r1, [pc, #40]	; (705c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    7034:	9b01      	ldr	r3, [sp, #4]
    7036:	9a00      	ldr	r2, [sp, #0]
    7038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    703c:	4a06      	ldr	r2, [pc, #24]	; (7058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    703e:	9b01      	ldr	r3, [sp, #4]
    7040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7044:	1c5a      	adds	r2, r3, #1
    7046:	4904      	ldr	r1, [pc, #16]	; (7058 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7048:	9b01      	ldr	r3, [sp, #4]
    704a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    704e:	bf00      	nop
    7050:	b003      	add	sp, #12
    7052:	f85d fb04 	ldr.w	pc, [sp], #4
    7056:	bf00      	nop
    7058:	1fff8dbc 	.word	0x1fff8dbc
    705c:	1fff8db8 	.word	0x1fff8db8

00007060 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    7060:	b500      	push	{lr}
    7062:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7064:	f7f9 ff48 	bl	ef8 <Sys_GetCoreID>
    7068:	4603      	mov	r3, r0
    706a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    706c:	4a0d      	ldr	r2, [pc, #52]	; (70a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    706e:	9b01      	ldr	r3, [sp, #4]
    7070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7074:	1e5a      	subs	r2, r3, #1
    7076:	490b      	ldr	r1, [pc, #44]	; (70a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7078:	9b01      	ldr	r3, [sp, #4]
    707a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    707e:	4a0a      	ldr	r2, [pc, #40]	; (70a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    7080:	9b01      	ldr	r3, [sp, #4]
    7082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7086:	f003 0301 	and.w	r3, r3, #1
    708a:	2b00      	cmp	r3, #0
    708c:	d106      	bne.n	709c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    708e:	4a05      	ldr	r2, [pc, #20]	; (70a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7090:	9b01      	ldr	r3, [sp, #4]
    7092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7096:	2b00      	cmp	r3, #0
    7098:	d100      	bne.n	709c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    709a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    709c:	bf00      	nop
    709e:	b003      	add	sp, #12
    70a0:	f85d fb04 	ldr.w	pc, [sp], #4
    70a4:	1fff8dbc 	.word	0x1fff8dbc
    70a8:	1fff8db8 	.word	0x1fff8db8

000070ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    70ac:	b500      	push	{lr}
    70ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70b0:	f7f9 ff22 	bl	ef8 <Sys_GetCoreID>
    70b4:	4603      	mov	r3, r0
    70b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    70b8:	4a10      	ldr	r2, [pc, #64]	; (70fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    70ba:	9b01      	ldr	r3, [sp, #4]
    70bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70c0:	2b00      	cmp	r3, #0
    70c2:	d10d      	bne.n	70e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    70c4:	f7f9 fc12 	bl	8ec <Port_schm_read_msr>
    70c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    70ca:	9b00      	ldr	r3, [sp, #0]
    70cc:	f003 0301 	and.w	r3, r3, #1
    70d0:	2b00      	cmp	r3, #0
    70d2:	d100      	bne.n	70d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    70d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    70d6:	490a      	ldr	r1, [pc, #40]	; (7100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    70d8:	9b01      	ldr	r3, [sp, #4]
    70da:	9a00      	ldr	r2, [sp, #0]
    70dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    70e0:	4a06      	ldr	r2, [pc, #24]	; (70fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    70e2:	9b01      	ldr	r3, [sp, #4]
    70e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70e8:	1c5a      	adds	r2, r3, #1
    70ea:	4904      	ldr	r1, [pc, #16]	; (70fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    70ec:	9b01      	ldr	r3, [sp, #4]
    70ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    70f2:	bf00      	nop
    70f4:	b003      	add	sp, #12
    70f6:	f85d fb04 	ldr.w	pc, [sp], #4
    70fa:	bf00      	nop
    70fc:	1fff8dc4 	.word	0x1fff8dc4
    7100:	1fff8dc0 	.word	0x1fff8dc0

00007104 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7104:	b500      	push	{lr}
    7106:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7108:	f7f9 fef6 	bl	ef8 <Sys_GetCoreID>
    710c:	4603      	mov	r3, r0
    710e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    7110:	4a0d      	ldr	r2, [pc, #52]	; (7148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7112:	9b01      	ldr	r3, [sp, #4]
    7114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7118:	1e5a      	subs	r2, r3, #1
    711a:	490b      	ldr	r1, [pc, #44]	; (7148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    711c:	9b01      	ldr	r3, [sp, #4]
    711e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    7122:	4a0a      	ldr	r2, [pc, #40]	; (714c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    7124:	9b01      	ldr	r3, [sp, #4]
    7126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    712a:	f003 0301 	and.w	r3, r3, #1
    712e:	2b00      	cmp	r3, #0
    7130:	d106      	bne.n	7140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    7132:	4a05      	ldr	r2, [pc, #20]	; (7148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7134:	9b01      	ldr	r3, [sp, #4]
    7136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    713a:	2b00      	cmp	r3, #0
    713c:	d100      	bne.n	7140 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    713e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7140:	bf00      	nop
    7142:	b003      	add	sp, #12
    7144:	f85d fb04 	ldr.w	pc, [sp], #4
    7148:	1fff8dc4 	.word	0x1fff8dc4
    714c:	1fff8dc0 	.word	0x1fff8dc0

00007150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7150:	b500      	push	{lr}
    7152:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7154:	f7f9 fed0 	bl	ef8 <Sys_GetCoreID>
    7158:	4603      	mov	r3, r0
    715a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    715c:	4a10      	ldr	r2, [pc, #64]	; (71a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    715e:	9b01      	ldr	r3, [sp, #4]
    7160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7164:	2b00      	cmp	r3, #0
    7166:	d10d      	bne.n	7184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7168:	f7f9 fbc0 	bl	8ec <Port_schm_read_msr>
    716c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    716e:	9b00      	ldr	r3, [sp, #0]
    7170:	f003 0301 	and.w	r3, r3, #1
    7174:	2b00      	cmp	r3, #0
    7176:	d100      	bne.n	717a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7178:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    717a:	490a      	ldr	r1, [pc, #40]	; (71a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    717c:	9b01      	ldr	r3, [sp, #4]
    717e:	9a00      	ldr	r2, [sp, #0]
    7180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    7184:	4a06      	ldr	r2, [pc, #24]	; (71a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7186:	9b01      	ldr	r3, [sp, #4]
    7188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    718c:	1c5a      	adds	r2, r3, #1
    718e:	4904      	ldr	r1, [pc, #16]	; (71a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7190:	9b01      	ldr	r3, [sp, #4]
    7192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7196:	bf00      	nop
    7198:	b003      	add	sp, #12
    719a:	f85d fb04 	ldr.w	pc, [sp], #4
    719e:	bf00      	nop
    71a0:	1fff8dcc 	.word	0x1fff8dcc
    71a4:	1fff8dc8 	.word	0x1fff8dc8

000071a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    71a8:	b500      	push	{lr}
    71aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71ac:	f7f9 fea4 	bl	ef8 <Sys_GetCoreID>
    71b0:	4603      	mov	r3, r0
    71b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    71b4:	4a0d      	ldr	r2, [pc, #52]	; (71ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    71b6:	9b01      	ldr	r3, [sp, #4]
    71b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71bc:	1e5a      	subs	r2, r3, #1
    71be:	490b      	ldr	r1, [pc, #44]	; (71ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    71c0:	9b01      	ldr	r3, [sp, #4]
    71c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    71c6:	4a0a      	ldr	r2, [pc, #40]	; (71f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    71c8:	9b01      	ldr	r3, [sp, #4]
    71ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71ce:	f003 0301 	and.w	r3, r3, #1
    71d2:	2b00      	cmp	r3, #0
    71d4:	d106      	bne.n	71e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    71d6:	4a05      	ldr	r2, [pc, #20]	; (71ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    71d8:	9b01      	ldr	r3, [sp, #4]
    71da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71de:	2b00      	cmp	r3, #0
    71e0:	d100      	bne.n	71e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    71e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    71e4:	bf00      	nop
    71e6:	b003      	add	sp, #12
    71e8:	f85d fb04 	ldr.w	pc, [sp], #4
    71ec:	1fff8dcc 	.word	0x1fff8dcc
    71f0:	1fff8dc8 	.word	0x1fff8dc8

000071f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    71f4:	b500      	push	{lr}
    71f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71f8:	f7f9 fe7e 	bl	ef8 <Sys_GetCoreID>
    71fc:	4603      	mov	r3, r0
    71fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    7200:	4a10      	ldr	r2, [pc, #64]	; (7244 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7202:	9b01      	ldr	r3, [sp, #4]
    7204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7208:	2b00      	cmp	r3, #0
    720a:	d10d      	bne.n	7228 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    720c:	f7f9 fb6e 	bl	8ec <Port_schm_read_msr>
    7210:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7212:	9b00      	ldr	r3, [sp, #0]
    7214:	f003 0301 	and.w	r3, r3, #1
    7218:	2b00      	cmp	r3, #0
    721a:	d100      	bne.n	721e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    721c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    721e:	490a      	ldr	r1, [pc, #40]	; (7248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    7220:	9b01      	ldr	r3, [sp, #4]
    7222:	9a00      	ldr	r2, [sp, #0]
    7224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    7228:	4a06      	ldr	r2, [pc, #24]	; (7244 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    722a:	9b01      	ldr	r3, [sp, #4]
    722c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7230:	1c5a      	adds	r2, r3, #1
    7232:	4904      	ldr	r1, [pc, #16]	; (7244 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7234:	9b01      	ldr	r3, [sp, #4]
    7236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    723a:	bf00      	nop
    723c:	b003      	add	sp, #12
    723e:	f85d fb04 	ldr.w	pc, [sp], #4
    7242:	bf00      	nop
    7244:	1fff8dd4 	.word	0x1fff8dd4
    7248:	1fff8dd0 	.word	0x1fff8dd0

0000724c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    724c:	b500      	push	{lr}
    724e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7250:	f7f9 fe52 	bl	ef8 <Sys_GetCoreID>
    7254:	4603      	mov	r3, r0
    7256:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    7258:	4a0d      	ldr	r2, [pc, #52]	; (7290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    725a:	9b01      	ldr	r3, [sp, #4]
    725c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7260:	1e5a      	subs	r2, r3, #1
    7262:	490b      	ldr	r1, [pc, #44]	; (7290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7264:	9b01      	ldr	r3, [sp, #4]
    7266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    726a:	4a0a      	ldr	r2, [pc, #40]	; (7294 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    726c:	9b01      	ldr	r3, [sp, #4]
    726e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7272:	f003 0301 	and.w	r3, r3, #1
    7276:	2b00      	cmp	r3, #0
    7278:	d106      	bne.n	7288 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    727a:	4a05      	ldr	r2, [pc, #20]	; (7290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    727c:	9b01      	ldr	r3, [sp, #4]
    727e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7282:	2b00      	cmp	r3, #0
    7284:	d100      	bne.n	7288 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7286:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7288:	bf00      	nop
    728a:	b003      	add	sp, #12
    728c:	f85d fb04 	ldr.w	pc, [sp], #4
    7290:	1fff8dd4 	.word	0x1fff8dd4
    7294:	1fff8dd0 	.word	0x1fff8dd0

00007298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    7298:	b500      	push	{lr}
    729a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    729c:	f7f9 fe2c 	bl	ef8 <Sys_GetCoreID>
    72a0:	4603      	mov	r3, r0
    72a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    72a4:	4a10      	ldr	r2, [pc, #64]	; (72e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    72a6:	9b01      	ldr	r3, [sp, #4]
    72a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72ac:	2b00      	cmp	r3, #0
    72ae:	d10d      	bne.n	72cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    72b0:	f7f9 fb1c 	bl	8ec <Port_schm_read_msr>
    72b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    72b6:	9b00      	ldr	r3, [sp, #0]
    72b8:	f003 0301 	and.w	r3, r3, #1
    72bc:	2b00      	cmp	r3, #0
    72be:	d100      	bne.n	72c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    72c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    72c2:	490a      	ldr	r1, [pc, #40]	; (72ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    72c4:	9b01      	ldr	r3, [sp, #4]
    72c6:	9a00      	ldr	r2, [sp, #0]
    72c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    72cc:	4a06      	ldr	r2, [pc, #24]	; (72e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    72ce:	9b01      	ldr	r3, [sp, #4]
    72d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72d4:	1c5a      	adds	r2, r3, #1
    72d6:	4904      	ldr	r1, [pc, #16]	; (72e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    72d8:	9b01      	ldr	r3, [sp, #4]
    72da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72de:	bf00      	nop
    72e0:	b003      	add	sp, #12
    72e2:	f85d fb04 	ldr.w	pc, [sp], #4
    72e6:	bf00      	nop
    72e8:	1fff8ddc 	.word	0x1fff8ddc
    72ec:	1fff8dd8 	.word	0x1fff8dd8

000072f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    72f0:	b500      	push	{lr}
    72f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72f4:	f7f9 fe00 	bl	ef8 <Sys_GetCoreID>
    72f8:	4603      	mov	r3, r0
    72fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    72fc:	4a0d      	ldr	r2, [pc, #52]	; (7334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    72fe:	9b01      	ldr	r3, [sp, #4]
    7300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7304:	1e5a      	subs	r2, r3, #1
    7306:	490b      	ldr	r1, [pc, #44]	; (7334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7308:	9b01      	ldr	r3, [sp, #4]
    730a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    730e:	4a0a      	ldr	r2, [pc, #40]	; (7338 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    7310:	9b01      	ldr	r3, [sp, #4]
    7312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7316:	f003 0301 	and.w	r3, r3, #1
    731a:	2b00      	cmp	r3, #0
    731c:	d106      	bne.n	732c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    731e:	4a05      	ldr	r2, [pc, #20]	; (7334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7320:	9b01      	ldr	r3, [sp, #4]
    7322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7326:	2b00      	cmp	r3, #0
    7328:	d100      	bne.n	732c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    732a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    732c:	bf00      	nop
    732e:	b003      	add	sp, #12
    7330:	f85d fb04 	ldr.w	pc, [sp], #4
    7334:	1fff8ddc 	.word	0x1fff8ddc
    7338:	1fff8dd8 	.word	0x1fff8dd8

0000733c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    733c:	b500      	push	{lr}
    733e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7340:	f7f9 fdda 	bl	ef8 <Sys_GetCoreID>
    7344:	4603      	mov	r3, r0
    7346:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    7348:	4a10      	ldr	r2, [pc, #64]	; (738c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    734a:	9b01      	ldr	r3, [sp, #4]
    734c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7350:	2b00      	cmp	r3, #0
    7352:	d10d      	bne.n	7370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7354:	f7f9 faca 	bl	8ec <Port_schm_read_msr>
    7358:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    735a:	9b00      	ldr	r3, [sp, #0]
    735c:	f003 0301 	and.w	r3, r3, #1
    7360:	2b00      	cmp	r3, #0
    7362:	d100      	bne.n	7366 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7364:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    7366:	490a      	ldr	r1, [pc, #40]	; (7390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    7368:	9b01      	ldr	r3, [sp, #4]
    736a:	9a00      	ldr	r2, [sp, #0]
    736c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    7370:	4a06      	ldr	r2, [pc, #24]	; (738c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7372:	9b01      	ldr	r3, [sp, #4]
    7374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7378:	1c5a      	adds	r2, r3, #1
    737a:	4904      	ldr	r1, [pc, #16]	; (738c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    737c:	9b01      	ldr	r3, [sp, #4]
    737e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7382:	bf00      	nop
    7384:	b003      	add	sp, #12
    7386:	f85d fb04 	ldr.w	pc, [sp], #4
    738a:	bf00      	nop
    738c:	1fff8de4 	.word	0x1fff8de4
    7390:	1fff8de0 	.word	0x1fff8de0

00007394 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7394:	b500      	push	{lr}
    7396:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7398:	f7f9 fdae 	bl	ef8 <Sys_GetCoreID>
    739c:	4603      	mov	r3, r0
    739e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    73a0:	4a0d      	ldr	r2, [pc, #52]	; (73d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    73a2:	9b01      	ldr	r3, [sp, #4]
    73a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73a8:	1e5a      	subs	r2, r3, #1
    73aa:	490b      	ldr	r1, [pc, #44]	; (73d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    73ac:	9b01      	ldr	r3, [sp, #4]
    73ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    73b2:	4a0a      	ldr	r2, [pc, #40]	; (73dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    73b4:	9b01      	ldr	r3, [sp, #4]
    73b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ba:	f003 0301 	and.w	r3, r3, #1
    73be:	2b00      	cmp	r3, #0
    73c0:	d106      	bne.n	73d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    73c2:	4a05      	ldr	r2, [pc, #20]	; (73d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    73c4:	9b01      	ldr	r3, [sp, #4]
    73c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ca:	2b00      	cmp	r3, #0
    73cc:	d100      	bne.n	73d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    73ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    73d0:	bf00      	nop
    73d2:	b003      	add	sp, #12
    73d4:	f85d fb04 	ldr.w	pc, [sp], #4
    73d8:	1fff8de4 	.word	0x1fff8de4
    73dc:	1fff8de0 	.word	0x1fff8de0

000073e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    73e0:	b500      	push	{lr}
    73e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73e4:	f7f9 fd88 	bl	ef8 <Sys_GetCoreID>
    73e8:	4603      	mov	r3, r0
    73ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    73ec:	4a10      	ldr	r2, [pc, #64]	; (7430 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    73ee:	9b01      	ldr	r3, [sp, #4]
    73f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73f4:	2b00      	cmp	r3, #0
    73f6:	d10d      	bne.n	7414 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    73f8:	f7f9 fa78 	bl	8ec <Port_schm_read_msr>
    73fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    73fe:	9b00      	ldr	r3, [sp, #0]
    7400:	f003 0301 	and.w	r3, r3, #1
    7404:	2b00      	cmp	r3, #0
    7406:	d100      	bne.n	740a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7408:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    740a:	490a      	ldr	r1, [pc, #40]	; (7434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    740c:	9b01      	ldr	r3, [sp, #4]
    740e:	9a00      	ldr	r2, [sp, #0]
    7410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    7414:	4a06      	ldr	r2, [pc, #24]	; (7430 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7416:	9b01      	ldr	r3, [sp, #4]
    7418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    741c:	1c5a      	adds	r2, r3, #1
    741e:	4904      	ldr	r1, [pc, #16]	; (7430 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7420:	9b01      	ldr	r3, [sp, #4]
    7422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7426:	bf00      	nop
    7428:	b003      	add	sp, #12
    742a:	f85d fb04 	ldr.w	pc, [sp], #4
    742e:	bf00      	nop
    7430:	1fff8dec 	.word	0x1fff8dec
    7434:	1fff8de8 	.word	0x1fff8de8

00007438 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    7438:	b500      	push	{lr}
    743a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    743c:	f7f9 fd5c 	bl	ef8 <Sys_GetCoreID>
    7440:	4603      	mov	r3, r0
    7442:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    7444:	4a0d      	ldr	r2, [pc, #52]	; (747c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7446:	9b01      	ldr	r3, [sp, #4]
    7448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    744c:	1e5a      	subs	r2, r3, #1
    744e:	490b      	ldr	r1, [pc, #44]	; (747c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7450:	9b01      	ldr	r3, [sp, #4]
    7452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    7456:	4a0a      	ldr	r2, [pc, #40]	; (7480 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    7458:	9b01      	ldr	r3, [sp, #4]
    745a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    745e:	f003 0301 	and.w	r3, r3, #1
    7462:	2b00      	cmp	r3, #0
    7464:	d106      	bne.n	7474 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    7466:	4a05      	ldr	r2, [pc, #20]	; (747c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7468:	9b01      	ldr	r3, [sp, #4]
    746a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    746e:	2b00      	cmp	r3, #0
    7470:	d100      	bne.n	7474 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7472:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7474:	bf00      	nop
    7476:	b003      	add	sp, #12
    7478:	f85d fb04 	ldr.w	pc, [sp], #4
    747c:	1fff8dec 	.word	0x1fff8dec
    7480:	1fff8de8 	.word	0x1fff8de8

00007484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7484:	b500      	push	{lr}
    7486:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7488:	f7f9 fd36 	bl	ef8 <Sys_GetCoreID>
    748c:	4603      	mov	r3, r0
    748e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    7490:	4a10      	ldr	r2, [pc, #64]	; (74d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7492:	9b01      	ldr	r3, [sp, #4]
    7494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7498:	2b00      	cmp	r3, #0
    749a:	d10d      	bne.n	74b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    749c:	f7f9 fa26 	bl	8ec <Port_schm_read_msr>
    74a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    74a2:	9b00      	ldr	r3, [sp, #0]
    74a4:	f003 0301 	and.w	r3, r3, #1
    74a8:	2b00      	cmp	r3, #0
    74aa:	d100      	bne.n	74ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    74ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    74ae:	490a      	ldr	r1, [pc, #40]	; (74d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    74b0:	9b01      	ldr	r3, [sp, #4]
    74b2:	9a00      	ldr	r2, [sp, #0]
    74b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    74b8:	4a06      	ldr	r2, [pc, #24]	; (74d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    74ba:	9b01      	ldr	r3, [sp, #4]
    74bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74c0:	1c5a      	adds	r2, r3, #1
    74c2:	4904      	ldr	r1, [pc, #16]	; (74d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    74c4:	9b01      	ldr	r3, [sp, #4]
    74c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    74ca:	bf00      	nop
    74cc:	b003      	add	sp, #12
    74ce:	f85d fb04 	ldr.w	pc, [sp], #4
    74d2:	bf00      	nop
    74d4:	1fff8df4 	.word	0x1fff8df4
    74d8:	1fff8df0 	.word	0x1fff8df0

000074dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    74dc:	b500      	push	{lr}
    74de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74e0:	f7f9 fd0a 	bl	ef8 <Sys_GetCoreID>
    74e4:	4603      	mov	r3, r0
    74e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    74e8:	4a0d      	ldr	r2, [pc, #52]	; (7520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    74ea:	9b01      	ldr	r3, [sp, #4]
    74ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74f0:	1e5a      	subs	r2, r3, #1
    74f2:	490b      	ldr	r1, [pc, #44]	; (7520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    74f4:	9b01      	ldr	r3, [sp, #4]
    74f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    74fa:	4a0a      	ldr	r2, [pc, #40]	; (7524 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    74fc:	9b01      	ldr	r3, [sp, #4]
    74fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7502:	f003 0301 	and.w	r3, r3, #1
    7506:	2b00      	cmp	r3, #0
    7508:	d106      	bne.n	7518 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    750a:	4a05      	ldr	r2, [pc, #20]	; (7520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    750c:	9b01      	ldr	r3, [sp, #4]
    750e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7512:	2b00      	cmp	r3, #0
    7514:	d100      	bne.n	7518 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7516:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7518:	bf00      	nop
    751a:	b003      	add	sp, #12
    751c:	f85d fb04 	ldr.w	pc, [sp], #4
    7520:	1fff8df4 	.word	0x1fff8df4
    7524:	1fff8df0 	.word	0x1fff8df0

00007528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7528:	b500      	push	{lr}
    752a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    752c:	f7f9 fce4 	bl	ef8 <Sys_GetCoreID>
    7530:	4603      	mov	r3, r0
    7532:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    7534:	4a10      	ldr	r2, [pc, #64]	; (7578 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7536:	9b01      	ldr	r3, [sp, #4]
    7538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    753c:	2b00      	cmp	r3, #0
    753e:	d10d      	bne.n	755c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7540:	f7f9 f9d4 	bl	8ec <Port_schm_read_msr>
    7544:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7546:	9b00      	ldr	r3, [sp, #0]
    7548:	f003 0301 	and.w	r3, r3, #1
    754c:	2b00      	cmp	r3, #0
    754e:	d100      	bne.n	7552 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7550:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    7552:	490a      	ldr	r1, [pc, #40]	; (757c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    7554:	9b01      	ldr	r3, [sp, #4]
    7556:	9a00      	ldr	r2, [sp, #0]
    7558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    755c:	4a06      	ldr	r2, [pc, #24]	; (7578 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    755e:	9b01      	ldr	r3, [sp, #4]
    7560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7564:	1c5a      	adds	r2, r3, #1
    7566:	4904      	ldr	r1, [pc, #16]	; (7578 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7568:	9b01      	ldr	r3, [sp, #4]
    756a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    756e:	bf00      	nop
    7570:	b003      	add	sp, #12
    7572:	f85d fb04 	ldr.w	pc, [sp], #4
    7576:	bf00      	nop
    7578:	1fff8dfc 	.word	0x1fff8dfc
    757c:	1fff8df8 	.word	0x1fff8df8

00007580 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7580:	b500      	push	{lr}
    7582:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7584:	f7f9 fcb8 	bl	ef8 <Sys_GetCoreID>
    7588:	4603      	mov	r3, r0
    758a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    758c:	4a0d      	ldr	r2, [pc, #52]	; (75c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    758e:	9b01      	ldr	r3, [sp, #4]
    7590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7594:	1e5a      	subs	r2, r3, #1
    7596:	490b      	ldr	r1, [pc, #44]	; (75c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7598:	9b01      	ldr	r3, [sp, #4]
    759a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    759e:	4a0a      	ldr	r2, [pc, #40]	; (75c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    75a0:	9b01      	ldr	r3, [sp, #4]
    75a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75a6:	f003 0301 	and.w	r3, r3, #1
    75aa:	2b00      	cmp	r3, #0
    75ac:	d106      	bne.n	75bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    75ae:	4a05      	ldr	r2, [pc, #20]	; (75c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    75b0:	9b01      	ldr	r3, [sp, #4]
    75b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75b6:	2b00      	cmp	r3, #0
    75b8:	d100      	bne.n	75bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    75ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    75bc:	bf00      	nop
    75be:	b003      	add	sp, #12
    75c0:	f85d fb04 	ldr.w	pc, [sp], #4
    75c4:	1fff8dfc 	.word	0x1fff8dfc
    75c8:	1fff8df8 	.word	0x1fff8df8

000075cc <Clock_Ip_au8DividerCallbackIndex>:
    75cc:	0e0d0c00 06030201 0a070409 000b0805     ................

000075dc <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

000075ec <Clock_Ip_au8XoscCallbackIndex>:
    75ec:	00000100 00000000 00000000 00000000     ................

000075fc <Clock_Ip_au8IrcoscCallbackIndex>:
    75fc:	03020100 00000004 00000000 00000000     ................

0000760c <Clock_Ip_au8GateCallbackIndex>:
    760c:	06010200 01040301 00000500 00000000     ................

0000761c <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000762c <Clock_Ip_au8PllCallbackIndex>:
    762c:	00000100 00000000 00000000 00000000     ................

0000763c <Clock_Ip_au8SelectorCallbackIndex>:
    763c:	0a090800 03020109 07060504 00000000     ................

0000764c <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000765c <Clock_Ip_au8CmuCallbackIndex>:
	...

0000766c <Clock_Ip_au8ClockFeatures>:
	...
    767c:	01000000 00000000 00000000 00000002     ................
    768c:	00000000 00000300 00000000 00040000     ................
    769c:	00000000 05000000 00000000 00000000     ................
    76ac:	00000006 00000000 00000100 00000000     ................
    76bc:	00010000 00000000 04000000 00000000     ................
    76cc:	00000000 00000005 00000001 00000401     ................
    76dc:	00000200 00050100 00030000 04020000     ................
    76ec:	04000000 02000000 00000005 00000005     ................
    76fc:	00000403 00000600 00050300 00070000     ................
    770c:	05000000 00000000 00000000 00000006     ................
	...
    774c:	00050000 00000000 06000000 00000100     ................
    775c:	00000000 00030007 00000000 00000000     ................
    776c:	00000000 00060000 00000000 07000000     ................
    777c:	00000100 00000000 00030008 00000000     ................
	...
    7794:	00090000 00000000 0a000000 00000100     ................
    77a4:	00000000 0003000b 00000000 00000000     ................
    77b4:	00000000 000c0000 00000000 0d000000     ................
    77c4:	00000100 00000000 0003000e 00000000     ................
    77d4:	00000800 00000000 00090000 00000000     ................
    77e4:	0a000000 00000000 00000000 0000000b     ................
    77f4:	00000000 00000b01 00000000 000b0200     ................
    7804:	00000000 0b030000 00000000 00000000     ................
	...
    781c:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    782c:	01000000 00000000 00000000 00000007     ................
    783c:	00007300 00000700 00320000 00090000     .s........2.....
    784c:	02000000 07000000 00000000 00000021     ............!...
    785c:	00000009 00000400 00000900 00030000     ................
    786c:	00070000 61000000 07000000 00000000     .......a........
    787c:	00000024 00000007 00002500 00000700     $........%......
    788c:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    789c:	00000000 00000020 38000004 00003800     .... ......8.8..
    78ac:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    78bc:	04000000 00260000 00000026 66000004     ......&.&......f
    78cc:	00006600 00000400 00370037 00040000     .f......7.7.....
    78dc:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    78ec:	2e000004 00002e00 00000200 00404040     ............@@@.
    78fc:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    790c:	0000006b 6c000004 00006c00 00000900     k......l.l......
    791c:	00010000 00090000 00000000 07000000     ................
    792c:	00000000 00000036 00000007 00003100     ....6........1..
    793c:	00000700 00490000 00070000 4a000000     ......I........J
    794c:	07000000 00000000 0000004b 00000007     ........K.......
    795c:	00004c00 00000700 004d0000 00070000     .L........M.....
    796c:	3d000000 03000000 00000000 00000000     ...=............

0000797c <Clock_Ip_au16SelectorEntryHardwareValue>:
    797c:	01010a03 01010001 04040002 02000603     ................
    798c:	00010810 02020100 00000000 00000007     ................
    799c:	00000009 00000000 00000c0e 00000000     ................
	...

000079d4 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    79d4:	00020000 00000300 00000601 00000000     ................
	...

00007a04 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    7a04:	00000700 00000000 02020000 01010303     ................
    7a14:	03020606 00000000 00000000 00000000     ................
	...

00007a34 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    7a34:	00000001 00000000 02020000 01010303     ................
    7a44:	03020606 00000000 00000000 00000000     ................
	...

00007a64 <Clock_Ip_au8DividerValueHardwareValue>:
    7a64:	00020100 00000003 00000004 00000000     ................
    7a74:	00000005 00000000 00000000 00000000     ................
    7a84:	00000006 00000000 00000000 00000000     ................
	...
    7aa4:	00000007                                ....

00007aa8 <Clock_Ip_apxScgPeriphAsyncDivs>:
    7aa8:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00007ab8 <Clock_Ip_aeSourceTypeClockName>:
    7ab8:	00000000 00000001 00000001 00000001     ................
    7ac8:	00000001 00000001 00000001 00000001     ................
    7ad8:	00000002 00000003 00000001 00000001     ................
    7ae8:	00000001 00000001 00000002 00000002     ................
    7af8:	00000003 00000003 00000001 00000001     ................
    7b08:	00000004 00000004 00000004 00000004     ................
	...

00007b74 <Clock_Ip_aeHwPllName>:
    7b74:	00000009                                ....

00007b78 <Clock_Ip_aeHwDfsName>:
    7b78:	00000057                                W...

00007b7c <Clock_Ip_axDividerCallbacks>:
    7b7c:	00002045 0000204f 00002069 00002083     E ..O ..i ... ..
    7b8c:	0000209d 000020b7 000020d1 000020eb     . ... ... ... ..
    7b9c:	00002105 0000211f 00002139 00002153     .!...!..9!..S!..
    7bac:	0000216d 00002187 000021a1              m!...!...!..

00007bb8 <Clock_Ip_axDividerTriggerCallbacks>:
    7bb8:	00002515 00002515                       .%...%..

00007bc0 <Clock_Ip_axExtOscCallbacks>:
    7bc0:	00002521 00002521 00002521 0000252b     !%..!%..!%..+%..
    7bd0:	00002521 00002535 0000254f 00002569     !%..5%..O%..i%..
    7be0:	000025ed 00002601                       .%...&..

00007be8 <Clock_Ip_axFracDivCallbacks>:
    7be8:	000027c1 000027c1 000027cb              .'...'...'..

00007bf4 <Clock_Ip_axGateCallbacks>:
    7bf4:	000027e5 000027ef 000028ef 00002909     .'...'...(...)..
    7c04:	0000289f 000028b9 0000284f 00002869     .(...(..O(..i(..
    7c14:	000027ff 00002819 0000293f 00002959     .'...(..?)..Y)..
    7c24:	0000298f 000029a9                       .)...)..

00007c2c <Clock_Ip_axIntOscCallbacks>:
    7c2c:	00002b55 00002b55 00002b5f 00002b69     U+..U+.._+..i+..
    7c3c:	00002b83 00002b9d 00002bb1 00002bcb     .+...+...+...+..
    7c4c:	00002be5 00002bf9 00002c13 00002c2d     .+...+...,..-,..
    7c5c:	00002cd5 00002cef 00002d09              .,...,...-..

00007c68 <Clock_Ip_axCmuCallbacks>:
    7c68:	000032a5 000032af 000032bb 000032a5     .2...2...2...2..

00007c78 <Clock_Ip_axPllCallbacks>:
    7c78:	000032c5 000032c5 000032cf 000032c5     .2...2...2...2..
    7c88:	000032db 000032e5 000032ff 00003319     .2...2...2...3..
    7c98:	000033bd 000033a9                       .3...3..

00007ca0 <Clock_Ip_axPcfsCallbacks>:
    7ca0:	00003519                                .5..

00007ca4 <Clock_Ip_axSelectorCallbacks>:
    7ca4:	00003525 00003525 0000352f 00003549     %5..%5../5..I5..
    7cb4:	00003525 00003563 0000357d 00003597     %5..c5..}5...5..
    7cc4:	000035b1 000035cb 000035e5 000035ff     .5...5...5...5..
    7cd4:	00003619 00003633 0000364d 00003667     .6..36..M6..g6..
    7ce4:	00003681 0000369b 000036b5 000036cf     .6...6...6...6..
    7cf4:	000036e9 00003703                       .6...7..

00007cfc <ClockSource>:
    7cfc:	00000000 00000008 00000002 00000005     ................
	...
    7d14:	00000009                                ....

00007d18 <ResetReasonArray>:
    7d18:	00000000 00000001 00000002 00000003     ................
    7d28:	00000004 00000005 00000006 00000007     ................
    7d38:	00000008 00000009 0000000a 0000000b     ................
    7d48:	0000000c 0000000d 0000000e              ............

00007d54 <Port_au32PortCiPortBaseAddr>:
    7d54:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    7d64:	4004d000                                ...@

00007d68 <Port_au32PortCiGpioBaseAddr>:
    7d68:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    7d78:	400ff100                                ...@

00007d7c <Task_Config>:
    7d7c:	00000064 00000001 000008ff 000000c8     d...............
    7d8c:	00000001 0000090b                       ........

00007d94 <Timer_Config>:
    7d94:	0000012c 00000001 00000917 00000190     ,...............
    7da4:	00000001 00000929                       ....)...

00007dac <Scheduler_Config>:
    7dac:	0000000a 00000002 00007d7c 00000002     ........|}......
    7dbc:	00007d94                                .}..

00007dc0 <Mcu_aClockConfigPB>:
	...
    7dc8:	14000002 0400000e 01000020 00000002     ........ .......
    7dd8:	01000001 00000001 00000005 00000001     ................
    7de8:	00000000 00000057 00000000 00000000     ....W...........
	...
    7e00:	00000057 00000000 00000057 00000000     W.......W.......
	...
    7e28:	00000019 00000005 0000001a 00000002     ................
    7e38:	0000001b 00000005 0000002a 00000002     ........*.......
    7e48:	0000003f 0000000a 00000040 00000000     ?.......@.......
    7e58:	00000041 00000000 00000042 00000000     A.......B.......
    7e68:	00000031 00000000 00000045 00000000     1.......E.......
    7e78:	00000046 00000000 00000047 00000000     F.......G.......
    7e88:	00000044 00000000 00000030 00000000     D.......0.......
    7e98:	0000003d 00000000 00000043 00000000     =.......C.......
    7ea8:	00000049 00000000 0000004a 00000000     I.......J.......
    7eb8:	0000004b 00000000 00000048 00000000     K.......H.......
    7ec8:	00000057 00000057 00000057 00000057     W...W...W...W...
    7ed8:	00000057 00000057 00000057 00000057     W...W...W...W...
    7ee8:	00000057 00000057 00000057 00000057     W...W...W...W...
    7ef8:	00000057 00000057 00000057 00000057     W...W...W...W...
    7f08:	0000000a 00000008 00000000 0000000b     ................
    7f18:	00000001 00000000 0000000c 00000001     ................
    7f28:	00000000 0000000d 00000001 00000000     ................
    7f38:	0000001d 00000001 00000000 0000001e     ................
    7f48:	00000002 00000000 0000001f 00000001     ................
    7f58:	00000000 00000021 00000001 00000000     ....!...........
    7f68:	00000022 00000002 00000000 00000023     "...........#...
    7f78:	00000001 00000000 00000025 00000002     ........%.......
    7f88:	00000000 00000026 00000004 00000000     ....&...........
    7f98:	00000027 00000002 00000000 00000048     '...........H...
    7fa8:	00000001 00000001 00000057 00000000     ........W.......
    7fb8:	00000000 00000057 00000000 00000000     ....W...........
    7fc8:	00000057 00000000 00000000 00000057     W...........W...
	...
    7fe0:	00000057 00000000 00000000 00000057     W...........W...
	...
    7ff8:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    8014:	00000014 00007d00 00000015 00007d00     .....}.......}..
    8024:	00000016 00007d00 00000017 00008000     .....}..........
    8034:	00000030 00000000 00000031 00000000     0.......1.......
    8044:	00000033 00000000 00000034 00000000     3.......4.......
    8054:	00000036 00000000 00000039 00000000     6.......9.......
    8064:	0000003a 00000000 0000003b 00000000     :.......;.......
    8074:	0000003c 00000000 0000003d 00000000     <.......=.......
    8084:	0000003e 00000000 0000003f 00000000     >.......?.......
    8094:	00000040 00000000 00000041 00000000     @.......A.......
    80a4:	00000042 00000000 00000043 00000000     B.......C.......
    80b4:	00000044 00000000 00000045 00000000     D.......E.......
    80c4:	00000046 00000000 00000047 00000000     F.......G.......
    80d4:	00000048 00000000 00000049 00000000     H.......I.......
    80e4:	0000004a 00000000 0000004b 00000000     J.......K.......
    80f4:	0000004e 00000000 0000004f 00000000     N.......O.......
    8104:	00000050 00000001 00000051 00000001     P.......Q.......
    8114:	00000052 00000001 00000053 00000001     R.......S.......
    8124:	00000054 00000001 00000055 00000000     T.......U.......
    8134:	00000057 00000000 00000057 00000000     W.......W.......
    8144:	00000057 00000000 00000057 00000000     W.......W.......
    8154:	00000057 00000000 00000057 00000000     W.......W.......
    8164:	00000057 00000000 00000057 00000000     W.......W.......
    8174:	00000057 00000000 00000057 00000000     W.......W.......
    8184:	00000000 00000057 00000000 00000057     ....W.......W...
	...

000081b8 <Mcu_Config>:
    81b8:	0000005a 00000000 00000001 00000001     Z...............
    81c8:	00008404 00007dc0 00008410              .....}......

000081d4 <OsIf_xPredefinedConfig>:
    81d4:	00000000 02dc6c00                       .....l..

000081dc <OsIf_apxPredefinedConfig>:
    81dc:	000081d4                                ....

000081e0 <g_pin_mux_InitConfigArr>:
    81e0:	4004b000 400ff080 00000008 00000002     ...@...@........
    81f0:	00000001 00000002 00000000 00000000     ................
	...
    8208:	4004b000 400ff080 00000009 00000002     ...@...@........
    8218:	00000001 00000002 00000000 00000000     ................
	...
    8230:	4004b000 400ff080 0000000a 00000002     ...@...@........
    8240:	00000001 00000002 00000000 00000000     ................
	...
    8258:	4004b000 400ff080 0000000b 00000002     ...@...@........
    8268:	00000001 00000002 00000000 00000000     ................
	...
    8280:	4004d000 400ff100 0000000c 00000002     ...@...@........
    8290:	00000001 00000001 00000000 00000000     ................
	...

000082a8 <au8Port_PartitionList>:
    82a8:	00000001                                ....

000082ac <au32Port_PinToPartitionMap>:
    82ac:	00000001 00000001 00000001 00000001     ................
    82bc:	00000001                                ....

000082c0 <Port_au16NoUnUsedPadsArrayDefault>:
    82c0:	00010000 00030002 00070006 00090008     ................
    82d0:	000c000b 000e000d 0010000f 00200011     .............. .
    82e0:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    82f0:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    8300:	00400031 00420041 00460043 004c0047     1.@.A.B.C.F.G.L.
    8310:	004e004d 0050004f 00600051 00620061     M.N.O.P.Q.`.a.b.
    8320:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
    8330:	006c006b 006e006d 0070006f 00800071     k.l.m.n.o.p.q...
    8340:	00820081 00840083 00860085 00880087     ................
    8350:	008a0089 008d008b 008f008e 00000090     ................

00008360 <Port_UnUsedPin>:
    8360:	00000000 00000001 00000000              ............

0000836c <Port_aPinConfigDefault>:
    836c:	00000048 00000100 00000000 00000002     H...............
    837c:	00010001 00000049 00000100 00000000     ....I...........
    838c:	00000002 00010101 0000004a 00000100     ........J.......
    839c:	00000000 00000002 00010101 0000008c     ................
    83ac:	00000100 00000000 00000001 00010101     ................
    83bc:	0000004b 00000100 00000000 00000002     K...............
    83cc:	00010101                                ....

000083d0 <Port_Config>:
    83d0:	004f0005 000082c0 00008360 0000836c     ..O.....`...l...
	...
    83e8:	000082ac 000082a8 000081e0              ............

000083f4 <Power_Ip_RCM_ConfigPB>:
	...

000083fc <Power_Ip_PMC_ConfigPB>:
    83fc:	00000000                                ....

00008400 <Power_Ip_SMC_ConfigPB>:
    8400:	00000000                                ....

00008404 <Power_Ip_aModeConfigPB>:
	...

00008410 <Power_Ip_HwIPsConfigPB>:
    8410:	000083f4 000083fc 00008400              ............

0000841c <__INIT_TABLE>:
    841c:	00000002 	.word	0x00000002
    8420:	1fff8b10 	.word	0x1fff8b10
    8424:	00008444 	.word	0x00008444
    8428:	00008474 	.word	0x00008474
    842c:	1fff8800 	.word	0x1fff8800
    8430:	00000000 	.word	0x00000000
    8434:	00000310 	.word	0x00000310

00008438 <__ZERO_TABLE>:
    8438:	00000001 	.word	0x00000001
    843c:	1fff8b40 	.word	0x1fff8b40
    8440:	1fff8e30 	.word	0x1fff8e30
