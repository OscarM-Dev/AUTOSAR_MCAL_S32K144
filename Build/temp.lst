
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	000017e7 	.word	0x000017e7
  10:	000017e9 	.word	0x000017e9
  14:	000017eb 	.word	0x000017eb
  18:	000017ed 	.word	0x000017ed
	...
  2c:	000017ef 	.word	0x000017ef
  30:	000017f1 	.word	0x000017f1
  34:	00000000 	.word	0x00000000
  38:	000017f3 	.word	0x000017f3
  3c:	000017f5 	.word	0x000017f5
  40:	000017f7 	.word	0x000017f7
  44:	000017f7 	.word	0x000017f7
  48:	000017f7 	.word	0x000017f7
  4c:	000017f7 	.word	0x000017f7
  50:	000017f7 	.word	0x000017f7
  54:	000017f7 	.word	0x000017f7
  58:	000017f7 	.word	0x000017f7
  5c:	000017f7 	.word	0x000017f7
  60:	000017f7 	.word	0x000017f7
  64:	000017f7 	.word	0x000017f7
  68:	000017f7 	.word	0x000017f7
  6c:	000017f7 	.word	0x000017f7
  70:	000017f7 	.word	0x000017f7
  74:	000017f7 	.word	0x000017f7
  78:	000017f7 	.word	0x000017f7
  7c:	000017f7 	.word	0x000017f7
  80:	000017f7 	.word	0x000017f7
  84:	000017f7 	.word	0x000017f7
  88:	000017f7 	.word	0x000017f7
  8c:	000017f7 	.word	0x000017f7
  90:	000017f7 	.word	0x000017f7
  94:	000017f7 	.word	0x000017f7
  98:	000017f7 	.word	0x000017f7
  9c:	000017f7 	.word	0x000017f7
  a0:	000017f7 	.word	0x000017f7
  a4:	000017f7 	.word	0x000017f7
  a8:	000017f7 	.word	0x000017f7
  ac:	000017f7 	.word	0x000017f7
  b0:	000017f7 	.word	0x000017f7
  b4:	000017f7 	.word	0x000017f7
  b8:	000017f7 	.word	0x000017f7
  bc:	000017f7 	.word	0x000017f7
  c0:	000017f7 	.word	0x000017f7
  c4:	000017f7 	.word	0x000017f7
  c8:	000017f7 	.word	0x000017f7
  cc:	000017f7 	.word	0x000017f7
  d0:	000017f7 	.word	0x000017f7
  d4:	000017f7 	.word	0x000017f7
  d8:	000017f7 	.word	0x000017f7
  dc:	000017f7 	.word	0x000017f7
  e0:	000017f7 	.word	0x000017f7
  e4:	000017f7 	.word	0x000017f7
  e8:	000017f7 	.word	0x000017f7
  ec:	000017f7 	.word	0x000017f7
  f0:	000017f7 	.word	0x000017f7
  f4:	000017f7 	.word	0x000017f7
  f8:	000017f7 	.word	0x000017f7
  fc:	000017f7 	.word	0x000017f7
 100:	000017f7 	.word	0x000017f7
 104:	000017f7 	.word	0x000017f7
 108:	000017f7 	.word	0x000017f7
 10c:	000017f7 	.word	0x000017f7
 110:	000017f7 	.word	0x000017f7
 114:	000017f7 	.word	0x000017f7
 118:	000017f7 	.word	0x000017f7
 11c:	000017f7 	.word	0x000017f7
 120:	000017f7 	.word	0x000017f7
 124:	000017f7 	.word	0x000017f7
 128:	000017f7 	.word	0x000017f7
 12c:	000017f7 	.word	0x000017f7
 130:	000017f7 	.word	0x000017f7
 134:	000017f7 	.word	0x000017f7
 138:	000017f7 	.word	0x000017f7
 13c:	000017f7 	.word	0x000017f7
 140:	000017f7 	.word	0x000017f7
 144:	000017f7 	.word	0x000017f7
 148:	000017f7 	.word	0x000017f7
 14c:	000017f7 	.word	0x000017f7
 150:	000017f7 	.word	0x000017f7
 154:	000017f7 	.word	0x000017f7
 158:	000017f7 	.word	0x000017f7
 15c:	000017f7 	.word	0x000017f7
 160:	000017f7 	.word	0x000017f7
 164:	000017f7 	.word	0x000017f7
 168:	000017f7 	.word	0x000017f7
 16c:	000017f7 	.word	0x000017f7
 170:	000017f7 	.word	0x000017f7
 174:	000017f7 	.word	0x000017f7
 178:	000017f7 	.word	0x000017f7
 17c:	000017f7 	.word	0x000017f7
 180:	000017f7 	.word	0x000017f7
 184:	000017f7 	.word	0x000017f7
 188:	000017f7 	.word	0x000017f7
 18c:	000017f7 	.word	0x000017f7
 190:	000017f7 	.word	0x000017f7
 194:	000017f7 	.word	0x000017f7
 198:	000017f7 	.word	0x000017f7
 19c:	000017f7 	.word	0x000017f7
 1a0:	000017f7 	.word	0x000017f7
 1a4:	000017f7 	.word	0x000017f7
 1a8:	000017f7 	.word	0x000017f7
 1ac:	000017f7 	.word	0x000017f7
 1b0:	000017f7 	.word	0x000017f7
 1b4:	000017f7 	.word	0x000017f7
 1b8:	000017f7 	.word	0x000017f7
 1bc:	000017f7 	.word	0x000017f7
 1c0:	000017f7 	.word	0x000017f7
 1c4:	000017f7 	.word	0x000017f7
 1c8:	000017f7 	.word	0x000017f7
 1cc:	000017f7 	.word	0x000017f7
 1d0:	000017f7 	.word	0x000017f7
 1d4:	000017f7 	.word	0x000017f7
 1d8:	000017f7 	.word	0x000017f7
 1dc:	000017f7 	.word	0x000017f7
 1e0:	000017f7 	.word	0x000017f7
 1e4:	000017f7 	.word	0x000017f7
 1e8:	000017f7 	.word	0x000017f7
 1ec:	000017f7 	.word	0x000017f7
 1f0:	000017f7 	.word	0x000017f7
 1f4:	000017f7 	.word	0x000017f7
 1f8:	000017f7 	.word	0x000017f7
 1fc:	000017f7 	.word	0x000017f7
 200:	000017f7 	.word	0x000017f7
 204:	000017f7 	.word	0x000017f7
 208:	000017f7 	.word	0x000017f7
 20c:	000017f7 	.word	0x000017f7
 210:	000017f7 	.word	0x000017f7
 214:	000017f7 	.word	0x000017f7
 218:	000017f7 	.word	0x000017f7
 21c:	000017f7 	.word	0x000017f7
 220:	000017f7 	.word	0x000017f7
 224:	000017f7 	.word	0x000017f7
 228:	000017f7 	.word	0x000017f7
 22c:	000017f7 	.word	0x000017f7
 230:	000017f7 	.word	0x000017f7
 234:	000017f7 	.word	0x000017f7
 238:	000017f7 	.word	0x000017f7
 23c:	000017f7 	.word	0x000017f7
 240:	000017f7 	.word	0x000017f7
 244:	000017f7 	.word	0x000017f7
 248:	000017f7 	.word	0x000017f7
 24c:	000017f7 	.word	0x000017f7
 250:	000017f7 	.word	0x000017f7
 254:	000017f7 	.word	0x000017f7
 258:	000017f7 	.word	0x000017f7
 25c:	000017f7 	.word	0x000017f7
 260:	000017f7 	.word	0x000017f7
 264:	000017f7 	.word	0x000017f7
 268:	000017f7 	.word	0x000017f7
 26c:	000017f7 	.word	0x000017f7
 270:	000017f7 	.word	0x000017f7
 274:	000017f7 	.word	0x000017f7
 278:	000017f7 	.word	0x000017f7
 27c:	000017f7 	.word	0x000017f7
 280:	000017f7 	.word	0x000017f7
 284:	000017f7 	.word	0x000017f7
 288:	000017f7 	.word	0x000017f7
 28c:	000017f7 	.word	0x000017f7
 290:	000017f7 	.word	0x000017f7
 294:	000017f7 	.word	0x000017f7
 298:	000017f7 	.word	0x000017f7
 29c:	000017f7 	.word	0x000017f7
 2a0:	000017f7 	.word	0x000017f7
 2a4:	000017f7 	.word	0x000017f7
 2a8:	000017f7 	.word	0x000017f7
 2ac:	000017f7 	.word	0x000017f7
 2b0:	000017f7 	.word	0x000017f7
 2b4:	000017f7 	.word	0x000017f7
 2b8:	000017f7 	.word	0x000017f7
 2bc:	000017f7 	.word	0x000017f7
 2c0:	000017f7 	.word	0x000017f7
 2c4:	000017f7 	.word	0x000017f7
 2c8:	000017f7 	.word	0x000017f7
 2cc:	000017f7 	.word	0x000017f7
 2d0:	000017f7 	.word	0x000017f7
 2d4:	000017f7 	.word	0x000017f7
 2d8:	000017f7 	.word	0x000017f7
 2dc:	000017f7 	.word	0x000017f7
 2e0:	000017f7 	.word	0x000017f7
 2e4:	000017f7 	.word	0x000017f7
 2e8:	000017f7 	.word	0x000017f7
 2ec:	000017f7 	.word	0x000017f7
 2f0:	000017f7 	.word	0x000017f7
 2f4:	000017f7 	.word	0x000017f7
 2f8:	000017f7 	.word	0x000017f7
 2fc:	000017f7 	.word	0x000017f7
 300:	000017f7 	.word	0x000017f7
 304:	000017f7 	.word	0x000017f7
 308:	000017f7 	.word	0x000017f7
 30c:	000017f7 	.word	0x000017f7

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f001 f8e7 	bl	1654 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 f9a6 	bl	17dc <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff97ec 	.word	0x1fff97ec

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f001 f8f1 	bl	1780 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();    //MCU configuration.
     8b2:	f001 fcbd 	bl	2230 <EcuM_Init>
    IoHwAb_Init0( NULL_PTR );  //Initializing IO hardware abstractions.
     8b6:	2000      	movs	r0, #0
     8b8:	f000 feb4 	bl	1624 <IoHwAb_Init0>
    SEGGER_RTT_Init();  //Initializing RTT library.
     8bc:	f001 f92e 	bl	1b1c <SEGGER_RTT_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure for scheduler.
     8c0:	4802      	ldr	r0, [pc, #8]	; (8cc <main+0x1c>)
     8c2:	f000 f8eb 	bl	a9c <Scheduler_Init>

    while( 1u ) {
        Scheduler_MainFunction();
     8c6:	f000 f9a7 	bl	c18 <Scheduler_MainFunction>
     8ca:	e7fc      	b.n	8c6 <main+0x16>
     8cc:	1fff9780 	.word	0x1fff9780

000008d0 <DevAssert>:
    #error "Unsupported architecture!"
#endif

/* Implement default assert macro */
static inline void DevAssert(volatile boolean x)
{
     8d0:	b082      	sub	sp, #8
     8d2:	4603      	mov	r3, r0
     8d4:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     8d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     8dc:	b2db      	uxtb	r3, r3
     8de:	2b00      	cmp	r3, #0
     8e0:	d101      	bne.n	8e6 <DevAssert+0x16>
     8e2:	be00      	bkpt	0x0000
     8e4:	e7fd      	b.n	8e2 <DevAssert+0x12>
}
     8e6:	bf00      	nop
     8e8:	b002      	add	sp, #8
     8ea:	4770      	bx	lr

000008ec <DevAssert>:
{
     8ec:	b082      	sub	sp, #8
     8ee:	4603      	mov	r3, r0
     8f0:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     8f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     8f8:	b2db      	uxtb	r3, r3
     8fa:	2b00      	cmp	r3, #0
     8fc:	d101      	bne.n	902 <DevAssert+0x16>
     8fe:	be00      	bkpt	0x0000
     900:	e7fd      	b.n	8fe <DevAssert+0x12>
}
     902:	bf00      	nop
     904:	b002      	add	sp, #8
     906:	4770      	bx	lr

00000908 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     908:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     90a:	f3ef 8310 	mrs	r3, PRIMASK
     90e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     910:	4623      	mov	r3, r4
}
     912:	4618      	mov	r0, r3
     914:	f85d 4b04 	ldr.w	r4, [sp], #4
     918:	4770      	bx	lr

0000091a <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     91a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     91c:	f3ef 8310 	mrs	r3, PRIMASK
     920:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     922:	4623      	mov	r3, r4
}
     924:	4618      	mov	r0, r3
     926:	f85d 4b04 	ldr.w	r4, [sp], #4
     92a:	4770      	bx	lr

0000092c <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     92c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     92e:	f3ef 8310 	mrs	r3, PRIMASK
     932:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     934:	4623      	mov	r3, r4
}
     936:	4618      	mov	r0, r3
     938:	f85d 4b04 	ldr.w	r4, [sp], #4
     93c:	4770      	bx	lr

0000093e <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     93e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     940:	f3ef 8310 	mrs	r3, PRIMASK
     944:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     946:	4623      	mov	r3, r4
}
     948:	4618      	mov	r0, r3
     94a:	f85d 4b04 	ldr.w	r4, [sp], #4
     94e:	4770      	bx	lr

00000950 <Pwm_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Pwm_schm_read_msr(void)
{
     950:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     952:	f3ef 8310 	mrs	r3, PRIMASK
     956:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     958:	4623      	mov	r3, r4
}
     95a:	4618      	mov	r0, r3
     95c:	f85d 4b04 	ldr.w	r4, [sp], #4
     960:	4770      	bx	lr

00000962 <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     962:	b082      	sub	sp, #8
     964:	9001      	str	r0, [sp, #4]
     966:	460b      	mov	r3, r1
     968:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     96c:	9b01      	ldr	r3, [sp, #4]
     96e:	681b      	ldr	r3, [r3, #0]
     970:	f89d 2003 	ldrb.w	r2, [sp, #3]
     974:	2101      	movs	r1, #1
     976:	fa01 f202 	lsl.w	r2, r1, r2
     97a:	431a      	orrs	r2, r3
     97c:	9b01      	ldr	r3, [sp, #4]
     97e:	601a      	str	r2, [r3, #0]
}
     980:	bf00      	nop
     982:	b002      	add	sp, #8
     984:	4770      	bx	lr

00000986 <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     986:	b082      	sub	sp, #8
     988:	9001      	str	r0, [sp, #4]
     98a:	460b      	mov	r3, r1
     98c:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     990:	9b01      	ldr	r3, [sp, #4]
     992:	681b      	ldr	r3, [r3, #0]
     994:	f89d 2003 	ldrb.w	r2, [sp, #3]
     998:	2101      	movs	r1, #1
     99a:	fa01 f202 	lsl.w	r2, r1, r2
     99e:	43d2      	mvns	r2, r2
     9a0:	401a      	ands	r2, r3
     9a2:	9b01      	ldr	r3, [sp, #4]
     9a4:	601a      	str	r2, [r3, #0]
}
     9a6:	bf00      	nop
     9a8:	b002      	add	sp, #8
     9aa:	4770      	bx	lr

000009ac <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     9ac:	b084      	sub	sp, #16
     9ae:	9001      	str	r0, [sp, #4]
     9b0:	460b      	mov	r3, r1
     9b2:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     9b6:	2300      	movs	r3, #0
     9b8:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     9bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
     9c0:	2201      	movs	r2, #1
     9c2:	fa02 f303 	lsl.w	r3, r2, r3
     9c6:	461a      	mov	r2, r3
     9c8:	9b01      	ldr	r3, [sp, #4]
     9ca:	4013      	ands	r3, r2
     9cc:	2b00      	cmp	r3, #0
     9ce:	bf14      	ite	ne
     9d0:	2301      	movne	r3, #1
     9d2:	2300      	moveq	r3, #0
     9d4:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     9d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     9dc:	4618      	mov	r0, r3
     9de:	b004      	add	sp, #16
     9e0:	4770      	bx	lr

000009e2 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     9e2:	b082      	sub	sp, #8
     9e4:	9001      	str	r0, [sp, #4]
     9e6:	460b      	mov	r3, r1
     9e8:	f88d 3003 	strb.w	r3, [sp, #3]
     9ec:	4613      	mov	r3, r2
     9ee:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     9f2:	f89d 3002 	ldrb.w	r3, [sp, #2]
     9f6:	2b00      	cmp	r3, #0
     9f8:	d00a      	beq.n	a10 <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     9fa:	9b01      	ldr	r3, [sp, #4]
     9fc:	681b      	ldr	r3, [r3, #0]
     9fe:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a02:	2101      	movs	r1, #1
     a04:	fa01 f202 	lsl.w	r2, r1, r2
     a08:	431a      	orrs	r2, r3
     a0a:	9b01      	ldr	r3, [sp, #4]
     a0c:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     a0e:	e00a      	b.n	a26 <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     a10:	9b01      	ldr	r3, [sp, #4]
     a12:	681b      	ldr	r3, [r3, #0]
     a14:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a18:	2101      	movs	r1, #1
     a1a:	fa01 f202 	lsl.w	r2, r1, r2
     a1e:	43d2      	mvns	r2, r2
     a20:	401a      	ands	r2, r3
     a22:	9b01      	ldr	r3, [sp, #4]
     a24:	601a      	str	r2, [r3, #0]
}
     a26:	bf00      	nop
     a28:	b002      	add	sp, #8
     a2a:	4770      	bx	lr

00000a2c <Scheduler_InitQueue>:
/**
 * @brief This function initialices the queue buffer control members.
 * 
 * @param SchedulerPtr Ptr to control struct instance, it allows the init of the members.
 */
void Scheduler_InitQueue( Scheduler_CtrlType *SchedulerPtr ) {
     a2c:	b500      	push	{lr}
     a2e:	b085      	sub	sp, #20
     a30:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
     a32:	2300      	movs	r3, #0
     a34:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a38:	2300      	movs	r3, #0
     a3a:	f88d 300f 	strb.w	r3, [sp, #15]
     a3e:	e023      	b.n	a88 <Scheduler_InitQueue+0x5c>
        SchedulerPtr->QueueHeads[i] = 0;
     a40:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a44:	9b01      	ldr	r3, [sp, #4]
     a46:	3208      	adds	r2, #8
     a48:	2100      	movs	r1, #0
     a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->QueueTails[i] = 0;
     a4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a52:	9a01      	ldr	r2, [sp, #4]
     a54:	3308      	adds	r3, #8
     a56:	009b      	lsls	r3, r3, #2
     a58:	4413      	add	r3, r2
     a5a:	2200      	movs	r2, #0
     a5c:	605a      	str	r2, [r3, #4]
        Bfx_ClrBit_u32u8( &SchedulerPtr->QueueFulls, i );
     a5e:	9b01      	ldr	r3, [sp, #4]
     a60:	332c      	adds	r3, #44	; 0x2c
     a62:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a66:	4611      	mov	r1, r2
     a68:	4618      	mov	r0, r3
     a6a:	f7ff ff8c 	bl	986 <Bfx_ClrBit_u32u8>
        Bfx_SetBit_u32u8( &SchedulerPtr->QueueEmpties, i );
     a6e:	9b01      	ldr	r3, [sp, #4]
     a70:	3328      	adds	r3, #40	; 0x28
     a72:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a76:	4611      	mov	r1, r2
     a78:	4618      	mov	r0, r3
     a7a:	f7ff ff72 	bl	962 <Bfx_SetBit_u32u8>
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a82:	3301      	adds	r3, #1
     a84:	f88d 300f 	strb.w	r3, [sp, #15]
     a88:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a8c:	2b00      	cmp	r3, #0
     a8e:	d0d7      	beq.n	a40 <Scheduler_InitQueue+0x14>
    }
}
     a90:	bf00      	nop
     a92:	bf00      	nop
     a94:	b005      	add	sp, #20
     a96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000a9c <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     a9c:	b500      	push	{lr}
     a9e:	b085      	sub	sp, #20
     aa0:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = TRUE;
     aa2:	2301      	movs	r3, #1
     aa4:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 i = 0;
     aa8:	2300      	movs	r3, #0
     aaa:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing tasks related parameters.
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     aae:	2300      	movs	r3, #0
     ab0:	f88d 300f 	strb.w	r3, [sp, #15]
     ab4:	e033      	b.n	b1e <Scheduler_Init+0x82>
        SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     ab6:	4b44      	ldr	r3, [pc, #272]	; (bc8 <Scheduler_Init+0x12c>)
     ab8:	681b      	ldr	r3, [r3, #0]
     aba:	6899      	ldr	r1, [r3, #8]
     abc:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ac0:	4613      	mov	r3, r2
     ac2:	005b      	lsls	r3, r3, #1
     ac4:	4413      	add	r3, r2
     ac6:	009b      	lsls	r3, r3, #2
     ac8:	440b      	add	r3, r1
     aca:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ace:	6819      	ldr	r1, [r3, #0]
     ad0:	9b01      	ldr	r3, [sp, #4]
     ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     ad6:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ada:	9b01      	ldr	r3, [sp, #4]
     adc:	3202      	adds	r2, #2
     ade:	2100      	movs	r1, #0
     ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     ae4:	9b01      	ldr	r3, [sp, #4]
     ae6:	f103 0018 	add.w	r0, r3, #24
     aea:	4b37      	ldr	r3, [pc, #220]	; (bc8 <Scheduler_Init+0x12c>)
     aec:	681b      	ldr	r3, [r3, #0]
     aee:	6899      	ldr	r1, [r3, #8]
     af0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     af4:	4613      	mov	r3, r2
     af6:	005b      	lsls	r3, r3, #1
     af8:	4413      	add	r3, r2
     afa:	009b      	lsls	r3, r3, #2
     afc:	440b      	add	r3, r1
     afe:	791b      	ldrb	r3, [r3, #4]
     b00:	2b00      	cmp	r3, #0
     b02:	bf14      	ite	ne
     b04:	2301      	movne	r3, #1
     b06:	2300      	moveq	r3, #0
     b08:	b2da      	uxtb	r2, r3
     b0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b0e:	4619      	mov	r1, r3
     b10:	f7ff ff67 	bl	9e2 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     b14:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b18:	3301      	adds	r3, #1
     b1a:	f88d 300f 	strb.w	r3, [sp, #15]
     b1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b22:	2b01      	cmp	r3, #1
     b24:	d9c7      	bls.n	ab6 <Scheduler_Init+0x1a>
    }

    //Initializing timers related parameters.
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     b26:	2300      	movs	r3, #0
     b28:	f88d 300f 	strb.w	r3, [sp, #15]
     b2c:	e03f      	b.n	bae <Scheduler_Init+0x112>
        SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     b2e:	4b26      	ldr	r3, [pc, #152]	; (bc8 <Scheduler_Init+0x12c>)
     b30:	681b      	ldr	r3, [r3, #0]
     b32:	6919      	ldr	r1, [r3, #16]
     b34:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b38:	4613      	mov	r3, r2
     b3a:	005b      	lsls	r3, r3, #1
     b3c:	4413      	add	r3, r2
     b3e:	009b      	lsls	r3, r3, #2
     b40:	440b      	add	r3, r1
     b42:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b46:	6819      	ldr	r1, [r3, #0]
     b48:	9b01      	ldr	r3, [sp, #4]
     b4a:	3204      	adds	r2, #4
     b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     b50:	4b1d      	ldr	r3, [pc, #116]	; (bc8 <Scheduler_Init+0x12c>)
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	6919      	ldr	r1, [r3, #16]
     b56:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b5a:	4613      	mov	r3, r2
     b5c:	005b      	lsls	r3, r3, #1
     b5e:	4413      	add	r3, r2
     b60:	009b      	lsls	r3, r3, #2
     b62:	18ca      	adds	r2, r1, r3
     b64:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b68:	6812      	ldr	r2, [r2, #0]
     b6a:	9901      	ldr	r1, [sp, #4]
     b6c:	3304      	adds	r3, #4
     b6e:	009b      	lsls	r3, r3, #2
     b70:	440b      	add	r3, r1
     b72:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     b74:	9b01      	ldr	r3, [sp, #4]
     b76:	f103 001c 	add.w	r0, r3, #28
     b7a:	4b13      	ldr	r3, [pc, #76]	; (bc8 <Scheduler_Init+0x12c>)
     b7c:	681b      	ldr	r3, [r3, #0]
     b7e:	6919      	ldr	r1, [r3, #16]
     b80:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b84:	4613      	mov	r3, r2
     b86:	005b      	lsls	r3, r3, #1
     b88:	4413      	add	r3, r2
     b8a:	009b      	lsls	r3, r3, #2
     b8c:	440b      	add	r3, r1
     b8e:	791b      	ldrb	r3, [r3, #4]
     b90:	2b00      	cmp	r3, #0
     b92:	bf14      	ite	ne
     b94:	2301      	movne	r3, #1
     b96:	2300      	moveq	r3, #0
     b98:	b2da      	uxtb	r2, r3
     b9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b9e:	4619      	mov	r1, r3
     ba0:	f7ff ff1f 	bl	9e2 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     ba4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ba8:	3301      	adds	r3, #1
     baa:	f88d 300f 	strb.w	r3, [sp, #15]
     bae:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d0bb      	beq.n	b2e <Scheduler_Init+0x92>
    } 

    Scheduler_InitQueue( SchedulerPtr ); //Initializing queues related parameters.   
     bb6:	9801      	ldr	r0, [sp, #4]
     bb8:	f7ff ff38 	bl	a2c <Scheduler_InitQueue>

    return status;
     bbc:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     bc0:	4618      	mov	r0, r3
     bc2:	b005      	add	sp, #20
     bc4:	f85d fb04 	ldr.w	pc, [sp], #4
     bc8:	1fff8b54 	.word	0x1fff8b54

00000bcc <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     bcc:	b084      	sub	sp, #16
     bce:	4603      	mov	r3, r0
     bd0:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     bd4:	2300      	movs	r3, #0
     bd6:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     bd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bdc:	2b00      	cmp	r3, #0
     bde:	d011      	beq.n	c04 <Scheduler_GetTimer+0x38>
     be0:	4b0b      	ldr	r3, [pc, #44]	; (c10 <Scheduler_GetTimer+0x44>)
     be2:	681b      	ldr	r3, [r3, #0]
     be4:	7b1b      	ldrb	r3, [r3, #12]
     be6:	f89d 2007 	ldrb.w	r2, [sp, #7]
     bea:	429a      	cmp	r2, r3
     bec:	d80a      	bhi.n	c04 <Scheduler_GetTimer+0x38>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ];
     bee:	4b09      	ldr	r3, [pc, #36]	; (c14 <Scheduler_GetTimer+0x48>)
     bf0:	681a      	ldr	r2, [r3, #0]
     bf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bf6:	3b01      	subs	r3, #1
     bf8:	3304      	adds	r3, #4
     bfa:	009b      	lsls	r3, r3, #2
     bfc:	4413      	add	r3, r2
     bfe:	685b      	ldr	r3, [r3, #4]
     c00:	9303      	str	r3, [sp, #12]
     c02:	e001      	b.n	c08 <Scheduler_GetTimer+0x3c>
    }

    else {
        counter_value = FALSE;  //invalid ID.
     c04:	2300      	movs	r3, #0
     c06:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     c08:	9b03      	ldr	r3, [sp, #12]
}
     c0a:	4618      	mov	r0, r3
     c0c:	b004      	add	sp, #16
     c0e:	4770      	bx	lr
     c10:	1fff8b54 	.word	0x1fff8b54
     c14:	1fff8b58 	.word	0x1fff8b58

00000c18 <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     c18:	b500      	push	{lr}
     c1a:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     c1c:	4b5e      	ldr	r3, [pc, #376]	; (d98 <Scheduler_MainFunction+0x180>)
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	681b      	ldr	r3, [r3, #0]
     c22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     c26:	fb02 f303 	mul.w	r3, r2, r3
     c2a:	2101      	movs	r1, #1
     c2c:	4618      	mov	r0, r3
     c2e:	f001 ff0b 	bl	2a48 <OsIf_MicrosToTicks>
     c32:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     c34:	2001      	movs	r0, #1
     c36:	f001 febb 	bl	29b0 <OsIf_GetCounter>
     c3a:	4603      	mov	r3, r0
     c3c:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     c3e:	2300      	movs	r3, #0
     c40:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     c42:	2300      	movs	r3, #0
     c44:	f88d 300b 	strb.w	r3, [sp, #11]

    while( 1 ) {    //tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     c48:	466b      	mov	r3, sp
     c4a:	2101      	movs	r1, #1
     c4c:	4618      	mov	r0, r3
     c4e:	f001 fec8 	bl	29e2 <OsIf_GetElapsed>
     c52:	4602      	mov	r2, r0
     c54:	9b03      	ldr	r3, [sp, #12]
     c56:	4413      	add	r3, r2
     c58:	9303      	str	r3, [sp, #12]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
     c5a:	9a03      	ldr	r2, [sp, #12]
     c5c:	9b01      	ldr	r3, [sp, #4]
     c5e:	429a      	cmp	r2, r3
     c60:	d3f2      	bcc.n	c48 <Scheduler_MainFunction+0x30>
            
            //Executing timers
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     c62:	2300      	movs	r3, #0
     c64:	f88d 300b 	strb.w	r3, [sp, #11]
     c68:	e03a      	b.n	ce0 <Scheduler_MainFunction+0xc8>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     c6a:	4b4c      	ldr	r3, [pc, #304]	; (d9c <Scheduler_MainFunction+0x184>)
     c6c:	681b      	ldr	r3, [r3, #0]
     c6e:	69db      	ldr	r3, [r3, #28]
     c70:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c74:	4611      	mov	r1, r2
     c76:	4618      	mov	r0, r3
     c78:	f7ff fe98 	bl	9ac <Bfx_GetBit_u32u8_u8>
     c7c:	4603      	mov	r3, r0
     c7e:	2b00      	cmp	r3, #0
     c80:	d029      	beq.n	cd6 <Scheduler_MainFunction+0xbe>
                    SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     c82:	4b46      	ldr	r3, [pc, #280]	; (d9c <Scheduler_MainFunction+0x184>)
     c84:	681a      	ldr	r2, [r3, #0]
     c86:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c8a:	3304      	adds	r3, #4
     c8c:	009b      	lsls	r3, r3, #2
     c8e:	4413      	add	r3, r2
     c90:	6858      	ldr	r0, [r3, #4]
     c92:	4b41      	ldr	r3, [pc, #260]	; (d98 <Scheduler_MainFunction+0x180>)
     c94:	681b      	ldr	r3, [r3, #0]
     c96:	681a      	ldr	r2, [r3, #0]
     c98:	4b40      	ldr	r3, [pc, #256]	; (d9c <Scheduler_MainFunction+0x184>)
     c9a:	6819      	ldr	r1, [r3, #0]
     c9c:	f89d 300b 	ldrb.w	r3, [sp, #11]
     ca0:	1a82      	subs	r2, r0, r2
     ca2:	3304      	adds	r3, #4
     ca4:	009b      	lsls	r3, r3, #2
     ca6:	440b      	add	r3, r1
     ca8:	605a      	str	r2, [r3, #4]
                    
                    //Verifying execution of callback i
                    if ( Scheduler_GetTimer( i + 1 ) == 0 ) {   //timeout achieved.
     caa:	f89d 300b 	ldrb.w	r3, [sp, #11]
     cae:	3301      	adds	r3, #1
     cb0:	b2db      	uxtb	r3, r3
     cb2:	4618      	mov	r0, r3
     cb4:	f7ff ff8a 	bl	bcc <Scheduler_GetTimer>
     cb8:	4603      	mov	r3, r0
     cba:	2b00      	cmp	r3, #0
     cbc:	d10b      	bne.n	cd6 <Scheduler_MainFunction+0xbe>
                        SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     cbe:	4b36      	ldr	r3, [pc, #216]	; (d98 <Scheduler_MainFunction+0x180>)
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	6919      	ldr	r1, [r3, #16]
     cc4:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cc8:	4613      	mov	r3, r2
     cca:	005b      	lsls	r3, r3, #1
     ccc:	4413      	add	r3, r2
     cce:	009b      	lsls	r3, r3, #2
     cd0:	440b      	add	r3, r1
     cd2:	689b      	ldr	r3, [r3, #8]
     cd4:	4798      	blx	r3
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     cd6:	f89d 300b 	ldrb.w	r3, [sp, #11]
     cda:	3301      	adds	r3, #1
     cdc:	f88d 300b 	strb.w	r3, [sp, #11]
     ce0:	4b2d      	ldr	r3, [pc, #180]	; (d98 <Scheduler_MainFunction+0x180>)
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	7b1b      	ldrb	r3, [r3, #12]
     ce6:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cea:	429a      	cmp	r2, r3
     cec:	d3bd      	bcc.n	c6a <Scheduler_MainFunction+0x52>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     cee:	2300      	movs	r3, #0
     cf0:	f88d 300b 	strb.w	r3, [sp, #11]
     cf4:	e045      	b.n	d82 <Scheduler_MainFunction+0x16a>
                //Verifying execution of task i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     cf6:	4b29      	ldr	r3, [pc, #164]	; (d9c <Scheduler_MainFunction+0x184>)
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	699b      	ldr	r3, [r3, #24]
     cfc:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d00:	4611      	mov	r1, r2
     d02:	4618      	mov	r0, r3
     d04:	f7ff fe52 	bl	9ac <Bfx_GetBit_u32u8_u8>
     d08:	4603      	mov	r3, r0
     d0a:	2b00      	cmp	r3, #0
     d0c:	d034      	beq.n	d78 <Scheduler_MainFunction+0x160>
                    SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     d0e:	4b23      	ldr	r3, [pc, #140]	; (d9c <Scheduler_MainFunction+0x184>)
     d10:	681b      	ldr	r3, [r3, #0]
     d12:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d16:	3202      	adds	r2, #2
     d18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     d1c:	4b1e      	ldr	r3, [pc, #120]	; (d98 <Scheduler_MainFunction+0x180>)
     d1e:	681b      	ldr	r3, [r3, #0]
     d20:	6819      	ldr	r1, [r3, #0]
     d22:	4b1e      	ldr	r3, [pc, #120]	; (d9c <Scheduler_MainFunction+0x184>)
     d24:	681b      	ldr	r3, [r3, #0]
     d26:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d2a:	4401      	add	r1, r0
     d2c:	3202      	adds	r2, #2
     d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                    //Verifying the execution of callback i.
                    if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     d32:	4b1a      	ldr	r3, [pc, #104]	; (d9c <Scheduler_MainFunction+0x184>)
     d34:	681b      	ldr	r3, [r3, #0]
     d36:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d3a:	3202      	adds	r2, #2
     d3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     d40:	4b16      	ldr	r3, [pc, #88]	; (d9c <Scheduler_MainFunction+0x184>)
     d42:	681b      	ldr	r3, [r3, #0]
     d44:	f89d 100b 	ldrb.w	r1, [sp, #11]
     d48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     d4c:	429a      	cmp	r2, r3
     d4e:	d313      	bcc.n	d78 <Scheduler_MainFunction+0x160>
                        SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     d50:	4b11      	ldr	r3, [pc, #68]	; (d98 <Scheduler_MainFunction+0x180>)
     d52:	681b      	ldr	r3, [r3, #0]
     d54:	6899      	ldr	r1, [r3, #8]
     d56:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d5a:	4613      	mov	r3, r2
     d5c:	005b      	lsls	r3, r3, #1
     d5e:	4413      	add	r3, r2
     d60:	009b      	lsls	r3, r3, #2
     d62:	440b      	add	r3, r1
     d64:	689b      	ldr	r3, [r3, #8]
     d66:	4798      	blx	r3
                        SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     d68:	4b0c      	ldr	r3, [pc, #48]	; (d9c <Scheduler_MainFunction+0x184>)
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d70:	3202      	adds	r2, #2
     d72:	2100      	movs	r1, #0
     d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     d78:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d7c:	3301      	adds	r3, #1
     d7e:	f88d 300b 	strb.w	r3, [sp, #11]
     d82:	4b05      	ldr	r3, [pc, #20]	; (d98 <Scheduler_MainFunction+0x180>)
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	791b      	ldrb	r3, [r3, #4]
     d88:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d8c:	429a      	cmp	r2, r3
     d8e:	d3b2      	bcc.n	cf6 <Scheduler_MainFunction+0xde>
                    }
                }
            }

            elapsed_time = 0;   //Reset time follow up for tick.
     d90:	2300      	movs	r3, #0
     d92:	9303      	str	r3, [sp, #12]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     d94:	e758      	b.n	c48 <Scheduler_MainFunction+0x30>
     d96:	bf00      	nop
     d98:	1fff8b54 	.word	0x1fff8b54
     d9c:	1fff8b58 	.word	0x1fff8b58

00000da0 <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     da0:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     da2:	f000 f967 	bl	1074 <HwIoAb_Buttons_MainFunction>
}
     da6:	bf00      	nop
     da8:	bd08      	pop	{r3, pc}
	...

00000dac <Task2_callback>:
 * @note Button 1, Single click toggle only led0 (PTC8), double click prints ohms value of pot 1 main, hold click tone 1 for buzzer, release stops buzzer.
 * @note Button 2, Single click toggle only led1 (PTC9), double click prints ohms value of pot 2 main, hold click tone 2 for buzzer, release stops buzzer.
 * @note Button 3, Single click toggle only led2 (PTC10), double click prints ohms values of pot1 and pot 2 alter , hold click tone 3 for buzzer, release stops buzzer.
 * @note The tone of the buzzer is always the last activated.
 */
void Task2_callback( void ) {
     dac:	b500      	push	{lr}
     dae:	b083      	sub	sp, #12
    //local data.
    static boolean flags[3] = { TRUE, TRUE, TRUE }; //Flags for executing buzzer tones.
    uint8 i = 0;
     db0:	2300      	movs	r3, #0
     db2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 actual_event = 0; //Actual event of button.
     db6:	2300      	movs	r3, #0
     db8:	f88d 3006 	strb.w	r3, [sp, #6]


    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     dbc:	2300      	movs	r3, #0
     dbe:	f88d 3007 	strb.w	r3, [sp, #7]
     dc2:	e0e0      	b.n	f86 <Task2_callback+0x1da>
        actual_event =  HwIoAb_Buttons_GetEvent( i + 1 );   //Obtaining event of actual button.
     dc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dc8:	3301      	adds	r3, #1
     dca:	b2db      	uxtb	r3, r3
     dcc:	4618      	mov	r0, r3
     dce:	f000 f927 	bl	1020 <HwIoAb_Buttons_GetEvent>
     dd2:	4603      	mov	r3, r0
     dd4:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( actual_event != HWIOAB_BTN_EVENT_IDLE ) {  //A click was detected.
     dd8:	f89d 3006 	ldrb.w	r3, [sp, #6]
     ddc:	2b00      	cmp	r3, #0
     dde:	f000 80ca 	beq.w	f76 <Task2_callback+0x1ca>
            switch ( i ) {    
     de2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     de6:	2b02      	cmp	r3, #2
     de8:	f000 8084 	beq.w	ef4 <Task2_callback+0x148>
     dec:	2b02      	cmp	r3, #2
     dee:	f300 80c4 	bgt.w	f7a <Task2_callback+0x1ce>
     df2:	2b00      	cmp	r3, #0
     df4:	d002      	beq.n	dfc <Task2_callback+0x50>
     df6:	2b01      	cmp	r3, #1
     df8:	d03e      	beq.n	e78 <Task2_callback+0xcc>
                            break;
                        }
                break;

                default:    //Invalid button.
                break;
     dfa:	e0be      	b.n	f7a <Task2_callback+0x1ce>
                    switch ( actual_event ) {
     dfc:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e00:	3b01      	subs	r3, #1
     e02:	2b03      	cmp	r3, #3
     e04:	d834      	bhi.n	e70 <Task2_callback+0xc4>
     e06:	a201      	add	r2, pc, #4	; (adr r2, e0c <Task2_callback+0x60>)
     e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e0c:	00000e1d 	.word	0x00000e1d
     e10:	00000e25 	.word	0x00000e25
     e14:	00000e43 	.word	0x00000e43
     e18:	00000e61 	.word	0x00000e61
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     e1c:	2000      	movs	r0, #0
     e1e:	f000 fac1 	bl	13a4 <HwIoAb_Leds_TurnToggle>
                        break;
     e22:	e028      	b.n	e76 <Task2_callback+0xca>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     e24:	4b5e      	ldr	r3, [pc, #376]	; (fa0 <Task2_callback+0x1f4>)
     e26:	681b      	ldr	r3, [r3, #0]
     e28:	330a      	adds	r3, #10
     e2a:	4618      	mov	r0, r3
     e2c:	f000 fafe 	bl	142c <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     e30:	4b5b      	ldr	r3, [pc, #364]	; (fa0 <Task2_callback+0x1f4>)
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	895b      	ldrh	r3, [r3, #10]
     e36:	461a      	mov	r2, r3
     e38:	495a      	ldr	r1, [pc, #360]	; (fa4 <Task2_callback+0x1f8>)
     e3a:	2000      	movs	r0, #0
     e3c:	f001 f9d6 	bl	21ec <SEGGER_RTT_printf>
                        break;
     e40:	e019      	b.n	e76 <Task2_callback+0xca>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     e42:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e46:	4a58      	ldr	r2, [pc, #352]	; (fa8 <Task2_callback+0x1fc>)
     e48:	5cd3      	ldrb	r3, [r2, r3]
     e4a:	2b00      	cmp	r3, #0
     e4c:	d012      	beq.n	e74 <Task2_callback+0xc8>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_1 );
     e4e:	2000      	movs	r0, #0
     e50:	f000 fbb5 	bl	15be <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     e54:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e58:	4a53      	ldr	r2, [pc, #332]	; (fa8 <Task2_callback+0x1fc>)
     e5a:	2100      	movs	r1, #0
     e5c:	54d1      	strb	r1, [r2, r3]
                        break;
     e5e:	e009      	b.n	e74 <Task2_callback+0xc8>
                            HwIoAb_Buzzer_Stop();
     e60:	f000 fbda 	bl	1618 <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     e64:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e68:	4a4f      	ldr	r2, [pc, #316]	; (fa8 <Task2_callback+0x1fc>)
     e6a:	2101      	movs	r1, #1
     e6c:	54d1      	strb	r1, [r2, r3]
                        break;
     e6e:	e002      	b.n	e76 <Task2_callback+0xca>
                        break;
     e70:	bf00      	nop
     e72:	e083      	b.n	f7c <Task2_callback+0x1d0>
                        break;
     e74:	bf00      	nop
                break;
     e76:	e081      	b.n	f7c <Task2_callback+0x1d0>
                    switch ( actual_event ) {
     e78:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e7c:	3b01      	subs	r3, #1
     e7e:	2b03      	cmp	r3, #3
     e80:	d834      	bhi.n	eec <Task2_callback+0x140>
     e82:	a201      	add	r2, pc, #4	; (adr r2, e88 <Task2_callback+0xdc>)
     e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e88:	00000e99 	.word	0x00000e99
     e8c:	00000ea1 	.word	0x00000ea1
     e90:	00000ebf 	.word	0x00000ebf
     e94:	00000edd 	.word	0x00000edd
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     e98:	2001      	movs	r0, #1
     e9a:	f000 fa83 	bl	13a4 <HwIoAb_Leds_TurnToggle>
                        break;
     e9e:	e028      	b.n	ef2 <Task2_callback+0x146>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     ea0:	4b3f      	ldr	r3, [pc, #252]	; (fa0 <Task2_callback+0x1f4>)
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	330a      	adds	r3, #10
     ea6:	4618      	mov	r0, r3
     ea8:	f000 fac0 	bl	142c <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 2 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     eac:	4b3c      	ldr	r3, [pc, #240]	; (fa0 <Task2_callback+0x1f4>)
     eae:	681b      	ldr	r3, [r3, #0]
     eb0:	899b      	ldrh	r3, [r3, #12]
     eb2:	461a      	mov	r2, r3
     eb4:	493d      	ldr	r1, [pc, #244]	; (fac <Task2_callback+0x200>)
     eb6:	2000      	movs	r0, #0
     eb8:	f001 f998 	bl	21ec <SEGGER_RTT_printf>
                        break;
     ebc:	e019      	b.n	ef2 <Task2_callback+0x146>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     ebe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ec2:	4a39      	ldr	r2, [pc, #228]	; (fa8 <Task2_callback+0x1fc>)
     ec4:	5cd3      	ldrb	r3, [r2, r3]
     ec6:	2b00      	cmp	r3, #0
     ec8:	d012      	beq.n	ef0 <Task2_callback+0x144>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_2 );
     eca:	2001      	movs	r0, #1
     ecc:	f000 fb77 	bl	15be <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     ed0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ed4:	4a34      	ldr	r2, [pc, #208]	; (fa8 <Task2_callback+0x1fc>)
     ed6:	2100      	movs	r1, #0
     ed8:	54d1      	strb	r1, [r2, r3]
                        break;
     eda:	e009      	b.n	ef0 <Task2_callback+0x144>
                            HwIoAb_Buzzer_Stop();
     edc:	f000 fb9c 	bl	1618 <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ee4:	4a30      	ldr	r2, [pc, #192]	; (fa8 <Task2_callback+0x1fc>)
     ee6:	2101      	movs	r1, #1
     ee8:	54d1      	strb	r1, [r2, r3]
                        break;
     eea:	e002      	b.n	ef2 <Task2_callback+0x146>
                        break;
     eec:	bf00      	nop
     eee:	e045      	b.n	f7c <Task2_callback+0x1d0>
                        break;
     ef0:	bf00      	nop
                break;
     ef2:	e043      	b.n	f7c <Task2_callback+0x1d0>
                        switch ( actual_event ) {
     ef4:	f89d 3006 	ldrb.w	r3, [sp, #6]
     ef8:	3b01      	subs	r3, #1
     efa:	2b03      	cmp	r3, #3
     efc:	d837      	bhi.n	f6e <Task2_callback+0x1c2>
     efe:	a201      	add	r2, pc, #4	; (adr r2, f04 <Task2_callback+0x158>)
     f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f04:	00000f15 	.word	0x00000f15
     f08:	00000f1d 	.word	0x00000f1d
     f0c:	00000f41 	.word	0x00000f41
     f10:	00000f5f 	.word	0x00000f5f
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     f14:	2002      	movs	r0, #2
     f16:	f000 fa45 	bl	13a4 <HwIoAb_Leds_TurnToggle>
                            break;
     f1a:	e02b      	b.n	f74 <Task2_callback+0x1c8>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_RESULTS );
     f1c:	4b20      	ldr	r3, [pc, #128]	; (fa0 <Task2_callback+0x1f4>)
     f1e:	681b      	ldr	r3, [r3, #0]
     f20:	330e      	adds	r3, #14
     f22:	4618      	mov	r0, r3
     f24:	f000 fae4 	bl	14f0 <HwIoAb_Pots_GetAltValue>
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     f28:	4b1d      	ldr	r3, [pc, #116]	; (fa0 <Task2_callback+0x1f4>)
     f2a:	681b      	ldr	r3, [r3, #0]
     f2c:	89db      	ldrh	r3, [r3, #14]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     f2e:	461a      	mov	r2, r3
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     f30:	4b1b      	ldr	r3, [pc, #108]	; (fa0 <Task2_callback+0x1f4>)
     f32:	681b      	ldr	r3, [r3, #0]
     f34:	8a1b      	ldrh	r3, [r3, #16]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     f36:	491e      	ldr	r1, [pc, #120]	; (fb0 <Task2_callback+0x204>)
     f38:	2000      	movs	r0, #0
     f3a:	f001 f957 	bl	21ec <SEGGER_RTT_printf>
                            break;
     f3e:	e019      	b.n	f74 <Task2_callback+0x1c8>
                                if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     f40:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f44:	4a18      	ldr	r2, [pc, #96]	; (fa8 <Task2_callback+0x1fc>)
     f46:	5cd3      	ldrb	r3, [r2, r3]
     f48:	2b00      	cmp	r3, #0
     f4a:	d012      	beq.n	f72 <Task2_callback+0x1c6>
                                    HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_3 );
     f4c:	2002      	movs	r0, #2
     f4e:	f000 fb36 	bl	15be <HwIoAb_Buzzer_Beep>
                                    flags[i] = FALSE;
     f52:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f56:	4a14      	ldr	r2, [pc, #80]	; (fa8 <Task2_callback+0x1fc>)
     f58:	2100      	movs	r1, #0
     f5a:	54d1      	strb	r1, [r2, r3]
                            break;
     f5c:	e009      	b.n	f72 <Task2_callback+0x1c6>
                                HwIoAb_Buzzer_Stop();
     f5e:	f000 fb5b 	bl	1618 <HwIoAb_Buzzer_Stop>
                                flags[i] = TRUE;
     f62:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f66:	4a10      	ldr	r2, [pc, #64]	; (fa8 <Task2_callback+0x1fc>)
     f68:	2101      	movs	r1, #1
     f6a:	54d1      	strb	r1, [r2, r3]
                            break;
     f6c:	e002      	b.n	f74 <Task2_callback+0x1c8>
                            break;
     f6e:	bf00      	nop
     f70:	e004      	b.n	f7c <Task2_callback+0x1d0>
                            break;
     f72:	bf00      	nop
                break;
     f74:	e002      	b.n	f7c <Task2_callback+0x1d0>
            }
        }
     f76:	bf00      	nop
     f78:	e000      	b.n	f7c <Task2_callback+0x1d0>
                break;
     f7a:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     f7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f80:	3301      	adds	r3, #1
     f82:	f88d 3007 	strb.w	r3, [sp, #7]
     f86:	4b0b      	ldr	r3, [pc, #44]	; (fb4 <Task2_callback+0x208>)
     f88:	681b      	ldr	r3, [r3, #0]
     f8a:	781b      	ldrb	r3, [r3, #0]
     f8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
     f90:	429a      	cmp	r2, r3
     f92:	f4ff af17 	bcc.w	dc4 <Task2_callback+0x18>
    }
}
     f96:	bf00      	nop
     f98:	bf00      	nop
     f9a:	b003      	add	sp, #12
     f9c:	f85d fb04 	ldr.w	pc, [sp], #4
     fa0:	1fff8b68 	.word	0x1fff8b68
     fa4:	00018f8c 	.word	0x00018f8c
     fa8:	1fff8b5c 	.word	0x1fff8b5c
     fac:	00018fb0 	.word	0x00018fb0
     fb0:	00018fd4 	.word	0x00018fd4
     fb4:	1fff8b60 	.word	0x1fff8b60

00000fb8 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 */
void Timer1_callback( void ) {
}
     fb8:	bf00      	nop
     fba:	4770      	bx	lr

00000fbc <HwIoAb_Buttons_Init>:
 * @brief This function initialices the control structure for the double click state machine. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 * 
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config *Buttons_Config ) {
     fbc:	b084      	sub	sp, #16
     fbe:	9001      	str	r0, [sp, #4]
    //local data 
    uint8 i = 0;
     fc0:	2300      	movs	r3, #0
     fc2:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     fc6:	4b15      	ldr	r3, [pc, #84]	; (101c <HwIoAb_Buttons_Init+0x60>)
     fc8:	681b      	ldr	r3, [r3, #0]
     fca:	2203      	movs	r2, #3
     fcc:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     fce:	4b13      	ldr	r3, [pc, #76]	; (101c <HwIoAb_Buttons_Init+0x60>)
     fd0:	681b      	ldr	r3, [r3, #0]
     fd2:	9a01      	ldr	r2, [sp, #4]
     fd4:	605a      	str	r2, [r3, #4]

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     fd6:	2300      	movs	r3, #0
     fd8:	f88d 300f 	strb.w	r3, [sp, #15]
     fdc:	e012      	b.n	1004 <HwIoAb_Buttons_Init+0x48>
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     fde:	4b0f      	ldr	r3, [pc, #60]	; (101c <HwIoAb_Buttons_Init+0x60>)
     fe0:	681a      	ldr	r2, [r3, #0]
     fe2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     fe6:	4413      	add	r3, r2
     fe8:	2200      	movs	r2, #0
     fea:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     fec:	4b0b      	ldr	r3, [pc, #44]	; (101c <HwIoAb_Buttons_Init+0x60>)
     fee:	681a      	ldr	r2, [r3, #0]
     ff0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ff4:	4413      	add	r3, r2
     ff6:	2200      	movs	r2, #0
     ff8:	72da      	strb	r2, [r3, #11]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     ffa:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ffe:	3301      	adds	r3, #1
    1000:	f88d 300f 	strb.w	r3, [sp, #15]
    1004:	4b05      	ldr	r3, [pc, #20]	; (101c <HwIoAb_Buttons_Init+0x60>)
    1006:	681b      	ldr	r3, [r3, #0]
    1008:	781b      	ldrb	r3, [r3, #0]
    100a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    100e:	429a      	cmp	r2, r3
    1010:	d3e5      	bcc.n	fde <HwIoAb_Buttons_Init+0x22>
    }
}
    1012:	bf00      	nop
    1014:	bf00      	nop
    1016:	b004      	add	sp, #16
    1018:	4770      	bx	lr
    101a:	bf00      	nop
    101c:	1fff8b60 	.word	0x1fff8b60

00001020 <HwIoAb_Buttons_GetEvent>:
 * @param Button Button ID. 
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button ) {
    1020:	b084      	sub	sp, #16
    1022:	4603      	mov	r3, r0
    1024:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    uint8 event = 0;
    1028:	2300      	movs	r3, #0
    102a:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if ID is valid
    if ( ( Button != 0 ) && ( Button <= ButtonsControl_Ptr->Buttons ) ) {
    102e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1032:	2b00      	cmp	r3, #0
    1034:	d017      	beq.n	1066 <HwIoAb_Buttons_GetEvent+0x46>
    1036:	4b0e      	ldr	r3, [pc, #56]	; (1070 <HwIoAb_Buttons_GetEvent+0x50>)
    1038:	681b      	ldr	r3, [r3, #0]
    103a:	781b      	ldrb	r3, [r3, #0]
    103c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1040:	429a      	cmp	r2, r3
    1042:	d810      	bhi.n	1066 <HwIoAb_Buttons_GetEvent+0x46>
        event = ButtonsControl_Ptr->Events[ Button - 1 ]; //Obtaining last event.
    1044:	4b0a      	ldr	r3, [pc, #40]	; (1070 <HwIoAb_Buttons_GetEvent+0x50>)
    1046:	681a      	ldr	r2, [r3, #0]
    1048:	f89d 3007 	ldrb.w	r3, [sp, #7]
    104c:	3b01      	subs	r3, #1
    104e:	4413      	add	r3, r2
    1050:	7adb      	ldrb	r3, [r3, #11]
    1052:	f88d 300f 	strb.w	r3, [sp, #15]
        ButtonsControl_Ptr->Events[ Button - 1 ] = HWIOAB_BTN_EVENT_IDLE;   //Clearing event of button.
    1056:	4b06      	ldr	r3, [pc, #24]	; (1070 <HwIoAb_Buttons_GetEvent+0x50>)
    1058:	681a      	ldr	r2, [r3, #0]
    105a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    105e:	3b01      	subs	r3, #1
    1060:	4413      	add	r3, r2
    1062:	2200      	movs	r2, #0
    1064:	72da      	strb	r2, [r3, #11]
    }

    return event;
    1066:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    106a:	4618      	mov	r0, r3
    106c:	b004      	add	sp, #16
    106e:	4770      	bx	lr
    1070:	1fff8b60 	.word	0x1fff8b60

00001074 <HwIoAb_Buttons_MainFunction>:
 * @note This function is called every HWIOAB_BUTTONS_PERIOD.
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void ) {
    1074:	b500      	push	{lr}
    1076:	b083      	sub	sp, #12
    //local data
    static boolean count_flags[ HWIOAB_BUTTONS_MAX ] = { FALSE, FALSE, FALSE };
    static uint32 count[ HWIOAB_BUTTONS_MAX ] = { 0, 0, 0 };
    uint8 i = 0;
    1078:	2300      	movs	r3, #0
    107a:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean active = FALSE;
    107e:	2300      	movs	r3, #0
    1080:	f88d 3006 	strb.w	r3, [sp, #6]
    
    //Counting in every function call
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
    1084:	2300      	movs	r3, #0
    1086:	f88d 3007 	strb.w	r3, [sp, #7]
    108a:	e029      	b.n	10e0 <HwIoAb_Buttons_MainFunction+0x6c>
        if ( count_flags[i] == TRUE ) {
    108c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1090:	4ab9      	ldr	r2, [pc, #740]	; (1378 <__BSS_SRAM_SIZE+0x238>)
    1092:	5cd3      	ldrb	r3, [r2, r3]
    1094:	2b00      	cmp	r3, #0
    1096:	d01e      	beq.n	10d6 <HwIoAb_Buttons_MainFunction+0x62>
            count[i] += HWIOAB_BUTTONS_PERIOD;
    1098:	f89d 3007 	ldrb.w	r3, [sp, #7]
    109c:	4ab7      	ldr	r2, [pc, #732]	; (137c <__BSS_SRAM_SIZE+0x23c>)
    109e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    10a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10a6:	3232      	adds	r2, #50	; 0x32
    10a8:	49b4      	ldr	r1, [pc, #720]	; (137c <__BSS_SRAM_SIZE+0x23c>)
    10aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {   //Once reaching timeout count stops.
    10ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10b2:	4ab2      	ldr	r2, [pc, #712]	; (137c <__BSS_SRAM_SIZE+0x23c>)
    10b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    10b8:	4bb1      	ldr	r3, [pc, #708]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    10ba:	681b      	ldr	r3, [r3, #0]
    10bc:	6859      	ldr	r1, [r3, #4]
    10be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10c2:	00db      	lsls	r3, r3, #3
    10c4:	440b      	add	r3, r1
    10c6:	685b      	ldr	r3, [r3, #4]
    10c8:	429a      	cmp	r2, r3
    10ca:	d104      	bne.n	10d6 <HwIoAb_Buttons_MainFunction+0x62>
                count_flags[i] = FALSE;
    10cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10d0:	4aa9      	ldr	r2, [pc, #676]	; (1378 <__BSS_SRAM_SIZE+0x238>)
    10d2:	2100      	movs	r1, #0
    10d4:	54d1      	strb	r1, [r2, r3]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
    10d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10da:	3301      	adds	r3, #1
    10dc:	f88d 3007 	strb.w	r3, [sp, #7]
    10e0:	4ba7      	ldr	r3, [pc, #668]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    10e2:	681b      	ldr	r3, [r3, #0]
    10e4:	781b      	ldrb	r3, [r3, #0]
    10e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    10ea:	429a      	cmp	r2, r3
    10ec:	d3ce      	bcc.n	108c <HwIoAb_Buttons_MainFunction+0x18>
            }
        }
    }

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    10ee:	2300      	movs	r3, #0
    10f0:	f88d 3007 	strb.w	r3, [sp, #7]
    10f4:	e132      	b.n	135c <__BSS_SRAM_SIZE+0x21c>
        
        //Defining the active value according to the active status.
        if ( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active == HWIOAB_BTN_ACTIVE_HIGH ) {  //Pull down.
    10f6:	4ba2      	ldr	r3, [pc, #648]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    10f8:	681b      	ldr	r3, [r3, #0]
    10fa:	685a      	ldr	r2, [r3, #4]
    10fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1100:	00db      	lsls	r3, r3, #3
    1102:	4413      	add	r3, r2
    1104:	789b      	ldrb	r3, [r3, #2]
    1106:	2b01      	cmp	r3, #1
    1108:	d103      	bne.n	1112 <HwIoAb_Buttons_MainFunction+0x9e>
            active = STD_HIGH;
    110a:	2301      	movs	r3, #1
    110c:	f88d 3006 	strb.w	r3, [sp, #6]
    1110:	e002      	b.n	1118 <HwIoAb_Buttons_MainFunction+0xa4>
        }

        else {  //Pull up.
            active = STD_LOW;
    1112:	2300      	movs	r3, #0
    1114:	f88d 3006 	strb.w	r3, [sp, #6]
        }
        
        switch( ButtonsControl_Ptr->States[i] ) {
    1118:	4b99      	ldr	r3, [pc, #612]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    111a:	681a      	ldr	r2, [r3, #0]
    111c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1120:	4413      	add	r3, r2
    1122:	7a1b      	ldrb	r3, [r3, #8]
    1124:	2b04      	cmp	r3, #4
    1126:	f200 8109 	bhi.w	133c <__BSS_SRAM_SIZE+0x1fc>
    112a:	a201      	add	r2, pc, #4	; (adr r2, 1130 <HwIoAb_Buttons_MainFunction+0xbc>)
    112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1130:	00001145 	.word	0x00001145
    1134:	0000118f 	.word	0x0000118f
    1138:	00001277 	.word	0x00001277
    113c:	000012e9 	.word	0x000012e9
    1140:	000011f5 	.word	0x000011f5
            case HWIOAB_BTN_STATE_IDLE :
                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    1144:	4b8e      	ldr	r3, [pc, #568]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    1146:	681b      	ldr	r3, [r3, #0]
    1148:	685a      	ldr	r2, [r3, #4]
    114a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    114e:	00db      	lsls	r3, r3, #3
    1150:	4413      	add	r3, r2
    1152:	881b      	ldrh	r3, [r3, #0]
    1154:	4618      	mov	r0, r3
    1156:	f007 f97d 	bl	8454 <Dio_ReadChannel>
    115a:	4603      	mov	r3, r0
    115c:	461a      	mov	r2, r3
    115e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1162:	429a      	cmp	r2, r3
    1164:	f040 80ec 	bne.w	1340 <__BSS_SRAM_SIZE+0x200>
                    count_flags[i] = TRUE;  //Starting count.
    1168:	f89d 3007 	ldrb.w	r3, [sp, #7]
    116c:	4a82      	ldr	r2, [pc, #520]	; (1378 <__BSS_SRAM_SIZE+0x238>)
    116e:	2101      	movs	r1, #1
    1170:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    1172:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1176:	4a81      	ldr	r2, [pc, #516]	; (137c <__BSS_SRAM_SIZE+0x23c>)
    1178:	2100      	movs	r1, #0
    117a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_PRESS;
    117e:	4b80      	ldr	r3, [pc, #512]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    1180:	681a      	ldr	r2, [r3, #0]
    1182:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1186:	4413      	add	r3, r2
    1188:	2201      	movs	r2, #1
    118a:	721a      	strb	r2, [r3, #8]
                }
            break;
    118c:	e0d8      	b.n	1340 <__BSS_SRAM_SIZE+0x200>
        
            case HWIOAB_BTN_STATE_SINGLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    118e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1192:	4a7a      	ldr	r2, [pc, #488]	; (137c <__BSS_SRAM_SIZE+0x23c>)
    1194:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1198:	4b79      	ldr	r3, [pc, #484]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    119a:	681b      	ldr	r3, [r3, #0]
    119c:	6859      	ldr	r1, [r3, #4]
    119e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11a2:	00db      	lsls	r3, r3, #3
    11a4:	440b      	add	r3, r1
    11a6:	685b      	ldr	r3, [r3, #4]
    11a8:	429a      	cmp	r2, r3
    11aa:	d106      	bne.n	11ba <__BSS_SRAM_SIZE+0x7a>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    11ac:	4b74      	ldr	r3, [pc, #464]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    11ae:	681a      	ldr	r2, [r3, #0]
    11b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11b4:	4413      	add	r3, r2
    11b6:	2203      	movs	r2, #3
    11b8:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    11ba:	4b71      	ldr	r3, [pc, #452]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    11bc:	681b      	ldr	r3, [r3, #0]
    11be:	685a      	ldr	r2, [r3, #4]
    11c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11c4:	00db      	lsls	r3, r3, #3
    11c6:	4413      	add	r3, r2
    11c8:	881b      	ldrh	r3, [r3, #0]
    11ca:	4618      	mov	r0, r3
    11cc:	f007 f942 	bl	8454 <Dio_ReadChannel>
    11d0:	4603      	mov	r3, r0
    11d2:	461a      	mov	r2, r3
    11d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    11d8:	f083 0301 	eor.w	r3, r3, #1
    11dc:	b2db      	uxtb	r3, r3
    11de:	429a      	cmp	r2, r3
    11e0:	f040 80b0 	bne.w	1344 <__BSS_SRAM_SIZE+0x204>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
    11e4:	4b66      	ldr	r3, [pc, #408]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    11e6:	681a      	ldr	r2, [r3, #0]
    11e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11ec:	4413      	add	r3, r2
    11ee:	2204      	movs	r2, #4
    11f0:	721a      	strb	r2, [r3, #8]
                }
            break;
    11f2:	e0a7      	b.n	1344 <__BSS_SRAM_SIZE+0x204>
        
            case HWIOAB_BTN_STATE_RELEASE :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) { //Single click
    11f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11f8:	4a60      	ldr	r2, [pc, #384]	; (137c <__BSS_SRAM_SIZE+0x23c>)
    11fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    11fe:	4b60      	ldr	r3, [pc, #384]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    1200:	681b      	ldr	r3, [r3, #0]
    1202:	6859      	ldr	r1, [r3, #4]
    1204:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1208:	00db      	lsls	r3, r3, #3
    120a:	440b      	add	r3, r1
    120c:	685b      	ldr	r3, [r3, #4]
    120e:	429a      	cmp	r2, r3
    1210:	d10d      	bne.n	122e <__BSS_SRAM_SIZE+0xee>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
    1212:	4b5b      	ldr	r3, [pc, #364]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    1214:	681a      	ldr	r2, [r3, #0]
    1216:	f89d 3007 	ldrb.w	r3, [sp, #7]
    121a:	4413      	add	r3, r2
    121c:	2201      	movs	r2, #1
    121e:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    1220:	4b57      	ldr	r3, [pc, #348]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    1222:	681a      	ldr	r2, [r3, #0]
    1224:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1228:	4413      	add	r3, r2
    122a:	2200      	movs	r2, #0
    122c:	721a      	strb	r2, [r3, #8]
                }

                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    122e:	4b54      	ldr	r3, [pc, #336]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    1230:	681b      	ldr	r3, [r3, #0]
    1232:	685a      	ldr	r2, [r3, #4]
    1234:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1238:	00db      	lsls	r3, r3, #3
    123a:	4413      	add	r3, r2
    123c:	881b      	ldrh	r3, [r3, #0]
    123e:	4618      	mov	r0, r3
    1240:	f007 f908 	bl	8454 <Dio_ReadChannel>
    1244:	4603      	mov	r3, r0
    1246:	461a      	mov	r2, r3
    1248:	f89d 3006 	ldrb.w	r3, [sp, #6]
    124c:	429a      	cmp	r2, r3
    124e:	d17b      	bne.n	1348 <__BSS_SRAM_SIZE+0x208>
                    count_flags[i] = TRUE;  //Starting count.
    1250:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1254:	4a48      	ldr	r2, [pc, #288]	; (1378 <__BSS_SRAM_SIZE+0x238>)
    1256:	2101      	movs	r1, #1
    1258:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    125a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    125e:	4a47      	ldr	r2, [pc, #284]	; (137c <__BSS_SRAM_SIZE+0x23c>)
    1260:	2100      	movs	r1, #0
    1262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_PRESS;
    1266:	4b46      	ldr	r3, [pc, #280]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    1268:	681a      	ldr	r2, [r3, #0]
    126a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    126e:	4413      	add	r3, r2
    1270:	2202      	movs	r2, #2
    1272:	721a      	strb	r2, [r3, #8]
                }
            break;
    1274:	e068      	b.n	1348 <__BSS_SRAM_SIZE+0x208>
        
            case HWIOAB_BTN_STATE_DOUBLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    1276:	f89d 3007 	ldrb.w	r3, [sp, #7]
    127a:	4a40      	ldr	r2, [pc, #256]	; (137c <__BSS_SRAM_SIZE+0x23c>)
    127c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1280:	4b3f      	ldr	r3, [pc, #252]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    1282:	681b      	ldr	r3, [r3, #0]
    1284:	6859      	ldr	r1, [r3, #4]
    1286:	f89d 3007 	ldrb.w	r3, [sp, #7]
    128a:	00db      	lsls	r3, r3, #3
    128c:	440b      	add	r3, r1
    128e:	685b      	ldr	r3, [r3, #4]
    1290:	429a      	cmp	r2, r3
    1292:	d106      	bne.n	12a2 <__BSS_SRAM_SIZE+0x162>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    1294:	4b3a      	ldr	r3, [pc, #232]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    1296:	681a      	ldr	r2, [r3, #0]
    1298:	f89d 3007 	ldrb.w	r3, [sp, #7]
    129c:	4413      	add	r3, r2
    129e:	2203      	movs	r2, #3
    12a0:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {  //Double click.
    12a2:	4b37      	ldr	r3, [pc, #220]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    12a4:	681b      	ldr	r3, [r3, #0]
    12a6:	685a      	ldr	r2, [r3, #4]
    12a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12ac:	00db      	lsls	r3, r3, #3
    12ae:	4413      	add	r3, r2
    12b0:	881b      	ldrh	r3, [r3, #0]
    12b2:	4618      	mov	r0, r3
    12b4:	f007 f8ce 	bl	8454 <Dio_ReadChannel>
    12b8:	4603      	mov	r3, r0
    12ba:	461a      	mov	r2, r3
    12bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    12c0:	f083 0301 	eor.w	r3, r3, #1
    12c4:	b2db      	uxtb	r3, r3
    12c6:	429a      	cmp	r2, r3
    12c8:	d140      	bne.n	134c <__BSS_SRAM_SIZE+0x20c>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
    12ca:	4b2d      	ldr	r3, [pc, #180]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    12cc:	681a      	ldr	r2, [r3, #0]
    12ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12d2:	4413      	add	r3, r2
    12d4:	2202      	movs	r2, #2
    12d6:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    12d8:	4b29      	ldr	r3, [pc, #164]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    12da:	681a      	ldr	r2, [r3, #0]
    12dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12e0:	4413      	add	r3, r2
    12e2:	2200      	movs	r2, #0
    12e4:	721a      	strb	r2, [r3, #8]
                }
            break;
    12e6:	e031      	b.n	134c <__BSS_SRAM_SIZE+0x20c>
        
            case HWIOAB_BTN_STATE_HOLD_PRESS :  //Hold click.
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
    12e8:	4b25      	ldr	r3, [pc, #148]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    12ea:	681a      	ldr	r2, [r3, #0]
    12ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12f0:	4413      	add	r3, r2
    12f2:	2203      	movs	r2, #3
    12f4:	72da      	strb	r2, [r3, #11]
                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    12f6:	4b22      	ldr	r3, [pc, #136]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    12f8:	681b      	ldr	r3, [r3, #0]
    12fa:	685a      	ldr	r2, [r3, #4]
    12fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1300:	00db      	lsls	r3, r3, #3
    1302:	4413      	add	r3, r2
    1304:	881b      	ldrh	r3, [r3, #0]
    1306:	4618      	mov	r0, r3
    1308:	f007 f8a4 	bl	8454 <Dio_ReadChannel>
    130c:	4603      	mov	r3, r0
    130e:	461a      	mov	r2, r3
    1310:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1314:	f083 0301 	eor.w	r3, r3, #1
    1318:	b2db      	uxtb	r3, r3
    131a:	429a      	cmp	r2, r3
    131c:	d118      	bne.n	1350 <__BSS_SRAM_SIZE+0x210>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
    131e:	4b18      	ldr	r3, [pc, #96]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    1320:	681a      	ldr	r2, [r3, #0]
    1322:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1326:	4413      	add	r3, r2
    1328:	2204      	movs	r2, #4
    132a:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    132c:	4b14      	ldr	r3, [pc, #80]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    132e:	681a      	ldr	r2, [r3, #0]
    1330:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1334:	4413      	add	r3, r2
    1336:	2200      	movs	r2, #0
    1338:	721a      	strb	r2, [r3, #8]
                }
            break;
    133a:	e009      	b.n	1350 <__BSS_SRAM_SIZE+0x210>
        
            default :
            break;
    133c:	bf00      	nop
    133e:	e008      	b.n	1352 <__BSS_SRAM_SIZE+0x212>
            break;
    1340:	bf00      	nop
    1342:	e006      	b.n	1352 <__BSS_SRAM_SIZE+0x212>
            break;
    1344:	bf00      	nop
    1346:	e004      	b.n	1352 <__BSS_SRAM_SIZE+0x212>
            break;
    1348:	bf00      	nop
    134a:	e002      	b.n	1352 <__BSS_SRAM_SIZE+0x212>
            break;
    134c:	bf00      	nop
    134e:	e000      	b.n	1352 <__BSS_SRAM_SIZE+0x212>
            break;
    1350:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    1352:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1356:	3301      	adds	r3, #1
    1358:	f88d 3007 	strb.w	r3, [sp, #7]
    135c:	4b08      	ldr	r3, [pc, #32]	; (1380 <__BSS_SRAM_SIZE+0x240>)
    135e:	681b      	ldr	r3, [r3, #0]
    1360:	781b      	ldrb	r3, [r3, #0]
    1362:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1366:	429a      	cmp	r2, r3
    1368:	f4ff aec5 	bcc.w	10f6 <HwIoAb_Buttons_MainFunction+0x82>
        }
    }
}
    136c:	bf00      	nop
    136e:	bf00      	nop
    1370:	b003      	add	sp, #12
    1372:	f85d fb04 	ldr.w	pc, [sp], #4
    1376:	bf00      	nop
    1378:	1fff97b0 	.word	0x1fff97b0
    137c:	1fff97b4 	.word	0x1fff97b4
    1380:	1fff8b60 	.word	0x1fff8b60

00001384 <HwIoAb_Leds_Init>:
/**
 * @brief This function initialices the control structure for the leds.
 * 
 * @param [in] Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config *Leds_Config ) {
    1384:	b082      	sub	sp, #8
    1386:	9001      	str	r0, [sp, #4]
    //Initializing members.
    LedsControl_Ptr->Leds = HWIOAB_LEDS;
    1388:	4b05      	ldr	r3, [pc, #20]	; (13a0 <HwIoAb_Leds_Init+0x1c>)
    138a:	681b      	ldr	r3, [r3, #0]
    138c:	2203      	movs	r2, #3
    138e:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    1390:	4b03      	ldr	r3, [pc, #12]	; (13a0 <HwIoAb_Leds_Init+0x1c>)
    1392:	681b      	ldr	r3, [r3, #0]
    1394:	9a01      	ldr	r2, [sp, #4]
    1396:	605a      	str	r2, [r3, #4]
}
    1398:	bf00      	nop
    139a:	b002      	add	sp, #8
    139c:	4770      	bx	lr
    139e:	bf00      	nop
    13a0:	1fff8b64 	.word	0x1fff8b64

000013a4 <HwIoAb_Leds_TurnToggle>:
 * 
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) {
    13a4:	b500      	push	{lr}
    13a6:	b083      	sub	sp, #12
    13a8:	4603      	mov	r3, r0
    13aa:	f88d 3007 	strb.w	r3, [sp, #7]
    //Verifying if the ID is valid.
    if ( Led <= LedsControl_Ptr->Leds - 1 ) {   //Valid ID.
    13ae:	4b0b      	ldr	r3, [pc, #44]	; (13dc <HwIoAb_Leds_TurnToggle+0x38>)
    13b0:	681b      	ldr	r3, [r3, #0]
    13b2:	781b      	ldrb	r3, [r3, #0]
    13b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    13b8:	429a      	cmp	r2, r3
    13ba:	d20a      	bcs.n	13d2 <HwIoAb_Leds_TurnToggle+0x2e>
        Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    13bc:	4b07      	ldr	r3, [pc, #28]	; (13dc <HwIoAb_Leds_TurnToggle+0x38>)
    13be:	681b      	ldr	r3, [r3, #0]
    13c0:	685a      	ldr	r2, [r3, #4]
    13c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13c6:	009b      	lsls	r3, r3, #2
    13c8:	4413      	add	r3, r2
    13ca:	881b      	ldrh	r3, [r3, #0]
    13cc:	4618      	mov	r0, r3
    13ce:	f007 f892 	bl	84f6 <Dio_FlipChannel>
    }
}
    13d2:	bf00      	nop
    13d4:	b003      	add	sp, #12
    13d6:	f85d fb04 	ldr.w	pc, [sp], #4
    13da:	bf00      	nop
    13dc:	1fff8b64 	.word	0x1fff8b64

000013e0 <HwIoAb_Pots_Init>:
 * 
 * It calibrates both ADC modules and initialices the raw results arrays for the conversions.
 * 
 * @param Pots_Config Pointer to configuration structure instance, in this case is not use. 
 */
void HwIoAb_Pots_Init( const HwIoAb_Pots_Config *Pots_Config ) {
    13e0:	b500      	push	{lr}
    13e2:	b085      	sub	sp, #20
    13e4:	9001      	str	r0, [sp, #4]
    //local data.
    Adc_CalibrationStatusType Calib_Status_ADC0;
    Adc_CalibrationStatusType Calib_Status_ADC1;

    //Calibrating ADC modules.
    Adc_Calibrate( Adc0, &Calib_Status_ADC0 );
    13e6:	ab03      	add	r3, sp, #12
    13e8:	4619      	mov	r1, r3
    13ea:	2000      	movs	r0, #0
    13ec:	f008 ffd9 	bl	a3a2 <Adc_Calibrate>
    Adc_Calibrate( Adc1, &Calib_Status_ADC1 );
    13f0:	ab02      	add	r3, sp, #8
    13f2:	4619      	mov	r1, r3
    13f4:	2001      	movs	r0, #1
    13f6:	f008 ffd4 	bl	a3a2 <Adc_Calibrate>

    //Initializing raw results array.
    Adc_SetupResultBuffer( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS );
    13fa:	4b0b      	ldr	r3, [pc, #44]	; (1428 <HwIoAb_Pots_Init+0x48>)
    13fc:	681b      	ldr	r3, [r3, #0]
    13fe:	3302      	adds	r3, #2
    1400:	4619      	mov	r1, r3
    1402:	2000      	movs	r0, #0
    1404:	f008 fcc6 	bl	9d94 <Adc_SetupResultBuffer>
    Adc_SetupResultBuffer( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS );
    1408:	4b07      	ldr	r3, [pc, #28]	; (1428 <HwIoAb_Pots_Init+0x48>)
    140a:	681b      	ldr	r3, [r3, #0]
    140c:	3306      	adds	r3, #6
    140e:	4619      	mov	r1, r3
    1410:	2001      	movs	r0, #1
    1412:	f008 fcbf 	bl	9d94 <Adc_SetupResultBuffer>

    PotsControl_Ptr->Pots = HWIOAB_POTS;
    1416:	4b04      	ldr	r3, [pc, #16]	; (1428 <HwIoAb_Pots_Init+0x48>)
    1418:	681b      	ldr	r3, [r3, #0]
    141a:	2202      	movs	r2, #2
    141c:	701a      	strb	r2, [r3, #0]
}
    141e:	bf00      	nop
    1420:	b005      	add	sp, #20
    1422:	f85d fb04 	ldr.w	pc, [sp], #4
    1426:	bf00      	nop
    1428:	1fff8b68 	.word	0x1fff8b68

0000142c <HwIoAb_Pots_GetValue>:
 * @param Pots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetValue( uint16 *Pots ) {
    142c:	b500      	push	{lr}
    142e:	b085      	sub	sp, #20
    1430:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    1432:	2300      	movs	r3, #0
    1434:	f88d 300f 	strb.w	r3, [sp, #15]

    Adc_StartGroupConversion( Adc0Group_0 );    //Triggering group conversion.
    1438:	2000      	movs	r0, #0
    143a:	f008 fd79 	bl	9f30 <Adc_StartGroupConversion>
    while( Adc_GetGroupStatus( Adc0Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    143e:	bf00      	nop
    1440:	2000      	movs	r0, #0
    1442:	f008 fe95 	bl	a170 <Adc_GetGroupStatus>
    1446:	4603      	mov	r3, r0
    1448:	2b01      	cmp	r3, #1
    144a:	d0f9      	beq.n	1440 <HwIoAb_Pots_GetValue+0x14>
    Adc_ReadGroup( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    144c:	4b25      	ldr	r3, [pc, #148]	; (14e4 <HwIoAb_Pots_GetValue+0xb8>)
    144e:	681b      	ldr	r3, [r3, #0]
    1450:	3302      	adds	r3, #2
    1452:	4619      	mov	r1, r3
    1454:	2000      	movs	r0, #0
    1456:	f008 fe33 	bl	a0c0 <Adc_ReadGroup>

    //Calculating resistance of each Pot.
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    145a:	2300      	movs	r3, #0
    145c:	f88d 300f 	strb.w	r3, [sp, #15]
    1460:	e034      	b.n	14cc <HwIoAb_Pots_GetValue+0xa0>
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
        ( ( float ) PotsControl_Ptr->Raw_results_main[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    1462:	4b20      	ldr	r3, [pc, #128]	; (14e4 <HwIoAb_Pots_GetValue+0xb8>)
    1464:	681a      	ldr	r2, [r3, #0]
    1466:	f89d 300f 	ldrb.w	r3, [sp, #15]
    146a:	005b      	lsls	r3, r3, #1
    146c:	4413      	add	r3, r2
    146e:	885b      	ldrh	r3, [r3, #2]
    1470:	ee07 3a90 	vmov	s15, r3
    1474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1478:	eddf 6a1b 	vldr	s13, [pc, #108]	; 14e8 <HwIoAb_Pots_GetValue+0xbc>
    147c:	eec7 7a26 	vdiv.f32	s15, s14, s13
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    1480:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 14ec <HwIoAb_Pots_GetValue+0xc0>
    1484:	ee67 7a87 	vmul.f32	s15, s15, s14
    1488:	f89d 300f 	ldrb.w	r3, [sp, #15]
    148c:	005b      	lsls	r3, r3, #1
    148e:	9a01      	ldr	r2, [sp, #4]
    1490:	4413      	add	r3, r2
    1492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1496:	ee17 2a90 	vmov	r2, s15
    149a:	b292      	uxth	r2, r2
    149c:	801a      	strh	r2, [r3, #0]

        if ( Pots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    149e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14a2:	005b      	lsls	r3, r3, #1
    14a4:	9a01      	ldr	r2, [sp, #4]
    14a6:	4413      	add	r3, r2
    14a8:	881b      	ldrh	r3, [r3, #0]
    14aa:	f242 7210 	movw	r2, #10000	; 0x2710
    14ae:	4293      	cmp	r3, r2
    14b0:	d907      	bls.n	14c2 <HwIoAb_Pots_GetValue+0x96>
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    14b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14b6:	005b      	lsls	r3, r3, #1
    14b8:	9a01      	ldr	r2, [sp, #4]
    14ba:	4413      	add	r3, r2
    14bc:	f242 7210 	movw	r2, #10000	; 0x2710
    14c0:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    14c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14c6:	3301      	adds	r3, #1
    14c8:	f88d 300f 	strb.w	r3, [sp, #15]
    14cc:	4b05      	ldr	r3, [pc, #20]	; (14e4 <HwIoAb_Pots_GetValue+0xb8>)
    14ce:	681b      	ldr	r3, [r3, #0]
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    14d6:	429a      	cmp	r2, r3
    14d8:	d3c3      	bcc.n	1462 <HwIoAb_Pots_GetValue+0x36>
        }
    }
}
    14da:	bf00      	nop
    14dc:	bf00      	nop
    14de:	b005      	add	sp, #20
    14e0:	f85d fb04 	ldr.w	pc, [sp], #4
    14e4:	1fff8b68 	.word	0x1fff8b68
    14e8:	45310000 	.word	0x45310000
    14ec:	461c4000 	.word	0x461c4000

000014f0 <HwIoAb_Pots_GetAltValue>:
 * @param AltPots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples.
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetAltValue( uint16 *AltPots ) {
    14f0:	b500      	push	{lr}
    14f2:	b085      	sub	sp, #20
    14f4:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    14f6:	2300      	movs	r3, #0
    14f8:	f88d 300f 	strb.w	r3, [sp, #15]

    Adc_StartGroupConversion( Adc1Group_0 );    //Triggering group conversion.
    14fc:	2001      	movs	r0, #1
    14fe:	f008 fd17 	bl	9f30 <Adc_StartGroupConversion>
    while( Adc_GetGroupStatus( Adc1Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    1502:	bf00      	nop
    1504:	2001      	movs	r0, #1
    1506:	f008 fe33 	bl	a170 <Adc_GetGroupStatus>
    150a:	4603      	mov	r3, r0
    150c:	2b01      	cmp	r3, #1
    150e:	d0f9      	beq.n	1504 <HwIoAb_Pots_GetAltValue+0x14>
    Adc_ReadGroup( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    1510:	4b25      	ldr	r3, [pc, #148]	; (15a8 <HwIoAb_Pots_GetAltValue+0xb8>)
    1512:	681b      	ldr	r3, [r3, #0]
    1514:	3306      	adds	r3, #6
    1516:	4619      	mov	r1, r3
    1518:	2001      	movs	r0, #1
    151a:	f008 fdd1 	bl	a0c0 <Adc_ReadGroup>

    //Calculating resistance of each Pot.
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    151e:	2300      	movs	r3, #0
    1520:	f88d 300f 	strb.w	r3, [sp, #15]
    1524:	e034      	b.n	1590 <HwIoAb_Pots_GetAltValue+0xa0>
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
        ( ( float ) PotsControl_Ptr->Raw_results_alter[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    1526:	4b20      	ldr	r3, [pc, #128]	; (15a8 <HwIoAb_Pots_GetAltValue+0xb8>)
    1528:	681a      	ldr	r2, [r3, #0]
    152a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    152e:	005b      	lsls	r3, r3, #1
    1530:	4413      	add	r3, r2
    1532:	88db      	ldrh	r3, [r3, #6]
    1534:	ee07 3a90 	vmov	s15, r3
    1538:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    153c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 15ac <HwIoAb_Pots_GetAltValue+0xbc>
    1540:	eec7 7a26 	vdiv.f32	s15, s14, s13
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
    1544:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 15b0 <HwIoAb_Pots_GetAltValue+0xc0>
    1548:	ee67 7a87 	vmul.f32	s15, s15, s14
    154c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1550:	005b      	lsls	r3, r3, #1
    1552:	9a01      	ldr	r2, [sp, #4]
    1554:	4413      	add	r3, r2
    1556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    155a:	ee17 2a90 	vmov	r2, s15
    155e:	b292      	uxth	r2, r2
    1560:	801a      	strh	r2, [r3, #0]

        if ( AltPots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    1562:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1566:	005b      	lsls	r3, r3, #1
    1568:	9a01      	ldr	r2, [sp, #4]
    156a:	4413      	add	r3, r2
    156c:	881b      	ldrh	r3, [r3, #0]
    156e:	f242 7210 	movw	r2, #10000	; 0x2710
    1572:	4293      	cmp	r3, r2
    1574:	d907      	bls.n	1586 <HwIoAb_Pots_GetAltValue+0x96>
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    1576:	f89d 300f 	ldrb.w	r3, [sp, #15]
    157a:	005b      	lsls	r3, r3, #1
    157c:	9a01      	ldr	r2, [sp, #4]
    157e:	4413      	add	r3, r2
    1580:	f242 7210 	movw	r2, #10000	; 0x2710
    1584:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    1586:	f89d 300f 	ldrb.w	r3, [sp, #15]
    158a:	3301      	adds	r3, #1
    158c:	f88d 300f 	strb.w	r3, [sp, #15]
    1590:	4b05      	ldr	r3, [pc, #20]	; (15a8 <HwIoAb_Pots_GetAltValue+0xb8>)
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	781b      	ldrb	r3, [r3, #0]
    1596:	f89d 200f 	ldrb.w	r2, [sp, #15]
    159a:	429a      	cmp	r2, r3
    159c:	d3c3      	bcc.n	1526 <HwIoAb_Pots_GetAltValue+0x36>
        }
    }
    159e:	bf00      	nop
    15a0:	bf00      	nop
    15a2:	b005      	add	sp, #20
    15a4:	f85d fb04 	ldr.w	pc, [sp], #4
    15a8:	1fff8b68 	.word	0x1fff8b68
    15ac:	45310000 	.word	0x45310000
    15b0:	461c4000 	.word	0x461c4000

000015b4 <HwIoAb_Buzzer_Init>:
 * It does the configurations neccesary for using the buzzer.
 * In this case no configurations are needeed.
 * 
 * @param Buzzer_Config Pointer to config structure instance, in this case is not use.
 */
void HwIoAb_Buzzer_Init( const HwIoAb_Buzzer_Config *Buzzer_Config ) {
    15b4:	b082      	sub	sp, #8
    15b6:	9001      	str	r0, [sp, #4]

}
    15b8:	bf00      	nop
    15ba:	b002      	add	sp, #8
    15bc:	4770      	bx	lr

000015be <HwIoAb_Buzzer_Beep>:
/**
 * @brief This function beeps the buzzer according to the tone given.
 * 
 * @param Tone Tone of interest.
 */
void HwIoAb_Buzzer_Beep( uint8 Tone ) {
    15be:	b500      	push	{lr}
    15c0:	b083      	sub	sp, #12
    15c2:	4603      	mov	r3, r0
    15c4:	f88d 3007 	strb.w	r3, [sp, #7]
    switch ( Tone ) {
    15c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    15cc:	2b02      	cmp	r3, #2
    15ce:	d016      	beq.n	15fe <HwIoAb_Buzzer_Beep+0x40>
    15d0:	2b02      	cmp	r3, #2
    15d2:	dc1c      	bgt.n	160e <HwIoAb_Buzzer_Beep+0x50>
    15d4:	2b00      	cmp	r3, #0
    15d6:	d002      	beq.n	15de <HwIoAb_Buzzer_Beep+0x20>
    15d8:	2b01      	cmp	r3, #1
    15da:	d008      	beq.n	15ee <HwIoAb_Buzzer_Beep+0x30>
        break;
        case HWIOAB_BUZZER_TONE_3:  //Setting frequency to 5Khz and 25% duty cycle.
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_25_DUTY_CYCLE );
        break;
        default:    //Invalid tone.
        break;
    15dc:	e017      	b.n	160e <HwIoAb_Buzzer_Beep+0x50>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_1, HWIOAB_BUZZER_25_DUTY_CYCLE );
    15de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    15e2:	f241 41d5 	movw	r1, #5333	; 0x14d5
    15e6:	2000      	movs	r0, #0
    15e8:	f00f fcc6 	bl	10f78 <Pwm_SetPeriodAndDuty>
        break;
    15ec:	e010      	b.n	1610 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_2, HWIOAB_BUZZER_25_DUTY_CYCLE );
    15ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    15f2:	f640 216a 	movw	r1, #2666	; 0xa6a
    15f6:	2000      	movs	r0, #0
    15f8:	f00f fcbe 	bl	10f78 <Pwm_SetPeriodAndDuty>
        break;
    15fc:	e008      	b.n	1610 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_25_DUTY_CYCLE );
    15fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1602:	f44f 61c8 	mov.w	r1, #1600	; 0x640
    1606:	2000      	movs	r0, #0
    1608:	f00f fcb6 	bl	10f78 <Pwm_SetPeriodAndDuty>
        break;
    160c:	e000      	b.n	1610 <HwIoAb_Buzzer_Beep+0x52>
        break;
    160e:	bf00      	nop
    }
}
    1610:	bf00      	nop
    1612:	b003      	add	sp, #12
    1614:	f85d fb04 	ldr.w	pc, [sp], #4

00001618 <HwIoAb_Buzzer_Stop>:

/**
 * @brief This function stops the beep of the buzzer.
 * 
 */
void HwIoAb_Buzzer_Stop( void ) {
    1618:	b508      	push	{r3, lr}
    Pwm_SetOutputToIdle( HWIOAB_BUZZER_CH );    //Stopping buzzer.
    161a:	2000      	movs	r0, #0
    161c:	f00f fd16 	bl	1104c <Pwm_SetOutputToIdle>
}
    1620:	bf00      	nop
    1622:	bd08      	pop	{r3, pc}

00001624 <IoHwAb_Init0>:
/**
 * @brief This function initialices all the IO hardware abstractions.
 * 
 * @param ConfigPtr Pointer to configuration structure instance, in this case is not used.
 */
void IoHwAb_Init0( const IoHwAb0_ConfigType* ConfigPtr ) {
    1624:	b500      	push	{lr}
    1626:	b083      	sub	sp, #12
    1628:	9001      	str	r0, [sp, #4]
    HwIoAb_Buttons_Init( ButtonsCfg );  //Buttons init.
    162a:	4808      	ldr	r0, [pc, #32]	; (164c <IoHwAb_Init0+0x28>)
    162c:	f7ff fcc6 	bl	fbc <HwIoAb_Buttons_Init>
    HwIoAb_Leds_Init( LedsCfg );    //Leds init.
    1630:	4807      	ldr	r0, [pc, #28]	; (1650 <IoHwAb_Init0+0x2c>)
    1632:	f7ff fea7 	bl	1384 <HwIoAb_Leds_Init>
    HwIoAb_Pots_Init( NULL_PTR );   //Pots init.
    1636:	2000      	movs	r0, #0
    1638:	f7ff fed2 	bl	13e0 <HwIoAb_Pots_Init>
    HwIoAb_Buzzer_Init( NULL_PTR ); //Buzzer init.
    163c:	2000      	movs	r0, #0
    163e:	f7ff ffb9 	bl	15b4 <HwIoAb_Buzzer_Init>
}
    1642:	bf00      	nop
    1644:	b003      	add	sp, #12
    1646:	f85d fb04 	ldr.w	pc, [sp], #4
    164a:	bf00      	nop
    164c:	0001984c 	.word	0x0001984c
    1650:	00019864 	.word	0x00019864

00001654 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    1654:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    1656:	2300      	movs	r3, #0
    1658:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    165a:	2300      	movs	r3, #0
    165c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    165e:	2300      	movs	r3, #0
    1660:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    1662:	2300      	movs	r3, #0
    1664:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    1666:	4b44      	ldr	r3, [pc, #272]	; (1778 <init_data_bss+0x124>)
    1668:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    166a:	4b44      	ldr	r3, [pc, #272]	; (177c <init_data_bss+0x128>)
    166c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    166e:	9b05      	ldr	r3, [sp, #20]
    1670:	681b      	ldr	r3, [r3, #0]
    1672:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    1674:	9b05      	ldr	r3, [sp, #20]
    1676:	3304      	adds	r3, #4
    1678:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    167a:	9b05      	ldr	r3, [sp, #20]
    167c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    167e:	2300      	movs	r3, #0
    1680:	9309      	str	r3, [sp, #36]	; 0x24
    1682:	e03d      	b.n	1700 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1684:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1686:	4613      	mov	r3, r2
    1688:	005b      	lsls	r3, r3, #1
    168a:	4413      	add	r3, r2
    168c:	009b      	lsls	r3, r3, #2
    168e:	461a      	mov	r2, r3
    1690:	9b03      	ldr	r3, [sp, #12]
    1692:	4413      	add	r3, r2
    1694:	685b      	ldr	r3, [r3, #4]
    1696:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    1698:	9a09      	ldr	r2, [sp, #36]	; 0x24
    169a:	4613      	mov	r3, r2
    169c:	005b      	lsls	r3, r3, #1
    169e:	4413      	add	r3, r2
    16a0:	009b      	lsls	r3, r3, #2
    16a2:	461a      	mov	r2, r3
    16a4:	9b03      	ldr	r3, [sp, #12]
    16a6:	4413      	add	r3, r2
    16a8:	681b      	ldr	r3, [r3, #0]
    16aa:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    16ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16ae:	4613      	mov	r3, r2
    16b0:	005b      	lsls	r3, r3, #1
    16b2:	4413      	add	r3, r2
    16b4:	009b      	lsls	r3, r3, #2
    16b6:	461a      	mov	r2, r3
    16b8:	9b03      	ldr	r3, [sp, #12]
    16ba:	4413      	add	r3, r2
    16bc:	689b      	ldr	r3, [r3, #8]
    16be:	4619      	mov	r1, r3
    16c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16c2:	4613      	mov	r3, r2
    16c4:	005b      	lsls	r3, r3, #1
    16c6:	4413      	add	r3, r2
    16c8:	009b      	lsls	r3, r3, #2
    16ca:	461a      	mov	r2, r3
    16cc:	9b03      	ldr	r3, [sp, #12]
    16ce:	4413      	add	r3, r2
    16d0:	685b      	ldr	r3, [r3, #4]
    16d2:	1acb      	subs	r3, r1, r3
    16d4:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    16d6:	2300      	movs	r3, #0
    16d8:	9308      	str	r3, [sp, #32]
    16da:	e00a      	b.n	16f2 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    16dc:	9a00      	ldr	r2, [sp, #0]
    16de:	9b08      	ldr	r3, [sp, #32]
    16e0:	441a      	add	r2, r3
    16e2:	9901      	ldr	r1, [sp, #4]
    16e4:	9b08      	ldr	r3, [sp, #32]
    16e6:	440b      	add	r3, r1
    16e8:	7812      	ldrb	r2, [r2, #0]
    16ea:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    16ec:	9b08      	ldr	r3, [sp, #32]
    16ee:	3301      	adds	r3, #1
    16f0:	9308      	str	r3, [sp, #32]
    16f2:	9a08      	ldr	r2, [sp, #32]
    16f4:	9b06      	ldr	r3, [sp, #24]
    16f6:	429a      	cmp	r2, r3
    16f8:	d3f0      	bcc.n	16dc <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    16fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16fc:	3301      	adds	r3, #1
    16fe:	9309      	str	r3, [sp, #36]	; 0x24
    1700:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1702:	9b07      	ldr	r3, [sp, #28]
    1704:	429a      	cmp	r2, r3
    1706:	d3bd      	bcc.n	1684 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    1708:	9b04      	ldr	r3, [sp, #16]
    170a:	681b      	ldr	r3, [r3, #0]
    170c:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    170e:	9b04      	ldr	r3, [sp, #16]
    1710:	3304      	adds	r3, #4
    1712:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    1714:	9b04      	ldr	r3, [sp, #16]
    1716:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    1718:	2300      	movs	r3, #0
    171a:	9309      	str	r3, [sp, #36]	; 0x24
    171c:	e024      	b.n	1768 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    171e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1720:	00db      	lsls	r3, r3, #3
    1722:	9a02      	ldr	r2, [sp, #8]
    1724:	4413      	add	r3, r2
    1726:	681b      	ldr	r3, [r3, #0]
    1728:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    172a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    172c:	00db      	lsls	r3, r3, #3
    172e:	9a02      	ldr	r2, [sp, #8]
    1730:	4413      	add	r3, r2
    1732:	685b      	ldr	r3, [r3, #4]
    1734:	4619      	mov	r1, r3
    1736:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1738:	00db      	lsls	r3, r3, #3
    173a:	9a02      	ldr	r2, [sp, #8]
    173c:	4413      	add	r3, r2
    173e:	681b      	ldr	r3, [r3, #0]
    1740:	1acb      	subs	r3, r1, r3
    1742:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1744:	2300      	movs	r3, #0
    1746:	9308      	str	r3, [sp, #32]
    1748:	e007      	b.n	175a <init_data_bss+0x106>
        {
            ram[j] = 0U;
    174a:	9a01      	ldr	r2, [sp, #4]
    174c:	9b08      	ldr	r3, [sp, #32]
    174e:	4413      	add	r3, r2
    1750:	2200      	movs	r2, #0
    1752:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1754:	9b08      	ldr	r3, [sp, #32]
    1756:	3301      	adds	r3, #1
    1758:	9308      	str	r3, [sp, #32]
    175a:	9a08      	ldr	r2, [sp, #32]
    175c:	9b06      	ldr	r3, [sp, #24]
    175e:	429a      	cmp	r2, r3
    1760:	d3f3      	bcc.n	174a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    1762:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1764:	3301      	adds	r3, #1
    1766:	9309      	str	r3, [sp, #36]	; 0x24
    1768:	9a09      	ldr	r2, [sp, #36]	; 0x24
    176a:	9b07      	ldr	r3, [sp, #28]
    176c:	429a      	cmp	r2, r3
    176e:	d3d6      	bcc.n	171e <init_data_bss+0xca>
        }
    }
}
    1770:	bf00      	nop
    1772:	bf00      	nop
    1774:	b00a      	add	sp, #40	; 0x28
    1776:	4770      	bx	lr
    1778:	0001a6ac 	.word	0x0001a6ac
    177c:	0001a6c8 	.word	0x0001a6c8

00001780 <sys_m4_cache_init>:
{
    1780:	b084      	sub	sp, #16
    1782:	4603      	mov	r3, r0
    1784:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1788:	2300      	movs	r3, #0
    178a:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    178e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1792:	2b00      	cmp	r3, #0
    1794:	d118      	bne.n	17c8 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    1796:	4b10      	ldr	r3, [pc, #64]	; (17d8 <sys_m4_cache_init+0x58>)
    1798:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    179c:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    179e:	4b0e      	ldr	r3, [pc, #56]	; (17d8 <sys_m4_cache_init+0x58>)
    17a0:	681b      	ldr	r3, [r3, #0]
    17a2:	4a0d      	ldr	r2, [pc, #52]	; (17d8 <sys_m4_cache_init+0x58>)
    17a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    17a8:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    17aa:	bf00      	nop
    17ac:	4b0a      	ldr	r3, [pc, #40]	; (17d8 <sys_m4_cache_init+0x58>)
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    17b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    17b8:	d0f8      	beq.n	17ac <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    17ba:	4b07      	ldr	r3, [pc, #28]	; (17d8 <sys_m4_cache_init+0x58>)
    17bc:	681b      	ldr	r3, [r3, #0]
    17be:	4a06      	ldr	r2, [pc, #24]	; (17d8 <sys_m4_cache_init+0x58>)
    17c0:	f043 0301 	orr.w	r3, r3, #1
    17c4:	6013      	str	r3, [r2, #0]
    17c6:	e002      	b.n	17ce <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    17c8:	2301      	movs	r3, #1
    17ca:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    17ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    17d2:	4618      	mov	r0, r3
    17d4:	b004      	add	sp, #16
    17d6:	4770      	bx	lr
    17d8:	e0082000 	.word	0xe0082000

000017dc <startup_go_to_user_mode>:
}
    17dc:	bf00      	nop
    17de:	4770      	bx	lr

000017e0 <Sys_GetCoreID>:
    return 0U;
    17e0:	2300      	movs	r3, #0
}
    17e2:	4618      	mov	r0, r3
    17e4:	4770      	bx	lr

000017e6 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    17e6:	e7fe      	b.n	17e6 <HardFault_Handler>

000017e8 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    17e8:	e7fe      	b.n	17e8 <MemManage_Handler>

000017ea <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    17ea:	e7fe      	b.n	17ea <BusFault_Handler>

000017ec <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    17ec:	e7fe      	b.n	17ec <UsageFault_Handler>

000017ee <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    17ee:	e7fe      	b.n	17ee <SVC_Handler>

000017f0 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    17f0:	e7fe      	b.n	17f0 <DebugMon_Handler>

000017f2 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    17f2:	e7fe      	b.n	17f2 <PendSV_Handler>

000017f4 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    17f4:	e7fe      	b.n	17f4 <SysTick_Handler>

000017f6 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    17f6:	e7fe      	b.n	17f6 <undefined_handler>

000017f8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    17f8:	b500      	push	{lr}
    17fa:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    17fc:	4b26      	ldr	r3, [pc, #152]	; (1898 <_DoInit+0xa0>)
    17fe:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    1800:	22a8      	movs	r2, #168	; 0xa8
    1802:	2100      	movs	r1, #0
    1804:	9800      	ldr	r0, [sp, #0]
    1806:	f000 fd47 	bl	2298 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    180a:	9b00      	ldr	r3, [sp, #0]
    180c:	2203      	movs	r2, #3
    180e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1810:	9b00      	ldr	r3, [sp, #0]
    1812:	2203      	movs	r2, #3
    1814:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    1816:	9b00      	ldr	r3, [sp, #0]
    1818:	4a20      	ldr	r2, [pc, #128]	; (189c <_DoInit+0xa4>)
    181a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    181c:	9b00      	ldr	r3, [sp, #0]
    181e:	4a20      	ldr	r2, [pc, #128]	; (18a0 <_DoInit+0xa8>)
    1820:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    1822:	9b00      	ldr	r3, [sp, #0]
    1824:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1828:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    182a:	9b00      	ldr	r3, [sp, #0]
    182c:	2200      	movs	r2, #0
    182e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1830:	9b00      	ldr	r3, [sp, #0]
    1832:	2200      	movs	r2, #0
    1834:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1836:	9b00      	ldr	r3, [sp, #0]
    1838:	2200      	movs	r2, #0
    183a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    183c:	9b00      	ldr	r3, [sp, #0]
    183e:	4a17      	ldr	r2, [pc, #92]	; (189c <_DoInit+0xa4>)
    1840:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    1842:	9b00      	ldr	r3, [sp, #0]
    1844:	4a17      	ldr	r2, [pc, #92]	; (18a4 <_DoInit+0xac>)
    1846:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    1848:	9b00      	ldr	r3, [sp, #0]
    184a:	2210      	movs	r2, #16
    184c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    184e:	9b00      	ldr	r3, [sp, #0]
    1850:	2200      	movs	r2, #0
    1852:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1854:	9b00      	ldr	r3, [sp, #0]
    1856:	2200      	movs	r2, #0
    1858:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    185a:	9b00      	ldr	r3, [sp, #0]
    185c:	2200      	movs	r2, #0
    185e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1860:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1864:	2300      	movs	r3, #0
    1866:	9301      	str	r3, [sp, #4]
    1868:	e00c      	b.n	1884 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    186a:	9b01      	ldr	r3, [sp, #4]
    186c:	f1c3 030f 	rsb	r3, r3, #15
    1870:	4a0d      	ldr	r2, [pc, #52]	; (18a8 <_DoInit+0xb0>)
    1872:	5cd1      	ldrb	r1, [r2, r3]
    1874:	9a00      	ldr	r2, [sp, #0]
    1876:	9b01      	ldr	r3, [sp, #4]
    1878:	4413      	add	r3, r2
    187a:	460a      	mov	r2, r1
    187c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    187e:	9b01      	ldr	r3, [sp, #4]
    1880:	3301      	adds	r3, #1
    1882:	9301      	str	r3, [sp, #4]
    1884:	9b01      	ldr	r3, [sp, #4]
    1886:	2b0f      	cmp	r3, #15
    1888:	d9ef      	bls.n	186a <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    188a:	f3bf 8f5f 	dmb	sy
}
    188e:	bf00      	nop
    1890:	b003      	add	sp, #12
    1892:	f85d fb04 	ldr.w	pc, [sp], #4
    1896:	bf00      	nop
    1898:	1fff97f0 	.word	0x1fff97f0
    189c:	0001901c 	.word	0x0001901c
    18a0:	1fff9898 	.word	0x1fff9898
    18a4:	1fff9c98 	.word	0x1fff9c98
    18a8:	0001a688 	.word	0x0001a688

000018ac <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    18ac:	b500      	push	{lr}
    18ae:	b08b      	sub	sp, #44	; 0x2c
    18b0:	9003      	str	r0, [sp, #12]
    18b2:	9102      	str	r1, [sp, #8]
    18b4:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    18b6:	2300      	movs	r3, #0
    18b8:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    18ba:	9b03      	ldr	r3, [sp, #12]
    18bc:	68db      	ldr	r3, [r3, #12]
    18be:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    18c0:	9b03      	ldr	r3, [sp, #12]
    18c2:	691b      	ldr	r3, [r3, #16]
    18c4:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    18c6:	9a06      	ldr	r2, [sp, #24]
    18c8:	9b07      	ldr	r3, [sp, #28]
    18ca:	429a      	cmp	r2, r3
    18cc:	d905      	bls.n	18da <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    18ce:	9a06      	ldr	r2, [sp, #24]
    18d0:	9b07      	ldr	r3, [sp, #28]
    18d2:	1ad3      	subs	r3, r2, r3
    18d4:	3b01      	subs	r3, #1
    18d6:	9309      	str	r3, [sp, #36]	; 0x24
    18d8:	e007      	b.n	18ea <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    18da:	9b03      	ldr	r3, [sp, #12]
    18dc:	689a      	ldr	r2, [r3, #8]
    18de:	9906      	ldr	r1, [sp, #24]
    18e0:	9b07      	ldr	r3, [sp, #28]
    18e2:	1acb      	subs	r3, r1, r3
    18e4:	4413      	add	r3, r2
    18e6:	3b01      	subs	r3, #1
    18e8:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    18ea:	9b03      	ldr	r3, [sp, #12]
    18ec:	689a      	ldr	r2, [r3, #8]
    18ee:	9b07      	ldr	r3, [sp, #28]
    18f0:	1ad3      	subs	r3, r2, r3
    18f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    18f4:	4293      	cmp	r3, r2
    18f6:	bf28      	it	cs
    18f8:	4613      	movcs	r3, r2
    18fa:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    18fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    18fe:	9b01      	ldr	r3, [sp, #4]
    1900:	4293      	cmp	r3, r2
    1902:	bf28      	it	cs
    1904:	4613      	movcs	r3, r2
    1906:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1908:	9b03      	ldr	r3, [sp, #12]
    190a:	685a      	ldr	r2, [r3, #4]
    190c:	9b07      	ldr	r3, [sp, #28]
    190e:	4413      	add	r3, r2
    1910:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    1912:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1914:	9902      	ldr	r1, [sp, #8]
    1916:	9805      	ldr	r0, [sp, #20]
    1918:	f000 fcb0 	bl	227c <memcpy>
    NumBytesWritten += NumBytesToWrite;
    191c:	9a08      	ldr	r2, [sp, #32]
    191e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1920:	4413      	add	r3, r2
    1922:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    1924:	9a02      	ldr	r2, [sp, #8]
    1926:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1928:	4413      	add	r3, r2
    192a:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    192c:	9a01      	ldr	r2, [sp, #4]
    192e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1930:	1ad3      	subs	r3, r2, r3
    1932:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    1934:	9a07      	ldr	r2, [sp, #28]
    1936:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1938:	4413      	add	r3, r2
    193a:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    193c:	9b03      	ldr	r3, [sp, #12]
    193e:	689b      	ldr	r3, [r3, #8]
    1940:	9a07      	ldr	r2, [sp, #28]
    1942:	429a      	cmp	r2, r3
    1944:	d101      	bne.n	194a <_WriteBlocking+0x9e>
      WrOff = 0u;
    1946:	2300      	movs	r3, #0
    1948:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    194a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    194e:	9b03      	ldr	r3, [sp, #12]
    1950:	9a07      	ldr	r2, [sp, #28]
    1952:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    1954:	9b01      	ldr	r3, [sp, #4]
    1956:	2b00      	cmp	r3, #0
    1958:	d1b2      	bne.n	18c0 <_WriteBlocking+0x14>
  return NumBytesWritten;
    195a:	9b08      	ldr	r3, [sp, #32]
}
    195c:	4618      	mov	r0, r3
    195e:	b00b      	add	sp, #44	; 0x2c
    1960:	f85d fb04 	ldr.w	pc, [sp], #4

00001964 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1964:	b500      	push	{lr}
    1966:	b089      	sub	sp, #36	; 0x24
    1968:	9003      	str	r0, [sp, #12]
    196a:	9102      	str	r1, [sp, #8]
    196c:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    196e:	9b03      	ldr	r3, [sp, #12]
    1970:	68db      	ldr	r3, [r3, #12]
    1972:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    1974:	9b03      	ldr	r3, [sp, #12]
    1976:	689a      	ldr	r2, [r3, #8]
    1978:	9b07      	ldr	r3, [sp, #28]
    197a:	1ad3      	subs	r3, r2, r3
    197c:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    197e:	9a06      	ldr	r2, [sp, #24]
    1980:	9b01      	ldr	r3, [sp, #4]
    1982:	429a      	cmp	r2, r3
    1984:	d911      	bls.n	19aa <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1986:	9b03      	ldr	r3, [sp, #12]
    1988:	685a      	ldr	r2, [r3, #4]
    198a:	9b07      	ldr	r3, [sp, #28]
    198c:	4413      	add	r3, r2
    198e:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    1990:	9a01      	ldr	r2, [sp, #4]
    1992:	9902      	ldr	r1, [sp, #8]
    1994:	9804      	ldr	r0, [sp, #16]
    1996:	f000 fc71 	bl	227c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    199a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    199e:	9a07      	ldr	r2, [sp, #28]
    19a0:	9b01      	ldr	r3, [sp, #4]
    19a2:	441a      	add	r2, r3
    19a4:	9b03      	ldr	r3, [sp, #12]
    19a6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    19a8:	e01f      	b.n	19ea <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    19aa:	9b06      	ldr	r3, [sp, #24]
    19ac:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    19ae:	9b03      	ldr	r3, [sp, #12]
    19b0:	685a      	ldr	r2, [r3, #4]
    19b2:	9b07      	ldr	r3, [sp, #28]
    19b4:	4413      	add	r3, r2
    19b6:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    19b8:	9a05      	ldr	r2, [sp, #20]
    19ba:	9902      	ldr	r1, [sp, #8]
    19bc:	9804      	ldr	r0, [sp, #16]
    19be:	f000 fc5d 	bl	227c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    19c2:	9a01      	ldr	r2, [sp, #4]
    19c4:	9b06      	ldr	r3, [sp, #24]
    19c6:	1ad3      	subs	r3, r2, r3
    19c8:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    19ca:	9b03      	ldr	r3, [sp, #12]
    19cc:	685b      	ldr	r3, [r3, #4]
    19ce:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    19d0:	9a02      	ldr	r2, [sp, #8]
    19d2:	9b06      	ldr	r3, [sp, #24]
    19d4:	4413      	add	r3, r2
    19d6:	9a05      	ldr	r2, [sp, #20]
    19d8:	4619      	mov	r1, r3
    19da:	9804      	ldr	r0, [sp, #16]
    19dc:	f000 fc4e 	bl	227c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    19e0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    19e4:	9b03      	ldr	r3, [sp, #12]
    19e6:	9a05      	ldr	r2, [sp, #20]
    19e8:	60da      	str	r2, [r3, #12]
}
    19ea:	bf00      	nop
    19ec:	b009      	add	sp, #36	; 0x24
    19ee:	f85d fb04 	ldr.w	pc, [sp], #4

000019f2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    19f2:	b086      	sub	sp, #24
    19f4:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    19f6:	9b01      	ldr	r3, [sp, #4]
    19f8:	691b      	ldr	r3, [r3, #16]
    19fa:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    19fc:	9b01      	ldr	r3, [sp, #4]
    19fe:	68db      	ldr	r3, [r3, #12]
    1a00:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1a02:	9a04      	ldr	r2, [sp, #16]
    1a04:	9b03      	ldr	r3, [sp, #12]
    1a06:	429a      	cmp	r2, r3
    1a08:	d808      	bhi.n	1a1c <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1a0a:	9b01      	ldr	r3, [sp, #4]
    1a0c:	689a      	ldr	r2, [r3, #8]
    1a0e:	9b03      	ldr	r3, [sp, #12]
    1a10:	1ad2      	subs	r2, r2, r3
    1a12:	9b04      	ldr	r3, [sp, #16]
    1a14:	4413      	add	r3, r2
    1a16:	3b01      	subs	r3, #1
    1a18:	9305      	str	r3, [sp, #20]
    1a1a:	e004      	b.n	1a26 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    1a1c:	9a04      	ldr	r2, [sp, #16]
    1a1e:	9b03      	ldr	r3, [sp, #12]
    1a20:	1ad3      	subs	r3, r2, r3
    1a22:	3b01      	subs	r3, #1
    1a24:	9305      	str	r3, [sp, #20]
  }
  return r;
    1a26:	9b05      	ldr	r3, [sp, #20]
}
    1a28:	4618      	mov	r0, r3
    1a2a:	b006      	add	sp, #24
    1a2c:	4770      	bx	lr
	...

00001a30 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1a30:	b500      	push	{lr}
    1a32:	b089      	sub	sp, #36	; 0x24
    1a34:	9003      	str	r0, [sp, #12]
    1a36:	9102      	str	r1, [sp, #8]
    1a38:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    1a3a:	9b02      	ldr	r3, [sp, #8]
    1a3c:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1a3e:	9b03      	ldr	r3, [sp, #12]
    1a40:	1c5a      	adds	r2, r3, #1
    1a42:	4613      	mov	r3, r2
    1a44:	005b      	lsls	r3, r3, #1
    1a46:	4413      	add	r3, r2
    1a48:	00db      	lsls	r3, r3, #3
    1a4a:	4a20      	ldr	r2, [pc, #128]	; (1acc <SEGGER_RTT_WriteNoLock+0x9c>)
    1a4c:	4413      	add	r3, r2
    1a4e:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1a50:	9b05      	ldr	r3, [sp, #20]
    1a52:	695b      	ldr	r3, [r3, #20]
    1a54:	2b02      	cmp	r3, #2
    1a56:	d029      	beq.n	1aac <SEGGER_RTT_WriteNoLock+0x7c>
    1a58:	2b02      	cmp	r3, #2
    1a5a:	d82e      	bhi.n	1aba <SEGGER_RTT_WriteNoLock+0x8a>
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d002      	beq.n	1a66 <SEGGER_RTT_WriteNoLock+0x36>
    1a60:	2b01      	cmp	r3, #1
    1a62:	d013      	beq.n	1a8c <SEGGER_RTT_WriteNoLock+0x5c>
    1a64:	e029      	b.n	1aba <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1a66:	9805      	ldr	r0, [sp, #20]
    1a68:	f7ff ffc3 	bl	19f2 <_GetAvailWriteSpace>
    1a6c:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    1a6e:	9a04      	ldr	r2, [sp, #16]
    1a70:	9b01      	ldr	r3, [sp, #4]
    1a72:	429a      	cmp	r2, r3
    1a74:	d202      	bcs.n	1a7c <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1a76:	2300      	movs	r3, #0
    1a78:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    1a7a:	e021      	b.n	1ac0 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    1a7c:	9b01      	ldr	r3, [sp, #4]
    1a7e:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1a80:	9a01      	ldr	r2, [sp, #4]
    1a82:	9906      	ldr	r1, [sp, #24]
    1a84:	9805      	ldr	r0, [sp, #20]
    1a86:	f7ff ff6d 	bl	1964 <_WriteNoCheck>
    break;
    1a8a:	e019      	b.n	1ac0 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1a8c:	9805      	ldr	r0, [sp, #20]
    1a8e:	f7ff ffb0 	bl	19f2 <_GetAvailWriteSpace>
    1a92:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1a94:	9a01      	ldr	r2, [sp, #4]
    1a96:	9b04      	ldr	r3, [sp, #16]
    1a98:	4293      	cmp	r3, r2
    1a9a:	bf28      	it	cs
    1a9c:	4613      	movcs	r3, r2
    1a9e:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    1aa0:	9a07      	ldr	r2, [sp, #28]
    1aa2:	9906      	ldr	r1, [sp, #24]
    1aa4:	9805      	ldr	r0, [sp, #20]
    1aa6:	f7ff ff5d 	bl	1964 <_WriteNoCheck>
    break;
    1aaa:	e009      	b.n	1ac0 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1aac:	9a01      	ldr	r2, [sp, #4]
    1aae:	9906      	ldr	r1, [sp, #24]
    1ab0:	9805      	ldr	r0, [sp, #20]
    1ab2:	f7ff fefb 	bl	18ac <_WriteBlocking>
    1ab6:	9007      	str	r0, [sp, #28]
    break;
    1ab8:	e002      	b.n	1ac0 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    1aba:	2300      	movs	r3, #0
    1abc:	9307      	str	r3, [sp, #28]
    break;
    1abe:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1ac0:	9b07      	ldr	r3, [sp, #28]
}
    1ac2:	4618      	mov	r0, r3
    1ac4:	b009      	add	sp, #36	; 0x24
    1ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    1aca:	bf00      	nop
    1acc:	1fff97f0 	.word	0x1fff97f0

00001ad0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1ad0:	b500      	push	{lr}
    1ad2:	b089      	sub	sp, #36	; 0x24
    1ad4:	9003      	str	r0, [sp, #12]
    1ad6:	9102      	str	r1, [sp, #8]
    1ad8:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    1ada:	4b0f      	ldr	r3, [pc, #60]	; (1b18 <SEGGER_RTT_Write+0x48>)
    1adc:	9307      	str	r3, [sp, #28]
    1ade:	9b07      	ldr	r3, [sp, #28]
    1ae0:	781b      	ldrb	r3, [r3, #0]
    1ae2:	b2db      	uxtb	r3, r3
    1ae4:	2b53      	cmp	r3, #83	; 0x53
    1ae6:	d001      	beq.n	1aec <SEGGER_RTT_Write+0x1c>
    1ae8:	f7ff fe86 	bl	17f8 <_DoInit>
  SEGGER_RTT_LOCK();
    1aec:	f3ef 8311 	mrs	r3, BASEPRI
    1af0:	f04f 0120 	mov.w	r1, #32
    1af4:	f381 8811 	msr	BASEPRI, r1
    1af8:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1afa:	9a01      	ldr	r2, [sp, #4]
    1afc:	9902      	ldr	r1, [sp, #8]
    1afe:	9803      	ldr	r0, [sp, #12]
    1b00:	f7ff ff96 	bl	1a30 <SEGGER_RTT_WriteNoLock>
    1b04:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1b06:	9b06      	ldr	r3, [sp, #24]
    1b08:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1b0c:	9b05      	ldr	r3, [sp, #20]
}
    1b0e:	4618      	mov	r0, r3
    1b10:	b009      	add	sp, #36	; 0x24
    1b12:	f85d fb04 	ldr.w	pc, [sp], #4
    1b16:	bf00      	nop
    1b18:	1fff97f0 	.word	0x1fff97f0

00001b1c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1b1c:	b508      	push	{r3, lr}
  _DoInit();
    1b1e:	f7ff fe6b 	bl	17f8 <_DoInit>
}
    1b22:	bf00      	nop
    1b24:	bd08      	pop	{r3, pc}

00001b26 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1b26:	b500      	push	{lr}
    1b28:	b085      	sub	sp, #20
    1b2a:	9001      	str	r0, [sp, #4]
    1b2c:	460b      	mov	r3, r1
    1b2e:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1b32:	9b01      	ldr	r3, [sp, #4]
    1b34:	689b      	ldr	r3, [r3, #8]
    1b36:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1b38:	9b03      	ldr	r3, [sp, #12]
    1b3a:	1c5a      	adds	r2, r3, #1
    1b3c:	9b01      	ldr	r3, [sp, #4]
    1b3e:	685b      	ldr	r3, [r3, #4]
    1b40:	429a      	cmp	r2, r3
    1b42:	d80f      	bhi.n	1b64 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1b44:	9b01      	ldr	r3, [sp, #4]
    1b46:	681a      	ldr	r2, [r3, #0]
    1b48:	9b03      	ldr	r3, [sp, #12]
    1b4a:	4413      	add	r3, r2
    1b4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1b50:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1b52:	9b03      	ldr	r3, [sp, #12]
    1b54:	1c5a      	adds	r2, r3, #1
    1b56:	9b01      	ldr	r3, [sp, #4]
    1b58:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    1b5a:	9b01      	ldr	r3, [sp, #4]
    1b5c:	68db      	ldr	r3, [r3, #12]
    1b5e:	1c5a      	adds	r2, r3, #1
    1b60:	9b01      	ldr	r3, [sp, #4]
    1b62:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1b64:	9b01      	ldr	r3, [sp, #4]
    1b66:	689a      	ldr	r2, [r3, #8]
    1b68:	9b01      	ldr	r3, [sp, #4]
    1b6a:	685b      	ldr	r3, [r3, #4]
    1b6c:	429a      	cmp	r2, r3
    1b6e:	d115      	bne.n	1b9c <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1b70:	9b01      	ldr	r3, [sp, #4]
    1b72:	6918      	ldr	r0, [r3, #16]
    1b74:	9b01      	ldr	r3, [sp, #4]
    1b76:	6819      	ldr	r1, [r3, #0]
    1b78:	9b01      	ldr	r3, [sp, #4]
    1b7a:	689b      	ldr	r3, [r3, #8]
    1b7c:	461a      	mov	r2, r3
    1b7e:	f7ff ffa7 	bl	1ad0 <SEGGER_RTT_Write>
    1b82:	4602      	mov	r2, r0
    1b84:	9b01      	ldr	r3, [sp, #4]
    1b86:	689b      	ldr	r3, [r3, #8]
    1b88:	429a      	cmp	r2, r3
    1b8a:	d004      	beq.n	1b96 <_StoreChar+0x70>
      p->ReturnValue = -1;
    1b8c:	9b01      	ldr	r3, [sp, #4]
    1b8e:	f04f 32ff 	mov.w	r2, #4294967295
    1b92:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1b94:	e002      	b.n	1b9c <_StoreChar+0x76>
      p->Cnt = 0u;
    1b96:	9b01      	ldr	r3, [sp, #4]
    1b98:	2200      	movs	r2, #0
    1b9a:	609a      	str	r2, [r3, #8]
}
    1b9c:	bf00      	nop
    1b9e:	b005      	add	sp, #20
    1ba0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ba4 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1ba4:	b500      	push	{lr}
    1ba6:	b08b      	sub	sp, #44	; 0x2c
    1ba8:	9003      	str	r0, [sp, #12]
    1baa:	9102      	str	r1, [sp, #8]
    1bac:	9201      	str	r2, [sp, #4]
    1bae:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1bb0:	9b02      	ldr	r3, [sp, #8]
    1bb2:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1bb4:	2301      	movs	r3, #1
    1bb6:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1bb8:	2301      	movs	r3, #1
    1bba:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1bbc:	e007      	b.n	1bce <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    1bbe:	9a08      	ldr	r2, [sp, #32]
    1bc0:	9b01      	ldr	r3, [sp, #4]
    1bc2:	fbb2 f3f3 	udiv	r3, r2, r3
    1bc6:	9308      	str	r3, [sp, #32]
    Width++;
    1bc8:	9b07      	ldr	r3, [sp, #28]
    1bca:	3301      	adds	r3, #1
    1bcc:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1bce:	9a08      	ldr	r2, [sp, #32]
    1bd0:	9b01      	ldr	r3, [sp, #4]
    1bd2:	429a      	cmp	r2, r3
    1bd4:	d2f3      	bcs.n	1bbe <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1bd6:	9a00      	ldr	r2, [sp, #0]
    1bd8:	9b07      	ldr	r3, [sp, #28]
    1bda:	429a      	cmp	r2, r3
    1bdc:	d901      	bls.n	1be2 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1bde:	9b00      	ldr	r3, [sp, #0]
    1be0:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1be4:	f003 0301 	and.w	r3, r3, #1
    1be8:	2b00      	cmp	r3, #0
    1bea:	d128      	bne.n	1c3e <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1bec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d025      	beq.n	1c3e <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1bf4:	f003 0302 	and.w	r3, r3, #2
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d006      	beq.n	1c0a <_PrintUnsigned+0x66>
    1bfc:	9b00      	ldr	r3, [sp, #0]
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d103      	bne.n	1c0a <_PrintUnsigned+0x66>
        c = '0';
    1c02:	2330      	movs	r3, #48	; 0x30
    1c04:	f88d 301b 	strb.w	r3, [sp, #27]
    1c08:	e002      	b.n	1c10 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1c0a:	2320      	movs	r3, #32
    1c0c:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c10:	e00c      	b.n	1c2c <_PrintUnsigned+0x88>
        FieldWidth--;
    1c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c14:	3b01      	subs	r3, #1
    1c16:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1c18:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1c1c:	4619      	mov	r1, r3
    1c1e:	9803      	ldr	r0, [sp, #12]
    1c20:	f7ff ff81 	bl	1b26 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1c24:	9b03      	ldr	r3, [sp, #12]
    1c26:	68db      	ldr	r3, [r3, #12]
    1c28:	2b00      	cmp	r3, #0
    1c2a:	db07      	blt.n	1c3c <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d005      	beq.n	1c3e <_PrintUnsigned+0x9a>
    1c32:	9a07      	ldr	r2, [sp, #28]
    1c34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c36:	429a      	cmp	r2, r3
    1c38:	d3eb      	bcc.n	1c12 <_PrintUnsigned+0x6e>
    1c3a:	e000      	b.n	1c3e <_PrintUnsigned+0x9a>
          break;
    1c3c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1c3e:	9b03      	ldr	r3, [sp, #12]
    1c40:	68db      	ldr	r3, [r3, #12]
    1c42:	2b00      	cmp	r3, #0
    1c44:	db55      	blt.n	1cf2 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1c46:	9b00      	ldr	r3, [sp, #0]
    1c48:	2b01      	cmp	r3, #1
    1c4a:	d903      	bls.n	1c54 <_PrintUnsigned+0xb0>
        NumDigits--;
    1c4c:	9b00      	ldr	r3, [sp, #0]
    1c4e:	3b01      	subs	r3, #1
    1c50:	9300      	str	r3, [sp, #0]
    1c52:	e009      	b.n	1c68 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1c54:	9a02      	ldr	r2, [sp, #8]
    1c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c58:	fbb2 f3f3 	udiv	r3, r2, r3
    1c5c:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1c5e:	9a05      	ldr	r2, [sp, #20]
    1c60:	9b01      	ldr	r3, [sp, #4]
    1c62:	429a      	cmp	r2, r3
    1c64:	d200      	bcs.n	1c68 <_PrintUnsigned+0xc4>
          break;
    1c66:	e005      	b.n	1c74 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c6a:	9a01      	ldr	r2, [sp, #4]
    1c6c:	fb02 f303 	mul.w	r3, r2, r3
    1c70:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1c72:	e7e8      	b.n	1c46 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1c74:	9a02      	ldr	r2, [sp, #8]
    1c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c78:	fbb2 f3f3 	udiv	r3, r2, r3
    1c7c:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1c7e:	9b05      	ldr	r3, [sp, #20]
    1c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1c82:	fb02 f303 	mul.w	r3, r2, r3
    1c86:	9a02      	ldr	r2, [sp, #8]
    1c88:	1ad3      	subs	r3, r2, r3
    1c8a:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1c8c:	4a1b      	ldr	r2, [pc, #108]	; (1cfc <_PrintUnsigned+0x158>)
    1c8e:	9b05      	ldr	r3, [sp, #20]
    1c90:	4413      	add	r3, r2
    1c92:	781b      	ldrb	r3, [r3, #0]
    1c94:	4619      	mov	r1, r3
    1c96:	9803      	ldr	r0, [sp, #12]
    1c98:	f7ff ff45 	bl	1b26 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1c9c:	9b03      	ldr	r3, [sp, #12]
    1c9e:	68db      	ldr	r3, [r3, #12]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	db08      	blt.n	1cb6 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1ca6:	9b01      	ldr	r3, [sp, #4]
    1ca8:	fbb2 f3f3 	udiv	r3, r2, r3
    1cac:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	d1df      	bne.n	1c74 <_PrintUnsigned+0xd0>
    1cb4:	e000      	b.n	1cb8 <_PrintUnsigned+0x114>
        break;
    1cb6:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1cba:	f003 0301 	and.w	r3, r3, #1
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d017      	beq.n	1cf2 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d014      	beq.n	1cf2 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1cc8:	e00a      	b.n	1ce0 <_PrintUnsigned+0x13c>
          FieldWidth--;
    1cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1ccc:	3b01      	subs	r3, #1
    1cce:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1cd0:	2120      	movs	r1, #32
    1cd2:	9803      	ldr	r0, [sp, #12]
    1cd4:	f7ff ff27 	bl	1b26 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1cd8:	9b03      	ldr	r3, [sp, #12]
    1cda:	68db      	ldr	r3, [r3, #12]
    1cdc:	2b00      	cmp	r3, #0
    1cde:	db07      	blt.n	1cf0 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d005      	beq.n	1cf2 <_PrintUnsigned+0x14e>
    1ce6:	9a07      	ldr	r2, [sp, #28]
    1ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1cea:	429a      	cmp	r2, r3
    1cec:	d3ed      	bcc.n	1cca <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1cee:	e000      	b.n	1cf2 <_PrintUnsigned+0x14e>
            break;
    1cf0:	bf00      	nop
}
    1cf2:	bf00      	nop
    1cf4:	b00b      	add	sp, #44	; 0x2c
    1cf6:	f85d fb04 	ldr.w	pc, [sp], #4
    1cfa:	bf00      	nop
    1cfc:	0001a69c 	.word	0x0001a69c

00001d00 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1d00:	b500      	push	{lr}
    1d02:	b089      	sub	sp, #36	; 0x24
    1d04:	9005      	str	r0, [sp, #20]
    1d06:	9104      	str	r1, [sp, #16]
    1d08:	9203      	str	r2, [sp, #12]
    1d0a:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1d0c:	9b04      	ldr	r3, [sp, #16]
    1d0e:	2b00      	cmp	r3, #0
    1d10:	bfb8      	it	lt
    1d12:	425b      	neglt	r3, r3
    1d14:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1d16:	2301      	movs	r3, #1
    1d18:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1d1a:	e007      	b.n	1d2c <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1d1c:	9b03      	ldr	r3, [sp, #12]
    1d1e:	9a06      	ldr	r2, [sp, #24]
    1d20:	fb92 f3f3 	sdiv	r3, r2, r3
    1d24:	9306      	str	r3, [sp, #24]
    Width++;
    1d26:	9b07      	ldr	r3, [sp, #28]
    1d28:	3301      	adds	r3, #1
    1d2a:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1d2c:	9b03      	ldr	r3, [sp, #12]
    1d2e:	9a06      	ldr	r2, [sp, #24]
    1d30:	429a      	cmp	r2, r3
    1d32:	daf3      	bge.n	1d1c <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1d34:	9a02      	ldr	r2, [sp, #8]
    1d36:	9b07      	ldr	r3, [sp, #28]
    1d38:	429a      	cmp	r2, r3
    1d3a:	d901      	bls.n	1d40 <_PrintInt+0x40>
    Width = NumDigits;
    1d3c:	9b02      	ldr	r3, [sp, #8]
    1d3e:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d42:	2b00      	cmp	r3, #0
    1d44:	d00a      	beq.n	1d5c <_PrintInt+0x5c>
    1d46:	9b04      	ldr	r3, [sp, #16]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	db04      	blt.n	1d56 <_PrintInt+0x56>
    1d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d4e:	f003 0304 	and.w	r3, r3, #4
    1d52:	2b00      	cmp	r3, #0
    1d54:	d002      	beq.n	1d5c <_PrintInt+0x5c>
    FieldWidth--;
    1d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d58:	3b01      	subs	r3, #1
    1d5a:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d5e:	f003 0302 	and.w	r3, r3, #2
    1d62:	2b00      	cmp	r3, #0
    1d64:	d002      	beq.n	1d6c <_PrintInt+0x6c>
    1d66:	9b02      	ldr	r3, [sp, #8]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d01c      	beq.n	1da6 <_PrintInt+0xa6>
    1d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d6e:	f003 0301 	and.w	r3, r3, #1
    1d72:	2b00      	cmp	r3, #0
    1d74:	d117      	bne.n	1da6 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d014      	beq.n	1da6 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d7c:	e00a      	b.n	1d94 <_PrintInt+0x94>
        FieldWidth--;
    1d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d80:	3b01      	subs	r3, #1
    1d82:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1d84:	2120      	movs	r1, #32
    1d86:	9805      	ldr	r0, [sp, #20]
    1d88:	f7ff fecd 	bl	1b26 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1d8c:	9b05      	ldr	r3, [sp, #20]
    1d8e:	68db      	ldr	r3, [r3, #12]
    1d90:	2b00      	cmp	r3, #0
    1d92:	db07      	blt.n	1da4 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d96:	2b00      	cmp	r3, #0
    1d98:	d005      	beq.n	1da6 <_PrintInt+0xa6>
    1d9a:	9a07      	ldr	r2, [sp, #28]
    1d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d9e:	429a      	cmp	r2, r3
    1da0:	d3ed      	bcc.n	1d7e <_PrintInt+0x7e>
    1da2:	e000      	b.n	1da6 <_PrintInt+0xa6>
          break;
    1da4:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1da6:	9b05      	ldr	r3, [sp, #20]
    1da8:	68db      	ldr	r3, [r3, #12]
    1daa:	2b00      	cmp	r3, #0
    1dac:	db4a      	blt.n	1e44 <_PrintInt+0x144>
    if (v < 0) {
    1dae:	9b04      	ldr	r3, [sp, #16]
    1db0:	2b00      	cmp	r3, #0
    1db2:	da07      	bge.n	1dc4 <_PrintInt+0xc4>
      v = -v;
    1db4:	9b04      	ldr	r3, [sp, #16]
    1db6:	425b      	negs	r3, r3
    1db8:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1dba:	212d      	movs	r1, #45	; 0x2d
    1dbc:	9805      	ldr	r0, [sp, #20]
    1dbe:	f7ff feb2 	bl	1b26 <_StoreChar>
    1dc2:	e008      	b.n	1dd6 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dc6:	f003 0304 	and.w	r3, r3, #4
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d003      	beq.n	1dd6 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1dce:	212b      	movs	r1, #43	; 0x2b
    1dd0:	9805      	ldr	r0, [sp, #20]
    1dd2:	f7ff fea8 	bl	1b26 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1dd6:	9b05      	ldr	r3, [sp, #20]
    1dd8:	68db      	ldr	r3, [r3, #12]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	db32      	blt.n	1e44 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1de0:	f003 0302 	and.w	r3, r3, #2
    1de4:	2b00      	cmp	r3, #0
    1de6:	d01f      	beq.n	1e28 <_PrintInt+0x128>
    1de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dea:	f003 0301 	and.w	r3, r3, #1
    1dee:	2b00      	cmp	r3, #0
    1df0:	d11a      	bne.n	1e28 <_PrintInt+0x128>
    1df2:	9b02      	ldr	r3, [sp, #8]
    1df4:	2b00      	cmp	r3, #0
    1df6:	d117      	bne.n	1e28 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d014      	beq.n	1e28 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1dfe:	e00a      	b.n	1e16 <_PrintInt+0x116>
            FieldWidth--;
    1e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e02:	3b01      	subs	r3, #1
    1e04:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1e06:	2130      	movs	r1, #48	; 0x30
    1e08:	9805      	ldr	r0, [sp, #20]
    1e0a:	f7ff fe8c 	bl	1b26 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1e0e:	9b05      	ldr	r3, [sp, #20]
    1e10:	68db      	ldr	r3, [r3, #12]
    1e12:	2b00      	cmp	r3, #0
    1e14:	db07      	blt.n	1e26 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e18:	2b00      	cmp	r3, #0
    1e1a:	d005      	beq.n	1e28 <_PrintInt+0x128>
    1e1c:	9a07      	ldr	r2, [sp, #28]
    1e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e20:	429a      	cmp	r2, r3
    1e22:	d3ed      	bcc.n	1e00 <_PrintInt+0x100>
    1e24:	e000      	b.n	1e28 <_PrintInt+0x128>
              break;
    1e26:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1e28:	9b05      	ldr	r3, [sp, #20]
    1e2a:	68db      	ldr	r3, [r3, #12]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	db09      	blt.n	1e44 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1e30:	9904      	ldr	r1, [sp, #16]
    1e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e34:	9301      	str	r3, [sp, #4]
    1e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e38:	9300      	str	r3, [sp, #0]
    1e3a:	9b02      	ldr	r3, [sp, #8]
    1e3c:	9a03      	ldr	r2, [sp, #12]
    1e3e:	9805      	ldr	r0, [sp, #20]
    1e40:	f7ff feb0 	bl	1ba4 <_PrintUnsigned>
      }
    }
  }
}
    1e44:	bf00      	nop
    1e46:	b009      	add	sp, #36	; 0x24
    1e48:	f85d fb04 	ldr.w	pc, [sp], #4

00001e4c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1e4c:	b500      	push	{lr}
    1e4e:	b0a3      	sub	sp, #140	; 0x8c
    1e50:	9005      	str	r0, [sp, #20]
    1e52:	9104      	str	r1, [sp, #16]
    1e54:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1e56:	ab06      	add	r3, sp, #24
    1e58:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1e5a:	2340      	movs	r3, #64	; 0x40
    1e5c:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1e5e:	2300      	movs	r3, #0
    1e60:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1e62:	9b05      	ldr	r3, [sp, #20]
    1e64:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1e66:	2300      	movs	r3, #0
    1e68:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1e6a:	9b04      	ldr	r3, [sp, #16]
    1e6c:	781b      	ldrb	r3, [r3, #0]
    1e6e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1e72:	9b04      	ldr	r3, [sp, #16]
    1e74:	3301      	adds	r3, #1
    1e76:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1e78:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	f000 819c 	beq.w	21ba <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1e82:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1e86:	2b25      	cmp	r3, #37	; 0x25
    1e88:	f040 818b 	bne.w	21a2 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1e8c:	2300      	movs	r3, #0
    1e8e:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1e90:	2301      	movs	r3, #1
    1e92:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1e94:	9b04      	ldr	r3, [sp, #16]
    1e96:	781b      	ldrb	r3, [r3, #0]
    1e98:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1e9c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1ea0:	3b23      	subs	r3, #35	; 0x23
    1ea2:	2b0d      	cmp	r3, #13
    1ea4:	d83e      	bhi.n	1f24 <SEGGER_RTT_vprintf+0xd8>
    1ea6:	a201      	add	r2, pc, #4	; (adr r2, 1eac <SEGGER_RTT_vprintf+0x60>)
    1ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1eac:	00001f15 	.word	0x00001f15
    1eb0:	00001f25 	.word	0x00001f25
    1eb4:	00001f25 	.word	0x00001f25
    1eb8:	00001f25 	.word	0x00001f25
    1ebc:	00001f25 	.word	0x00001f25
    1ec0:	00001f25 	.word	0x00001f25
    1ec4:	00001f25 	.word	0x00001f25
    1ec8:	00001f25 	.word	0x00001f25
    1ecc:	00001f05 	.word	0x00001f05
    1ed0:	00001f25 	.word	0x00001f25
    1ed4:	00001ee5 	.word	0x00001ee5
    1ed8:	00001f25 	.word	0x00001f25
    1edc:	00001f25 	.word	0x00001f25
    1ee0:	00001ef5 	.word	0x00001ef5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1ee4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1ee6:	f043 0301 	orr.w	r3, r3, #1
    1eea:	931e      	str	r3, [sp, #120]	; 0x78
    1eec:	9b04      	ldr	r3, [sp, #16]
    1eee:	3301      	adds	r3, #1
    1ef0:	9304      	str	r3, [sp, #16]
    1ef2:	e01a      	b.n	1f2a <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1ef4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1ef6:	f043 0302 	orr.w	r3, r3, #2
    1efa:	931e      	str	r3, [sp, #120]	; 0x78
    1efc:	9b04      	ldr	r3, [sp, #16]
    1efe:	3301      	adds	r3, #1
    1f00:	9304      	str	r3, [sp, #16]
    1f02:	e012      	b.n	1f2a <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1f04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f06:	f043 0304 	orr.w	r3, r3, #4
    1f0a:	931e      	str	r3, [sp, #120]	; 0x78
    1f0c:	9b04      	ldr	r3, [sp, #16]
    1f0e:	3301      	adds	r3, #1
    1f10:	9304      	str	r3, [sp, #16]
    1f12:	e00a      	b.n	1f2a <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1f14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1f16:	f043 0308 	orr.w	r3, r3, #8
    1f1a:	931e      	str	r3, [sp, #120]	; 0x78
    1f1c:	9b04      	ldr	r3, [sp, #16]
    1f1e:	3301      	adds	r3, #1
    1f20:	9304      	str	r3, [sp, #16]
    1f22:	e002      	b.n	1f2a <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1f24:	2300      	movs	r3, #0
    1f26:	9320      	str	r3, [sp, #128]	; 0x80
    1f28:	bf00      	nop
        }
      } while (v);
    1f2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	d1b1      	bne.n	1e94 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1f30:	2300      	movs	r3, #0
    1f32:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1f34:	9b04      	ldr	r3, [sp, #16]
    1f36:	781b      	ldrb	r3, [r3, #0]
    1f38:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1f3c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f40:	2b2f      	cmp	r3, #47	; 0x2f
    1f42:	d912      	bls.n	1f6a <SEGGER_RTT_vprintf+0x11e>
    1f44:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f48:	2b39      	cmp	r3, #57	; 0x39
    1f4a:	d80e      	bhi.n	1f6a <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1f4c:	9b04      	ldr	r3, [sp, #16]
    1f4e:	3301      	adds	r3, #1
    1f50:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1f52:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1f54:	4613      	mov	r3, r2
    1f56:	009b      	lsls	r3, r3, #2
    1f58:	4413      	add	r3, r2
    1f5a:	005b      	lsls	r3, r3, #1
    1f5c:	461a      	mov	r2, r3
    1f5e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f62:	4413      	add	r3, r2
    1f64:	3b30      	subs	r3, #48	; 0x30
    1f66:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1f68:	e7e4      	b.n	1f34 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1f6a:	2300      	movs	r3, #0
    1f6c:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1f6e:	9b04      	ldr	r3, [sp, #16]
    1f70:	781b      	ldrb	r3, [r3, #0]
    1f72:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1f76:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f7a:	2b2e      	cmp	r3, #46	; 0x2e
    1f7c:	d11d      	bne.n	1fba <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1f7e:	9b04      	ldr	r3, [sp, #16]
    1f80:	3301      	adds	r3, #1
    1f82:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1f84:	9b04      	ldr	r3, [sp, #16]
    1f86:	781b      	ldrb	r3, [r3, #0]
    1f88:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1f8c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f90:	2b2f      	cmp	r3, #47	; 0x2f
    1f92:	d912      	bls.n	1fba <SEGGER_RTT_vprintf+0x16e>
    1f94:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f98:	2b39      	cmp	r3, #57	; 0x39
    1f9a:	d80e      	bhi.n	1fba <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1f9c:	9b04      	ldr	r3, [sp, #16]
    1f9e:	3301      	adds	r3, #1
    1fa0:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1fa2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1fa4:	4613      	mov	r3, r2
    1fa6:	009b      	lsls	r3, r3, #2
    1fa8:	4413      	add	r3, r2
    1faa:	005b      	lsls	r3, r3, #1
    1fac:	461a      	mov	r2, r3
    1fae:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fb2:	4413      	add	r3, r2
    1fb4:	3b30      	subs	r3, #48	; 0x30
    1fb6:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1fb8:	e7e4      	b.n	1f84 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1fba:	9b04      	ldr	r3, [sp, #16]
    1fbc:	781b      	ldrb	r3, [r3, #0]
    1fbe:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1fc2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fc6:	2b6c      	cmp	r3, #108	; 0x6c
    1fc8:	d003      	beq.n	1fd2 <SEGGER_RTT_vprintf+0x186>
    1fca:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fce:	2b68      	cmp	r3, #104	; 0x68
    1fd0:	d107      	bne.n	1fe2 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1fd2:	9b04      	ldr	r3, [sp, #16]
    1fd4:	3301      	adds	r3, #1
    1fd6:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1fd8:	9b04      	ldr	r3, [sp, #16]
    1fda:	781b      	ldrb	r3, [r3, #0]
    1fdc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1fe0:	e7ef      	b.n	1fc2 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1fe2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fe6:	2b25      	cmp	r3, #37	; 0x25
    1fe8:	f000 80d0 	beq.w	218c <SEGGER_RTT_vprintf+0x340>
    1fec:	2b25      	cmp	r3, #37	; 0x25
    1fee:	f2c0 80d3 	blt.w	2198 <SEGGER_RTT_vprintf+0x34c>
    1ff2:	2b78      	cmp	r3, #120	; 0x78
    1ff4:	f300 80d0 	bgt.w	2198 <SEGGER_RTT_vprintf+0x34c>
    1ff8:	2b58      	cmp	r3, #88	; 0x58
    1ffa:	f2c0 80cd 	blt.w	2198 <SEGGER_RTT_vprintf+0x34c>
    1ffe:	3b58      	subs	r3, #88	; 0x58
    2000:	2b20      	cmp	r3, #32
    2002:	f200 80c9 	bhi.w	2198 <SEGGER_RTT_vprintf+0x34c>
    2006:	a201      	add	r2, pc, #4	; (adr r2, 200c <SEGGER_RTT_vprintf+0x1c0>)
    2008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    200c:	000020fd 	.word	0x000020fd
    2010:	00002199 	.word	0x00002199
    2014:	00002199 	.word	0x00002199
    2018:	00002199 	.word	0x00002199
    201c:	00002199 	.word	0x00002199
    2020:	00002199 	.word	0x00002199
    2024:	00002199 	.word	0x00002199
    2028:	00002199 	.word	0x00002199
    202c:	00002199 	.word	0x00002199
    2030:	00002199 	.word	0x00002199
    2034:	00002199 	.word	0x00002199
    2038:	00002091 	.word	0x00002091
    203c:	000020b5 	.word	0x000020b5
    2040:	00002199 	.word	0x00002199
    2044:	00002199 	.word	0x00002199
    2048:	00002199 	.word	0x00002199
    204c:	00002199 	.word	0x00002199
    2050:	00002199 	.word	0x00002199
    2054:	00002199 	.word	0x00002199
    2058:	00002199 	.word	0x00002199
    205c:	00002199 	.word	0x00002199
    2060:	00002199 	.word	0x00002199
    2064:	00002199 	.word	0x00002199
    2068:	00002199 	.word	0x00002199
    206c:	00002169 	.word	0x00002169
    2070:	00002199 	.word	0x00002199
    2074:	00002199 	.word	0x00002199
    2078:	00002121 	.word	0x00002121
    207c:	00002199 	.word	0x00002199
    2080:	000020d9 	.word	0x000020d9
    2084:	00002199 	.word	0x00002199
    2088:	00002199 	.word	0x00002199
    208c:	000020fd 	.word	0x000020fd
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    2090:	9b03      	ldr	r3, [sp, #12]
    2092:	681b      	ldr	r3, [r3, #0]
    2094:	1d19      	adds	r1, r3, #4
    2096:	9a03      	ldr	r2, [sp, #12]
    2098:	6011      	str	r1, [r2, #0]
    209a:	681b      	ldr	r3, [r3, #0]
    209c:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    209e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    20a0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    20a4:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    20a8:	ab16      	add	r3, sp, #88	; 0x58
    20aa:	4611      	mov	r1, r2
    20ac:	4618      	mov	r0, r3
    20ae:	f7ff fd3a 	bl	1b26 <_StoreChar>
        break;
    20b2:	e072      	b.n	219a <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    20b4:	9b03      	ldr	r3, [sp, #12]
    20b6:	681b      	ldr	r3, [r3, #0]
    20b8:	1d19      	adds	r1, r3, #4
    20ba:	9a03      	ldr	r2, [sp, #12]
    20bc:	6011      	str	r1, [r2, #0]
    20be:	681b      	ldr	r3, [r3, #0]
    20c0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    20c2:	a816      	add	r0, sp, #88	; 0x58
    20c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    20c6:	9301      	str	r3, [sp, #4]
    20c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    20ca:	9300      	str	r3, [sp, #0]
    20cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    20ce:	220a      	movs	r2, #10
    20d0:	9920      	ldr	r1, [sp, #128]	; 0x80
    20d2:	f7ff fe15 	bl	1d00 <_PrintInt>
        break;
    20d6:	e060      	b.n	219a <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    20d8:	9b03      	ldr	r3, [sp, #12]
    20da:	681b      	ldr	r3, [r3, #0]
    20dc:	1d19      	adds	r1, r3, #4
    20de:	9a03      	ldr	r2, [sp, #12]
    20e0:	6011      	str	r1, [r2, #0]
    20e2:	681b      	ldr	r3, [r3, #0]
    20e4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    20e6:	9920      	ldr	r1, [sp, #128]	; 0x80
    20e8:	a816      	add	r0, sp, #88	; 0x58
    20ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    20ec:	9301      	str	r3, [sp, #4]
    20ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    20f0:	9300      	str	r3, [sp, #0]
    20f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    20f4:	220a      	movs	r2, #10
    20f6:	f7ff fd55 	bl	1ba4 <_PrintUnsigned>
        break;
    20fa:	e04e      	b.n	219a <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    20fc:	9b03      	ldr	r3, [sp, #12]
    20fe:	681b      	ldr	r3, [r3, #0]
    2100:	1d19      	adds	r1, r3, #4
    2102:	9a03      	ldr	r2, [sp, #12]
    2104:	6011      	str	r1, [r2, #0]
    2106:	681b      	ldr	r3, [r3, #0]
    2108:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    210a:	9920      	ldr	r1, [sp, #128]	; 0x80
    210c:	a816      	add	r0, sp, #88	; 0x58
    210e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2110:	9301      	str	r3, [sp, #4]
    2112:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2114:	9300      	str	r3, [sp, #0]
    2116:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2118:	2210      	movs	r2, #16
    211a:	f7ff fd43 	bl	1ba4 <_PrintUnsigned>
        break;
    211e:	e03c      	b.n	219a <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    2120:	9b03      	ldr	r3, [sp, #12]
    2122:	681b      	ldr	r3, [r3, #0]
    2124:	1d19      	adds	r1, r3, #4
    2126:	9a03      	ldr	r2, [sp, #12]
    2128:	6011      	str	r1, [r2, #0]
    212a:	681b      	ldr	r3, [r3, #0]
    212c:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    212e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2130:	2b00      	cmp	r3, #0
    2132:	d101      	bne.n	2138 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    2134:	4b2c      	ldr	r3, [pc, #176]	; (21e8 <SEGGER_RTT_vprintf+0x39c>)
    2136:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    2138:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    213a:	781b      	ldrb	r3, [r3, #0]
    213c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    2140:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2142:	3301      	adds	r3, #1
    2144:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    2146:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    214a:	2b00      	cmp	r3, #0
    214c:	d00a      	beq.n	2164 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    214e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    2152:	ab16      	add	r3, sp, #88	; 0x58
    2154:	4611      	mov	r1, r2
    2156:	4618      	mov	r0, r3
    2158:	f7ff fce5 	bl	1b26 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    215c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    215e:	2b00      	cmp	r3, #0
    2160:	daea      	bge.n	2138 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    2162:	e01a      	b.n	219a <SEGGER_RTT_vprintf+0x34e>
              break;
    2164:	bf00      	nop
        break;
    2166:	e018      	b.n	219a <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    2168:	9b03      	ldr	r3, [sp, #12]
    216a:	681b      	ldr	r3, [r3, #0]
    216c:	1d19      	adds	r1, r3, #4
    216e:	9a03      	ldr	r2, [sp, #12]
    2170:	6011      	str	r1, [r2, #0]
    2172:	681b      	ldr	r3, [r3, #0]
    2174:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    2176:	9920      	ldr	r1, [sp, #128]	; 0x80
    2178:	a816      	add	r0, sp, #88	; 0x58
    217a:	2300      	movs	r3, #0
    217c:	9301      	str	r3, [sp, #4]
    217e:	2308      	movs	r3, #8
    2180:	9300      	str	r3, [sp, #0]
    2182:	2308      	movs	r3, #8
    2184:	2210      	movs	r2, #16
    2186:	f7ff fd0d 	bl	1ba4 <_PrintUnsigned>
        break;
    218a:	e006      	b.n	219a <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    218c:	ab16      	add	r3, sp, #88	; 0x58
    218e:	2125      	movs	r1, #37	; 0x25
    2190:	4618      	mov	r0, r3
    2192:	f7ff fcc8 	bl	1b26 <_StoreChar>
        break;
    2196:	e000      	b.n	219a <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    2198:	bf00      	nop
      }
      sFormat++;
    219a:	9b04      	ldr	r3, [sp, #16]
    219c:	3301      	adds	r3, #1
    219e:	9304      	str	r3, [sp, #16]
    21a0:	e006      	b.n	21b0 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    21a2:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    21a6:	ab16      	add	r3, sp, #88	; 0x58
    21a8:	4611      	mov	r1, r2
    21aa:	4618      	mov	r0, r3
    21ac:	f7ff fcbb 	bl	1b26 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    21b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    21b2:	2b00      	cmp	r3, #0
    21b4:	f6bf ae59 	bge.w	1e6a <SEGGER_RTT_vprintf+0x1e>
    21b8:	e000      	b.n	21bc <SEGGER_RTT_vprintf+0x370>
      break;
    21ba:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    21bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    21be:	2b00      	cmp	r3, #0
    21c0:	dd0c      	ble.n	21dc <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    21c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    21c4:	2b00      	cmp	r3, #0
    21c6:	d005      	beq.n	21d4 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    21c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    21ca:	ab06      	add	r3, sp, #24
    21cc:	4619      	mov	r1, r3
    21ce:	9805      	ldr	r0, [sp, #20]
    21d0:	f7ff fc7e 	bl	1ad0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    21d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    21d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    21d8:	4413      	add	r3, r2
    21da:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    21dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    21de:	4618      	mov	r0, r3
    21e0:	b023      	add	sp, #140	; 0x8c
    21e2:	f85d fb04 	ldr.w	pc, [sp], #4
    21e6:	bf00      	nop
    21e8:	00019028 	.word	0x00019028

000021ec <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    21ec:	b40e      	push	{r1, r2, r3}
    21ee:	b500      	push	{lr}
    21f0:	b084      	sub	sp, #16
    21f2:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    21f4:	ab06      	add	r3, sp, #24
    21f6:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    21f8:	ab02      	add	r3, sp, #8
    21fa:	461a      	mov	r2, r3
    21fc:	9905      	ldr	r1, [sp, #20]
    21fe:	9801      	ldr	r0, [sp, #4]
    2200:	f7ff fe24 	bl	1e4c <SEGGER_RTT_vprintf>
    2204:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    2206:	9b03      	ldr	r3, [sp, #12]
}
    2208:	4618      	mov	r0, r3
    220a:	b004      	add	sp, #16
    220c:	f85d eb04 	ldr.w	lr, [sp], #4
    2210:	b003      	add	sp, #12
    2212:	4770      	bx	lr

00002214 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    2214:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    2216:	4805      	ldr	r0, [pc, #20]	; (222c <MCU_clocks+0x18>)
    2218:	f004 fa18 	bl	664c <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    221c:	2000      	movs	r0, #0
    221e:	f004 fac9 	bl	67b4 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    2222:	2000      	movs	r0, #0
    2224:	f004 fa90 	bl	6748 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    2228:	bf00      	nop
    222a:	bd08      	pop	{r3, pc}
    222c:	0001a150 	.word	0x0001a150

00002230 <EcuM_Init>:
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    2230:	b508      	push	{r3, lr}
    MCU_clocks();
    2232:	f7ff ffef 	bl	2214 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    2236:	2000      	movs	r0, #0
    2238:	f000 fbb1 	bl	299e <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    223c:	2000      	movs	r0, #0
    223e:	f000 fa51 	bl	26e4 <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    2242:	480a      	ldr	r0, [pc, #40]	; (226c <EcuM_Init+0x3c>)
    2244:	f004 fe9a 	bl	6f7c <Port_Init>
    Adc_Init( &Adc_Config );    //Init Adc driver and configuration.
    2248:	4809      	ldr	r0, [pc, #36]	; (2270 <EcuM_Init+0x40>)
    224a:	f007 fd29 	bl	9ca0 <Adc_Init>
    Pwm_Init( &Pwm_Config );    //Init Pwm driver and configuration.
    224e:	4809      	ldr	r0, [pc, #36]	; (2274 <EcuM_Init+0x44>)
    2250:	f00e fce6 	bl	10c20 <Pwm_Init>
    
    //Configuring interleave for PTB1 and PTB13.
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 1, PORT_MUX_ADC_INTERLEAVE );
    2254:	2208      	movs	r2, #8
    2256:	2101      	movs	r1, #1
    2258:	4807      	ldr	r0, [pc, #28]	; (2278 <EcuM_Init+0x48>)
    225a:	f005 f91b 	bl	7494 <Port_Ci_Port_Ip_SetMuxModeSel>
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
    225e:	2208      	movs	r2, #8
    2260:	210d      	movs	r1, #13
    2262:	4805      	ldr	r0, [pc, #20]	; (2278 <EcuM_Init+0x48>)
    2264:	f005 f916 	bl	7494 <Port_Ci_Port_Ip_SetMuxModeSel>
}
    2268:	bf00      	nop
    226a:	bd08      	pop	{r3, pc}
    226c:	0001a608 	.word	0x0001a608
    2270:	000199dc 	.word	0x000199dc
    2274:	0001a678 	.word	0x0001a678
    2278:	4004a000 	.word	0x4004a000

0000227c <memcpy>:
    227c:	440a      	add	r2, r1
    227e:	4291      	cmp	r1, r2
    2280:	f100 33ff 	add.w	r3, r0, #4294967295
    2284:	d100      	bne.n	2288 <memcpy+0xc>
    2286:	4770      	bx	lr
    2288:	b510      	push	{r4, lr}
    228a:	f811 4b01 	ldrb.w	r4, [r1], #1
    228e:	f803 4f01 	strb.w	r4, [r3, #1]!
    2292:	4291      	cmp	r1, r2
    2294:	d1f9      	bne.n	228a <memcpy+0xe>
    2296:	bd10      	pop	{r4, pc}

00002298 <memset>:
    2298:	4402      	add	r2, r0
    229a:	4603      	mov	r3, r0
    229c:	4293      	cmp	r3, r2
    229e:	d100      	bne.n	22a2 <memset+0xa>
    22a0:	4770      	bx	lr
    22a2:	f803 1b01 	strb.w	r1, [r3], #1
    22a6:	e7f9      	b.n	229c <memset+0x4>

000022a8 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    22a8:	b500      	push	{lr}
    22aa:	b087      	sub	sp, #28
    22ac:	9003      	str	r0, [sp, #12]
    22ae:	9102      	str	r1, [sp, #8]
    22b0:	9201      	str	r2, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    sint32 dev_irqNumber = (sint32)eIrqNumber;
    22b2:	9b03      	ldr	r3, [sp, #12]
    22b4:	9305      	str	r3, [sp, #20]
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= dev_irqNumber);
    22b6:	9b05      	ldr	r3, [sp, #20]
    22b8:	43db      	mvns	r3, r3
    22ba:	0fdb      	lsrs	r3, r3, #31
    22bc:	b2db      	uxtb	r3, r3
    22be:	4618      	mov	r0, r3
    22c0:	f7fe fb06 	bl	8d0 <DevAssert>
    DevAssert(dev_irqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    22c4:	9b05      	ldr	r3, [sp, #20]
    22c6:	2b7a      	cmp	r3, #122	; 0x7a
    22c8:	bfd4      	ite	le
    22ca:	2301      	movle	r3, #1
    22cc:	2300      	movgt	r3, #0
    22ce:	b2db      	uxtb	r3, r3
    22d0:	4618      	mov	r0, r3
    22d2:	f7fe fafd 	bl	8d0 <DevAssert>
#if (MCAL_PLATFORM_ARM == MCAL_ARM_MARCH)
#if defined(S32K3XX) || defined(SAF85) || defined(S32R41)
    DevAssert(S32_SCB->VTOR >= (uint32)__RAM_INTERRUPT_START);
#else
    DevAssert(S32_SCB->VTOR >= (uint32)__INT_SRAM_START);
    22d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    22da:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    22de:	4a14      	ldr	r2, [pc, #80]	; (2330 <IntCtrl_Ip_InstallHandlerPrivileged+0x88>)
    22e0:	4293      	cmp	r3, r2
    22e2:	bf2c      	ite	cs
    22e4:	2301      	movcs	r3, #1
    22e6:	2300      	movcc	r3, #0
    22e8:	b2db      	uxtb	r3, r3
    22ea:	4618      	mov	r0, r3
    22ec:	f7fe faf0 	bl	8d0 <DevAssert>

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    22f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    22f4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    22f8:	9304      	str	r3, [sp, #16]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    22fa:	9b01      	ldr	r3, [sp, #4]
    22fc:	2b00      	cmp	r3, #0
    22fe:	d007      	beq.n	2310 <IntCtrl_Ip_InstallHandlerPrivileged+0x68>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    2300:	9b03      	ldr	r3, [sp, #12]
    2302:	3310      	adds	r3, #16
    2304:	009b      	lsls	r3, r3, #2
    2306:	9a04      	ldr	r2, [sp, #16]
    2308:	4413      	add	r3, r2
    230a:	681a      	ldr	r2, [r3, #0]
    230c:	9b01      	ldr	r3, [sp, #4]
    230e:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    2310:	9b03      	ldr	r3, [sp, #12]
    2312:	3310      	adds	r3, #16
    2314:	009b      	lsls	r3, r3, #2
    2316:	9a04      	ldr	r2, [sp, #16]
    2318:	4413      	add	r3, r2
    231a:	9a02      	ldr	r2, [sp, #8]
    231c:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    231e:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    2322:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    2326:	bf00      	nop
    2328:	b007      	add	sp, #28
    232a:	f85d fb04 	ldr.w	pc, [sp], #4
    232e:	bf00      	nop
    2330:	1fff8000 	.word	0x1fff8000

00002334 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    2334:	b500      	push	{lr}
    2336:	b083      	sub	sp, #12
    2338:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    233a:	9b01      	ldr	r3, [sp, #4]
    233c:	43db      	mvns	r3, r3
    233e:	0fdb      	lsrs	r3, r3, #31
    2340:	b2db      	uxtb	r3, r3
    2342:	4618      	mov	r0, r3
    2344:	f7fe fac4 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2348:	9b01      	ldr	r3, [sp, #4]
    234a:	2b7a      	cmp	r3, #122	; 0x7a
    234c:	bfd4      	ite	le
    234e:	2301      	movle	r3, #1
    2350:	2300      	movgt	r3, #0
    2352:	b2db      	uxtb	r3, r3
    2354:	4618      	mov	r0, r3
    2356:	f7fe fabb 	bl	8d0 <DevAssert>
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    235a:	9b01      	ldr	r3, [sp, #4]
    235c:	f003 021f 	and.w	r2, r3, #31
    2360:	4905      	ldr	r1, [pc, #20]	; (2378 <IntCtrl_Ip_EnableIrqPrivileged+0x44>)
    2362:	9b01      	ldr	r3, [sp, #4]
    2364:	095b      	lsrs	r3, r3, #5
    2366:	2001      	movs	r0, #1
    2368:	fa00 f202 	lsl.w	r2, r0, r2
    236c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    2370:	bf00      	nop
    2372:	b003      	add	sp, #12
    2374:	f85d fb04 	ldr.w	pc, [sp], #4
    2378:	e000e100 	.word	0xe000e100

0000237c <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    237c:	b500      	push	{lr}
    237e:	b083      	sub	sp, #12
    2380:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    2382:	9b01      	ldr	r3, [sp, #4]
    2384:	43db      	mvns	r3, r3
    2386:	0fdb      	lsrs	r3, r3, #31
    2388:	b2db      	uxtb	r3, r3
    238a:	4618      	mov	r0, r3
    238c:	f7fe faa0 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2390:	9b01      	ldr	r3, [sp, #4]
    2392:	2b7a      	cmp	r3, #122	; 0x7a
    2394:	bfd4      	ite	le
    2396:	2301      	movle	r3, #1
    2398:	2300      	movgt	r3, #0
    239a:	b2db      	uxtb	r3, r3
    239c:	4618      	mov	r0, r3
    239e:	f7fe fa97 	bl	8d0 <DevAssert>
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    23a2:	9b01      	ldr	r3, [sp, #4]
    23a4:	f003 021f 	and.w	r2, r3, #31
    23a8:	4906      	ldr	r1, [pc, #24]	; (23c4 <IntCtrl_Ip_DisableIrqPrivileged+0x48>)
    23aa:	9b01      	ldr	r3, [sp, #4]
    23ac:	095b      	lsrs	r3, r3, #5
    23ae:	2001      	movs	r0, #1
    23b0:	fa00 f202 	lsl.w	r2, r0, r2
    23b4:	3320      	adds	r3, #32
    23b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    23ba:	bf00      	nop
    23bc:	b003      	add	sp, #12
    23be:	f85d fb04 	ldr.w	pc, [sp], #4
    23c2:	bf00      	nop
    23c4:	e000e100 	.word	0xe000e100

000023c8 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    23c8:	b500      	push	{lr}
    23ca:	b085      	sub	sp, #20
    23cc:	9001      	str	r0, [sp, #4]
    23ce:	460b      	mov	r3, r1
    23d0:	f88d 3003 	strb.w	r3, [sp, #3]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number and priority - dev_irqNumber is used to avoid compiler warning */
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= (sint32)eIrqNumber);
    23d4:	9b01      	ldr	r3, [sp, #4]
    23d6:	43db      	mvns	r3, r3
    23d8:	0fdb      	lsrs	r3, r3, #31
    23da:	b2db      	uxtb	r3, r3
    23dc:	4618      	mov	r0, r3
    23de:	f7fe fa77 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    23e2:	9b01      	ldr	r3, [sp, #4]
    23e4:	2b7a      	cmp	r3, #122	; 0x7a
    23e6:	bfd4      	ite	le
    23e8:	2301      	movle	r3, #1
    23ea:	2300      	movgt	r3, #0
    23ec:	b2db      	uxtb	r3, r3
    23ee:	4618      	mov	r0, r3
    23f0:	f7fe fa6e 	bl	8d0 <DevAssert>
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    DevAssert(u8Priority < (uint8)(1U << INT_CTRL_IP_NVIC_PRIO_BITS));
    23f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    23f8:	2b0f      	cmp	r3, #15
    23fa:	bf94      	ite	ls
    23fc:	2301      	movls	r3, #1
    23fe:	2300      	movhi	r3, #0
    2400:	b2db      	uxtb	r3, r3
    2402:	4618      	mov	r0, r3
    2404:	f7fe fa64 	bl	8d0 <DevAssert>
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    2408:	2304      	movs	r3, #4
    240a:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    240e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    2412:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2416:	fa02 f103 	lsl.w	r1, r2, r3
    241a:	4a05      	ldr	r2, [pc, #20]	; (2430 <IntCtrl_Ip_SetPriorityPrivileged+0x68>)
    241c:	9b01      	ldr	r3, [sp, #4]
    241e:	b2c9      	uxtb	r1, r1
    2420:	4413      	add	r3, r2
    2422:	460a      	mov	r2, r1
    2424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    2428:	bf00      	nop
    242a:	b005      	add	sp, #20
    242c:	f85d fb04 	ldr.w	pc, [sp], #4
    2430:	e000e100 	.word	0xe000e100

00002434 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    2434:	b500      	push	{lr}
    2436:	b085      	sub	sp, #20
    2438:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number */
    DevAssert(INT_CTRL_IP_IRQ_MIN <= eIrqNumber);
    243a:	9b01      	ldr	r3, [sp, #4]
    243c:	43db      	mvns	r3, r3
    243e:	0fdb      	lsrs	r3, r3, #31
    2440:	b2db      	uxtb	r3, r3
    2442:	4618      	mov	r0, r3
    2444:	f7fe fa44 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2448:	9b01      	ldr	r3, [sp, #4]
    244a:	2b7a      	cmp	r3, #122	; 0x7a
    244c:	bfd4      	ite	le
    244e:	2301      	movle	r3, #1
    2450:	2300      	movgt	r3, #0
    2452:	b2db      	uxtb	r3, r3
    2454:	4618      	mov	r0, r3
    2456:	f7fe fa3b 	bl	8d0 <DevAssert>

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    245a:	2304      	movs	r3, #4
    245c:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    2460:	4a09      	ldr	r2, [pc, #36]	; (2488 <IntCtrl_Ip_GetPriorityPrivileged+0x54>)
    2462:	9b01      	ldr	r3, [sp, #4]
    2464:	4413      	add	r3, r2
    2466:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    246a:	b2db      	uxtb	r3, r3
    246c:	461a      	mov	r2, r3
    246e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2472:	fa42 f303 	asr.w	r3, r2, r3
    2476:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    247a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    247e:	4618      	mov	r0, r3
    2480:	b005      	add	sp, #20
    2482:	f85d fb04 	ldr.w	pc, [sp], #4
    2486:	bf00      	nop
    2488:	e000e100 	.word	0xe000e100

0000248c <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    248c:	b500      	push	{lr}
    248e:	b083      	sub	sp, #12
    2490:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number */
    DevAssert(0 <= (sint32)eIrqNumber);
    2492:	9b01      	ldr	r3, [sp, #4]
    2494:	43db      	mvns	r3, r3
    2496:	0fdb      	lsrs	r3, r3, #31
    2498:	b2db      	uxtb	r3, r3
    249a:	4618      	mov	r0, r3
    249c:	f7fe fa18 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    24a0:	9b01      	ldr	r3, [sp, #4]
    24a2:	2b7a      	cmp	r3, #122	; 0x7a
    24a4:	bfd4      	ite	le
    24a6:	2301      	movle	r3, #1
    24a8:	2300      	movgt	r3, #0
    24aa:	b2db      	uxtb	r3, r3
    24ac:	4618      	mov	r0, r3
    24ae:	f7fe fa0f 	bl	8d0 <DevAssert>
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    24b2:	9b01      	ldr	r3, [sp, #4]
    24b4:	f003 021f 	and.w	r2, r3, #31
    24b8:	4906      	ldr	r1, [pc, #24]	; (24d4 <IntCtrl_Ip_ClearPendingPrivileged+0x48>)
    24ba:	9b01      	ldr	r3, [sp, #4]
    24bc:	095b      	lsrs	r3, r3, #5
    24be:	2001      	movs	r0, #1
    24c0:	fa00 f202 	lsl.w	r2, r0, r2
    24c4:	3360      	adds	r3, #96	; 0x60
    24c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    24ca:	bf00      	nop
    24cc:	b003      	add	sp, #12
    24ce:	f85d fb04 	ldr.w	pc, [sp], #4
    24d2:	bf00      	nop
    24d4:	e000e100 	.word	0xe000e100

000024d8 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    24d8:	b500      	push	{lr}
    24da:	b085      	sub	sp, #20
    24dc:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_ENABLE_VTOR_CONFIG == STD_ON)
    S32_SCB->VTOR = pIntCtrlCtrlConfig->u32VectorTableAddress;
#endif

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    24de:	9b01      	ldr	r3, [sp, #4]
    24e0:	2b00      	cmp	r3, #0
    24e2:	bf14      	ite	ne
    24e4:	2301      	movne	r3, #1
    24e6:	2300      	moveq	r3, #0
    24e8:	b2db      	uxtb	r3, r3
    24ea:	4618      	mov	r0, r3
    24ec:	f7fe f9f0 	bl	8d0 <DevAssert>
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
    24f0:	9b01      	ldr	r3, [sp, #4]
    24f2:	681b      	ldr	r3, [r3, #0]
    24f4:	2b59      	cmp	r3, #89	; 0x59
    24f6:	bf94      	ite	ls
    24f8:	2301      	movls	r3, #1
    24fa:	2300      	movhi	r3, #0
    24fc:	b2db      	uxtb	r3, r3
    24fe:	4618      	mov	r0, r3
    2500:	f7fe f9e6 	bl	8d0 <DevAssert>
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2504:	2300      	movs	r3, #0
    2506:	9303      	str	r3, [sp, #12]
    2508:	e05d      	b.n	25c6 <IntCtrl_Ip_Init+0xee>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    250a:	9b01      	ldr	r3, [sp, #4]
    250c:	6859      	ldr	r1, [r3, #4]
    250e:	9a03      	ldr	r2, [sp, #12]
    2510:	4613      	mov	r3, r2
    2512:	005b      	lsls	r3, r3, #1
    2514:	4413      	add	r3, r2
    2516:	009b      	lsls	r3, r3, #2
    2518:	440b      	add	r3, r1
    251a:	681b      	ldr	r3, [r3, #0]
    251c:	4618      	mov	r0, r3
    251e:	f000 f899 	bl	2654 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2522:	9b01      	ldr	r3, [sp, #4]
    2524:	6859      	ldr	r1, [r3, #4]
    2526:	9a03      	ldr	r2, [sp, #12]
    2528:	4613      	mov	r3, r2
    252a:	005b      	lsls	r3, r3, #1
    252c:	4413      	add	r3, r2
    252e:	009b      	lsls	r3, r3, #2
    2530:	440b      	add	r3, r1
    2532:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    2534:	9b01      	ldr	r3, [sp, #4]
    2536:	6859      	ldr	r1, [r3, #4]
    2538:	9a03      	ldr	r2, [sp, #12]
    253a:	4613      	mov	r3, r2
    253c:	005b      	lsls	r3, r3, #1
    253e:	4413      	add	r3, r2
    2540:	009b      	lsls	r3, r3, #2
    2542:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2544:	795b      	ldrb	r3, [r3, #5]
    2546:	4619      	mov	r1, r3
    2548:	f000 f869 	bl	261e <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    254c:	9b01      	ldr	r3, [sp, #4]
    254e:	6859      	ldr	r1, [r3, #4]
    2550:	9a03      	ldr	r2, [sp, #12]
    2552:	4613      	mov	r3, r2
    2554:	005b      	lsls	r3, r3, #1
    2556:	4413      	add	r3, r2
    2558:	009b      	lsls	r3, r3, #2
    255a:	440b      	add	r3, r1
    255c:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    255e:	9b01      	ldr	r3, [sp, #4]
    2560:	6859      	ldr	r1, [r3, #4]
    2562:	9a03      	ldr	r2, [sp, #12]
    2564:	4613      	mov	r3, r2
    2566:	005b      	lsls	r3, r3, #1
    2568:	4413      	add	r3, r2
    256a:	009b      	lsls	r3, r3, #2
    256c:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    256e:	689b      	ldr	r3, [r3, #8]
    2570:	2200      	movs	r2, #0
    2572:	4619      	mov	r1, r3
    2574:	f000 f831 	bl	25da <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    2578:	9b01      	ldr	r3, [sp, #4]
    257a:	6859      	ldr	r1, [r3, #4]
    257c:	9a03      	ldr	r2, [sp, #12]
    257e:	4613      	mov	r3, r2
    2580:	005b      	lsls	r3, r3, #1
    2582:	4413      	add	r3, r2
    2584:	009b      	lsls	r3, r3, #2
    2586:	440b      	add	r3, r1
    2588:	791b      	ldrb	r3, [r3, #4]
    258a:	2b00      	cmp	r3, #0
    258c:	d00c      	beq.n	25a8 <IntCtrl_Ip_Init+0xd0>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    258e:	9b01      	ldr	r3, [sp, #4]
    2590:	6859      	ldr	r1, [r3, #4]
    2592:	9a03      	ldr	r2, [sp, #12]
    2594:	4613      	mov	r3, r2
    2596:	005b      	lsls	r3, r3, #1
    2598:	4413      	add	r3, r2
    259a:	009b      	lsls	r3, r3, #2
    259c:	440b      	add	r3, r1
    259e:	681b      	ldr	r3, [r3, #0]
    25a0:	4618      	mov	r0, r3
    25a2:	f000 f828 	bl	25f6 <IntCtrl_Ip_EnableIrq>
    25a6:	e00b      	b.n	25c0 <IntCtrl_Ip_Init+0xe8>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    25a8:	9b01      	ldr	r3, [sp, #4]
    25aa:	6859      	ldr	r1, [r3, #4]
    25ac:	9a03      	ldr	r2, [sp, #12]
    25ae:	4613      	mov	r3, r2
    25b0:	005b      	lsls	r3, r3, #1
    25b2:	4413      	add	r3, r2
    25b4:	009b      	lsls	r3, r3, #2
    25b6:	440b      	add	r3, r1
    25b8:	681b      	ldr	r3, [r3, #0]
    25ba:	4618      	mov	r0, r3
    25bc:	f000 f825 	bl	260a <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    25c0:	9b03      	ldr	r3, [sp, #12]
    25c2:	3301      	adds	r3, #1
    25c4:	9303      	str	r3, [sp, #12]
    25c6:	9b01      	ldr	r3, [sp, #4]
    25c8:	681b      	ldr	r3, [r3, #0]
    25ca:	9a03      	ldr	r2, [sp, #12]
    25cc:	429a      	cmp	r2, r3
    25ce:	d39c      	bcc.n	250a <IntCtrl_Ip_Init+0x32>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    25d0:	2300      	movs	r3, #0
}
    25d2:	4618      	mov	r0, r3
    25d4:	b005      	add	sp, #20
    25d6:	f85d fb04 	ldr.w	pc, [sp], #4

000025da <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    25da:	b500      	push	{lr}
    25dc:	b085      	sub	sp, #20
    25de:	9003      	str	r0, [sp, #12]
    25e0:	9102      	str	r1, [sp, #8]
    25e2:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    25e4:	9a01      	ldr	r2, [sp, #4]
    25e6:	9902      	ldr	r1, [sp, #8]
    25e8:	9803      	ldr	r0, [sp, #12]
    25ea:	f7ff fe5d 	bl	22a8 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    25ee:	bf00      	nop
    25f0:	b005      	add	sp, #20
    25f2:	f85d fb04 	ldr.w	pc, [sp], #4

000025f6 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    25f6:	b500      	push	{lr}
    25f8:	b083      	sub	sp, #12
    25fa:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    25fc:	9801      	ldr	r0, [sp, #4]
    25fe:	f7ff fe99 	bl	2334 <IntCtrl_Ip_EnableIrqPrivileged>
}
    2602:	bf00      	nop
    2604:	b003      	add	sp, #12
    2606:	f85d fb04 	ldr.w	pc, [sp], #4

0000260a <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    260a:	b500      	push	{lr}
    260c:	b083      	sub	sp, #12
    260e:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    2610:	9801      	ldr	r0, [sp, #4]
    2612:	f7ff feb3 	bl	237c <IntCtrl_Ip_DisableIrqPrivileged>
}
    2616:	bf00      	nop
    2618:	b003      	add	sp, #12
    261a:	f85d fb04 	ldr.w	pc, [sp], #4

0000261e <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    261e:	b500      	push	{lr}
    2620:	b083      	sub	sp, #12
    2622:	9001      	str	r0, [sp, #4]
    2624:	460b      	mov	r3, r1
    2626:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    262a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    262e:	4619      	mov	r1, r3
    2630:	9801      	ldr	r0, [sp, #4]
    2632:	f7ff fec9 	bl	23c8 <IntCtrl_Ip_SetPriorityPrivileged>
}
    2636:	bf00      	nop
    2638:	b003      	add	sp, #12
    263a:	f85d fb04 	ldr.w	pc, [sp], #4

0000263e <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    263e:	b500      	push	{lr}
    2640:	b083      	sub	sp, #12
    2642:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    2644:	9801      	ldr	r0, [sp, #4]
    2646:	f7ff fef5 	bl	2434 <IntCtrl_Ip_GetPriorityPrivileged>
    264a:	4603      	mov	r3, r0
}
    264c:	4618      	mov	r0, r3
    264e:	b003      	add	sp, #12
    2650:	f85d fb04 	ldr.w	pc, [sp], #4

00002654 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    2654:	b500      	push	{lr}
    2656:	b083      	sub	sp, #12
    2658:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    265a:	9801      	ldr	r0, [sp, #4]
    265c:	f7ff ff16 	bl	248c <IntCtrl_Ip_ClearPendingPrivileged>
}
    2660:	bf00      	nop
    2662:	b003      	add	sp, #12
    2664:	f85d fb04 	ldr.w	pc, [sp], #4

00002668 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    2668:	b500      	push	{lr}
    266a:	b083      	sub	sp, #12
    266c:	9001      	str	r0, [sp, #4]
    266e:	460b      	mov	r3, r1
    2670:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    2674:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2678:	2b00      	cmp	r3, #0
    267a:	d003      	beq.n	2684 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    267c:	9801      	ldr	r0, [sp, #4]
    267e:	f7ff ffba 	bl	25f6 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    2682:	e002      	b.n	268a <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    2684:	9801      	ldr	r0, [sp, #4]
    2686:	f7ff ffc0 	bl	260a <IntCtrl_Ip_DisableIrq>
}
    268a:	bf00      	nop
    268c:	b003      	add	sp, #12
    268e:	f85d fb04 	ldr.w	pc, [sp], #4

00002692 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2692:	b500      	push	{lr}
    2694:	b083      	sub	sp, #12
    2696:	9001      	str	r0, [sp, #4]
    2698:	460b      	mov	r3, r1
    269a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    269e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    26a2:	4619      	mov	r1, r3
    26a4:	9801      	ldr	r0, [sp, #4]
    26a6:	f7ff ffba 	bl	261e <IntCtrl_Ip_SetPriority>
}
    26aa:	bf00      	nop
    26ac:	b003      	add	sp, #12
    26ae:	f85d fb04 	ldr.w	pc, [sp], #4

000026b2 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    26b2:	b500      	push	{lr}
    26b4:	b083      	sub	sp, #12
    26b6:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    26b8:	9801      	ldr	r0, [sp, #4]
    26ba:	f7ff ffc0 	bl	263e <IntCtrl_Ip_GetPriority>
    26be:	4603      	mov	r3, r0
}
    26c0:	4618      	mov	r0, r3
    26c2:	b003      	add	sp, #12
    26c4:	f85d fb04 	ldr.w	pc, [sp], #4

000026c8 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    26c8:	b500      	push	{lr}
    26ca:	b085      	sub	sp, #20
    26cc:	9003      	str	r0, [sp, #12]
    26ce:	9102      	str	r1, [sp, #8]
    26d0:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    26d2:	9a01      	ldr	r2, [sp, #4]
    26d4:	9902      	ldr	r1, [sp, #8]
    26d6:	9803      	ldr	r0, [sp, #12]
    26d8:	f7ff ff7f 	bl	25da <IntCtrl_Ip_InstallHandler>
}
    26dc:	bf00      	nop
    26de:	b005      	add	sp, #20
    26e0:	f85d fb04 	ldr.w	pc, [sp], #4

000026e4 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    26e4:	b500      	push	{lr}
    26e6:	b085      	sub	sp, #20
    26e8:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    26ea:	2300      	movs	r3, #0
    26ec:	f88d 300f 	strb.w	r3, [sp, #15]
    (void)pConfig;
#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != pConfig)
    26f0:	9b01      	ldr	r3, [sp, #4]
    26f2:	2b00      	cmp	r3, #0
    26f4:	d006      	beq.n	2704 <Platform_Init+0x20>
    {
        (void)Det_ReportError((uint16)CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INIT_ID, PLATFORM_E_PARAM_POINTER);
    26f6:	2301      	movs	r3, #1
    26f8:	2220      	movs	r2, #32
    26fa:	2100      	movs	r1, #0
    26fc:	20ff      	movs	r0, #255	; 0xff
    26fe:	f016 f897 	bl	18830 <Det_ReportError>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    2702:	e008      	b.n	2716 <Platform_Init+0x32>
            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    2704:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2708:	4a05      	ldr	r2, [pc, #20]	; (2720 <Platform_Init+0x3c>)
    270a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    270e:	681b      	ldr	r3, [r3, #0]
    2710:	4618      	mov	r0, r3
    2712:	f000 f917 	bl	2944 <Platform_Ipw_Init>
}
    2716:	bf00      	nop
    2718:	b005      	add	sp, #20
    271a:	f85d fb04 	ldr.w	pc, [sp], #4
    271e:	bf00      	nop
    2720:	0001a1bc 	.word	0x0001a1bc

00002724 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    2724:	b500      	push	{lr}
    2726:	b085      	sub	sp, #20
    2728:	9001      	str	r0, [sp, #4]
    272a:	460b      	mov	r3, r1
    272c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2730:	2300      	movs	r3, #0
    2732:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    2736:	9b01      	ldr	r3, [sp, #4]
    2738:	2b7a      	cmp	r3, #122	; 0x7a
    273a:	dc02      	bgt.n	2742 <Platform_SetIrq+0x1e>
    273c:	9b01      	ldr	r3, [sp, #4]
    273e:	2b00      	cmp	r3, #0
    2740:	da09      	bge.n	2756 <Platform_SetIrq+0x32>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    2742:	2302      	movs	r3, #2
    2744:	2221      	movs	r2, #33	; 0x21
    2746:	2100      	movs	r1, #0
    2748:	20ff      	movs	r0, #255	; 0xff
    274a:	f016 f871 	bl	18830 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    274e:	2301      	movs	r3, #1
    2750:	f88d 300f 	strb.w	r3, [sp, #15]
    2754:	e005      	b.n	2762 <Platform_SetIrq+0x3e>
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    2756:	f89d 3003 	ldrb.w	r3, [sp, #3]
    275a:	4619      	mov	r1, r3
    275c:	9801      	ldr	r0, [sp, #4]
    275e:	f7ff ff83 	bl	2668 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    2762:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2766:	4618      	mov	r0, r3
    2768:	b005      	add	sp, #20
    276a:	f85d fb04 	ldr.w	pc, [sp], #4

0000276e <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    276e:	b500      	push	{lr}
    2770:	b085      	sub	sp, #20
    2772:	9001      	str	r0, [sp, #4]
    2774:	460b      	mov	r3, r1
    2776:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    277a:	2300      	movs	r3, #0
    277c:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    2780:	9b01      	ldr	r3, [sp, #4]
    2782:	2b7a      	cmp	r3, #122	; 0x7a
    2784:	dc06      	bgt.n	2794 <Platform_SetIrqPriority+0x26>
    2786:	9b01      	ldr	r3, [sp, #4]
    2788:	2b00      	cmp	r3, #0
    278a:	db03      	blt.n	2794 <Platform_SetIrqPriority+0x26>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
    278c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2790:	2b0f      	cmp	r3, #15
    2792:	d909      	bls.n	27a8 <Platform_SetIrqPriority+0x3a>
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
        (u8Priority >= (uint8)(1U << INT_CTRL_IP_GIC_PRIO_BITS)))
#endif
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    2794:	2302      	movs	r3, #2
    2796:	2222      	movs	r2, #34	; 0x22
    2798:	2100      	movs	r1, #0
    279a:	20ff      	movs	r0, #255	; 0xff
    279c:	f016 f848 	bl	18830 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    27a0:	2301      	movs	r3, #1
    27a2:	f88d 300f 	strb.w	r3, [sp, #15]
    27a6:	e005      	b.n	27b4 <Platform_SetIrqPriority+0x46>
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    27a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    27ac:	4619      	mov	r1, r3
    27ae:	9801      	ldr	r0, [sp, #4]
    27b0:	f7ff ff6f 	bl	2692 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    27b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    27b8:	4618      	mov	r0, r3
    27ba:	b005      	add	sp, #20
    27bc:	f85d fb04 	ldr.w	pc, [sp], #4

000027c0 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    27c0:	b500      	push	{lr}
    27c2:	b085      	sub	sp, #20
    27c4:	9001      	str	r0, [sp, #4]
    27c6:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    27c8:	2300      	movs	r3, #0
    27ca:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    27ce:	9b01      	ldr	r3, [sp, #4]
    27d0:	2b7a      	cmp	r3, #122	; 0x7a
    27d2:	dc02      	bgt.n	27da <Platform_GetIrqPriority+0x1a>
    27d4:	9b01      	ldr	r3, [sp, #4]
    27d6:	2b00      	cmp	r3, #0
    27d8:	da09      	bge.n	27ee <Platform_GetIrqPriority+0x2e>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    27da:	2302      	movs	r3, #2
    27dc:	2223      	movs	r2, #35	; 0x23
    27de:	2100      	movs	r1, #0
    27e0:	20ff      	movs	r0, #255	; 0xff
    27e2:	f016 f825 	bl	18830 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    27e6:	2301      	movs	r3, #1
    27e8:	f88d 300f 	strb.w	r3, [sp, #15]
    27ec:	e013      	b.n	2816 <Platform_GetIrqPriority+0x56>
    }
    else if (u8Priority == NULL_PTR)
    27ee:	9b00      	ldr	r3, [sp, #0]
    27f0:	2b00      	cmp	r3, #0
    27f2:	d109      	bne.n	2808 <Platform_GetIrqPriority+0x48>
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_POINTER);
    27f4:	2301      	movs	r3, #1
    27f6:	2223      	movs	r2, #35	; 0x23
    27f8:	2100      	movs	r1, #0
    27fa:	20ff      	movs	r0, #255	; 0xff
    27fc:	f016 f818 	bl	18830 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    2800:	2301      	movs	r3, #1
    2802:	f88d 300f 	strb.w	r3, [sp, #15]
    2806:	e006      	b.n	2816 <Platform_GetIrqPriority+0x56>
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    2808:	9801      	ldr	r0, [sp, #4]
    280a:	f7ff ff52 	bl	26b2 <Platform_Ipw_GetIrqPriority>
    280e:	4603      	mov	r3, r0
    2810:	461a      	mov	r2, r3
    2812:	9b00      	ldr	r3, [sp, #0]
    2814:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    2816:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    281a:	4618      	mov	r0, r3
    281c:	b005      	add	sp, #20
    281e:	f85d fb04 	ldr.w	pc, [sp], #4

00002822 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    2822:	b500      	push	{lr}
    2824:	b087      	sub	sp, #28
    2826:	9003      	str	r0, [sp, #12]
    2828:	9102      	str	r1, [sp, #8]
    282a:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    282c:	2300      	movs	r3, #0
    282e:	f88d 3017 	strb.w	r3, [sp, #23]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    2832:	9b03      	ldr	r3, [sp, #12]
    2834:	2b7a      	cmp	r3, #122	; 0x7a
    2836:	dc02      	bgt.n	283e <Platform_InstallIrqHandler+0x1c>
    2838:	9b03      	ldr	r3, [sp, #12]
    283a:	2b00      	cmp	r3, #0
    283c:	da09      	bge.n	2852 <Platform_InstallIrqHandler+0x30>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INSTALL_HANDLER_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    283e:	2302      	movs	r3, #2
    2840:	2224      	movs	r2, #36	; 0x24
    2842:	2100      	movs	r1, #0
    2844:	20ff      	movs	r0, #255	; 0xff
    2846:	f015 fff3 	bl	18830 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    284a:	2301      	movs	r3, #1
    284c:	f88d 3017 	strb.w	r3, [sp, #23]
    2850:	e004      	b.n	285c <Platform_InstallIrqHandler+0x3a>
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2852:	9a01      	ldr	r2, [sp, #4]
    2854:	9902      	ldr	r1, [sp, #8]
    2856:	9803      	ldr	r0, [sp, #12]
    2858:	f7ff ff36 	bl	26c8 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    285c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2860:	4618      	mov	r0, r3
    2862:	b007      	add	sp, #28
    2864:	f85d fb04 	ldr.w	pc, [sp], #4

00002868 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2868:	b500      	push	{lr}
    286a:	b085      	sub	sp, #20
    286c:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    286e:	2300      	movs	r3, #0
    2870:	9303      	str	r3, [sp, #12]
    2872:	e05d      	b.n	2930 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2874:	9b01      	ldr	r3, [sp, #4]
    2876:	6859      	ldr	r1, [r3, #4]
    2878:	9a03      	ldr	r2, [sp, #12]
    287a:	4613      	mov	r3, r2
    287c:	005b      	lsls	r3, r3, #1
    287e:	4413      	add	r3, r2
    2880:	009b      	lsls	r3, r3, #2
    2882:	440b      	add	r3, r1
    2884:	681b      	ldr	r3, [r3, #0]
    2886:	4618      	mov	r0, r3
    2888:	f7ff fee4 	bl	2654 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    288c:	9b01      	ldr	r3, [sp, #4]
    288e:	6859      	ldr	r1, [r3, #4]
    2890:	9a03      	ldr	r2, [sp, #12]
    2892:	4613      	mov	r3, r2
    2894:	005b      	lsls	r3, r3, #1
    2896:	4413      	add	r3, r2
    2898:	009b      	lsls	r3, r3, #2
    289a:	440b      	add	r3, r1
    289c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    289e:	9b01      	ldr	r3, [sp, #4]
    28a0:	6859      	ldr	r1, [r3, #4]
    28a2:	9a03      	ldr	r2, [sp, #12]
    28a4:	4613      	mov	r3, r2
    28a6:	005b      	lsls	r3, r3, #1
    28a8:	4413      	add	r3, r2
    28aa:	009b      	lsls	r3, r3, #2
    28ac:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    28ae:	795b      	ldrb	r3, [r3, #5]
    28b0:	4619      	mov	r1, r3
    28b2:	f7ff feb4 	bl	261e <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    28b6:	9b01      	ldr	r3, [sp, #4]
    28b8:	6859      	ldr	r1, [r3, #4]
    28ba:	9a03      	ldr	r2, [sp, #12]
    28bc:	4613      	mov	r3, r2
    28be:	005b      	lsls	r3, r3, #1
    28c0:	4413      	add	r3, r2
    28c2:	009b      	lsls	r3, r3, #2
    28c4:	440b      	add	r3, r1
    28c6:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    28c8:	9b01      	ldr	r3, [sp, #4]
    28ca:	6859      	ldr	r1, [r3, #4]
    28cc:	9a03      	ldr	r2, [sp, #12]
    28ce:	4613      	mov	r3, r2
    28d0:	005b      	lsls	r3, r3, #1
    28d2:	4413      	add	r3, r2
    28d4:	009b      	lsls	r3, r3, #2
    28d6:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    28d8:	689b      	ldr	r3, [r3, #8]
    28da:	2200      	movs	r2, #0
    28dc:	4619      	mov	r1, r3
    28de:	f7ff fe7c 	bl	25da <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    28e2:	9b01      	ldr	r3, [sp, #4]
    28e4:	6859      	ldr	r1, [r3, #4]
    28e6:	9a03      	ldr	r2, [sp, #12]
    28e8:	4613      	mov	r3, r2
    28ea:	005b      	lsls	r3, r3, #1
    28ec:	4413      	add	r3, r2
    28ee:	009b      	lsls	r3, r3, #2
    28f0:	440b      	add	r3, r1
    28f2:	791b      	ldrb	r3, [r3, #4]
    28f4:	2b00      	cmp	r3, #0
    28f6:	d00c      	beq.n	2912 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    28f8:	9b01      	ldr	r3, [sp, #4]
    28fa:	6859      	ldr	r1, [r3, #4]
    28fc:	9a03      	ldr	r2, [sp, #12]
    28fe:	4613      	mov	r3, r2
    2900:	005b      	lsls	r3, r3, #1
    2902:	4413      	add	r3, r2
    2904:	009b      	lsls	r3, r3, #2
    2906:	440b      	add	r3, r1
    2908:	681b      	ldr	r3, [r3, #0]
    290a:	4618      	mov	r0, r3
    290c:	f7ff fe73 	bl	25f6 <IntCtrl_Ip_EnableIrq>
    2910:	e00b      	b.n	292a <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2912:	9b01      	ldr	r3, [sp, #4]
    2914:	6859      	ldr	r1, [r3, #4]
    2916:	9a03      	ldr	r2, [sp, #12]
    2918:	4613      	mov	r3, r2
    291a:	005b      	lsls	r3, r3, #1
    291c:	4413      	add	r3, r2
    291e:	009b      	lsls	r3, r3, #2
    2920:	440b      	add	r3, r1
    2922:	681b      	ldr	r3, [r3, #0]
    2924:	4618      	mov	r0, r3
    2926:	f7ff fe70 	bl	260a <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    292a:	9b03      	ldr	r3, [sp, #12]
    292c:	3301      	adds	r3, #1
    292e:	9303      	str	r3, [sp, #12]
    2930:	9b01      	ldr	r3, [sp, #4]
    2932:	681b      	ldr	r3, [r3, #0]
    2934:	9a03      	ldr	r2, [sp, #12]
    2936:	429a      	cmp	r2, r3
    2938:	d39c      	bcc.n	2874 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    293a:	2300      	movs	r3, #0
}
    293c:	4618      	mov	r0, r3
    293e:	b005      	add	sp, #20
    2940:	f85d fb04 	ldr.w	pc, [sp], #4

00002944 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    2944:	b500      	push	{lr}
    2946:	b085      	sub	sp, #20
    2948:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    294a:	2300      	movs	r3, #0
    294c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    2950:	9b01      	ldr	r3, [sp, #4]
    2952:	681b      	ldr	r3, [r3, #0]
    2954:	2b00      	cmp	r3, #0
    2956:	d007      	beq.n	2968 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    2958:	9b01      	ldr	r3, [sp, #4]
    295a:	681b      	ldr	r3, [r3, #0]
    295c:	4618      	mov	r0, r3
    295e:	f7ff ff83 	bl	2868 <Platform_Ipw_InitIntCtrl>
    2962:	4603      	mov	r3, r0
    2964:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    2968:	f89d 300f 	ldrb.w	r3, [sp, #15]
    296c:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    296e:	bf00      	nop
    2970:	b005      	add	sp, #20
    2972:	f85d fb04 	ldr.w	pc, [sp], #4

00002976 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    2976:	2300      	movs	r3, #0
}
    2978:	4618      	mov	r0, r3
    297a:	4770      	bx	lr

0000297c <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    297c:	b082      	sub	sp, #8
    297e:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    2980:	2301      	movs	r3, #1
}
    2982:	4618      	mov	r0, r3
    2984:	b002      	add	sp, #8
    2986:	4770      	bx	lr

00002988 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    2988:	b082      	sub	sp, #8
    298a:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    298c:	bf00      	nop
    298e:	b002      	add	sp, #8
    2990:	4770      	bx	lr

00002992 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    2992:	b082      	sub	sp, #8
    2994:	9001      	str	r0, [sp, #4]
    return Micros;
    2996:	9b01      	ldr	r3, [sp, #4]
}
    2998:	4618      	mov	r0, r3
    299a:	b002      	add	sp, #8
    299c:	4770      	bx	lr

0000299e <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    299e:	b500      	push	{lr}
    29a0:	b083      	sub	sp, #12
    29a2:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    29a4:	f000 f86c 	bl	2a80 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    29a8:	bf00      	nop
    29aa:	b003      	add	sp, #12
    29ac:	f85d fb04 	ldr.w	pc, [sp], #4

000029b0 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    29b0:	b500      	push	{lr}
    29b2:	b085      	sub	sp, #20
    29b4:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    29b6:	2300      	movs	r3, #0
    29b8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    29ba:	9b01      	ldr	r3, [sp, #4]
    29bc:	2b00      	cmp	r3, #0
    29be:	d003      	beq.n	29c8 <OsIf_GetCounter+0x18>
    29c0:	9b01      	ldr	r3, [sp, #4]
    29c2:	2b01      	cmp	r3, #1
    29c4:	d004      	beq.n	29d0 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    29c6:	e007      	b.n	29d8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    29c8:	f7ff ffd5 	bl	2976 <OsIf_Timer_Dummy_GetCounter>
    29cc:	9003      	str	r0, [sp, #12]
            break;
    29ce:	e003      	b.n	29d8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    29d0:	f000 f872 	bl	2ab8 <OsIf_Timer_System_GetCounter>
    29d4:	9003      	str	r0, [sp, #12]
            break;
    29d6:	bf00      	nop
    }

    return Value;
    29d8:	9b03      	ldr	r3, [sp, #12]
}
    29da:	4618      	mov	r0, r3
    29dc:	b005      	add	sp, #20
    29de:	f85d fb04 	ldr.w	pc, [sp], #4

000029e2 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    29e2:	b500      	push	{lr}
    29e4:	b085      	sub	sp, #20
    29e6:	9001      	str	r0, [sp, #4]
    29e8:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    29ea:	2300      	movs	r3, #0
    29ec:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    29ee:	9b00      	ldr	r3, [sp, #0]
    29f0:	2b00      	cmp	r3, #0
    29f2:	d003      	beq.n	29fc <OsIf_GetElapsed+0x1a>
    29f4:	9b00      	ldr	r3, [sp, #0]
    29f6:	2b01      	cmp	r3, #1
    29f8:	d005      	beq.n	2a06 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    29fa:	e009      	b.n	2a10 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    29fc:	9801      	ldr	r0, [sp, #4]
    29fe:	f7ff ffbd 	bl	297c <OsIf_Timer_Dummy_GetElapsed>
    2a02:	9003      	str	r0, [sp, #12]
            break;
    2a04:	e004      	b.n	2a10 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    2a06:	9801      	ldr	r0, [sp, #4]
    2a08:	f000 f864 	bl	2ad4 <OsIf_Timer_System_GetElapsed>
    2a0c:	9003      	str	r0, [sp, #12]
            break;
    2a0e:	bf00      	nop
    }

    return Value;
    2a10:	9b03      	ldr	r3, [sp, #12]
}
    2a12:	4618      	mov	r0, r3
    2a14:	b005      	add	sp, #20
    2a16:	f85d fb04 	ldr.w	pc, [sp], #4

00002a1a <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    2a1a:	b500      	push	{lr}
    2a1c:	b083      	sub	sp, #12
    2a1e:	9001      	str	r0, [sp, #4]
    2a20:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    2a22:	9b00      	ldr	r3, [sp, #0]
    2a24:	2b00      	cmp	r3, #0
    2a26:	d003      	beq.n	2a30 <OsIf_SetTimerFrequency+0x16>
    2a28:	9b00      	ldr	r3, [sp, #0]
    2a2a:	2b01      	cmp	r3, #1
    2a2c:	d004      	beq.n	2a38 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2a2e:	e007      	b.n	2a40 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    2a30:	9801      	ldr	r0, [sp, #4]
    2a32:	f7ff ffa9 	bl	2988 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    2a36:	e003      	b.n	2a40 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    2a38:	9801      	ldr	r0, [sp, #4]
    2a3a:	f000 f85b 	bl	2af4 <OsIf_Timer_System_SetTimerFrequency>
            break;
    2a3e:	bf00      	nop
    }
}
    2a40:	bf00      	nop
    2a42:	b003      	add	sp, #12
    2a44:	f85d fb04 	ldr.w	pc, [sp], #4

00002a48 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2a48:	b500      	push	{lr}
    2a4a:	b085      	sub	sp, #20
    2a4c:	9001      	str	r0, [sp, #4]
    2a4e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2a50:	2300      	movs	r3, #0
    2a52:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2a54:	9b00      	ldr	r3, [sp, #0]
    2a56:	2b00      	cmp	r3, #0
    2a58:	d003      	beq.n	2a62 <OsIf_MicrosToTicks+0x1a>
    2a5a:	9b00      	ldr	r3, [sp, #0]
    2a5c:	2b01      	cmp	r3, #1
    2a5e:	d005      	beq.n	2a6c <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2a60:	e009      	b.n	2a76 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    2a62:	9801      	ldr	r0, [sp, #4]
    2a64:	f7ff ff95 	bl	2992 <OsIf_Timer_Dummy_MicrosToTicks>
    2a68:	9003      	str	r0, [sp, #12]
            break;
    2a6a:	e004      	b.n	2a76 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    2a6c:	9801      	ldr	r0, [sp, #4]
    2a6e:	f000 f84f 	bl	2b10 <OsIf_Timer_System_MicrosToTicks>
    2a72:	9003      	str	r0, [sp, #12]
            break;
    2a74:	bf00      	nop
    }

    return Value;
    2a76:	9b03      	ldr	r3, [sp, #12]
}
    2a78:	4618      	mov	r0, r3
    2a7a:	b005      	add	sp, #20
    2a7c:	f85d fb04 	ldr.w	pc, [sp], #4

00002a80 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    2a80:	b500      	push	{lr}
    2a82:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    2a84:	2300      	movs	r3, #0
    2a86:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    2a88:	4a09      	ldr	r2, [pc, #36]	; (2ab0 <OsIf_Timer_System_Init+0x30>)
    2a8a:	9b01      	ldr	r3, [sp, #4]
    2a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2a90:	685a      	ldr	r2, [r3, #4]
    2a92:	4908      	ldr	r1, [pc, #32]	; (2ab4 <OsIf_Timer_System_Init+0x34>)
    2a94:	9b01      	ldr	r3, [sp, #4]
    2a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    2a9a:	4a06      	ldr	r2, [pc, #24]	; (2ab4 <OsIf_Timer_System_Init+0x34>)
    2a9c:	9b01      	ldr	r3, [sp, #4]
    2a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2aa2:	4618      	mov	r0, r3
    2aa4:	f000 f868 	bl	2b78 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    2aa8:	bf00      	nop
    2aaa:	b003      	add	sp, #12
    2aac:	f85d fb04 	ldr.w	pc, [sp], #4
    2ab0:	0001a174 	.word	0x0001a174
    2ab4:	1fff8b74 	.word	0x1fff8b74

00002ab8 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    2ab8:	b500      	push	{lr}
    2aba:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    2abc:	2300      	movs	r3, #0
    2abe:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2ac0:	2300      	movs	r3, #0
    2ac2:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    2ac4:	f000 f86c 	bl	2ba0 <OsIf_Timer_System_Internal_GetCounter>
    2ac8:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    2aca:	9b01      	ldr	r3, [sp, #4]
}
    2acc:	4618      	mov	r0, r3
    2ace:	b003      	add	sp, #12
    2ad0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ad4 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    2ad4:	b500      	push	{lr}
    2ad6:	b085      	sub	sp, #20
    2ad8:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    2ada:	2300      	movs	r3, #0
    2adc:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    2ade:	2300      	movs	r3, #0
    2ae0:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    2ae2:	9801      	ldr	r0, [sp, #4]
    2ae4:	f000 f864 	bl	2bb0 <OsIf_Timer_System_Internal_GetElapsed>
    2ae8:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    2aea:	9b03      	ldr	r3, [sp, #12]
}
    2aec:	4618      	mov	r0, r3
    2aee:	b005      	add	sp, #20
    2af0:	f85d fb04 	ldr.w	pc, [sp], #4

00002af4 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    2af4:	b084      	sub	sp, #16
    2af6:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2af8:	2300      	movs	r3, #0
    2afa:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    2afc:	4903      	ldr	r1, [pc, #12]	; (2b0c <OsIf_Timer_System_SetTimerFrequency+0x18>)
    2afe:	9b03      	ldr	r3, [sp, #12]
    2b00:	9a01      	ldr	r2, [sp, #4]
    2b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    2b06:	bf00      	nop
    2b08:	b004      	add	sp, #16
    2b0a:	4770      	bx	lr
    2b0c:	1fff8b74 	.word	0x1fff8b74

00002b10 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    2b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b12:	b087      	sub	sp, #28
    2b14:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    2b16:	2100      	movs	r1, #0
    2b18:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    2b1a:	2100      	movs	r1, #0
    2b1c:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    2b1e:	9901      	ldr	r1, [sp, #4]
    2b20:	2000      	movs	r0, #0
    2b22:	460e      	mov	r6, r1
    2b24:	4607      	mov	r7, r0
    2b26:	4812      	ldr	r0, [pc, #72]	; (2b70 <OsIf_Timer_System_MicrosToTicks+0x60>)
    2b28:	9904      	ldr	r1, [sp, #16]
    2b2a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2b2e:	2000      	movs	r0, #0
    2b30:	460c      	mov	r4, r1
    2b32:	4605      	mov	r5, r0
    2b34:	fb04 f007 	mul.w	r0, r4, r7
    2b38:	fb06 f105 	mul.w	r1, r6, r5
    2b3c:	4401      	add	r1, r0
    2b3e:	fba6 2304 	umull	r2, r3, r6, r4
    2b42:	4419      	add	r1, r3
    2b44:	460b      	mov	r3, r1
    2b46:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2b4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    2b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2b52:	4a08      	ldr	r2, [pc, #32]	; (2b74 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2b54:	f04f 0300 	mov.w	r3, #0
    2b58:	f7fd fd24 	bl	5a4 <__aeabi_uldivmod>
    2b5c:	4602      	mov	r2, r0
    2b5e:	460b      	mov	r3, r1
    2b60:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    2b64:	9b02      	ldr	r3, [sp, #8]
    2b66:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2b68:	9b05      	ldr	r3, [sp, #20]
}
    2b6a:	4618      	mov	r0, r3
    2b6c:	b007      	add	sp, #28
    2b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b70:	1fff8b74 	.word	0x1fff8b74
    2b74:	000f4240 	.word	0x000f4240

00002b78 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    2b78:	b082      	sub	sp, #8
    2b7a:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    2b7c:	4b07      	ldr	r3, [pc, #28]	; (2b9c <OsIf_Timer_System_Internal_Init+0x24>)
    2b7e:	2200      	movs	r2, #0
    2b80:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    2b82:	4b06      	ldr	r3, [pc, #24]	; (2b9c <OsIf_Timer_System_Internal_Init+0x24>)
    2b84:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2b88:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    2b8a:	4b04      	ldr	r3, [pc, #16]	; (2b9c <OsIf_Timer_System_Internal_Init+0x24>)
    2b8c:	2200      	movs	r2, #0
    2b8e:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    2b90:	4b02      	ldr	r3, [pc, #8]	; (2b9c <OsIf_Timer_System_Internal_Init+0x24>)
    2b92:	2205      	movs	r2, #5
    2b94:	601a      	str	r2, [r3, #0]
}
    2b96:	bf00      	nop
    2b98:	b002      	add	sp, #8
    2b9a:	4770      	bx	lr
    2b9c:	e000e010 	.word	0xe000e010

00002ba0 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    2ba0:	4b02      	ldr	r3, [pc, #8]	; (2bac <OsIf_Timer_System_Internal_GetCounter+0xc>)
    2ba2:	689b      	ldr	r3, [r3, #8]
    2ba4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    2ba8:	4618      	mov	r0, r3
    2baa:	4770      	bx	lr
    2bac:	e000e010 	.word	0xe000e010

00002bb0 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    2bb0:	b084      	sub	sp, #16
    2bb2:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    2bb4:	4b10      	ldr	r3, [pc, #64]	; (2bf8 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    2bb6:	689b      	ldr	r3, [r3, #8]
    2bb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2bbc:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    2bbe:	2300      	movs	r3, #0
    2bc0:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    2bc2:	9b01      	ldr	r3, [sp, #4]
    2bc4:	681b      	ldr	r3, [r3, #0]
    2bc6:	9a02      	ldr	r2, [sp, #8]
    2bc8:	429a      	cmp	r2, r3
    2bca:	d909      	bls.n	2be0 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    2bcc:	9b01      	ldr	r3, [sp, #4]
    2bce:	681a      	ldr	r2, [r3, #0]
    2bd0:	9b02      	ldr	r3, [sp, #8]
    2bd2:	1ad3      	subs	r3, r2, r3
    2bd4:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2bd8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    2bdc:	9303      	str	r3, [sp, #12]
    2bde:	e004      	b.n	2bea <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    2be0:	9b01      	ldr	r3, [sp, #4]
    2be2:	681a      	ldr	r2, [r3, #0]
    2be4:	9b02      	ldr	r3, [sp, #8]
    2be6:	1ad3      	subs	r3, r2, r3
    2be8:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    2bea:	9b01      	ldr	r3, [sp, #4]
    2bec:	9a02      	ldr	r2, [sp, #8]
    2bee:	601a      	str	r2, [r3, #0]

    return dif;
    2bf0:	9b03      	ldr	r3, [sp, #12]
}
    2bf2:	4618      	mov	r0, r3
    2bf4:	b004      	add	sp, #16
    2bf6:	4770      	bx	lr
    2bf8:	e000e010 	.word	0xe000e010

00002bfc <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2bfc:	b082      	sub	sp, #8
    2bfe:	9001      	str	r0, [sp, #4]
    2c00:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    2c02:	bf00      	nop
    2c04:	b002      	add	sp, #8
    2c06:	4770      	bx	lr

00002c08 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2c08:	b500      	push	{lr}
    2c0a:	b085      	sub	sp, #20
    2c0c:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    2c0e:	4b24      	ldr	r3, [pc, #144]	; (2ca0 <Clock_Ip_UpdateDriverContext+0x98>)
    2c10:	2201      	movs	r2, #1
    2c12:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2c14:	4b23      	ldr	r3, [pc, #140]	; (2ca4 <Clock_Ip_UpdateDriverContext+0x9c>)
    2c16:	681b      	ldr	r3, [r3, #0]
    2c18:	2102      	movs	r1, #2
    2c1a:	4618      	mov	r0, r3
    2c1c:	f003 fc32 	bl	6484 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2c20:	2300      	movs	r3, #0
    2c22:	f88d 300f 	strb.w	r3, [sp, #15]
    2c26:	e015      	b.n	2c54 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2c28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2c2c:	9a01      	ldr	r2, [sp, #4]
    2c2e:	334a      	adds	r3, #74	; 0x4a
    2c30:	00db      	lsls	r3, r3, #3
    2c32:	4413      	add	r3, r2
    2c34:	6858      	ldr	r0, [r3, #4]
    2c36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2c3a:	9a01      	ldr	r2, [sp, #4]
    2c3c:	334a      	adds	r3, #74	; 0x4a
    2c3e:	00db      	lsls	r3, r3, #3
    2c40:	4413      	add	r3, r2
    2c42:	689b      	ldr	r3, [r3, #8]
    2c44:	4619      	mov	r1, r3
    2c46:	f001 fadc 	bl	4202 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2c4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2c4e:	3301      	adds	r3, #1
    2c50:	f88d 300f 	strb.w	r3, [sp, #15]
    2c54:	9b01      	ldr	r3, [sp, #4]
    2c56:	7bdb      	ldrb	r3, [r3, #15]
    2c58:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2c5c:	429a      	cmp	r2, r3
    2c5e:	d3e3      	bcc.n	2c28 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2c60:	f000 f824 	bl	2cac <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2c64:	2301      	movs	r3, #1
    2c66:	f88d 300f 	strb.w	r3, [sp, #15]
    2c6a:	e00e      	b.n	2c8a <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2c6c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2c70:	9b01      	ldr	r3, [sp, #4]
    2c72:	327e      	adds	r2, #126	; 0x7e
    2c74:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2c78:	490b      	ldr	r1, [pc, #44]	; (2ca8 <Clock_Ip_UpdateDriverContext+0xa0>)
    2c7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2c7e:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2c80:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2c84:	3301      	adds	r3, #1
    2c86:	f88d 300f 	strb.w	r3, [sp, #15]
    2c8a:	9b01      	ldr	r3, [sp, #4]
    2c8c:	7cdb      	ldrb	r3, [r3, #19]
    2c8e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2c92:	429a      	cmp	r2, r3
    2c94:	d3ea      	bcc.n	2c6c <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2c96:	bf00      	nop
    2c98:	bf00      	nop
    2c9a:	b005      	add	sp, #20
    2c9c:	f85d fb04 	ldr.w	pc, [sp], #4
    2ca0:	1fff8b10 	.word	0x1fff8b10
    2ca4:	1fff8b78 	.word	0x1fff8b78
    2ca8:	1fff8b84 	.word	0x1fff8b84

00002cac <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    2cac:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    2cae:	4b23      	ldr	r3, [pc, #140]	; (2d3c <Clock_Ip_CallEmptyCallbacks+0x90>)
    2cb0:	781b      	ldrb	r3, [r3, #0]
    2cb2:	f083 0301 	eor.w	r3, r3, #1
    2cb6:	b2db      	uxtb	r3, r3
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d03d      	beq.n	2d38 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2cbc:	4b1f      	ldr	r3, [pc, #124]	; (2d3c <Clock_Ip_CallEmptyCallbacks+0x90>)
    2cbe:	2201      	movs	r2, #1
    2cc0:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2cc2:	4b1f      	ldr	r3, [pc, #124]	; (2d40 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2cc4:	685b      	ldr	r3, [r3, #4]
    2cc6:	2100      	movs	r1, #0
    2cc8:	2000      	movs	r0, #0
    2cca:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2ccc:	4b1c      	ldr	r3, [pc, #112]	; (2d40 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2cce:	689b      	ldr	r3, [r3, #8]
    2cd0:	2057      	movs	r0, #87	; 0x57
    2cd2:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2cd4:	4b1b      	ldr	r3, [pc, #108]	; (2d44 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2cd6:	681b      	ldr	r3, [r3, #0]
    2cd8:	2000      	movs	r0, #0
    2cda:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2cdc:	4b1a      	ldr	r3, [pc, #104]	; (2d48 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    2cde:	681b      	ldr	r3, [r3, #0]
    2ce0:	2000      	movs	r0, #0
    2ce2:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2ce4:	4b19      	ldr	r3, [pc, #100]	; (2d4c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	2000      	movs	r0, #0
    2cea:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2cec:	4b18      	ldr	r3, [pc, #96]	; (2d50 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2cee:	685b      	ldr	r3, [r3, #4]
    2cf0:	2000      	movs	r0, #0
    2cf2:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2cf4:	4b16      	ldr	r3, [pc, #88]	; (2d50 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2cf6:	689b      	ldr	r3, [r3, #8]
    2cf8:	2057      	movs	r0, #87	; 0x57
    2cfa:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2cfc:	4b15      	ldr	r3, [pc, #84]	; (2d54 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2cfe:	681b      	ldr	r3, [r3, #0]
    2d00:	2000      	movs	r0, #0
    2d02:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2d04:	4b13      	ldr	r3, [pc, #76]	; (2d54 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2d06:	685b      	ldr	r3, [r3, #4]
    2d08:	2100      	movs	r1, #0
    2d0a:	2057      	movs	r0, #87	; 0x57
    2d0c:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2d0e:	4b12      	ldr	r3, [pc, #72]	; (2d58 <Clock_Ip_CallEmptyCallbacks+0xac>)
    2d10:	681b      	ldr	r3, [r3, #0]
    2d12:	2000      	movs	r0, #0
    2d14:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2d16:	4b11      	ldr	r3, [pc, #68]	; (2d5c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2d18:	685b      	ldr	r3, [r3, #4]
    2d1a:	2000      	movs	r0, #0
    2d1c:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2d1e:	4b0f      	ldr	r3, [pc, #60]	; (2d5c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2d20:	689b      	ldr	r3, [r3, #8]
    2d22:	2057      	movs	r0, #87	; 0x57
    2d24:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2d26:	4b0e      	ldr	r3, [pc, #56]	; (2d60 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2d28:	685b      	ldr	r3, [r3, #4]
    2d2a:	2000      	movs	r0, #0
    2d2c:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2d2e:	4b0d      	ldr	r3, [pc, #52]	; (2d64 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2d30:	681b      	ldr	r3, [r3, #0]
    2d32:	2100      	movs	r1, #0
    2d34:	2000      	movs	r0, #0
    2d36:	4798      	blx	r3
    }
}
    2d38:	bf00      	nop
    2d3a:	bd08      	pop	{r3, pc}
    2d3c:	1fff8b7c 	.word	0x1fff8b7c
    2d40:	000196cc 	.word	0x000196cc
    2d44:	000195e0 	.word	0x000195e0
    2d48:	0001961c 	.word	0x0001961c
    2d4c:	00019624 	.word	0x00019624
    2d50:	0001964c 	.word	0x0001964c
    2d54:	00019658 	.word	0x00019658
    2d58:	00019690 	.word	0x00019690
    2d5c:	000196dc 	.word	0x000196dc
    2d60:	00019708 	.word	0x00019708
    2d64:	00019704 	.word	0x00019704

00002d68 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2d68:	b500      	push	{lr}
    2d6a:	b085      	sub	sp, #20
    2d6c:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2d6e:	9b01      	ldr	r3, [sp, #4]
    2d70:	7adb      	ldrb	r3, [r3, #11]
    2d72:	9303      	str	r3, [sp, #12]
    2d74:	e01f      	b.n	2db6 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2d76:	9b03      	ldr	r3, [sp, #12]
    2d78:	1e5a      	subs	r2, r3, #1
    2d7a:	9b01      	ldr	r3, [sp, #4]
    2d7c:	320d      	adds	r2, #13
    2d7e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2d82:	495a      	ldr	r1, [pc, #360]	; (2eec <Clock_Ip_ResetClockConfiguration+0x184>)
    2d84:	4613      	mov	r3, r2
    2d86:	00db      	lsls	r3, r3, #3
    2d88:	4413      	add	r3, r2
    2d8a:	440b      	add	r3, r1
    2d8c:	3301      	adds	r3, #1
    2d8e:	781b      	ldrb	r3, [r3, #0]
    2d90:	461a      	mov	r2, r3
    2d92:	4b57      	ldr	r3, [pc, #348]	; (2ef0 <Clock_Ip_ResetClockConfiguration+0x188>)
    2d94:	5c9b      	ldrb	r3, [r3, r2]
    2d96:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2d98:	4a56      	ldr	r2, [pc, #344]	; (2ef4 <Clock_Ip_ResetClockConfiguration+0x18c>)
    2d9a:	9b02      	ldr	r3, [sp, #8]
    2d9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2da0:	9a03      	ldr	r2, [sp, #12]
    2da2:	3a01      	subs	r2, #1
    2da4:	320d      	adds	r2, #13
    2da6:	00d2      	lsls	r2, r2, #3
    2da8:	9901      	ldr	r1, [sp, #4]
    2daa:	440a      	add	r2, r1
    2dac:	4610      	mov	r0, r2
    2dae:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2db0:	9b03      	ldr	r3, [sp, #12]
    2db2:	3b01      	subs	r3, #1
    2db4:	9303      	str	r3, [sp, #12]
    2db6:	9b03      	ldr	r3, [sp, #12]
    2db8:	2b00      	cmp	r3, #0
    2dba:	d1dc      	bne.n	2d76 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2dbc:	9b01      	ldr	r3, [sp, #4]
    2dbe:	7b9b      	ldrb	r3, [r3, #14]
    2dc0:	9303      	str	r3, [sp, #12]
    2dc2:	e026      	b.n	2e12 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2dc4:	9b03      	ldr	r3, [sp, #12]
    2dc6:	3b01      	subs	r3, #1
    2dc8:	9a01      	ldr	r2, [sp, #4]
    2dca:	3324      	adds	r3, #36	; 0x24
    2dcc:	011b      	lsls	r3, r3, #4
    2dce:	4413      	add	r3, r2
    2dd0:	3304      	adds	r3, #4
    2dd2:	681a      	ldr	r2, [r3, #0]
    2dd4:	4945      	ldr	r1, [pc, #276]	; (2eec <Clock_Ip_ResetClockConfiguration+0x184>)
    2dd6:	4613      	mov	r3, r2
    2dd8:	00db      	lsls	r3, r3, #3
    2dda:	4413      	add	r3, r2
    2ddc:	440b      	add	r3, r1
    2dde:	3301      	adds	r3, #1
    2de0:	781b      	ldrb	r3, [r3, #0]
    2de2:	461a      	mov	r2, r3
    2de4:	4b44      	ldr	r3, [pc, #272]	; (2ef8 <Clock_Ip_ResetClockConfiguration+0x190>)
    2de6:	5c9b      	ldrb	r3, [r3, r2]
    2de8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2dea:	4944      	ldr	r1, [pc, #272]	; (2efc <Clock_Ip_ResetClockConfiguration+0x194>)
    2dec:	9a02      	ldr	r2, [sp, #8]
    2dee:	4613      	mov	r3, r2
    2df0:	005b      	lsls	r3, r3, #1
    2df2:	4413      	add	r3, r2
    2df4:	009b      	lsls	r3, r3, #2
    2df6:	440b      	add	r3, r1
    2df8:	681b      	ldr	r3, [r3, #0]
    2dfa:	9a03      	ldr	r2, [sp, #12]
    2dfc:	3a01      	subs	r2, #1
    2dfe:	3224      	adds	r2, #36	; 0x24
    2e00:	0112      	lsls	r2, r2, #4
    2e02:	9901      	ldr	r1, [sp, #4]
    2e04:	440a      	add	r2, r1
    2e06:	3204      	adds	r2, #4
    2e08:	4610      	mov	r0, r2
    2e0a:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2e0c:	9b03      	ldr	r3, [sp, #12]
    2e0e:	3b01      	subs	r3, #1
    2e10:	9303      	str	r3, [sp, #12]
    2e12:	9b03      	ldr	r3, [sp, #12]
    2e14:	2b00      	cmp	r3, #0
    2e16:	d1d5      	bne.n	2dc4 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2e18:	9b01      	ldr	r3, [sp, #4]
    2e1a:	7a9b      	ldrb	r3, [r3, #10]
    2e1c:	9303      	str	r3, [sp, #12]
    2e1e:	e02a      	b.n	2e76 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2e20:	9b03      	ldr	r3, [sp, #12]
    2e22:	1e5a      	subs	r2, r3, #1
    2e24:	9901      	ldr	r1, [sp, #4]
    2e26:	4613      	mov	r3, r2
    2e28:	009b      	lsls	r3, r3, #2
    2e2a:	4413      	add	r3, r2
    2e2c:	00db      	lsls	r3, r3, #3
    2e2e:	440b      	add	r3, r1
    2e30:	3340      	adds	r3, #64	; 0x40
    2e32:	681a      	ldr	r2, [r3, #0]
    2e34:	492d      	ldr	r1, [pc, #180]	; (2eec <Clock_Ip_ResetClockConfiguration+0x184>)
    2e36:	4613      	mov	r3, r2
    2e38:	00db      	lsls	r3, r3, #3
    2e3a:	4413      	add	r3, r2
    2e3c:	440b      	add	r3, r1
    2e3e:	3301      	adds	r3, #1
    2e40:	781b      	ldrb	r3, [r3, #0]
    2e42:	461a      	mov	r2, r3
    2e44:	4b2e      	ldr	r3, [pc, #184]	; (2f00 <Clock_Ip_ResetClockConfiguration+0x198>)
    2e46:	5c9b      	ldrb	r3, [r3, r2]
    2e48:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2e4a:	492e      	ldr	r1, [pc, #184]	; (2f04 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2e4c:	9a02      	ldr	r2, [sp, #8]
    2e4e:	4613      	mov	r3, r2
    2e50:	009b      	lsls	r3, r3, #2
    2e52:	4413      	add	r3, r2
    2e54:	009b      	lsls	r3, r3, #2
    2e56:	440b      	add	r3, r1
    2e58:	6819      	ldr	r1, [r3, #0]
    2e5a:	9b03      	ldr	r3, [sp, #12]
    2e5c:	1e5a      	subs	r2, r3, #1
    2e5e:	4613      	mov	r3, r2
    2e60:	009b      	lsls	r3, r3, #2
    2e62:	4413      	add	r3, r2
    2e64:	00db      	lsls	r3, r3, #3
    2e66:	3340      	adds	r3, #64	; 0x40
    2e68:	9a01      	ldr	r2, [sp, #4]
    2e6a:	4413      	add	r3, r2
    2e6c:	4618      	mov	r0, r3
    2e6e:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2e70:	9b03      	ldr	r3, [sp, #12]
    2e72:	3b01      	subs	r3, #1
    2e74:	9303      	str	r3, [sp, #12]
    2e76:	9b03      	ldr	r3, [sp, #12]
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d1d1      	bne.n	2e20 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2e7c:	9b01      	ldr	r3, [sp, #4]
    2e7e:	7a5b      	ldrb	r3, [r3, #9]
    2e80:	9303      	str	r3, [sp, #12]
    2e82:	e02b      	b.n	2edc <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2e84:	9b03      	ldr	r3, [sp, #12]
    2e86:	1e5a      	subs	r2, r3, #1
    2e88:	9901      	ldr	r1, [sp, #4]
    2e8a:	4613      	mov	r3, r2
    2e8c:	009b      	lsls	r3, r3, #2
    2e8e:	4413      	add	r3, r2
    2e90:	009b      	lsls	r3, r3, #2
    2e92:	440b      	add	r3, r1
    2e94:	332c      	adds	r3, #44	; 0x2c
    2e96:	681a      	ldr	r2, [r3, #0]
    2e98:	4914      	ldr	r1, [pc, #80]	; (2eec <Clock_Ip_ResetClockConfiguration+0x184>)
    2e9a:	4613      	mov	r3, r2
    2e9c:	00db      	lsls	r3, r3, #3
    2e9e:	4413      	add	r3, r2
    2ea0:	440b      	add	r3, r1
    2ea2:	3301      	adds	r3, #1
    2ea4:	781b      	ldrb	r3, [r3, #0]
    2ea6:	461a      	mov	r2, r3
    2ea8:	4b17      	ldr	r3, [pc, #92]	; (2f08 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2eaa:	5c9b      	ldrb	r3, [r3, r2]
    2eac:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    2eae:	4917      	ldr	r1, [pc, #92]	; (2f0c <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2eb0:	9a02      	ldr	r2, [sp, #8]
    2eb2:	4613      	mov	r3, r2
    2eb4:	009b      	lsls	r3, r3, #2
    2eb6:	4413      	add	r3, r2
    2eb8:	009b      	lsls	r3, r3, #2
    2eba:	440b      	add	r3, r1
    2ebc:	6819      	ldr	r1, [r3, #0]
    2ebe:	9b03      	ldr	r3, [sp, #12]
    2ec0:	1e5a      	subs	r2, r3, #1
    2ec2:	4613      	mov	r3, r2
    2ec4:	009b      	lsls	r3, r3, #2
    2ec6:	4413      	add	r3, r2
    2ec8:	009b      	lsls	r3, r3, #2
    2eca:	3328      	adds	r3, #40	; 0x28
    2ecc:	9a01      	ldr	r2, [sp, #4]
    2ece:	4413      	add	r3, r2
    2ed0:	3304      	adds	r3, #4
    2ed2:	4618      	mov	r0, r3
    2ed4:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2ed6:	9b03      	ldr	r3, [sp, #12]
    2ed8:	3b01      	subs	r3, #1
    2eda:	9303      	str	r3, [sp, #12]
    2edc:	9b03      	ldr	r3, [sp, #12]
    2ede:	2b00      	cmp	r3, #0
    2ee0:	d1d0      	bne.n	2e84 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    2ee2:	bf00      	nop
    2ee4:	bf00      	nop
    2ee6:	b005      	add	sp, #20
    2ee8:	f85d fb04 	ldr.w	pc, [sp], #4
    2eec:	000190d0 	.word	0x000190d0
    2ef0:	000190a0 	.word	0x000190a0
    2ef4:	00019708 	.word	0x00019708
    2ef8:	00019080 	.word	0x00019080
    2efc:	0001964c 	.word	0x0001964c
    2f00:	00019090 	.word	0x00019090
    2f04:	000196dc 	.word	0x000196dc
    2f08:	00019050 	.word	0x00019050
    2f0c:	00019624 	.word	0x00019624

00002f10 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2f10:	b500      	push	{lr}
    2f12:	b085      	sub	sp, #20
    2f14:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2f16:	2301      	movs	r3, #1
    2f18:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2f1a:	9801      	ldr	r0, [sp, #4]
    2f1c:	f000 f818 	bl	2f50 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2f20:	4b0a      	ldr	r3, [pc, #40]	; (2f4c <Clock_Ip_Init+0x3c>)
    2f22:	781b      	ldrb	r3, [r3, #0]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d00a      	beq.n	2f3e <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2f28:	f000 fb74 	bl	3614 <Clock_Ip_GetPllStatus>
    2f2c:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2f2e:	9b02      	ldr	r3, [sp, #8]
    2f30:	2b00      	cmp	r3, #0
    2f32:	d106      	bne.n	2f42 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2f34:	f000 fbf2 	bl	371c <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2f38:	2300      	movs	r3, #0
    2f3a:	9303      	str	r3, [sp, #12]
    2f3c:	e001      	b.n	2f42 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2f3e:	2300      	movs	r3, #0
    2f40:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2f42:	9b03      	ldr	r3, [sp, #12]
}
    2f44:	4618      	mov	r0, r3
    2f46:	b005      	add	sp, #20
    2f48:	f85d fb04 	ldr.w	pc, [sp], #4
    2f4c:	1fff8b80 	.word	0x1fff8b80

00002f50 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2f50:	b510      	push	{r4, lr}
    2f52:	b084      	sub	sp, #16
    2f54:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2f56:	4a9f      	ldr	r2, [pc, #636]	; (31d4 <Clock_Ip_InitClock+0x284>)
    2f58:	9b01      	ldr	r3, [sp, #4]
    2f5a:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2f5c:	2101      	movs	r1, #1
    2f5e:	9801      	ldr	r0, [sp, #4]
    2f60:	f003 fa90 	bl	6484 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2f64:	4b9b      	ldr	r3, [pc, #620]	; (31d4 <Clock_Ip_InitClock+0x284>)
    2f66:	681b      	ldr	r3, [r3, #0]
    2f68:	2b00      	cmp	r3, #0
    2f6a:	d030      	beq.n	2fce <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2f6c:	2300      	movs	r3, #0
    2f6e:	9303      	str	r3, [sp, #12]
    2f70:	e027      	b.n	2fc2 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2f72:	9901      	ldr	r1, [sp, #4]
    2f74:	9a03      	ldr	r2, [sp, #12]
    2f76:	4613      	mov	r3, r2
    2f78:	009b      	lsls	r3, r3, #2
    2f7a:	4413      	add	r3, r2
    2f7c:	009b      	lsls	r3, r3, #2
    2f7e:	440b      	add	r3, r1
    2f80:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2f84:	681a      	ldr	r2, [r3, #0]
    2f86:	4994      	ldr	r1, [pc, #592]	; (31d8 <Clock_Ip_InitClock+0x288>)
    2f88:	4613      	mov	r3, r2
    2f8a:	00db      	lsls	r3, r3, #3
    2f8c:	4413      	add	r3, r2
    2f8e:	440b      	add	r3, r1
    2f90:	3301      	adds	r3, #1
    2f92:	781b      	ldrb	r3, [r3, #0]
    2f94:	461a      	mov	r2, r3
    2f96:	4b91      	ldr	r3, [pc, #580]	; (31dc <Clock_Ip_InitClock+0x28c>)
    2f98:	5c9b      	ldrb	r3, [r3, r2]
    2f9a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2f9c:	4a90      	ldr	r2, [pc, #576]	; (31e0 <Clock_Ip_InitClock+0x290>)
    2f9e:	9b02      	ldr	r3, [sp, #8]
    2fa0:	011b      	lsls	r3, r3, #4
    2fa2:	4413      	add	r3, r2
    2fa4:	6819      	ldr	r1, [r3, #0]
    2fa6:	9a03      	ldr	r2, [sp, #12]
    2fa8:	4613      	mov	r3, r2
    2faa:	009b      	lsls	r3, r3, #2
    2fac:	4413      	add	r3, r2
    2fae:	009b      	lsls	r3, r3, #2
    2fb0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2fb4:	9a01      	ldr	r2, [sp, #4]
    2fb6:	4413      	add	r3, r2
    2fb8:	4618      	mov	r0, r3
    2fba:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2fbc:	9b03      	ldr	r3, [sp, #12]
    2fbe:	3301      	adds	r3, #1
    2fc0:	9303      	str	r3, [sp, #12]
    2fc2:	9b01      	ldr	r3, [sp, #4]
    2fc4:	7c9b      	ldrb	r3, [r3, #18]
    2fc6:	461a      	mov	r2, r3
    2fc8:	9b03      	ldr	r3, [sp, #12]
    2fca:	4293      	cmp	r3, r2
    2fcc:	d3d1      	bcc.n	2f72 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2fce:	9801      	ldr	r0, [sp, #4]
    2fd0:	f7ff feca 	bl	2d68 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2fd4:	2300      	movs	r3, #0
    2fd6:	9303      	str	r3, [sp, #12]
    2fd8:	e029      	b.n	302e <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2fda:	9901      	ldr	r1, [sp, #4]
    2fdc:	9a03      	ldr	r2, [sp, #12]
    2fde:	4613      	mov	r3, r2
    2fe0:	005b      	lsls	r3, r3, #1
    2fe2:	4413      	add	r3, r2
    2fe4:	009b      	lsls	r3, r3, #2
    2fe6:	440b      	add	r3, r1
    2fe8:	3314      	adds	r3, #20
    2fea:	681a      	ldr	r2, [r3, #0]
    2fec:	497a      	ldr	r1, [pc, #488]	; (31d8 <Clock_Ip_InitClock+0x288>)
    2fee:	4613      	mov	r3, r2
    2ff0:	00db      	lsls	r3, r3, #3
    2ff2:	4413      	add	r3, r2
    2ff4:	440b      	add	r3, r1
    2ff6:	3301      	adds	r3, #1
    2ff8:	781b      	ldrb	r3, [r3, #0]
    2ffa:	461a      	mov	r2, r3
    2ffc:	4b79      	ldr	r3, [pc, #484]	; (31e4 <Clock_Ip_InitClock+0x294>)
    2ffe:	5c9b      	ldrb	r3, [r3, r2]
    3000:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    3002:	4979      	ldr	r1, [pc, #484]	; (31e8 <Clock_Ip_InitClock+0x298>)
    3004:	9a02      	ldr	r2, [sp, #8]
    3006:	4613      	mov	r3, r2
    3008:	005b      	lsls	r3, r3, #1
    300a:	4413      	add	r3, r2
    300c:	009b      	lsls	r3, r3, #2
    300e:	440b      	add	r3, r1
    3010:	6819      	ldr	r1, [r3, #0]
    3012:	9a03      	ldr	r2, [sp, #12]
    3014:	4613      	mov	r3, r2
    3016:	005b      	lsls	r3, r3, #1
    3018:	4413      	add	r3, r2
    301a:	009b      	lsls	r3, r3, #2
    301c:	3310      	adds	r3, #16
    301e:	9a01      	ldr	r2, [sp, #4]
    3020:	4413      	add	r3, r2
    3022:	3304      	adds	r3, #4
    3024:	4618      	mov	r0, r3
    3026:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    3028:	9b03      	ldr	r3, [sp, #12]
    302a:	3301      	adds	r3, #1
    302c:	9303      	str	r3, [sp, #12]
    302e:	9b01      	ldr	r3, [sp, #4]
    3030:	7a1b      	ldrb	r3, [r3, #8]
    3032:	461a      	mov	r2, r3
    3034:	9b03      	ldr	r3, [sp, #12]
    3036:	4293      	cmp	r3, r2
    3038:	d3cf      	bcc.n	2fda <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    303a:	2300      	movs	r3, #0
    303c:	9303      	str	r3, [sp, #12]
    303e:	e02a      	b.n	3096 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    3040:	9901      	ldr	r1, [sp, #4]
    3042:	9a03      	ldr	r2, [sp, #12]
    3044:	4613      	mov	r3, r2
    3046:	009b      	lsls	r3, r3, #2
    3048:	4413      	add	r3, r2
    304a:	009b      	lsls	r3, r3, #2
    304c:	440b      	add	r3, r1
    304e:	332c      	adds	r3, #44	; 0x2c
    3050:	681a      	ldr	r2, [r3, #0]
    3052:	4961      	ldr	r1, [pc, #388]	; (31d8 <Clock_Ip_InitClock+0x288>)
    3054:	4613      	mov	r3, r2
    3056:	00db      	lsls	r3, r3, #3
    3058:	4413      	add	r3, r2
    305a:	440b      	add	r3, r1
    305c:	3301      	adds	r3, #1
    305e:	781b      	ldrb	r3, [r3, #0]
    3060:	461a      	mov	r2, r3
    3062:	4b62      	ldr	r3, [pc, #392]	; (31ec <Clock_Ip_InitClock+0x29c>)
    3064:	5c9b      	ldrb	r3, [r3, r2]
    3066:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    3068:	4961      	ldr	r1, [pc, #388]	; (31f0 <Clock_Ip_InitClock+0x2a0>)
    306a:	9a02      	ldr	r2, [sp, #8]
    306c:	4613      	mov	r3, r2
    306e:	009b      	lsls	r3, r3, #2
    3070:	4413      	add	r3, r2
    3072:	009b      	lsls	r3, r3, #2
    3074:	440b      	add	r3, r1
    3076:	3304      	adds	r3, #4
    3078:	6819      	ldr	r1, [r3, #0]
    307a:	9a03      	ldr	r2, [sp, #12]
    307c:	4613      	mov	r3, r2
    307e:	009b      	lsls	r3, r3, #2
    3080:	4413      	add	r3, r2
    3082:	009b      	lsls	r3, r3, #2
    3084:	3328      	adds	r3, #40	; 0x28
    3086:	9a01      	ldr	r2, [sp, #4]
    3088:	4413      	add	r3, r2
    308a:	3304      	adds	r3, #4
    308c:	4618      	mov	r0, r3
    308e:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    3090:	9b03      	ldr	r3, [sp, #12]
    3092:	3301      	adds	r3, #1
    3094:	9303      	str	r3, [sp, #12]
    3096:	9b01      	ldr	r3, [sp, #4]
    3098:	7a5b      	ldrb	r3, [r3, #9]
    309a:	461a      	mov	r2, r3
    309c:	9b03      	ldr	r3, [sp, #12]
    309e:	4293      	cmp	r3, r2
    30a0:	d3ce      	bcc.n	3040 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    30a2:	9801      	ldr	r0, [sp, #4]
    30a4:	f7ff fdb0 	bl	2c08 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    30a8:	2300      	movs	r3, #0
    30aa:	9303      	str	r3, [sp, #12]
    30ac:	e028      	b.n	3100 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    30ae:	9901      	ldr	r1, [sp, #4]
    30b0:	9a03      	ldr	r2, [sp, #12]
    30b2:	4613      	mov	r3, r2
    30b4:	009b      	lsls	r3, r3, #2
    30b6:	4413      	add	r3, r2
    30b8:	009b      	lsls	r3, r3, #2
    30ba:	440b      	add	r3, r1
    30bc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    30c0:	681a      	ldr	r2, [r3, #0]
    30c2:	4945      	ldr	r1, [pc, #276]	; (31d8 <Clock_Ip_InitClock+0x288>)
    30c4:	4613      	mov	r3, r2
    30c6:	00db      	lsls	r3, r3, #3
    30c8:	4413      	add	r3, r2
    30ca:	440b      	add	r3, r1
    30cc:	3301      	adds	r3, #1
    30ce:	781b      	ldrb	r3, [r3, #0]
    30d0:	461a      	mov	r2, r3
    30d2:	4b48      	ldr	r3, [pc, #288]	; (31f4 <Clock_Ip_InitClock+0x2a4>)
    30d4:	5c9b      	ldrb	r3, [r3, r2]
    30d6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    30d8:	4a47      	ldr	r2, [pc, #284]	; (31f8 <Clock_Ip_InitClock+0x2a8>)
    30da:	9b02      	ldr	r3, [sp, #8]
    30dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    30e0:	9a03      	ldr	r2, [sp, #12]
    30e2:	4613      	mov	r3, r2
    30e4:	009b      	lsls	r3, r3, #2
    30e6:	4413      	add	r3, r2
    30e8:	009b      	lsls	r3, r3, #2
    30ea:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    30ee:	9a01      	ldr	r2, [sp, #4]
    30f0:	4413      	add	r3, r2
    30f2:	3304      	adds	r3, #4
    30f4:	9903      	ldr	r1, [sp, #12]
    30f6:	4618      	mov	r0, r3
    30f8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    30fa:	9b03      	ldr	r3, [sp, #12]
    30fc:	3301      	adds	r3, #1
    30fe:	9303      	str	r3, [sp, #12]
    3100:	9b01      	ldr	r3, [sp, #4]
    3102:	7c5b      	ldrb	r3, [r3, #17]
    3104:	461a      	mov	r2, r3
    3106:	9b03      	ldr	r3, [sp, #12]
    3108:	4293      	cmp	r3, r2
    310a:	d3d0      	bcc.n	30ae <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    310c:	2300      	movs	r3, #0
    310e:	9303      	str	r3, [sp, #12]
    3110:	e026      	b.n	3160 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    3112:	9901      	ldr	r1, [sp, #4]
    3114:	9a03      	ldr	r2, [sp, #12]
    3116:	4613      	mov	r3, r2
    3118:	005b      	lsls	r3, r3, #1
    311a:	4413      	add	r3, r2
    311c:	009b      	lsls	r3, r3, #2
    311e:	440b      	add	r3, r1
    3120:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3124:	681a      	ldr	r2, [r3, #0]
    3126:	492c      	ldr	r1, [pc, #176]	; (31d8 <Clock_Ip_InitClock+0x288>)
    3128:	4613      	mov	r3, r2
    312a:	00db      	lsls	r3, r3, #3
    312c:	4413      	add	r3, r2
    312e:	440b      	add	r3, r1
    3130:	3301      	adds	r3, #1
    3132:	781b      	ldrb	r3, [r3, #0]
    3134:	461a      	mov	r2, r3
    3136:	4b31      	ldr	r3, [pc, #196]	; (31fc <Clock_Ip_InitClock+0x2ac>)
    3138:	5c9b      	ldrb	r3, [r3, r2]
    313a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    313c:	4a30      	ldr	r2, [pc, #192]	; (3200 <Clock_Ip_InitClock+0x2b0>)
    313e:	9b02      	ldr	r3, [sp, #8]
    3140:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    3144:	9a03      	ldr	r2, [sp, #12]
    3146:	4613      	mov	r3, r2
    3148:	005b      	lsls	r3, r3, #1
    314a:	4413      	add	r3, r2
    314c:	009b      	lsls	r3, r3, #2
    314e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3152:	9a01      	ldr	r2, [sp, #4]
    3154:	4413      	add	r3, r2
    3156:	4618      	mov	r0, r3
    3158:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    315a:	9b03      	ldr	r3, [sp, #12]
    315c:	3301      	adds	r3, #1
    315e:	9303      	str	r3, [sp, #12]
    3160:	9b01      	ldr	r3, [sp, #4]
    3162:	7b5b      	ldrb	r3, [r3, #13]
    3164:	461a      	mov	r2, r3
    3166:	9b03      	ldr	r3, [sp, #12]
    3168:	4293      	cmp	r3, r2
    316a:	d3d2      	bcc.n	3112 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    316c:	2300      	movs	r3, #0
    316e:	9303      	str	r3, [sp, #12]
    3170:	e026      	b.n	31c0 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    3172:	9901      	ldr	r1, [sp, #4]
    3174:	9a03      	ldr	r2, [sp, #12]
    3176:	4613      	mov	r3, r2
    3178:	005b      	lsls	r3, r3, #1
    317a:	4413      	add	r3, r2
    317c:	009b      	lsls	r3, r3, #2
    317e:	440b      	add	r3, r1
    3180:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3184:	681a      	ldr	r2, [r3, #0]
    3186:	4914      	ldr	r1, [pc, #80]	; (31d8 <Clock_Ip_InitClock+0x288>)
    3188:	4613      	mov	r3, r2
    318a:	00db      	lsls	r3, r3, #3
    318c:	4413      	add	r3, r2
    318e:	440b      	add	r3, r1
    3190:	3301      	adds	r3, #1
    3192:	781b      	ldrb	r3, [r3, #0]
    3194:	461a      	mov	r2, r3
    3196:	4b1b      	ldr	r3, [pc, #108]	; (3204 <Clock_Ip_InitClock+0x2b4>)
    3198:	5c9b      	ldrb	r3, [r3, r2]
    319a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    319c:	4a1a      	ldr	r2, [pc, #104]	; (3208 <Clock_Ip_InitClock+0x2b8>)
    319e:	9b02      	ldr	r3, [sp, #8]
    31a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    31a4:	9a03      	ldr	r2, [sp, #12]
    31a6:	4613      	mov	r3, r2
    31a8:	005b      	lsls	r3, r3, #1
    31aa:	4413      	add	r3, r2
    31ac:	009b      	lsls	r3, r3, #2
    31ae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    31b2:	9a01      	ldr	r2, [sp, #4]
    31b4:	4413      	add	r3, r2
    31b6:	4618      	mov	r0, r3
    31b8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    31ba:	9b03      	ldr	r3, [sp, #12]
    31bc:	3301      	adds	r3, #1
    31be:	9303      	str	r3, [sp, #12]
    31c0:	9b01      	ldr	r3, [sp, #4]
    31c2:	7b1b      	ldrb	r3, [r3, #12]
    31c4:	461a      	mov	r2, r3
    31c6:	9b03      	ldr	r3, [sp, #12]
    31c8:	4293      	cmp	r3, r2
    31ca:	d3d2      	bcc.n	3172 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    31cc:	2300      	movs	r3, #0
    31ce:	9303      	str	r3, [sp, #12]
    31d0:	e044      	b.n	325c <Clock_Ip_InitClock+0x30c>
    31d2:	bf00      	nop
    31d4:	1fff8b78 	.word	0x1fff8b78
    31d8:	000190d0 	.word	0x000190d0
    31dc:	000190c0 	.word	0x000190c0
    31e0:	000196cc 	.word	0x000196cc
    31e4:	00019060 	.word	0x00019060
    31e8:	00019690 	.word	0x00019690
    31ec:	00019050 	.word	0x00019050
    31f0:	00019624 	.word	0x00019624
    31f4:	000190b0 	.word	0x000190b0
    31f8:	00019704 	.word	0x00019704
    31fc:	00019040 	.word	0x00019040
    3200:	0001961c 	.word	0x0001961c
    3204:	00019030 	.word	0x00019030
    3208:	000195e0 	.word	0x000195e0
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    320c:	9901      	ldr	r1, [sp, #4]
    320e:	9a03      	ldr	r2, [sp, #12]
    3210:	4613      	mov	r3, r2
    3212:	005b      	lsls	r3, r3, #1
    3214:	4413      	add	r3, r2
    3216:	009b      	lsls	r3, r3, #2
    3218:	440b      	add	r3, r1
    321a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    321e:	681a      	ldr	r2, [r3, #0]
    3220:	49ac      	ldr	r1, [pc, #688]	; (34d4 <Clock_Ip_InitClock+0x584>)
    3222:	4613      	mov	r3, r2
    3224:	00db      	lsls	r3, r3, #3
    3226:	4413      	add	r3, r2
    3228:	440b      	add	r3, r1
    322a:	3301      	adds	r3, #1
    322c:	781b      	ldrb	r3, [r3, #0]
    322e:	461a      	mov	r2, r3
    3230:	4ba9      	ldr	r3, [pc, #676]	; (34d8 <Clock_Ip_InitClock+0x588>)
    3232:	5c9b      	ldrb	r3, [r3, r2]
    3234:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    3236:	4aa9      	ldr	r2, [pc, #676]	; (34dc <Clock_Ip_InitClock+0x58c>)
    3238:	9b02      	ldr	r3, [sp, #8]
    323a:	00db      	lsls	r3, r3, #3
    323c:	4413      	add	r3, r2
    323e:	6859      	ldr	r1, [r3, #4]
    3240:	9a03      	ldr	r2, [sp, #12]
    3242:	4613      	mov	r3, r2
    3244:	005b      	lsls	r3, r3, #1
    3246:	4413      	add	r3, r2
    3248:	009b      	lsls	r3, r3, #2
    324a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    324e:	9a01      	ldr	r2, [sp, #4]
    3250:	4413      	add	r3, r2
    3252:	4618      	mov	r0, r3
    3254:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    3256:	9b03      	ldr	r3, [sp, #12]
    3258:	3301      	adds	r3, #1
    325a:	9303      	str	r3, [sp, #12]
    325c:	9b01      	ldr	r3, [sp, #4]
    325e:	7b5b      	ldrb	r3, [r3, #13]
    3260:	461a      	mov	r2, r3
    3262:	9b03      	ldr	r3, [sp, #12]
    3264:	4293      	cmp	r3, r2
    3266:	d3d1      	bcc.n	320c <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    3268:	2300      	movs	r3, #0
    326a:	9303      	str	r3, [sp, #12]
    326c:	e029      	b.n	32c2 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    326e:	9901      	ldr	r1, [sp, #4]
    3270:	9a03      	ldr	r2, [sp, #12]
    3272:	4613      	mov	r3, r2
    3274:	009b      	lsls	r3, r3, #2
    3276:	4413      	add	r3, r2
    3278:	00db      	lsls	r3, r3, #3
    327a:	440b      	add	r3, r1
    327c:	3340      	adds	r3, #64	; 0x40
    327e:	681a      	ldr	r2, [r3, #0]
    3280:	4994      	ldr	r1, [pc, #592]	; (34d4 <Clock_Ip_InitClock+0x584>)
    3282:	4613      	mov	r3, r2
    3284:	00db      	lsls	r3, r3, #3
    3286:	4413      	add	r3, r2
    3288:	440b      	add	r3, r1
    328a:	3301      	adds	r3, #1
    328c:	781b      	ldrb	r3, [r3, #0]
    328e:	461a      	mov	r2, r3
    3290:	4b93      	ldr	r3, [pc, #588]	; (34e0 <Clock_Ip_InitClock+0x590>)
    3292:	5c9b      	ldrb	r3, [r3, r2]
    3294:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    3296:	4993      	ldr	r1, [pc, #588]	; (34e4 <Clock_Ip_InitClock+0x594>)
    3298:	9a02      	ldr	r2, [sp, #8]
    329a:	4613      	mov	r3, r2
    329c:	009b      	lsls	r3, r3, #2
    329e:	4413      	add	r3, r2
    32a0:	009b      	lsls	r3, r3, #2
    32a2:	440b      	add	r3, r1
    32a4:	3304      	adds	r3, #4
    32a6:	6819      	ldr	r1, [r3, #0]
    32a8:	9a03      	ldr	r2, [sp, #12]
    32aa:	4613      	mov	r3, r2
    32ac:	009b      	lsls	r3, r3, #2
    32ae:	4413      	add	r3, r2
    32b0:	00db      	lsls	r3, r3, #3
    32b2:	3340      	adds	r3, #64	; 0x40
    32b4:	9a01      	ldr	r2, [sp, #4]
    32b6:	4413      	add	r3, r2
    32b8:	4618      	mov	r0, r3
    32ba:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    32bc:	9b03      	ldr	r3, [sp, #12]
    32be:	3301      	adds	r3, #1
    32c0:	9303      	str	r3, [sp, #12]
    32c2:	9b01      	ldr	r3, [sp, #4]
    32c4:	7a9b      	ldrb	r3, [r3, #10]
    32c6:	461a      	mov	r2, r3
    32c8:	9b03      	ldr	r3, [sp, #12]
    32ca:	4293      	cmp	r3, r2
    32cc:	d3cf      	bcc.n	326e <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    32ce:	2300      	movs	r3, #0
    32d0:	9303      	str	r3, [sp, #12]
    32d2:	e029      	b.n	3328 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    32d4:	9901      	ldr	r1, [sp, #4]
    32d6:	9a03      	ldr	r2, [sp, #12]
    32d8:	4613      	mov	r3, r2
    32da:	009b      	lsls	r3, r3, #2
    32dc:	4413      	add	r3, r2
    32de:	009b      	lsls	r3, r3, #2
    32e0:	440b      	add	r3, r1
    32e2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    32e6:	681a      	ldr	r2, [r3, #0]
    32e8:	497a      	ldr	r1, [pc, #488]	; (34d4 <Clock_Ip_InitClock+0x584>)
    32ea:	4613      	mov	r3, r2
    32ec:	00db      	lsls	r3, r3, #3
    32ee:	4413      	add	r3, r2
    32f0:	440b      	add	r3, r1
    32f2:	3301      	adds	r3, #1
    32f4:	781b      	ldrb	r3, [r3, #0]
    32f6:	461a      	mov	r2, r3
    32f8:	4b7b      	ldr	r3, [pc, #492]	; (34e8 <Clock_Ip_InitClock+0x598>)
    32fa:	5c9b      	ldrb	r3, [r3, r2]
    32fc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    32fe:	4a7b      	ldr	r2, [pc, #492]	; (34ec <Clock_Ip_InitClock+0x59c>)
    3300:	9b02      	ldr	r3, [sp, #8]
    3302:	011b      	lsls	r3, r3, #4
    3304:	4413      	add	r3, r2
    3306:	3304      	adds	r3, #4
    3308:	681c      	ldr	r4, [r3, #0]
    330a:	9a03      	ldr	r2, [sp, #12]
    330c:	4613      	mov	r3, r2
    330e:	009b      	lsls	r3, r3, #2
    3310:	4413      	add	r3, r2
    3312:	009b      	lsls	r3, r3, #2
    3314:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3318:	9a01      	ldr	r2, [sp, #4]
    331a:	4413      	add	r3, r2
    331c:	9903      	ldr	r1, [sp, #12]
    331e:	4618      	mov	r0, r3
    3320:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    3322:	9b03      	ldr	r3, [sp, #12]
    3324:	3301      	adds	r3, #1
    3326:	9303      	str	r3, [sp, #12]
    3328:	9b01      	ldr	r3, [sp, #4]
    332a:	7c9b      	ldrb	r3, [r3, #18]
    332c:	461a      	mov	r2, r3
    332e:	9b03      	ldr	r3, [sp, #12]
    3330:	4293      	cmp	r3, r2
    3332:	d3cf      	bcc.n	32d4 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    3334:	2300      	movs	r3, #0
    3336:	9303      	str	r3, [sp, #12]
    3338:	e02a      	b.n	3390 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    333a:	9901      	ldr	r1, [sp, #4]
    333c:	9a03      	ldr	r2, [sp, #12]
    333e:	4613      	mov	r3, r2
    3340:	009b      	lsls	r3, r3, #2
    3342:	4413      	add	r3, r2
    3344:	009b      	lsls	r3, r3, #2
    3346:	440b      	add	r3, r1
    3348:	332c      	adds	r3, #44	; 0x2c
    334a:	681a      	ldr	r2, [r3, #0]
    334c:	4961      	ldr	r1, [pc, #388]	; (34d4 <Clock_Ip_InitClock+0x584>)
    334e:	4613      	mov	r3, r2
    3350:	00db      	lsls	r3, r3, #3
    3352:	4413      	add	r3, r2
    3354:	440b      	add	r3, r1
    3356:	3301      	adds	r3, #1
    3358:	781b      	ldrb	r3, [r3, #0]
    335a:	461a      	mov	r2, r3
    335c:	4b64      	ldr	r3, [pc, #400]	; (34f0 <Clock_Ip_InitClock+0x5a0>)
    335e:	5c9b      	ldrb	r3, [r3, r2]
    3360:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    3362:	4964      	ldr	r1, [pc, #400]	; (34f4 <Clock_Ip_InitClock+0x5a4>)
    3364:	9a02      	ldr	r2, [sp, #8]
    3366:	4613      	mov	r3, r2
    3368:	009b      	lsls	r3, r3, #2
    336a:	4413      	add	r3, r2
    336c:	009b      	lsls	r3, r3, #2
    336e:	440b      	add	r3, r1
    3370:	3308      	adds	r3, #8
    3372:	6819      	ldr	r1, [r3, #0]
    3374:	9a03      	ldr	r2, [sp, #12]
    3376:	4613      	mov	r3, r2
    3378:	009b      	lsls	r3, r3, #2
    337a:	4413      	add	r3, r2
    337c:	009b      	lsls	r3, r3, #2
    337e:	3328      	adds	r3, #40	; 0x28
    3380:	9a01      	ldr	r2, [sp, #4]
    3382:	4413      	add	r3, r2
    3384:	3304      	adds	r3, #4
    3386:	4618      	mov	r0, r3
    3388:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    338a:	9b03      	ldr	r3, [sp, #12]
    338c:	3301      	adds	r3, #1
    338e:	9303      	str	r3, [sp, #12]
    3390:	9b01      	ldr	r3, [sp, #4]
    3392:	7a5b      	ldrb	r3, [r3, #9]
    3394:	461a      	mov	r2, r3
    3396:	9b03      	ldr	r3, [sp, #12]
    3398:	4293      	cmp	r3, r2
    339a:	d3ce      	bcc.n	333a <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    339c:	2300      	movs	r3, #0
    339e:	9303      	str	r3, [sp, #12]
    33a0:	e029      	b.n	33f6 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    33a2:	9901      	ldr	r1, [sp, #4]
    33a4:	9a03      	ldr	r2, [sp, #12]
    33a6:	4613      	mov	r3, r2
    33a8:	009b      	lsls	r3, r3, #2
    33aa:	4413      	add	r3, r2
    33ac:	00db      	lsls	r3, r3, #3
    33ae:	440b      	add	r3, r1
    33b0:	3340      	adds	r3, #64	; 0x40
    33b2:	681a      	ldr	r2, [r3, #0]
    33b4:	4947      	ldr	r1, [pc, #284]	; (34d4 <Clock_Ip_InitClock+0x584>)
    33b6:	4613      	mov	r3, r2
    33b8:	00db      	lsls	r3, r3, #3
    33ba:	4413      	add	r3, r2
    33bc:	440b      	add	r3, r1
    33be:	3301      	adds	r3, #1
    33c0:	781b      	ldrb	r3, [r3, #0]
    33c2:	461a      	mov	r2, r3
    33c4:	4b46      	ldr	r3, [pc, #280]	; (34e0 <Clock_Ip_InitClock+0x590>)
    33c6:	5c9b      	ldrb	r3, [r3, r2]
    33c8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    33ca:	4946      	ldr	r1, [pc, #280]	; (34e4 <Clock_Ip_InitClock+0x594>)
    33cc:	9a02      	ldr	r2, [sp, #8]
    33ce:	4613      	mov	r3, r2
    33d0:	009b      	lsls	r3, r3, #2
    33d2:	4413      	add	r3, r2
    33d4:	009b      	lsls	r3, r3, #2
    33d6:	440b      	add	r3, r1
    33d8:	330c      	adds	r3, #12
    33da:	6819      	ldr	r1, [r3, #0]
    33dc:	9a03      	ldr	r2, [sp, #12]
    33de:	4613      	mov	r3, r2
    33e0:	009b      	lsls	r3, r3, #2
    33e2:	4413      	add	r3, r2
    33e4:	00db      	lsls	r3, r3, #3
    33e6:	3340      	adds	r3, #64	; 0x40
    33e8:	9a01      	ldr	r2, [sp, #4]
    33ea:	4413      	add	r3, r2
    33ec:	4618      	mov	r0, r3
    33ee:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    33f0:	9b03      	ldr	r3, [sp, #12]
    33f2:	3301      	adds	r3, #1
    33f4:	9303      	str	r3, [sp, #12]
    33f6:	9b01      	ldr	r3, [sp, #4]
    33f8:	7a9b      	ldrb	r3, [r3, #10]
    33fa:	461a      	mov	r2, r3
    33fc:	9b03      	ldr	r3, [sp, #12]
    33fe:	4293      	cmp	r3, r2
    3400:	d3cf      	bcc.n	33a2 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    3402:	2300      	movs	r3, #0
    3404:	9303      	str	r3, [sp, #12]
    3406:	e025      	b.n	3454 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    3408:	9a01      	ldr	r2, [sp, #4]
    340a:	9b03      	ldr	r3, [sp, #12]
    340c:	3324      	adds	r3, #36	; 0x24
    340e:	011b      	lsls	r3, r3, #4
    3410:	4413      	add	r3, r2
    3412:	3304      	adds	r3, #4
    3414:	681a      	ldr	r2, [r3, #0]
    3416:	492f      	ldr	r1, [pc, #188]	; (34d4 <Clock_Ip_InitClock+0x584>)
    3418:	4613      	mov	r3, r2
    341a:	00db      	lsls	r3, r3, #3
    341c:	4413      	add	r3, r2
    341e:	440b      	add	r3, r1
    3420:	3301      	adds	r3, #1
    3422:	781b      	ldrb	r3, [r3, #0]
    3424:	461a      	mov	r2, r3
    3426:	4b34      	ldr	r3, [pc, #208]	; (34f8 <Clock_Ip_InitClock+0x5a8>)
    3428:	5c9b      	ldrb	r3, [r3, r2]
    342a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    342c:	4933      	ldr	r1, [pc, #204]	; (34fc <Clock_Ip_InitClock+0x5ac>)
    342e:	9a02      	ldr	r2, [sp, #8]
    3430:	4613      	mov	r3, r2
    3432:	005b      	lsls	r3, r3, #1
    3434:	4413      	add	r3, r2
    3436:	009b      	lsls	r3, r3, #2
    3438:	440b      	add	r3, r1
    343a:	3304      	adds	r3, #4
    343c:	681b      	ldr	r3, [r3, #0]
    343e:	9a03      	ldr	r2, [sp, #12]
    3440:	3224      	adds	r2, #36	; 0x24
    3442:	0112      	lsls	r2, r2, #4
    3444:	9901      	ldr	r1, [sp, #4]
    3446:	440a      	add	r2, r1
    3448:	3204      	adds	r2, #4
    344a:	4610      	mov	r0, r2
    344c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    344e:	9b03      	ldr	r3, [sp, #12]
    3450:	3301      	adds	r3, #1
    3452:	9303      	str	r3, [sp, #12]
    3454:	9b01      	ldr	r3, [sp, #4]
    3456:	7b9b      	ldrb	r3, [r3, #14]
    3458:	461a      	mov	r2, r3
    345a:	9b03      	ldr	r3, [sp, #12]
    345c:	4293      	cmp	r3, r2
    345e:	d3d3      	bcc.n	3408 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    3460:	4b27      	ldr	r3, [pc, #156]	; (3500 <Clock_Ip_InitClock+0x5b0>)
    3462:	2200      	movs	r2, #0
    3464:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    3466:	4b26      	ldr	r3, [pc, #152]	; (3500 <Clock_Ip_InitClock+0x5b0>)
    3468:	2200      	movs	r2, #0
    346a:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    346c:	4b24      	ldr	r3, [pc, #144]	; (3500 <Clock_Ip_InitClock+0x5b0>)
    346e:	2201      	movs	r2, #1
    3470:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    3472:	4b23      	ldr	r3, [pc, #140]	; (3500 <Clock_Ip_InitClock+0x5b0>)
    3474:	2200      	movs	r2, #0
    3476:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    3478:	f000 fa9c 	bl	39b4 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    347c:	2300      	movs	r3, #0
    347e:	9303      	str	r3, [sp, #12]
    3480:	e04c      	b.n	351c <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    3482:	9a01      	ldr	r2, [sp, #4]
    3484:	9b03      	ldr	r3, [sp, #12]
    3486:	330d      	adds	r3, #13
    3488:	00db      	lsls	r3, r3, #3
    348a:	4413      	add	r3, r2
    348c:	685b      	ldr	r3, [r3, #4]
    348e:	4a1d      	ldr	r2, [pc, #116]	; (3504 <Clock_Ip_InitClock+0x5b4>)
    3490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3494:	2b03      	cmp	r3, #3
    3496:	d03b      	beq.n	3510 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3498:	9b01      	ldr	r3, [sp, #4]
    349a:	9a03      	ldr	r2, [sp, #12]
    349c:	320d      	adds	r2, #13
    349e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    34a2:	490c      	ldr	r1, [pc, #48]	; (34d4 <Clock_Ip_InitClock+0x584>)
    34a4:	4613      	mov	r3, r2
    34a6:	00db      	lsls	r3, r3, #3
    34a8:	4413      	add	r3, r2
    34aa:	440b      	add	r3, r1
    34ac:	3301      	adds	r3, #1
    34ae:	781b      	ldrb	r3, [r3, #0]
    34b0:	461a      	mov	r2, r3
    34b2:	4b15      	ldr	r3, [pc, #84]	; (3508 <Clock_Ip_InitClock+0x5b8>)
    34b4:	5c9b      	ldrb	r3, [r3, r2]
    34b6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    34b8:	4a14      	ldr	r2, [pc, #80]	; (350c <Clock_Ip_InitClock+0x5bc>)
    34ba:	9b02      	ldr	r3, [sp, #8]
    34bc:	00db      	lsls	r3, r3, #3
    34be:	4413      	add	r3, r2
    34c0:	685b      	ldr	r3, [r3, #4]
    34c2:	9a03      	ldr	r2, [sp, #12]
    34c4:	320d      	adds	r2, #13
    34c6:	00d2      	lsls	r2, r2, #3
    34c8:	9901      	ldr	r1, [sp, #4]
    34ca:	440a      	add	r2, r1
    34cc:	4610      	mov	r0, r2
    34ce:	4798      	blx	r3
    34d0:	e021      	b.n	3516 <Clock_Ip_InitClock+0x5c6>
    34d2:	bf00      	nop
    34d4:	000190d0 	.word	0x000190d0
    34d8:	00019040 	.word	0x00019040
    34dc:	0001961c 	.word	0x0001961c
    34e0:	00019090 	.word	0x00019090
    34e4:	000196dc 	.word	0x000196dc
    34e8:	000190c0 	.word	0x000190c0
    34ec:	000196cc 	.word	0x000196cc
    34f0:	00019050 	.word	0x00019050
    34f4:	00019624 	.word	0x00019624
    34f8:	00019080 	.word	0x00019080
    34fc:	0001964c 	.word	0x0001964c
    3500:	1fff8b80 	.word	0x1fff8b80
    3504:	0001951c 	.word	0x0001951c
    3508:	000190a0 	.word	0x000190a0
    350c:	00019708 	.word	0x00019708
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    3510:	4b3a      	ldr	r3, [pc, #232]	; (35fc <Clock_Ip_InitClock+0x6ac>)
    3512:	2201      	movs	r2, #1
    3514:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    3516:	9b03      	ldr	r3, [sp, #12]
    3518:	3301      	adds	r3, #1
    351a:	9303      	str	r3, [sp, #12]
    351c:	9b01      	ldr	r3, [sp, #4]
    351e:	7adb      	ldrb	r3, [r3, #11]
    3520:	461a      	mov	r2, r3
    3522:	9b03      	ldr	r3, [sp, #12]
    3524:	4293      	cmp	r3, r2
    3526:	d3ac      	bcc.n	3482 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    3528:	4b34      	ldr	r3, [pc, #208]	; (35fc <Clock_Ip_InitClock+0x6ac>)
    352a:	781b      	ldrb	r3, [r3, #0]
    352c:	f083 0301 	eor.w	r3, r3, #1
    3530:	b2db      	uxtb	r3, r3
    3532:	2b00      	cmp	r3, #0
    3534:	d05e      	beq.n	35f4 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3536:	2300      	movs	r3, #0
    3538:	9303      	str	r3, [sp, #12]
    353a:	e01f      	b.n	357c <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    353c:	9a01      	ldr	r2, [sp, #4]
    353e:	9b03      	ldr	r3, [sp, #12]
    3540:	334e      	adds	r3, #78	; 0x4e
    3542:	00db      	lsls	r3, r3, #3
    3544:	4413      	add	r3, r2
    3546:	685a      	ldr	r2, [r3, #4]
    3548:	492d      	ldr	r1, [pc, #180]	; (3600 <Clock_Ip_InitClock+0x6b0>)
    354a:	4613      	mov	r3, r2
    354c:	00db      	lsls	r3, r3, #3
    354e:	4413      	add	r3, r2
    3550:	440b      	add	r3, r1
    3552:	3301      	adds	r3, #1
    3554:	781b      	ldrb	r3, [r3, #0]
    3556:	461a      	mov	r2, r3
    3558:	4b2a      	ldr	r3, [pc, #168]	; (3604 <Clock_Ip_InitClock+0x6b4>)
    355a:	5c9b      	ldrb	r3, [r3, r2]
    355c:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    355e:	4a2a      	ldr	r2, [pc, #168]	; (3608 <Clock_Ip_InitClock+0x6b8>)
    3560:	9b02      	ldr	r3, [sp, #8]
    3562:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3566:	9a03      	ldr	r2, [sp, #12]
    3568:	324e      	adds	r2, #78	; 0x4e
    356a:	00d2      	lsls	r2, r2, #3
    356c:	9901      	ldr	r1, [sp, #4]
    356e:	440a      	add	r2, r1
    3570:	3204      	adds	r2, #4
    3572:	4610      	mov	r0, r2
    3574:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3576:	9b03      	ldr	r3, [sp, #12]
    3578:	3301      	adds	r3, #1
    357a:	9303      	str	r3, [sp, #12]
    357c:	9b01      	ldr	r3, [sp, #4]
    357e:	7c1b      	ldrb	r3, [r3, #16]
    3580:	461a      	mov	r2, r3
    3582:	9b03      	ldr	r3, [sp, #12]
    3584:	4293      	cmp	r3, r2
    3586:	d3d9      	bcc.n	353c <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    3588:	2300      	movs	r3, #0
    358a:	9303      	str	r3, [sp, #12]
    358c:	e028      	b.n	35e0 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    358e:	9901      	ldr	r1, [sp, #4]
    3590:	9a03      	ldr	r2, [sp, #12]
    3592:	4613      	mov	r3, r2
    3594:	009b      	lsls	r3, r3, #2
    3596:	4413      	add	r3, r2
    3598:	009b      	lsls	r3, r3, #2
    359a:	440b      	add	r3, r1
    359c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    35a0:	681a      	ldr	r2, [r3, #0]
    35a2:	4917      	ldr	r1, [pc, #92]	; (3600 <Clock_Ip_InitClock+0x6b0>)
    35a4:	4613      	mov	r3, r2
    35a6:	00db      	lsls	r3, r3, #3
    35a8:	4413      	add	r3, r2
    35aa:	440b      	add	r3, r1
    35ac:	3301      	adds	r3, #1
    35ae:	781b      	ldrb	r3, [r3, #0]
    35b0:	461a      	mov	r2, r3
    35b2:	4b16      	ldr	r3, [pc, #88]	; (360c <Clock_Ip_InitClock+0x6bc>)
    35b4:	5c9b      	ldrb	r3, [r3, r2]
    35b6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    35b8:	4a15      	ldr	r2, [pc, #84]	; (3610 <Clock_Ip_InitClock+0x6c0>)
    35ba:	9b02      	ldr	r3, [sp, #8]
    35bc:	011b      	lsls	r3, r3, #4
    35be:	4413      	add	r3, r2
    35c0:	330c      	adds	r3, #12
    35c2:	6819      	ldr	r1, [r3, #0]
    35c4:	9a03      	ldr	r2, [sp, #12]
    35c6:	4613      	mov	r3, r2
    35c8:	009b      	lsls	r3, r3, #2
    35ca:	4413      	add	r3, r2
    35cc:	009b      	lsls	r3, r3, #2
    35ce:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    35d2:	9a01      	ldr	r2, [sp, #4]
    35d4:	4413      	add	r3, r2
    35d6:	4618      	mov	r0, r3
    35d8:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    35da:	9b03      	ldr	r3, [sp, #12]
    35dc:	3301      	adds	r3, #1
    35de:	9303      	str	r3, [sp, #12]
    35e0:	9b01      	ldr	r3, [sp, #4]
    35e2:	7c9b      	ldrb	r3, [r3, #18]
    35e4:	461a      	mov	r2, r3
    35e6:	9b03      	ldr	r3, [sp, #12]
    35e8:	4293      	cmp	r3, r2
    35ea:	d3d0      	bcc.n	358e <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    35ec:	2104      	movs	r1, #4
    35ee:	9801      	ldr	r0, [sp, #4]
    35f0:	f002 ff48 	bl	6484 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    35f4:	bf00      	nop
    35f6:	b004      	add	sp, #16
    35f8:	bd10      	pop	{r4, pc}
    35fa:	bf00      	nop
    35fc:	1fff8b80 	.word	0x1fff8b80
    3600:	000190d0 	.word	0x000190d0
    3604:	00019070 	.word	0x00019070
    3608:	00019658 	.word	0x00019658
    360c:	000190c0 	.word	0x000190c0
    3610:	000196cc 	.word	0x000196cc

00003614 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    3614:	b500      	push	{lr}
    3616:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    3618:	2302      	movs	r3, #2
    361a:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    361c:	2300      	movs	r3, #0
    361e:	9304      	str	r3, [sp, #16]
    3620:	e02c      	b.n	367c <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    3622:	4a36      	ldr	r2, [pc, #216]	; (36fc <Clock_Ip_GetPllStatus+0xe8>)
    3624:	9b04      	ldr	r3, [sp, #16]
    3626:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    362a:	4935      	ldr	r1, [pc, #212]	; (3700 <Clock_Ip_GetPllStatus+0xec>)
    362c:	4613      	mov	r3, r2
    362e:	00db      	lsls	r3, r3, #3
    3630:	4413      	add	r3, r2
    3632:	440b      	add	r3, r1
    3634:	3301      	adds	r3, #1
    3636:	781b      	ldrb	r3, [r3, #0]
    3638:	461a      	mov	r2, r3
    363a:	4b32      	ldr	r3, [pc, #200]	; (3704 <Clock_Ip_GetPllStatus+0xf0>)
    363c:	5c9b      	ldrb	r3, [r3, r2]
    363e:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    3640:	4931      	ldr	r1, [pc, #196]	; (3708 <Clock_Ip_GetPllStatus+0xf4>)
    3642:	9a03      	ldr	r2, [sp, #12]
    3644:	4613      	mov	r3, r2
    3646:	009b      	lsls	r3, r3, #2
    3648:	4413      	add	r3, r2
    364a:	009b      	lsls	r3, r3, #2
    364c:	440b      	add	r3, r1
    364e:	3308      	adds	r3, #8
    3650:	681b      	ldr	r3, [r3, #0]
    3652:	492a      	ldr	r1, [pc, #168]	; (36fc <Clock_Ip_GetPllStatus+0xe8>)
    3654:	9a04      	ldr	r2, [sp, #16]
    3656:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    365a:	4610      	mov	r0, r2
    365c:	4798      	blx	r3
    365e:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    3660:	9b02      	ldr	r3, [sp, #8]
    3662:	2b01      	cmp	r3, #1
    3664:	d102      	bne.n	366c <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    3666:	2301      	movs	r3, #1
    3668:	9305      	str	r3, [sp, #20]
            break;
    366a:	e00d      	b.n	3688 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    366c:	9b02      	ldr	r3, [sp, #8]
    366e:	2b02      	cmp	r3, #2
    3670:	d101      	bne.n	3676 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    3672:	2300      	movs	r3, #0
    3674:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    3676:	9b04      	ldr	r3, [sp, #16]
    3678:	3301      	adds	r3, #1
    367a:	9304      	str	r3, [sp, #16]
    367c:	4b23      	ldr	r3, [pc, #140]	; (370c <Clock_Ip_GetPllStatus+0xf8>)
    367e:	789b      	ldrb	r3, [r3, #2]
    3680:	461a      	mov	r2, r3
    3682:	9b04      	ldr	r3, [sp, #16]
    3684:	4293      	cmp	r3, r2
    3686:	d3cc      	bcc.n	3622 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    3688:	9b05      	ldr	r3, [sp, #20]
    368a:	2b00      	cmp	r3, #0
    368c:	d130      	bne.n	36f0 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    368e:	2300      	movs	r3, #0
    3690:	9304      	str	r3, [sp, #16]
    3692:	e027      	b.n	36e4 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    3694:	4a1e      	ldr	r2, [pc, #120]	; (3710 <Clock_Ip_GetPllStatus+0xfc>)
    3696:	9b04      	ldr	r3, [sp, #16]
    3698:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    369c:	4918      	ldr	r1, [pc, #96]	; (3700 <Clock_Ip_GetPllStatus+0xec>)
    369e:	4613      	mov	r3, r2
    36a0:	00db      	lsls	r3, r3, #3
    36a2:	4413      	add	r3, r2
    36a4:	440b      	add	r3, r1
    36a6:	3301      	adds	r3, #1
    36a8:	781b      	ldrb	r3, [r3, #0]
    36aa:	461a      	mov	r2, r3
    36ac:	4b19      	ldr	r3, [pc, #100]	; (3714 <Clock_Ip_GetPllStatus+0x100>)
    36ae:	5c9b      	ldrb	r3, [r3, r2]
    36b0:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    36b2:	4919      	ldr	r1, [pc, #100]	; (3718 <Clock_Ip_GetPllStatus+0x104>)
    36b4:	9a03      	ldr	r2, [sp, #12]
    36b6:	4613      	mov	r3, r2
    36b8:	005b      	lsls	r3, r3, #1
    36ba:	4413      	add	r3, r2
    36bc:	009b      	lsls	r3, r3, #2
    36be:	440b      	add	r3, r1
    36c0:	3308      	adds	r3, #8
    36c2:	681b      	ldr	r3, [r3, #0]
    36c4:	4912      	ldr	r1, [pc, #72]	; (3710 <Clock_Ip_GetPllStatus+0xfc>)
    36c6:	9a04      	ldr	r2, [sp, #16]
    36c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    36cc:	4610      	mov	r0, r2
    36ce:	4798      	blx	r3
    36d0:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    36d2:	9b01      	ldr	r3, [sp, #4]
    36d4:	2b01      	cmp	r3, #1
    36d6:	d102      	bne.n	36de <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    36d8:	2301      	movs	r3, #1
    36da:	9305      	str	r3, [sp, #20]
                break;
    36dc:	e008      	b.n	36f0 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    36de:	9b04      	ldr	r3, [sp, #16]
    36e0:	3301      	adds	r3, #1
    36e2:	9304      	str	r3, [sp, #16]
    36e4:	4b09      	ldr	r3, [pc, #36]	; (370c <Clock_Ip_GetPllStatus+0xf8>)
    36e6:	78db      	ldrb	r3, [r3, #3]
    36e8:	461a      	mov	r2, r3
    36ea:	9b04      	ldr	r3, [sp, #16]
    36ec:	4293      	cmp	r3, r2
    36ee:	d3d1      	bcc.n	3694 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    36f0:	9b05      	ldr	r3, [sp, #20]
}
    36f2:	4618      	mov	r0, r3
    36f4:	b007      	add	sp, #28
    36f6:	f85d fb04 	ldr.w	pc, [sp], #4
    36fa:	bf00      	nop
    36fc:	000195d8 	.word	0x000195d8
    3700:	000190d0 	.word	0x000190d0
    3704:	00019090 	.word	0x00019090
    3708:	000196dc 	.word	0x000196dc
    370c:	1fff8b80 	.word	0x1fff8b80
    3710:	000195dc 	.word	0x000195dc
    3714:	00019080 	.word	0x00019080
    3718:	0001964c 	.word	0x0001964c

0000371c <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    371c:	b500      	push	{lr}
    371e:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    3720:	4b55      	ldr	r3, [pc, #340]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    3722:	681b      	ldr	r3, [r3, #0]
    3724:	2b00      	cmp	r3, #0
    3726:	f000 80a2 	beq.w	386e <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    372a:	2300      	movs	r3, #0
    372c:	9301      	str	r3, [sp, #4]
    372e:	e02c      	b.n	378a <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    3730:	4b51      	ldr	r3, [pc, #324]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    3732:	681a      	ldr	r2, [r3, #0]
    3734:	9b01      	ldr	r3, [sp, #4]
    3736:	330d      	adds	r3, #13
    3738:	00db      	lsls	r3, r3, #3
    373a:	4413      	add	r3, r2
    373c:	685b      	ldr	r3, [r3, #4]
    373e:	4a4f      	ldr	r2, [pc, #316]	; (387c <Clock_Ip_DistributePll+0x160>)
    3740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3744:	2b03      	cmp	r3, #3
    3746:	d11d      	bne.n	3784 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3748:	4b4b      	ldr	r3, [pc, #300]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    374a:	681b      	ldr	r3, [r3, #0]
    374c:	9a01      	ldr	r2, [sp, #4]
    374e:	320d      	adds	r2, #13
    3750:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    3754:	494a      	ldr	r1, [pc, #296]	; (3880 <Clock_Ip_DistributePll+0x164>)
    3756:	4613      	mov	r3, r2
    3758:	00db      	lsls	r3, r3, #3
    375a:	4413      	add	r3, r2
    375c:	440b      	add	r3, r1
    375e:	3301      	adds	r3, #1
    3760:	781b      	ldrb	r3, [r3, #0]
    3762:	461a      	mov	r2, r3
    3764:	4b47      	ldr	r3, [pc, #284]	; (3884 <Clock_Ip_DistributePll+0x168>)
    3766:	5c9b      	ldrb	r3, [r3, r2]
    3768:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    376a:	4a47      	ldr	r2, [pc, #284]	; (3888 <Clock_Ip_DistributePll+0x16c>)
    376c:	9b00      	ldr	r3, [sp, #0]
    376e:	00db      	lsls	r3, r3, #3
    3770:	4413      	add	r3, r2
    3772:	685b      	ldr	r3, [r3, #4]
    3774:	4a40      	ldr	r2, [pc, #256]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    3776:	6811      	ldr	r1, [r2, #0]
    3778:	9a01      	ldr	r2, [sp, #4]
    377a:	320d      	adds	r2, #13
    377c:	00d2      	lsls	r2, r2, #3
    377e:	440a      	add	r2, r1
    3780:	4610      	mov	r0, r2
    3782:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    3784:	9b01      	ldr	r3, [sp, #4]
    3786:	3301      	adds	r3, #1
    3788:	9301      	str	r3, [sp, #4]
    378a:	4b3b      	ldr	r3, [pc, #236]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    378c:	681b      	ldr	r3, [r3, #0]
    378e:	7adb      	ldrb	r3, [r3, #11]
    3790:	461a      	mov	r2, r3
    3792:	9b01      	ldr	r3, [sp, #4]
    3794:	4293      	cmp	r3, r2
    3796:	d3cb      	bcc.n	3730 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    3798:	4b3c      	ldr	r3, [pc, #240]	; (388c <Clock_Ip_DistributePll+0x170>)
    379a:	781b      	ldrb	r3, [r3, #0]
    379c:	2b00      	cmp	r3, #0
    379e:	d066      	beq.n	386e <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    37a0:	2300      	movs	r3, #0
    37a2:	9301      	str	r3, [sp, #4]
    37a4:	e021      	b.n	37ea <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    37a6:	4b34      	ldr	r3, [pc, #208]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    37a8:	681a      	ldr	r2, [r3, #0]
    37aa:	9b01      	ldr	r3, [sp, #4]
    37ac:	334e      	adds	r3, #78	; 0x4e
    37ae:	00db      	lsls	r3, r3, #3
    37b0:	4413      	add	r3, r2
    37b2:	685a      	ldr	r2, [r3, #4]
    37b4:	4932      	ldr	r1, [pc, #200]	; (3880 <Clock_Ip_DistributePll+0x164>)
    37b6:	4613      	mov	r3, r2
    37b8:	00db      	lsls	r3, r3, #3
    37ba:	4413      	add	r3, r2
    37bc:	440b      	add	r3, r1
    37be:	3301      	adds	r3, #1
    37c0:	781b      	ldrb	r3, [r3, #0]
    37c2:	461a      	mov	r2, r3
    37c4:	4b32      	ldr	r3, [pc, #200]	; (3890 <Clock_Ip_DistributePll+0x174>)
    37c6:	5c9b      	ldrb	r3, [r3, r2]
    37c8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    37ca:	4a32      	ldr	r2, [pc, #200]	; (3894 <Clock_Ip_DistributePll+0x178>)
    37cc:	9b00      	ldr	r3, [sp, #0]
    37ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    37d2:	4a29      	ldr	r2, [pc, #164]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    37d4:	6811      	ldr	r1, [r2, #0]
    37d6:	9a01      	ldr	r2, [sp, #4]
    37d8:	324e      	adds	r2, #78	; 0x4e
    37da:	00d2      	lsls	r2, r2, #3
    37dc:	440a      	add	r2, r1
    37de:	3204      	adds	r2, #4
    37e0:	4610      	mov	r0, r2
    37e2:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    37e4:	9b01      	ldr	r3, [sp, #4]
    37e6:	3301      	adds	r3, #1
    37e8:	9301      	str	r3, [sp, #4]
    37ea:	4b23      	ldr	r3, [pc, #140]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    37ec:	681b      	ldr	r3, [r3, #0]
    37ee:	7c1b      	ldrb	r3, [r3, #16]
    37f0:	461a      	mov	r2, r3
    37f2:	9b01      	ldr	r3, [sp, #4]
    37f4:	4293      	cmp	r3, r2
    37f6:	d3d6      	bcc.n	37a6 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    37f8:	2300      	movs	r3, #0
    37fa:	9301      	str	r3, [sp, #4]
    37fc:	e02a      	b.n	3854 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    37fe:	4b1e      	ldr	r3, [pc, #120]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    3800:	6819      	ldr	r1, [r3, #0]
    3802:	9a01      	ldr	r2, [sp, #4]
    3804:	4613      	mov	r3, r2
    3806:	009b      	lsls	r3, r3, #2
    3808:	4413      	add	r3, r2
    380a:	009b      	lsls	r3, r3, #2
    380c:	440b      	add	r3, r1
    380e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3812:	681a      	ldr	r2, [r3, #0]
    3814:	491a      	ldr	r1, [pc, #104]	; (3880 <Clock_Ip_DistributePll+0x164>)
    3816:	4613      	mov	r3, r2
    3818:	00db      	lsls	r3, r3, #3
    381a:	4413      	add	r3, r2
    381c:	440b      	add	r3, r1
    381e:	3301      	adds	r3, #1
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	461a      	mov	r2, r3
    3824:	4b1c      	ldr	r3, [pc, #112]	; (3898 <Clock_Ip_DistributePll+0x17c>)
    3826:	5c9b      	ldrb	r3, [r3, r2]
    3828:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    382a:	4a1c      	ldr	r2, [pc, #112]	; (389c <Clock_Ip_DistributePll+0x180>)
    382c:	9b00      	ldr	r3, [sp, #0]
    382e:	011b      	lsls	r3, r3, #4
    3830:	4413      	add	r3, r2
    3832:	330c      	adds	r3, #12
    3834:	6819      	ldr	r1, [r3, #0]
    3836:	4b10      	ldr	r3, [pc, #64]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    3838:	6818      	ldr	r0, [r3, #0]
    383a:	9a01      	ldr	r2, [sp, #4]
    383c:	4613      	mov	r3, r2
    383e:	009b      	lsls	r3, r3, #2
    3840:	4413      	add	r3, r2
    3842:	009b      	lsls	r3, r3, #2
    3844:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3848:	4403      	add	r3, r0
    384a:	4618      	mov	r0, r3
    384c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    384e:	9b01      	ldr	r3, [sp, #4]
    3850:	3301      	adds	r3, #1
    3852:	9301      	str	r3, [sp, #4]
    3854:	4b08      	ldr	r3, [pc, #32]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    3856:	681b      	ldr	r3, [r3, #0]
    3858:	7c9b      	ldrb	r3, [r3, #18]
    385a:	461a      	mov	r2, r3
    385c:	9b01      	ldr	r3, [sp, #4]
    385e:	4293      	cmp	r3, r2
    3860:	d3cd      	bcc.n	37fe <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    3862:	4b05      	ldr	r3, [pc, #20]	; (3878 <Clock_Ip_DistributePll+0x15c>)
    3864:	681b      	ldr	r3, [r3, #0]
    3866:	2104      	movs	r1, #4
    3868:	4618      	mov	r0, r3
    386a:	f002 fe0b 	bl	6484 <Clock_Ip_Command>
        }
    }
}
    386e:	bf00      	nop
    3870:	b003      	add	sp, #12
    3872:	f85d fb04 	ldr.w	pc, [sp], #4
    3876:	bf00      	nop
    3878:	1fff8b78 	.word	0x1fff8b78
    387c:	0001951c 	.word	0x0001951c
    3880:	000190d0 	.word	0x000190d0
    3884:	000190a0 	.word	0x000190a0
    3888:	00019708 	.word	0x00019708
    388c:	1fff8b80 	.word	0x1fff8b80
    3890:	00019070 	.word	0x00019070
    3894:	00019658 	.word	0x00019658
    3898:	000190c0 	.word	0x000190c0
    389c:	000196cc 	.word	0x000196cc

000038a0 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    38a0:	b500      	push	{lr}
    38a2:	b085      	sub	sp, #20
    38a4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    38a6:	490c      	ldr	r1, [pc, #48]	; (38d8 <Clock_Ip_DisableClockMonitor+0x38>)
    38a8:	9a01      	ldr	r2, [sp, #4]
    38aa:	4613      	mov	r3, r2
    38ac:	00db      	lsls	r3, r3, #3
    38ae:	4413      	add	r3, r2
    38b0:	440b      	add	r3, r1
    38b2:	3301      	adds	r3, #1
    38b4:	781b      	ldrb	r3, [r3, #0]
    38b6:	461a      	mov	r2, r3
    38b8:	4b08      	ldr	r3, [pc, #32]	; (38dc <Clock_Ip_DisableClockMonitor+0x3c>)
    38ba:	5c9b      	ldrb	r3, [r3, r2]
    38bc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    38be:	4a08      	ldr	r2, [pc, #32]	; (38e0 <Clock_Ip_DisableClockMonitor+0x40>)
    38c0:	9b03      	ldr	r3, [sp, #12]
    38c2:	011b      	lsls	r3, r3, #4
    38c4:	4413      	add	r3, r2
    38c6:	3308      	adds	r3, #8
    38c8:	681b      	ldr	r3, [r3, #0]
    38ca:	9801      	ldr	r0, [sp, #4]
    38cc:	4798      	blx	r3
}
    38ce:	bf00      	nop
    38d0:	b005      	add	sp, #20
    38d2:	f85d fb04 	ldr.w	pc, [sp], #4
    38d6:	bf00      	nop
    38d8:	000190d0 	.word	0x000190d0
    38dc:	000190c0 	.word	0x000190c0
    38e0:	000196cc 	.word	0x000196cc

000038e4 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    38e4:	b082      	sub	sp, #8
    38e6:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    38e8:	4a02      	ldr	r2, [pc, #8]	; (38f4 <Clock_Ip_InstallNotificationsCallback+0x10>)
    38ea:	9b01      	ldr	r3, [sp, #4]
    38ec:	6013      	str	r3, [r2, #0]
}
    38ee:	bf00      	nop
    38f0:	b002      	add	sp, #8
    38f2:	4770      	bx	lr
    38f4:	1fff8b14 	.word	0x1fff8b14

000038f8 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    38f8:	b500      	push	{lr}
    38fa:	b085      	sub	sp, #20
    38fc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    38fe:	490c      	ldr	r1, [pc, #48]	; (3930 <Clock_Ip_DisableModuleClock+0x38>)
    3900:	9a01      	ldr	r2, [sp, #4]
    3902:	4613      	mov	r3, r2
    3904:	00db      	lsls	r3, r3, #3
    3906:	4413      	add	r3, r2
    3908:	440b      	add	r3, r1
    390a:	3301      	adds	r3, #1
    390c:	781b      	ldrb	r3, [r3, #0]
    390e:	461a      	mov	r2, r3
    3910:	4b08      	ldr	r3, [pc, #32]	; (3934 <Clock_Ip_DisableModuleClock+0x3c>)
    3912:	5c9b      	ldrb	r3, [r3, r2]
    3914:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    3916:	4a08      	ldr	r2, [pc, #32]	; (3938 <Clock_Ip_DisableModuleClock+0x40>)
    3918:	9b03      	ldr	r3, [sp, #12]
    391a:	00db      	lsls	r3, r3, #3
    391c:	4413      	add	r3, r2
    391e:	685b      	ldr	r3, [r3, #4]
    3920:	2101      	movs	r1, #1
    3922:	9801      	ldr	r0, [sp, #4]
    3924:	4798      	blx	r3
}
    3926:	bf00      	nop
    3928:	b005      	add	sp, #20
    392a:	f85d fb04 	ldr.w	pc, [sp], #4
    392e:	bf00      	nop
    3930:	000190d0 	.word	0x000190d0
    3934:	00019070 	.word	0x00019070
    3938:	00019658 	.word	0x00019658

0000393c <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    393c:	b500      	push	{lr}
    393e:	b085      	sub	sp, #20
    3940:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3942:	490c      	ldr	r1, [pc, #48]	; (3974 <Clock_Ip_EnableModuleClock+0x38>)
    3944:	9a01      	ldr	r2, [sp, #4]
    3946:	4613      	mov	r3, r2
    3948:	00db      	lsls	r3, r3, #3
    394a:	4413      	add	r3, r2
    394c:	440b      	add	r3, r1
    394e:	3301      	adds	r3, #1
    3950:	781b      	ldrb	r3, [r3, #0]
    3952:	461a      	mov	r2, r3
    3954:	4b08      	ldr	r3, [pc, #32]	; (3978 <Clock_Ip_EnableModuleClock+0x3c>)
    3956:	5c9b      	ldrb	r3, [r3, r2]
    3958:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    395a:	4a08      	ldr	r2, [pc, #32]	; (397c <Clock_Ip_EnableModuleClock+0x40>)
    395c:	9b03      	ldr	r3, [sp, #12]
    395e:	00db      	lsls	r3, r3, #3
    3960:	4413      	add	r3, r2
    3962:	685b      	ldr	r3, [r3, #4]
    3964:	2100      	movs	r1, #0
    3966:	9801      	ldr	r0, [sp, #4]
    3968:	4798      	blx	r3
}
    396a:	bf00      	nop
    396c:	b005      	add	sp, #20
    396e:	f85d fb04 	ldr.w	pc, [sp], #4
    3972:	bf00      	nop
    3974:	000190d0 	.word	0x000190d0
    3978:	00019070 	.word	0x00019070
    397c:	00019658 	.word	0x00019658

00003980 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    3980:	b500      	push	{lr}
    3982:	b083      	sub	sp, #12
    3984:	9001      	str	r0, [sp, #4]
    3986:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    3988:	4b08      	ldr	r3, [pc, #32]	; (39ac <Clock_Ip_PowerModeChangeNotification+0x2c>)
    398a:	2200      	movs	r2, #0
    398c:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    398e:	4b08      	ldr	r3, [pc, #32]	; (39b0 <Clock_Ip_PowerModeChangeNotification+0x30>)
    3990:	681b      	ldr	r3, [r3, #0]
    3992:	2102      	movs	r1, #2
    3994:	4618      	mov	r0, r3
    3996:	f002 fd75 	bl	6484 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    399a:	9900      	ldr	r1, [sp, #0]
    399c:	9801      	ldr	r0, [sp, #4]
    399e:	f002 fc51 	bl	6244 <Clock_Ip_ClockPowerModeChangeNotification>
}
    39a2:	bf00      	nop
    39a4:	b003      	add	sp, #12
    39a6:	f85d fb04 	ldr.w	pc, [sp], #4
    39aa:	bf00      	nop
    39ac:	1fff8b10 	.word	0x1fff8b10
    39b0:	1fff8b78 	.word	0x1fff8b78

000039b4 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    39b4:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    39b6:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    39ba:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    39bc:	4b06      	ldr	r3, [pc, #24]	; (39d8 <Clock_Ip_SetWaitStates+0x24>)
    39be:	785b      	ldrb	r3, [r3, #1]
    39c0:	2b00      	cmp	r3, #0
    39c2:	d005      	beq.n	39d0 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    39c4:	9b01      	ldr	r3, [sp, #4]
    39c6:	3b01      	subs	r3, #1
    39c8:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    39ca:	9b01      	ldr	r3, [sp, #4]
    39cc:	2b00      	cmp	r3, #0
    39ce:	d1f9      	bne.n	39c4 <Clock_Ip_SetWaitStates+0x10>
    }
}
    39d0:	bf00      	nop
    39d2:	b002      	add	sp, #8
    39d4:	4770      	bx	lr
    39d6:	bf00      	nop
    39d8:	1fff8b80 	.word	0x1fff8b80

000039dc <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    39dc:	b500      	push	{lr}
    39de:	b083      	sub	sp, #12
    39e0:	9001      	str	r0, [sp, #4]
    39e2:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    39e4:	4b04      	ldr	r3, [pc, #16]	; (39f8 <Clock_Ip_ReportClockErrors+0x1c>)
    39e6:	681b      	ldr	r3, [r3, #0]
    39e8:	9900      	ldr	r1, [sp, #0]
    39ea:	9801      	ldr	r0, [sp, #4]
    39ec:	4798      	blx	r3
}
    39ee:	bf00      	nop
    39f0:	b003      	add	sp, #12
    39f2:	f85d fb04 	ldr.w	pc, [sp], #4
    39f6:	bf00      	nop
    39f8:	1fff8b14 	.word	0x1fff8b14

000039fc <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    39fc:	b500      	push	{lr}
    39fe:	b085      	sub	sp, #20
    3a00:	9003      	str	r0, [sp, #12]
    3a02:	9102      	str	r1, [sp, #8]
    3a04:	9201      	str	r2, [sp, #4]
    3a06:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    3a08:	2000      	movs	r0, #0
    3a0a:	f7fe ffd1 	bl	29b0 <OsIf_GetCounter>
    3a0e:	4602      	mov	r2, r0
    3a10:	9b03      	ldr	r3, [sp, #12]
    3a12:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    3a14:	9b02      	ldr	r3, [sp, #8]
    3a16:	2200      	movs	r2, #0
    3a18:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    3a1a:	2100      	movs	r1, #0
    3a1c:	9800      	ldr	r0, [sp, #0]
    3a1e:	f7ff f813 	bl	2a48 <OsIf_MicrosToTicks>
    3a22:	4602      	mov	r2, r0
    3a24:	9b01      	ldr	r3, [sp, #4]
    3a26:	601a      	str	r2, [r3, #0]
}
    3a28:	bf00      	nop
    3a2a:	b005      	add	sp, #20
    3a2c:	f85d fb04 	ldr.w	pc, [sp], #4

00003a30 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    3a30:	b500      	push	{lr}
    3a32:	b087      	sub	sp, #28
    3a34:	9003      	str	r0, [sp, #12]
    3a36:	9102      	str	r1, [sp, #8]
    3a38:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    3a3a:	2300      	movs	r3, #0
    3a3c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    3a40:	2100      	movs	r1, #0
    3a42:	9803      	ldr	r0, [sp, #12]
    3a44:	f7fe ffcd 	bl	29e2 <OsIf_GetElapsed>
    3a48:	4602      	mov	r2, r0
    3a4a:	9b02      	ldr	r3, [sp, #8]
    3a4c:	681b      	ldr	r3, [r3, #0]
    3a4e:	441a      	add	r2, r3
    3a50:	9b02      	ldr	r3, [sp, #8]
    3a52:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    3a54:	9b02      	ldr	r3, [sp, #8]
    3a56:	681b      	ldr	r3, [r3, #0]
    3a58:	9a01      	ldr	r2, [sp, #4]
    3a5a:	429a      	cmp	r2, r3
    3a5c:	d802      	bhi.n	3a64 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    3a5e:	2301      	movs	r3, #1
    3a60:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    3a64:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    3a68:	4618      	mov	r0, r3
    3a6a:	b007      	add	sp, #28
    3a6c:	f85d fb04 	ldr.w	pc, [sp], #4

00003a70 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    3a70:	b082      	sub	sp, #8
    3a72:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3a74:	bf00      	nop
    3a76:	b002      	add	sp, #8
    3a78:	4770      	bx	lr

00003a7a <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    3a7a:	b500      	push	{lr}
    3a7c:	b083      	sub	sp, #12
    3a7e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a80:	9b01      	ldr	r3, [sp, #4]
    3a82:	2b00      	cmp	r3, #0
    3a84:	d002      	beq.n	3a8c <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    3a86:	9801      	ldr	r0, [sp, #4]
    3a88:	f000 f8ad 	bl	3be6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a8c:	bf00      	nop
    3a8e:	b003      	add	sp, #12
    3a90:	f85d fb04 	ldr.w	pc, [sp], #4

00003a94 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    3a94:	b500      	push	{lr}
    3a96:	b083      	sub	sp, #12
    3a98:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a9a:	9b01      	ldr	r3, [sp, #4]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d002      	beq.n	3aa6 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    3aa0:	9801      	ldr	r0, [sp, #4]
    3aa2:	f000 f8cd 	bl	3c40 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3aa6:	bf00      	nop
    3aa8:	b003      	add	sp, #12
    3aaa:	f85d fb04 	ldr.w	pc, [sp], #4

00003aae <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3aae:	b500      	push	{lr}
    3ab0:	b083      	sub	sp, #12
    3ab2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ab4:	9b01      	ldr	r3, [sp, #4]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d002      	beq.n	3ac0 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    3aba:	9801      	ldr	r0, [sp, #4]
    3abc:	f000 f8ee 	bl	3c9c <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ac0:	bf00      	nop
    3ac2:	b003      	add	sp, #12
    3ac4:	f85d fb04 	ldr.w	pc, [sp], #4

00003ac8 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3ac8:	b500      	push	{lr}
    3aca:	b083      	sub	sp, #12
    3acc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ace:	9b01      	ldr	r3, [sp, #4]
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d002      	beq.n	3ada <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    3ad4:	9801      	ldr	r0, [sp, #4]
    3ad6:	f000 f8f9 	bl	3ccc <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ada:	bf00      	nop
    3adc:	b003      	add	sp, #12
    3ade:	f85d fb04 	ldr.w	pc, [sp], #4

00003ae2 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3ae2:	b500      	push	{lr}
    3ae4:	b083      	sub	sp, #12
    3ae6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3ae8:	9b01      	ldr	r3, [sp, #4]
    3aea:	2b00      	cmp	r3, #0
    3aec:	d002      	beq.n	3af4 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    3aee:	9801      	ldr	r0, [sp, #4]
    3af0:	f000 f904 	bl	3cfc <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3af4:	bf00      	nop
    3af6:	b003      	add	sp, #12
    3af8:	f85d fb04 	ldr.w	pc, [sp], #4

00003afc <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3afc:	b500      	push	{lr}
    3afe:	b083      	sub	sp, #12
    3b00:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b02:	9b01      	ldr	r3, [sp, #4]
    3b04:	2b00      	cmp	r3, #0
    3b06:	d002      	beq.n	3b0e <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    3b08:	9801      	ldr	r0, [sp, #4]
    3b0a:	f000 f90f 	bl	3d2c <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b0e:	bf00      	nop
    3b10:	b003      	add	sp, #12
    3b12:	f85d fb04 	ldr.w	pc, [sp], #4

00003b16 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3b16:	b500      	push	{lr}
    3b18:	b083      	sub	sp, #12
    3b1a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b1c:	9b01      	ldr	r3, [sp, #4]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d002      	beq.n	3b28 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    3b22:	9801      	ldr	r0, [sp, #4]
    3b24:	f000 f91a 	bl	3d5c <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b28:	bf00      	nop
    3b2a:	b003      	add	sp, #12
    3b2c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b30 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3b30:	b500      	push	{lr}
    3b32:	b083      	sub	sp, #12
    3b34:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b36:	9b01      	ldr	r3, [sp, #4]
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d002      	beq.n	3b42 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3b3c:	9801      	ldr	r0, [sp, #4]
    3b3e:	f000 f925 	bl	3d8c <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b42:	bf00      	nop
    3b44:	b003      	add	sp, #12
    3b46:	f85d fb04 	ldr.w	pc, [sp], #4

00003b4a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3b4a:	b500      	push	{lr}
    3b4c:	b083      	sub	sp, #12
    3b4e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b50:	9b01      	ldr	r3, [sp, #4]
    3b52:	2b00      	cmp	r3, #0
    3b54:	d002      	beq.n	3b5c <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    3b56:	9801      	ldr	r0, [sp, #4]
    3b58:	f000 f930 	bl	3dbc <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b5c:	bf00      	nop
    3b5e:	b003      	add	sp, #12
    3b60:	f85d fb04 	ldr.w	pc, [sp], #4

00003b64 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3b64:	b500      	push	{lr}
    3b66:	b083      	sub	sp, #12
    3b68:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b6a:	9b01      	ldr	r3, [sp, #4]
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d002      	beq.n	3b76 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    3b70:	9801      	ldr	r0, [sp, #4]
    3b72:	f000 f93b 	bl	3dec <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b76:	bf00      	nop
    3b78:	b003      	add	sp, #12
    3b7a:	f85d fb04 	ldr.w	pc, [sp], #4

00003b7e <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3b7e:	b500      	push	{lr}
    3b80:	b083      	sub	sp, #12
    3b82:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b84:	9b01      	ldr	r3, [sp, #4]
    3b86:	2b00      	cmp	r3, #0
    3b88:	d002      	beq.n	3b90 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    3b8a:	9801      	ldr	r0, [sp, #4]
    3b8c:	f000 f946 	bl	3e1c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b90:	bf00      	nop
    3b92:	b003      	add	sp, #12
    3b94:	f85d fb04 	ldr.w	pc, [sp], #4

00003b98 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    3b98:	b500      	push	{lr}
    3b9a:	b083      	sub	sp, #12
    3b9c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b9e:	9b01      	ldr	r3, [sp, #4]
    3ba0:	2b00      	cmp	r3, #0
    3ba2:	d002      	beq.n	3baa <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    3ba4:	9801      	ldr	r0, [sp, #4]
    3ba6:	f000 f951 	bl	3e4c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3baa:	bf00      	nop
    3bac:	b003      	add	sp, #12
    3bae:	f85d fb04 	ldr.w	pc, [sp], #4

00003bb2 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    3bb2:	b500      	push	{lr}
    3bb4:	b083      	sub	sp, #12
    3bb6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bb8:	9b01      	ldr	r3, [sp, #4]
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d002      	beq.n	3bc4 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    3bbe:	9801      	ldr	r0, [sp, #4]
    3bc0:	f000 f95e 	bl	3e80 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bc4:	bf00      	nop
    3bc6:	b003      	add	sp, #12
    3bc8:	f85d fb04 	ldr.w	pc, [sp], #4

00003bcc <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    3bcc:	b500      	push	{lr}
    3bce:	b083      	sub	sp, #12
    3bd0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bd2:	9b01      	ldr	r3, [sp, #4]
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d002      	beq.n	3bde <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3bd8:	9801      	ldr	r0, [sp, #4]
    3bda:	f000 f98b 	bl	3ef4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bde:	bf00      	nop
    3be0:	b003      	add	sp, #12
    3be2:	f85d fb04 	ldr.w	pc, [sp], #4

00003be6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3be6:	b086      	sub	sp, #24
    3be8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3bea:	9b01      	ldr	r3, [sp, #4]
    3bec:	681a      	ldr	r2, [r3, #0]
    3bee:	4911      	ldr	r1, [pc, #68]	; (3c34 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    3bf0:	4613      	mov	r3, r2
    3bf2:	00db      	lsls	r3, r3, #3
    3bf4:	4413      	add	r3, r2
    3bf6:	440b      	add	r3, r1
    3bf8:	781b      	ldrb	r3, [r3, #0]
    3bfa:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3bfc:	9b01      	ldr	r3, [sp, #4]
    3bfe:	685b      	ldr	r3, [r3, #4]
    3c00:	4a0d      	ldr	r2, [pc, #52]	; (3c38 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    3c02:	5cd3      	ldrb	r3, [r2, r3]
    3c04:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3c06:	4a0d      	ldr	r2, [pc, #52]	; (3c3c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3c08:	9b05      	ldr	r3, [sp, #20]
    3c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    3c12:	9b03      	ldr	r3, [sp, #12]
    3c14:	f023 0307 	bic.w	r3, r3, #7
    3c18:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    3c1a:	9a03      	ldr	r2, [sp, #12]
    3c1c:	9b04      	ldr	r3, [sp, #16]
    3c1e:	4313      	orrs	r3, r2
    3c20:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3c22:	4a06      	ldr	r2, [pc, #24]	; (3c3c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3c24:	9b05      	ldr	r3, [sp, #20]
    3c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3c2a:	9a03      	ldr	r2, [sp, #12]
    3c2c:	601a      	str	r2, [r3, #0]
}
    3c2e:	bf00      	nop
    3c30:	b006      	add	sp, #24
    3c32:	4770      	bx	lr
    3c34:	000190d0 	.word	0x000190d0
    3c38:	000194c8 	.word	0x000194c8
    3c3c:	0001950c 	.word	0x0001950c

00003c40 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3c40:	b086      	sub	sp, #24
    3c42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c44:	9b01      	ldr	r3, [sp, #4]
    3c46:	681a      	ldr	r2, [r3, #0]
    3c48:	4911      	ldr	r1, [pc, #68]	; (3c90 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3c4a:	4613      	mov	r3, r2
    3c4c:	00db      	lsls	r3, r3, #3
    3c4e:	4413      	add	r3, r2
    3c50:	440b      	add	r3, r1
    3c52:	781b      	ldrb	r3, [r3, #0]
    3c54:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3c56:	9b01      	ldr	r3, [sp, #4]
    3c58:	685b      	ldr	r3, [r3, #4]
    3c5a:	4a0e      	ldr	r2, [pc, #56]	; (3c94 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3c5c:	5cd3      	ldrb	r3, [r2, r3]
    3c5e:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3c60:	4a0d      	ldr	r2, [pc, #52]	; (3c98 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3c62:	9b05      	ldr	r3, [sp, #20]
    3c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3c68:	681b      	ldr	r3, [r3, #0]
    3c6a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3c6c:	9b03      	ldr	r3, [sp, #12]
    3c6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3c72:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3c74:	9b04      	ldr	r3, [sp, #16]
    3c76:	021b      	lsls	r3, r3, #8
    3c78:	9a03      	ldr	r2, [sp, #12]
    3c7a:	4313      	orrs	r3, r2
    3c7c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3c7e:	4a06      	ldr	r2, [pc, #24]	; (3c98 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3c80:	9b05      	ldr	r3, [sp, #20]
    3c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3c86:	9a03      	ldr	r2, [sp, #12]
    3c88:	601a      	str	r2, [r3, #0]
}
    3c8a:	bf00      	nop
    3c8c:	b006      	add	sp, #24
    3c8e:	4770      	bx	lr
    3c90:	000190d0 	.word	0x000190d0
    3c94:	000194c8 	.word	0x000194c8
    3c98:	0001950c 	.word	0x0001950c

00003c9c <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3c9c:	b084      	sub	sp, #16
    3c9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3ca0:	4b09      	ldr	r3, [pc, #36]	; (3cc8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3ca2:	695b      	ldr	r3, [r3, #20]
    3ca4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3ca6:	9b03      	ldr	r3, [sp, #12]
    3ca8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3cac:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    3cae:	9b01      	ldr	r3, [sp, #4]
    3cb0:	685b      	ldr	r3, [r3, #4]
    3cb2:	3b01      	subs	r3, #1
    3cb4:	041b      	lsls	r3, r3, #16
    3cb6:	9a03      	ldr	r2, [sp, #12]
    3cb8:	4313      	orrs	r3, r2
    3cba:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3cbc:	4a02      	ldr	r2, [pc, #8]	; (3cc8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3cbe:	9b03      	ldr	r3, [sp, #12]
    3cc0:	6153      	str	r3, [r2, #20]
}
    3cc2:	bf00      	nop
    3cc4:	b004      	add	sp, #16
    3cc6:	4770      	bx	lr
    3cc8:	40064000 	.word	0x40064000

00003ccc <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ccc:	b084      	sub	sp, #16
    3cce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3cd0:	4b09      	ldr	r3, [pc, #36]	; (3cf8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3cd2:	695b      	ldr	r3, [r3, #20]
    3cd4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3cd6:	9b03      	ldr	r3, [sp, #12]
    3cd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3cdc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    3cde:	9b01      	ldr	r3, [sp, #4]
    3ce0:	685b      	ldr	r3, [r3, #4]
    3ce2:	3b01      	subs	r3, #1
    3ce4:	011b      	lsls	r3, r3, #4
    3ce6:	9a03      	ldr	r2, [sp, #12]
    3ce8:	4313      	orrs	r3, r2
    3cea:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3cec:	4a02      	ldr	r2, [pc, #8]	; (3cf8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3cee:	9b03      	ldr	r3, [sp, #12]
    3cf0:	6153      	str	r3, [r2, #20]
}
    3cf2:	bf00      	nop
    3cf4:	b004      	add	sp, #16
    3cf6:	4770      	bx	lr
    3cf8:	40064000 	.word	0x40064000

00003cfc <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3cfc:	b084      	sub	sp, #16
    3cfe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3d00:	4b09      	ldr	r3, [pc, #36]	; (3d28 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3d02:	695b      	ldr	r3, [r3, #20]
    3d04:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3d06:	9b03      	ldr	r3, [sp, #12]
    3d08:	f023 030f 	bic.w	r3, r3, #15
    3d0c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    3d0e:	9b01      	ldr	r3, [sp, #4]
    3d10:	685b      	ldr	r3, [r3, #4]
    3d12:	3b01      	subs	r3, #1
    3d14:	9a03      	ldr	r2, [sp, #12]
    3d16:	4313      	orrs	r3, r2
    3d18:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3d1a:	4a03      	ldr	r2, [pc, #12]	; (3d28 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3d1c:	9b03      	ldr	r3, [sp, #12]
    3d1e:	6153      	str	r3, [r2, #20]
}
    3d20:	bf00      	nop
    3d22:	b004      	add	sp, #16
    3d24:	4770      	bx	lr
    3d26:	bf00      	nop
    3d28:	40064000 	.word	0x40064000

00003d2c <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3d2c:	b084      	sub	sp, #16
    3d2e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3d30:	4b09      	ldr	r3, [pc, #36]	; (3d58 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3d32:	699b      	ldr	r3, [r3, #24]
    3d34:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3d36:	9b03      	ldr	r3, [sp, #12]
    3d38:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3d3c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    3d3e:	9b01      	ldr	r3, [sp, #4]
    3d40:	685b      	ldr	r3, [r3, #4]
    3d42:	3b01      	subs	r3, #1
    3d44:	041b      	lsls	r3, r3, #16
    3d46:	9a03      	ldr	r2, [sp, #12]
    3d48:	4313      	orrs	r3, r2
    3d4a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3d4c:	4a02      	ldr	r2, [pc, #8]	; (3d58 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3d4e:	9b03      	ldr	r3, [sp, #12]
    3d50:	6193      	str	r3, [r2, #24]
}
    3d52:	bf00      	nop
    3d54:	b004      	add	sp, #16
    3d56:	4770      	bx	lr
    3d58:	40064000 	.word	0x40064000

00003d5c <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3d5c:	b084      	sub	sp, #16
    3d5e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3d60:	4b09      	ldr	r3, [pc, #36]	; (3d88 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3d62:	699b      	ldr	r3, [r3, #24]
    3d64:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3d66:	9b03      	ldr	r3, [sp, #12]
    3d68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3d6c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    3d6e:	9b01      	ldr	r3, [sp, #4]
    3d70:	685b      	ldr	r3, [r3, #4]
    3d72:	3b01      	subs	r3, #1
    3d74:	011b      	lsls	r3, r3, #4
    3d76:	9a03      	ldr	r2, [sp, #12]
    3d78:	4313      	orrs	r3, r2
    3d7a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3d7c:	4a02      	ldr	r2, [pc, #8]	; (3d88 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3d7e:	9b03      	ldr	r3, [sp, #12]
    3d80:	6193      	str	r3, [r2, #24]
}
    3d82:	bf00      	nop
    3d84:	b004      	add	sp, #16
    3d86:	4770      	bx	lr
    3d88:	40064000 	.word	0x40064000

00003d8c <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3d8c:	b084      	sub	sp, #16
    3d8e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3d90:	4b09      	ldr	r3, [pc, #36]	; (3db8 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3d92:	699b      	ldr	r3, [r3, #24]
    3d94:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3d96:	9b03      	ldr	r3, [sp, #12]
    3d98:	f023 030f 	bic.w	r3, r3, #15
    3d9c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    3d9e:	9b01      	ldr	r3, [sp, #4]
    3da0:	685b      	ldr	r3, [r3, #4]
    3da2:	3b01      	subs	r3, #1
    3da4:	9a03      	ldr	r2, [sp, #12]
    3da6:	4313      	orrs	r3, r2
    3da8:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3daa:	4a03      	ldr	r2, [pc, #12]	; (3db8 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3dac:	9b03      	ldr	r3, [sp, #12]
    3dae:	6193      	str	r3, [r2, #24]
}
    3db0:	bf00      	nop
    3db2:	b004      	add	sp, #16
    3db4:	4770      	bx	lr
    3db6:	bf00      	nop
    3db8:	40064000 	.word	0x40064000

00003dbc <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3dbc:	b084      	sub	sp, #16
    3dbe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3dc0:	4b09      	ldr	r3, [pc, #36]	; (3de8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3dc2:	69db      	ldr	r3, [r3, #28]
    3dc4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3dc6:	9b03      	ldr	r3, [sp, #12]
    3dc8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3dcc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    3dce:	9b01      	ldr	r3, [sp, #4]
    3dd0:	685b      	ldr	r3, [r3, #4]
    3dd2:	3b01      	subs	r3, #1
    3dd4:	041b      	lsls	r3, r3, #16
    3dd6:	9a03      	ldr	r2, [sp, #12]
    3dd8:	4313      	orrs	r3, r2
    3dda:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3ddc:	4a02      	ldr	r2, [pc, #8]	; (3de8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3dde:	9b03      	ldr	r3, [sp, #12]
    3de0:	61d3      	str	r3, [r2, #28]
}
    3de2:	bf00      	nop
    3de4:	b004      	add	sp, #16
    3de6:	4770      	bx	lr
    3de8:	40064000 	.word	0x40064000

00003dec <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3dec:	b084      	sub	sp, #16
    3dee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3df0:	4b09      	ldr	r3, [pc, #36]	; (3e18 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3df2:	69db      	ldr	r3, [r3, #28]
    3df4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3df6:	9b03      	ldr	r3, [sp, #12]
    3df8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3dfc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    3dfe:	9b01      	ldr	r3, [sp, #4]
    3e00:	685b      	ldr	r3, [r3, #4]
    3e02:	3b01      	subs	r3, #1
    3e04:	011b      	lsls	r3, r3, #4
    3e06:	9a03      	ldr	r2, [sp, #12]
    3e08:	4313      	orrs	r3, r2
    3e0a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3e0c:	4a02      	ldr	r2, [pc, #8]	; (3e18 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3e0e:	9b03      	ldr	r3, [sp, #12]
    3e10:	61d3      	str	r3, [r2, #28]
}
    3e12:	bf00      	nop
    3e14:	b004      	add	sp, #16
    3e16:	4770      	bx	lr
    3e18:	40064000 	.word	0x40064000

00003e1c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3e1c:	b084      	sub	sp, #16
    3e1e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3e20:	4b09      	ldr	r3, [pc, #36]	; (3e48 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3e22:	69db      	ldr	r3, [r3, #28]
    3e24:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3e26:	9b03      	ldr	r3, [sp, #12]
    3e28:	f023 030f 	bic.w	r3, r3, #15
    3e2c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3e2e:	9b01      	ldr	r3, [sp, #4]
    3e30:	685b      	ldr	r3, [r3, #4]
    3e32:	3b01      	subs	r3, #1
    3e34:	9a03      	ldr	r2, [sp, #12]
    3e36:	4313      	orrs	r3, r2
    3e38:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3e3a:	4a03      	ldr	r2, [pc, #12]	; (3e48 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3e3c:	9b03      	ldr	r3, [sp, #12]
    3e3e:	61d3      	str	r3, [r2, #28]
}
    3e40:	bf00      	nop
    3e42:	b004      	add	sp, #16
    3e44:	4770      	bx	lr
    3e46:	bf00      	nop
    3e48:	40064000 	.word	0x40064000

00003e4c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3e4c:	b084      	sub	sp, #16
    3e4e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3e50:	4b0a      	ldr	r3, [pc, #40]	; (3e7c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3e52:	685b      	ldr	r3, [r3, #4]
    3e54:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3e56:	9b03      	ldr	r3, [sp, #12]
    3e58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3e5c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3e5e:	9b01      	ldr	r3, [sp, #4]
    3e60:	685b      	ldr	r3, [r3, #4]
    3e62:	3b01      	subs	r3, #1
    3e64:	021b      	lsls	r3, r3, #8
    3e66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3e6a:	9a03      	ldr	r2, [sp, #12]
    3e6c:	4313      	orrs	r3, r2
    3e6e:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3e70:	4a02      	ldr	r2, [pc, #8]	; (3e7c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3e72:	9b03      	ldr	r3, [sp, #12]
    3e74:	6053      	str	r3, [r2, #4]
}
    3e76:	bf00      	nop
    3e78:	b004      	add	sp, #16
    3e7a:	4770      	bx	lr
    3e7c:	40048000 	.word	0x40048000

00003e80 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3e80:	b084      	sub	sp, #16
    3e82:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3e84:	4919      	ldr	r1, [pc, #100]	; (3eec <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3e86:	9b01      	ldr	r3, [sp, #4]
    3e88:	681a      	ldr	r2, [r3, #0]
    3e8a:	4819      	ldr	r0, [pc, #100]	; (3ef0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3e8c:	4613      	mov	r3, r2
    3e8e:	00db      	lsls	r3, r3, #3
    3e90:	4413      	add	r3, r2
    3e92:	4403      	add	r3, r0
    3e94:	3305      	adds	r3, #5
    3e96:	781b      	ldrb	r3, [r3, #0]
    3e98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3e9c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    3e9e:	9b03      	ldr	r3, [sp, #12]
    3ea0:	f023 030f 	bic.w	r3, r3, #15
    3ea4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3ea6:	9b01      	ldr	r3, [sp, #4]
    3ea8:	685b      	ldr	r3, [r3, #4]
    3eaa:	3b01      	subs	r3, #1
    3eac:	f003 0307 	and.w	r3, r3, #7
    3eb0:	9a03      	ldr	r2, [sp, #12]
    3eb2:	4313      	orrs	r3, r2
    3eb4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3eb6:	9b01      	ldr	r3, [sp, #4]
    3eb8:	7a1b      	ldrb	r3, [r3, #8]
    3eba:	3b01      	subs	r3, #1
    3ebc:	00db      	lsls	r3, r3, #3
    3ebe:	f003 0308 	and.w	r3, r3, #8
    3ec2:	9a03      	ldr	r2, [sp, #12]
    3ec4:	4313      	orrs	r3, r2
    3ec6:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3ec8:	4908      	ldr	r1, [pc, #32]	; (3eec <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3eca:	9b01      	ldr	r3, [sp, #4]
    3ecc:	681a      	ldr	r2, [r3, #0]
    3ece:	4808      	ldr	r0, [pc, #32]	; (3ef0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3ed0:	4613      	mov	r3, r2
    3ed2:	00db      	lsls	r3, r3, #3
    3ed4:	4413      	add	r3, r2
    3ed6:	4403      	add	r3, r0
    3ed8:	3305      	adds	r3, #5
    3eda:	781b      	ldrb	r3, [r3, #0]
    3edc:	461a      	mov	r2, r3
    3ede:	9b03      	ldr	r3, [sp, #12]
    3ee0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3ee4:	bf00      	nop
    3ee6:	b004      	add	sp, #16
    3ee8:	4770      	bx	lr
    3eea:	bf00      	nop
    3eec:	40065000 	.word	0x40065000
    3ef0:	000190d0 	.word	0x000190d0

00003ef4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ef4:	b084      	sub	sp, #16
    3ef6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3ef8:	4b10      	ldr	r3, [pc, #64]	; (3f3c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3efc:	4a0f      	ldr	r2, [pc, #60]	; (3f3c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3f02:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3f04:	4b0d      	ldr	r3, [pc, #52]	; (3f3c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3f08:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3f0a:	9b03      	ldr	r3, [sp, #12]
    3f0c:	f023 030f 	bic.w	r3, r3, #15
    3f10:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3f12:	9b01      	ldr	r3, [sp, #4]
    3f14:	685b      	ldr	r3, [r3, #4]
    3f16:	3b01      	subs	r3, #1
    3f18:	005b      	lsls	r3, r3, #1
    3f1a:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3f1e:	9b01      	ldr	r3, [sp, #4]
    3f20:	7a1b      	ldrb	r3, [r3, #8]
    3f22:	3b01      	subs	r3, #1
    3f24:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3f28:	4313      	orrs	r3, r2
    3f2a:	9a03      	ldr	r2, [sp, #12]
    3f2c:	4313      	orrs	r3, r2
    3f2e:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3f30:	4a02      	ldr	r2, [pc, #8]	; (3f3c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3f32:	9b03      	ldr	r3, [sp, #12]
    3f34:	6693      	str	r3, [r2, #104]	; 0x68
}
    3f36:	bf00      	nop
    3f38:	b004      	add	sp, #16
    3f3a:	4770      	bx	lr
    3f3c:	40048000 	.word	0x40048000

00003f40 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3f40:	b082      	sub	sp, #8
    3f42:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3f44:	bf00      	nop
    3f46:	b002      	add	sp, #8
    3f48:	4770      	bx	lr
	...

00003f4c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3f4c:	b082      	sub	sp, #8
    3f4e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3f50:	bf00      	nop
    3f52:	b002      	add	sp, #8
    3f54:	4770      	bx	lr

00003f56 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3f56:	b082      	sub	sp, #8
    3f58:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3f5a:	bf00      	nop
    3f5c:	b002      	add	sp, #8
    3f5e:	4770      	bx	lr

00003f60 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3f60:	b500      	push	{lr}
    3f62:	b083      	sub	sp, #12
    3f64:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f66:	9b01      	ldr	r3, [sp, #4]
    3f68:	2b00      	cmp	r3, #0
    3f6a:	d002      	beq.n	3f72 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3f6c:	9801      	ldr	r0, [sp, #4]
    3f6e:	f000 f86a 	bl	4046 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f72:	bf00      	nop
    3f74:	b003      	add	sp, #12
    3f76:	f85d fb04 	ldr.w	pc, [sp], #4

00003f7a <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3f7a:	b500      	push	{lr}
    3f7c:	b083      	sub	sp, #12
    3f7e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f80:	9b01      	ldr	r3, [sp, #4]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d002      	beq.n	3f8c <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3f86:	9801      	ldr	r0, [sp, #4]
    3f88:	f000 f884 	bl	4094 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3f8c:	bf00      	nop
    3f8e:	b003      	add	sp, #12
    3f90:	f85d fb04 	ldr.w	pc, [sp], #4

00003f94 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3f94:	b500      	push	{lr}
    3f96:	b089      	sub	sp, #36	; 0x24
    3f98:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3f9a:	2300      	movs	r3, #0
    3f9c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3fa0:	9b01      	ldr	r3, [sp, #4]
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d031      	beq.n	400a <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3fa6:	4b1b      	ldr	r3, [pc, #108]	; (4014 <Clock_Ip_CompleteSOSC+0x80>)
    3fa8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3fac:	f003 0301 	and.w	r3, r3, #1
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	d02a      	beq.n	400a <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3fb4:	aa03      	add	r2, sp, #12
    3fb6:	a904      	add	r1, sp, #16
    3fb8:	a805      	add	r0, sp, #20
    3fba:	f24c 3350 	movw	r3, #50000	; 0xc350
    3fbe:	f7ff fd1d 	bl	39fc <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3fc2:	4b14      	ldr	r3, [pc, #80]	; (4014 <Clock_Ip_CompleteSOSC+0x80>)
    3fc4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3fc8:	0e1b      	lsrs	r3, r3, #24
    3fca:	f003 0301 	and.w	r3, r3, #1
    3fce:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3fd0:	9a03      	ldr	r2, [sp, #12]
    3fd2:	a904      	add	r1, sp, #16
    3fd4:	ab05      	add	r3, sp, #20
    3fd6:	4618      	mov	r0, r3
    3fd8:	f7ff fd2a 	bl	3a30 <Clock_Ip_TimeoutExpired>
    3fdc:	4603      	mov	r3, r0
    3fde:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    3fe2:	9b06      	ldr	r3, [sp, #24]
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	d106      	bne.n	3ff6 <Clock_Ip_CompleteSOSC+0x62>
    3fe8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3fec:	f083 0301 	eor.w	r3, r3, #1
    3ff0:	b2db      	uxtb	r3, r3
    3ff2:	2b00      	cmp	r3, #0
    3ff4:	d1e5      	bne.n	3fc2 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3ff6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ffa:	2b00      	cmp	r3, #0
    3ffc:	d005      	beq.n	400a <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3ffe:	9b01      	ldr	r3, [sp, #4]
    4000:	681b      	ldr	r3, [r3, #0]
    4002:	4619      	mov	r1, r3
    4004:	2001      	movs	r0, #1
    4006:	f7ff fce9 	bl	39dc <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    400a:	bf00      	nop
    400c:	b009      	add	sp, #36	; 0x24
    400e:	f85d fb04 	ldr.w	pc, [sp], #4
    4012:	bf00      	nop
    4014:	40064000 	.word	0x40064000

00004018 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    4018:	b500      	push	{lr}
    401a:	b083      	sub	sp, #12
    401c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    401e:	9801      	ldr	r0, [sp, #4]
    4020:	f000 f8c0 	bl	41a4 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4024:	bf00      	nop
    4026:	b003      	add	sp, #12
    4028:	f85d fb04 	ldr.w	pc, [sp], #4

0000402c <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    402c:	b500      	push	{lr}
    402e:	b083      	sub	sp, #12
    4030:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4032:	9b01      	ldr	r3, [sp, #4]
    4034:	2b00      	cmp	r3, #0
    4036:	d002      	beq.n	403e <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    4038:	9801      	ldr	r0, [sp, #4]
    403a:	f000 f8c3 	bl	41c4 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    403e:	bf00      	nop
    4040:	b003      	add	sp, #12
    4042:	f85d fb04 	ldr.w	pc, [sp], #4

00004046 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    4046:	b082      	sub	sp, #8
    4048:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    404a:	4b11      	ldr	r3, [pc, #68]	; (4090 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    404c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4050:	4a0f      	ldr	r2, [pc, #60]	; (4090 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    4052:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4056:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    405a:	4b0d      	ldr	r3, [pc, #52]	; (4090 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    405c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4060:	4a0b      	ldr	r2, [pc, #44]	; (4090 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    4062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4066:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    406a:	4b09      	ldr	r3, [pc, #36]	; (4090 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    406c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4070:	4a07      	ldr	r2, [pc, #28]	; (4090 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    4072:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4076:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    407a:	4b05      	ldr	r3, [pc, #20]	; (4090 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    407c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4080:	4a03      	ldr	r2, [pc, #12]	; (4090 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    4082:	f023 0301 	bic.w	r3, r3, #1
    4086:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    408a:	bf00      	nop
    408c:	b002      	add	sp, #8
    408e:	4770      	bx	lr
    4090:	40064000 	.word	0x40064000

00004094 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    4094:	b082      	sub	sp, #8
    4096:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    4098:	9b01      	ldr	r3, [sp, #4]
    409a:	891b      	ldrh	r3, [r3, #8]
    409c:	2b01      	cmp	r3, #1
    409e:	d174      	bne.n	418a <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    40a0:	9b01      	ldr	r3, [sp, #4]
    40a2:	7bdb      	ldrb	r3, [r3, #15]
    40a4:	2b00      	cmp	r3, #0
    40a6:	d002      	beq.n	40ae <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    40a8:	2b01      	cmp	r3, #1
    40aa:	d009      	beq.n	40c0 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    40ac:	e011      	b.n	40d2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    40ae:	4b39      	ldr	r3, [pc, #228]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    40b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    40b4:	4a37      	ldr	r2, [pc, #220]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    40b6:	f023 0308 	bic.w	r3, r3, #8
    40ba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    40be:	e008      	b.n	40d2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    40c0:	4b34      	ldr	r3, [pc, #208]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    40c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    40c6:	4a33      	ldr	r2, [pc, #204]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    40c8:	f043 0308 	orr.w	r3, r3, #8
    40cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    40d0:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    40d2:	4b30      	ldr	r3, [pc, #192]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    40d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    40d8:	4a2e      	ldr	r2, [pc, #184]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    40da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    40de:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    40e2:	9b01      	ldr	r3, [sp, #4]
    40e4:	685b      	ldr	r3, [r3, #4]
    40e6:	4a2c      	ldr	r2, [pc, #176]	; (4198 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    40e8:	4293      	cmp	r3, r2
    40ea:	d90d      	bls.n	4108 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    40ec:	9b01      	ldr	r3, [sp, #4]
    40ee:	685b      	ldr	r3, [r3, #4]
    40f0:	4a2a      	ldr	r2, [pc, #168]	; (419c <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    40f2:	4293      	cmp	r3, r2
    40f4:	d208      	bcs.n	4108 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    40f6:	4b27      	ldr	r3, [pc, #156]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    40f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    40fc:	4a25      	ldr	r2, [pc, #148]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    40fe:	f043 0320 	orr.w	r3, r3, #32
    4102:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    4106:	e007      	b.n	4118 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    4108:	4b22      	ldr	r3, [pc, #136]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    410a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    410e:	4a21      	ldr	r2, [pc, #132]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4110:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    4114:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    4118:	9b01      	ldr	r3, [sp, #4]
    411a:	7b1b      	ldrb	r3, [r3, #12]
    411c:	2b00      	cmp	r3, #0
    411e:	d108      	bne.n	4132 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    4120:	4b1c      	ldr	r3, [pc, #112]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4122:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    4126:	4a1b      	ldr	r2, [pc, #108]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4128:	f043 0304 	orr.w	r3, r3, #4
    412c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    4130:	e007      	b.n	4142 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    4132:	4b18      	ldr	r3, [pc, #96]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4134:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    4138:	4a16      	ldr	r2, [pc, #88]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    413a:	f023 0304 	bic.w	r3, r3, #4
    413e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4142:	9b01      	ldr	r3, [sp, #4]
    4144:	7c1b      	ldrb	r3, [r3, #16]
    4146:	2b02      	cmp	r3, #2
    4148:	d011      	beq.n	416e <Clock_Ip_SetSOSC_TrustedCall+0xda>
    414a:	2b02      	cmp	r3, #2
    414c:	dc14      	bgt.n	4178 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    414e:	2b00      	cmp	r3, #0
    4150:	d002      	beq.n	4158 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    4152:	2b01      	cmp	r3, #1
    4154:	d005      	beq.n	4162 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    4156:	e00f      	b.n	4178 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    4158:	4b0e      	ldr	r3, [pc, #56]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    415a:	2201      	movs	r2, #1
    415c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    4160:	e014      	b.n	418c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    4162:	4b0c      	ldr	r3, [pc, #48]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4164:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    4168:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    416c:	e00e      	b.n	418c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    416e:	4b09      	ldr	r3, [pc, #36]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4170:	4a0b      	ldr	r2, [pc, #44]	; (41a0 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    4172:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    4176:	e009      	b.n	418c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    4178:	4b06      	ldr	r3, [pc, #24]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    417a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    417e:	4a05      	ldr	r2, [pc, #20]	; (4194 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4180:	f043 0301 	orr.w	r3, r3, #1
    4184:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4188:	e000      	b.n	418c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    418a:	bf00      	nop
}
    418c:	bf00      	nop
    418e:	b002      	add	sp, #8
    4190:	4770      	bx	lr
    4192:	bf00      	nop
    4194:	40064000 	.word	0x40064000
    4198:	003d08ff 	.word	0x003d08ff
    419c:	007a1200 	.word	0x007a1200
    41a0:	00030001 	.word	0x00030001

000041a4 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    41a4:	b082      	sub	sp, #8
    41a6:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    41a8:	4b05      	ldr	r3, [pc, #20]	; (41c0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    41aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    41ae:	4a04      	ldr	r2, [pc, #16]	; (41c0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    41b0:	f023 0301 	bic.w	r3, r3, #1
    41b4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    41b8:	bf00      	nop
    41ba:	b002      	add	sp, #8
    41bc:	4770      	bx	lr
    41be:	bf00      	nop
    41c0:	40064000 	.word	0x40064000

000041c4 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    41c4:	b082      	sub	sp, #8
    41c6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    41c8:	9b01      	ldr	r3, [sp, #4]
    41ca:	891b      	ldrh	r3, [r3, #8]
    41cc:	2b01      	cmp	r3, #1
    41ce:	d107      	bne.n	41e0 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    41d0:	4b05      	ldr	r3, [pc, #20]	; (41e8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    41d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    41d6:	4a04      	ldr	r2, [pc, #16]	; (41e8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    41d8:	f043 0301 	orr.w	r3, r3, #1
    41dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    41e0:	bf00      	nop
    41e2:	b002      	add	sp, #8
    41e4:	4770      	bx	lr
    41e6:	bf00      	nop
    41e8:	40064000 	.word	0x40064000

000041ec <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    41ec:	b082      	sub	sp, #8
    41ee:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    41f0:	bf00      	nop
    41f2:	b002      	add	sp, #8
    41f4:	4770      	bx	lr

000041f6 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    41f6:	b082      	sub	sp, #8
    41f8:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    41fa:	2300      	movs	r3, #0
}
    41fc:	4618      	mov	r0, r3
    41fe:	b002      	add	sp, #8
    4200:	4770      	bx	lr

00004202 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    4202:	b082      	sub	sp, #8
    4204:	9001      	str	r0, [sp, #4]
    4206:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    4208:	bf00      	nop
    420a:	b002      	add	sp, #8
    420c:	4770      	bx	lr
	...

00004210 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    4210:	b082      	sub	sp, #8
    4212:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4214:	bf00      	nop
    4216:	b002      	add	sp, #8
    4218:	4770      	bx	lr

0000421a <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    421a:	b082      	sub	sp, #8
    421c:	9001      	str	r0, [sp, #4]
    421e:	460b      	mov	r3, r1
    4220:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    4224:	bf00      	nop
    4226:	b002      	add	sp, #8
    4228:	4770      	bx	lr

0000422a <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    422a:	b500      	push	{lr}
    422c:	b083      	sub	sp, #12
    422e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4230:	9b01      	ldr	r3, [sp, #4]
    4232:	2b00      	cmp	r3, #0
    4234:	d002      	beq.n	423c <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    4236:	9801      	ldr	r0, [sp, #4]
    4238:	f000 f8e7 	bl	440a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    423c:	bf00      	nop
    423e:	b003      	add	sp, #12
    4240:	f85d fb04 	ldr.w	pc, [sp], #4

00004244 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4244:	b500      	push	{lr}
    4246:	b085      	sub	sp, #20
    4248:	9001      	str	r0, [sp, #4]
    424a:	460b      	mov	r3, r1
    424c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4250:	9b01      	ldr	r3, [sp, #4]
    4252:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4254:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4258:	2b00      	cmp	r3, #0
    425a:	d003      	beq.n	4264 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    425c:	2300      	movs	r3, #0
    425e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4262:	e002      	b.n	426a <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4264:	2301      	movs	r3, #1
    4266:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    426a:	ab02      	add	r3, sp, #8
    426c:	4618      	mov	r0, r3
    426e:	f7ff ffdc 	bl	422a <Clock_Ip_ClockSetSimLPO1KEnable>
}
    4272:	bf00      	nop
    4274:	b005      	add	sp, #20
    4276:	f85d fb04 	ldr.w	pc, [sp], #4

0000427a <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    427a:	b500      	push	{lr}
    427c:	b083      	sub	sp, #12
    427e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4280:	9b01      	ldr	r3, [sp, #4]
    4282:	2b00      	cmp	r3, #0
    4284:	d002      	beq.n	428c <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    4286:	9801      	ldr	r0, [sp, #4]
    4288:	f000 f8d6 	bl	4438 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    428c:	bf00      	nop
    428e:	b003      	add	sp, #12
    4290:	f85d fb04 	ldr.w	pc, [sp], #4

00004294 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4294:	b500      	push	{lr}
    4296:	b085      	sub	sp, #20
    4298:	9001      	str	r0, [sp, #4]
    429a:	460b      	mov	r3, r1
    429c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    42a0:	9b01      	ldr	r3, [sp, #4]
    42a2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    42a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    42a8:	2b00      	cmp	r3, #0
    42aa:	d003      	beq.n	42b4 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    42ac:	2300      	movs	r3, #0
    42ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    42b2:	e002      	b.n	42ba <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    42b4:	2301      	movs	r3, #1
    42b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    42ba:	ab02      	add	r3, sp, #8
    42bc:	4618      	mov	r0, r3
    42be:	f7ff ffdc 	bl	427a <Clock_Ip_ClockSetSimLPO32KEnable>
}
    42c2:	bf00      	nop
    42c4:	b005      	add	sp, #20
    42c6:	f85d fb04 	ldr.w	pc, [sp], #4

000042ca <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    42ca:	b500      	push	{lr}
    42cc:	b083      	sub	sp, #12
    42ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42d0:	9b01      	ldr	r3, [sp, #4]
    42d2:	2b00      	cmp	r3, #0
    42d4:	d002      	beq.n	42dc <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    42d6:	9801      	ldr	r0, [sp, #4]
    42d8:	f000 f8c6 	bl	4468 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42dc:	bf00      	nop
    42de:	b003      	add	sp, #12
    42e0:	f85d fb04 	ldr.w	pc, [sp], #4

000042e4 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    42e4:	b500      	push	{lr}
    42e6:	b085      	sub	sp, #20
    42e8:	9001      	str	r0, [sp, #4]
    42ea:	460b      	mov	r3, r1
    42ec:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    42f0:	9b01      	ldr	r3, [sp, #4]
    42f2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    42f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    42f8:	2b00      	cmp	r3, #0
    42fa:	d003      	beq.n	4304 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    42fc:	2300      	movs	r3, #0
    42fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    4302:	e002      	b.n	430a <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4304:	2301      	movs	r3, #1
    4306:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    430a:	ab02      	add	r3, sp, #8
    430c:	4618      	mov	r0, r3
    430e:	f7ff ffdc 	bl	42ca <Clock_Ip_ClockSetSimClkoutEnable>
}
    4312:	bf00      	nop
    4314:	b005      	add	sp, #20
    4316:	f85d fb04 	ldr.w	pc, [sp], #4

0000431a <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    431a:	b500      	push	{lr}
    431c:	b083      	sub	sp, #12
    431e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4320:	9b01      	ldr	r3, [sp, #4]
    4322:	2b00      	cmp	r3, #0
    4324:	d002      	beq.n	432c <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    4326:	9801      	ldr	r0, [sp, #4]
    4328:	f000 f8b6 	bl	4498 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    432c:	bf00      	nop
    432e:	b003      	add	sp, #12
    4330:	f85d fb04 	ldr.w	pc, [sp], #4

00004334 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4334:	b500      	push	{lr}
    4336:	b085      	sub	sp, #20
    4338:	9001      	str	r0, [sp, #4]
    433a:	460b      	mov	r3, r1
    433c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4340:	9b01      	ldr	r3, [sp, #4]
    4342:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4344:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4348:	2b00      	cmp	r3, #0
    434a:	d003      	beq.n	4354 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    434c:	2300      	movs	r3, #0
    434e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4352:	e002      	b.n	435a <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4354:	2301      	movs	r3, #1
    4356:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    435a:	ab02      	add	r3, sp, #8
    435c:	4618      	mov	r0, r3
    435e:	f7ff ffdc 	bl	431a <Clock_Ip_ClockSetPccCgcEnable>
}
    4362:	bf00      	nop
    4364:	b005      	add	sp, #20
    4366:	f85d fb04 	ldr.w	pc, [sp], #4

0000436a <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    436a:	b500      	push	{lr}
    436c:	b083      	sub	sp, #12
    436e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4370:	9b01      	ldr	r3, [sp, #4]
    4372:	2b00      	cmp	r3, #0
    4374:	d002      	beq.n	437c <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    4376:	9801      	ldr	r0, [sp, #4]
    4378:	f000 f8bc 	bl	44f4 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    437c:	bf00      	nop
    437e:	b003      	add	sp, #12
    4380:	f85d fb04 	ldr.w	pc, [sp], #4

00004384 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    4384:	b500      	push	{lr}
    4386:	b085      	sub	sp, #20
    4388:	9001      	str	r0, [sp, #4]
    438a:	460b      	mov	r3, r1
    438c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4390:	9b01      	ldr	r3, [sp, #4]
    4392:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4394:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4398:	2b00      	cmp	r3, #0
    439a:	d003      	beq.n	43a4 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    439c:	2300      	movs	r3, #0
    439e:	f8ad 300c 	strh.w	r3, [sp, #12]
    43a2:	e002      	b.n	43aa <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    43a4:	2301      	movs	r3, #1
    43a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    43aa:	ab02      	add	r3, sp, #8
    43ac:	4618      	mov	r0, r3
    43ae:	f7ff ffdc 	bl	436a <Clock_Ip_ClockSetSimGate>
}
    43b2:	bf00      	nop
    43b4:	b005      	add	sp, #20
    43b6:	f85d fb04 	ldr.w	pc, [sp], #4

000043ba <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    43ba:	b500      	push	{lr}
    43bc:	b083      	sub	sp, #12
    43be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43c0:	9b01      	ldr	r3, [sp, #4]
    43c2:	2b00      	cmp	r3, #0
    43c4:	d002      	beq.n	43cc <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    43c6:	9801      	ldr	r0, [sp, #4]
    43c8:	f000 f8c0 	bl	454c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43cc:	bf00      	nop
    43ce:	b003      	add	sp, #12
    43d0:	f85d fb04 	ldr.w	pc, [sp], #4

000043d4 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    43d4:	b500      	push	{lr}
    43d6:	b085      	sub	sp, #20
    43d8:	9001      	str	r0, [sp, #4]
    43da:	460b      	mov	r3, r1
    43dc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    43e0:	9b01      	ldr	r3, [sp, #4]
    43e2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    43e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    43e8:	2b00      	cmp	r3, #0
    43ea:	d003      	beq.n	43f4 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    43ec:	2300      	movs	r3, #0
    43ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    43f2:	e002      	b.n	43fa <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    43f4:	2301      	movs	r3, #1
    43f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    43fa:	ab02      	add	r3, sp, #8
    43fc:	4618      	mov	r0, r3
    43fe:	f7ff ffdc 	bl	43ba <Clock_Ip_ClockSetSimTraceEnable>
}
    4402:	bf00      	nop
    4404:	b005      	add	sp, #20
    4406:	f85d fb04 	ldr.w	pc, [sp], #4

0000440a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    440a:	b084      	sub	sp, #16
    440c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    440e:	4b09      	ldr	r3, [pc, #36]	; (4434 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    4410:	691b      	ldr	r3, [r3, #16]
    4412:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    4414:	9b03      	ldr	r3, [sp, #12]
    4416:	f023 0301 	bic.w	r3, r3, #1
    441a:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    441c:	9b01      	ldr	r3, [sp, #4]
    441e:	889b      	ldrh	r3, [r3, #4]
    4420:	461a      	mov	r2, r3
    4422:	9b03      	ldr	r3, [sp, #12]
    4424:	4313      	orrs	r3, r2
    4426:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4428:	4a02      	ldr	r2, [pc, #8]	; (4434 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    442a:	9b03      	ldr	r3, [sp, #12]
    442c:	6113      	str	r3, [r2, #16]
}
    442e:	bf00      	nop
    4430:	b004      	add	sp, #16
    4432:	4770      	bx	lr
    4434:	40048000 	.word	0x40048000

00004438 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4438:	b084      	sub	sp, #16
    443a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    443c:	4b09      	ldr	r3, [pc, #36]	; (4464 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    443e:	691b      	ldr	r3, [r3, #16]
    4440:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    4442:	9b03      	ldr	r3, [sp, #12]
    4444:	f023 0302 	bic.w	r3, r3, #2
    4448:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    444a:	9b01      	ldr	r3, [sp, #4]
    444c:	889b      	ldrh	r3, [r3, #4]
    444e:	005b      	lsls	r3, r3, #1
    4450:	9a03      	ldr	r2, [sp, #12]
    4452:	4313      	orrs	r3, r2
    4454:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4456:	4a03      	ldr	r2, [pc, #12]	; (4464 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    4458:	9b03      	ldr	r3, [sp, #12]
    445a:	6113      	str	r3, [r2, #16]
}
    445c:	bf00      	nop
    445e:	b004      	add	sp, #16
    4460:	4770      	bx	lr
    4462:	bf00      	nop
    4464:	40048000 	.word	0x40048000

00004468 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4468:	b084      	sub	sp, #16
    446a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    446c:	4b09      	ldr	r3, [pc, #36]	; (4494 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    446e:	685b      	ldr	r3, [r3, #4]
    4470:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    4472:	9b03      	ldr	r3, [sp, #12]
    4474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4478:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    447a:	9b01      	ldr	r3, [sp, #4]
    447c:	889b      	ldrh	r3, [r3, #4]
    447e:	02db      	lsls	r3, r3, #11
    4480:	9a03      	ldr	r2, [sp, #12]
    4482:	4313      	orrs	r3, r2
    4484:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4486:	4a03      	ldr	r2, [pc, #12]	; (4494 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    4488:	9b03      	ldr	r3, [sp, #12]
    448a:	6053      	str	r3, [r2, #4]
}
    448c:	bf00      	nop
    448e:	b004      	add	sp, #16
    4490:	4770      	bx	lr
    4492:	bf00      	nop
    4494:	40048000 	.word	0x40048000

00004498 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4498:	b084      	sub	sp, #16
    449a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    449c:	4913      	ldr	r1, [pc, #76]	; (44ec <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    449e:	9b01      	ldr	r3, [sp, #4]
    44a0:	681a      	ldr	r2, [r3, #0]
    44a2:	4813      	ldr	r0, [pc, #76]	; (44f0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    44a4:	4613      	mov	r3, r2
    44a6:	00db      	lsls	r3, r3, #3
    44a8:	4413      	add	r3, r2
    44aa:	4403      	add	r3, r0
    44ac:	3306      	adds	r3, #6
    44ae:	781b      	ldrb	r3, [r3, #0]
    44b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    44b4:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    44b6:	9b03      	ldr	r3, [sp, #12]
    44b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    44bc:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    44be:	9b01      	ldr	r3, [sp, #4]
    44c0:	889b      	ldrh	r3, [r3, #4]
    44c2:	079b      	lsls	r3, r3, #30
    44c4:	9a03      	ldr	r2, [sp, #12]
    44c6:	4313      	orrs	r3, r2
    44c8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    44ca:	4908      	ldr	r1, [pc, #32]	; (44ec <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    44cc:	9b01      	ldr	r3, [sp, #4]
    44ce:	681a      	ldr	r2, [r3, #0]
    44d0:	4807      	ldr	r0, [pc, #28]	; (44f0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    44d2:	4613      	mov	r3, r2
    44d4:	00db      	lsls	r3, r3, #3
    44d6:	4413      	add	r3, r2
    44d8:	4403      	add	r3, r0
    44da:	3306      	adds	r3, #6
    44dc:	781b      	ldrb	r3, [r3, #0]
    44de:	461a      	mov	r2, r3
    44e0:	9b03      	ldr	r3, [sp, #12]
    44e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    44e6:	bf00      	nop
    44e8:	b004      	add	sp, #16
    44ea:	4770      	bx	lr
    44ec:	40065000 	.word	0x40065000
    44f0:	000190d0 	.word	0x000190d0

000044f4 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    44f4:	b086      	sub	sp, #24
    44f6:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    44f8:	9b01      	ldr	r3, [sp, #4]
    44fa:	889b      	ldrh	r3, [r3, #4]
    44fc:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    44fe:	9b01      	ldr	r3, [sp, #4]
    4500:	681a      	ldr	r2, [r3, #0]
    4502:	4910      	ldr	r1, [pc, #64]	; (4544 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    4504:	4613      	mov	r3, r2
    4506:	00db      	lsls	r3, r3, #3
    4508:	4413      	add	r3, r2
    450a:	440b      	add	r3, r1
    450c:	3306      	adds	r3, #6
    450e:	781b      	ldrb	r3, [r3, #0]
    4510:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    4512:	4b0d      	ldr	r3, [pc, #52]	; (4548 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    4514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4516:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    4518:	2201      	movs	r2, #1
    451a:	9b04      	ldr	r3, [sp, #16]
    451c:	fa02 f303 	lsl.w	r3, r2, r3
    4520:	43db      	mvns	r3, r3
    4522:	9a03      	ldr	r2, [sp, #12]
    4524:	4013      	ands	r3, r2
    4526:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    4528:	9a05      	ldr	r2, [sp, #20]
    452a:	9b04      	ldr	r3, [sp, #16]
    452c:	fa02 f303 	lsl.w	r3, r2, r3
    4530:	9a03      	ldr	r2, [sp, #12]
    4532:	4313      	orrs	r3, r2
    4534:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    4536:	4a04      	ldr	r2, [pc, #16]	; (4548 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    4538:	9b03      	ldr	r3, [sp, #12]
    453a:	6413      	str	r3, [r2, #64]	; 0x40
}
    453c:	bf00      	nop
    453e:	b006      	add	sp, #24
    4540:	4770      	bx	lr
    4542:	bf00      	nop
    4544:	000190d0 	.word	0x000190d0
    4548:	40048000 	.word	0x40048000

0000454c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    454c:	b084      	sub	sp, #16
    454e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    4550:	4b0a      	ldr	r3, [pc, #40]	; (457c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    4552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4554:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    4556:	9b01      	ldr	r3, [sp, #4]
    4558:	889b      	ldrh	r3, [r3, #4]
    455a:	2b01      	cmp	r3, #1
    455c:	d104      	bne.n	4568 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    455e:	9b03      	ldr	r3, [sp, #12]
    4560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4564:	9303      	str	r3, [sp, #12]
    4566:	e003      	b.n	4570 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    4568:	9b03      	ldr	r3, [sp, #12]
    456a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    456e:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    4570:	4a02      	ldr	r2, [pc, #8]	; (457c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    4572:	9b03      	ldr	r3, [sp, #12]
    4574:	6693      	str	r3, [r2, #104]	; 0x68
}
    4576:	bf00      	nop
    4578:	b004      	add	sp, #16
    457a:	4770      	bx	lr
    457c:	40048000 	.word	0x40048000

00004580 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    4580:	b082      	sub	sp, #8
    4582:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4584:	bf00      	nop
    4586:	b002      	add	sp, #8
    4588:	4770      	bx	lr

0000458a <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    458a:	b082      	sub	sp, #8
    458c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    458e:	bf00      	nop
    4590:	b002      	add	sp, #8
    4592:	4770      	bx	lr

00004594 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4594:	b500      	push	{lr}
    4596:	b083      	sub	sp, #12
    4598:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    459a:	9b01      	ldr	r3, [sp, #4]
    459c:	2b00      	cmp	r3, #0
    459e:	d002      	beq.n	45a6 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    45a0:	9801      	ldr	r0, [sp, #4]
    45a2:	f000 f8d1 	bl	4748 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45a6:	bf00      	nop
    45a8:	b003      	add	sp, #12
    45aa:	f85d fb04 	ldr.w	pc, [sp], #4

000045ae <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    45ae:	b500      	push	{lr}
    45b0:	b083      	sub	sp, #12
    45b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45b4:	9b01      	ldr	r3, [sp, #4]
    45b6:	2b00      	cmp	r3, #0
    45b8:	d002      	beq.n	45c0 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    45ba:	9801      	ldr	r0, [sp, #4]
    45bc:	f000 f950 	bl	4860 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45c0:	bf00      	nop
    45c2:	b003      	add	sp, #12
    45c4:	f85d fb04 	ldr.w	pc, [sp], #4

000045c8 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    45c8:	b500      	push	{lr}
    45ca:	b083      	sub	sp, #12
    45cc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    45ce:	9801      	ldr	r0, [sp, #4]
    45d0:	f000 f98e 	bl	48f0 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    45d4:	bf00      	nop
    45d6:	b003      	add	sp, #12
    45d8:	f85d fb04 	ldr.w	pc, [sp], #4

000045dc <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    45dc:	b500      	push	{lr}
    45de:	b083      	sub	sp, #12
    45e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45e2:	9b01      	ldr	r3, [sp, #4]
    45e4:	2b00      	cmp	r3, #0
    45e6:	d002      	beq.n	45ee <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    45e8:	9801      	ldr	r0, [sp, #4]
    45ea:	f000 f999 	bl	4920 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45ee:	bf00      	nop
    45f0:	b003      	add	sp, #12
    45f2:	f85d fb04 	ldr.w	pc, [sp], #4

000045f6 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    45f6:	b500      	push	{lr}
    45f8:	b083      	sub	sp, #12
    45fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45fc:	9b01      	ldr	r3, [sp, #4]
    45fe:	2b00      	cmp	r3, #0
    4600:	d002      	beq.n	4608 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    4602:	9801      	ldr	r0, [sp, #4]
    4604:	f000 f9b0 	bl	4968 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4608:	bf00      	nop
    460a:	b003      	add	sp, #12
    460c:	f85d fb04 	ldr.w	pc, [sp], #4

00004610 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    4610:	b500      	push	{lr}
    4612:	b083      	sub	sp, #12
    4614:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    4616:	9801      	ldr	r0, [sp, #4]
    4618:	f000 f9ba 	bl	4990 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    461c:	bf00      	nop
    461e:	b003      	add	sp, #12
    4620:	f85d fb04 	ldr.w	pc, [sp], #4

00004624 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    4624:	b500      	push	{lr}
    4626:	b083      	sub	sp, #12
    4628:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    462a:	9b01      	ldr	r3, [sp, #4]
    462c:	2b00      	cmp	r3, #0
    462e:	d002      	beq.n	4636 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    4630:	9801      	ldr	r0, [sp, #4]
    4632:	f000 f9bd 	bl	49b0 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4636:	bf00      	nop
    4638:	b003      	add	sp, #12
    463a:	f85d fb04 	ldr.w	pc, [sp], #4

0000463e <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    463e:	b500      	push	{lr}
    4640:	b083      	sub	sp, #12
    4642:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4644:	9b01      	ldr	r3, [sp, #4]
    4646:	2b00      	cmp	r3, #0
    4648:	d002      	beq.n	4650 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    464a:	9801      	ldr	r0, [sp, #4]
    464c:	f000 f9d4 	bl	49f8 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4650:	bf00      	nop
    4652:	b003      	add	sp, #12
    4654:	f85d fb04 	ldr.w	pc, [sp], #4

00004658 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    4658:	b500      	push	{lr}
    465a:	b083      	sub	sp, #12
    465c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    465e:	9801      	ldr	r0, [sp, #4]
    4660:	f000 f9de 	bl	4a20 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4664:	bf00      	nop
    4666:	b003      	add	sp, #12
    4668:	f85d fb04 	ldr.w	pc, [sp], #4

0000466c <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    466c:	b500      	push	{lr}
    466e:	b089      	sub	sp, #36	; 0x24
    4670:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    4672:	2300      	movs	r3, #0
    4674:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    4678:	4b20      	ldr	r3, [pc, #128]	; (46fc <SetInputSouceSytemClock+0x90>)
    467a:	695b      	ldr	r3, [r3, #20]
    467c:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    467e:	9b06      	ldr	r3, [sp, #24]
    4680:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4684:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    4686:	9b01      	ldr	r3, [sp, #4]
    4688:	061b      	lsls	r3, r3, #24
    468a:	9a06      	ldr	r2, [sp, #24]
    468c:	4313      	orrs	r3, r2
    468e:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    4690:	4a1a      	ldr	r2, [pc, #104]	; (46fc <SetInputSouceSytemClock+0x90>)
    4692:	9b06      	ldr	r3, [sp, #24]
    4694:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4696:	aa02      	add	r2, sp, #8
    4698:	a903      	add	r1, sp, #12
    469a:	a804      	add	r0, sp, #16
    469c:	f24c 3350 	movw	r3, #50000	; 0xc350
    46a0:	f7ff f9ac 	bl	39fc <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    46a4:	4b15      	ldr	r3, [pc, #84]	; (46fc <SetInputSouceSytemClock+0x90>)
    46a6:	691b      	ldr	r3, [r3, #16]
    46a8:	0e1b      	lsrs	r3, r3, #24
    46aa:	f003 030f 	and.w	r3, r3, #15
    46ae:	9a01      	ldr	r2, [sp, #4]
    46b0:	429a      	cmp	r2, r3
    46b2:	bf0c      	ite	eq
    46b4:	2301      	moveq	r3, #1
    46b6:	2300      	movne	r3, #0
    46b8:	b2db      	uxtb	r3, r3
    46ba:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    46bc:	9a02      	ldr	r2, [sp, #8]
    46be:	a903      	add	r1, sp, #12
    46c0:	ab04      	add	r3, sp, #16
    46c2:	4618      	mov	r0, r3
    46c4:	f7ff f9b4 	bl	3a30 <Clock_Ip_TimeoutExpired>
    46c8:	4603      	mov	r3, r0
    46ca:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    46ce:	9b05      	ldr	r3, [sp, #20]
    46d0:	2b00      	cmp	r3, #0
    46d2:	d106      	bne.n	46e2 <SetInputSouceSytemClock+0x76>
    46d4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    46d8:	f083 0301 	eor.w	r3, r3, #1
    46dc:	b2db      	uxtb	r3, r3
    46de:	2b00      	cmp	r3, #0
    46e0:	d1e0      	bne.n	46a4 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    46e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    46e6:	2b00      	cmp	r3, #0
    46e8:	d003      	beq.n	46f2 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    46ea:	2105      	movs	r1, #5
    46ec:	2001      	movs	r0, #1
    46ee:	f7ff f975 	bl	39dc <Clock_Ip_ReportClockErrors>
    }
}
    46f2:	bf00      	nop
    46f4:	b009      	add	sp, #36	; 0x24
    46f6:	f85d fb04 	ldr.w	pc, [sp], #4
    46fa:	bf00      	nop
    46fc:	40064000 	.word	0x40064000

00004700 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4700:	b500      	push	{lr}
    4702:	b083      	sub	sp, #12
    4704:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4706:	9b01      	ldr	r3, [sp, #4]
    4708:	2b00      	cmp	r3, #0
    470a:	d002      	beq.n	4712 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    470c:	9801      	ldr	r0, [sp, #4]
    470e:	f000 f997 	bl	4a40 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4712:	bf00      	nop
    4714:	b003      	add	sp, #12
    4716:	f85d fb04 	ldr.w	pc, [sp], #4

0000471a <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    471a:	b500      	push	{lr}
    471c:	b083      	sub	sp, #12
    471e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4720:	9b01      	ldr	r3, [sp, #4]
    4722:	2b00      	cmp	r3, #0
    4724:	d002      	beq.n	472c <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    4726:	9801      	ldr	r0, [sp, #4]
    4728:	f000 fa7e 	bl	4c28 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    472c:	bf00      	nop
    472e:	b003      	add	sp, #12
    4730:	f85d fb04 	ldr.w	pc, [sp], #4

00004734 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    4734:	b500      	push	{lr}
    4736:	b083      	sub	sp, #12
    4738:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    473a:	9801      	ldr	r0, [sp, #4]
    473c:	f000 fab8 	bl	4cb0 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4740:	bf00      	nop
    4742:	b003      	add	sp, #12
    4744:	f85d fb04 	ldr.w	pc, [sp], #4

00004748 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4748:	b500      	push	{lr}
    474a:	b08b      	sub	sp, #44	; 0x2c
    474c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    474e:	2300      	movs	r3, #0
    4750:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    4754:	9b01      	ldr	r3, [sp, #4]
    4756:	2b00      	cmp	r3, #0
    4758:	d10b      	bne.n	4772 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    475a:	2305      	movs	r3, #5
    475c:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    475e:	2301      	movs	r3, #1
    4760:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    4764:	2301      	movs	r3, #1
    4766:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    476a:	2301      	movs	r3, #1
    476c:	f88d 3010 	strb.w	r3, [sp, #16]
    4770:	e00e      	b.n	4790 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    4772:	9b01      	ldr	r3, [sp, #4]
    4774:	681b      	ldr	r3, [r3, #0]
    4776:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    4778:	9b01      	ldr	r3, [sp, #4]
    477a:	79db      	ldrb	r3, [r3, #7]
    477c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    4780:	9b01      	ldr	r3, [sp, #4]
    4782:	889b      	ldrh	r3, [r3, #4]
    4784:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    4788:	9b01      	ldr	r3, [sp, #4]
    478a:	7a1b      	ldrb	r3, [r3, #8]
    478c:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4790:	4b32      	ldr	r3, [pc, #200]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4792:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4796:	4a31      	ldr	r2, [pc, #196]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4798:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    479c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    47a0:	4b2e      	ldr	r3, [pc, #184]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47a6:	4a2d      	ldr	r2, [pc, #180]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47a8:	f023 0301 	bic.w	r3, r3, #1
    47ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    47b0:	4b2a      	ldr	r3, [pc, #168]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47b6:	4a29      	ldr	r2, [pc, #164]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47b8:	f023 0304 	bic.w	r3, r3, #4
    47bc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    47c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    47c4:	2b01      	cmp	r3, #1
    47c6:	d144      	bne.n	4852 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    47c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    47cc:	4a23      	ldr	r2, [pc, #140]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47ce:	f003 0301 	and.w	r3, r3, #1
    47d2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    47d6:	4b21      	ldr	r3, [pc, #132]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47dc:	4a1f      	ldr	r2, [pc, #124]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47de:	f043 0301 	orr.w	r3, r3, #1
    47e2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    47e6:	4b1d      	ldr	r3, [pc, #116]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    47ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
    47f0:	009b      	lsls	r3, r3, #2
    47f2:	f003 0304 	and.w	r3, r3, #4
    47f6:	4919      	ldr	r1, [pc, #100]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    47f8:	4313      	orrs	r3, r2
    47fa:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    47fe:	aa05      	add	r2, sp, #20
    4800:	a906      	add	r1, sp, #24
    4802:	a807      	add	r0, sp, #28
    4804:	f24c 3350 	movw	r3, #50000	; 0xc350
    4808:	f7ff f8f8 	bl	39fc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    480c:	4b13      	ldr	r3, [pc, #76]	; (485c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    480e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4812:	0e1b      	lsrs	r3, r3, #24
    4814:	f003 0301 	and.w	r3, r3, #1
    4818:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    481a:	9a05      	ldr	r2, [sp, #20]
    481c:	a906      	add	r1, sp, #24
    481e:	ab07      	add	r3, sp, #28
    4820:	4618      	mov	r0, r3
    4822:	f7ff f905 	bl	3a30 <Clock_Ip_TimeoutExpired>
    4826:	4603      	mov	r3, r0
    4828:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    482c:	9b08      	ldr	r3, [sp, #32]
    482e:	2b00      	cmp	r3, #0
    4830:	d106      	bne.n	4840 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    4832:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4836:	f083 0301 	eor.w	r3, r3, #1
    483a:	b2db      	uxtb	r3, r3
    483c:	2b00      	cmp	r3, #0
    483e:	d1e5      	bne.n	480c <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    4840:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4844:	2b00      	cmp	r3, #0
    4846:	d004      	beq.n	4852 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    4848:	9b02      	ldr	r3, [sp, #8]
    484a:	4619      	mov	r1, r3
    484c:	2001      	movs	r0, #1
    484e:	f7ff f8c5 	bl	39dc <Clock_Ip_ReportClockErrors>
        }
    }
}
    4852:	bf00      	nop
    4854:	b00b      	add	sp, #44	; 0x2c
    4856:	f85d fb04 	ldr.w	pc, [sp], #4
    485a:	bf00      	nop
    485c:	40064000 	.word	0x40064000

00004860 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4860:	b500      	push	{lr}
    4862:	b089      	sub	sp, #36	; 0x24
    4864:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4866:	2300      	movs	r3, #0
    4868:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    486c:	4b1f      	ldr	r3, [pc, #124]	; (48ec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    486e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4872:	4a1e      	ldr	r2, [pc, #120]	; (48ec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4874:	f043 0301 	orr.w	r3, r3, #1
    4878:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    487c:	4b1b      	ldr	r3, [pc, #108]	; (48ec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    487e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4882:	4a1a      	ldr	r2, [pc, #104]	; (48ec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4884:	f043 0304 	orr.w	r3, r3, #4
    4888:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    488c:	aa03      	add	r2, sp, #12
    488e:	a904      	add	r1, sp, #16
    4890:	a805      	add	r0, sp, #20
    4892:	f24c 3350 	movw	r3, #50000	; 0xc350
    4896:	f7ff f8b1 	bl	39fc <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    489a:	4b14      	ldr	r3, [pc, #80]	; (48ec <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    489c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    48a0:	0e1b      	lsrs	r3, r3, #24
    48a2:	f003 0301 	and.w	r3, r3, #1
    48a6:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    48a8:	9a03      	ldr	r2, [sp, #12]
    48aa:	a904      	add	r1, sp, #16
    48ac:	ab05      	add	r3, sp, #20
    48ae:	4618      	mov	r0, r3
    48b0:	f7ff f8be 	bl	3a30 <Clock_Ip_TimeoutExpired>
    48b4:	4603      	mov	r3, r0
    48b6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    48ba:	9b06      	ldr	r3, [sp, #24]
    48bc:	2b00      	cmp	r3, #0
    48be:	d106      	bne.n	48ce <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    48c0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    48c4:	f083 0301 	eor.w	r3, r3, #1
    48c8:	b2db      	uxtb	r3, r3
    48ca:	2b00      	cmp	r3, #0
    48cc:	d1e5      	bne.n	489a <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    48ce:	f89d 301f 	ldrb.w	r3, [sp, #31]
    48d2:	2b00      	cmp	r3, #0
    48d4:	d005      	beq.n	48e2 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    48d6:	9b01      	ldr	r3, [sp, #4]
    48d8:	681b      	ldr	r3, [r3, #0]
    48da:	4619      	mov	r1, r3
    48dc:	2001      	movs	r0, #1
    48de:	f7ff f87d 	bl	39dc <Clock_Ip_ReportClockErrors>
    }
}
    48e2:	bf00      	nop
    48e4:	b009      	add	sp, #36	; 0x24
    48e6:	f85d fb04 	ldr.w	pc, [sp], #4
    48ea:	bf00      	nop
    48ec:	40064000 	.word	0x40064000

000048f0 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    48f0:	b082      	sub	sp, #8
    48f2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    48f4:	4b09      	ldr	r3, [pc, #36]	; (491c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    48f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    48fa:	4a08      	ldr	r2, [pc, #32]	; (491c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    48fc:	f023 0301 	bic.w	r3, r3, #1
    4900:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4904:	4b05      	ldr	r3, [pc, #20]	; (491c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4906:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    490a:	4a04      	ldr	r2, [pc, #16]	; (491c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    490c:	f023 0304 	bic.w	r3, r3, #4
    4910:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4914:	bf00      	nop
    4916:	b002      	add	sp, #8
    4918:	4770      	bx	lr
    491a:	bf00      	nop
    491c:	40064000 	.word	0x40064000

00004920 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4920:	b082      	sub	sp, #8
    4922:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4924:	4b0f      	ldr	r3, [pc, #60]	; (4964 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4926:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    492a:	4a0e      	ldr	r2, [pc, #56]	; (4964 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    492c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4930:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4934:	4b0b      	ldr	r3, [pc, #44]	; (4964 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4936:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    493a:	4a0a      	ldr	r2, [pc, #40]	; (4964 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    493c:	f023 0304 	bic.w	r3, r3, #4
    4940:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    4944:	4b07      	ldr	r3, [pc, #28]	; (4964 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4946:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    494a:	9b01      	ldr	r3, [sp, #4]
    494c:	7a1b      	ldrb	r3, [r3, #8]
    494e:	009b      	lsls	r3, r3, #2
    4950:	f003 0304 	and.w	r3, r3, #4
    4954:	4903      	ldr	r1, [pc, #12]	; (4964 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4956:	4313      	orrs	r3, r2
    4958:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    495c:	bf00      	nop
    495e:	b002      	add	sp, #8
    4960:	4770      	bx	lr
    4962:	bf00      	nop
    4964:	40064000 	.word	0x40064000

00004968 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4968:	b082      	sub	sp, #8
    496a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    496c:	9b01      	ldr	r3, [sp, #4]
    496e:	889b      	ldrh	r3, [r3, #4]
    4970:	2b01      	cmp	r3, #1
    4972:	d107      	bne.n	4984 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    4974:	4b05      	ldr	r3, [pc, #20]	; (498c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    4976:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    497a:	4a04      	ldr	r2, [pc, #16]	; (498c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    497c:	f043 0304 	orr.w	r3, r3, #4
    4980:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4984:	bf00      	nop
    4986:	b002      	add	sp, #8
    4988:	4770      	bx	lr
    498a:	bf00      	nop
    498c:	40064000 	.word	0x40064000

00004990 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    4990:	b082      	sub	sp, #8
    4992:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4994:	4b05      	ldr	r3, [pc, #20]	; (49ac <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    4996:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    499a:	4a04      	ldr	r2, [pc, #16]	; (49ac <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    499c:	f023 0304 	bic.w	r3, r3, #4
    49a0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    49a4:	bf00      	nop
    49a6:	b002      	add	sp, #8
    49a8:	4770      	bx	lr
    49aa:	bf00      	nop
    49ac:	40064000 	.word	0x40064000

000049b0 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    49b0:	b082      	sub	sp, #8
    49b2:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    49b4:	4b0f      	ldr	r3, [pc, #60]	; (49f4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    49b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    49ba:	4a0e      	ldr	r2, [pc, #56]	; (49f4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    49bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    49c0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    49c4:	4b0b      	ldr	r3, [pc, #44]	; (49f4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    49c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    49ca:	4a0a      	ldr	r2, [pc, #40]	; (49f4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    49cc:	f023 0302 	bic.w	r3, r3, #2
    49d0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    49d4:	4b07      	ldr	r3, [pc, #28]	; (49f4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    49d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    49da:	9b01      	ldr	r3, [sp, #4]
    49dc:	7a5b      	ldrb	r3, [r3, #9]
    49de:	005b      	lsls	r3, r3, #1
    49e0:	f003 0302 	and.w	r3, r3, #2
    49e4:	4903      	ldr	r1, [pc, #12]	; (49f4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    49e6:	4313      	orrs	r3, r2
    49e8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    49ec:	bf00      	nop
    49ee:	b002      	add	sp, #8
    49f0:	4770      	bx	lr
    49f2:	bf00      	nop
    49f4:	40064000 	.word	0x40064000

000049f8 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    49f8:	b082      	sub	sp, #8
    49fa:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    49fc:	9b01      	ldr	r3, [sp, #4]
    49fe:	889b      	ldrh	r3, [r3, #4]
    4a00:	2b01      	cmp	r3, #1
    4a02:	d107      	bne.n	4a14 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    4a04:	4b05      	ldr	r3, [pc, #20]	; (4a1c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4a06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a0a:	4a04      	ldr	r2, [pc, #16]	; (4a1c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4a0c:	f043 0302 	orr.w	r3, r3, #2
    4a10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4a14:	bf00      	nop
    4a16:	b002      	add	sp, #8
    4a18:	4770      	bx	lr
    4a1a:	bf00      	nop
    4a1c:	40064000 	.word	0x40064000

00004a20 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    4a20:	b082      	sub	sp, #8
    4a22:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4a24:	4b05      	ldr	r3, [pc, #20]	; (4a3c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4a26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a2a:	4a04      	ldr	r2, [pc, #16]	; (4a3c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4a2c:	f023 0302 	bic.w	r3, r3, #2
    4a30:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4a34:	bf00      	nop
    4a36:	b002      	add	sp, #8
    4a38:	4770      	bx	lr
    4a3a:	bf00      	nop
    4a3c:	40064000 	.word	0x40064000

00004a40 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4a40:	b500      	push	{lr}
    4a42:	b08b      	sub	sp, #44	; 0x2c
    4a44:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4a46:	9b01      	ldr	r3, [sp, #4]
    4a48:	681a      	ldr	r2, [r3, #0]
    4a4a:	4975      	ldr	r1, [pc, #468]	; (4c20 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    4a4c:	4613      	mov	r3, r2
    4a4e:	00db      	lsls	r3, r3, #3
    4a50:	4413      	add	r3, r2
    4a52:	440b      	add	r3, r1
    4a54:	781b      	ldrb	r3, [r3, #0]
    4a56:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4a58:	2300      	movs	r3, #0
    4a5a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    4a5e:	2300      	movs	r3, #0
    4a60:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    4a64:	4b6f      	ldr	r3, [pc, #444]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4a66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a6a:	4a6e      	ldr	r2, [pc, #440]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4a6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4a70:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    4a74:	4b6b      	ldr	r3, [pc, #428]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4a76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4a7e:	2b00      	cmp	r3, #0
    4a80:	d07d      	beq.n	4b7e <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4a82:	9b01      	ldr	r3, [sp, #4]
    4a84:	79db      	ldrb	r3, [r3, #7]
    4a86:	461a      	mov	r2, r3
    4a88:	4b66      	ldr	r3, [pc, #408]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4a8a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4a8e:	f003 0303 	and.w	r3, r3, #3
    4a92:	429a      	cmp	r2, r3
    4a94:	d10b      	bne.n	4aae <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    4a96:	9b01      	ldr	r3, [sp, #4]
    4a98:	799b      	ldrb	r3, [r3, #6]
    4a9a:	461a      	mov	r2, r3
    4a9c:	4b61      	ldr	r3, [pc, #388]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4a9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4aa2:	08db      	lsrs	r3, r3, #3
    4aa4:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4aa8:	429a      	cmp	r2, r3
    4aaa:	f000 80b4 	beq.w	4c16 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    4aae:	4b5d      	ldr	r3, [pc, #372]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4ab0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4ab4:	f003 0301 	and.w	r3, r3, #1
    4ab8:	2b00      	cmp	r3, #0
    4aba:	d105      	bne.n	4ac8 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    4abc:	2301      	movs	r3, #1
    4abe:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    4ac2:	2000      	movs	r0, #0
    4ac4:	f7ff fd66 	bl	4594 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    4ac8:	2002      	movs	r0, #2
    4aca:	f7ff fdcf 	bl	466c <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4ace:	4b55      	ldr	r3, [pc, #340]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4ad0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ad4:	4a53      	ldr	r2, [pc, #332]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4ad6:	f023 0301 	bic.w	r3, r3, #1
    4ada:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    4ade:	9b01      	ldr	r3, [sp, #4]
    4ae0:	889b      	ldrh	r3, [r3, #4]
    4ae2:	2b01      	cmp	r3, #1
    4ae4:	f040 8097 	bne.w	4c16 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4ae8:	9b01      	ldr	r3, [sp, #4]
    4aea:	79db      	ldrb	r3, [r3, #7]
    4aec:	4a4d      	ldr	r2, [pc, #308]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4aee:	f003 0303 	and.w	r3, r3, #3
    4af2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4af6:	4b4b      	ldr	r3, [pc, #300]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4af8:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4afc:	9b01      	ldr	r3, [sp, #4]
    4afe:	799b      	ldrb	r3, [r3, #6]
    4b00:	00db      	lsls	r3, r3, #3
    4b02:	f003 0308 	and.w	r3, r3, #8
    4b06:	4313      	orrs	r3, r2
    4b08:	4a46      	ldr	r2, [pc, #280]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b0a:	f043 0301 	orr.w	r3, r3, #1
    4b0e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4b12:	aa03      	add	r2, sp, #12
    4b14:	a904      	add	r1, sp, #16
    4b16:	a805      	add	r0, sp, #20
    4b18:	f24c 3350 	movw	r3, #50000	; 0xc350
    4b1c:	f7fe ff6e 	bl	39fc <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4b20:	4b40      	ldr	r3, [pc, #256]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b26:	0e1b      	lsrs	r3, r3, #24
    4b28:	f003 0301 	and.w	r3, r3, #1
    4b2c:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4b2e:	9a03      	ldr	r2, [sp, #12]
    4b30:	a904      	add	r1, sp, #16
    4b32:	ab05      	add	r3, sp, #20
    4b34:	4618      	mov	r0, r3
    4b36:	f7fe ff7b 	bl	3a30 <Clock_Ip_TimeoutExpired>
    4b3a:	4603      	mov	r3, r0
    4b3c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4b40:	9b06      	ldr	r3, [sp, #24]
    4b42:	2b00      	cmp	r3, #0
    4b44:	d106      	bne.n	4b54 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4b46:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4b4a:	f083 0301 	eor.w	r3, r3, #1
    4b4e:	b2db      	uxtb	r3, r3
    4b50:	2b00      	cmp	r3, #0
    4b52:	d1e5      	bne.n	4b20 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4b54:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d005      	beq.n	4b68 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4b5c:	9b01      	ldr	r3, [sp, #4]
    4b5e:	681b      	ldr	r3, [r3, #0]
    4b60:	4619      	mov	r1, r3
    4b62:	2001      	movs	r0, #1
    4b64:	f7fe ff3a 	bl	39dc <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4b68:	2003      	movs	r0, #3
    4b6a:	f7ff fd7f 	bl	466c <SetInputSouceSytemClock>

                if (SircWasDisabled)
    4b6e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4b72:	2b00      	cmp	r3, #0
    4b74:	d04f      	beq.n	4c16 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    4b76:	2002      	movs	r0, #2
    4b78:	f7ff fd26 	bl	45c8 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    4b7c:	e04b      	b.n	4c16 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4b7e:	4b29      	ldr	r3, [pc, #164]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b80:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b84:	4a27      	ldr	r2, [pc, #156]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b86:	f023 0301 	bic.w	r3, r3, #1
    4b8a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    4b8e:	9b01      	ldr	r3, [sp, #4]
    4b90:	889b      	ldrh	r3, [r3, #4]
    4b92:	2b01      	cmp	r3, #1
    4b94:	d13f      	bne.n	4c16 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4b96:	9b01      	ldr	r3, [sp, #4]
    4b98:	79db      	ldrb	r3, [r3, #7]
    4b9a:	4a22      	ldr	r2, [pc, #136]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b9c:	f003 0303 	and.w	r3, r3, #3
    4ba0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4ba4:	4b1f      	ldr	r3, [pc, #124]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4ba6:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4baa:	9b01      	ldr	r3, [sp, #4]
    4bac:	799b      	ldrb	r3, [r3, #6]
    4bae:	00db      	lsls	r3, r3, #3
    4bb0:	f003 0308 	and.w	r3, r3, #8
    4bb4:	4313      	orrs	r3, r2
    4bb6:	4a1b      	ldr	r2, [pc, #108]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4bb8:	f043 0301 	orr.w	r3, r3, #1
    4bbc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4bc0:	aa03      	add	r2, sp, #12
    4bc2:	a904      	add	r1, sp, #16
    4bc4:	a805      	add	r0, sp, #20
    4bc6:	f24c 3350 	movw	r3, #50000	; 0xc350
    4bca:	f7fe ff17 	bl	39fc <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4bce:	4b15      	ldr	r3, [pc, #84]	; (4c24 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4bd0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4bd4:	0e1b      	lsrs	r3, r3, #24
    4bd6:	f003 0301 	and.w	r3, r3, #1
    4bda:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4bdc:	9a03      	ldr	r2, [sp, #12]
    4bde:	a904      	add	r1, sp, #16
    4be0:	ab05      	add	r3, sp, #20
    4be2:	4618      	mov	r0, r3
    4be4:	f7fe ff24 	bl	3a30 <Clock_Ip_TimeoutExpired>
    4be8:	4603      	mov	r3, r0
    4bea:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4bee:	9b06      	ldr	r3, [sp, #24]
    4bf0:	2b00      	cmp	r3, #0
    4bf2:	d106      	bne.n	4c02 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    4bf4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4bf8:	f083 0301 	eor.w	r3, r3, #1
    4bfc:	b2db      	uxtb	r3, r3
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d1e5      	bne.n	4bce <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    4c02:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d005      	beq.n	4c16 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4c0a:	9b01      	ldr	r3, [sp, #4]
    4c0c:	681b      	ldr	r3, [r3, #0]
    4c0e:	4619      	mov	r1, r3
    4c10:	2001      	movs	r0, #1
    4c12:	f7fe fee3 	bl	39dc <Clock_Ip_ReportClockErrors>
}
    4c16:	bf00      	nop
    4c18:	b00b      	add	sp, #44	; 0x2c
    4c1a:	f85d fb04 	ldr.w	pc, [sp], #4
    4c1e:	bf00      	nop
    4c20:	000190d0 	.word	0x000190d0
    4c24:	40064000 	.word	0x40064000

00004c28 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4c28:	b500      	push	{lr}
    4c2a:	b089      	sub	sp, #36	; 0x24
    4c2c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4c2e:	2300      	movs	r3, #0
    4c30:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4c34:	9b01      	ldr	r3, [sp, #4]
    4c36:	889b      	ldrh	r3, [r3, #4]
    4c38:	2b01      	cmp	r3, #1
    4c3a:	d132      	bne.n	4ca2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4c3c:	4b1b      	ldr	r3, [pc, #108]	; (4cac <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4c3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c42:	4a1a      	ldr	r2, [pc, #104]	; (4cac <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4c44:	f043 0301 	orr.w	r3, r3, #1
    4c48:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4c4c:	aa03      	add	r2, sp, #12
    4c4e:	a904      	add	r1, sp, #16
    4c50:	a805      	add	r0, sp, #20
    4c52:	f24c 3350 	movw	r3, #50000	; 0xc350
    4c56:	f7fe fed1 	bl	39fc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4c5a:	4b14      	ldr	r3, [pc, #80]	; (4cac <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4c5c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c60:	0e1b      	lsrs	r3, r3, #24
    4c62:	f003 0301 	and.w	r3, r3, #1
    4c66:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4c68:	9a03      	ldr	r2, [sp, #12]
    4c6a:	a904      	add	r1, sp, #16
    4c6c:	ab05      	add	r3, sp, #20
    4c6e:	4618      	mov	r0, r3
    4c70:	f7fe fede 	bl	3a30 <Clock_Ip_TimeoutExpired>
    4c74:	4603      	mov	r3, r0
    4c76:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4c7a:	9b06      	ldr	r3, [sp, #24]
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d106      	bne.n	4c8e <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4c80:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c84:	f083 0301 	eor.w	r3, r3, #1
    4c88:	b2db      	uxtb	r3, r3
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	d1e5      	bne.n	4c5a <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    4c8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c92:	2b00      	cmp	r3, #0
    4c94:	d005      	beq.n	4ca2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4c96:	9b01      	ldr	r3, [sp, #4]
    4c98:	681b      	ldr	r3, [r3, #0]
    4c9a:	4619      	mov	r1, r3
    4c9c:	2001      	movs	r0, #1
    4c9e:	f7fe fe9d 	bl	39dc <Clock_Ip_ReportClockErrors>
        }
    }
}
    4ca2:	bf00      	nop
    4ca4:	b009      	add	sp, #36	; 0x24
    4ca6:	f85d fb04 	ldr.w	pc, [sp], #4
    4caa:	bf00      	nop
    4cac:	40064000 	.word	0x40064000

00004cb0 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    4cb0:	b082      	sub	sp, #8
    4cb2:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4cb4:	4b05      	ldr	r3, [pc, #20]	; (4ccc <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4cb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4cba:	4a04      	ldr	r2, [pc, #16]	; (4ccc <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4cbc:	f023 0301 	bic.w	r3, r3, #1
    4cc0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4cc4:	bf00      	nop
    4cc6:	b002      	add	sp, #8
    4cc8:	4770      	bx	lr
    4cca:	bf00      	nop
    4ccc:	40064000 	.word	0x40064000

00004cd0 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4cd0:	b082      	sub	sp, #8
    4cd2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4cd4:	bf00      	nop
    4cd6:	b002      	add	sp, #8
    4cd8:	4770      	bx	lr

00004cda <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4cda:	b082      	sub	sp, #8
    4cdc:	9001      	str	r0, [sp, #4]
    4cde:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4ce0:	bf00      	nop
    4ce2:	b002      	add	sp, #8
    4ce4:	4770      	bx	lr

00004ce6 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4ce6:	b082      	sub	sp, #8
    4ce8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4cea:	bf00      	nop
    4cec:	b002      	add	sp, #8
    4cee:	4770      	bx	lr

00004cf0 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    4cf0:	b082      	sub	sp, #8
    4cf2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4cf4:	bf00      	nop
    4cf6:	b002      	add	sp, #8
    4cf8:	4770      	bx	lr

00004cfa <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4cfa:	b082      	sub	sp, #8
    4cfc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    4cfe:	2302      	movs	r3, #2
}
    4d00:	4618      	mov	r0, r3
    4d02:	b002      	add	sp, #8
    4d04:	4770      	bx	lr

00004d06 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4d06:	b082      	sub	sp, #8
    4d08:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4d0a:	bf00      	nop
    4d0c:	b002      	add	sp, #8
    4d0e:	4770      	bx	lr

00004d10 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4d10:	b500      	push	{lr}
    4d12:	b083      	sub	sp, #12
    4d14:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d16:	9b01      	ldr	r3, [sp, #4]
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d002      	beq.n	4d22 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4d1c:	9801      	ldr	r0, [sp, #4]
    4d1e:	f000 f870 	bl	4e02 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d22:	bf00      	nop
    4d24:	b003      	add	sp, #12
    4d26:	f85d fb04 	ldr.w	pc, [sp], #4

00004d2a <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4d2a:	b500      	push	{lr}
    4d2c:	b083      	sub	sp, #12
    4d2e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d30:	9b01      	ldr	r3, [sp, #4]
    4d32:	2b00      	cmp	r3, #0
    4d34:	d002      	beq.n	4d3c <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4d36:	9801      	ldr	r0, [sp, #4]
    4d38:	f000 f89a 	bl	4e70 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d3c:	bf00      	nop
    4d3e:	b003      	add	sp, #12
    4d40:	f85d fb04 	ldr.w	pc, [sp], #4

00004d44 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4d44:	b500      	push	{lr}
    4d46:	b089      	sub	sp, #36	; 0x24
    4d48:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4d4a:	2301      	movs	r3, #1
    4d4c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    4d4e:	2300      	movs	r3, #0
    4d50:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4d54:	4b1e      	ldr	r3, [pc, #120]	; (4dd0 <Clock_Ip_CompleteSpll+0x8c>)
    4d56:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4d5a:	f003 0301 	and.w	r3, r3, #1
    4d5e:	2b00      	cmp	r3, #0
    4d60:	d02f      	beq.n	4dc2 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4d62:	aa02      	add	r2, sp, #8
    4d64:	a903      	add	r1, sp, #12
    4d66:	a804      	add	r0, sp, #16
    4d68:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d6c:	f7fe fe46 	bl	39fc <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4d70:	4b17      	ldr	r3, [pc, #92]	; (4dd0 <Clock_Ip_CompleteSpll+0x8c>)
    4d72:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4d76:	0e1b      	lsrs	r3, r3, #24
    4d78:	f003 0301 	and.w	r3, r3, #1
    4d7c:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d7e:	9a02      	ldr	r2, [sp, #8]
    4d80:	a903      	add	r1, sp, #12
    4d82:	ab04      	add	r3, sp, #16
    4d84:	4618      	mov	r0, r3
    4d86:	f7fe fe53 	bl	3a30 <Clock_Ip_TimeoutExpired>
    4d8a:	4603      	mov	r3, r0
    4d8c:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4d90:	9b05      	ldr	r3, [sp, #20]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d106      	bne.n	4da4 <Clock_Ip_CompleteSpll+0x60>
    4d96:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4d9a:	f083 0301 	eor.w	r3, r3, #1
    4d9e:	b2db      	uxtb	r3, r3
    4da0:	2b00      	cmp	r3, #0
    4da2:	d1e5      	bne.n	4d70 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4da4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4da8:	f083 0301 	eor.w	r3, r3, #1
    4dac:	b2db      	uxtb	r3, r3
    4dae:	2b00      	cmp	r3, #0
    4db0:	d002      	beq.n	4db8 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    4db2:	2302      	movs	r3, #2
    4db4:	9307      	str	r3, [sp, #28]
    4db6:	e006      	b.n	4dc6 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4db8:	9901      	ldr	r1, [sp, #4]
    4dba:	2001      	movs	r0, #1
    4dbc:	f7fe fe0e 	bl	39dc <Clock_Ip_ReportClockErrors>
    4dc0:	e001      	b.n	4dc6 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    4dc2:	2300      	movs	r3, #0
    4dc4:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4dc6:	9b07      	ldr	r3, [sp, #28]
}
    4dc8:	4618      	mov	r0, r3
    4dca:	b009      	add	sp, #36	; 0x24
    4dcc:	f85d fb04 	ldr.w	pc, [sp], #4
    4dd0:	40064000 	.word	0x40064000

00004dd4 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4dd4:	b500      	push	{lr}
    4dd6:	b083      	sub	sp, #12
    4dd8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4dda:	9801      	ldr	r0, [sp, #4]
    4ddc:	f000 f886 	bl	4eec <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4de0:	bf00      	nop
    4de2:	b003      	add	sp, #12
    4de4:	f85d fb04 	ldr.w	pc, [sp], #4

00004de8 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4de8:	b500      	push	{lr}
    4dea:	b083      	sub	sp, #12
    4dec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4dee:	9b01      	ldr	r3, [sp, #4]
    4df0:	2b00      	cmp	r3, #0
    4df2:	d002      	beq.n	4dfa <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4df4:	9801      	ldr	r0, [sp, #4]
    4df6:	f000 f891 	bl	4f1c <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4dfa:	bf00      	nop
    4dfc:	b003      	add	sp, #12
    4dfe:	f85d fb04 	ldr.w	pc, [sp], #4

00004e02 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4e02:	b082      	sub	sp, #8
    4e04:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4e06:	4b19      	ldr	r3, [pc, #100]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e08:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4e0c:	4a17      	ldr	r2, [pc, #92]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4e12:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4e16:	4b15      	ldr	r3, [pc, #84]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e18:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4e1c:	4a13      	ldr	r2, [pc, #76]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4e22:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4e26:	4b11      	ldr	r3, [pc, #68]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e28:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4e2c:	4a0f      	ldr	r2, [pc, #60]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e2e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4e32:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4e36:	4b0d      	ldr	r3, [pc, #52]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e38:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4e3c:	4a0b      	ldr	r2, [pc, #44]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e3e:	f023 0301 	bic.w	r3, r3, #1
    4e42:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4e46:	4b09      	ldr	r3, [pc, #36]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e48:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4e4c:	4a07      	ldr	r2, [pc, #28]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4e52:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4e56:	4b05      	ldr	r3, [pc, #20]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e58:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4e5c:	4a03      	ldr	r2, [pc, #12]	; (4e6c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4e5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4e62:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4e66:	bf00      	nop
    4e68:	b002      	add	sp, #8
    4e6a:	4770      	bx	lr
    4e6c:	40064000 	.word	0x40064000

00004e70 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4e70:	b082      	sub	sp, #8
    4e72:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4e74:	9b01      	ldr	r3, [sp, #4]
    4e76:	889b      	ldrh	r3, [r3, #4]
    4e78:	2b01      	cmp	r3, #1
    4e7a:	d12f      	bne.n	4edc <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4e7c:	4b1a      	ldr	r3, [pc, #104]	; (4ee8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4e7e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4e82:	9b01      	ldr	r3, [sp, #4]
    4e84:	7b5b      	ldrb	r3, [r3, #13]
    4e86:	3b01      	subs	r3, #1
    4e88:	021b      	lsls	r3, r3, #8
    4e8a:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4e8e:	9b01      	ldr	r3, [sp, #4]
    4e90:	7d1b      	ldrb	r3, [r3, #20]
    4e92:	3b10      	subs	r3, #16
    4e94:	041b      	lsls	r3, r3, #16
    4e96:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4e9a:	430b      	orrs	r3, r1
    4e9c:	4912      	ldr	r1, [pc, #72]	; (4ee8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4e9e:	4313      	orrs	r3, r2
    4ea0:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4ea4:	9b01      	ldr	r3, [sp, #4]
    4ea6:	7fdb      	ldrb	r3, [r3, #31]
    4ea8:	2b02      	cmp	r3, #2
    4eaa:	d011      	beq.n	4ed0 <Clock_Ip_SetSpll_TrustedCall+0x60>
    4eac:	2b02      	cmp	r3, #2
    4eae:	dc17      	bgt.n	4ee0 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	d002      	beq.n	4eba <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4eb4:	2b01      	cmp	r3, #1
    4eb6:	d005      	beq.n	4ec4 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4eb8:	e012      	b.n	4ee0 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4eba:	4b0b      	ldr	r3, [pc, #44]	; (4ee8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4ebc:	2200      	movs	r2, #0
    4ebe:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4ec2:	e00e      	b.n	4ee2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4ec4:	4b08      	ldr	r3, [pc, #32]	; (4ee8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4ec6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4eca:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4ece:	e008      	b.n	4ee2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4ed0:	4b05      	ldr	r3, [pc, #20]	; (4ee8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4ed2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4ed6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4eda:	e002      	b.n	4ee2 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4edc:	bf00      	nop
    4ede:	e000      	b.n	4ee2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4ee0:	bf00      	nop
}
    4ee2:	bf00      	nop
    4ee4:	b002      	add	sp, #8
    4ee6:	4770      	bx	lr
    4ee8:	40064000 	.word	0x40064000

00004eec <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4eec:	b082      	sub	sp, #8
    4eee:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4ef0:	4b09      	ldr	r3, [pc, #36]	; (4f18 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4ef2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4ef6:	4a08      	ldr	r2, [pc, #32]	; (4f18 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4ef8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4efc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4f00:	4b05      	ldr	r3, [pc, #20]	; (4f18 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4f02:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4f06:	4a04      	ldr	r2, [pc, #16]	; (4f18 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4f08:	f023 0301 	bic.w	r3, r3, #1
    4f0c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4f10:	bf00      	nop
    4f12:	b002      	add	sp, #8
    4f14:	4770      	bx	lr
    4f16:	bf00      	nop
    4f18:	40064000 	.word	0x40064000

00004f1c <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4f1c:	b082      	sub	sp, #8
    4f1e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4f20:	9b01      	ldr	r3, [sp, #4]
    4f22:	889b      	ldrh	r3, [r3, #4]
    4f24:	2b01      	cmp	r3, #1
    4f26:	d107      	bne.n	4f38 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4f28:	4b05      	ldr	r3, [pc, #20]	; (4f40 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4f2a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4f2e:	4a04      	ldr	r2, [pc, #16]	; (4f40 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4f30:	f043 0301 	orr.w	r3, r3, #1
    4f34:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4f38:	bf00      	nop
    4f3a:	b002      	add	sp, #8
    4f3c:	4770      	bx	lr
    4f3e:	bf00      	nop
    4f40:	40064000 	.word	0x40064000

00004f44 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4f44:	b082      	sub	sp, #8
    4f46:	9001      	str	r0, [sp, #4]
    4f48:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4f4a:	bf00      	nop
    4f4c:	b002      	add	sp, #8
    4f4e:	4770      	bx	lr

00004f50 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4f50:	b082      	sub	sp, #8
    4f52:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4f54:	bf00      	nop
    4f56:	b002      	add	sp, #8
    4f58:	4770      	bx	lr

00004f5a <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4f5a:	b500      	push	{lr}
    4f5c:	b083      	sub	sp, #12
    4f5e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f60:	9b01      	ldr	r3, [sp, #4]
    4f62:	2b00      	cmp	r3, #0
    4f64:	d002      	beq.n	4f6c <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4f66:	9801      	ldr	r0, [sp, #4]
    4f68:	f000 f8ee 	bl	5148 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f6c:	bf00      	nop
    4f6e:	b003      	add	sp, #12
    4f70:	f85d fb04 	ldr.w	pc, [sp], #4

00004f74 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4f74:	b500      	push	{lr}
    4f76:	b083      	sub	sp, #12
    4f78:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f7a:	9b01      	ldr	r3, [sp, #4]
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	d002      	beq.n	4f86 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4f80:	9801      	ldr	r0, [sp, #4]
    4f82:	f000 f8ff 	bl	5184 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f86:	bf00      	nop
    4f88:	b003      	add	sp, #12
    4f8a:	f85d fb04 	ldr.w	pc, [sp], #4

00004f8e <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4f8e:	b500      	push	{lr}
    4f90:	b083      	sub	sp, #12
    4f92:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f94:	9b01      	ldr	r3, [sp, #4]
    4f96:	2b00      	cmp	r3, #0
    4f98:	d002      	beq.n	4fa0 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4f9a:	9801      	ldr	r0, [sp, #4]
    4f9c:	f000 f912 	bl	51c4 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4fa0:	bf00      	nop
    4fa2:	b003      	add	sp, #12
    4fa4:	f85d fb04 	ldr.w	pc, [sp], #4

00004fa8 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4fa8:	b500      	push	{lr}
    4faa:	b083      	sub	sp, #12
    4fac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4fae:	9b01      	ldr	r3, [sp, #4]
    4fb0:	2b00      	cmp	r3, #0
    4fb2:	d002      	beq.n	4fba <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4fb4:	9801      	ldr	r0, [sp, #4]
    4fb6:	f000 f925 	bl	5204 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4fba:	bf00      	nop
    4fbc:	b003      	add	sp, #12
    4fbe:	f85d fb04 	ldr.w	pc, [sp], #4

00004fc2 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4fc2:	b500      	push	{lr}
    4fc4:	b083      	sub	sp, #12
    4fc6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4fc8:	9b01      	ldr	r3, [sp, #4]
    4fca:	2b00      	cmp	r3, #0
    4fcc:	d002      	beq.n	4fd4 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4fce:	9801      	ldr	r0, [sp, #4]
    4fd0:	f000 f936 	bl	5240 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4fd4:	bf00      	nop
    4fd6:	b003      	add	sp, #12
    4fd8:	f85d fb04 	ldr.w	pc, [sp], #4

00004fdc <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4fdc:	b500      	push	{lr}
    4fde:	b083      	sub	sp, #12
    4fe0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4fe2:	9b01      	ldr	r3, [sp, #4]
    4fe4:	2b00      	cmp	r3, #0
    4fe6:	d002      	beq.n	4fee <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4fe8:	9801      	ldr	r0, [sp, #4]
    4fea:	f000 f949 	bl	5280 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4fee:	bf00      	nop
    4ff0:	b003      	add	sp, #12
    4ff2:	f85d fb04 	ldr.w	pc, [sp], #4

00004ff6 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4ff6:	b500      	push	{lr}
    4ff8:	b083      	sub	sp, #12
    4ffa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ffc:	9b01      	ldr	r3, [sp, #4]
    4ffe:	2b00      	cmp	r3, #0
    5000:	d002      	beq.n	5008 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    5002:	9801      	ldr	r0, [sp, #4]
    5004:	f000 f958 	bl	52b8 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5008:	bf00      	nop
    500a:	b003      	add	sp, #12
    500c:	f85d fb04 	ldr.w	pc, [sp], #4

00005010 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    5010:	b500      	push	{lr}
    5012:	b083      	sub	sp, #12
    5014:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5016:	9b01      	ldr	r3, [sp, #4]
    5018:	2b00      	cmp	r3, #0
    501a:	d002      	beq.n	5022 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    501c:	9801      	ldr	r0, [sp, #4]
    501e:	f000 f969 	bl	52f4 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5022:	bf00      	nop
    5024:	b003      	add	sp, #12
    5026:	f85d fb04 	ldr.w	pc, [sp], #4

0000502a <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    502a:	b500      	push	{lr}
    502c:	b083      	sub	sp, #12
    502e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5030:	9b01      	ldr	r3, [sp, #4]
    5032:	2b00      	cmp	r3, #0
    5034:	d002      	beq.n	503c <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    5036:	9801      	ldr	r0, [sp, #4]
    5038:	f000 f978 	bl	532c <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    503c:	bf00      	nop
    503e:	b003      	add	sp, #12
    5040:	f85d fb04 	ldr.w	pc, [sp], #4

00005044 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    5044:	b500      	push	{lr}
    5046:	b083      	sub	sp, #12
    5048:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    504a:	9b01      	ldr	r3, [sp, #4]
    504c:	2b00      	cmp	r3, #0
    504e:	d002      	beq.n	5056 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    5050:	9801      	ldr	r0, [sp, #4]
    5052:	f000 f989 	bl	5368 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5056:	bf00      	nop
    5058:	b003      	add	sp, #12
    505a:	f85d fb04 	ldr.w	pc, [sp], #4

0000505e <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    505e:	b500      	push	{lr}
    5060:	b083      	sub	sp, #12
    5062:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5064:	9b01      	ldr	r3, [sp, #4]
    5066:	2b00      	cmp	r3, #0
    5068:	d002      	beq.n	5070 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    506a:	9801      	ldr	r0, [sp, #4]
    506c:	f000 f998 	bl	53a0 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5070:	bf00      	nop
    5072:	b003      	add	sp, #12
    5074:	f85d fb04 	ldr.w	pc, [sp], #4

00005078 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    5078:	b500      	push	{lr}
    507a:	b083      	sub	sp, #12
    507c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    507e:	9b01      	ldr	r3, [sp, #4]
    5080:	2b00      	cmp	r3, #0
    5082:	d002      	beq.n	508a <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    5084:	9801      	ldr	r0, [sp, #4]
    5086:	f000 f9a9 	bl	53dc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    508a:	bf00      	nop
    508c:	b003      	add	sp, #12
    508e:	f85d fb04 	ldr.w	pc, [sp], #4

00005092 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    5092:	b500      	push	{lr}
    5094:	b083      	sub	sp, #12
    5096:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5098:	9b01      	ldr	r3, [sp, #4]
    509a:	2b00      	cmp	r3, #0
    509c:	d002      	beq.n	50a4 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    509e:	9801      	ldr	r0, [sp, #4]
    50a0:	f000 f9e6 	bl	5470 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    50a4:	bf00      	nop
    50a6:	b003      	add	sp, #12
    50a8:	f85d fb04 	ldr.w	pc, [sp], #4

000050ac <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    50ac:	b500      	push	{lr}
    50ae:	b083      	sub	sp, #12
    50b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    50b2:	9b01      	ldr	r3, [sp, #4]
    50b4:	2b00      	cmp	r3, #0
    50b6:	d002      	beq.n	50be <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    50b8:	9801      	ldr	r0, [sp, #4]
    50ba:	f000 fa25 	bl	5508 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    50be:	bf00      	nop
    50c0:	b003      	add	sp, #12
    50c2:	f85d fb04 	ldr.w	pc, [sp], #4

000050c6 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    50c6:	b500      	push	{lr}
    50c8:	b083      	sub	sp, #12
    50ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    50cc:	9b01      	ldr	r3, [sp, #4]
    50ce:	2b00      	cmp	r3, #0
    50d0:	d002      	beq.n	50d8 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    50d2:	9801      	ldr	r0, [sp, #4]
    50d4:	f000 fa2a 	bl	552c <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    50d8:	bf00      	nop
    50da:	b003      	add	sp, #12
    50dc:	f85d fb04 	ldr.w	pc, [sp], #4

000050e0 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    50e0:	b500      	push	{lr}
    50e2:	b083      	sub	sp, #12
    50e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    50e6:	9b01      	ldr	r3, [sp, #4]
    50e8:	2b00      	cmp	r3, #0
    50ea:	d002      	beq.n	50f2 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    50ec:	9801      	ldr	r0, [sp, #4]
    50ee:	f000 fa3b 	bl	5568 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    50f2:	bf00      	nop
    50f4:	b003      	add	sp, #12
    50f6:	f85d fb04 	ldr.w	pc, [sp], #4

000050fa <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    50fa:	b500      	push	{lr}
    50fc:	b083      	sub	sp, #12
    50fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5100:	9b01      	ldr	r3, [sp, #4]
    5102:	2b00      	cmp	r3, #0
    5104:	d002      	beq.n	510c <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    5106:	9801      	ldr	r0, [sp, #4]
    5108:	f000 fa56 	bl	55b8 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    510c:	bf00      	nop
    510e:	b003      	add	sp, #12
    5110:	f85d fb04 	ldr.w	pc, [sp], #4

00005114 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    5114:	b500      	push	{lr}
    5116:	b083      	sub	sp, #12
    5118:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    511a:	9b01      	ldr	r3, [sp, #4]
    511c:	2b00      	cmp	r3, #0
    511e:	d002      	beq.n	5126 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    5120:	9801      	ldr	r0, [sp, #4]
    5122:	f000 fa79 	bl	5618 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5126:	bf00      	nop
    5128:	b003      	add	sp, #12
    512a:	f85d fb04 	ldr.w	pc, [sp], #4

0000512e <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    512e:	b500      	push	{lr}
    5130:	b083      	sub	sp, #12
    5132:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5134:	9b01      	ldr	r3, [sp, #4]
    5136:	2b00      	cmp	r3, #0
    5138:	d002      	beq.n	5140 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    513a:	9801      	ldr	r0, [sp, #4]
    513c:	f000 fa8a 	bl	5654 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5140:	bf00      	nop
    5142:	b003      	add	sp, #12
    5144:	f85d fb04 	ldr.w	pc, [sp], #4

00005148 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5148:	b084      	sub	sp, #16
    514a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    514c:	4b0b      	ldr	r3, [pc, #44]	; (517c <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    514e:	795b      	ldrb	r3, [r3, #5]
    5150:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    5152:	4b0b      	ldr	r3, [pc, #44]	; (5180 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    5154:	695b      	ldr	r3, [r3, #20]
    5156:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    5158:	9b02      	ldr	r3, [sp, #8]
    515a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    515e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    5160:	9b03      	ldr	r3, [sp, #12]
    5162:	061b      	lsls	r3, r3, #24
    5164:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5168:	9a02      	ldr	r2, [sp, #8]
    516a:	4313      	orrs	r3, r2
    516c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    516e:	4a04      	ldr	r2, [pc, #16]	; (5180 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    5170:	9b02      	ldr	r3, [sp, #8]
    5172:	6153      	str	r3, [r2, #20]
}
    5174:	bf00      	nop
    5176:	b004      	add	sp, #16
    5178:	4770      	bx	lr
    517a:	bf00      	nop
    517c:	00019438 	.word	0x00019438
    5180:	40064000 	.word	0x40064000

00005184 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5184:	b084      	sub	sp, #16
    5186:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5188:	9b01      	ldr	r3, [sp, #4]
    518a:	685b      	ldr	r3, [r3, #4]
    518c:	4a0b      	ldr	r2, [pc, #44]	; (51bc <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    518e:	5cd3      	ldrb	r3, [r2, r3]
    5190:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    5192:	4b0b      	ldr	r3, [pc, #44]	; (51c0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    5194:	695b      	ldr	r3, [r3, #20]
    5196:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    5198:	9b02      	ldr	r3, [sp, #8]
    519a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    519e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    51a0:	9b03      	ldr	r3, [sp, #12]
    51a2:	061b      	lsls	r3, r3, #24
    51a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    51a8:	9a02      	ldr	r2, [sp, #8]
    51aa:	4313      	orrs	r3, r2
    51ac:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    51ae:	4a04      	ldr	r2, [pc, #16]	; (51c0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    51b0:	9b02      	ldr	r3, [sp, #8]
    51b2:	6153      	str	r3, [r2, #20]
}
    51b4:	bf00      	nop
    51b6:	b004      	add	sp, #16
    51b8:	4770      	bx	lr
    51ba:	bf00      	nop
    51bc:	00019438 	.word	0x00019438
    51c0:	40064000 	.word	0x40064000

000051c4 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    51c4:	b084      	sub	sp, #16
    51c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    51c8:	9b01      	ldr	r3, [sp, #4]
    51ca:	685b      	ldr	r3, [r3, #4]
    51cc:	4a0b      	ldr	r2, [pc, #44]	; (51fc <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    51ce:	5cd3      	ldrb	r3, [r2, r3]
    51d0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    51d2:	4b0b      	ldr	r3, [pc, #44]	; (5200 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    51d4:	699b      	ldr	r3, [r3, #24]
    51d6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    51d8:	9b02      	ldr	r3, [sp, #8]
    51da:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    51de:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    51e0:	9b03      	ldr	r3, [sp, #12]
    51e2:	061b      	lsls	r3, r3, #24
    51e4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    51e8:	9a02      	ldr	r2, [sp, #8]
    51ea:	4313      	orrs	r3, r2
    51ec:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    51ee:	4a04      	ldr	r2, [pc, #16]	; (5200 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    51f0:	9b02      	ldr	r3, [sp, #8]
    51f2:	6193      	str	r3, [r2, #24]
}
    51f4:	bf00      	nop
    51f6:	b004      	add	sp, #16
    51f8:	4770      	bx	lr
    51fa:	bf00      	nop
    51fc:	00019438 	.word	0x00019438
    5200:	40064000 	.word	0x40064000

00005204 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5204:	b084      	sub	sp, #16
    5206:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5208:	4b0b      	ldr	r3, [pc, #44]	; (5238 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    520a:	795b      	ldrb	r3, [r3, #5]
    520c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    520e:	4b0b      	ldr	r3, [pc, #44]	; (523c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    5210:	69db      	ldr	r3, [r3, #28]
    5212:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    5214:	9b02      	ldr	r3, [sp, #8]
    5216:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    521a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    521c:	9b03      	ldr	r3, [sp, #12]
    521e:	061b      	lsls	r3, r3, #24
    5220:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5224:	9a02      	ldr	r2, [sp, #8]
    5226:	4313      	orrs	r3, r2
    5228:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    522a:	4a04      	ldr	r2, [pc, #16]	; (523c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    522c:	9b02      	ldr	r3, [sp, #8]
    522e:	61d3      	str	r3, [r2, #28]
}
    5230:	bf00      	nop
    5232:	b004      	add	sp, #16
    5234:	4770      	bx	lr
    5236:	bf00      	nop
    5238:	00019438 	.word	0x00019438
    523c:	40064000 	.word	0x40064000

00005240 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5240:	b084      	sub	sp, #16
    5242:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5244:	9b01      	ldr	r3, [sp, #4]
    5246:	685b      	ldr	r3, [r3, #4]
    5248:	4a0b      	ldr	r2, [pc, #44]	; (5278 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    524a:	5cd3      	ldrb	r3, [r2, r3]
    524c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    524e:	4b0b      	ldr	r3, [pc, #44]	; (527c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    5250:	69db      	ldr	r3, [r3, #28]
    5252:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    5254:	9b02      	ldr	r3, [sp, #8]
    5256:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    525a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    525c:	9b03      	ldr	r3, [sp, #12]
    525e:	061b      	lsls	r3, r3, #24
    5260:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5264:	9a02      	ldr	r2, [sp, #8]
    5266:	4313      	orrs	r3, r2
    5268:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    526a:	4a04      	ldr	r2, [pc, #16]	; (527c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    526c:	9b02      	ldr	r3, [sp, #8]
    526e:	61d3      	str	r3, [r2, #28]
}
    5270:	bf00      	nop
    5272:	b004      	add	sp, #16
    5274:	4770      	bx	lr
    5276:	bf00      	nop
    5278:	00019438 	.word	0x00019438
    527c:	40064000 	.word	0x40064000

00005280 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5280:	b084      	sub	sp, #16
    5282:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5284:	4b0a      	ldr	r3, [pc, #40]	; (52b0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    5286:	7b9b      	ldrb	r3, [r3, #14]
    5288:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    528a:	4b0a      	ldr	r3, [pc, #40]	; (52b4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    528c:	691b      	ldr	r3, [r3, #16]
    528e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    5290:	9b02      	ldr	r3, [sp, #8]
    5292:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    5296:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5298:	9b03      	ldr	r3, [sp, #12]
    529a:	011b      	lsls	r3, r3, #4
    529c:	9a02      	ldr	r2, [sp, #8]
    529e:	4313      	orrs	r3, r2
    52a0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    52a2:	4a04      	ldr	r2, [pc, #16]	; (52b4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    52a4:	9b02      	ldr	r3, [sp, #8]
    52a6:	6113      	str	r3, [r2, #16]
}
    52a8:	bf00      	nop
    52aa:	b004      	add	sp, #16
    52ac:	4770      	bx	lr
    52ae:	bf00      	nop
    52b0:	000193e0 	.word	0x000193e0
    52b4:	40048000 	.word	0x40048000

000052b8 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    52b8:	b084      	sub	sp, #16
    52ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    52bc:	9b01      	ldr	r3, [sp, #4]
    52be:	685b      	ldr	r3, [r3, #4]
    52c0:	4a0a      	ldr	r2, [pc, #40]	; (52ec <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    52c2:	5cd3      	ldrb	r3, [r2, r3]
    52c4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    52c6:	4b0a      	ldr	r3, [pc, #40]	; (52f0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    52c8:	691b      	ldr	r3, [r3, #16]
    52ca:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    52cc:	9b02      	ldr	r3, [sp, #8]
    52ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    52d2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    52d4:	9b03      	ldr	r3, [sp, #12]
    52d6:	011b      	lsls	r3, r3, #4
    52d8:	9a02      	ldr	r2, [sp, #8]
    52da:	4313      	orrs	r3, r2
    52dc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    52de:	4a04      	ldr	r2, [pc, #16]	; (52f0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    52e0:	9b02      	ldr	r3, [sp, #8]
    52e2:	6113      	str	r3, [r2, #16]
}
    52e4:	bf00      	nop
    52e6:	b004      	add	sp, #16
    52e8:	4770      	bx	lr
    52ea:	bf00      	nop
    52ec:	000193e0 	.word	0x000193e0
    52f0:	40048000 	.word	0x40048000

000052f4 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    52f4:	b084      	sub	sp, #16
    52f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    52f8:	4b0a      	ldr	r3, [pc, #40]	; (5324 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    52fa:	785b      	ldrb	r3, [r3, #1]
    52fc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    52fe:	4b0a      	ldr	r3, [pc, #40]	; (5328 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    5300:	691b      	ldr	r3, [r3, #16]
    5302:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    5304:	9b02      	ldr	r3, [sp, #8]
    5306:	f023 030c 	bic.w	r3, r3, #12
    530a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    530c:	9b03      	ldr	r3, [sp, #12]
    530e:	009b      	lsls	r3, r3, #2
    5310:	9a02      	ldr	r2, [sp, #8]
    5312:	4313      	orrs	r3, r2
    5314:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    5316:	4a04      	ldr	r2, [pc, #16]	; (5328 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    5318:	9b02      	ldr	r3, [sp, #8]
    531a:	6113      	str	r3, [r2, #16]
}
    531c:	bf00      	nop
    531e:	b004      	add	sp, #16
    5320:	4770      	bx	lr
    5322:	bf00      	nop
    5324:	00019498 	.word	0x00019498
    5328:	40048000 	.word	0x40048000

0000532c <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    532c:	b084      	sub	sp, #16
    532e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5330:	9b01      	ldr	r3, [sp, #4]
    5332:	685b      	ldr	r3, [r3, #4]
    5334:	4a0a      	ldr	r2, [pc, #40]	; (5360 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    5336:	5cd3      	ldrb	r3, [r2, r3]
    5338:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    533a:	4b0a      	ldr	r3, [pc, #40]	; (5364 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    533c:	691b      	ldr	r3, [r3, #16]
    533e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    5340:	9b02      	ldr	r3, [sp, #8]
    5342:	f023 030c 	bic.w	r3, r3, #12
    5346:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5348:	9b03      	ldr	r3, [sp, #12]
    534a:	009b      	lsls	r3, r3, #2
    534c:	9a02      	ldr	r2, [sp, #8]
    534e:	4313      	orrs	r3, r2
    5350:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    5352:	4a04      	ldr	r2, [pc, #16]	; (5364 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    5354:	9b02      	ldr	r3, [sp, #8]
    5356:	6113      	str	r3, [r2, #16]
}
    5358:	bf00      	nop
    535a:	b004      	add	sp, #16
    535c:	4770      	bx	lr
    535e:	bf00      	nop
    5360:	00019498 	.word	0x00019498
    5364:	40048000 	.word	0x40048000

00005368 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5368:	b084      	sub	sp, #16
    536a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    536c:	4b0a      	ldr	r3, [pc, #40]	; (5398 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    536e:	795b      	ldrb	r3, [r3, #5]
    5370:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    5372:	4b0a      	ldr	r3, [pc, #40]	; (539c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    5374:	6a1b      	ldr	r3, [r3, #32]
    5376:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    5378:	9b02      	ldr	r3, [sp, #8]
    537a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    537e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    5380:	9b03      	ldr	r3, [sp, #12]
    5382:	061b      	lsls	r3, r3, #24
    5384:	9a02      	ldr	r2, [sp, #8]
    5386:	4313      	orrs	r3, r2
    5388:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    538a:	4a04      	ldr	r2, [pc, #16]	; (539c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    538c:	9b02      	ldr	r3, [sp, #8]
    538e:	6213      	str	r3, [r2, #32]
}
    5390:	bf00      	nop
    5392:	b004      	add	sp, #16
    5394:	4770      	bx	lr
    5396:	bf00      	nop
    5398:	00019438 	.word	0x00019438
    539c:	40064000 	.word	0x40064000

000053a0 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53a0:	b084      	sub	sp, #16
    53a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53a4:	9b01      	ldr	r3, [sp, #4]
    53a6:	685b      	ldr	r3, [r3, #4]
    53a8:	4a0a      	ldr	r2, [pc, #40]	; (53d4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    53aa:	5cd3      	ldrb	r3, [r2, r3]
    53ac:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    53ae:	4b0a      	ldr	r3, [pc, #40]	; (53d8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    53b0:	6a1b      	ldr	r3, [r3, #32]
    53b2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    53b4:	9b02      	ldr	r3, [sp, #8]
    53b6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    53ba:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    53bc:	9b03      	ldr	r3, [sp, #12]
    53be:	061b      	lsls	r3, r3, #24
    53c0:	9a02      	ldr	r2, [sp, #8]
    53c2:	4313      	orrs	r3, r2
    53c4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    53c6:	4a04      	ldr	r2, [pc, #16]	; (53d8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    53c8:	9b02      	ldr	r3, [sp, #8]
    53ca:	6213      	str	r3, [r2, #32]
}
    53cc:	bf00      	nop
    53ce:	b004      	add	sp, #16
    53d0:	4770      	bx	lr
    53d2:	bf00      	nop
    53d4:	00019438 	.word	0x00019438
    53d8:	40064000 	.word	0x40064000

000053dc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53dc:	b086      	sub	sp, #24
    53de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53e0:	4b20      	ldr	r3, [pc, #128]	; (5464 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    53e2:	795b      	ldrb	r3, [r3, #5]
    53e4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    53e6:	9b01      	ldr	r3, [sp, #4]
    53e8:	681a      	ldr	r2, [r3, #0]
    53ea:	491f      	ldr	r1, [pc, #124]	; (5468 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    53ec:	4613      	mov	r3, r2
    53ee:	00db      	lsls	r3, r3, #3
    53f0:	4413      	add	r3, r2
    53f2:	440b      	add	r3, r1
    53f4:	781b      	ldrb	r3, [r3, #0]
    53f6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    53f8:	4b1c      	ldr	r3, [pc, #112]	; (546c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    53fa:	68db      	ldr	r3, [r3, #12]
    53fc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    53fe:	9b03      	ldr	r3, [sp, #12]
    5400:	2b03      	cmp	r3, #3
    5402:	d813      	bhi.n	542c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    5404:	9b03      	ldr	r3, [sp, #12]
    5406:	005b      	lsls	r3, r3, #1
    5408:	3318      	adds	r3, #24
    540a:	2203      	movs	r2, #3
    540c:	fa02 f303 	lsl.w	r3, r2, r3
    5410:	43db      	mvns	r3, r3
    5412:	9a05      	ldr	r2, [sp, #20]
    5414:	4013      	ands	r3, r2
    5416:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    5418:	9b03      	ldr	r3, [sp, #12]
    541a:	005b      	lsls	r3, r3, #1
    541c:	3318      	adds	r3, #24
    541e:	9a04      	ldr	r2, [sp, #16]
    5420:	fa02 f303 	lsl.w	r3, r2, r3
    5424:	9a05      	ldr	r2, [sp, #20]
    5426:	4313      	orrs	r3, r2
    5428:	9305      	str	r3, [sp, #20]
    542a:	e014      	b.n	5456 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    542c:	9b03      	ldr	r3, [sp, #12]
    542e:	3b04      	subs	r3, #4
    5430:	005b      	lsls	r3, r3, #1
    5432:	3310      	adds	r3, #16
    5434:	2203      	movs	r2, #3
    5436:	fa02 f303 	lsl.w	r3, r2, r3
    543a:	43db      	mvns	r3, r3
    543c:	9a05      	ldr	r2, [sp, #20]
    543e:	4013      	ands	r3, r2
    5440:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    5442:	9b03      	ldr	r3, [sp, #12]
    5444:	3b04      	subs	r3, #4
    5446:	005b      	lsls	r3, r3, #1
    5448:	3310      	adds	r3, #16
    544a:	9a04      	ldr	r2, [sp, #16]
    544c:	fa02 f303 	lsl.w	r3, r2, r3
    5450:	9a05      	ldr	r2, [sp, #20]
    5452:	4313      	orrs	r3, r2
    5454:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    5456:	4a05      	ldr	r2, [pc, #20]	; (546c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    5458:	9b05      	ldr	r3, [sp, #20]
    545a:	60d3      	str	r3, [r2, #12]
}
    545c:	bf00      	nop
    545e:	b006      	add	sp, #24
    5460:	4770      	bx	lr
    5462:	bf00      	nop
    5464:	000193e0 	.word	0x000193e0
    5468:	000190d0 	.word	0x000190d0
    546c:	40048000 	.word	0x40048000

00005470 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5470:	b086      	sub	sp, #24
    5472:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5474:	9b01      	ldr	r3, [sp, #4]
    5476:	685b      	ldr	r3, [r3, #4]
    5478:	4a20      	ldr	r2, [pc, #128]	; (54fc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    547a:	5cd3      	ldrb	r3, [r2, r3]
    547c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    547e:	9b01      	ldr	r3, [sp, #4]
    5480:	681a      	ldr	r2, [r3, #0]
    5482:	491f      	ldr	r1, [pc, #124]	; (5500 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    5484:	4613      	mov	r3, r2
    5486:	00db      	lsls	r3, r3, #3
    5488:	4413      	add	r3, r2
    548a:	440b      	add	r3, r1
    548c:	781b      	ldrb	r3, [r3, #0]
    548e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    5490:	4b1c      	ldr	r3, [pc, #112]	; (5504 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    5492:	68db      	ldr	r3, [r3, #12]
    5494:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    5496:	9b03      	ldr	r3, [sp, #12]
    5498:	2b03      	cmp	r3, #3
    549a:	d813      	bhi.n	54c4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    549c:	9b03      	ldr	r3, [sp, #12]
    549e:	005b      	lsls	r3, r3, #1
    54a0:	3318      	adds	r3, #24
    54a2:	2203      	movs	r2, #3
    54a4:	fa02 f303 	lsl.w	r3, r2, r3
    54a8:	43db      	mvns	r3, r3
    54aa:	9a05      	ldr	r2, [sp, #20]
    54ac:	4013      	ands	r3, r2
    54ae:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    54b0:	9b03      	ldr	r3, [sp, #12]
    54b2:	005b      	lsls	r3, r3, #1
    54b4:	3318      	adds	r3, #24
    54b6:	9a04      	ldr	r2, [sp, #16]
    54b8:	fa02 f303 	lsl.w	r3, r2, r3
    54bc:	9a05      	ldr	r2, [sp, #20]
    54be:	4313      	orrs	r3, r2
    54c0:	9305      	str	r3, [sp, #20]
    54c2:	e014      	b.n	54ee <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    54c4:	9b03      	ldr	r3, [sp, #12]
    54c6:	3b04      	subs	r3, #4
    54c8:	005b      	lsls	r3, r3, #1
    54ca:	3310      	adds	r3, #16
    54cc:	2203      	movs	r2, #3
    54ce:	fa02 f303 	lsl.w	r3, r2, r3
    54d2:	43db      	mvns	r3, r3
    54d4:	9a05      	ldr	r2, [sp, #20]
    54d6:	4013      	ands	r3, r2
    54d8:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    54da:	9b03      	ldr	r3, [sp, #12]
    54dc:	3b04      	subs	r3, #4
    54de:	005b      	lsls	r3, r3, #1
    54e0:	3310      	adds	r3, #16
    54e2:	9a04      	ldr	r2, [sp, #16]
    54e4:	fa02 f303 	lsl.w	r3, r2, r3
    54e8:	9a05      	ldr	r2, [sp, #20]
    54ea:	4313      	orrs	r3, r2
    54ec:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    54ee:	4a05      	ldr	r2, [pc, #20]	; (5504 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    54f0:	9b05      	ldr	r3, [sp, #20]
    54f2:	60d3      	str	r3, [r2, #12]
}
    54f4:	bf00      	nop
    54f6:	b006      	add	sp, #24
    54f8:	4770      	bx	lr
    54fa:	bf00      	nop
    54fc:	000193e0 	.word	0x000193e0
    5500:	000190d0 	.word	0x000190d0
    5504:	40048000 	.word	0x40048000

00005508 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5508:	b084      	sub	sp, #16
    550a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    550c:	4b06      	ldr	r3, [pc, #24]	; (5528 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    550e:	685b      	ldr	r3, [r3, #4]
    5510:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    5512:	9b03      	ldr	r3, [sp, #12]
    5514:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    5518:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    551a:	4a03      	ldr	r2, [pc, #12]	; (5528 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    551c:	9b03      	ldr	r3, [sp, #12]
    551e:	6053      	str	r3, [r2, #4]
}
    5520:	bf00      	nop
    5522:	b004      	add	sp, #16
    5524:	4770      	bx	lr
    5526:	bf00      	nop
    5528:	40048000 	.word	0x40048000

0000552c <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    552c:	b084      	sub	sp, #16
    552e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5530:	9b01      	ldr	r3, [sp, #4]
    5532:	685b      	ldr	r3, [r3, #4]
    5534:	4a0a      	ldr	r2, [pc, #40]	; (5560 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    5536:	5cd3      	ldrb	r3, [r2, r3]
    5538:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    553a:	4b0a      	ldr	r3, [pc, #40]	; (5564 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    553c:	685b      	ldr	r3, [r3, #4]
    553e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    5540:	9b02      	ldr	r3, [sp, #8]
    5542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    5546:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    5548:	9b03      	ldr	r3, [sp, #12]
    554a:	011b      	lsls	r3, r3, #4
    554c:	9a02      	ldr	r2, [sp, #8]
    554e:	4313      	orrs	r3, r2
    5550:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    5552:	4a04      	ldr	r2, [pc, #16]	; (5564 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    5554:	9b02      	ldr	r3, [sp, #8]
    5556:	6053      	str	r3, [r2, #4]
}
    5558:	bf00      	nop
    555a:	b004      	add	sp, #16
    555c:	4770      	bx	lr
    555e:	bf00      	nop
    5560:	000193e0 	.word	0x000193e0
    5564:	40048000 	.word	0x40048000

00005568 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5568:	b084      	sub	sp, #16
    556a:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    556c:	9b01      	ldr	r3, [sp, #4]
    556e:	681a      	ldr	r2, [r3, #0]
    5570:	490f      	ldr	r1, [pc, #60]	; (55b0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    5572:	4613      	mov	r3, r2
    5574:	00db      	lsls	r3, r3, #3
    5576:	4413      	add	r3, r2
    5578:	440b      	add	r3, r1
    557a:	3304      	adds	r3, #4
    557c:	781b      	ldrb	r3, [r3, #0]
    557e:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    5580:	4a0c      	ldr	r2, [pc, #48]	; (55b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    5582:	9b03      	ldr	r3, [sp, #12]
    5584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5588:	490a      	ldr	r1, [pc, #40]	; (55b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    558a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    558e:	9b03      	ldr	r3, [sp, #12]
    5590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    5594:	4a07      	ldr	r2, [pc, #28]	; (55b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    5596:	9b03      	ldr	r3, [sp, #12]
    5598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    559c:	4905      	ldr	r1, [pc, #20]	; (55b4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    559e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    55a2:	9b03      	ldr	r3, [sp, #12]
    55a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    55a8:	bf00      	nop
    55aa:	b004      	add	sp, #16
    55ac:	4770      	bx	lr
    55ae:	bf00      	nop
    55b0:	000190d0 	.word	0x000190d0
    55b4:	40065000 	.word	0x40065000

000055b8 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    55b8:	b086      	sub	sp, #24
    55ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    55bc:	9b01      	ldr	r3, [sp, #4]
    55be:	681a      	ldr	r2, [r3, #0]
    55c0:	4912      	ldr	r1, [pc, #72]	; (560c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    55c2:	4613      	mov	r3, r2
    55c4:	00db      	lsls	r3, r3, #3
    55c6:	4413      	add	r3, r2
    55c8:	440b      	add	r3, r1
    55ca:	3304      	adds	r3, #4
    55cc:	781b      	ldrb	r3, [r3, #0]
    55ce:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    55d0:	9b01      	ldr	r3, [sp, #4]
    55d2:	685b      	ldr	r3, [r3, #4]
    55d4:	4a0e      	ldr	r2, [pc, #56]	; (5610 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    55d6:	5cd3      	ldrb	r3, [r2, r3]
    55d8:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    55da:	4a0e      	ldr	r2, [pc, #56]	; (5614 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    55dc:	9b05      	ldr	r3, [sp, #20]
    55de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    55e2:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    55e4:	9b03      	ldr	r3, [sp, #12]
    55e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    55ea:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    55ec:	9b04      	ldr	r3, [sp, #16]
    55ee:	061b      	lsls	r3, r3, #24
    55f0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    55f4:	9a03      	ldr	r2, [sp, #12]
    55f6:	4313      	orrs	r3, r2
    55f8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    55fa:	4906      	ldr	r1, [pc, #24]	; (5614 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    55fc:	9b05      	ldr	r3, [sp, #20]
    55fe:	9a03      	ldr	r2, [sp, #12]
    5600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5604:	bf00      	nop
    5606:	b006      	add	sp, #24
    5608:	4770      	bx	lr
    560a:	bf00      	nop
    560c:	000190d0 	.word	0x000190d0
    5610:	00019468 	.word	0x00019468
    5614:	40065000 	.word	0x40065000

00005618 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5618:	b084      	sub	sp, #16
    561a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    561c:	4b0b      	ldr	r3, [pc, #44]	; (564c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    561e:	7f1b      	ldrb	r3, [r3, #28]
    5620:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    5622:	4b0b      	ldr	r3, [pc, #44]	; (5650 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5624:	685b      	ldr	r3, [r3, #4]
    5626:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5628:	9b02      	ldr	r3, [sp, #8]
    562a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    562e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5630:	9b03      	ldr	r3, [sp, #12]
    5632:	031b      	lsls	r3, r3, #12
    5634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5638:	9a02      	ldr	r2, [sp, #8]
    563a:	4313      	orrs	r3, r2
    563c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    563e:	4a04      	ldr	r2, [pc, #16]	; (5650 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5640:	9b02      	ldr	r3, [sp, #8]
    5642:	6053      	str	r3, [r2, #4]
}
    5644:	bf00      	nop
    5646:	b004      	add	sp, #16
    5648:	4770      	bx	lr
    564a:	bf00      	nop
    564c:	000193e0 	.word	0x000193e0
    5650:	40048000 	.word	0x40048000

00005654 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5654:	b084      	sub	sp, #16
    5656:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5658:	9b01      	ldr	r3, [sp, #4]
    565a:	685b      	ldr	r3, [r3, #4]
    565c:	4a0b      	ldr	r2, [pc, #44]	; (568c <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    565e:	5cd3      	ldrb	r3, [r2, r3]
    5660:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    5662:	4b0b      	ldr	r3, [pc, #44]	; (5690 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    5664:	685b      	ldr	r3, [r3, #4]
    5666:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5668:	9b02      	ldr	r3, [sp, #8]
    566a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    566e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5670:	9b03      	ldr	r3, [sp, #12]
    5672:	031b      	lsls	r3, r3, #12
    5674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5678:	9a02      	ldr	r2, [sp, #8]
    567a:	4313      	orrs	r3, r2
    567c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    567e:	4a04      	ldr	r2, [pc, #16]	; (5690 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    5680:	9b02      	ldr	r3, [sp, #8]
    5682:	6053      	str	r3, [r2, #4]
}
    5684:	bf00      	nop
    5686:	b004      	add	sp, #16
    5688:	4770      	bx	lr
    568a:	bf00      	nop
    568c:	000193e0 	.word	0x000193e0
    5690:	40048000 	.word	0x40048000

00005694 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    5694:	b500      	push	{lr}
    5696:	b085      	sub	sp, #20
    5698:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    569a:	2300      	movs	r3, #0
    569c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    56a0:	9b01      	ldr	r3, [sp, #4]
    56a2:	2b00      	cmp	r3, #0
    56a4:	d037      	beq.n	5716 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    56a6:	2300      	movs	r3, #0
    56a8:	9303      	str	r3, [sp, #12]
    56aa:	e02b      	b.n	5704 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    56ac:	4b29      	ldr	r3, [pc, #164]	; (5754 <DisableSafeClock+0xc0>)
    56ae:	6819      	ldr	r1, [r3, #0]
    56b0:	9a03      	ldr	r2, [sp, #12]
    56b2:	4613      	mov	r3, r2
    56b4:	005b      	lsls	r3, r3, #1
    56b6:	4413      	add	r3, r2
    56b8:	009b      	lsls	r3, r3, #2
    56ba:	440b      	add	r3, r1
    56bc:	3314      	adds	r3, #20
    56be:	681b      	ldr	r3, [r3, #0]
    56c0:	2b05      	cmp	r3, #5
    56c2:	d11c      	bne.n	56fe <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    56c4:	2301      	movs	r3, #1
    56c6:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    56ca:	4b22      	ldr	r3, [pc, #136]	; (5754 <DisableSafeClock+0xc0>)
    56cc:	6819      	ldr	r1, [r3, #0]
    56ce:	9a03      	ldr	r2, [sp, #12]
    56d0:	4613      	mov	r3, r2
    56d2:	005b      	lsls	r3, r3, #1
    56d4:	4413      	add	r3, r2
    56d6:	009b      	lsls	r3, r3, #2
    56d8:	440b      	add	r3, r1
    56da:	3318      	adds	r3, #24
    56dc:	881b      	ldrh	r3, [r3, #0]
    56de:	2b00      	cmp	r3, #0
    56e0:	d118      	bne.n	5714 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    56e2:	4b1d      	ldr	r3, [pc, #116]	; (5758 <DisableSafeClock+0xc4>)
    56e4:	791b      	ldrb	r3, [r3, #4]
    56e6:	4619      	mov	r1, r3
    56e8:	4a1c      	ldr	r2, [pc, #112]	; (575c <DisableSafeClock+0xc8>)
    56ea:	460b      	mov	r3, r1
    56ec:	005b      	lsls	r3, r3, #1
    56ee:	440b      	add	r3, r1
    56f0:	009b      	lsls	r3, r3, #2
    56f2:	4413      	add	r3, r2
    56f4:	3308      	adds	r3, #8
    56f6:	681b      	ldr	r3, [r3, #0]
    56f8:	2005      	movs	r0, #5
    56fa:	4798      	blx	r3
                }
                break;
    56fc:	e00a      	b.n	5714 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    56fe:	9b03      	ldr	r3, [sp, #12]
    5700:	3301      	adds	r3, #1
    5702:	9303      	str	r3, [sp, #12]
    5704:	4b13      	ldr	r3, [pc, #76]	; (5754 <DisableSafeClock+0xc0>)
    5706:	681b      	ldr	r3, [r3, #0]
    5708:	7a1b      	ldrb	r3, [r3, #8]
    570a:	461a      	mov	r2, r3
    570c:	9b03      	ldr	r3, [sp, #12]
    570e:	4293      	cmp	r3, r2
    5710:	d3cc      	bcc.n	56ac <DisableSafeClock+0x18>
    5712:	e000      	b.n	5716 <DisableSafeClock+0x82>
                break;
    5714:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    5716:	f89d 300b 	ldrb.w	r3, [sp, #11]
    571a:	f083 0301 	eor.w	r3, r3, #1
    571e:	b2db      	uxtb	r3, r3
    5720:	2b00      	cmp	r3, #0
    5722:	d013      	beq.n	574c <DisableSafeClock+0xb8>
    5724:	4b0e      	ldr	r3, [pc, #56]	; (5760 <DisableSafeClock+0xcc>)
    5726:	781b      	ldrb	r3, [r3, #0]
    5728:	f083 0301 	eor.w	r3, r3, #1
    572c:	b2db      	uxtb	r3, r3
    572e:	2b00      	cmp	r3, #0
    5730:	d00c      	beq.n	574c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    5732:	4b09      	ldr	r3, [pc, #36]	; (5758 <DisableSafeClock+0xc4>)
    5734:	791b      	ldrb	r3, [r3, #4]
    5736:	4619      	mov	r1, r3
    5738:	4a08      	ldr	r2, [pc, #32]	; (575c <DisableSafeClock+0xc8>)
    573a:	460b      	mov	r3, r1
    573c:	005b      	lsls	r3, r3, #1
    573e:	440b      	add	r3, r1
    5740:	009b      	lsls	r3, r3, #2
    5742:	4413      	add	r3, r2
    5744:	3308      	adds	r3, #8
    5746:	681b      	ldr	r3, [r3, #0]
    5748:	2005      	movs	r0, #5
    574a:	4798      	blx	r3
    }
}
    574c:	bf00      	nop
    574e:	b005      	add	sp, #20
    5750:	f85d fb04 	ldr.w	pc, [sp], #4
    5754:	1fff8bdc 	.word	0x1fff8bdc
    5758:	00019060 	.word	0x00019060
    575c:	00019690 	.word	0x00019690
    5760:	1fff8b18 	.word	0x1fff8b18

00005764 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    5764:	4b06      	ldr	r3, [pc, #24]	; (5780 <SetFircToResetValue_TrustedCall+0x1c>)
    5766:	2200      	movs	r2, #0
    5768:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    576c:	4b04      	ldr	r3, [pc, #16]	; (5780 <SetFircToResetValue_TrustedCall+0x1c>)
    576e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5772:	4a03      	ldr	r2, [pc, #12]	; (5780 <SetFircToResetValue_TrustedCall+0x1c>)
    5774:	f043 0301 	orr.w	r3, r3, #1
    5778:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    577c:	bf00      	nop
    577e:	4770      	bx	lr
    5780:	40064000 	.word	0x40064000

00005784 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    5784:	b084      	sub	sp, #16
    5786:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    5788:	2303      	movs	r3, #3
    578a:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    578c:	2300      	movs	r3, #0
    578e:	9302      	str	r3, [sp, #8]
    5790:	e028      	b.n	57e4 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    5792:	9b01      	ldr	r3, [sp, #4]
    5794:	9a02      	ldr	r2, [sp, #8]
    5796:	320d      	adds	r2, #13
    5798:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    579c:	2b28      	cmp	r3, #40	; 0x28
    579e:	d10b      	bne.n	57b8 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    57a0:	9a01      	ldr	r2, [sp, #4]
    57a2:	9b02      	ldr	r3, [sp, #8]
    57a4:	330d      	adds	r3, #13
    57a6:	00db      	lsls	r3, r3, #3
    57a8:	4413      	add	r3, r2
    57aa:	685b      	ldr	r3, [r3, #4]
    57ac:	4a2b      	ldr	r2, [pc, #172]	; (585c <SetSimLpoclksRegister_TrustedCall+0xd8>)
    57ae:	5cd3      	ldrb	r3, [r2, r3]
    57b0:	011b      	lsls	r3, r3, #4
    57b2:	9a03      	ldr	r2, [sp, #12]
    57b4:	4313      	orrs	r3, r2
    57b6:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    57b8:	9b01      	ldr	r3, [sp, #4]
    57ba:	9a02      	ldr	r2, [sp, #8]
    57bc:	320d      	adds	r2, #13
    57be:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    57c2:	2b29      	cmp	r3, #41	; 0x29
    57c4:	d10b      	bne.n	57de <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    57c6:	9a01      	ldr	r2, [sp, #4]
    57c8:	9b02      	ldr	r3, [sp, #8]
    57ca:	330d      	adds	r3, #13
    57cc:	00db      	lsls	r3, r3, #3
    57ce:	4413      	add	r3, r2
    57d0:	685b      	ldr	r3, [r3, #4]
    57d2:	4a23      	ldr	r2, [pc, #140]	; (5860 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    57d4:	5cd3      	ldrb	r3, [r2, r3]
    57d6:	009b      	lsls	r3, r3, #2
    57d8:	9a03      	ldr	r2, [sp, #12]
    57da:	4313      	orrs	r3, r2
    57dc:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    57de:	9b02      	ldr	r3, [sp, #8]
    57e0:	3301      	adds	r3, #1
    57e2:	9302      	str	r3, [sp, #8]
    57e4:	9b01      	ldr	r3, [sp, #4]
    57e6:	7adb      	ldrb	r3, [r3, #11]
    57e8:	461a      	mov	r2, r3
    57ea:	9b02      	ldr	r3, [sp, #8]
    57ec:	4293      	cmp	r3, r2
    57ee:	d3d0      	bcc.n	5792 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    57f0:	2300      	movs	r3, #0
    57f2:	9302      	str	r3, [sp, #8]
    57f4:	e026      	b.n	5844 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    57f6:	9a01      	ldr	r2, [sp, #4]
    57f8:	9b02      	ldr	r3, [sp, #8]
    57fa:	334e      	adds	r3, #78	; 0x4e
    57fc:	00db      	lsls	r3, r3, #3
    57fe:	4413      	add	r3, r2
    5800:	685b      	ldr	r3, [r3, #4]
    5802:	2b12      	cmp	r3, #18
    5804:	d109      	bne.n	581a <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    5806:	9a01      	ldr	r2, [sp, #4]
    5808:	9b02      	ldr	r3, [sp, #8]
    580a:	334e      	adds	r3, #78	; 0x4e
    580c:	00db      	lsls	r3, r3, #3
    580e:	4413      	add	r3, r2
    5810:	891b      	ldrh	r3, [r3, #8]
    5812:	005b      	lsls	r3, r3, #1
    5814:	9a03      	ldr	r2, [sp, #12]
    5816:	4313      	orrs	r3, r2
    5818:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    581a:	9a01      	ldr	r2, [sp, #4]
    581c:	9b02      	ldr	r3, [sp, #8]
    581e:	334e      	adds	r3, #78	; 0x4e
    5820:	00db      	lsls	r3, r3, #3
    5822:	4413      	add	r3, r2
    5824:	685b      	ldr	r3, [r3, #4]
    5826:	2b13      	cmp	r3, #19
    5828:	d109      	bne.n	583e <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    582a:	9a01      	ldr	r2, [sp, #4]
    582c:	9b02      	ldr	r3, [sp, #8]
    582e:	334e      	adds	r3, #78	; 0x4e
    5830:	00db      	lsls	r3, r3, #3
    5832:	4413      	add	r3, r2
    5834:	891b      	ldrh	r3, [r3, #8]
    5836:	461a      	mov	r2, r3
    5838:	9b03      	ldr	r3, [sp, #12]
    583a:	4313      	orrs	r3, r2
    583c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    583e:	9b02      	ldr	r3, [sp, #8]
    5840:	3301      	adds	r3, #1
    5842:	9302      	str	r3, [sp, #8]
    5844:	9b01      	ldr	r3, [sp, #4]
    5846:	7c1b      	ldrb	r3, [r3, #16]
    5848:	461a      	mov	r2, r3
    584a:	9b02      	ldr	r3, [sp, #8]
    584c:	4293      	cmp	r3, r2
    584e:	d3d2      	bcc.n	57f6 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    5850:	4a04      	ldr	r2, [pc, #16]	; (5864 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    5852:	9b03      	ldr	r3, [sp, #12]
    5854:	6113      	str	r3, [r2, #16]
}
    5856:	bf00      	nop
    5858:	b004      	add	sp, #16
    585a:	4770      	bx	lr
    585c:	000193e0 	.word	0x000193e0
    5860:	00019498 	.word	0x00019498
    5864:	40048000 	.word	0x40048000

00005868 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    5868:	b500      	push	{lr}
    586a:	b089      	sub	sp, #36	; 0x24
    586c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    586e:	2300      	movs	r3, #0
    5870:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    5874:	4a21      	ldr	r2, [pc, #132]	; (58fc <Clock_Ip_SpecificPlatformInitClock+0x94>)
    5876:	9b01      	ldr	r3, [sp, #4]
    5878:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    587a:	4b21      	ldr	r3, [pc, #132]	; (5900 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    587c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5880:	f003 0301 	and.w	r3, r3, #1
    5884:	2b00      	cmp	r3, #0
    5886:	d12e      	bne.n	58e6 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    5888:	4b1e      	ldr	r3, [pc, #120]	; (5904 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    588a:	2200      	movs	r2, #0
    588c:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    588e:	f7ff ff69 	bl	5764 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    5892:	aa03      	add	r2, sp, #12
    5894:	a904      	add	r1, sp, #16
    5896:	a805      	add	r0, sp, #20
    5898:	f24c 3350 	movw	r3, #50000	; 0xc350
    589c:	f7fe f8ae 	bl	39fc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    58a0:	4b17      	ldr	r3, [pc, #92]	; (5900 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    58a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    58a6:	0e1b      	lsrs	r3, r3, #24
    58a8:	f003 0301 	and.w	r3, r3, #1
    58ac:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    58ae:	9a03      	ldr	r2, [sp, #12]
    58b0:	a904      	add	r1, sp, #16
    58b2:	ab05      	add	r3, sp, #20
    58b4:	4618      	mov	r0, r3
    58b6:	f7fe f8bb 	bl	3a30 <Clock_Ip_TimeoutExpired>
    58ba:	4603      	mov	r3, r0
    58bc:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    58c0:	9b06      	ldr	r3, [sp, #24]
    58c2:	2b00      	cmp	r3, #0
    58c4:	d106      	bne.n	58d4 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    58c6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    58ca:	f083 0301 	eor.w	r3, r3, #1
    58ce:	b2db      	uxtb	r3, r3
    58d0:	2b00      	cmp	r3, #0
    58d2:	d1e5      	bne.n	58a0 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    58d4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    58d8:	2b00      	cmp	r3, #0
    58da:	d007      	beq.n	58ec <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    58dc:	2105      	movs	r1, #5
    58de:	2001      	movs	r0, #1
    58e0:	f7fe f87c 	bl	39dc <Clock_Ip_ReportClockErrors>
    58e4:	e002      	b.n	58ec <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    58e6:	4b07      	ldr	r3, [pc, #28]	; (5904 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    58e8:	2201      	movs	r2, #1
    58ea:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    58ec:	9801      	ldr	r0, [sp, #4]
    58ee:	f7ff ff49 	bl	5784 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    58f2:	bf00      	nop
    58f4:	b009      	add	sp, #36	; 0x24
    58f6:	f85d fb04 	ldr.w	pc, [sp], #4
    58fa:	bf00      	nop
    58fc:	1fff8bdc 	.word	0x1fff8bdc
    5900:	40064000 	.word	0x40064000
    5904:	1fff8b18 	.word	0x1fff8b18

00005908 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    5908:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    590a:	2300      	movs	r3, #0
    590c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    590e:	4b29      	ldr	r3, [pc, #164]	; (59b4 <getFircConfig+0xac>)
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	2b00      	cmp	r3, #0
    5914:	d024      	beq.n	5960 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5916:	2300      	movs	r3, #0
    5918:	9301      	str	r3, [sp, #4]
    591a:	e01a      	b.n	5952 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    591c:	4b25      	ldr	r3, [pc, #148]	; (59b4 <getFircConfig+0xac>)
    591e:	6819      	ldr	r1, [r3, #0]
    5920:	9a01      	ldr	r2, [sp, #4]
    5922:	4613      	mov	r3, r2
    5924:	005b      	lsls	r3, r3, #1
    5926:	4413      	add	r3, r2
    5928:	009b      	lsls	r3, r3, #2
    592a:	440b      	add	r3, r1
    592c:	3314      	adds	r3, #20
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	2b05      	cmp	r3, #5
    5932:	d10b      	bne.n	594c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    5934:	4b1f      	ldr	r3, [pc, #124]	; (59b4 <getFircConfig+0xac>)
    5936:	6819      	ldr	r1, [r3, #0]
    5938:	9a01      	ldr	r2, [sp, #4]
    593a:	4613      	mov	r3, r2
    593c:	005b      	lsls	r3, r3, #1
    593e:	4413      	add	r3, r2
    5940:	009b      	lsls	r3, r3, #2
    5942:	3310      	adds	r3, #16
    5944:	440b      	add	r3, r1
    5946:	3304      	adds	r3, #4
    5948:	9300      	str	r3, [sp, #0]
                break;
    594a:	e009      	b.n	5960 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    594c:	9b01      	ldr	r3, [sp, #4]
    594e:	3301      	adds	r3, #1
    5950:	9301      	str	r3, [sp, #4]
    5952:	4b18      	ldr	r3, [pc, #96]	; (59b4 <getFircConfig+0xac>)
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	7a1b      	ldrb	r3, [r3, #8]
    5958:	461a      	mov	r2, r3
    595a:	9b01      	ldr	r3, [sp, #4]
    595c:	4293      	cmp	r3, r2
    595e:	d3dd      	bcc.n	591c <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5960:	9b00      	ldr	r3, [sp, #0]
    5962:	2b00      	cmp	r3, #0
    5964:	d121      	bne.n	59aa <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    5966:	4b14      	ldr	r3, [pc, #80]	; (59b8 <getFircConfig+0xb0>)
    5968:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    596a:	4b13      	ldr	r3, [pc, #76]	; (59b8 <getFircConfig+0xb0>)
    596c:	2205      	movs	r2, #5
    596e:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    5970:	4b12      	ldr	r3, [pc, #72]	; (59bc <getFircConfig+0xb4>)
    5972:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5976:	b29b      	uxth	r3, r3
    5978:	f003 0301 	and.w	r3, r3, #1
    597c:	b29a      	uxth	r2, r3
    597e:	4b0e      	ldr	r3, [pc, #56]	; (59b8 <getFircConfig+0xb0>)
    5980:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    5982:	4b0e      	ldr	r3, [pc, #56]	; (59bc <getFircConfig+0xb4>)
    5984:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    5988:	b2db      	uxtb	r3, r3
    598a:	f003 0303 	and.w	r3, r3, #3
    598e:	b2da      	uxtb	r2, r3
    5990:	4b09      	ldr	r3, [pc, #36]	; (59b8 <getFircConfig+0xb0>)
    5992:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    5994:	4b09      	ldr	r3, [pc, #36]	; (59bc <getFircConfig+0xb4>)
    5996:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    599a:	b2db      	uxtb	r3, r3
    599c:	10db      	asrs	r3, r3, #3
    599e:	b2db      	uxtb	r3, r3
    59a0:	f003 0301 	and.w	r3, r3, #1
    59a4:	b2da      	uxtb	r2, r3
    59a6:	4b04      	ldr	r3, [pc, #16]	; (59b8 <getFircConfig+0xb0>)
    59a8:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    59aa:	9b00      	ldr	r3, [sp, #0]
}
    59ac:	4618      	mov	r0, r3
    59ae:	b002      	add	sp, #8
    59b0:	4770      	bx	lr
    59b2:	bf00      	nop
    59b4:	1fff8bdc 	.word	0x1fff8bdc
    59b8:	1fff8c48 	.word	0x1fff8c48
    59bc:	40064000 	.word	0x40064000

000059c0 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    59c0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    59c2:	2300      	movs	r3, #0
    59c4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    59c6:	4b20      	ldr	r3, [pc, #128]	; (5a48 <getSoscConfig+0x88>)
    59c8:	681b      	ldr	r3, [r3, #0]
    59ca:	2b00      	cmp	r3, #0
    59cc:	d024      	beq.n	5a18 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    59ce:	2300      	movs	r3, #0
    59d0:	9301      	str	r3, [sp, #4]
    59d2:	e01a      	b.n	5a0a <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    59d4:	4b1c      	ldr	r3, [pc, #112]	; (5a48 <getSoscConfig+0x88>)
    59d6:	6819      	ldr	r1, [r3, #0]
    59d8:	9a01      	ldr	r2, [sp, #4]
    59da:	4613      	mov	r3, r2
    59dc:	009b      	lsls	r3, r3, #2
    59de:	4413      	add	r3, r2
    59e0:	009b      	lsls	r3, r3, #2
    59e2:	440b      	add	r3, r1
    59e4:	332c      	adds	r3, #44	; 0x2c
    59e6:	681b      	ldr	r3, [r3, #0]
    59e8:	2b08      	cmp	r3, #8
    59ea:	d10b      	bne.n	5a04 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    59ec:	4b16      	ldr	r3, [pc, #88]	; (5a48 <getSoscConfig+0x88>)
    59ee:	6819      	ldr	r1, [r3, #0]
    59f0:	9a01      	ldr	r2, [sp, #4]
    59f2:	4613      	mov	r3, r2
    59f4:	009b      	lsls	r3, r3, #2
    59f6:	4413      	add	r3, r2
    59f8:	009b      	lsls	r3, r3, #2
    59fa:	3328      	adds	r3, #40	; 0x28
    59fc:	440b      	add	r3, r1
    59fe:	3304      	adds	r3, #4
    5a00:	9300      	str	r3, [sp, #0]
                break;
    5a02:	e009      	b.n	5a18 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5a04:	9b01      	ldr	r3, [sp, #4]
    5a06:	3301      	adds	r3, #1
    5a08:	9301      	str	r3, [sp, #4]
    5a0a:	4b0f      	ldr	r3, [pc, #60]	; (5a48 <getSoscConfig+0x88>)
    5a0c:	681b      	ldr	r3, [r3, #0]
    5a0e:	7a5b      	ldrb	r3, [r3, #9]
    5a10:	461a      	mov	r2, r3
    5a12:	9b01      	ldr	r3, [sp, #4]
    5a14:	4293      	cmp	r3, r2
    5a16:	d3dd      	bcc.n	59d4 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5a18:	9b00      	ldr	r3, [sp, #0]
    5a1a:	2b00      	cmp	r3, #0
    5a1c:	d110      	bne.n	5a40 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    5a1e:	4b0b      	ldr	r3, [pc, #44]	; (5a4c <getSoscConfig+0x8c>)
    5a20:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    5a22:	4b0a      	ldr	r3, [pc, #40]	; (5a4c <getSoscConfig+0x8c>)
    5a24:	2208      	movs	r2, #8
    5a26:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    5a28:	4b09      	ldr	r3, [pc, #36]	; (5a50 <getSoscConfig+0x90>)
    5a2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    5a2e:	b29b      	uxth	r3, r3
    5a30:	f003 0301 	and.w	r3, r3, #1
    5a34:	b29a      	uxth	r2, r3
    5a36:	4b05      	ldr	r3, [pc, #20]	; (5a4c <getSoscConfig+0x8c>)
    5a38:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    5a3a:	4b04      	ldr	r3, [pc, #16]	; (5a4c <getSoscConfig+0x8c>)
    5a3c:	4a05      	ldr	r2, [pc, #20]	; (5a54 <getSoscConfig+0x94>)
    5a3e:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    5a40:	9b00      	ldr	r3, [sp, #0]
}
    5a42:	4618      	mov	r0, r3
    5a44:	b002      	add	sp, #8
    5a46:	4770      	bx	lr
    5a48:	1fff8bdc 	.word	0x1fff8bdc
    5a4c:	1fff8c54 	.word	0x1fff8c54
    5a50:	40064000 	.word	0x40064000
    5a54:	02625a00 	.word	0x02625a00

00005a58 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5a58:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    5a5a:	2300      	movs	r3, #0
    5a5c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5a5e:	4b28      	ldr	r3, [pc, #160]	; (5b00 <getSpllConfig+0xa8>)
    5a60:	681b      	ldr	r3, [r3, #0]
    5a62:	2b00      	cmp	r3, #0
    5a64:	d023      	beq.n	5aae <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5a66:	2300      	movs	r3, #0
    5a68:	9301      	str	r3, [sp, #4]
    5a6a:	e019      	b.n	5aa0 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    5a6c:	4b24      	ldr	r3, [pc, #144]	; (5b00 <getSpllConfig+0xa8>)
    5a6e:	6819      	ldr	r1, [r3, #0]
    5a70:	9a01      	ldr	r2, [sp, #4]
    5a72:	4613      	mov	r3, r2
    5a74:	009b      	lsls	r3, r3, #2
    5a76:	4413      	add	r3, r2
    5a78:	00db      	lsls	r3, r3, #3
    5a7a:	440b      	add	r3, r1
    5a7c:	3340      	adds	r3, #64	; 0x40
    5a7e:	681b      	ldr	r3, [r3, #0]
    5a80:	2b09      	cmp	r3, #9
    5a82:	d10a      	bne.n	5a9a <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    5a84:	4b1e      	ldr	r3, [pc, #120]	; (5b00 <getSpllConfig+0xa8>)
    5a86:	6819      	ldr	r1, [r3, #0]
    5a88:	9a01      	ldr	r2, [sp, #4]
    5a8a:	4613      	mov	r3, r2
    5a8c:	009b      	lsls	r3, r3, #2
    5a8e:	4413      	add	r3, r2
    5a90:	00db      	lsls	r3, r3, #3
    5a92:	3340      	adds	r3, #64	; 0x40
    5a94:	440b      	add	r3, r1
    5a96:	9300      	str	r3, [sp, #0]
                break;
    5a98:	e009      	b.n	5aae <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5a9a:	9b01      	ldr	r3, [sp, #4]
    5a9c:	3301      	adds	r3, #1
    5a9e:	9301      	str	r3, [sp, #4]
    5aa0:	4b17      	ldr	r3, [pc, #92]	; (5b00 <getSpllConfig+0xa8>)
    5aa2:	681b      	ldr	r3, [r3, #0]
    5aa4:	7a9b      	ldrb	r3, [r3, #10]
    5aa6:	461a      	mov	r2, r3
    5aa8:	9b01      	ldr	r3, [sp, #4]
    5aaa:	4293      	cmp	r3, r2
    5aac:	d3de      	bcc.n	5a6c <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5aae:	9b00      	ldr	r3, [sp, #0]
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	d121      	bne.n	5af8 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    5ab4:	4b13      	ldr	r3, [pc, #76]	; (5b04 <getSpllConfig+0xac>)
    5ab6:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    5ab8:	4b12      	ldr	r3, [pc, #72]	; (5b04 <getSpllConfig+0xac>)
    5aba:	2209      	movs	r2, #9
    5abc:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    5abe:	4b12      	ldr	r3, [pc, #72]	; (5b08 <getSpllConfig+0xb0>)
    5ac0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    5ac4:	b29b      	uxth	r3, r3
    5ac6:	f003 0301 	and.w	r3, r3, #1
    5aca:	b29a      	uxth	r2, r3
    5acc:	4b0d      	ldr	r3, [pc, #52]	; (5b04 <getSpllConfig+0xac>)
    5ace:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    5ad0:	4b0d      	ldr	r3, [pc, #52]	; (5b08 <getSpllConfig+0xb0>)
    5ad2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5ad6:	0a1b      	lsrs	r3, r3, #8
    5ad8:	b2db      	uxtb	r3, r3
    5ada:	f003 0307 	and.w	r3, r3, #7
    5ade:	b2da      	uxtb	r2, r3
    5ae0:	4b08      	ldr	r3, [pc, #32]	; (5b04 <getSpllConfig+0xac>)
    5ae2:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    5ae4:	4b08      	ldr	r3, [pc, #32]	; (5b08 <getSpllConfig+0xb0>)
    5ae6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5aea:	0c1b      	lsrs	r3, r3, #16
    5aec:	b2db      	uxtb	r3, r3
    5aee:	f003 031f 	and.w	r3, r3, #31
    5af2:	b2da      	uxtb	r2, r3
    5af4:	4b03      	ldr	r3, [pc, #12]	; (5b04 <getSpllConfig+0xac>)
    5af6:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    5af8:	9b00      	ldr	r3, [sp, #0]
}
    5afa:	4618      	mov	r0, r3
    5afc:	b002      	add	sp, #8
    5afe:	4770      	bx	lr
    5b00:	1fff8bdc 	.word	0x1fff8bdc
    5b04:	1fff8c68 	.word	0x1fff8c68
    5b08:	40064000 	.word	0x40064000

00005b0c <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    5b0c:	b086      	sub	sp, #24
    5b0e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    5b10:	2300      	movs	r3, #0
    5b12:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    5b14:	9b01      	ldr	r3, [sp, #4]
    5b16:	2b1b      	cmp	r3, #27
    5b18:	d00f      	beq.n	5b3a <getSelectorConfig+0x2e>
    5b1a:	9b01      	ldr	r3, [sp, #4]
    5b1c:	2b1b      	cmp	r3, #27
    5b1e:	d80f      	bhi.n	5b40 <getSelectorConfig+0x34>
    5b20:	9b01      	ldr	r3, [sp, #4]
    5b22:	2b19      	cmp	r3, #25
    5b24:	d003      	beq.n	5b2e <getSelectorConfig+0x22>
    5b26:	9b01      	ldr	r3, [sp, #4]
    5b28:	2b1a      	cmp	r3, #26
    5b2a:	d003      	beq.n	5b34 <getSelectorConfig+0x28>
    5b2c:	e008      	b.n	5b40 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    5b2e:	2300      	movs	r3, #0
    5b30:	9304      	str	r3, [sp, #16]
            break;
    5b32:	e008      	b.n	5b46 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5b34:	2301      	movs	r3, #1
    5b36:	9304      	str	r3, [sp, #16]
            break;
    5b38:	e005      	b.n	5b46 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    5b3a:	2302      	movs	r3, #2
    5b3c:	9304      	str	r3, [sp, #16]
            break;
    5b3e:	e002      	b.n	5b46 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5b40:	2300      	movs	r3, #0
    5b42:	9304      	str	r3, [sp, #16]
            break;
    5b44:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5b46:	4b36      	ldr	r3, [pc, #216]	; (5c20 <getSelectorConfig+0x114>)
    5b48:	681b      	ldr	r3, [r3, #0]
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d01d      	beq.n	5b8a <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5b4e:	2300      	movs	r3, #0
    5b50:	9303      	str	r3, [sp, #12]
    5b52:	e013      	b.n	5b7c <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5b54:	4b32      	ldr	r3, [pc, #200]	; (5c20 <getSelectorConfig+0x114>)
    5b56:	681b      	ldr	r3, [r3, #0]
    5b58:	9a03      	ldr	r2, [sp, #12]
    5b5a:	320d      	adds	r2, #13
    5b5c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5b60:	9a01      	ldr	r2, [sp, #4]
    5b62:	429a      	cmp	r2, r3
    5b64:	d107      	bne.n	5b76 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    5b66:	4b2e      	ldr	r3, [pc, #184]	; (5c20 <getSelectorConfig+0x114>)
    5b68:	681a      	ldr	r2, [r3, #0]
    5b6a:	9b03      	ldr	r3, [sp, #12]
    5b6c:	330d      	adds	r3, #13
    5b6e:	00db      	lsls	r3, r3, #3
    5b70:	4413      	add	r3, r2
    5b72:	9305      	str	r3, [sp, #20]
                break;
    5b74:	e009      	b.n	5b8a <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5b76:	9b03      	ldr	r3, [sp, #12]
    5b78:	3301      	adds	r3, #1
    5b7a:	9303      	str	r3, [sp, #12]
    5b7c:	4b28      	ldr	r3, [pc, #160]	; (5c20 <getSelectorConfig+0x114>)
    5b7e:	681b      	ldr	r3, [r3, #0]
    5b80:	7adb      	ldrb	r3, [r3, #11]
    5b82:	461a      	mov	r2, r3
    5b84:	9b03      	ldr	r3, [sp, #12]
    5b86:	4293      	cmp	r3, r2
    5b88:	d3e4      	bcc.n	5b54 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5b8a:	9b05      	ldr	r3, [sp, #20]
    5b8c:	2b00      	cmp	r3, #0
    5b8e:	d140      	bne.n	5c12 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    5b90:	9b04      	ldr	r3, [sp, #16]
    5b92:	00db      	lsls	r3, r3, #3
    5b94:	4a23      	ldr	r2, [pc, #140]	; (5c24 <getSelectorConfig+0x118>)
    5b96:	4413      	add	r3, r2
    5b98:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    5b9a:	4922      	ldr	r1, [pc, #136]	; (5c24 <getSelectorConfig+0x118>)
    5b9c:	9b04      	ldr	r3, [sp, #16]
    5b9e:	9a01      	ldr	r2, [sp, #4]
    5ba0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    5ba4:	9b01      	ldr	r3, [sp, #4]
    5ba6:	2b1b      	cmp	r3, #27
    5ba8:	d025      	beq.n	5bf6 <getSelectorConfig+0xea>
    5baa:	9b01      	ldr	r3, [sp, #4]
    5bac:	2b1b      	cmp	r3, #27
    5bae:	d832      	bhi.n	5c16 <getSelectorConfig+0x10a>
    5bb0:	9b01      	ldr	r3, [sp, #4]
    5bb2:	2b19      	cmp	r3, #25
    5bb4:	d003      	beq.n	5bbe <getSelectorConfig+0xb2>
    5bb6:	9b01      	ldr	r3, [sp, #4]
    5bb8:	2b1a      	cmp	r3, #26
    5bba:	d00e      	beq.n	5bda <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5bbc:	e02b      	b.n	5c16 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    5bbe:	4b1a      	ldr	r3, [pc, #104]	; (5c28 <getSelectorConfig+0x11c>)
    5bc0:	695b      	ldr	r3, [r3, #20]
    5bc2:	0e1b      	lsrs	r3, r3, #24
    5bc4:	f003 030f 	and.w	r3, r3, #15
    5bc8:	4a18      	ldr	r2, [pc, #96]	; (5c2c <getSelectorConfig+0x120>)
    5bca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5bce:	4915      	ldr	r1, [pc, #84]	; (5c24 <getSelectorConfig+0x118>)
    5bd0:	9b04      	ldr	r3, [sp, #16]
    5bd2:	00db      	lsls	r3, r3, #3
    5bd4:	440b      	add	r3, r1
    5bd6:	605a      	str	r2, [r3, #4]
                break;
    5bd8:	e01e      	b.n	5c18 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    5bda:	4b13      	ldr	r3, [pc, #76]	; (5c28 <getSelectorConfig+0x11c>)
    5bdc:	699b      	ldr	r3, [r3, #24]
    5bde:	0e1b      	lsrs	r3, r3, #24
    5be0:	f003 030f 	and.w	r3, r3, #15
    5be4:	4a11      	ldr	r2, [pc, #68]	; (5c2c <getSelectorConfig+0x120>)
    5be6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5bea:	490e      	ldr	r1, [pc, #56]	; (5c24 <getSelectorConfig+0x118>)
    5bec:	9b04      	ldr	r3, [sp, #16]
    5bee:	00db      	lsls	r3, r3, #3
    5bf0:	440b      	add	r3, r1
    5bf2:	605a      	str	r2, [r3, #4]
                break;
    5bf4:	e010      	b.n	5c18 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    5bf6:	4b0c      	ldr	r3, [pc, #48]	; (5c28 <getSelectorConfig+0x11c>)
    5bf8:	69db      	ldr	r3, [r3, #28]
    5bfa:	0e1b      	lsrs	r3, r3, #24
    5bfc:	f003 030f 	and.w	r3, r3, #15
    5c00:	4a0a      	ldr	r2, [pc, #40]	; (5c2c <getSelectorConfig+0x120>)
    5c02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5c06:	4907      	ldr	r1, [pc, #28]	; (5c24 <getSelectorConfig+0x118>)
    5c08:	9b04      	ldr	r3, [sp, #16]
    5c0a:	00db      	lsls	r3, r3, #3
    5c0c:	440b      	add	r3, r1
    5c0e:	605a      	str	r2, [r3, #4]
                break;
    5c10:	e002      	b.n	5c18 <getSelectorConfig+0x10c>
        }
    }
    5c12:	bf00      	nop
    5c14:	e000      	b.n	5c18 <getSelectorConfig+0x10c>
                break;
    5c16:	bf00      	nop

    return ReturnValue;
    5c18:	9b05      	ldr	r3, [sp, #20]
}
    5c1a:	4618      	mov	r0, r3
    5c1c:	b006      	add	sp, #24
    5c1e:	4770      	bx	lr
    5c20:	1fff8bdc 	.word	0x1fff8bdc
    5c24:	1fff8c90 	.word	0x1fff8c90
    5c28:	40064000 	.word	0x40064000
    5c2c:	00019760 	.word	0x00019760

00005c30 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5c30:	b086      	sub	sp, #24
    5c32:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5c34:	2300      	movs	r3, #0
    5c36:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5c38:	2300      	movs	r3, #0
    5c3a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5c3c:	9b01      	ldr	r3, [sp, #4]
    5c3e:	2b1f      	cmp	r3, #31
    5c40:	d00f      	beq.n	5c62 <getCoreDividerConfig+0x32>
    5c42:	9b01      	ldr	r3, [sp, #4]
    5c44:	2b1f      	cmp	r3, #31
    5c46:	d80f      	bhi.n	5c68 <getCoreDividerConfig+0x38>
    5c48:	9b01      	ldr	r3, [sp, #4]
    5c4a:	2b1d      	cmp	r3, #29
    5c4c:	d003      	beq.n	5c56 <getCoreDividerConfig+0x26>
    5c4e:	9b01      	ldr	r3, [sp, #4]
    5c50:	2b1e      	cmp	r3, #30
    5c52:	d003      	beq.n	5c5c <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5c54:	e008      	b.n	5c68 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5c56:	2300      	movs	r3, #0
    5c58:	9304      	str	r3, [sp, #16]
            break;
    5c5a:	e006      	b.n	5c6a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5c5c:	2301      	movs	r3, #1
    5c5e:	9304      	str	r3, [sp, #16]
            break;
    5c60:	e003      	b.n	5c6a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5c62:	2302      	movs	r3, #2
    5c64:	9304      	str	r3, [sp, #16]
            break;
    5c66:	e000      	b.n	5c6a <getCoreDividerConfig+0x3a>
                break;
    5c68:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5c6a:	4b41      	ldr	r3, [pc, #260]	; (5d70 <getCoreDividerConfig+0x140>)
    5c6c:	681b      	ldr	r3, [r3, #0]
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d026      	beq.n	5cc0 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5c72:	2300      	movs	r3, #0
    5c74:	9303      	str	r3, [sp, #12]
    5c76:	e01c      	b.n	5cb2 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5c78:	4b3d      	ldr	r3, [pc, #244]	; (5d70 <getCoreDividerConfig+0x140>)
    5c7a:	6819      	ldr	r1, [r3, #0]
    5c7c:	9a03      	ldr	r2, [sp, #12]
    5c7e:	4613      	mov	r3, r2
    5c80:	005b      	lsls	r3, r3, #1
    5c82:	4413      	add	r3, r2
    5c84:	009b      	lsls	r3, r3, #2
    5c86:	440b      	add	r3, r1
    5c88:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5c8c:	681b      	ldr	r3, [r3, #0]
    5c8e:	9a01      	ldr	r2, [sp, #4]
    5c90:	429a      	cmp	r2, r3
    5c92:	d10b      	bne.n	5cac <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5c94:	4b36      	ldr	r3, [pc, #216]	; (5d70 <getCoreDividerConfig+0x140>)
    5c96:	6819      	ldr	r1, [r3, #0]
    5c98:	9a03      	ldr	r2, [sp, #12]
    5c9a:	4613      	mov	r3, r2
    5c9c:	005b      	lsls	r3, r3, #1
    5c9e:	4413      	add	r3, r2
    5ca0:	009b      	lsls	r3, r3, #2
    5ca2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5ca6:	440b      	add	r3, r1
    5ca8:	9305      	str	r3, [sp, #20]
                break;
    5caa:	e009      	b.n	5cc0 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5cac:	9b03      	ldr	r3, [sp, #12]
    5cae:	3301      	adds	r3, #1
    5cb0:	9303      	str	r3, [sp, #12]
    5cb2:	4b2f      	ldr	r3, [pc, #188]	; (5d70 <getCoreDividerConfig+0x140>)
    5cb4:	681b      	ldr	r3, [r3, #0]
    5cb6:	7b1b      	ldrb	r3, [r3, #12]
    5cb8:	461a      	mov	r2, r3
    5cba:	9b03      	ldr	r3, [sp, #12]
    5cbc:	4293      	cmp	r3, r2
    5cbe:	d3db      	bcc.n	5c78 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5cc0:	9b05      	ldr	r3, [sp, #20]
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	d14d      	bne.n	5d62 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5cc6:	9a04      	ldr	r2, [sp, #16]
    5cc8:	4613      	mov	r3, r2
    5cca:	005b      	lsls	r3, r3, #1
    5ccc:	4413      	add	r3, r2
    5cce:	009b      	lsls	r3, r3, #2
    5cd0:	4a28      	ldr	r2, [pc, #160]	; (5d74 <getCoreDividerConfig+0x144>)
    5cd2:	4413      	add	r3, r2
    5cd4:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5cd6:	4927      	ldr	r1, [pc, #156]	; (5d74 <getCoreDividerConfig+0x144>)
    5cd8:	9a04      	ldr	r2, [sp, #16]
    5cda:	4613      	mov	r3, r2
    5cdc:	005b      	lsls	r3, r3, #1
    5cde:	4413      	add	r3, r2
    5ce0:	009b      	lsls	r3, r3, #2
    5ce2:	440b      	add	r3, r1
    5ce4:	9a01      	ldr	r2, [sp, #4]
    5ce6:	601a      	str	r2, [r3, #0]
        switch(Name)
    5ce8:	9b01      	ldr	r3, [sp, #4]
    5cea:	2b1f      	cmp	r3, #31
    5cec:	d029      	beq.n	5d42 <getCoreDividerConfig+0x112>
    5cee:	9b01      	ldr	r3, [sp, #4]
    5cf0:	2b1f      	cmp	r3, #31
    5cf2:	d838      	bhi.n	5d66 <getCoreDividerConfig+0x136>
    5cf4:	9b01      	ldr	r3, [sp, #4]
    5cf6:	2b1d      	cmp	r3, #29
    5cf8:	d003      	beq.n	5d02 <getCoreDividerConfig+0xd2>
    5cfa:	9b01      	ldr	r3, [sp, #4]
    5cfc:	2b1e      	cmp	r3, #30
    5cfe:	d010      	beq.n	5d22 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5d00:	e031      	b.n	5d66 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5d02:	4b1d      	ldr	r3, [pc, #116]	; (5d78 <getCoreDividerConfig+0x148>)
    5d04:	695b      	ldr	r3, [r3, #20]
    5d06:	0c1b      	lsrs	r3, r3, #16
    5d08:	f003 030f 	and.w	r3, r3, #15
    5d0c:	1c59      	adds	r1, r3, #1
    5d0e:	4819      	ldr	r0, [pc, #100]	; (5d74 <getCoreDividerConfig+0x144>)
    5d10:	9a04      	ldr	r2, [sp, #16]
    5d12:	4613      	mov	r3, r2
    5d14:	005b      	lsls	r3, r3, #1
    5d16:	4413      	add	r3, r2
    5d18:	009b      	lsls	r3, r3, #2
    5d1a:	4403      	add	r3, r0
    5d1c:	3304      	adds	r3, #4
    5d1e:	6019      	str	r1, [r3, #0]
                break;
    5d20:	e022      	b.n	5d68 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5d22:	4b15      	ldr	r3, [pc, #84]	; (5d78 <getCoreDividerConfig+0x148>)
    5d24:	699b      	ldr	r3, [r3, #24]
    5d26:	0c1b      	lsrs	r3, r3, #16
    5d28:	f003 030f 	and.w	r3, r3, #15
    5d2c:	1c59      	adds	r1, r3, #1
    5d2e:	4811      	ldr	r0, [pc, #68]	; (5d74 <getCoreDividerConfig+0x144>)
    5d30:	9a04      	ldr	r2, [sp, #16]
    5d32:	4613      	mov	r3, r2
    5d34:	005b      	lsls	r3, r3, #1
    5d36:	4413      	add	r3, r2
    5d38:	009b      	lsls	r3, r3, #2
    5d3a:	4403      	add	r3, r0
    5d3c:	3304      	adds	r3, #4
    5d3e:	6019      	str	r1, [r3, #0]
                break;
    5d40:	e012      	b.n	5d68 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5d42:	4b0d      	ldr	r3, [pc, #52]	; (5d78 <getCoreDividerConfig+0x148>)
    5d44:	69db      	ldr	r3, [r3, #28]
    5d46:	0c1b      	lsrs	r3, r3, #16
    5d48:	f003 030f 	and.w	r3, r3, #15
    5d4c:	1c59      	adds	r1, r3, #1
    5d4e:	4809      	ldr	r0, [pc, #36]	; (5d74 <getCoreDividerConfig+0x144>)
    5d50:	9a04      	ldr	r2, [sp, #16]
    5d52:	4613      	mov	r3, r2
    5d54:	005b      	lsls	r3, r3, #1
    5d56:	4413      	add	r3, r2
    5d58:	009b      	lsls	r3, r3, #2
    5d5a:	4403      	add	r3, r0
    5d5c:	3304      	adds	r3, #4
    5d5e:	6019      	str	r1, [r3, #0]
                break;
    5d60:	e002      	b.n	5d68 <getCoreDividerConfig+0x138>
        }
    }
    5d62:	bf00      	nop
    5d64:	e000      	b.n	5d68 <getCoreDividerConfig+0x138>
                break;
    5d66:	bf00      	nop

    return ReturnValue;
    5d68:	9b05      	ldr	r3, [sp, #20]
}
    5d6a:	4618      	mov	r0, r3
    5d6c:	b006      	add	sp, #24
    5d6e:	4770      	bx	lr
    5d70:	1fff8bdc 	.word	0x1fff8bdc
    5d74:	1fff8ca8 	.word	0x1fff8ca8
    5d78:	40064000 	.word	0x40064000

00005d7c <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5d7c:	b086      	sub	sp, #24
    5d7e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5d80:	2300      	movs	r3, #0
    5d82:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5d84:	2300      	movs	r3, #0
    5d86:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5d88:	9b01      	ldr	r3, [sp, #4]
    5d8a:	2b23      	cmp	r3, #35	; 0x23
    5d8c:	d00f      	beq.n	5dae <getBusDividerConfig+0x32>
    5d8e:	9b01      	ldr	r3, [sp, #4]
    5d90:	2b23      	cmp	r3, #35	; 0x23
    5d92:	d80f      	bhi.n	5db4 <getBusDividerConfig+0x38>
    5d94:	9b01      	ldr	r3, [sp, #4]
    5d96:	2b21      	cmp	r3, #33	; 0x21
    5d98:	d003      	beq.n	5da2 <getBusDividerConfig+0x26>
    5d9a:	9b01      	ldr	r3, [sp, #4]
    5d9c:	2b22      	cmp	r3, #34	; 0x22
    5d9e:	d003      	beq.n	5da8 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5da0:	e008      	b.n	5db4 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5da2:	2300      	movs	r3, #0
    5da4:	9304      	str	r3, [sp, #16]
            break;
    5da6:	e006      	b.n	5db6 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5da8:	2301      	movs	r3, #1
    5daa:	9304      	str	r3, [sp, #16]
            break;
    5dac:	e003      	b.n	5db6 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5dae:	2302      	movs	r3, #2
    5db0:	9304      	str	r3, [sp, #16]
            break;
    5db2:	e000      	b.n	5db6 <getBusDividerConfig+0x3a>
                break;
    5db4:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5db6:	4b41      	ldr	r3, [pc, #260]	; (5ebc <getBusDividerConfig+0x140>)
    5db8:	681b      	ldr	r3, [r3, #0]
    5dba:	2b00      	cmp	r3, #0
    5dbc:	d026      	beq.n	5e0c <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5dbe:	2300      	movs	r3, #0
    5dc0:	9303      	str	r3, [sp, #12]
    5dc2:	e01c      	b.n	5dfe <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5dc4:	4b3d      	ldr	r3, [pc, #244]	; (5ebc <getBusDividerConfig+0x140>)
    5dc6:	6819      	ldr	r1, [r3, #0]
    5dc8:	9a03      	ldr	r2, [sp, #12]
    5dca:	4613      	mov	r3, r2
    5dcc:	005b      	lsls	r3, r3, #1
    5dce:	4413      	add	r3, r2
    5dd0:	009b      	lsls	r3, r3, #2
    5dd2:	440b      	add	r3, r1
    5dd4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5dd8:	681b      	ldr	r3, [r3, #0]
    5dda:	9a01      	ldr	r2, [sp, #4]
    5ddc:	429a      	cmp	r2, r3
    5dde:	d10b      	bne.n	5df8 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5de0:	4b36      	ldr	r3, [pc, #216]	; (5ebc <getBusDividerConfig+0x140>)
    5de2:	6819      	ldr	r1, [r3, #0]
    5de4:	9a03      	ldr	r2, [sp, #12]
    5de6:	4613      	mov	r3, r2
    5de8:	005b      	lsls	r3, r3, #1
    5dea:	4413      	add	r3, r2
    5dec:	009b      	lsls	r3, r3, #2
    5dee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5df2:	440b      	add	r3, r1
    5df4:	9305      	str	r3, [sp, #20]
                break;
    5df6:	e009      	b.n	5e0c <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5df8:	9b03      	ldr	r3, [sp, #12]
    5dfa:	3301      	adds	r3, #1
    5dfc:	9303      	str	r3, [sp, #12]
    5dfe:	4b2f      	ldr	r3, [pc, #188]	; (5ebc <getBusDividerConfig+0x140>)
    5e00:	681b      	ldr	r3, [r3, #0]
    5e02:	7b1b      	ldrb	r3, [r3, #12]
    5e04:	461a      	mov	r2, r3
    5e06:	9b03      	ldr	r3, [sp, #12]
    5e08:	4293      	cmp	r3, r2
    5e0a:	d3db      	bcc.n	5dc4 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5e0c:	9b05      	ldr	r3, [sp, #20]
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d14d      	bne.n	5eae <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5e12:	9a04      	ldr	r2, [sp, #16]
    5e14:	4613      	mov	r3, r2
    5e16:	005b      	lsls	r3, r3, #1
    5e18:	4413      	add	r3, r2
    5e1a:	009b      	lsls	r3, r3, #2
    5e1c:	4a28      	ldr	r2, [pc, #160]	; (5ec0 <getBusDividerConfig+0x144>)
    5e1e:	4413      	add	r3, r2
    5e20:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5e22:	4927      	ldr	r1, [pc, #156]	; (5ec0 <getBusDividerConfig+0x144>)
    5e24:	9a04      	ldr	r2, [sp, #16]
    5e26:	4613      	mov	r3, r2
    5e28:	005b      	lsls	r3, r3, #1
    5e2a:	4413      	add	r3, r2
    5e2c:	009b      	lsls	r3, r3, #2
    5e2e:	440b      	add	r3, r1
    5e30:	9a01      	ldr	r2, [sp, #4]
    5e32:	601a      	str	r2, [r3, #0]
        switch(Name)
    5e34:	9b01      	ldr	r3, [sp, #4]
    5e36:	2b23      	cmp	r3, #35	; 0x23
    5e38:	d029      	beq.n	5e8e <getBusDividerConfig+0x112>
    5e3a:	9b01      	ldr	r3, [sp, #4]
    5e3c:	2b23      	cmp	r3, #35	; 0x23
    5e3e:	d838      	bhi.n	5eb2 <getBusDividerConfig+0x136>
    5e40:	9b01      	ldr	r3, [sp, #4]
    5e42:	2b21      	cmp	r3, #33	; 0x21
    5e44:	d003      	beq.n	5e4e <getBusDividerConfig+0xd2>
    5e46:	9b01      	ldr	r3, [sp, #4]
    5e48:	2b22      	cmp	r3, #34	; 0x22
    5e4a:	d010      	beq.n	5e6e <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5e4c:	e031      	b.n	5eb2 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5e4e:	4b1d      	ldr	r3, [pc, #116]	; (5ec4 <getBusDividerConfig+0x148>)
    5e50:	695b      	ldr	r3, [r3, #20]
    5e52:	091b      	lsrs	r3, r3, #4
    5e54:	f003 030f 	and.w	r3, r3, #15
    5e58:	1c59      	adds	r1, r3, #1
    5e5a:	4819      	ldr	r0, [pc, #100]	; (5ec0 <getBusDividerConfig+0x144>)
    5e5c:	9a04      	ldr	r2, [sp, #16]
    5e5e:	4613      	mov	r3, r2
    5e60:	005b      	lsls	r3, r3, #1
    5e62:	4413      	add	r3, r2
    5e64:	009b      	lsls	r3, r3, #2
    5e66:	4403      	add	r3, r0
    5e68:	3304      	adds	r3, #4
    5e6a:	6019      	str	r1, [r3, #0]
                break;
    5e6c:	e022      	b.n	5eb4 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5e6e:	4b15      	ldr	r3, [pc, #84]	; (5ec4 <getBusDividerConfig+0x148>)
    5e70:	699b      	ldr	r3, [r3, #24]
    5e72:	091b      	lsrs	r3, r3, #4
    5e74:	f003 030f 	and.w	r3, r3, #15
    5e78:	1c59      	adds	r1, r3, #1
    5e7a:	4811      	ldr	r0, [pc, #68]	; (5ec0 <getBusDividerConfig+0x144>)
    5e7c:	9a04      	ldr	r2, [sp, #16]
    5e7e:	4613      	mov	r3, r2
    5e80:	005b      	lsls	r3, r3, #1
    5e82:	4413      	add	r3, r2
    5e84:	009b      	lsls	r3, r3, #2
    5e86:	4403      	add	r3, r0
    5e88:	3304      	adds	r3, #4
    5e8a:	6019      	str	r1, [r3, #0]
                break;
    5e8c:	e012      	b.n	5eb4 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5e8e:	4b0d      	ldr	r3, [pc, #52]	; (5ec4 <getBusDividerConfig+0x148>)
    5e90:	69db      	ldr	r3, [r3, #28]
    5e92:	091b      	lsrs	r3, r3, #4
    5e94:	f003 030f 	and.w	r3, r3, #15
    5e98:	1c59      	adds	r1, r3, #1
    5e9a:	4809      	ldr	r0, [pc, #36]	; (5ec0 <getBusDividerConfig+0x144>)
    5e9c:	9a04      	ldr	r2, [sp, #16]
    5e9e:	4613      	mov	r3, r2
    5ea0:	005b      	lsls	r3, r3, #1
    5ea2:	4413      	add	r3, r2
    5ea4:	009b      	lsls	r3, r3, #2
    5ea6:	4403      	add	r3, r0
    5ea8:	3304      	adds	r3, #4
    5eaa:	6019      	str	r1, [r3, #0]
                break;
    5eac:	e002      	b.n	5eb4 <getBusDividerConfig+0x138>
        }
    }
    5eae:	bf00      	nop
    5eb0:	e000      	b.n	5eb4 <getBusDividerConfig+0x138>
                break;
    5eb2:	bf00      	nop

    return ReturnValue;
    5eb4:	9b05      	ldr	r3, [sp, #20]
}
    5eb6:	4618      	mov	r0, r3
    5eb8:	b006      	add	sp, #24
    5eba:	4770      	bx	lr
    5ebc:	1fff8bdc 	.word	0x1fff8bdc
    5ec0:	1fff8ccc 	.word	0x1fff8ccc
    5ec4:	40064000 	.word	0x40064000

00005ec8 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5ec8:	b086      	sub	sp, #24
    5eca:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5ecc:	2300      	movs	r3, #0
    5ece:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5ed0:	2300      	movs	r3, #0
    5ed2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5ed4:	9b01      	ldr	r3, [sp, #4]
    5ed6:	2b27      	cmp	r3, #39	; 0x27
    5ed8:	d00f      	beq.n	5efa <getSlowDividerConfig+0x32>
    5eda:	9b01      	ldr	r3, [sp, #4]
    5edc:	2b27      	cmp	r3, #39	; 0x27
    5ede:	d80f      	bhi.n	5f00 <getSlowDividerConfig+0x38>
    5ee0:	9b01      	ldr	r3, [sp, #4]
    5ee2:	2b25      	cmp	r3, #37	; 0x25
    5ee4:	d003      	beq.n	5eee <getSlowDividerConfig+0x26>
    5ee6:	9b01      	ldr	r3, [sp, #4]
    5ee8:	2b26      	cmp	r3, #38	; 0x26
    5eea:	d003      	beq.n	5ef4 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5eec:	e008      	b.n	5f00 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5eee:	2300      	movs	r3, #0
    5ef0:	9304      	str	r3, [sp, #16]
            break;
    5ef2:	e006      	b.n	5f02 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5ef4:	2301      	movs	r3, #1
    5ef6:	9304      	str	r3, [sp, #16]
            break;
    5ef8:	e003      	b.n	5f02 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5efa:	2302      	movs	r3, #2
    5efc:	9304      	str	r3, [sp, #16]
            break;
    5efe:	e000      	b.n	5f02 <getSlowDividerConfig+0x3a>
                break;
    5f00:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5f02:	4b40      	ldr	r3, [pc, #256]	; (6004 <getSlowDividerConfig+0x13c>)
    5f04:	681b      	ldr	r3, [r3, #0]
    5f06:	2b00      	cmp	r3, #0
    5f08:	d026      	beq.n	5f58 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5f0a:	2300      	movs	r3, #0
    5f0c:	9303      	str	r3, [sp, #12]
    5f0e:	e01c      	b.n	5f4a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5f10:	4b3c      	ldr	r3, [pc, #240]	; (6004 <getSlowDividerConfig+0x13c>)
    5f12:	6819      	ldr	r1, [r3, #0]
    5f14:	9a03      	ldr	r2, [sp, #12]
    5f16:	4613      	mov	r3, r2
    5f18:	005b      	lsls	r3, r3, #1
    5f1a:	4413      	add	r3, r2
    5f1c:	009b      	lsls	r3, r3, #2
    5f1e:	440b      	add	r3, r1
    5f20:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5f24:	681b      	ldr	r3, [r3, #0]
    5f26:	9a01      	ldr	r2, [sp, #4]
    5f28:	429a      	cmp	r2, r3
    5f2a:	d10b      	bne.n	5f44 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5f2c:	4b35      	ldr	r3, [pc, #212]	; (6004 <getSlowDividerConfig+0x13c>)
    5f2e:	6819      	ldr	r1, [r3, #0]
    5f30:	9a03      	ldr	r2, [sp, #12]
    5f32:	4613      	mov	r3, r2
    5f34:	005b      	lsls	r3, r3, #1
    5f36:	4413      	add	r3, r2
    5f38:	009b      	lsls	r3, r3, #2
    5f3a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5f3e:	440b      	add	r3, r1
    5f40:	9305      	str	r3, [sp, #20]
                break;
    5f42:	e009      	b.n	5f58 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5f44:	9b03      	ldr	r3, [sp, #12]
    5f46:	3301      	adds	r3, #1
    5f48:	9303      	str	r3, [sp, #12]
    5f4a:	4b2e      	ldr	r3, [pc, #184]	; (6004 <getSlowDividerConfig+0x13c>)
    5f4c:	681b      	ldr	r3, [r3, #0]
    5f4e:	7b1b      	ldrb	r3, [r3, #12]
    5f50:	461a      	mov	r2, r3
    5f52:	9b03      	ldr	r3, [sp, #12]
    5f54:	4293      	cmp	r3, r2
    5f56:	d3db      	bcc.n	5f10 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5f58:	9b05      	ldr	r3, [sp, #20]
    5f5a:	2b00      	cmp	r3, #0
    5f5c:	d14a      	bne.n	5ff4 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5f5e:	9a04      	ldr	r2, [sp, #16]
    5f60:	4613      	mov	r3, r2
    5f62:	005b      	lsls	r3, r3, #1
    5f64:	4413      	add	r3, r2
    5f66:	009b      	lsls	r3, r3, #2
    5f68:	4a27      	ldr	r2, [pc, #156]	; (6008 <getSlowDividerConfig+0x140>)
    5f6a:	4413      	add	r3, r2
    5f6c:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5f6e:	4926      	ldr	r1, [pc, #152]	; (6008 <getSlowDividerConfig+0x140>)
    5f70:	9a04      	ldr	r2, [sp, #16]
    5f72:	4613      	mov	r3, r2
    5f74:	005b      	lsls	r3, r3, #1
    5f76:	4413      	add	r3, r2
    5f78:	009b      	lsls	r3, r3, #2
    5f7a:	440b      	add	r3, r1
    5f7c:	9a01      	ldr	r2, [sp, #4]
    5f7e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5f80:	9b01      	ldr	r3, [sp, #4]
    5f82:	2b27      	cmp	r3, #39	; 0x27
    5f84:	d027      	beq.n	5fd6 <getSlowDividerConfig+0x10e>
    5f86:	9b01      	ldr	r3, [sp, #4]
    5f88:	2b27      	cmp	r3, #39	; 0x27
    5f8a:	d835      	bhi.n	5ff8 <getSlowDividerConfig+0x130>
    5f8c:	9b01      	ldr	r3, [sp, #4]
    5f8e:	2b25      	cmp	r3, #37	; 0x25
    5f90:	d003      	beq.n	5f9a <getSlowDividerConfig+0xd2>
    5f92:	9b01      	ldr	r3, [sp, #4]
    5f94:	2b26      	cmp	r3, #38	; 0x26
    5f96:	d00f      	beq.n	5fb8 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5f98:	e02e      	b.n	5ff8 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5f9a:	4b1c      	ldr	r3, [pc, #112]	; (600c <getSlowDividerConfig+0x144>)
    5f9c:	695b      	ldr	r3, [r3, #20]
    5f9e:	f003 030f 	and.w	r3, r3, #15
    5fa2:	1c59      	adds	r1, r3, #1
    5fa4:	4818      	ldr	r0, [pc, #96]	; (6008 <getSlowDividerConfig+0x140>)
    5fa6:	9a04      	ldr	r2, [sp, #16]
    5fa8:	4613      	mov	r3, r2
    5faa:	005b      	lsls	r3, r3, #1
    5fac:	4413      	add	r3, r2
    5fae:	009b      	lsls	r3, r3, #2
    5fb0:	4403      	add	r3, r0
    5fb2:	3304      	adds	r3, #4
    5fb4:	6019      	str	r1, [r3, #0]
                break;
    5fb6:	e020      	b.n	5ffa <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5fb8:	4b14      	ldr	r3, [pc, #80]	; (600c <getSlowDividerConfig+0x144>)
    5fba:	699b      	ldr	r3, [r3, #24]
    5fbc:	f003 030f 	and.w	r3, r3, #15
    5fc0:	1c59      	adds	r1, r3, #1
    5fc2:	4811      	ldr	r0, [pc, #68]	; (6008 <getSlowDividerConfig+0x140>)
    5fc4:	9a04      	ldr	r2, [sp, #16]
    5fc6:	4613      	mov	r3, r2
    5fc8:	005b      	lsls	r3, r3, #1
    5fca:	4413      	add	r3, r2
    5fcc:	009b      	lsls	r3, r3, #2
    5fce:	4403      	add	r3, r0
    5fd0:	3304      	adds	r3, #4
    5fd2:	6019      	str	r1, [r3, #0]
                break;
    5fd4:	e011      	b.n	5ffa <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5fd6:	4b0d      	ldr	r3, [pc, #52]	; (600c <getSlowDividerConfig+0x144>)
    5fd8:	69db      	ldr	r3, [r3, #28]
    5fda:	f003 030f 	and.w	r3, r3, #15
    5fde:	1c59      	adds	r1, r3, #1
    5fe0:	4809      	ldr	r0, [pc, #36]	; (6008 <getSlowDividerConfig+0x140>)
    5fe2:	9a04      	ldr	r2, [sp, #16]
    5fe4:	4613      	mov	r3, r2
    5fe6:	005b      	lsls	r3, r3, #1
    5fe8:	4413      	add	r3, r2
    5fea:	009b      	lsls	r3, r3, #2
    5fec:	4403      	add	r3, r0
    5fee:	3304      	adds	r3, #4
    5ff0:	6019      	str	r1, [r3, #0]
                break;
    5ff2:	e002      	b.n	5ffa <getSlowDividerConfig+0x132>
        }
    }
    5ff4:	bf00      	nop
    5ff6:	e000      	b.n	5ffa <getSlowDividerConfig+0x132>
                break;
    5ff8:	bf00      	nop

    return ReturnValue;
    5ffa:	9b05      	ldr	r3, [sp, #20]
}
    5ffc:	4618      	mov	r0, r3
    5ffe:	b006      	add	sp, #24
    6000:	4770      	bx	lr
    6002:	bf00      	nop
    6004:	1fff8bdc 	.word	0x1fff8bdc
    6008:	1fff8cf0 	.word	0x1fff8cf0
    600c:	40064000 	.word	0x40064000

00006010 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    6010:	b500      	push	{lr}
    6012:	b083      	sub	sp, #12
    6014:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    6016:	4b64      	ldr	r3, [pc, #400]	; (61a8 <Clock_Ip_ClockInitializeObjects+0x198>)
    6018:	781b      	ldrb	r3, [r3, #0]
    601a:	f083 0301 	eor.w	r3, r3, #1
    601e:	b2db      	uxtb	r3, r3
    6020:	2b00      	cmp	r3, #0
    6022:	d05b      	beq.n	60dc <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    6024:	4b60      	ldr	r3, [pc, #384]	; (61a8 <Clock_Ip_ClockInitializeObjects+0x198>)
    6026:	2201      	movs	r2, #1
    6028:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    602a:	4b60      	ldr	r3, [pc, #384]	; (61ac <Clock_Ip_ClockInitializeObjects+0x19c>)
    602c:	785b      	ldrb	r3, [r3, #1]
    602e:	461a      	mov	r2, r3
    6030:	4613      	mov	r3, r2
    6032:	009b      	lsls	r3, r3, #2
    6034:	4413      	add	r3, r2
    6036:	009b      	lsls	r3, r3, #2
    6038:	4a5d      	ldr	r2, [pc, #372]	; (61b0 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    603a:	4413      	add	r3, r2
    603c:	4a5d      	ldr	r2, [pc, #372]	; (61b4 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    603e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    6040:	4b5d      	ldr	r3, [pc, #372]	; (61b8 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    6042:	785b      	ldrb	r3, [r3, #1]
    6044:	461a      	mov	r2, r3
    6046:	4613      	mov	r3, r2
    6048:	009b      	lsls	r3, r3, #2
    604a:	4413      	add	r3, r2
    604c:	009b      	lsls	r3, r3, #2
    604e:	4a5b      	ldr	r2, [pc, #364]	; (61bc <Clock_Ip_ClockInitializeObjects+0x1ac>)
    6050:	4413      	add	r3, r2
    6052:	4a5b      	ldr	r2, [pc, #364]	; (61c0 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    6054:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    6056:	4b5b      	ldr	r3, [pc, #364]	; (61c4 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    6058:	791b      	ldrb	r3, [r3, #4]
    605a:	461a      	mov	r2, r3
    605c:	4613      	mov	r3, r2
    605e:	005b      	lsls	r3, r3, #1
    6060:	4413      	add	r3, r2
    6062:	009b      	lsls	r3, r3, #2
    6064:	4a58      	ldr	r2, [pc, #352]	; (61c8 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    6066:	4413      	add	r3, r2
    6068:	4a58      	ldr	r2, [pc, #352]	; (61cc <Clock_Ip_ClockInitializeObjects+0x1bc>)
    606a:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    606c:	4b58      	ldr	r3, [pc, #352]	; (61d0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    606e:	795b      	ldrb	r3, [r3, #5]
    6070:	00db      	lsls	r3, r3, #3
    6072:	4a58      	ldr	r2, [pc, #352]	; (61d4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    6074:	4413      	add	r3, r2
    6076:	4a58      	ldr	r2, [pc, #352]	; (61d8 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    6078:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    607a:	4b55      	ldr	r3, [pc, #340]	; (61d0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    607c:	79db      	ldrb	r3, [r3, #7]
    607e:	00db      	lsls	r3, r3, #3
    6080:	4a54      	ldr	r2, [pc, #336]	; (61d4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    6082:	4413      	add	r3, r2
    6084:	4a55      	ldr	r2, [pc, #340]	; (61dc <Clock_Ip_ClockInitializeObjects+0x1cc>)
    6086:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    6088:	4b55      	ldr	r3, [pc, #340]	; (61e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    608a:	799b      	ldrb	r3, [r3, #6]
    608c:	009b      	lsls	r3, r3, #2
    608e:	4a55      	ldr	r2, [pc, #340]	; (61e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    6090:	4413      	add	r3, r2
    6092:	4a55      	ldr	r2, [pc, #340]	; (61e8 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    6094:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    6096:	4b52      	ldr	r3, [pc, #328]	; (61e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    6098:	7a1b      	ldrb	r3, [r3, #8]
    609a:	009b      	lsls	r3, r3, #2
    609c:	4a51      	ldr	r2, [pc, #324]	; (61e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    609e:	4413      	add	r3, r2
    60a0:	4a52      	ldr	r2, [pc, #328]	; (61ec <Clock_Ip_ClockInitializeObjects+0x1dc>)
    60a2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    60a4:	4b4e      	ldr	r3, [pc, #312]	; (61e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    60a6:	7a5b      	ldrb	r3, [r3, #9]
    60a8:	009b      	lsls	r3, r3, #2
    60aa:	4a4e      	ldr	r2, [pc, #312]	; (61e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    60ac:	4413      	add	r3, r2
    60ae:	4a50      	ldr	r2, [pc, #320]	; (61f0 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    60b0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    60b2:	4b4b      	ldr	r3, [pc, #300]	; (61e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    60b4:	7adb      	ldrb	r3, [r3, #11]
    60b6:	009b      	lsls	r3, r3, #2
    60b8:	4a4a      	ldr	r2, [pc, #296]	; (61e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    60ba:	4413      	add	r3, r2
    60bc:	4a4d      	ldr	r2, [pc, #308]	; (61f4 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    60be:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    60c0:	4b47      	ldr	r3, [pc, #284]	; (61e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    60c2:	7b1b      	ldrb	r3, [r3, #12]
    60c4:	009b      	lsls	r3, r3, #2
    60c6:	4a47      	ldr	r2, [pc, #284]	; (61e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    60c8:	4413      	add	r3, r2
    60ca:	4a4b      	ldr	r2, [pc, #300]	; (61f8 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    60cc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    60ce:	4b44      	ldr	r3, [pc, #272]	; (61e0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    60d0:	7b9b      	ldrb	r3, [r3, #14]
    60d2:	009b      	lsls	r3, r3, #2
    60d4:	4a43      	ldr	r2, [pc, #268]	; (61e4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    60d6:	4413      	add	r3, r2
    60d8:	4a48      	ldr	r2, [pc, #288]	; (61fc <Clock_Ip_ClockInitializeObjects+0x1ec>)
    60da:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    60dc:	4b48      	ldr	r3, [pc, #288]	; (6200 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    60de:	781b      	ldrb	r3, [r3, #0]
    60e0:	2b00      	cmp	r3, #0
    60e2:	d002      	beq.n	60ea <Clock_Ip_ClockInitializeObjects+0xda>
    60e4:	9b01      	ldr	r3, [sp, #4]
    60e6:	2b00      	cmp	r3, #0
    60e8:	d003      	beq.n	60f2 <Clock_Ip_ClockInitializeObjects+0xe2>
    60ea:	4b46      	ldr	r3, [pc, #280]	; (6204 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    60ec:	781b      	ldrb	r3, [r3, #0]
    60ee:	2b00      	cmp	r3, #0
    60f0:	d056      	beq.n	61a0 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    60f2:	f7ff fc09 	bl	5908 <getFircConfig>
    60f6:	4603      	mov	r3, r0
    60f8:	4a43      	ldr	r2, [pc, #268]	; (6208 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    60fa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    60fc:	f7ff fc60 	bl	59c0 <getSoscConfig>
    6100:	4603      	mov	r3, r0
    6102:	4a42      	ldr	r2, [pc, #264]	; (620c <Clock_Ip_ClockInitializeObjects+0x1fc>)
    6104:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    6106:	f7ff fca7 	bl	5a58 <getSpllConfig>
    610a:	4603      	mov	r3, r0
    610c:	4a40      	ldr	r2, [pc, #256]	; (6210 <Clock_Ip_ClockInitializeObjects+0x200>)
    610e:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    6110:	2019      	movs	r0, #25
    6112:	f7ff fcfb 	bl	5b0c <getSelectorConfig>
    6116:	4603      	mov	r3, r0
    6118:	4a3e      	ldr	r2, [pc, #248]	; (6214 <Clock_Ip_ClockInitializeObjects+0x204>)
    611a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    611c:	201a      	movs	r0, #26
    611e:	f7ff fcf5 	bl	5b0c <getSelectorConfig>
    6122:	4603      	mov	r3, r0
    6124:	4a3c      	ldr	r2, [pc, #240]	; (6218 <Clock_Ip_ClockInitializeObjects+0x208>)
    6126:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    6128:	201b      	movs	r0, #27
    612a:	f7ff fcef 	bl	5b0c <getSelectorConfig>
    612e:	4603      	mov	r3, r0
    6130:	4a3a      	ldr	r2, [pc, #232]	; (621c <Clock_Ip_ClockInitializeObjects+0x20c>)
    6132:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    6134:	201d      	movs	r0, #29
    6136:	f7ff fd7b 	bl	5c30 <getCoreDividerConfig>
    613a:	4603      	mov	r3, r0
    613c:	4a38      	ldr	r2, [pc, #224]	; (6220 <Clock_Ip_ClockInitializeObjects+0x210>)
    613e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    6140:	201e      	movs	r0, #30
    6142:	f7ff fd75 	bl	5c30 <getCoreDividerConfig>
    6146:	4603      	mov	r3, r0
    6148:	4a36      	ldr	r2, [pc, #216]	; (6224 <Clock_Ip_ClockInitializeObjects+0x214>)
    614a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    614c:	201f      	movs	r0, #31
    614e:	f7ff fd6f 	bl	5c30 <getCoreDividerConfig>
    6152:	4603      	mov	r3, r0
    6154:	4a34      	ldr	r2, [pc, #208]	; (6228 <Clock_Ip_ClockInitializeObjects+0x218>)
    6156:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    6158:	2021      	movs	r0, #33	; 0x21
    615a:	f7ff fe0f 	bl	5d7c <getBusDividerConfig>
    615e:	4603      	mov	r3, r0
    6160:	4a32      	ldr	r2, [pc, #200]	; (622c <Clock_Ip_ClockInitializeObjects+0x21c>)
    6162:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    6164:	2022      	movs	r0, #34	; 0x22
    6166:	f7ff fe09 	bl	5d7c <getBusDividerConfig>
    616a:	4603      	mov	r3, r0
    616c:	4a30      	ldr	r2, [pc, #192]	; (6230 <Clock_Ip_ClockInitializeObjects+0x220>)
    616e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    6170:	2023      	movs	r0, #35	; 0x23
    6172:	f7ff fe03 	bl	5d7c <getBusDividerConfig>
    6176:	4603      	mov	r3, r0
    6178:	4a2e      	ldr	r2, [pc, #184]	; (6234 <Clock_Ip_ClockInitializeObjects+0x224>)
    617a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    617c:	2025      	movs	r0, #37	; 0x25
    617e:	f7ff fea3 	bl	5ec8 <getSlowDividerConfig>
    6182:	4603      	mov	r3, r0
    6184:	4a2c      	ldr	r2, [pc, #176]	; (6238 <Clock_Ip_ClockInitializeObjects+0x228>)
    6186:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    6188:	2026      	movs	r0, #38	; 0x26
    618a:	f7ff fe9d 	bl	5ec8 <getSlowDividerConfig>
    618e:	4603      	mov	r3, r0
    6190:	4a2a      	ldr	r2, [pc, #168]	; (623c <Clock_Ip_ClockInitializeObjects+0x22c>)
    6192:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    6194:	2027      	movs	r0, #39	; 0x27
    6196:	f7ff fe97 	bl	5ec8 <getSlowDividerConfig>
    619a:	4603      	mov	r3, r0
    619c:	4a28      	ldr	r2, [pc, #160]	; (6240 <Clock_Ip_ClockInitializeObjects+0x230>)
    619e:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    61a0:	bf00      	nop
    61a2:	b003      	add	sp, #12
    61a4:	f85d fb04 	ldr.w	pc, [sp], #4
    61a8:	1fff8d14 	.word	0x1fff8d14
    61ac:	00019090 	.word	0x00019090
    61b0:	000196dc 	.word	0x000196dc
    61b4:	1fff8be0 	.word	0x1fff8be0
    61b8:	00019050 	.word	0x00019050
    61bc:	00019624 	.word	0x00019624
    61c0:	1fff8be4 	.word	0x1fff8be4
    61c4:	00019060 	.word	0x00019060
    61c8:	00019690 	.word	0x00019690
    61cc:	1fff8be8 	.word	0x1fff8be8
    61d0:	000190a0 	.word	0x000190a0
    61d4:	00019708 	.word	0x00019708
    61d8:	1fff8bec 	.word	0x1fff8bec
    61dc:	1fff8c28 	.word	0x1fff8c28
    61e0:	00019030 	.word	0x00019030
    61e4:	000195e0 	.word	0x000195e0
    61e8:	1fff8bf0 	.word	0x1fff8bf0
    61ec:	1fff8c2c 	.word	0x1fff8c2c
    61f0:	1fff8bf4 	.word	0x1fff8bf4
    61f4:	1fff8c30 	.word	0x1fff8c30
    61f8:	1fff8bf8 	.word	0x1fff8bf8
    61fc:	1fff8c34 	.word	0x1fff8c34
    6200:	1fff8b19 	.word	0x1fff8b19
    6204:	1fff8b10 	.word	0x1fff8b10
    6208:	1fff8bfc 	.word	0x1fff8bfc
    620c:	1fff8c00 	.word	0x1fff8c00
    6210:	1fff8c04 	.word	0x1fff8c04
    6214:	1fff8c08 	.word	0x1fff8c08
    6218:	1fff8c0c 	.word	0x1fff8c0c
    621c:	1fff8c38 	.word	0x1fff8c38
    6220:	1fff8c10 	.word	0x1fff8c10
    6224:	1fff8c14 	.word	0x1fff8c14
    6228:	1fff8c3c 	.word	0x1fff8c3c
    622c:	1fff8c18 	.word	0x1fff8c18
    6230:	1fff8c1c 	.word	0x1fff8c1c
    6234:	1fff8c40 	.word	0x1fff8c40
    6238:	1fff8c20 	.word	0x1fff8c20
    623c:	1fff8c24 	.word	0x1fff8c24
    6240:	1fff8c44 	.word	0x1fff8c44

00006244 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    6244:	b500      	push	{lr}
    6246:	b083      	sub	sp, #12
    6248:	9001      	str	r0, [sp, #4]
    624a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    624c:	9b01      	ldr	r3, [sp, #4]
    624e:	2b03      	cmp	r3, #3
    6250:	f000 8090 	beq.w	6374 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    6254:	9b01      	ldr	r3, [sp, #4]
    6256:	2b03      	cmp	r3, #3
    6258:	f200 80d3 	bhi.w	6402 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    625c:	9b01      	ldr	r3, [sp, #4]
    625e:	2b00      	cmp	r3, #0
    6260:	d040      	beq.n	62e4 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    6262:	9b01      	ldr	r3, [sp, #4]
    6264:	3b01      	subs	r3, #1
    6266:	2b01      	cmp	r3, #1
    6268:	f200 80cb 	bhi.w	6402 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    626c:	9b00      	ldr	r3, [sp, #0]
    626e:	2b00      	cmp	r3, #0
    6270:	f040 80c9 	bne.w	6406 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    6274:	4b68      	ldr	r3, [pc, #416]	; (6418 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    6276:	2200      	movs	r2, #0
    6278:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    627a:	4b68      	ldr	r3, [pc, #416]	; (641c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    627c:	681b      	ldr	r3, [r3, #0]
    627e:	685b      	ldr	r3, [r3, #4]
    6280:	4a67      	ldr	r2, [pc, #412]	; (6420 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    6282:	6812      	ldr	r2, [r2, #0]
    6284:	4610      	mov	r0, r2
    6286:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    6288:	4b66      	ldr	r3, [pc, #408]	; (6424 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    628a:	681b      	ldr	r3, [r3, #0]
    628c:	681b      	ldr	r3, [r3, #0]
    628e:	4a66      	ldr	r2, [pc, #408]	; (6428 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    6290:	6812      	ldr	r2, [r2, #0]
    6292:	4610      	mov	r0, r2
    6294:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    6296:	4b65      	ldr	r3, [pc, #404]	; (642c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    6298:	681b      	ldr	r3, [r3, #0]
    629a:	681b      	ldr	r3, [r3, #0]
    629c:	4a64      	ldr	r2, [pc, #400]	; (6430 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    629e:	6812      	ldr	r2, [r2, #0]
    62a0:	4610      	mov	r0, r2
    62a2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    62a4:	4b63      	ldr	r3, [pc, #396]	; (6434 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    62a6:	681b      	ldr	r3, [r3, #0]
    62a8:	681b      	ldr	r3, [r3, #0]
    62aa:	4a63      	ldr	r2, [pc, #396]	; (6438 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    62ac:	6812      	ldr	r2, [r2, #0]
    62ae:	4610      	mov	r0, r2
    62b0:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    62b2:	4b62      	ldr	r3, [pc, #392]	; (643c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    62b4:	681b      	ldr	r3, [r3, #0]
    62b6:	691b      	ldr	r3, [r3, #16]
    62b8:	4a61      	ldr	r2, [pc, #388]	; (6440 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    62ba:	6812      	ldr	r2, [r2, #0]
    62bc:	6812      	ldr	r2, [r2, #0]
    62be:	4610      	mov	r0, r2
    62c0:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    62c2:	4b60      	ldr	r3, [pc, #384]	; (6444 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    62c4:	681b      	ldr	r3, [r3, #0]
    62c6:	68db      	ldr	r3, [r3, #12]
    62c8:	4a5f      	ldr	r2, [pc, #380]	; (6448 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    62ca:	6812      	ldr	r2, [r2, #0]
    62cc:	6812      	ldr	r2, [r2, #0]
    62ce:	4610      	mov	r0, r2
    62d0:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    62d2:	4b5e      	ldr	r3, [pc, #376]	; (644c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    62d4:	681b      	ldr	r3, [r3, #0]
    62d6:	689b      	ldr	r3, [r3, #8]
    62d8:	4a5d      	ldr	r2, [pc, #372]	; (6450 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    62da:	6812      	ldr	r2, [r2, #0]
    62dc:	6812      	ldr	r2, [r2, #0]
    62de:	4610      	mov	r0, r2
    62e0:	4798      	blx	r3
            }
        }
        break;
    62e2:	e090      	b.n	6406 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    62e4:	9b00      	ldr	r3, [sp, #0]
    62e6:	2b02      	cmp	r3, #2
    62e8:	f040 808f 	bne.w	640a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    62ec:	4b4a      	ldr	r3, [pc, #296]	; (6418 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    62ee:	2201      	movs	r2, #1
    62f0:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    62f2:	4b56      	ldr	r3, [pc, #344]	; (644c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    62f4:	681b      	ldr	r3, [r3, #0]
    62f6:	685b      	ldr	r3, [r3, #4]
    62f8:	4a55      	ldr	r2, [pc, #340]	; (6450 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    62fa:	6812      	ldr	r2, [r2, #0]
    62fc:	4610      	mov	r0, r2
    62fe:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    6300:	4b50      	ldr	r3, [pc, #320]	; (6444 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6302:	681b      	ldr	r3, [r3, #0]
    6304:	691b      	ldr	r3, [r3, #16]
    6306:	4a50      	ldr	r2, [pc, #320]	; (6448 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6308:	6812      	ldr	r2, [r2, #0]
    630a:	4610      	mov	r0, r2
    630c:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    630e:	4b4d      	ldr	r3, [pc, #308]	; (6444 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6310:	681b      	ldr	r3, [r3, #0]
    6312:	689b      	ldr	r3, [r3, #8]
    6314:	4a4c      	ldr	r2, [pc, #304]	; (6448 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6316:	6812      	ldr	r2, [r2, #0]
    6318:	4610      	mov	r0, r2
    631a:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    631c:	4b47      	ldr	r3, [pc, #284]	; (643c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    631e:	681b      	ldr	r3, [r3, #0]
    6320:	68db      	ldr	r3, [r3, #12]
    6322:	4a47      	ldr	r2, [pc, #284]	; (6440 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6324:	6812      	ldr	r2, [r2, #0]
    6326:	4610      	mov	r0, r2
    6328:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    632a:	4b44      	ldr	r3, [pc, #272]	; (643c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    632c:	681b      	ldr	r3, [r3, #0]
    632e:	689b      	ldr	r3, [r3, #8]
    6330:	4a43      	ldr	r2, [pc, #268]	; (6440 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6332:	6812      	ldr	r2, [r2, #0]
    6334:	6812      	ldr	r2, [r2, #0]
    6336:	4610      	mov	r0, r2
    6338:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    633a:	4b38      	ldr	r3, [pc, #224]	; (641c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    633c:	681b      	ldr	r3, [r3, #0]
    633e:	685b      	ldr	r3, [r3, #4]
    6340:	4a44      	ldr	r2, [pc, #272]	; (6454 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    6342:	6812      	ldr	r2, [r2, #0]
    6344:	4610      	mov	r0, r2
    6346:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    6348:	4b36      	ldr	r3, [pc, #216]	; (6424 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    634a:	681b      	ldr	r3, [r3, #0]
    634c:	681b      	ldr	r3, [r3, #0]
    634e:	4a42      	ldr	r2, [pc, #264]	; (6458 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    6350:	6812      	ldr	r2, [r2, #0]
    6352:	4610      	mov	r0, r2
    6354:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    6356:	4b35      	ldr	r3, [pc, #212]	; (642c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    6358:	681b      	ldr	r3, [r3, #0]
    635a:	681b      	ldr	r3, [r3, #0]
    635c:	4a3f      	ldr	r2, [pc, #252]	; (645c <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    635e:	6812      	ldr	r2, [r2, #0]
    6360:	4610      	mov	r0, r2
    6362:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    6364:	4b33      	ldr	r3, [pc, #204]	; (6434 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    6366:	681b      	ldr	r3, [r3, #0]
    6368:	681b      	ldr	r3, [r3, #0]
    636a:	4a3d      	ldr	r2, [pc, #244]	; (6460 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    636c:	6812      	ldr	r2, [r2, #0]
    636e:	4610      	mov	r0, r2
    6370:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    6372:	e04a      	b.n	640a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    6374:	9b00      	ldr	r3, [sp, #0]
    6376:	2b02      	cmp	r3, #2
    6378:	d149      	bne.n	640e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    637a:	4b27      	ldr	r3, [pc, #156]	; (6418 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    637c:	2201      	movs	r2, #1
    637e:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    6380:	4b32      	ldr	r3, [pc, #200]	; (644c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    6382:	681b      	ldr	r3, [r3, #0]
    6384:	685b      	ldr	r3, [r3, #4]
    6386:	4a32      	ldr	r2, [pc, #200]	; (6450 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    6388:	6812      	ldr	r2, [r2, #0]
    638a:	4610      	mov	r0, r2
    638c:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    638e:	4b2d      	ldr	r3, [pc, #180]	; (6444 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6390:	681b      	ldr	r3, [r3, #0]
    6392:	691b      	ldr	r3, [r3, #16]
    6394:	4a2c      	ldr	r2, [pc, #176]	; (6448 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6396:	6812      	ldr	r2, [r2, #0]
    6398:	4610      	mov	r0, r2
    639a:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    639c:	4b29      	ldr	r3, [pc, #164]	; (6444 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    639e:	681b      	ldr	r3, [r3, #0]
    63a0:	689b      	ldr	r3, [r3, #8]
    63a2:	4a29      	ldr	r2, [pc, #164]	; (6448 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    63a4:	6812      	ldr	r2, [r2, #0]
    63a6:	4610      	mov	r0, r2
    63a8:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    63aa:	4b24      	ldr	r3, [pc, #144]	; (643c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    63ac:	681b      	ldr	r3, [r3, #0]
    63ae:	68db      	ldr	r3, [r3, #12]
    63b0:	4a23      	ldr	r2, [pc, #140]	; (6440 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    63b2:	6812      	ldr	r2, [r2, #0]
    63b4:	4610      	mov	r0, r2
    63b6:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    63b8:	4b20      	ldr	r3, [pc, #128]	; (643c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    63ba:	681b      	ldr	r3, [r3, #0]
    63bc:	689b      	ldr	r3, [r3, #8]
    63be:	4a20      	ldr	r2, [pc, #128]	; (6440 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    63c0:	6812      	ldr	r2, [r2, #0]
    63c2:	6812      	ldr	r2, [r2, #0]
    63c4:	4610      	mov	r0, r2
    63c6:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    63c8:	4b26      	ldr	r3, [pc, #152]	; (6464 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    63ca:	681b      	ldr	r3, [r3, #0]
    63cc:	685b      	ldr	r3, [r3, #4]
    63ce:	4a26      	ldr	r2, [pc, #152]	; (6468 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    63d0:	6812      	ldr	r2, [r2, #0]
    63d2:	4610      	mov	r0, r2
    63d4:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    63d6:	4b25      	ldr	r3, [pc, #148]	; (646c <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    63d8:	681b      	ldr	r3, [r3, #0]
    63da:	681b      	ldr	r3, [r3, #0]
    63dc:	4a24      	ldr	r2, [pc, #144]	; (6470 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    63de:	6812      	ldr	r2, [r2, #0]
    63e0:	4610      	mov	r0, r2
    63e2:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    63e4:	4b23      	ldr	r3, [pc, #140]	; (6474 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    63e6:	681b      	ldr	r3, [r3, #0]
    63e8:	681b      	ldr	r3, [r3, #0]
    63ea:	4a23      	ldr	r2, [pc, #140]	; (6478 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    63ec:	6812      	ldr	r2, [r2, #0]
    63ee:	4610      	mov	r0, r2
    63f0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    63f2:	4b22      	ldr	r3, [pc, #136]	; (647c <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    63f4:	681b      	ldr	r3, [r3, #0]
    63f6:	681b      	ldr	r3, [r3, #0]
    63f8:	4a21      	ldr	r2, [pc, #132]	; (6480 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    63fa:	6812      	ldr	r2, [r2, #0]
    63fc:	4610      	mov	r0, r2
    63fe:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    6400:	e005      	b.n	640e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    6402:	bf00      	nop
    6404:	e004      	b.n	6410 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    6406:	bf00      	nop
    6408:	e002      	b.n	6410 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    640a:	bf00      	nop
    640c:	e000      	b.n	6410 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    640e:	bf00      	nop
    }

}
    6410:	bf00      	nop
    6412:	b003      	add	sp, #12
    6414:	f85d fb04 	ldr.w	pc, [sp], #4
    6418:	1fff8b19 	.word	0x1fff8b19
    641c:	1fff8bec 	.word	0x1fff8bec
    6420:	1fff8c0c 	.word	0x1fff8c0c
    6424:	1fff8bf0 	.word	0x1fff8bf0
    6428:	1fff8c14 	.word	0x1fff8c14
    642c:	1fff8bf4 	.word	0x1fff8bf4
    6430:	1fff8c1c 	.word	0x1fff8c1c
    6434:	1fff8bf8 	.word	0x1fff8bf8
    6438:	1fff8c24 	.word	0x1fff8c24
    643c:	1fff8be0 	.word	0x1fff8be0
    6440:	1fff8c04 	.word	0x1fff8c04
    6444:	1fff8be4 	.word	0x1fff8be4
    6448:	1fff8c00 	.word	0x1fff8c00
    644c:	1fff8be8 	.word	0x1fff8be8
    6450:	1fff8bfc 	.word	0x1fff8bfc
    6454:	1fff8c08 	.word	0x1fff8c08
    6458:	1fff8c10 	.word	0x1fff8c10
    645c:	1fff8c18 	.word	0x1fff8c18
    6460:	1fff8c20 	.word	0x1fff8c20
    6464:	1fff8c28 	.word	0x1fff8c28
    6468:	1fff8c38 	.word	0x1fff8c38
    646c:	1fff8c2c 	.word	0x1fff8c2c
    6470:	1fff8c3c 	.word	0x1fff8c3c
    6474:	1fff8c30 	.word	0x1fff8c30
    6478:	1fff8c40 	.word	0x1fff8c40
    647c:	1fff8c34 	.word	0x1fff8c34
    6480:	1fff8c44 	.word	0x1fff8c44

00006484 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    6484:	b500      	push	{lr}
    6486:	b083      	sub	sp, #12
    6488:	9001      	str	r0, [sp, #4]
    648a:	9100      	str	r1, [sp, #0]
    switch(Command)
    648c:	9b00      	ldr	r3, [sp, #0]
    648e:	2b04      	cmp	r3, #4
    6490:	d010      	beq.n	64b4 <Clock_Ip_Command+0x30>
    6492:	9b00      	ldr	r3, [sp, #0]
    6494:	2b04      	cmp	r3, #4
    6496:	d811      	bhi.n	64bc <Clock_Ip_Command+0x38>
    6498:	9b00      	ldr	r3, [sp, #0]
    649a:	2b01      	cmp	r3, #1
    649c:	d006      	beq.n	64ac <Clock_Ip_Command+0x28>
    649e:	9b00      	ldr	r3, [sp, #0]
    64a0:	2b02      	cmp	r3, #2
    64a2:	d10b      	bne.n	64bc <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    64a4:	9801      	ldr	r0, [sp, #4]
    64a6:	f7ff fdb3 	bl	6010 <Clock_Ip_ClockInitializeObjects>
            break;
    64aa:	e008      	b.n	64be <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    64ac:	9801      	ldr	r0, [sp, #4]
    64ae:	f7ff f9db 	bl	5868 <Clock_Ip_SpecificPlatformInitClock>
            break;
    64b2:	e004      	b.n	64be <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    64b4:	9801      	ldr	r0, [sp, #4]
    64b6:	f7ff f8ed 	bl	5694 <DisableSafeClock>
            break;
    64ba:	e000      	b.n	64be <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    64bc:	bf00      	nop
    }
}
    64be:	bf00      	nop
    64c0:	b003      	add	sp, #12
    64c2:	f85d fb04 	ldr.w	pc, [sp], #4
    64c6:	bf00      	nop

000064c8 <Mcu_CheckInit>:
/**
* @brief Mcu_CheckInit - checks for Mcu_Init
* @implements Mcu_CheckInit_Activity
*/
static Std_ReturnType Mcu_CheckInit(const Mcu_ConfigType * ConfigPtr)
{
    64c8:	b500      	push	{lr}
    64ca:	b085      	sub	sp, #20
    64cc:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    64ce:	2300      	movs	r3, #0
    64d0:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_PRECOMPILE_SUPPORT == STD_OFF)
    if (NULL_PTR == ConfigPtr)
    64d4:	9b01      	ldr	r3, [sp, #4]
    64d6:	2b00      	cmp	r3, #0
    64d8:	d108      	bne.n	64ec <Mcu_CheckInit+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    64da:	2301      	movs	r3, #1
    64dc:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    64e0:	2311      	movs	r3, #17
    64e2:	2200      	movs	r2, #0
    64e4:	2100      	movs	r1, #0
    64e6:	2065      	movs	r0, #101	; 0x65
    64e8:	f012 f9a2 	bl	18830 <Det_ReportError>

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    }
#endif /* (MCU_PRECOMPILE_SUPPORT == STD_ON) */

    return CheckStatus;
    64ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    64f0:	4618      	mov	r0, r3
    64f2:	b005      	add	sp, #20
    64f4:	f85d fb04 	ldr.w	pc, [sp], #4

000064f8 <Mcu_CheckInitClock>:
/**
* @brief Mcu_CheckInitClock - checks for Mcu_InitClock
* @implements Mcu_CheckInitClock_Activity
*/
static Std_ReturnType Mcu_CheckInitClock(Mcu_ClockType ClockSetting)
{
    64f8:	b500      	push	{lr}
    64fa:	b085      	sub	sp, #20
    64fc:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    64fe:	2300      	movs	r3, #0
    6500:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ClockSetting >= Mcu_pConfigPtr->NoClkConfigs)
    6504:	4b0a      	ldr	r3, [pc, #40]	; (6530 <Mcu_CheckInitClock+0x38>)
    6506:	681b      	ldr	r3, [r3, #0]
    6508:	68db      	ldr	r3, [r3, #12]
    650a:	9a01      	ldr	r2, [sp, #4]
    650c:	429a      	cmp	r2, r3
    650e:	d308      	bcc.n	6522 <Mcu_CheckInitClock+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    6510:	2301      	movs	r3, #1
    6512:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INITCLOCK_ID, MCU_E_PARAM_CLOCK);
    6516:	230b      	movs	r3, #11
    6518:	2202      	movs	r2, #2
    651a:	2100      	movs	r1, #0
    651c:	2065      	movs	r0, #101	; 0x65
    651e:	f012 f987 	bl	18830 <Det_ReportError>
    }

    return CheckStatus;
    6522:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6526:	4618      	mov	r0, r3
    6528:	b005      	add	sp, #20
    652a:	f85d fb04 	ldr.w	pc, [sp], #4
    652e:	bf00      	nop
    6530:	1fff8d20 	.word	0x1fff8d20

00006534 <Mcu_CheckSetMode>:
/**
* @brief Mcu_CheckSetMode - checks for Mcu_SetMode
* @implements Mcu_CheckSetMode_Activity
*/
static Std_ReturnType Mcu_CheckSetMode(Power_Ip_ModeType McuMode)
{
    6534:	b500      	push	{lr}
    6536:	b085      	sub	sp, #20
    6538:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    653a:	2300      	movs	r3, #0
    653c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (McuMode >= Mcu_pConfigPtr->NoModeConfigs)
    6540:	4b0a      	ldr	r3, [pc, #40]	; (656c <Mcu_CheckSetMode+0x38>)
    6542:	681b      	ldr	r3, [r3, #0]
    6544:	689b      	ldr	r3, [r3, #8]
    6546:	9a01      	ldr	r2, [sp, #4]
    6548:	429a      	cmp	r2, r3
    654a:	d308      	bcc.n	655e <Mcu_CheckSetMode+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    654c:	2301      	movs	r3, #1
    654e:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_SETMODE_ID, MCU_E_PARAM_MODE);
    6552:	230c      	movs	r3, #12
    6554:	2208      	movs	r2, #8
    6556:	2100      	movs	r1, #0
    6558:	2065      	movs	r0, #101	; 0x65
    655a:	f012 f969 	bl	18830 <Det_ReportError>
    }

    return CheckStatus;
    655e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6562:	4618      	mov	r0, r3
    6564:	b005      	add	sp, #20
    6566:	f85d fb04 	ldr.w	pc, [sp], #4
    656a:	bf00      	nop
    656c:	1fff8d20 	.word	0x1fff8d20

00006570 <Mcu_CheckGetVersionInfo>:
/**
* @brief Mcu_CheckGetVersionInfo - checks for Mcu_GetVersionInfo
* @implements Mcu_CheckGetVersionInfo_Activity
*/
static Std_ReturnType Mcu_CheckGetVersionInfo(const Std_VersionInfoType * VersionInfo)
{
    6570:	b500      	push	{lr}
    6572:	b085      	sub	sp, #20
    6574:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    6576:	2300      	movs	r3, #0
    6578:	f88d 300f 	strb.w	r3, [sp, #15]

    if (NULL_PTR == VersionInfo)
    657c:	9b01      	ldr	r3, [sp, #4]
    657e:	2b00      	cmp	r3, #0
    6580:	d108      	bne.n	6594 <Mcu_CheckGetVersionInfo+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    6582:	2301      	movs	r3, #1
    6584:	f88d 300f 	strb.w	r3, [sp, #15]

        (void)Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_GETVERSIONINFO_ID, MCU_E_PARAM_POINTER);
    6588:	2310      	movs	r3, #16
    658a:	2209      	movs	r2, #9
    658c:	2100      	movs	r1, #0
    658e:	2065      	movs	r0, #101	; 0x65
    6590:	f012 f94e 	bl	18830 <Det_ReportError>
    }

    return CheckStatus;
    6594:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6598:	4618      	mov	r0, r3
    659a:	b005      	add	sp, #20
    659c:	f85d fb04 	ldr.w	pc, [sp], #4

000065a0 <Mcu_HLDChecksEntry>:
/**
* @brief Mcu_HLDChecksEntry - checks for invalid mode transitions.
* @implements Mcu_HLDChecksEntry_Activity
*/
static Std_ReturnType Mcu_HLDChecksEntry(uint8 McuServiceID)
{
    65a0:	b500      	push	{lr}
    65a2:	b085      	sub	sp, #20
    65a4:	4603      	mov	r3, r0
    65a6:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    65aa:	2300      	movs	r3, #0
    65ac:	f88d 300f 	strb.w	r3, [sp, #15]

    if (MCU_INIT_ID == McuServiceID)
    65b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    65b4:	2b00      	cmp	r3, #0
    65b6:	d10e      	bne.n	65d6 <Mcu_HLDChecksEntry+0x36>
    {
        if (MCU_UNINIT != Mcu_eStatus) /* If "Mcu_Init" was already called (i.e. driver is initialized). */
    65b8:	4b13      	ldr	r3, [pc, #76]	; (6608 <Mcu_HLDChecksEntry+0x68>)
    65ba:	681b      	ldr	r3, [r3, #0]
    65bc:	2b03      	cmp	r3, #3
    65be:	d01c      	beq.n	65fa <Mcu_HLDChecksEntry+0x5a>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    65c0:	2301      	movs	r3, #1
    65c2:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_ALREADY_INITIALIZED);
    65c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    65ca:	2313      	movs	r3, #19
    65cc:	2100      	movs	r1, #0
    65ce:	2065      	movs	r0, #101	; 0x65
    65d0:	f012 f92e 	bl	18830 <Det_ReportError>
    65d4:	e011      	b.n	65fa <Mcu_HLDChecksEntry+0x5a>
        }
    }
    else
    {
        if (MCU_UNINIT == Mcu_eStatus) /* If "Mcu_Init" was not called (i.e driver is uninitialized). */
    65d6:	4b0c      	ldr	r3, [pc, #48]	; (6608 <Mcu_HLDChecksEntry+0x68>)
    65d8:	681b      	ldr	r3, [r3, #0]
    65da:	2b03      	cmp	r3, #3
    65dc:	d10a      	bne.n	65f4 <Mcu_HLDChecksEntry+0x54>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    65de:	2301      	movs	r3, #1
    65e0:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_UNINIT);
    65e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    65e8:	230f      	movs	r3, #15
    65ea:	2100      	movs	r1, #0
    65ec:	2065      	movs	r0, #101	; 0x65
    65ee:	f012 f91f 	bl	18830 <Det_ReportError>
    65f2:	e002      	b.n	65fa <Mcu_HLDChecksEntry+0x5a>
        }
        else
        {
            Mcu_eStatus = MCU_BUSY;
    65f4:	4b04      	ldr	r3, [pc, #16]	; (6608 <Mcu_HLDChecksEntry+0x68>)
    65f6:	220a      	movs	r2, #10
    65f8:	601a      	str	r2, [r3, #0]
        }
    }

    return CheckStatus;
    65fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    65fe:	4618      	mov	r0, r3
    6600:	b005      	add	sp, #20
    6602:	f85d fb04 	ldr.w	pc, [sp], #4
    6606:	bf00      	nop
    6608:	1fff8b1c 	.word	0x1fff8b1c

0000660c <Mcu_HLDChecksExit>:
* @implements Mcu_HLDChecksExit_Activity
*/
static void Mcu_HLDChecksExit(  Std_ReturnType RetStatus,
                                uint8 McuServiceID
                              )
{
    660c:	b082      	sub	sp, #8
    660e:	4603      	mov	r3, r0
    6610:	460a      	mov	r2, r1
    6612:	f88d 3007 	strb.w	r3, [sp, #7]
    6616:	4613      	mov	r3, r2
    6618:	f88d 3006 	strb.w	r3, [sp, #6]
    if (MCU_INIT_ID == McuServiceID)
    661c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6620:	2b00      	cmp	r3, #0
    6622:	d10b      	bne.n	663c <Mcu_HLDChecksExit+0x30>
    {
        if ((Std_ReturnType)E_OK == (Std_ReturnType)RetStatus)
    6624:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6628:	2b00      	cmp	r3, #0
    662a:	d103      	bne.n	6634 <Mcu_HLDChecksExit+0x28>
        {
            Mcu_eStatus = MCU_IDLE;
    662c:	4b06      	ldr	r3, [pc, #24]	; (6648 <Mcu_HLDChecksExit+0x3c>)
    662e:	220c      	movs	r2, #12
    6630:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Mcu_eStatus = MCU_IDLE;
    }
}
    6632:	e006      	b.n	6642 <Mcu_HLDChecksExit+0x36>
            Mcu_eStatus = MCU_UNINIT;
    6634:	4b04      	ldr	r3, [pc, #16]	; (6648 <Mcu_HLDChecksExit+0x3c>)
    6636:	2203      	movs	r2, #3
    6638:	601a      	str	r2, [r3, #0]
}
    663a:	e002      	b.n	6642 <Mcu_HLDChecksExit+0x36>
        Mcu_eStatus = MCU_IDLE;
    663c:	4b02      	ldr	r3, [pc, #8]	; (6648 <Mcu_HLDChecksExit+0x3c>)
    663e:	220c      	movs	r2, #12
    6640:	601a      	str	r2, [r3, #0]
}
    6642:	bf00      	nop
    6644:	b002      	add	sp, #8
    6646:	4770      	bx	lr
    6648:	1fff8b1c 	.word	0x1fff8b1c

0000664c <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    664c:	b500      	push	{lr}
    664e:	b085      	sub	sp, #20
    6650:	9001      	str	r0, [sp, #4]
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType CheckStatus;
#endif /* ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) ) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    CheckStatus = (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INIT_ID);
    6652:	2000      	movs	r0, #0
    6654:	f7ff ffa4 	bl	65a0 <Mcu_HLDChecksEntry>
    6658:	4603      	mov	r3, r0
    665a:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( (Std_ReturnType)E_OK == CheckStatus )
    665e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6662:	2b00      	cmp	r3, #0
    6664:	d150      	bne.n	6708 <Mcu_Init+0xbc>

#if (MCU_PARAM_CHECK == STD_ON)
        /* When PostBuild is used and #(Variants) > 1, the input parameter 'ConfigPtr' is mandatory
         * to be different than NULL_PTR. */
        /* Check the config. In case of error, return immediately. The "Mcu_CheckInit" function will report DET errors. */
        CheckStatus = Mcu_CheckInit(ConfigPtr);
    6666:	9801      	ldr	r0, [sp, #4]
    6668:	f7ff ff2e 	bl	64c8 <Mcu_CheckInit>
    666c:	4603      	mov	r3, r0
    666e:	f88d 300b 	strb.w	r3, [sp, #11]

        if ((Std_ReturnType)E_OK == CheckStatus)
    6672:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6676:	2b00      	cmp	r3, #0
    6678:	d13d      	bne.n	66f6 <Mcu_Init+0xaa>

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    667a:	4a25      	ldr	r2, [pc, #148]	; (6710 <Mcu_Init+0xc4>)
    667c:	9b01      	ldr	r3, [sp, #4]
    667e:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    6680:	2300      	movs	r3, #0
    6682:	9303      	str	r3, [sp, #12]
    6684:	e010      	b.n	66a8 <Mcu_Init+0x5c>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    6686:	4b22      	ldr	r3, [pc, #136]	; (6710 <Mcu_Init+0xc4>)
    6688:	681b      	ldr	r3, [r3, #0]
    668a:	6919      	ldr	r1, [r3, #16]
    668c:	9a03      	ldr	r2, [sp, #12]
    668e:	4613      	mov	r3, r2
    6690:	005b      	lsls	r3, r3, #1
    6692:	4413      	add	r3, r2
    6694:	009b      	lsls	r3, r3, #2
    6696:	440b      	add	r3, r1
    6698:	681b      	ldr	r3, [r3, #0]
    669a:	9a03      	ldr	r2, [sp, #12]
    669c:	b2d1      	uxtb	r1, r2
    669e:	4a1d      	ldr	r2, [pc, #116]	; (6714 <Mcu_Init+0xc8>)
    66a0:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    66a2:	9b03      	ldr	r3, [sp, #12]
    66a4:	3301      	adds	r3, #1
    66a6:	9303      	str	r3, [sp, #12]
    66a8:	4b19      	ldr	r3, [pc, #100]	; (6710 <Mcu_Init+0xc4>)
    66aa:	681b      	ldr	r3, [r3, #0]
    66ac:	689b      	ldr	r3, [r3, #8]
    66ae:	9a03      	ldr	r2, [sp, #12]
    66b0:	429a      	cmp	r2, r3
    66b2:	d3e8      	bcc.n	6686 <Mcu_Init+0x3a>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    66b4:	2300      	movs	r3, #0
    66b6:	9303      	str	r3, [sp, #12]
    66b8:	e010      	b.n	66dc <Mcu_Init+0x90>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    66ba:	4b15      	ldr	r3, [pc, #84]	; (6710 <Mcu_Init+0xc4>)
    66bc:	681b      	ldr	r3, [r3, #0]
    66be:	6959      	ldr	r1, [r3, #20]
    66c0:	9a03      	ldr	r2, [sp, #12]
    66c2:	4613      	mov	r3, r2
    66c4:	01db      	lsls	r3, r3, #7
    66c6:	1a9b      	subs	r3, r3, r2
    66c8:	00db      	lsls	r3, r3, #3
    66ca:	440b      	add	r3, r1
    66cc:	681b      	ldr	r3, [r3, #0]
    66ce:	9a03      	ldr	r2, [sp, #12]
    66d0:	b2d1      	uxtb	r1, r2
    66d2:	4a11      	ldr	r2, [pc, #68]	; (6718 <Mcu_Init+0xcc>)
    66d4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    66d6:	9b03      	ldr	r3, [sp, #12]
    66d8:	3301      	adds	r3, #1
    66da:	9303      	str	r3, [sp, #12]
    66dc:	4b0c      	ldr	r3, [pc, #48]	; (6710 <Mcu_Init+0xc4>)
    66de:	681b      	ldr	r3, [r3, #0]
    66e0:	68db      	ldr	r3, [r3, #12]
    66e2:	9a03      	ldr	r2, [sp, #12]
    66e4:	429a      	cmp	r2, r3
    66e6:	d3e8      	bcc.n	66ba <Mcu_Init+0x6e>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    66e8:	4b09      	ldr	r3, [pc, #36]	; (6710 <Mcu_Init+0xc4>)
    66ea:	681b      	ldr	r3, [r3, #0]
    66ec:	699b      	ldr	r3, [r3, #24]
    66ee:	4618      	mov	r0, r3
    66f0:	f000 f90c 	bl	690c <Mcu_Ipw_Init>
    66f4:	e002      	b.n	66fc <Mcu_Init+0xb0>
#if (MCU_PARAM_CHECK == STD_ON)
        }
        else
        {
            /* Clean the init pointer in case of an error. */
            Mcu_pConfigPtr = NULL_PTR;
    66f6:	4b06      	ldr	r3, [pc, #24]	; (6710 <Mcu_Init+0xc4>)
    66f8:	2200      	movs	r2, #0
    66fa:	601a      	str	r2, [r3, #0]
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    66fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6700:	2100      	movs	r1, #0
    6702:	4618      	mov	r0, r3
    6704:	f7ff ff82 	bl	660c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    6708:	bf00      	nop
    670a:	b005      	add	sp, #20
    670c:	f85d fb04 	ldr.w	pc, [sp], #4
    6710:	1fff8d20 	.word	0x1fff8d20
    6714:	1fff8d1c 	.word	0x1fff8d1c
    6718:	1fff8d18 	.word	0x1fff8d18

0000671c <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    671c:	b500      	push	{lr}
    671e:	b085      	sub	sp, #20
    6720:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    6722:	2301      	movs	r3, #1
    6724:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    /* Check if the driver is initialized. */
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITRAMSECTION_ID) )
    6728:	2001      	movs	r0, #1
    672a:	f7ff ff39 	bl	65a0 <Mcu_HLDChecksEntry>
    672e:	4603      	mov	r3, r0
    6730:	2b00      	cmp	r3, #0
    6732:	d103      	bne.n	673c <Mcu_InitRamSection+0x20>
        /* To avoid compiler warning. */
        MCU_PARAM_UNUSED(RamSection);
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    6734:	2101      	movs	r1, #1
    6736:	2000      	movs	r0, #0
    6738:	f7ff ff68 	bl	660c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    673c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6740:	4618      	mov	r0, r3
    6742:	b005      	add	sp, #20
    6744:	f85d fb04 	ldr.w	pc, [sp], #4

00006748 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    6748:	b500      	push	{lr}
    674a:	b085      	sub	sp, #20
    674c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    674e:	4a17      	ldr	r2, [pc, #92]	; (67ac <Mcu_InitClock+0x64>)
    6750:	9b01      	ldr	r3, [sp, #4]
    6752:	4413      	add	r3, r2
    6754:	781b      	ldrb	r3, [r3, #0]
    6756:	f88d 300e 	strb.w	r3, [sp, #14]
    /* Return the success of the clock initalization operation. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType ClockStatus = (Std_ReturnType)E_NOT_OK;
    675a:	2301      	movs	r3, #1
    675c:	f88d 300f 	strb.w	r3, [sp, #15]
#else
    Std_ReturnType ClockStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITCLOCK_ID) )
    6760:	2002      	movs	r0, #2
    6762:	f7ff ff1d 	bl	65a0 <Mcu_HLDChecksEntry>
    6766:	4603      	mov	r3, r0
    6768:	2b00      	cmp	r3, #0
    676a:	d119      	bne.n	67a0 <Mcu_InitClock+0x58>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
    676c:	9801      	ldr	r0, [sp, #4]
    676e:	f7ff fec3 	bl	64f8 <Mcu_CheckInitClock>
    6772:	4603      	mov	r3, r0
    6774:	2b00      	cmp	r3, #0
    6776:	d10f      	bne.n	6798 <Mcu_InitClock+0x50>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    6778:	4b0d      	ldr	r3, [pc, #52]	; (67b0 <Mcu_InitClock+0x68>)
    677a:	681b      	ldr	r3, [r3, #0]
    677c:	6959      	ldr	r1, [r3, #20]
    677e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    6782:	4613      	mov	r3, r2
    6784:	01db      	lsls	r3, r3, #7
    6786:	1a9b      	subs	r3, r3, r2
    6788:	00db      	lsls	r3, r3, #3
    678a:	440b      	add	r3, r1
    678c:	4618      	mov	r0, r3
    678e:	f000 f8c7 	bl	6920 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    6792:	2300      	movs	r3, #0
    6794:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_PARAM_CHECK == STD_ON)
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    6798:	2102      	movs	r1, #2
    679a:	2000      	movs	r0, #0
    679c:	f7ff ff36 	bl	660c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    67a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    67a4:	4618      	mov	r0, r3
    67a6:	b005      	add	sp, #20
    67a8:	f85d fb04 	ldr.w	pc, [sp], #4
    67ac:	1fff8d18 	.word	0x1fff8d18
    67b0:	1fff8d20 	.word	0x1fff8d20

000067b4 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    67b4:	b500      	push	{lr}
    67b6:	b085      	sub	sp, #20
    67b8:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    67ba:	4a15      	ldr	r2, [pc, #84]	; (6810 <Mcu_SetMode+0x5c>)
    67bc:	9b01      	ldr	r3, [sp, #4]
    67be:	4413      	add	r3, r2
    67c0:	781b      	ldrb	r3, [r3, #0]
    67c2:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_SETMODE_ID) )
    67c6:	2008      	movs	r0, #8
    67c8:	f7ff feea 	bl	65a0 <Mcu_HLDChecksEntry>
    67cc:	4603      	mov	r3, r0
    67ce:	2b00      	cmp	r3, #0
    67d0:	d11a      	bne.n	6808 <Mcu_SetMode+0x54>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

#if (MCU_PARAM_CHECK == STD_ON)
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
    67d2:	9801      	ldr	r0, [sp, #4]
    67d4:	f7ff feae 	bl	6534 <Mcu_CheckSetMode>
    67d8:	4603      	mov	r3, r0
    67da:	2b00      	cmp	r3, #0
    67dc:	d110      	bne.n	6800 <Mcu_SetMode+0x4c>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    67de:	f00e fe79 	bl	154d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    67e2:	4b0c      	ldr	r3, [pc, #48]	; (6814 <Mcu_SetMode+0x60>)
    67e4:	681b      	ldr	r3, [r3, #0]
    67e6:	6919      	ldr	r1, [r3, #16]
    67e8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    67ec:	4613      	mov	r3, r2
    67ee:	005b      	lsls	r3, r3, #1
    67f0:	4413      	add	r3, r2
    67f2:	009b      	lsls	r3, r3, #2
    67f4:	440b      	add	r3, r1
    67f6:	4618      	mov	r0, r3
    67f8:	f000 f89c 	bl	6934 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    67fc:	f00e fe96 	bl	1552c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    6800:	2108      	movs	r1, #8
    6802:	2000      	movs	r0, #0
    6804:	f7ff ff02 	bl	660c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    6808:	bf00      	nop
    680a:	b005      	add	sp, #20
    680c:	f85d fb04 	ldr.w	pc, [sp], #4
    6810:	1fff8d1c 	.word	0x1fff8d1c
    6814:	1fff8d20 	.word	0x1fff8d20

00006818 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    6818:	b500      	push	{lr}
    681a:	b083      	sub	sp, #12
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    681c:	2302      	movs	r3, #2
    681e:	9301      	str	r3, [sp, #4]
#else
    Mcu_PllStatusType PllStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETPLLSTATUS_ID) )
    6820:	2004      	movs	r0, #4
    6822:	f7ff febd 	bl	65a0 <Mcu_HLDChecksEntry>
    6826:	4603      	mov	r3, r0
    6828:	2b00      	cmp	r3, #0
    682a:	d103      	bne.n	6834 <Mcu_GetPllStatus+0x1c>
           At this point, the return value can be only MCU_PLL_LOCKED or MCU_PLL_UNLOCKED. */
        PllStatus = Mcu_Ipw_GetPllStatus();
#endif /* (MCU_NO_PLL == STD_OFF) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    682c:	2104      	movs	r1, #4
    682e:	2000      	movs	r0, #0
    6830:	f7ff feec 	bl	660c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    6834:	9b01      	ldr	r3, [sp, #4]
}
    6836:	4618      	mov	r0, r3
    6838:	b003      	add	sp, #12
    683a:	f85d fb04 	ldr.w	pc, [sp], #4

0000683e <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    683e:	b500      	push	{lr}
    6840:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_ResetType ResetReason = MCU_RESET_UNDEFINED;
    6842:	230e      	movs	r3, #14
    6844:	9301      	str	r3, [sp, #4]
#else
    Mcu_ResetType ResetReason;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    6846:	2005      	movs	r0, #5
    6848:	f7ff feaa 	bl	65a0 <Mcu_HLDChecksEntry>
    684c:	4603      	mov	r3, r0
    684e:	2b00      	cmp	r3, #0
    6850:	d106      	bne.n	6860 <Mcu_GetResetReason+0x22>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    6852:	f000 f879 	bl	6948 <Mcu_Ipw_GetResetReason>
    6856:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    6858:	2105      	movs	r1, #5
    685a:	2000      	movs	r0, #0
    685c:	f7ff fed6 	bl	660c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    6860:	9b01      	ldr	r3, [sp, #4]
}
    6862:	4618      	mov	r0, r3
    6864:	b003      	add	sp, #12
    6866:	f85d fb04 	ldr.w	pc, [sp], #4

0000686a <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    686a:	b500      	push	{lr}
    686c:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_RawResetType RawResetValue = MCU_RAW_RESET_DEFAULT;
    686e:	f04f 33ff 	mov.w	r3, #4294967295
    6872:	9301      	str	r3, [sp, #4]
#else
    Mcu_RawResetType RawResetValue;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    6874:	2006      	movs	r0, #6
    6876:	f7ff fe93 	bl	65a0 <Mcu_HLDChecksEntry>
    687a:	4603      	mov	r3, r0
    687c:	2b00      	cmp	r3, #0
    687e:	d106      	bne.n	688e <Mcu_GetResetRawValue+0x24>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    6880:	f000 f868 	bl	6954 <Mcu_Ipw_GetResetRawValue>
    6884:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    6886:	2106      	movs	r1, #6
    6888:	2000      	movs	r0, #0
    688a:	f7ff febf 	bl	660c <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    688e:	9b01      	ldr	r3, [sp, #4]
}
    6890:	4618      	mov	r0, r3
    6892:	b003      	add	sp, #12
    6894:	f85d fb04 	ldr.w	pc, [sp], #4

00006898 <Mcu_GetVersionInfo>:
* @api
*
* @implements Mcu_GetVersionInfo_Activity
*/
void Mcu_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    6898:	b500      	push	{lr}
    689a:	b083      	sub	sp, #12
    689c:	9001      	str	r0, [sp, #4]
#if (MCU_PARAM_CHECK == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckGetVersionInfo(versioninfo) )
    689e:	9801      	ldr	r0, [sp, #4]
    68a0:	f7ff fe66 	bl	6570 <Mcu_CheckGetVersionInfo>
    68a4:	4603      	mov	r3, r0
    68a6:	2b00      	cmp	r3, #0
    68a8:	d10e      	bne.n	68c8 <Mcu_GetVersionInfo+0x30>
    {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
        (versioninfo)->vendorID = (uint16)MCU_VENDOR_ID;
    68aa:	9b01      	ldr	r3, [sp, #4]
    68ac:	222b      	movs	r2, #43	; 0x2b
    68ae:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint8)MCU_MODULE_ID;
    68b0:	9b01      	ldr	r3, [sp, #4]
    68b2:	2265      	movs	r2, #101	; 0x65
    68b4:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)MCU_SW_MAJOR_VERSION;
    68b6:	9b01      	ldr	r3, [sp, #4]
    68b8:	2202      	movs	r2, #2
    68ba:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)MCU_SW_MINOR_VERSION;
    68bc:	9b01      	ldr	r3, [sp, #4]
    68be:	2200      	movs	r2, #0
    68c0:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)MCU_SW_PATCH_VERSION;
    68c2:	9b01      	ldr	r3, [sp, #4]
    68c4:	2200      	movs	r2, #0
    68c6:	719a      	strb	r2, [r3, #6]
#if (MCU_PARAM_CHECK == STD_ON)
    }
#endif /* (MCU_PARAM_CHECK == STD_ON) */
}
    68c8:	bf00      	nop
    68ca:	b003      	add	sp, #12
    68cc:	f85d fb04 	ldr.w	pc, [sp], #4

000068d0 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    68d0:	b500      	push	{lr}
    68d2:	b083      	sub	sp, #12
    68d4:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    68d6:	201a      	movs	r0, #26
    68d8:	f7ff fe62 	bl	65a0 <Mcu_HLDChecksEntry>
    68dc:	4603      	mov	r3, r0
    68de:	2b00      	cmp	r3, #0
    68e0:	d106      	bne.n	68f0 <Mcu_SleepOnExit+0x20>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    68e2:	9801      	ldr	r0, [sp, #4]
    68e4:	f000 f83c 	bl	6960 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    68e8:	211a      	movs	r1, #26
    68ea:	2000      	movs	r0, #0
    68ec:	f7ff fe8e 	bl	660c <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    68f0:	bf00      	nop
    68f2:	b003      	add	sp, #12
    68f4:	f85d fb04 	ldr.w	pc, [sp], #4

000068f8 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    68f8:	b082      	sub	sp, #8
    68fa:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    68fc:	4b02      	ldr	r3, [pc, #8]	; (6908 <Mcu_ClkSrcFailureNotification+0x10>)
    68fe:	681b      	ldr	r3, [r3, #0]
    6900:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    6902:	bf00      	nop
    6904:	b002      	add	sp, #8
    6906:	4770      	bx	lr
    6908:	1fff8d20 	.word	0x1fff8d20

0000690c <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    690c:	b500      	push	{lr}
    690e:	b083      	sub	sp, #12
    6910:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    6912:	9801      	ldr	r0, [sp, #4]
    6914:	f000 f882 	bl	6a1c <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    6918:	bf00      	nop
    691a:	b003      	add	sp, #12
    691c:	f85d fb04 	ldr.w	pc, [sp], #4

00006920 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    6920:	b500      	push	{lr}
    6922:	b083      	sub	sp, #12
    6924:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    6926:	9801      	ldr	r0, [sp, #4]
    6928:	f7fc fb12 	bl	2f50 <Clock_Ip_InitClock>
}
    692c:	bf00      	nop
    692e:	b003      	add	sp, #12
    6930:	f85d fb04 	ldr.w	pc, [sp], #4

00006934 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    6934:	b500      	push	{lr}
    6936:	b083      	sub	sp, #12
    6938:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    693a:	9801      	ldr	r0, [sp, #4]
    693c:	f000 f820 	bl	6980 <Power_Ip_SetMode>
}
    6940:	bf00      	nop
    6942:	b003      	add	sp, #12
    6944:	f85d fb04 	ldr.w	pc, [sp], #4

00006948 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    6948:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    694a:	f000 f84f 	bl	69ec <Power_Ip_GetResetReason>
    694e:	4603      	mov	r3, r0
}
    6950:	4618      	mov	r0, r3
    6952:	bd08      	pop	{r3, pc}

00006954 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    6954:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    6956:	f000 f857 	bl	6a08 <Power_Ip_GetResetRawValue>
    695a:	4603      	mov	r3, r0
}
    695c:	4618      	mov	r0, r3
    695e:	bd08      	pop	{r3, pc}

00006960 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    6960:	b500      	push	{lr}
    6962:	b083      	sub	sp, #12
    6964:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    6966:	9b01      	ldr	r3, [sp, #4]
    6968:	2b00      	cmp	r3, #0
    696a:	d102      	bne.n	6972 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    696c:	f000 f86c 	bl	6a48 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    6970:	e001      	b.n	6976 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    6972:	f000 f86e 	bl	6a52 <Power_Ip_EnableSleepOnExit>
}
    6976:	bf00      	nop
    6978:	b003      	add	sp, #12
    697a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006980 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6980:	b500      	push	{lr}
    6982:	b085      	sub	sp, #20
    6984:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    6986:	9b01      	ldr	r3, [sp, #4]
    6988:	685b      	ldr	r3, [r3, #4]
    698a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    698c:	9802      	ldr	r0, [sp, #8]
    698e:	f000 f9f5 	bl	6d7c <Power_Ip_SMC_ModeCheckEntry>
    6992:	4603      	mov	r3, r0
    6994:	2b00      	cmp	r3, #0
    6996:	d002      	beq.n	699e <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6998:	2301      	movs	r3, #1
    699a:	9303      	str	r3, [sp, #12]
    699c:	e003      	b.n	69a6 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    699e:	9801      	ldr	r0, [sp, #4]
    69a0:	f000 fa1e 	bl	6de0 <Power_Ip_SMC_ModeConfig>
    69a4:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    69a6:	9b03      	ldr	r3, [sp, #12]
    69a8:	2b01      	cmp	r3, #1
    69aa:	d103      	bne.n	69b4 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    69ac:	21ff      	movs	r1, #255	; 0xff
    69ae:	2003      	movs	r0, #3
    69b0:	f000 f8f4 	bl	6b9c <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    69b4:	bf00      	nop
    69b6:	b005      	add	sp, #20
    69b8:	f85d fb04 	ldr.w	pc, [sp], #4

000069bc <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    69bc:	b084      	sub	sp, #16
    69be:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    69c0:	230c      	movs	r3, #12
    69c2:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    69c4:	4a08      	ldr	r2, [pc, #32]	; (69e8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    69c6:	9b01      	ldr	r3, [sp, #4]
    69c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69cc:	2b0e      	cmp	r3, #14
    69ce:	d805      	bhi.n	69dc <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    69d0:	4a05      	ldr	r2, [pc, #20]	; (69e8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    69d2:	9b01      	ldr	r3, [sp, #4]
    69d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69d8:	9303      	str	r3, [sp, #12]
    69da:	e001      	b.n	69e0 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    69dc:	230c      	movs	r3, #12
    69de:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    69e0:	9b03      	ldr	r3, [sp, #12]
}
    69e2:	4618      	mov	r0, r3
    69e4:	b004      	add	sp, #16
    69e6:	4770      	bx	lr
    69e8:	0001977c 	.word	0x0001977c

000069ec <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    69ec:	b500      	push	{lr}
    69ee:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    69f0:	f000 f940 	bl	6c74 <Power_Ip_RCM_GetResetReason>
    69f4:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    69f6:	9801      	ldr	r0, [sp, #4]
    69f8:	f7ff ffe0 	bl	69bc <Power_Ip_ConvertIntergeToResetType>
    69fc:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    69fe:	9b00      	ldr	r3, [sp, #0]
}
    6a00:	4618      	mov	r0, r3
    6a02:	b003      	add	sp, #12
    6a04:	f85d fb04 	ldr.w	pc, [sp], #4

00006a08 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    6a08:	b500      	push	{lr}
    6a0a:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    6a0c:	f000 f98a 	bl	6d24 <Power_Ip_RCM_GetResetRawValue>
    6a10:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    6a12:	9b01      	ldr	r3, [sp, #4]
}
    6a14:	4618      	mov	r0, r3
    6a16:	b003      	add	sp, #12
    6a18:	f85d fb04 	ldr.w	pc, [sp], #4

00006a1c <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    6a1c:	b500      	push	{lr}
    6a1e:	b083      	sub	sp, #12
    6a20:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    6a22:	9b01      	ldr	r3, [sp, #4]
    6a24:	681b      	ldr	r3, [r3, #0]
    6a26:	4618      	mov	r0, r3
    6a28:	f000 f90e 	bl	6c48 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    6a2c:	9b01      	ldr	r3, [sp, #4]
    6a2e:	685b      	ldr	r3, [r3, #4]
    6a30:	4618      	mov	r0, r3
    6a32:	f000 f86d 	bl	6b10 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    6a36:	9b01      	ldr	r3, [sp, #4]
    6a38:	689b      	ldr	r3, [r3, #8]
    6a3a:	4618      	mov	r0, r3
    6a3c:	f000 f990 	bl	6d60 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    6a40:	bf00      	nop
    6a42:	b003      	add	sp, #12
    6a44:	f85d fb04 	ldr.w	pc, [sp], #4

00006a48 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    6a48:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    6a4a:	f000 f811 	bl	6a70 <Power_Ip_CM4_DisableSleepOnExit>
}
    6a4e:	bf00      	nop
    6a50:	bd08      	pop	{r3, pc}

00006a52 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    6a52:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    6a54:	f000 f820 	bl	6a98 <Power_Ip_CM4_EnableSleepOnExit>
}
    6a58:	bf00      	nop
    6a5a:	bd08      	pop	{r3, pc}

00006a5c <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    6a5c:	b082      	sub	sp, #8
    6a5e:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    6a60:	4a02      	ldr	r2, [pc, #8]	; (6a6c <Power_Ip_InstallNotificationsCallback+0x10>)
    6a62:	9b01      	ldr	r3, [sp, #4]
    6a64:	6013      	str	r3, [r2, #0]
}
    6a66:	bf00      	nop
    6a68:	b002      	add	sp, #8
    6a6a:	4770      	bx	lr
    6a6c:	1fff8b20 	.word	0x1fff8b20

00006a70 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    6a70:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6a72:	2300      	movs	r3, #0
    6a74:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6a76:	4b07      	ldr	r3, [pc, #28]	; (6a94 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6a78:	681b      	ldr	r3, [r3, #0]
    6a7a:	685b      	ldr	r3, [r3, #4]
    6a7c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    6a7e:	9b01      	ldr	r3, [sp, #4]
    6a80:	f023 0302 	bic.w	r3, r3, #2
    6a84:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6a86:	4b03      	ldr	r3, [pc, #12]	; (6a94 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6a88:	681b      	ldr	r3, [r3, #0]
    6a8a:	9a01      	ldr	r2, [sp, #4]
    6a8c:	605a      	str	r2, [r3, #4]
}
    6a8e:	bf00      	nop
    6a90:	b002      	add	sp, #8
    6a92:	4770      	bx	lr
    6a94:	1fff8b24 	.word	0x1fff8b24

00006a98 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    6a98:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6a9a:	2300      	movs	r3, #0
    6a9c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6a9e:	4b07      	ldr	r3, [pc, #28]	; (6abc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6aa0:	681b      	ldr	r3, [r3, #0]
    6aa2:	685b      	ldr	r3, [r3, #4]
    6aa4:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    6aa6:	9b01      	ldr	r3, [sp, #4]
    6aa8:	f043 0302 	orr.w	r3, r3, #2
    6aac:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6aae:	4b03      	ldr	r3, [pc, #12]	; (6abc <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6ab0:	681b      	ldr	r3, [r3, #0]
    6ab2:	9a01      	ldr	r2, [sp, #4]
    6ab4:	605a      	str	r2, [r3, #4]
}
    6ab6:	bf00      	nop
    6ab8:	b002      	add	sp, #8
    6aba:	4770      	bx	lr
    6abc:	1fff8b24 	.word	0x1fff8b24

00006ac0 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    6ac0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6ac2:	2300      	movs	r3, #0
    6ac4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6ac6:	4b07      	ldr	r3, [pc, #28]	; (6ae4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6ac8:	681b      	ldr	r3, [r3, #0]
    6aca:	685b      	ldr	r3, [r3, #4]
    6acc:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    6ace:	9b01      	ldr	r3, [sp, #4]
    6ad0:	f043 0304 	orr.w	r3, r3, #4
    6ad4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6ad6:	4b03      	ldr	r3, [pc, #12]	; (6ae4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6ad8:	681b      	ldr	r3, [r3, #0]
    6ada:	9a01      	ldr	r2, [sp, #4]
    6adc:	605a      	str	r2, [r3, #4]
}
    6ade:	bf00      	nop
    6ae0:	b002      	add	sp, #8
    6ae2:	4770      	bx	lr
    6ae4:	1fff8b24 	.word	0x1fff8b24

00006ae8 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    6ae8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6aea:	2300      	movs	r3, #0
    6aec:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6aee:	4b07      	ldr	r3, [pc, #28]	; (6b0c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6af0:	681b      	ldr	r3, [r3, #0]
    6af2:	685b      	ldr	r3, [r3, #4]
    6af4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    6af6:	9b01      	ldr	r3, [sp, #4]
    6af8:	f023 0304 	bic.w	r3, r3, #4
    6afc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6afe:	4b03      	ldr	r3, [pc, #12]	; (6b0c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6b00:	681b      	ldr	r3, [r3, #0]
    6b02:	9a01      	ldr	r2, [sp, #4]
    6b04:	605a      	str	r2, [r3, #4]
}
    6b06:	bf00      	nop
    6b08:	b002      	add	sp, #8
    6b0a:	4770      	bx	lr
    6b0c:	1fff8b24 	.word	0x1fff8b24

00006b10 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    6b10:	b084      	sub	sp, #16
    6b12:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    6b14:	4b20      	ldr	r3, [pc, #128]	; (6b98 <Power_Ip_PMC_PowerInit+0x88>)
    6b16:	781b      	ldrb	r3, [r3, #0]
    6b18:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    6b1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b20:	f003 030f 	and.w	r3, r3, #15
    6b24:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    6b28:	9b01      	ldr	r3, [sp, #4]
    6b2a:	781a      	ldrb	r2, [r3, #0]
    6b2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b30:	4313      	orrs	r3, r2
    6b32:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    6b36:	4a18      	ldr	r2, [pc, #96]	; (6b98 <Power_Ip_PMC_PowerInit+0x88>)
    6b38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b3c:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    6b3e:	4b16      	ldr	r3, [pc, #88]	; (6b98 <Power_Ip_PMC_PowerInit+0x88>)
    6b40:	785b      	ldrb	r3, [r3, #1]
    6b42:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    6b46:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b4a:	f003 031f 	and.w	r3, r3, #31
    6b4e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    6b52:	9b01      	ldr	r3, [sp, #4]
    6b54:	785a      	ldrb	r2, [r3, #1]
    6b56:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b5a:	4313      	orrs	r3, r2
    6b5c:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    6b60:	4a0d      	ldr	r2, [pc, #52]	; (6b98 <Power_Ip_PMC_PowerInit+0x88>)
    6b62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b66:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    6b68:	4b0b      	ldr	r3, [pc, #44]	; (6b98 <Power_Ip_PMC_PowerInit+0x88>)
    6b6a:	789b      	ldrb	r3, [r3, #2]
    6b6c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    6b70:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
    6b78:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    6b7c:	9b01      	ldr	r3, [sp, #4]
    6b7e:	789a      	ldrb	r2, [r3, #2]
    6b80:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b84:	4313      	orrs	r3, r2
    6b86:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    6b8a:	4a03      	ldr	r2, [pc, #12]	; (6b98 <Power_Ip_PMC_PowerInit+0x88>)
    6b8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b90:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    6b92:	bf00      	nop
    6b94:	b004      	add	sp, #16
    6b96:	4770      	bx	lr
    6b98:	4007d000 	.word	0x4007d000

00006b9c <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6b9c:	b500      	push	{lr}
    6b9e:	b083      	sub	sp, #12
    6ba0:	9001      	str	r0, [sp, #4]
    6ba2:	460b      	mov	r3, r1
    6ba4:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    6ba8:	4b05      	ldr	r3, [pc, #20]	; (6bc0 <Power_Ip_ReportPowerErrors+0x24>)
    6baa:	681b      	ldr	r3, [r3, #0]
    6bac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6bb0:	4611      	mov	r1, r2
    6bb2:	9801      	ldr	r0, [sp, #4]
    6bb4:	4798      	blx	r3
}
    6bb6:	bf00      	nop
    6bb8:	b003      	add	sp, #12
    6bba:	f85d fb04 	ldr.w	pc, [sp], #4
    6bbe:	bf00      	nop
    6bc0:	1fff8b20 	.word	0x1fff8b20

00006bc4 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6bc4:	b082      	sub	sp, #8
    6bc6:	9001      	str	r0, [sp, #4]
    6bc8:	460b      	mov	r3, r1
    6bca:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    6bce:	bf00      	nop
    6bd0:	b002      	add	sp, #8
    6bd2:	4770      	bx	lr

00006bd4 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6bd4:	b500      	push	{lr}
    6bd6:	b085      	sub	sp, #20
    6bd8:	9003      	str	r0, [sp, #12]
    6bda:	9102      	str	r1, [sp, #8]
    6bdc:	9201      	str	r2, [sp, #4]
    6bde:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    6be0:	2000      	movs	r0, #0
    6be2:	f7fb fee5 	bl	29b0 <OsIf_GetCounter>
    6be6:	4602      	mov	r2, r0
    6be8:	9b03      	ldr	r3, [sp, #12]
    6bea:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6bec:	9b02      	ldr	r3, [sp, #8]
    6bee:	2200      	movs	r2, #0
    6bf0:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    6bf2:	2100      	movs	r1, #0
    6bf4:	9800      	ldr	r0, [sp, #0]
    6bf6:	f7fb ff27 	bl	2a48 <OsIf_MicrosToTicks>
    6bfa:	4602      	mov	r2, r0
    6bfc:	9b01      	ldr	r3, [sp, #4]
    6bfe:	601a      	str	r2, [r3, #0]
}
    6c00:	bf00      	nop
    6c02:	b005      	add	sp, #20
    6c04:	f85d fb04 	ldr.w	pc, [sp], #4

00006c08 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6c08:	b500      	push	{lr}
    6c0a:	b087      	sub	sp, #28
    6c0c:	9003      	str	r0, [sp, #12]
    6c0e:	9102      	str	r1, [sp, #8]
    6c10:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    6c12:	2300      	movs	r3, #0
    6c14:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6c18:	2100      	movs	r1, #0
    6c1a:	9803      	ldr	r0, [sp, #12]
    6c1c:	f7fb fee1 	bl	29e2 <OsIf_GetElapsed>
    6c20:	4602      	mov	r2, r0
    6c22:	9b02      	ldr	r3, [sp, #8]
    6c24:	681b      	ldr	r3, [r3, #0]
    6c26:	441a      	add	r2, r3
    6c28:	9b02      	ldr	r3, [sp, #8]
    6c2a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    6c2c:	9b02      	ldr	r3, [sp, #8]
    6c2e:	681b      	ldr	r3, [r3, #0]
    6c30:	9a01      	ldr	r2, [sp, #4]
    6c32:	429a      	cmp	r2, r3
    6c34:	d802      	bhi.n	6c3c <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    6c36:	2301      	movs	r3, #1
    6c38:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    6c3c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6c40:	4618      	mov	r0, r3
    6c42:	b007      	add	sp, #28
    6c44:	f85d fb04 	ldr.w	pc, [sp], #4

00006c48 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6c48:	b082      	sub	sp, #8
    6c4a:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    6c4c:	9b01      	ldr	r3, [sp, #4]
    6c4e:	681a      	ldr	r2, [r3, #0]
    6c50:	4907      	ldr	r1, [pc, #28]	; (6c70 <Power_Ip_RCM_ResetInit+0x28>)
    6c52:	f641 7307 	movw	r3, #7943	; 0x1f07
    6c56:	4013      	ands	r3, r2
    6c58:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    6c5a:	9b01      	ldr	r3, [sp, #4]
    6c5c:	685a      	ldr	r2, [r3, #4]
    6c5e:	4904      	ldr	r1, [pc, #16]	; (6c70 <Power_Ip_RCM_ResetInit+0x28>)
    6c60:	f642 73ff 	movw	r3, #12287	; 0x2fff
    6c64:	4013      	ands	r3, r2
    6c66:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    6c68:	bf00      	nop
    6c6a:	b002      	add	sp, #8
    6c6c:	4770      	bx	lr
    6c6e:	bf00      	nop
    6c70:	4007f000 	.word	0x4007f000

00006c74 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    6c74:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    6c76:	230c      	movs	r3, #12
    6c78:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    6c7a:	2300      	movs	r3, #0
    6c7c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    6c7e:	2300      	movs	r3, #0
    6c80:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    6c82:	2300      	movs	r3, #0
    6c84:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6c86:	4b25      	ldr	r3, [pc, #148]	; (6d1c <Power_Ip_RCM_GetResetReason+0xa8>)
    6c88:	699a      	ldr	r2, [r3, #24]
    6c8a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6c8e:	4013      	ands	r3, r2
    6c90:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    6c92:	9b03      	ldr	r3, [sp, #12]
    6c94:	2b00      	cmp	r3, #0
    6c96:	d008      	beq.n	6caa <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6c98:	4920      	ldr	r1, [pc, #128]	; (6d1c <Power_Ip_RCM_GetResetReason+0xa8>)
    6c9a:	9a03      	ldr	r2, [sp, #12]
    6c9c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6ca0:	4013      	ands	r3, r2
    6ca2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6ca4:	4a1e      	ldr	r2, [pc, #120]	; (6d20 <Power_Ip_RCM_GetResetReason+0xac>)
    6ca6:	9b03      	ldr	r3, [sp, #12]
    6ca8:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    6caa:	4b1d      	ldr	r3, [pc, #116]	; (6d20 <Power_Ip_RCM_GetResetReason+0xac>)
    6cac:	681b      	ldr	r3, [r3, #0]
    6cae:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    6cb0:	9a02      	ldr	r2, [sp, #8]
    6cb2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6cb6:	4013      	ands	r3, r2
    6cb8:	2b82      	cmp	r3, #130	; 0x82
    6cba:	d102      	bne.n	6cc2 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6cbc:	2305      	movs	r3, #5
    6cbe:	9307      	str	r3, [sp, #28]
    6cc0:	e027      	b.n	6d12 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    6cc2:	2300      	movs	r3, #0
    6cc4:	9306      	str	r3, [sp, #24]
    6cc6:	e021      	b.n	6d0c <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6cc8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6ccc:	9b06      	ldr	r3, [sp, #24]
    6cce:	fa22 f303 	lsr.w	r3, r2, r3
    6cd2:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6cd4:	9a01      	ldr	r2, [sp, #4]
    6cd6:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6cda:	4013      	ands	r3, r2
    6cdc:	2b00      	cmp	r3, #0
    6cde:	d012      	beq.n	6d06 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    6ce0:	9a01      	ldr	r2, [sp, #4]
    6ce2:	9b02      	ldr	r3, [sp, #8]
    6ce4:	4013      	ands	r3, r2
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	d00a      	beq.n	6d00 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6cea:	9b05      	ldr	r3, [sp, #20]
    6cec:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    6cee:	9b04      	ldr	r3, [sp, #16]
    6cf0:	3301      	adds	r3, #1
    6cf2:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6cf4:	9b04      	ldr	r3, [sp, #16]
    6cf6:	2b01      	cmp	r3, #1
    6cf8:	d902      	bls.n	6d00 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6cfa:	230d      	movs	r3, #13
    6cfc:	9307      	str	r3, [sp, #28]
                        break;
    6cfe:	e008      	b.n	6d12 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6d00:	9b05      	ldr	r3, [sp, #20]
    6d02:	3301      	adds	r3, #1
    6d04:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6d06:	9b06      	ldr	r3, [sp, #24]
    6d08:	3301      	adds	r3, #1
    6d0a:	9306      	str	r3, [sp, #24]
    6d0c:	9b06      	ldr	r3, [sp, #24]
    6d0e:	2b1f      	cmp	r3, #31
    6d10:	d9da      	bls.n	6cc8 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    6d12:	9b07      	ldr	r3, [sp, #28]
}
    6d14:	4618      	mov	r0, r3
    6d16:	b008      	add	sp, #32
    6d18:	4770      	bx	lr
    6d1a:	bf00      	nop
    6d1c:	4007f000 	.word	0x4007f000
    6d20:	1fff8d24 	.word	0x1fff8d24

00006d24 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6d24:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6d26:	4b0c      	ldr	r3, [pc, #48]	; (6d58 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6d28:	699a      	ldr	r2, [r3, #24]
    6d2a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6d2e:	4013      	ands	r3, r2
    6d30:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    6d32:	9b01      	ldr	r3, [sp, #4]
    6d34:	2b00      	cmp	r3, #0
    6d36:	d008      	beq.n	6d4a <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6d38:	4907      	ldr	r1, [pc, #28]	; (6d58 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6d3a:	9a01      	ldr	r2, [sp, #4]
    6d3c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6d40:	4013      	ands	r3, r2
    6d42:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6d44:	4a05      	ldr	r2, [pc, #20]	; (6d5c <Power_Ip_RCM_GetResetRawValue+0x38>)
    6d46:	9b01      	ldr	r3, [sp, #4]
    6d48:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    6d4a:	4b04      	ldr	r3, [pc, #16]	; (6d5c <Power_Ip_RCM_GetResetRawValue+0x38>)
    6d4c:	681b      	ldr	r3, [r3, #0]
    6d4e:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    6d50:	9b00      	ldr	r3, [sp, #0]
}
    6d52:	4618      	mov	r0, r3
    6d54:	b002      	add	sp, #8
    6d56:	4770      	bx	lr
    6d58:	4007f000 	.word	0x4007f000
    6d5c:	1fff8d24 	.word	0x1fff8d24

00006d60 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    6d60:	b082      	sub	sp, #8
    6d62:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    6d64:	9b01      	ldr	r3, [sp, #4]
    6d66:	681b      	ldr	r3, [r3, #0]
    6d68:	4a03      	ldr	r2, [pc, #12]	; (6d78 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    6d6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    6d6e:	6093      	str	r3, [r2, #8]
}
    6d70:	bf00      	nop
    6d72:	b002      	add	sp, #8
    6d74:	4770      	bx	lr
    6d76:	bf00      	nop
    6d78:	4007e000 	.word	0x4007e000

00006d7c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    6d7c:	b084      	sub	sp, #16
    6d7e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    6d80:	2301      	movs	r3, #1
    6d82:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6d84:	4b15      	ldr	r3, [pc, #84]	; (6ddc <Power_Ip_SMC_ModeCheckEntry+0x60>)
    6d86:	695b      	ldr	r3, [r3, #20]
    6d88:	b2db      	uxtb	r3, r3
    6d8a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    6d8c:	9b01      	ldr	r3, [sp, #4]
    6d8e:	2b02      	cmp	r3, #2
    6d90:	d012      	beq.n	6db8 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    6d92:	9b01      	ldr	r3, [sp, #4]
    6d94:	2b02      	cmp	r3, #2
    6d96:	d818      	bhi.n	6dca <Power_Ip_SMC_ModeCheckEntry+0x4e>
    6d98:	9b01      	ldr	r3, [sp, #4]
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	d003      	beq.n	6da6 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    6d9e:	9b01      	ldr	r3, [sp, #4]
    6da0:	2b01      	cmp	r3, #1
    6da2:	d003      	beq.n	6dac <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    6da4:	e011      	b.n	6dca <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    6da6:	2300      	movs	r3, #0
    6da8:	9303      	str	r3, [sp, #12]
            break;
    6daa:	e013      	b.n	6dd4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    6dac:	9b02      	ldr	r3, [sp, #8]
    6dae:	2b01      	cmp	r3, #1
    6db0:	d10d      	bne.n	6dce <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    6db2:	2300      	movs	r3, #0
    6db4:	9303      	str	r3, [sp, #12]
            break;
    6db6:	e00a      	b.n	6dce <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    6db8:	9b02      	ldr	r3, [sp, #8]
    6dba:	2b01      	cmp	r3, #1
    6dbc:	d002      	beq.n	6dc4 <Power_Ip_SMC_ModeCheckEntry+0x48>
    6dbe:	9b02      	ldr	r3, [sp, #8]
    6dc0:	2b10      	cmp	r3, #16
    6dc2:	d106      	bne.n	6dd2 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    6dc4:	2300      	movs	r3, #0
    6dc6:	9303      	str	r3, [sp, #12]
            break;
    6dc8:	e003      	b.n	6dd2 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    6dca:	bf00      	nop
    6dcc:	e002      	b.n	6dd4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6dce:	bf00      	nop
    6dd0:	e000      	b.n	6dd4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6dd2:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6dd4:	9b03      	ldr	r3, [sp, #12]
}
    6dd6:	4618      	mov	r0, r3
    6dd8:	b004      	add	sp, #16
    6dda:	4770      	bx	lr
    6ddc:	4007e000 	.word	0x4007e000

00006de0 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6de0:	b500      	push	{lr}
    6de2:	b08b      	sub	sp, #44	; 0x2c
    6de4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    6de6:	2300      	movs	r3, #0
    6de8:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6dea:	2300      	movs	r3, #0
    6dec:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    6dee:	2300      	movs	r3, #0
    6df0:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6df4:	9b01      	ldr	r3, [sp, #4]
    6df6:	685b      	ldr	r3, [r3, #4]
    6df8:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6dfa:	9b08      	ldr	r3, [sp, #32]
    6dfc:	2b02      	cmp	r3, #2
    6dfe:	d076      	beq.n	6eee <Power_Ip_SMC_ModeConfig+0x10e>
    6e00:	9b08      	ldr	r3, [sp, #32]
    6e02:	2b02      	cmp	r3, #2
    6e04:	f200 80ab 	bhi.w	6f5e <Power_Ip_SMC_ModeConfig+0x17e>
    6e08:	9b08      	ldr	r3, [sp, #32]
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	d003      	beq.n	6e16 <Power_Ip_SMC_ModeConfig+0x36>
    6e0e:	9b08      	ldr	r3, [sp, #32]
    6e10:	2b01      	cmp	r3, #1
    6e12:	d034      	beq.n	6e7e <Power_Ip_SMC_ModeConfig+0x9e>
    6e14:	e0a3      	b.n	6f5e <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    6e16:	4b58      	ldr	r3, [pc, #352]	; (6f78 <Power_Ip_SMC_ModeConfig+0x198>)
    6e18:	68db      	ldr	r3, [r3, #12]
    6e1a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6e1c:	9b06      	ldr	r3, [sp, #24]
    6e1e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6e22:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    6e24:	4a54      	ldr	r2, [pc, #336]	; (6f78 <Power_Ip_SMC_ModeConfig+0x198>)
    6e26:	9b06      	ldr	r3, [sp, #24]
    6e28:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6e2a:	aa02      	add	r2, sp, #8
    6e2c:	a903      	add	r1, sp, #12
    6e2e:	a804      	add	r0, sp, #16
    6e30:	f24c 3350 	movw	r3, #50000	; 0xc350
    6e34:	f7ff fece 	bl	6bd4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6e38:	9a02      	ldr	r2, [sp, #8]
    6e3a:	a903      	add	r1, sp, #12
    6e3c:	ab04      	add	r3, sp, #16
    6e3e:	4618      	mov	r0, r3
    6e40:	f7ff fee2 	bl	6c08 <Power_Ip_TimeoutExpired>
    6e44:	4603      	mov	r3, r0
    6e46:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    6e4a:	4b4b      	ldr	r3, [pc, #300]	; (6f78 <Power_Ip_SMC_ModeConfig+0x198>)
    6e4c:	695b      	ldr	r3, [r3, #20]
    6e4e:	f003 0301 	and.w	r3, r3, #1
    6e52:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6e54:	9b05      	ldr	r3, [sp, #20]
    6e56:	2b01      	cmp	r3, #1
    6e58:	d006      	beq.n	6e68 <Power_Ip_SMC_ModeConfig+0x88>
    6e5a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6e5e:	f083 0301 	eor.w	r3, r3, #1
    6e62:	b2db      	uxtb	r3, r3
    6e64:	2b00      	cmp	r3, #0
    6e66:	d1e7      	bne.n	6e38 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    6e68:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d079      	beq.n	6f64 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6e70:	2301      	movs	r3, #1
    6e72:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6e74:	21ff      	movs	r1, #255	; 0xff
    6e76:	2000      	movs	r0, #0
    6e78:	f7ff fe90 	bl	6b9c <Power_Ip_ReportPowerErrors>
            }

            break;
    6e7c:	e072      	b.n	6f64 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    6e7e:	4b3e      	ldr	r3, [pc, #248]	; (6f78 <Power_Ip_SMC_ModeConfig+0x198>)
    6e80:	68db      	ldr	r3, [r3, #12]
    6e82:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6e84:	9b06      	ldr	r3, [sp, #24]
    6e86:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6e8a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    6e8c:	9b06      	ldr	r3, [sp, #24]
    6e8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    6e92:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6e94:	4a38      	ldr	r2, [pc, #224]	; (6f78 <Power_Ip_SMC_ModeConfig+0x198>)
    6e96:	9b06      	ldr	r3, [sp, #24]
    6e98:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6e9a:	aa02      	add	r2, sp, #8
    6e9c:	a903      	add	r1, sp, #12
    6e9e:	a804      	add	r0, sp, #16
    6ea0:	f24c 3350 	movw	r3, #50000	; 0xc350
    6ea4:	f7ff fe96 	bl	6bd4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6ea8:	9a02      	ldr	r2, [sp, #8]
    6eaa:	a903      	add	r1, sp, #12
    6eac:	ab04      	add	r3, sp, #16
    6eae:	4618      	mov	r0, r3
    6eb0:	f7ff feaa 	bl	6c08 <Power_Ip_TimeoutExpired>
    6eb4:	4603      	mov	r3, r0
    6eb6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    6eba:	4b2f      	ldr	r3, [pc, #188]	; (6f78 <Power_Ip_SMC_ModeConfig+0x198>)
    6ebc:	695b      	ldr	r3, [r3, #20]
    6ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6ec2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6ec4:	9b05      	ldr	r3, [sp, #20]
    6ec6:	2b80      	cmp	r3, #128	; 0x80
    6ec8:	d006      	beq.n	6ed8 <Power_Ip_SMC_ModeConfig+0xf8>
    6eca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6ece:	f083 0301 	eor.w	r3, r3, #1
    6ed2:	b2db      	uxtb	r3, r3
    6ed4:	2b00      	cmp	r3, #0
    6ed6:	d1e7      	bne.n	6ea8 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6ed8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6edc:	2b00      	cmp	r3, #0
    6ede:	d043      	beq.n	6f68 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6ee0:	2301      	movs	r3, #1
    6ee2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6ee4:	21ff      	movs	r1, #255	; 0xff
    6ee6:	2000      	movs	r0, #0
    6ee8:	f7ff fe58 	bl	6b9c <Power_Ip_ReportPowerErrors>
            }

            break;
    6eec:	e03c      	b.n	6f68 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    6eee:	4b22      	ldr	r3, [pc, #136]	; (6f78 <Power_Ip_SMC_ModeConfig+0x198>)
    6ef0:	68db      	ldr	r3, [r3, #12]
    6ef2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6ef4:	9b06      	ldr	r3, [sp, #24]
    6ef6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6efa:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6efc:	9b06      	ldr	r3, [sp, #24]
    6efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6f02:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6f04:	4a1c      	ldr	r2, [pc, #112]	; (6f78 <Power_Ip_SMC_ModeConfig+0x198>)
    6f06:	9b06      	ldr	r3, [sp, #24]
    6f08:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6f0a:	aa02      	add	r2, sp, #8
    6f0c:	a903      	add	r1, sp, #12
    6f0e:	a804      	add	r0, sp, #16
    6f10:	f24c 3350 	movw	r3, #50000	; 0xc350
    6f14:	f7ff fe5e 	bl	6bd4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6f18:	9a02      	ldr	r2, [sp, #8]
    6f1a:	a903      	add	r1, sp, #12
    6f1c:	ab04      	add	r3, sp, #16
    6f1e:	4618      	mov	r0, r3
    6f20:	f7ff fe72 	bl	6c08 <Power_Ip_TimeoutExpired>
    6f24:	4603      	mov	r3, r0
    6f26:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    6f2a:	4b13      	ldr	r3, [pc, #76]	; (6f78 <Power_Ip_SMC_ModeConfig+0x198>)
    6f2c:	695b      	ldr	r3, [r3, #20]
    6f2e:	f003 0304 	and.w	r3, r3, #4
    6f32:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6f34:	9b05      	ldr	r3, [sp, #20]
    6f36:	2b04      	cmp	r3, #4
    6f38:	d006      	beq.n	6f48 <Power_Ip_SMC_ModeConfig+0x168>
    6f3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6f3e:	f083 0301 	eor.w	r3, r3, #1
    6f42:	b2db      	uxtb	r3, r3
    6f44:	2b00      	cmp	r3, #0
    6f46:	d1e7      	bne.n	6f18 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6f48:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d00d      	beq.n	6f6c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6f50:	2301      	movs	r3, #1
    6f52:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6f54:	21ff      	movs	r1, #255	; 0xff
    6f56:	2000      	movs	r0, #0
    6f58:	f7ff fe20 	bl	6b9c <Power_Ip_ReportPowerErrors>
            }

            break;
    6f5c:	e006      	b.n	6f6c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6f5e:	2301      	movs	r3, #1
    6f60:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    6f62:	e004      	b.n	6f6e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6f64:	bf00      	nop
    6f66:	e002      	b.n	6f6e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6f68:	bf00      	nop
    6f6a:	e000      	b.n	6f6e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6f6c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    6f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6f70:	4618      	mov	r0, r3
    6f72:	b00b      	add	sp, #44	; 0x2c
    6f74:	f85d fb04 	ldr.w	pc, [sp], #4
    6f78:	4007e000 	.word	0x4007e000

00006f7c <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    6f7c:	b500      	push	{lr}
    6f7e:	b085      	sub	sp, #20
    6f80:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6f82:	9b01      	ldr	r3, [sp, #4]
    6f84:	9303      	str	r3, [sp, #12]
#endif /* (STD_ON == PORT_PRECOMPILE_SUPPORT) */

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    6f86:	2300      	movs	r3, #0
    6f88:	f88d 300b 	strb.w	r3, [sp, #11]
#if (STD_OFF == PORT_PRECOMPILE_SUPPORT)
    if (NULL_PTR == ConfigPtr)
    6f8c:	9b01      	ldr	r3, [sp, #4]
    6f8e:	2b00      	cmp	r3, #0
    6f90:	d106      	bne.n	6fa0 <Port_Init+0x24>
#else /*(STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    if (NULL_PTR != ConfigPtr)
#endif /* (STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_INIT_FAILED);
    6f92:	230c      	movs	r3, #12
    6f94:	2200      	movs	r2, #0
    6f96:	2100      	movs	r1, #0
    6f98:	207c      	movs	r0, #124	; 0x7c
    6f9a:	f011 fc49 	bl	18830 <Det_ReportError>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
        }
    }
}
    6f9e:	e014      	b.n	6fca <Port_Init+0x4e>
        if ((uint32)1 != pLocalConfigPtr->pau8Port_PartitionList[CoreId])
    6fa0:	9b03      	ldr	r3, [sp, #12]
    6fa2:	69da      	ldr	r2, [r3, #28]
    6fa4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6fa8:	4413      	add	r3, r2
    6faa:	781b      	ldrb	r3, [r3, #0]
    6fac:	2b01      	cmp	r3, #1
    6fae:	d006      	beq.n	6fbe <Port_Init+0x42>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
    6fb0:	23f0      	movs	r3, #240	; 0xf0
    6fb2:	2200      	movs	r2, #0
    6fb4:	2100      	movs	r1, #0
    6fb6:	207c      	movs	r0, #124	; 0x7c
    6fb8:	f011 fc3a 	bl	18830 <Det_ReportError>
}
    6fbc:	e005      	b.n	6fca <Port_Init+0x4e>
            Port_Ipw_Init(pLocalConfigPtr);
    6fbe:	9803      	ldr	r0, [sp, #12]
    6fc0:	f000 fc64 	bl	788c <Port_Ipw_Init>
            Port_pConfigPtr = pLocalConfigPtr;
    6fc4:	4a03      	ldr	r2, [pc, #12]	; (6fd4 <Port_Init+0x58>)
    6fc6:	9b03      	ldr	r3, [sp, #12]
    6fc8:	6013      	str	r3, [r2, #0]
}
    6fca:	bf00      	nop
    6fcc:	b005      	add	sp, #20
    6fce:	f85d fb04 	ldr.w	pc, [sp], #4
    6fd2:	bf00      	nop
    6fd4:	1fff8d28 	.word	0x1fff8d28

00006fd8 <Port_SetPinDirection>:
void Port_SetPinDirection
(
    Port_PinType Pin,
    Port_PinDirectionType Direction
)
{
    6fd8:	b500      	push	{lr}
    6fda:	b085      	sub	sp, #20
    6fdc:	9001      	str	r0, [sp, #4]
    6fde:	9100      	str	r1, [sp, #0]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    /* Variable used to store current error status */
    Std_ReturnType ErrStatus;

    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    6fe0:	4b11      	ldr	r3, [pc, #68]	; (7028 <Port_SetPinDirection+0x50>)
    6fe2:	681b      	ldr	r3, [r3, #0]
    6fe4:	2b00      	cmp	r3, #0
    6fe6:	d106      	bne.n	6ff6 <Port_SetPinDirection+0x1e>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    6fe8:	230f      	movs	r3, #15
    6fea:	2201      	movs	r2, #1
    6fec:	2100      	movs	r1, #0
    6fee:	207c      	movs	r0, #124	; 0x7c
    6ff0:	f011 fc1e 	bl	18830 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    6ff4:	e013      	b.n	701e <Port_SetPinDirection+0x46>
        ErrStatus = Port_Ipw_SetPinDirection(Pin, Direction, Port_pConfigPtr);
    6ff6:	4b0c      	ldr	r3, [pc, #48]	; (7028 <Port_SetPinDirection+0x50>)
    6ff8:	681b      	ldr	r3, [r3, #0]
    6ffa:	461a      	mov	r2, r3
    6ffc:	9900      	ldr	r1, [sp, #0]
    6ffe:	9801      	ldr	r0, [sp, #4]
    7000:	f000 fcb2 	bl	7968 <Port_Ipw_SetPinDirection>
    7004:	4603      	mov	r3, r0
    7006:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_NOT_OK == ErrStatus)
    700a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    700e:	2b01      	cmp	r3, #1
    7010:	d105      	bne.n	701e <Port_SetPinDirection+0x46>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
    7012:	230b      	movs	r3, #11
    7014:	2201      	movs	r2, #1
    7016:	2100      	movs	r1, #0
    7018:	207c      	movs	r0, #124	; 0x7c
    701a:	f011 fc09 	bl	18830 <Det_ReportError>
}
    701e:	bf00      	nop
    7020:	b005      	add	sp, #20
    7022:	f85d fb04 	ldr.w	pc, [sp], #4
    7026:	bf00      	nop
    7028:	1fff8d28 	.word	0x1fff8d28

0000702c <Port_SetPinMode>:
void Port_SetPinMode
(
    Port_PinType Pin,
    Port_PinModeType Mode
)
{
    702c:	b500      	push	{lr}
    702e:	b085      	sub	sp, #20
    7030:	9001      	str	r0, [sp, #4]
    7032:	460b      	mov	r3, r1
    7034:	f88d 3003 	strb.w	r3, [sp, #3]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 u8PinModeError = (uint8)0U;
    7038:	2300      	movs	r3, #0
    703a:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if port is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    703e:	4b12      	ldr	r3, [pc, #72]	; (7088 <Port_SetPinMode+0x5c>)
    7040:	681b      	ldr	r3, [r3, #0]
    7042:	2b00      	cmp	r3, #0
    7044:	d106      	bne.n	7054 <Port_SetPinMode+0x28>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_UNINIT);
    7046:	230f      	movs	r3, #15
    7048:	2204      	movs	r2, #4
    704a:	2100      	movs	r1, #0
    704c:	207c      	movs	r0, #124	; 0x7c
    704e:	f011 fbef 	bl	18830 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    7052:	e014      	b.n	707e <Port_SetPinMode+0x52>
        u8PinModeError = (uint8)Port_Ipw_SetPinMode(Pin, Mode, Port_pConfigPtr);
    7054:	4b0c      	ldr	r3, [pc, #48]	; (7088 <Port_SetPinMode+0x5c>)
    7056:	681a      	ldr	r2, [r3, #0]
    7058:	f89d 3003 	ldrb.w	r3, [sp, #3]
    705c:	4619      	mov	r1, r3
    705e:	9801      	ldr	r0, [sp, #4]
    7060:	f000 fd7a 	bl	7b58 <Port_Ipw_SetPinMode>
    7064:	4603      	mov	r3, r0
    7066:	f88d 300f 	strb.w	r3, [sp, #15]
        if (PORT_E_PARAM_INVALID_MODE == u8PinModeError)
    706a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    706e:	2b0d      	cmp	r3, #13
    7070:	d105      	bne.n	707e <Port_SetPinMode+0x52>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
    7072:	230d      	movs	r3, #13
    7074:	2204      	movs	r2, #4
    7076:	2100      	movs	r1, #0
    7078:	207c      	movs	r0, #124	; 0x7c
    707a:	f011 fbd9 	bl	18830 <Det_ReportError>
}
    707e:	bf00      	nop
    7080:	b005      	add	sp, #20
    7082:	f85d fb04 	ldr.w	pc, [sp], #4
    7086:	bf00      	nop
    7088:	1fff8d28 	.word	0x1fff8d28

0000708c <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    708c:	b500      	push	{lr}
    708e:	b083      	sub	sp, #12
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    7090:	2300      	movs	r3, #0
    7092:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    7096:	4b12      	ldr	r3, [pc, #72]	; (70e0 <Port_RefreshPortDirection+0x54>)
    7098:	681b      	ldr	r3, [r3, #0]
    709a:	2b00      	cmp	r3, #0
    709c:	d106      	bne.n	70ac <Port_RefreshPortDirection+0x20>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    709e:	230f      	movs	r3, #15
    70a0:	2202      	movs	r2, #2
    70a2:	2100      	movs	r1, #0
    70a4:	207c      	movs	r0, #124	; 0x7c
    70a6:	f011 fbc3 	bl	18830 <Det_ReportError>
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    }
}
    70aa:	e014      	b.n	70d6 <Port_RefreshPortDirection+0x4a>
    else if ((uint32)1 != Port_pConfigPtr->pau8Port_PartitionList[CoreId])
    70ac:	4b0c      	ldr	r3, [pc, #48]	; (70e0 <Port_RefreshPortDirection+0x54>)
    70ae:	681b      	ldr	r3, [r3, #0]
    70b0:	69da      	ldr	r2, [r3, #28]
    70b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    70b6:	4413      	add	r3, r2
    70b8:	781b      	ldrb	r3, [r3, #0]
    70ba:	2b01      	cmp	r3, #1
    70bc:	d006      	beq.n	70cc <Port_RefreshPortDirection+0x40>
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    70be:	23f0      	movs	r3, #240	; 0xf0
    70c0:	2202      	movs	r2, #2
    70c2:	2100      	movs	r1, #0
    70c4:	207c      	movs	r0, #124	; 0x7c
    70c6:	f011 fbb3 	bl	18830 <Det_ReportError>
}
    70ca:	e004      	b.n	70d6 <Port_RefreshPortDirection+0x4a>
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    70cc:	4b04      	ldr	r3, [pc, #16]	; (70e0 <Port_RefreshPortDirection+0x54>)
    70ce:	681b      	ldr	r3, [r3, #0]
    70d0:	4618      	mov	r0, r3
    70d2:	f000 febf 	bl	7e54 <Port_Ipw_RefreshPortDirection>
}
    70d6:	bf00      	nop
    70d8:	b003      	add	sp, #12
    70da:	f85d fb04 	ldr.w	pc, [sp], #4
    70de:	bf00      	nop
    70e0:	1fff8d28 	.word	0x1fff8d28

000070e4 <Port_GetVersionInfo>:
*/
void Port_GetVersionInfo
(
    Std_VersionInfoType * versioninfo
)
{
    70e4:	b500      	push	{lr}
    70e6:	b083      	sub	sp, #12
    70e8:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    if (NULL_PTR == versioninfo)
    70ea:	9b01      	ldr	r3, [sp, #4]
    70ec:	2b00      	cmp	r3, #0
    70ee:	d106      	bne.n	70fe <Port_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_GETVERSIONINFO_ID, (uint8)PORT_E_PARAM_POINTER);
    70f0:	2310      	movs	r3, #16
    70f2:	2203      	movs	r2, #3
    70f4:	2100      	movs	r1, #0
    70f6:	207c      	movs	r0, #124	; 0x7c
    70f8:	f011 fb9a 	bl	18830 <Det_ReportError>
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    }
}
    70fc:	e00e      	b.n	711c <Port_GetVersionInfo+0x38>
        (versioninfo)->vendorID         = (uint16)PORT_VENDOR_ID;
    70fe:	9b01      	ldr	r3, [sp, #4]
    7100:	222b      	movs	r2, #43	; 0x2b
    7102:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
    7104:	9b01      	ldr	r3, [sp, #4]
    7106:	227c      	movs	r2, #124	; 0x7c
    7108:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
    710a:	9b01      	ldr	r3, [sp, #4]
    710c:	2202      	movs	r2, #2
    710e:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
    7110:	9b01      	ldr	r3, [sp, #4]
    7112:	2200      	movs	r2, #0
    7114:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    7116:	9b01      	ldr	r3, [sp, #4]
    7118:	2200      	movs	r2, #0
    711a:	719a      	strb	r2, [r3, #6]
}
    711c:	bf00      	nop
    711e:	b003      	add	sp, #12
    7120:	f85d fb04 	ldr.w	pc, [sp], #4

00007124 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    7124:	b086      	sub	sp, #24
    7126:	9003      	str	r0, [sp, #12]
    7128:	9102      	str	r1, [sp, #8]
    712a:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    712c:	23ff      	movs	r3, #255	; 0xff
    712e:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    7130:	9b03      	ldr	r3, [sp, #12]
    7132:	4a39      	ldr	r2, [pc, #228]	; (7218 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    7134:	4293      	cmp	r3, r2
    7136:	d151      	bne.n	71dc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    7138:	9b02      	ldr	r3, [sp, #8]
    713a:	2b10      	cmp	r3, #16
    713c:	d867      	bhi.n	720e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    713e:	a201      	add	r2, pc, #4	; (adr r2, 7144 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    7140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7144:	00007189 	.word	0x00007189
    7148:	00007197 	.word	0x00007197
    714c:	0000720f 	.word	0x0000720f
    7150:	0000720f 	.word	0x0000720f
    7154:	0000720f 	.word	0x0000720f
    7158:	0000720f 	.word	0x0000720f
    715c:	0000720f 	.word	0x0000720f
    7160:	0000720f 	.word	0x0000720f
    7164:	0000720f 	.word	0x0000720f
    7168:	0000720f 	.word	0x0000720f
    716c:	0000720f 	.word	0x0000720f
    7170:	0000720f 	.word	0x0000720f
    7174:	0000720f 	.word	0x0000720f
    7178:	000071a5 	.word	0x000071a5
    717c:	000071b3 	.word	0x000071b3
    7180:	000071c1 	.word	0x000071c1
    7184:	000071cf 	.word	0x000071cf
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    7188:	2301      	movs	r3, #1
    718a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    718c:	9a05      	ldr	r2, [sp, #20]
    718e:	9b01      	ldr	r3, [sp, #4]
    7190:	4313      	orrs	r3, r2
    7192:	9305      	str	r3, [sp, #20]
                break;
    7194:	e03c      	b.n	7210 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    7196:	2302      	movs	r3, #2
    7198:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    719a:	9a05      	ldr	r2, [sp, #20]
    719c:	9b01      	ldr	r3, [sp, #4]
    719e:	4313      	orrs	r3, r2
    71a0:	9305      	str	r3, [sp, #20]
                break;
    71a2:	e035      	b.n	7210 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    71a4:	2304      	movs	r3, #4
    71a6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    71a8:	9a05      	ldr	r2, [sp, #20]
    71aa:	9b01      	ldr	r3, [sp, #4]
    71ac:	4313      	orrs	r3, r2
    71ae:	9305      	str	r3, [sp, #20]
                break;
    71b0:	e02e      	b.n	7210 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    71b2:	2308      	movs	r3, #8
    71b4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    71b6:	9a05      	ldr	r2, [sp, #20]
    71b8:	9b01      	ldr	r3, [sp, #4]
    71ba:	4313      	orrs	r3, r2
    71bc:	9305      	str	r3, [sp, #20]
                break;
    71be:	e027      	b.n	7210 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    71c0:	230e      	movs	r3, #14
    71c2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    71c4:	9a05      	ldr	r2, [sp, #20]
    71c6:	9b01      	ldr	r3, [sp, #4]
    71c8:	4013      	ands	r3, r2
    71ca:	9305      	str	r3, [sp, #20]
                break;
    71cc:	e020      	b.n	7210 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    71ce:	230d      	movs	r3, #13
    71d0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    71d2:	9a05      	ldr	r2, [sp, #20]
    71d4:	9b01      	ldr	r3, [sp, #4]
    71d6:	4013      	ands	r3, r2
    71d8:	9305      	str	r3, [sp, #20]
                break;
    71da:	e019      	b.n	7210 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    71dc:	9b03      	ldr	r3, [sp, #12]
    71de:	4a0f      	ldr	r2, [pc, #60]	; (721c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    71e0:	4293      	cmp	r3, r2
    71e2:	d115      	bne.n	7210 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    71e4:	9b02      	ldr	r3, [sp, #8]
    71e6:	2b00      	cmp	r3, #0
    71e8:	d003      	beq.n	71f2 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    71ea:	9b02      	ldr	r3, [sp, #8]
    71ec:	2b01      	cmp	r3, #1
    71ee:	d007      	beq.n	7200 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    71f0:	e00e      	b.n	7210 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    71f2:	230b      	movs	r3, #11
    71f4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    71f6:	9a05      	ldr	r2, [sp, #20]
    71f8:	9b01      	ldr	r3, [sp, #4]
    71fa:	4013      	ands	r3, r2
    71fc:	9305      	str	r3, [sp, #20]
                break;
    71fe:	e007      	b.n	7210 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    7200:	2307      	movs	r3, #7
    7202:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    7204:	9a05      	ldr	r2, [sp, #20]
    7206:	9b01      	ldr	r3, [sp, #4]
    7208:	4013      	ands	r3, r2
    720a:	9305      	str	r3, [sp, #20]
                break;
    720c:	e000      	b.n	7210 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    720e:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    7210:	9b05      	ldr	r3, [sp, #20]
}
    7212:	4618      	mov	r0, r3
    7214:	b006      	add	sp, #24
    7216:	4770      	bx	lr
    7218:	4004a000 	.word	0x4004a000
    721c:	4004b000 	.word	0x4004b000

00007220 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    7220:	b500      	push	{lr}
    7222:	b089      	sub	sp, #36	; 0x24
    7224:	9003      	str	r0, [sp, #12]
    7226:	9102      	str	r1, [sp, #8]
    7228:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    722a:	9b01      	ldr	r3, [sp, #4]
    722c:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    722e:	9b01      	ldr	r3, [sp, #4]
    7230:	2b08      	cmp	r3, #8
    7232:	d121      	bne.n	7278 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    7234:	4b13      	ldr	r3, [pc, #76]	; (7284 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    7236:	685b      	ldr	r3, [r3, #4]
    7238:	f003 030f 	and.w	r3, r3, #15
    723c:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    723e:	9a06      	ldr	r2, [sp, #24]
    7240:	9902      	ldr	r1, [sp, #8]
    7242:	9803      	ldr	r0, [sp, #12]
    7244:	f7ff ff6e 	bl	7124 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    7248:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    724a:	9b05      	ldr	r3, [sp, #20]
    724c:	2bff      	cmp	r3, #255	; 0xff
    724e:	d011      	beq.n	7274 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    7250:	f00e fbd0 	bl	159f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    7254:	4b0b      	ldr	r3, [pc, #44]	; (7284 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    7256:	685b      	ldr	r3, [r3, #4]
    7258:	4a0a      	ldr	r2, [pc, #40]	; (7284 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    725a:	f023 030f 	bic.w	r3, r3, #15
    725e:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    7260:	4b08      	ldr	r3, [pc, #32]	; (7284 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    7262:	685a      	ldr	r2, [r3, #4]
    7264:	9b05      	ldr	r3, [sp, #20]
    7266:	f003 030f 	and.w	r3, r3, #15
    726a:	4906      	ldr	r1, [pc, #24]	; (7284 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    726c:	4313      	orrs	r3, r2
    726e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    7270:	f00e fbec 	bl	15a4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    7274:	2300      	movs	r3, #0
    7276:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    7278:	9b07      	ldr	r3, [sp, #28]
}
    727a:	4618      	mov	r0, r3
    727c:	b009      	add	sp, #36	; 0x24
    727e:	f85d fb04 	ldr.w	pc, [sp], #4
    7282:	bf00      	nop
    7284:	40048000 	.word	0x40048000

00007288 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    7288:	b500      	push	{lr}
    728a:	b087      	sub	sp, #28
    728c:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    728e:	2300      	movs	r3, #0
    7290:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    7292:	2300      	movs	r3, #0
    7294:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    7296:	2300      	movs	r3, #0
    7298:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    729a:	9b01      	ldr	r3, [sp, #4]
    729c:	68db      	ldr	r3, [r3, #12]
    729e:	2b02      	cmp	r3, #2
    72a0:	d00a      	beq.n	72b8 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    72a2:	9b05      	ldr	r3, [sp, #20]
    72a4:	f043 0302 	orr.w	r3, r3, #2
    72a8:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    72aa:	9b01      	ldr	r3, [sp, #4]
    72ac:	68db      	ldr	r3, [r3, #12]
    72ae:	f003 0301 	and.w	r3, r3, #1
    72b2:	9a05      	ldr	r2, [sp, #20]
    72b4:	4313      	orrs	r3, r2
    72b6:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    72b8:	9b01      	ldr	r3, [sp, #4]
    72ba:	699b      	ldr	r3, [r3, #24]
    72bc:	019b      	lsls	r3, r3, #6
    72be:	f003 0340 	and.w	r3, r3, #64	; 0x40
    72c2:	9a05      	ldr	r2, [sp, #20]
    72c4:	4313      	orrs	r3, r2
    72c6:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    72c8:	9b01      	ldr	r3, [sp, #4]
    72ca:	6a1b      	ldr	r3, [r3, #32]
    72cc:	03db      	lsls	r3, r3, #15
    72ce:	b29b      	uxth	r3, r3
    72d0:	9a05      	ldr	r2, [sp, #20]
    72d2:	4313      	orrs	r3, r2
    72d4:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    72d6:	9b01      	ldr	r3, [sp, #4]
    72d8:	7f1b      	ldrb	r3, [r3, #28]
    72da:	2b00      	cmp	r3, #0
    72dc:	d001      	beq.n	72e2 <Port_Ci_Port_Ip_PinInit+0x5a>
    72de:	2310      	movs	r3, #16
    72e0:	e000      	b.n	72e4 <Port_Ci_Port_Ip_PinInit+0x5c>
    72e2:	2300      	movs	r3, #0
    72e4:	9a05      	ldr	r2, [sp, #20]
    72e6:	4313      	orrs	r3, r2
    72e8:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    72ea:	9b01      	ldr	r3, [sp, #4]
    72ec:	691b      	ldr	r3, [r3, #16]
    72ee:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    72f0:	9b01      	ldr	r3, [sp, #4]
    72f2:	6818      	ldr	r0, [r3, #0]
    72f4:	9b01      	ldr	r3, [sp, #4]
    72f6:	689b      	ldr	r3, [r3, #8]
    72f8:	9a04      	ldr	r2, [sp, #16]
    72fa:	4619      	mov	r1, r3
    72fc:	f7ff ff90 	bl	7220 <Port_Ci_Port_Ip_ConfigureInterleave>
    7300:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    7302:	9b03      	ldr	r3, [sp, #12]
    7304:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    7306:	9b04      	ldr	r3, [sp, #16]
    7308:	021b      	lsls	r3, r3, #8
    730a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    730e:	9a05      	ldr	r2, [sp, #20]
    7310:	4313      	orrs	r3, r2
    7312:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    7314:	f00e f9d4 	bl	156c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    7318:	9b01      	ldr	r3, [sp, #4]
    731a:	681b      	ldr	r3, [r3, #0]
    731c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    7320:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    7322:	9b01      	ldr	r3, [sp, #4]
    7324:	689b      	ldr	r3, [r3, #8]
    7326:	2201      	movs	r2, #1
    7328:	fa02 f303 	lsl.w	r3, r2, r3
    732c:	43db      	mvns	r3, r3
    732e:	9a02      	ldr	r2, [sp, #8]
    7330:	4013      	ands	r3, r2
    7332:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    7334:	9b01      	ldr	r3, [sp, #4]
    7336:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    733a:	2b00      	cmp	r3, #0
    733c:	d001      	beq.n	7342 <Port_Ci_Port_Ip_PinInit+0xba>
    733e:	2201      	movs	r2, #1
    7340:	e000      	b.n	7344 <Port_Ci_Port_Ip_PinInit+0xbc>
    7342:	2200      	movs	r2, #0
    7344:	9b01      	ldr	r3, [sp, #4]
    7346:	689b      	ldr	r3, [r3, #8]
    7348:	fa02 f303 	lsl.w	r3, r2, r3
    734c:	9a02      	ldr	r2, [sp, #8]
    734e:	4313      	orrs	r3, r2
    7350:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    7352:	9b01      	ldr	r3, [sp, #4]
    7354:	681b      	ldr	r3, [r3, #0]
    7356:	9a02      	ldr	r2, [sp, #8]
    7358:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    735c:	f00e f9dc 	bl	15718 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    7360:	9b04      	ldr	r3, [sp, #16]
    7362:	2b01      	cmp	r3, #1
    7364:	d16d      	bne.n	7442 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    7366:	9b01      	ldr	r3, [sp, #4]
    7368:	695b      	ldr	r3, [r3, #20]
    736a:	2b02      	cmp	r3, #2
    736c:	d138      	bne.n	73e0 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    736e:	9b01      	ldr	r3, [sp, #4]
    7370:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    7374:	2b01      	cmp	r3, #1
    7376:	d10f      	bne.n	7398 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    7378:	f00e f9f4 	bl	15764 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    737c:	9b01      	ldr	r3, [sp, #4]
    737e:	685b      	ldr	r3, [r3, #4]
    7380:	6859      	ldr	r1, [r3, #4]
    7382:	9b01      	ldr	r3, [sp, #4]
    7384:	689b      	ldr	r3, [r3, #8]
    7386:	2201      	movs	r2, #1
    7388:	409a      	lsls	r2, r3
    738a:	9b01      	ldr	r3, [sp, #4]
    738c:	685b      	ldr	r3, [r3, #4]
    738e:	430a      	orrs	r2, r1
    7390:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    7392:	f00e fa13 	bl	157bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    7396:	e013      	b.n	73c0 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    7398:	9b01      	ldr	r3, [sp, #4]
    739a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    739e:	2b00      	cmp	r3, #0
    73a0:	d10e      	bne.n	73c0 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    73a2:	f00e fa31 	bl	15808 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    73a6:	9b01      	ldr	r3, [sp, #4]
    73a8:	685b      	ldr	r3, [r3, #4]
    73aa:	6899      	ldr	r1, [r3, #8]
    73ac:	9b01      	ldr	r3, [sp, #4]
    73ae:	689b      	ldr	r3, [r3, #8]
    73b0:	2201      	movs	r2, #1
    73b2:	409a      	lsls	r2, r3
    73b4:	9b01      	ldr	r3, [sp, #4]
    73b6:	685b      	ldr	r3, [r3, #4]
    73b8:	430a      	orrs	r2, r1
    73ba:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    73bc:	f00e fa50 	bl	15860 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    73c0:	f00e fa74 	bl	158ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    73c4:	9b01      	ldr	r3, [sp, #4]
    73c6:	685b      	ldr	r3, [r3, #4]
    73c8:	6959      	ldr	r1, [r3, #20]
    73ca:	9b01      	ldr	r3, [sp, #4]
    73cc:	689b      	ldr	r3, [r3, #8]
    73ce:	2201      	movs	r2, #1
    73d0:	409a      	lsls	r2, r3
    73d2:	9b01      	ldr	r3, [sp, #4]
    73d4:	685b      	ldr	r3, [r3, #4]
    73d6:	430a      	orrs	r2, r1
    73d8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    73da:	f00e fa93 	bl	15904 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    73de:	e030      	b.n	7442 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    73e0:	f00e fa64 	bl	158ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    73e4:	9b01      	ldr	r3, [sp, #4]
    73e6:	685b      	ldr	r3, [r3, #4]
    73e8:	6959      	ldr	r1, [r3, #20]
    73ea:	9b01      	ldr	r3, [sp, #4]
    73ec:	689b      	ldr	r3, [r3, #8]
    73ee:	2201      	movs	r2, #1
    73f0:	fa02 f303 	lsl.w	r3, r2, r3
    73f4:	43da      	mvns	r2, r3
    73f6:	9b01      	ldr	r3, [sp, #4]
    73f8:	685b      	ldr	r3, [r3, #4]
    73fa:	400a      	ands	r2, r1
    73fc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    73fe:	f00e fa81 	bl	15904 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    7402:	f00e faa5 	bl	15950 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    7406:	9b01      	ldr	r3, [sp, #4]
    7408:	685b      	ldr	r3, [r3, #4]
    740a:	6999      	ldr	r1, [r3, #24]
    740c:	9b01      	ldr	r3, [sp, #4]
    740e:	689b      	ldr	r3, [r3, #8]
    7410:	2201      	movs	r2, #1
    7412:	fa02 f303 	lsl.w	r3, r2, r3
    7416:	43da      	mvns	r2, r3
    7418:	9b01      	ldr	r3, [sp, #4]
    741a:	685b      	ldr	r3, [r3, #4]
    741c:	400a      	ands	r2, r1
    741e:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    7420:	9b01      	ldr	r3, [sp, #4]
    7422:	695b      	ldr	r3, [r3, #20]
    7424:	2b03      	cmp	r3, #3
    7426:	d10a      	bne.n	743e <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    7428:	9b01      	ldr	r3, [sp, #4]
    742a:	685b      	ldr	r3, [r3, #4]
    742c:	6999      	ldr	r1, [r3, #24]
    742e:	9b01      	ldr	r3, [sp, #4]
    7430:	689b      	ldr	r3, [r3, #8]
    7432:	2201      	movs	r2, #1
    7434:	409a      	lsls	r2, r3
    7436:	9b01      	ldr	r3, [sp, #4]
    7438:	685b      	ldr	r3, [r3, #4]
    743a:	430a      	orrs	r2, r1
    743c:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    743e:	f00e fab3 	bl	159a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    7442:	9b01      	ldr	r3, [sp, #4]
    7444:	681b      	ldr	r3, [r3, #0]
    7446:	9a01      	ldr	r2, [sp, #4]
    7448:	6892      	ldr	r2, [r2, #8]
    744a:	9905      	ldr	r1, [sp, #20]
    744c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7450:	bf00      	nop
    7452:	b007      	add	sp, #28
    7454:	f85d fb04 	ldr.w	pc, [sp], #4

00007458 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    7458:	b500      	push	{lr}
    745a:	b085      	sub	sp, #20
    745c:	9001      	str	r0, [sp, #4]
    745e:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    7460:	2300      	movs	r3, #0
    7462:	9303      	str	r3, [sp, #12]
    7464:	e00d      	b.n	7482 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    7466:	9a03      	ldr	r2, [sp, #12]
    7468:	4613      	mov	r3, r2
    746a:	009b      	lsls	r3, r3, #2
    746c:	4413      	add	r3, r2
    746e:	00db      	lsls	r3, r3, #3
    7470:	461a      	mov	r2, r3
    7472:	9b00      	ldr	r3, [sp, #0]
    7474:	4413      	add	r3, r2
    7476:	4618      	mov	r0, r3
    7478:	f7ff ff06 	bl	7288 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    747c:	9b03      	ldr	r3, [sp, #12]
    747e:	3301      	adds	r3, #1
    7480:	9303      	str	r3, [sp, #12]
    7482:	9a03      	ldr	r2, [sp, #12]
    7484:	9b01      	ldr	r3, [sp, #4]
    7486:	429a      	cmp	r2, r3
    7488:	d3ed      	bcc.n	7466 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    748a:	2300      	movs	r3, #0
}
    748c:	4618      	mov	r0, r3
    748e:	b005      	add	sp, #20
    7490:	f85d fb04 	ldr.w	pc, [sp], #4

00007494 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    7494:	b500      	push	{lr}
    7496:	b087      	sub	sp, #28
    7498:	9003      	str	r0, [sp, #12]
    749a:	9102      	str	r1, [sp, #8]
    749c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    749e:	9a01      	ldr	r2, [sp, #4]
    74a0:	9902      	ldr	r1, [sp, #8]
    74a2:	9803      	ldr	r0, [sp, #12]
    74a4:	f7ff febc 	bl	7220 <Port_Ci_Port_Ip_ConfigureInterleave>
    74a8:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    74aa:	f00e faf5 	bl	15a98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    74ae:	9b03      	ldr	r3, [sp, #12]
    74b0:	9a02      	ldr	r2, [sp, #8]
    74b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    74b6:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    74b8:	9b04      	ldr	r3, [sp, #16]
    74ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    74be:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    74c0:	9b05      	ldr	r3, [sp, #20]
    74c2:	021b      	lsls	r3, r3, #8
    74c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    74c8:	9a04      	ldr	r2, [sp, #16]
    74ca:	4313      	orrs	r3, r2
    74cc:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    74ce:	9b03      	ldr	r3, [sp, #12]
    74d0:	9a02      	ldr	r2, [sp, #8]
    74d2:	9904      	ldr	r1, [sp, #16]
    74d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    74d8:	f00e fb0a 	bl	15af0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    74dc:	bf00      	nop
    74de:	b007      	add	sp, #28
    74e0:	f85d fb04 	ldr.w	pc, [sp], #4

000074e4 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    74e4:	b500      	push	{lr}
    74e6:	b083      	sub	sp, #12
    74e8:	9001      	str	r0, [sp, #4]
    74ea:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    74ec:	f00e fb26 	bl	15b3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    74f0:	9b01      	ldr	r3, [sp, #4]
    74f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    74f6:	2101      	movs	r1, #1
    74f8:	9b00      	ldr	r3, [sp, #0]
    74fa:	fa01 f303 	lsl.w	r3, r1, r3
    74fe:	431a      	orrs	r2, r3
    7500:	9b01      	ldr	r3, [sp, #4]
    7502:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    7506:	f00e fb45 	bl	15b94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    750a:	bf00      	nop
    750c:	b003      	add	sp, #12
    750e:	f85d fb04 	ldr.w	pc, [sp], #4

00007512 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    7512:	b500      	push	{lr}
    7514:	b083      	sub	sp, #12
    7516:	9001      	str	r0, [sp, #4]
    7518:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    751a:	f00e fb61 	bl	15be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    751e:	9b01      	ldr	r3, [sp, #4]
    7520:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    7524:	2101      	movs	r1, #1
    7526:	9b00      	ldr	r3, [sp, #0]
    7528:	fa01 f303 	lsl.w	r3, r1, r3
    752c:	43db      	mvns	r3, r3
    752e:	401a      	ands	r2, r3
    7530:	9b01      	ldr	r3, [sp, #4]
    7532:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    7536:	f00e fb7f 	bl	15c38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    753a:	bf00      	nop
    753c:	b003      	add	sp, #12
    753e:	f85d fb04 	ldr.w	pc, [sp], #4

00007542 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    7542:	b082      	sub	sp, #8
    7544:	9001      	str	r0, [sp, #4]
    7546:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    7548:	9b00      	ldr	r3, [sp, #0]
    754a:	785b      	ldrb	r3, [r3, #1]
    754c:	f003 0201 	and.w	r2, r3, #1
    7550:	9b01      	ldr	r3, [sp, #4]
    7552:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    7556:	9b00      	ldr	r3, [sp, #0]
    7558:	789b      	ldrb	r3, [r3, #2]
    755a:	f003 021f 	and.w	r2, r3, #31
    755e:	9b01      	ldr	r3, [sp, #4]
    7560:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    7564:	bf00      	nop
    7566:	b002      	add	sp, #8
    7568:	4770      	bx	lr

0000756a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    756a:	b086      	sub	sp, #24
    756c:	9003      	str	r0, [sp, #12]
    756e:	9301      	str	r3, [sp, #4]
    7570:	460b      	mov	r3, r1
    7572:	f8ad 300a 	strh.w	r3, [sp, #10]
    7576:	4613      	mov	r3, r2
    7578:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    757c:	2300      	movs	r3, #0
    757e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    7582:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7586:	f043 0301 	orr.w	r3, r3, #1
    758a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    758e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7592:	f043 0302 	orr.w	r3, r3, #2
    7596:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    759a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    759e:	f043 0310 	orr.w	r3, r3, #16
    75a2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    75a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    75aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    75ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    75b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    75b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    75ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    75be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    75c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    75c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    75ca:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    75ce:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    75d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    75d6:	4013      	ands	r3, r2
    75d8:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    75dc:	9b01      	ldr	r3, [sp, #4]
    75de:	2b00      	cmp	r3, #0
    75e0:	d003      	beq.n	75ea <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    75e2:	9b01      	ldr	r3, [sp, #4]
    75e4:	2b01      	cmp	r3, #1
    75e6:	d00a      	beq.n	75fe <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    75e8:	e013      	b.n	7612 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    75ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    75ee:	041a      	lsls	r2, r3, #16
    75f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    75f4:	431a      	orrs	r2, r3
    75f6:	9b03      	ldr	r3, [sp, #12]
    75f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    75fc:	e009      	b.n	7612 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    75fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7602:	041a      	lsls	r2, r3, #16
    7604:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7608:	431a      	orrs	r2, r3
    760a:	9b03      	ldr	r3, [sp, #12]
    760c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    7610:	bf00      	nop
    }
}
    7612:	bf00      	nop
    7614:	b006      	add	sp, #24
    7616:	4770      	bx	lr

00007618 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    7618:	b500      	push	{lr}
    761a:	b087      	sub	sp, #28
    761c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    761e:	9b01      	ldr	r3, [sp, #4]
    7620:	885b      	ldrh	r3, [r3, #2]
    7622:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    7626:	9b01      	ldr	r3, [sp, #4]
    7628:	689b      	ldr	r3, [r3, #8]
    762a:	7a1b      	ldrb	r3, [r3, #8]
    762c:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    7630:	9b01      	ldr	r3, [sp, #4]
    7632:	689b      	ldr	r3, [r3, #8]
    7634:	681b      	ldr	r3, [r3, #0]
    7636:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    7638:	9b01      	ldr	r3, [sp, #4]
    763a:	689b      	ldr	r3, [r3, #8]
    763c:	685b      	ldr	r3, [r3, #4]
    763e:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    7640:	2300      	movs	r3, #0
    7642:	f8ad 3016 	strh.w	r3, [sp, #22]
    7646:	e111      	b.n	786c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    7648:	9b02      	ldr	r3, [sp, #8]
    764a:	2b02      	cmp	r3, #2
    764c:	d169      	bne.n	7722 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    764e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7652:	2b01      	cmp	r3, #1
    7654:	d11a      	bne.n	768c <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7656:	9b01      	ldr	r3, [sp, #4]
    7658:	685a      	ldr	r2, [r3, #4]
    765a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    765e:	005b      	lsls	r3, r3, #1
    7660:	4413      	add	r3, r2
    7662:	881b      	ldrh	r3, [r3, #0]
    7664:	f003 021f 	and.w	r2, r3, #31
    7668:	9b01      	ldr	r3, [sp, #4]
    766a:	6859      	ldr	r1, [r3, #4]
    766c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7670:	005b      	lsls	r3, r3, #1
    7672:	440b      	add	r3, r1
    7674:	881b      	ldrh	r3, [r3, #0]
    7676:	095b      	lsrs	r3, r3, #5
    7678:	b29b      	uxth	r3, r3
    767a:	4619      	mov	r1, r3
    767c:	4b81      	ldr	r3, [pc, #516]	; (7884 <Port_Ipw_Init_UnusedPins+0x26c>)
    767e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7682:	2101      	movs	r1, #1
    7684:	fa01 f202 	lsl.w	r2, r1, r2
    7688:	605a      	str	r2, [r3, #4]
    768a:	e01d      	b.n	76c8 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    768c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7690:	2b00      	cmp	r3, #0
    7692:	d119      	bne.n	76c8 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7694:	9b01      	ldr	r3, [sp, #4]
    7696:	685a      	ldr	r2, [r3, #4]
    7698:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    769c:	005b      	lsls	r3, r3, #1
    769e:	4413      	add	r3, r2
    76a0:	881b      	ldrh	r3, [r3, #0]
    76a2:	f003 021f 	and.w	r2, r3, #31
    76a6:	9b01      	ldr	r3, [sp, #4]
    76a8:	6859      	ldr	r1, [r3, #4]
    76aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    76ae:	005b      	lsls	r3, r3, #1
    76b0:	440b      	add	r3, r1
    76b2:	881b      	ldrh	r3, [r3, #0]
    76b4:	095b      	lsrs	r3, r3, #5
    76b6:	b29b      	uxth	r3, r3
    76b8:	4619      	mov	r1, r3
    76ba:	4b72      	ldr	r3, [pc, #456]	; (7884 <Port_Ipw_Init_UnusedPins+0x26c>)
    76bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    76c0:	2101      	movs	r1, #1
    76c2:	fa01 f202 	lsl.w	r2, r1, r2
    76c6:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    76c8:	f00e fadc 	bl	15c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    76cc:	9b01      	ldr	r3, [sp, #4]
    76ce:	685a      	ldr	r2, [r3, #4]
    76d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    76d4:	005b      	lsls	r3, r3, #1
    76d6:	4413      	add	r3, r2
    76d8:	881b      	ldrh	r3, [r3, #0]
    76da:	095b      	lsrs	r3, r3, #5
    76dc:	b29b      	uxth	r3, r3
    76de:	461a      	mov	r2, r3
    76e0:	4b68      	ldr	r3, [pc, #416]	; (7884 <Port_Ipw_Init_UnusedPins+0x26c>)
    76e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    76e6:	6959      	ldr	r1, [r3, #20]
    76e8:	9b01      	ldr	r3, [sp, #4]
    76ea:	685a      	ldr	r2, [r3, #4]
    76ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    76f0:	005b      	lsls	r3, r3, #1
    76f2:	4413      	add	r3, r2
    76f4:	881b      	ldrh	r3, [r3, #0]
    76f6:	f003 031f 	and.w	r3, r3, #31
    76fa:	2201      	movs	r2, #1
    76fc:	409a      	lsls	r2, r3
    76fe:	9b01      	ldr	r3, [sp, #4]
    7700:	6858      	ldr	r0, [r3, #4]
    7702:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7706:	005b      	lsls	r3, r3, #1
    7708:	4403      	add	r3, r0
    770a:	881b      	ldrh	r3, [r3, #0]
    770c:	095b      	lsrs	r3, r3, #5
    770e:	b29b      	uxth	r3, r3
    7710:	4618      	mov	r0, r3
    7712:	4b5c      	ldr	r3, [pc, #368]	; (7884 <Port_Ipw_Init_UnusedPins+0x26c>)
    7714:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7718:	430a      	orrs	r2, r1
    771a:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    771c:	f00e fade 	bl	15cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    7720:	e086      	b.n	7830 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    7722:	f00e faaf 	bl	15c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    7726:	9b01      	ldr	r3, [sp, #4]
    7728:	685a      	ldr	r2, [r3, #4]
    772a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    772e:	005b      	lsls	r3, r3, #1
    7730:	4413      	add	r3, r2
    7732:	881b      	ldrh	r3, [r3, #0]
    7734:	095b      	lsrs	r3, r3, #5
    7736:	b29b      	uxth	r3, r3
    7738:	461a      	mov	r2, r3
    773a:	4b52      	ldr	r3, [pc, #328]	; (7884 <Port_Ipw_Init_UnusedPins+0x26c>)
    773c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7740:	6959      	ldr	r1, [r3, #20]
    7742:	9b01      	ldr	r3, [sp, #4]
    7744:	685a      	ldr	r2, [r3, #4]
    7746:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    774a:	005b      	lsls	r3, r3, #1
    774c:	4413      	add	r3, r2
    774e:	881b      	ldrh	r3, [r3, #0]
    7750:	f003 031f 	and.w	r3, r3, #31
    7754:	2201      	movs	r2, #1
    7756:	fa02 f303 	lsl.w	r3, r2, r3
    775a:	43da      	mvns	r2, r3
    775c:	9b01      	ldr	r3, [sp, #4]
    775e:	6858      	ldr	r0, [r3, #4]
    7760:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7764:	005b      	lsls	r3, r3, #1
    7766:	4403      	add	r3, r0
    7768:	881b      	ldrh	r3, [r3, #0]
    776a:	095b      	lsrs	r3, r3, #5
    776c:	b29b      	uxth	r3, r3
    776e:	4618      	mov	r0, r3
    7770:	4b44      	ldr	r3, [pc, #272]	; (7884 <Port_Ipw_Init_UnusedPins+0x26c>)
    7772:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7776:	400a      	ands	r2, r1
    7778:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    777a:	f00e faaf 	bl	15cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    777e:	f00e fad3 	bl	15d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7782:	9b01      	ldr	r3, [sp, #4]
    7784:	685a      	ldr	r2, [r3, #4]
    7786:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    778a:	005b      	lsls	r3, r3, #1
    778c:	4413      	add	r3, r2
    778e:	881b      	ldrh	r3, [r3, #0]
    7790:	095b      	lsrs	r3, r3, #5
    7792:	b29b      	uxth	r3, r3
    7794:	461a      	mov	r2, r3
    7796:	4b3b      	ldr	r3, [pc, #236]	; (7884 <Port_Ipw_Init_UnusedPins+0x26c>)
    7798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    779c:	6999      	ldr	r1, [r3, #24]
    779e:	9b01      	ldr	r3, [sp, #4]
    77a0:	685a      	ldr	r2, [r3, #4]
    77a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77a6:	005b      	lsls	r3, r3, #1
    77a8:	4413      	add	r3, r2
    77aa:	881b      	ldrh	r3, [r3, #0]
    77ac:	f003 031f 	and.w	r3, r3, #31
    77b0:	2201      	movs	r2, #1
    77b2:	fa02 f303 	lsl.w	r3, r2, r3
    77b6:	43da      	mvns	r2, r3
    77b8:	9b01      	ldr	r3, [sp, #4]
    77ba:	6858      	ldr	r0, [r3, #4]
    77bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77c0:	005b      	lsls	r3, r3, #1
    77c2:	4403      	add	r3, r0
    77c4:	881b      	ldrh	r3, [r3, #0]
    77c6:	095b      	lsrs	r3, r3, #5
    77c8:	b29b      	uxth	r3, r3
    77ca:	4618      	mov	r0, r3
    77cc:	4b2d      	ldr	r3, [pc, #180]	; (7884 <Port_Ipw_Init_UnusedPins+0x26c>)
    77ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    77d2:	400a      	ands	r2, r1
    77d4:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    77d6:	9b02      	ldr	r3, [sp, #8]
    77d8:	2b03      	cmp	r3, #3
    77da:	d127      	bne.n	782c <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    77dc:	9b01      	ldr	r3, [sp, #4]
    77de:	685a      	ldr	r2, [r3, #4]
    77e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77e4:	005b      	lsls	r3, r3, #1
    77e6:	4413      	add	r3, r2
    77e8:	881b      	ldrh	r3, [r3, #0]
    77ea:	095b      	lsrs	r3, r3, #5
    77ec:	b29b      	uxth	r3, r3
    77ee:	461a      	mov	r2, r3
    77f0:	4b24      	ldr	r3, [pc, #144]	; (7884 <Port_Ipw_Init_UnusedPins+0x26c>)
    77f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77f6:	6999      	ldr	r1, [r3, #24]
    77f8:	9b01      	ldr	r3, [sp, #4]
    77fa:	685a      	ldr	r2, [r3, #4]
    77fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7800:	005b      	lsls	r3, r3, #1
    7802:	4413      	add	r3, r2
    7804:	881b      	ldrh	r3, [r3, #0]
    7806:	f003 031f 	and.w	r3, r3, #31
    780a:	2201      	movs	r2, #1
    780c:	409a      	lsls	r2, r3
    780e:	9b01      	ldr	r3, [sp, #4]
    7810:	6858      	ldr	r0, [r3, #4]
    7812:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7816:	005b      	lsls	r3, r3, #1
    7818:	4403      	add	r3, r0
    781a:	881b      	ldrh	r3, [r3, #0]
    781c:	095b      	lsrs	r3, r3, #5
    781e:	b29b      	uxth	r3, r3
    7820:	4618      	mov	r0, r3
    7822:	4b18      	ldr	r3, [pc, #96]	; (7884 <Port_Ipw_Init_UnusedPins+0x26c>)
    7824:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7828:	430a      	orrs	r2, r1
    782a:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    782c:	f00e faa8 	bl	15d80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    7830:	9b01      	ldr	r3, [sp, #4]
    7832:	685a      	ldr	r2, [r3, #4]
    7834:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7838:	005b      	lsls	r3, r3, #1
    783a:	4413      	add	r3, r2
    783c:	881b      	ldrh	r3, [r3, #0]
    783e:	095b      	lsrs	r3, r3, #5
    7840:	b29b      	uxth	r3, r3
    7842:	461a      	mov	r2, r3
    7844:	4b10      	ldr	r3, [pc, #64]	; (7888 <Port_Ipw_Init_UnusedPins+0x270>)
    7846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    784a:	9a01      	ldr	r2, [sp, #4]
    784c:	6851      	ldr	r1, [r2, #4]
    784e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7852:	0052      	lsls	r2, r2, #1
    7854:	440a      	add	r2, r1
    7856:	8812      	ldrh	r2, [r2, #0]
    7858:	f002 021f 	and.w	r2, r2, #31
    785c:	9903      	ldr	r1, [sp, #12]
    785e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    7862:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7866:	3301      	adds	r3, #1
    7868:	f8ad 3016 	strh.w	r3, [sp, #22]
    786c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7870:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7874:	429a      	cmp	r2, r3
    7876:	f4ff aee7 	bcc.w	7648 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    787a:	bf00      	nop
    787c:	bf00      	nop
    787e:	b007      	add	sp, #28
    7880:	f85d fb04 	ldr.w	pc, [sp], #4
    7884:	000197cc 	.word	0x000197cc
    7888:	000197b8 	.word	0x000197b8

0000788c <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    788c:	b500      	push	{lr}
    788e:	b085      	sub	sp, #20
    7890:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    7892:	9b01      	ldr	r3, [sp, #4]
    7894:	7c1b      	ldrb	r3, [r3, #16]
    7896:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    789a:	2300      	movs	r3, #0
    789c:	f8ad 300e 	strh.w	r3, [sp, #14]
    78a0:	e035      	b.n	790e <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    78a2:	9b01      	ldr	r3, [sp, #4]
    78a4:	695a      	ldr	r2, [r3, #20]
    78a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    78aa:	00db      	lsls	r3, r3, #3
    78ac:	4413      	add	r3, r2
    78ae:	781b      	ldrb	r3, [r3, #0]
    78b0:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    78b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78b8:	4a29      	ldr	r2, [pc, #164]	; (7960 <Port_Ipw_Init+0xd4>)
    78ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    78be:	9b01      	ldr	r3, [sp, #4]
    78c0:	695a      	ldr	r2, [r3, #20]
    78c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    78c6:	00db      	lsls	r3, r3, #3
    78c8:	4413      	add	r3, r2
    78ca:	4619      	mov	r1, r3
    78cc:	f7ff fe39 	bl	7542 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    78d0:	f00e fbc4 	bl	1605c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    78d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78d8:	4a21      	ldr	r2, [pc, #132]	; (7960 <Port_Ipw_Init+0xd4>)
    78da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78de:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    78e2:	9b01      	ldr	r3, [sp, #4]
    78e4:	695a      	ldr	r2, [r3, #20]
    78e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    78ea:	00db      	lsls	r3, r3, #3
    78ec:	4413      	add	r3, r2
    78ee:	685a      	ldr	r2, [r3, #4]
    78f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    78f4:	481a      	ldr	r0, [pc, #104]	; (7960 <Port_Ipw_Init+0xd4>)
    78f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    78fa:	430a      	orrs	r2, r1
    78fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    7900:	f00e fbd8 	bl	160b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    7904:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7908:	3301      	adds	r3, #1
    790a:	f8ad 300e 	strh.w	r3, [sp, #14]
    790e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7912:	b29b      	uxth	r3, r3
    7914:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7918:	429a      	cmp	r2, r3
    791a:	d3c2      	bcc.n	78a2 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    791c:	9b01      	ldr	r3, [sp, #4]
    791e:	6a1b      	ldr	r3, [r3, #32]
    7920:	4619      	mov	r1, r3
    7922:	200c      	movs	r0, #12
    7924:	f7ff fd98 	bl	7458 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    7928:	9801      	ldr	r0, [sp, #4]
    792a:	f7ff fe75 	bl	7618 <Port_Ipw_Init_UnusedPins>
     (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
    )
    /* Port_Ipw_au16GpioDirChangeability is only used by Port_Ci_Port_Ip_SetPinDirection, Port_Ci_Port_Ip_Set2PinsDirection
       and Port_Ci_Port_Ip_SetPinMode functions */
    /* Initialize the Array with Change Direction Flags for GPIO */
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    792e:	2300      	movs	r3, #0
    7930:	f8ad 300e 	strh.w	r3, [sp, #14]
    7934:	e00a      	b.n	794c <Port_Ipw_Init+0xc0>
    {
        Port_Ipw_au16GpioDirChangeability[u16PinIndex] = (uint16)0UL;
    7936:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    793a:	4a0a      	ldr	r2, [pc, #40]	; (7964 <Port_Ipw_Init+0xd8>)
    793c:	2100      	movs	r1, #0
    793e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    7942:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7946:	3301      	adds	r3, #1
    7948:	f8ad 300e 	strh.w	r3, [sp, #14]
    794c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7950:	2b09      	cmp	r3, #9
    7952:	d9f0      	bls.n	7936 <Port_Ipw_Init+0xaa>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    7954:	bf00      	nop
    7956:	bf00      	nop
    7958:	b005      	add	sp, #20
    795a:	f85d fb04 	ldr.w	pc, [sp], #4
    795e:	bf00      	nop
    7960:	000197b8 	.word	0x000197b8
    7964:	1fff8d2c 	.word	0x1fff8d2c

00007968 <Port_Ipw_SetPinDirection>:
(
    Port_PinType            PinIndex,
    Port_PinDirectionType   eDirection,
    const Port_ConfigType * pConfigPtr
)
{
    7968:	b500      	push	{lr}
    796a:	b087      	sub	sp, #28
    796c:	9003      	str	r0, [sp, #12]
    796e:	9102      	str	r1, [sp, #8]
    7970:	9201      	str	r2, [sp, #4]
    /* Point to the Port Pin PCR register address */
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7972:	9b01      	ldr	r3, [sp, #4]
    7974:	68d9      	ldr	r1, [r3, #12]
    7976:	9a03      	ldr	r2, [sp, #12]
    7978:	4613      	mov	r3, r2
    797a:	009b      	lsls	r3, r3, #2
    797c:	4413      	add	r3, r2
    797e:	009b      	lsls	r3, r3, #2
    7980:	440b      	add	r3, r1
    7982:	881b      	ldrh	r3, [r3, #0]
    7984:	f8ad 3014 	strh.w	r3, [sp, #20]
    /* Return value */
    Std_ReturnType PinDirError             = (Std_ReturnType)E_OK;
    7988:	2300      	movs	r3, #0
    798a:	f88d 3017 	strb.w	r3, [sp, #23]

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    798e:	2300      	movs	r3, #0
    7990:	f88d 3013 	strb.w	r3, [sp, #19]

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    7994:	9b01      	ldr	r3, [sp, #4]
    7996:	881b      	ldrh	r3, [r3, #0]
    7998:	461a      	mov	r2, r3
    799a:	9b03      	ldr	r3, [sp, #12]
    799c:	4293      	cmp	r3, r2
    799e:	d306      	bcc.n	79ae <Port_Ipw_SetPinDirection+0x46>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_PIN);
    79a0:	230a      	movs	r3, #10
    79a2:	2201      	movs	r2, #1
    79a4:	2100      	movs	r1, #0
    79a6:	207c      	movs	r0, #124	; 0x7c
    79a8:	f010 ff42 	bl	18830 <Det_ReportError>
    79ac:	e0c9      	b.n	7b42 <Port_Ipw_SetPinDirection+0x1da>
    }
    /* Check port pin validity */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    79ae:	9b01      	ldr	r3, [sp, #4]
    79b0:	699a      	ldr	r2, [r3, #24]
    79b2:	9b03      	ldr	r3, [sp, #12]
    79b4:	009b      	lsls	r3, r3, #2
    79b6:	4413      	add	r3, r2
    79b8:	681a      	ldr	r2, [r3, #0]
    79ba:	f89d 3013 	ldrb.w	r3, [sp, #19]
    79be:	2101      	movs	r1, #1
    79c0:	fa01 f303 	lsl.w	r3, r1, r3
    79c4:	401a      	ands	r2, r3
    79c6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    79ca:	fa22 f303 	lsr.w	r3, r2, r3
    79ce:	2b01      	cmp	r3, #1
    79d0:	d006      	beq.n	79e0 <Port_Ipw_SetPinDirection+0x78>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    79d2:	23f0      	movs	r3, #240	; 0xf0
    79d4:	2201      	movs	r2, #1
    79d6:	2100      	movs	r1, #0
    79d8:	207c      	movs	r0, #124	; 0x7c
    79da:	f010 ff29 	bl	18830 <Det_ReportError>
    79de:	e0b0      	b.n	7b42 <Port_Ipw_SetPinDirection+0x1da>
    }
    else
    {
        /* Bit Offset and Table value for change direction flag word */
        uint8 u8PinDescBitOffset       = (uint8)(Pin & PORT_CI_BIT_OFFSET_MASK_U8);
    79e0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    79e4:	b2db      	uxtb	r3, r3
    79e6:	f003 030f 	and.w	r3, r3, #15
    79ea:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Number of block 16 */
        uint16 u16PinChangeDirFlagWord  = Port_Ipw_au16GpioDirChangeability[(uint8)(Pin >> 4)];
    79ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    79f2:	091b      	lsrs	r3, r3, #4
    79f4:	b29b      	uxth	r3, r3
    79f6:	b2db      	uxtb	r3, r3
    79f8:	461a      	mov	r2, r3
    79fa:	4b55      	ldr	r3, [pc, #340]	; (7b50 <Port_Ipw_SetPinDirection+0x1e8>)
    79fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7a00:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* Check the Direction changeability option */
        if ((TRUE == pConfigPtr->pUsedPadConfig[PinIndex].bDC) || ((uint16)0 != (u16PinChangeDirFlagWord & (uint16)(1UL << u8PinDescBitOffset))))
    7a04:	9b01      	ldr	r3, [sp, #4]
    7a06:	68d9      	ldr	r1, [r3, #12]
    7a08:	9a03      	ldr	r2, [sp, #12]
    7a0a:	4613      	mov	r3, r2
    7a0c:	009b      	lsls	r3, r3, #2
    7a0e:	4413      	add	r3, r2
    7a10:	009b      	lsls	r3, r3, #2
    7a12:	440b      	add	r3, r1
    7a14:	7c5b      	ldrb	r3, [r3, #17]
    7a16:	2b00      	cmp	r3, #0
    7a18:	d10c      	bne.n	7a34 <Port_Ipw_SetPinDirection+0xcc>
    7a1a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7a1e:	2201      	movs	r2, #1
    7a20:	fa02 f303 	lsl.w	r3, r2, r3
    7a24:	b29a      	uxth	r2, r3
    7a26:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7a2a:	4013      	ands	r3, r2
    7a2c:	b29b      	uxth	r3, r3
    7a2e:	2b00      	cmp	r3, #0
    7a30:	f000 8082 	beq.w	7b38 <Port_Ipw_SetPinDirection+0x1d0>
        {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
            /* Configures Port Pin as Output */
            if (PORT_PIN_OUT == eDirection)
    7a34:	9b02      	ldr	r3, [sp, #8]
    7a36:	2b02      	cmp	r3, #2
    7a38:	d11d      	bne.n	7a76 <Port_Ipw_SetPinDirection+0x10e>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    7a3a:	f00e fb61 	bl	16100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR |= (uint32)(1UL << GPIO_CHANNEL_U32(Pin));
    7a3e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a42:	095b      	lsrs	r3, r3, #5
    7a44:	b29b      	uxth	r3, r3
    7a46:	461a      	mov	r2, r3
    7a48:	4b42      	ldr	r3, [pc, #264]	; (7b54 <Port_Ipw_SetPinDirection+0x1ec>)
    7a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a4e:	6959      	ldr	r1, [r3, #20]
    7a50:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a54:	f003 031f 	and.w	r3, r3, #31
    7a58:	2201      	movs	r2, #1
    7a5a:	409a      	lsls	r2, r3
    7a5c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a60:	095b      	lsrs	r3, r3, #5
    7a62:	b29b      	uxth	r3, r3
    7a64:	4618      	mov	r0, r3
    7a66:	4b3b      	ldr	r3, [pc, #236]	; (7b54 <Port_Ipw_SetPinDirection+0x1ec>)
    7a68:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7a6c:	430a      	orrs	r2, r1
    7a6e:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    7a70:	f00e fb72 	bl	16158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>
            if (PORT_PIN_OUT == eDirection)
    7a74:	e064      	b.n	7b40 <Port_Ipw_SetPinDirection+0x1d8>
            }
            /* Configures Port Pin as Input or High-Z*/
            else if ((PORT_PIN_IN == eDirection) || (PORT_PIN_HIGH_Z == eDirection))
    7a76:	9b02      	ldr	r3, [sp, #8]
    7a78:	2b01      	cmp	r3, #1
    7a7a:	d002      	beq.n	7a82 <Port_Ipw_SetPinDirection+0x11a>
    7a7c:	9b02      	ldr	r3, [sp, #8]
    7a7e:	2b03      	cmp	r3, #3
    7a80:	d15e      	bne.n	7b40 <Port_Ipw_SetPinDirection+0x1d8>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    7a82:	f00e fb3d 	bl	16100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7a86:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a8a:	095b      	lsrs	r3, r3, #5
    7a8c:	b29b      	uxth	r3, r3
    7a8e:	461a      	mov	r2, r3
    7a90:	4b30      	ldr	r3, [pc, #192]	; (7b54 <Port_Ipw_SetPinDirection+0x1ec>)
    7a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a96:	6959      	ldr	r1, [r3, #20]
    7a98:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a9c:	f003 031f 	and.w	r3, r3, #31
    7aa0:	2201      	movs	r2, #1
    7aa2:	fa02 f303 	lsl.w	r3, r2, r3
    7aa6:	43da      	mvns	r2, r3
    7aa8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7aac:	095b      	lsrs	r3, r3, #5
    7aae:	b29b      	uxth	r3, r3
    7ab0:	4618      	mov	r0, r3
    7ab2:	4b28      	ldr	r3, [pc, #160]	; (7b54 <Port_Ipw_SetPinDirection+0x1ec>)
    7ab4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7ab8:	400a      	ands	r2, r1
    7aba:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    7abc:	f00e fb4c 	bl	16158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17();
    7ac0:	f00e fb70 	bl	161a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7ac4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7ac8:	095b      	lsrs	r3, r3, #5
    7aca:	b29b      	uxth	r3, r3
    7acc:	461a      	mov	r2, r3
    7ace:	4b21      	ldr	r3, [pc, #132]	; (7b54 <Port_Ipw_SetPinDirection+0x1ec>)
    7ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ad4:	6999      	ldr	r1, [r3, #24]
    7ad6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7ada:	f003 031f 	and.w	r3, r3, #31
    7ade:	2201      	movs	r2, #1
    7ae0:	fa02 f303 	lsl.w	r3, r2, r3
    7ae4:	43da      	mvns	r2, r3
    7ae6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7aea:	095b      	lsrs	r3, r3, #5
    7aec:	b29b      	uxth	r3, r3
    7aee:	4618      	mov	r0, r3
    7af0:	4b18      	ldr	r3, [pc, #96]	; (7b54 <Port_Ipw_SetPinDirection+0x1ec>)
    7af2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7af6:	400a      	ands	r2, r1
    7af8:	619a      	str	r2, [r3, #24]

                /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                if (PORT_PIN_HIGH_Z == eDirection)
    7afa:	9b02      	ldr	r3, [sp, #8]
    7afc:	2b03      	cmp	r3, #3
    7afe:	d118      	bne.n	7b32 <Port_Ipw_SetPinDirection+0x1ca>
                {
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR |= ((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7b00:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b04:	095b      	lsrs	r3, r3, #5
    7b06:	b29b      	uxth	r3, r3
    7b08:	461a      	mov	r2, r3
    7b0a:	4b12      	ldr	r3, [pc, #72]	; (7b54 <Port_Ipw_SetPinDirection+0x1ec>)
    7b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b10:	6999      	ldr	r1, [r3, #24]
    7b12:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b16:	f003 031f 	and.w	r3, r3, #31
    7b1a:	2201      	movs	r2, #1
    7b1c:	409a      	lsls	r2, r3
    7b1e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b22:	095b      	lsrs	r3, r3, #5
    7b24:	b29b      	uxth	r3, r3
    7b26:	4618      	mov	r0, r3
    7b28:	4b0a      	ldr	r3, [pc, #40]	; (7b54 <Port_Ipw_SetPinDirection+0x1ec>)
    7b2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7b2e:	430a      	orrs	r2, r1
    7b30:	619a      	str	r2, [r3, #24]
                }
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17();
    7b32:	f00e fb63 	bl	161fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>
            if (PORT_PIN_OUT == eDirection)
    7b36:	e003      	b.n	7b40 <Port_Ipw_SetPinDirection+0x1d8>
#if (STD_ON == PORT_DEV_ERROR_DETECT)
        }
        /* Direction changeability is NOT supported */
        else
        {
            PinDirError = (Std_ReturnType)E_NOT_OK;
    7b38:	2301      	movs	r3, #1
    7b3a:	f88d 3017 	strb.w	r3, [sp, #23]
    7b3e:	e000      	b.n	7b42 <Port_Ipw_SetPinDirection+0x1da>
            if (PORT_PIN_OUT == eDirection)
    7b40:	bf00      	nop
        }
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinDirError;
    7b42:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7b46:	4618      	mov	r0, r3
    7b48:	b007      	add	sp, #28
    7b4a:	f85d fb04 	ldr.w	pc, [sp], #4
    7b4e:	bf00      	nop
    7b50:	1fff8d2c 	.word	0x1fff8d2c
    7b54:	000197cc 	.word	0x000197cc

00007b58 <Port_Ipw_SetPinMode>:
(
    Port_PinType PinIndex,
    Port_PinModeType PinMode,
    const Port_ConfigType * pConfigPtr
)
{
    7b58:	b500      	push	{lr}
    7b5a:	b08b      	sub	sp, #44	; 0x2c
    7b5c:	9003      	str	r0, [sp, #12]
    7b5e:	460b      	mov	r3, r1
    7b60:	9201      	str	r2, [sp, #4]
    7b62:	f88d 300b 	strb.w	r3, [sp, #11]
    Std_ReturnType PinModeError             = (Std_ReturnType)0UL;
    7b66:	2300      	movs	r3, #0
    7b68:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint16 PinPad                           = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7b6c:	9b01      	ldr	r3, [sp, #4]
    7b6e:	68d9      	ldr	r1, [r3, #12]
    7b70:	9a03      	ldr	r2, [sp, #12]
    7b72:	4613      	mov	r3, r2
    7b74:	009b      	lsls	r3, r3, #2
    7b76:	4413      	add	r3, r2
    7b78:	009b      	lsls	r3, r3, #2
    7b7a:	440b      	add	r3, r1
    7b7c:	881b      	ldrh	r3, [r3, #0]
    7b7e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Port_PinModeType PinCfgRegValue         = (Port_PinModeType)PinMode;
    7b82:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7b86:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint16 u16PinDescBitOffset;
    /* Variable used to clear and updated PCR register */
    uint32 u32LocalPCR;
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    7b8a:	2300      	movs	r3, #0
    7b8c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    7b90:	9b01      	ldr	r3, [sp, #4]
    7b92:	881b      	ldrh	r3, [r3, #0]
    7b94:	461a      	mov	r2, r3
    7b96:	9b03      	ldr	r3, [sp, #12]
    7b98:	4293      	cmp	r3, r2
    7b9a:	d306      	bcc.n	7baa <Port_Ipw_SetPinMode+0x52>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_PIN);
    7b9c:	230a      	movs	r3, #10
    7b9e:	2204      	movs	r2, #4
    7ba0:	2100      	movs	r1, #0
    7ba2:	207c      	movs	r0, #124	; 0x7c
    7ba4:	f010 fe44 	bl	18830 <Det_ReportError>
    7ba8:	e0b3      	b.n	7d12 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check if this function was called with wrong core */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    7baa:	9b01      	ldr	r3, [sp, #4]
    7bac:	699a      	ldr	r2, [r3, #24]
    7bae:	9b03      	ldr	r3, [sp, #12]
    7bb0:	009b      	lsls	r3, r3, #2
    7bb2:	4413      	add	r3, r2
    7bb4:	681a      	ldr	r2, [r3, #0]
    7bb6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7bba:	2101      	movs	r1, #1
    7bbc:	fa01 f303 	lsl.w	r3, r1, r3
    7bc0:	401a      	ands	r2, r3
    7bc2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7bc6:	fa22 f303 	lsr.w	r3, r2, r3
    7bca:	2b01      	cmp	r3, #1
    7bcc:	d006      	beq.n	7bdc <Port_Ipw_SetPinMode+0x84>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_CONFIG);
    7bce:	23f0      	movs	r3, #240	; 0xf0
    7bd0:	2204      	movs	r2, #4
    7bd2:	2100      	movs	r1, #0
    7bd4:	207c      	movs	r0, #124	; 0x7c
    7bd6:	f010 fe2b 	bl	18830 <Det_ReportError>
    7bda:	e09a      	b.n	7d12 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check port pin mode Unchangeable */
    else if (FALSE ==  pConfigPtr->pUsedPadConfig[PinIndex].bMC)
    7bdc:	9b01      	ldr	r3, [sp, #4]
    7bde:	68d9      	ldr	r1, [r3, #12]
    7be0:	9a03      	ldr	r2, [sp, #12]
    7be2:	4613      	mov	r3, r2
    7be4:	009b      	lsls	r3, r3, #2
    7be6:	4413      	add	r3, r2
    7be8:	009b      	lsls	r3, r3, #2
    7bea:	440b      	add	r3, r1
    7bec:	7c9b      	ldrb	r3, [r3, #18]
    7bee:	f083 0301 	eor.w	r3, r3, #1
    7bf2:	b2db      	uxtb	r3, r3
    7bf4:	2b00      	cmp	r3, #0
    7bf6:	d006      	beq.n	7c06 <Port_Ipw_SetPinMode+0xae>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_MODE_UNCHANGEABLE);
    7bf8:	230e      	movs	r3, #14
    7bfa:	2204      	movs	r2, #4
    7bfc:	2100      	movs	r1, #0
    7bfe:	207c      	movs	r0, #124	; 0x7c
    7c00:	f010 fe16 	bl	18830 <Det_ReportError>
    7c04:	e085      	b.n	7d12 <Port_Ipw_SetPinMode+0x1ba>
    }
    else
    {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

        if (PAD_MODE_OPTIONS_U8 <= PinMode)
    7c06:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c0a:	2b07      	cmp	r3, #7
    7c0c:	d903      	bls.n	7c16 <Port_Ipw_SetPinMode+0xbe>
        {
            PinModeError = PORT_E_PARAM_INVALID_MODE;
    7c0e:	230d      	movs	r3, #13
    7c10:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    7c14:	e07d      	b.n	7d12 <Port_Ipw_SetPinMode+0x1ba>
        }
        else
        {
            Port_PinDirectionType ePadDirection = PORT_PIN_DISABLED;
    7c16:	2300      	movs	r3, #0
    7c18:	9307      	str	r3, [sp, #28]

            /* Bit offset of Pin index inside the pin description matrix */
            u16PinDescBitOffset = PinPad & PORT_MODE_BIT_OFFSET_MASK_U8;
    7c1a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7c1e:	f003 030f 	and.w	r3, r3, #15
    7c22:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Selected word inside the pin description matrix */
            u16PinDescWord = (uint16)Port_au16PinDescription[(uint8)PinMode][PinPad >> 4U];
    7c26:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7c2a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7c2e:	091b      	lsrs	r3, r3, #4
    7c30:	b29b      	uxth	r3, r3
    7c32:	4618      	mov	r0, r3
    7c34:	493a      	ldr	r1, [pc, #232]	; (7d20 <Port_Ipw_SetPinMode+0x1c8>)
    7c36:	4613      	mov	r3, r2
    7c38:	009b      	lsls	r3, r3, #2
    7c3a:	4413      	add	r3, r2
    7c3c:	005b      	lsls	r3, r3, #1
    7c3e:	4403      	add	r3, r0
    7c40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7c44:	f8ad 3018 	strh.w	r3, [sp, #24]

            /* Check if desired mode is valid for selected pin */
            if ((u16PinDescWord & ((uint16)1UL<<u16PinDescBitOffset)) != (uint16)0U)
    7c48:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    7c4c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    7c50:	fa42 f303 	asr.w	r3, r2, r3
    7c54:	f003 0301 	and.w	r3, r3, #1
    7c58:	2b00      	cmp	r3, #0
    7c5a:	d057      	beq.n	7d0c <Port_Ipw_SetPinMode+0x1b4>
            {
                switch(PinMode)
    7c5c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c60:	2b01      	cmp	r3, #1
    7c62:	d11f      	bne.n	7ca4 <Port_Ipw_SetPinMode+0x14c>
                {
                    case PORT_GPIO_MODE:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                        Port_Ipw_SetGpioDirChangeability(PinPad, TRUE);
    7c64:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7c68:	2101      	movs	r1, #1
    7c6a:	4618      	mov	r0, r3
    7c6c:	f000 f85c 	bl	7d28 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        ePadDirection = pConfigPtr->pUsedPadConfig[PinIndex].ePadDir;
    7c70:	9b01      	ldr	r3, [sp, #4]
    7c72:	68d9      	ldr	r1, [r3, #12]
    7c74:	9a03      	ldr	r2, [sp, #12]
    7c76:	4613      	mov	r3, r2
    7c78:	009b      	lsls	r3, r3, #2
    7c7a:	4413      	add	r3, r2
    7c7c:	009b      	lsls	r3, r3, #2
    7c7e:	440b      	add	r3, r1
    7c80:	68db      	ldr	r3, [r3, #12]
    7c82:	9307      	str	r3, [sp, #28]
#if (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL)
                        if ((PORT_PIN_IN != ePadDirection) && (PORT_PIN_HIGH_Z != ePadDirection))
    7c84:	9b07      	ldr	r3, [sp, #28]
    7c86:	2b01      	cmp	r3, #1
    7c88:	d006      	beq.n	7c98 <Port_Ipw_SetPinMode+0x140>
    7c8a:	9b07      	ldr	r3, [sp, #28]
    7c8c:	2b03      	cmp	r3, #3
    7c8e:	d003      	beq.n	7c98 <Port_Ipw_SetPinMode+0x140>
                        {
                            Port_Ipw_SetGpioPadOutput(PinIndex, pConfigPtr);
    7c90:	9901      	ldr	r1, [sp, #4]
    7c92:	9803      	ldr	r0, [sp, #12]
    7c94:	f000 f896 	bl	7dc4 <Port_Ipw_SetGpioPadOutput>
                        }
#endif /* (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL) */
                        (void)Port_Ipw_SetPinDirection(PinIndex, ePadDirection, pConfigPtr);
    7c98:	9a01      	ldr	r2, [sp, #4]
    7c9a:	9907      	ldr	r1, [sp, #28]
    7c9c:	9803      	ldr	r0, [sp, #12]
    7c9e:	f7ff fe63 	bl	7968 <Port_Ipw_SetPinDirection>
                        break;
    7ca2:	e006      	b.n	7cb2 <Port_Ipw_SetPinMode+0x15a>

                    default:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                    /* All the ALT modes except GPIO*/
                        Port_Ipw_SetGpioDirChangeability(PinPad,FALSE);
    7ca4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7ca8:	2100      	movs	r1, #0
    7caa:	4618      	mov	r0, r3
    7cac:	f000 f83c 	bl	7d28 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        break;
    7cb0:	bf00      	nop
                }
                /* Sets the port pin mode */
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27();
    7cb2:	f00e fdab 	bl	1680c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>
                u32LocalPCR  = (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)];
    7cb6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7cba:	095b      	lsrs	r3, r3, #5
    7cbc:	b29b      	uxth	r3, r3
    7cbe:	461a      	mov	r2, r3
    7cc0:	4b18      	ldr	r3, [pc, #96]	; (7d24 <Port_Ipw_SetPinMode+0x1cc>)
    7cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7cc6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7cca:	f002 021f 	and.w	r2, r2, #31
    7cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7cd2:	9305      	str	r3, [sp, #20]

                u32LocalPCR &= ~(PORT_CI_PCR_ALT_MODE_U32);
    7cd4:	9b05      	ldr	r3, [sp, #20]
    7cd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    7cda:	9305      	str	r3, [sp, #20]
                u32LocalPCR |= ((uint32)PinCfgRegValue << PORT_CI_PCR_ALT_MODE_OFFSET_U32);
    7cdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7ce0:	021b      	lsls	r3, r3, #8
    7ce2:	9a05      	ldr	r2, [sp, #20]
    7ce4:	4313      	orrs	r3, r2
    7ce6:	9305      	str	r3, [sp, #20]

                (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)] = u32LocalPCR;
    7ce8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7cec:	095b      	lsrs	r3, r3, #5
    7cee:	b29b      	uxth	r3, r3
    7cf0:	461a      	mov	r2, r3
    7cf2:	4b0c      	ldr	r3, [pc, #48]	; (7d24 <Port_Ipw_SetPinMode+0x1cc>)
    7cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7cf8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7cfc:	f002 021f 	and.w	r2, r2, #31
    7d00:	9905      	ldr	r1, [sp, #20]
    7d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27();
    7d06:	f00e fdad 	bl	16864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>
    7d0a:	e002      	b.n	7d12 <Port_Ipw_SetPinMode+0x1ba>
            }
            else
            {
                PinModeError = PORT_E_PARAM_INVALID_MODE;
    7d0c:	230d      	movs	r3, #13
    7d0e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinModeError;
    7d12:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    7d16:	4618      	mov	r0, r3
    7d18:	b00b      	add	sp, #44	; 0x2c
    7d1a:	f85d fb04 	ldr.w	pc, [sp], #4
    7d1e:	bf00      	nop
    7d20:	0001a1c8 	.word	0x0001a1c8
    7d24:	000197b8 	.word	0x000197b8

00007d28 <Port_Ipw_SetGpioDirChangeability>:
void Port_Ipw_SetGpioDirChangeability
(
    uint16 PadID,
    boolean bStatus
)
{
    7d28:	b500      	push	{lr}
    7d2a:	b085      	sub	sp, #20
    7d2c:	4603      	mov	r3, r0
    7d2e:	460a      	mov	r2, r1
    7d30:	f8ad 3006 	strh.w	r3, [sp, #6]
    7d34:	4613      	mov	r3, r2
    7d36:	f88d 3005 	strb.w	r3, [sp, #5]
    /* Pin description variables */
    uint8 u8PinBitOffset;
    uint16 u16PinDirFlagWord;

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18();
    7d3a:	f00e fa85 	bl	16248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>
    /* Bit offset of Pin index inside the pin description matrix */
    u8PinBitOffset      = (uint8)((uint8)PadID & PORT_CI_BIT_OFFSET_MASK_U8);
    7d3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7d42:	b2db      	uxtb	r3, r3
    7d44:	f003 030f 	and.w	r3, r3, #15
    7d48:	f88d 300d 	strb.w	r3, [sp, #13]
    u16PinDirFlagWord   = Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)];
    7d4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7d50:	b2db      	uxtb	r3, r3
    7d52:	091b      	lsrs	r3, r3, #4
    7d54:	b2db      	uxtb	r3, r3
    7d56:	461a      	mov	r2, r3
    7d58:	4b19      	ldr	r3, [pc, #100]	; (7dc0 <Port_Ipw_SetGpioDirChangeability+0x98>)
    7d5a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7d5e:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (TRUE == bStatus)
    7d62:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7d66:	2b00      	cmp	r3, #0
    7d68:	d00b      	beq.n	7d82 <Port_Ipw_SetGpioDirChangeability+0x5a>
    {
        /* Set the change direction flag */
        u16PinDirFlagWord |= (uint16)(1UL<<u8PinBitOffset);
    7d6a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7d6e:	2201      	movs	r2, #1
    7d70:	fa02 f303 	lsl.w	r3, r2, r3
    7d74:	b29a      	uxth	r2, r3
    7d76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7d7a:	4313      	orrs	r3, r2
    7d7c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7d80:	e00c      	b.n	7d9c <Port_Ipw_SetGpioDirChangeability+0x74>
    }
    else
    {
        /* Reset the change direction flag */
        u16PinDirFlagWord &= (uint16)(~((uint16)(1UL<<u8PinBitOffset)));
    7d82:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7d86:	2201      	movs	r2, #1
    7d88:	fa02 f303 	lsl.w	r3, r2, r3
    7d8c:	b29b      	uxth	r3, r3
    7d8e:	43db      	mvns	r3, r3
    7d90:	b29a      	uxth	r2, r3
    7d92:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7d96:	4013      	ands	r3, r2
    7d98:	f8ad 300e 	strh.w	r3, [sp, #14]
    }
    Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)] = u16PinDirFlagWord;
    7d9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7da0:	b2db      	uxtb	r3, r3
    7da2:	091b      	lsrs	r3, r3, #4
    7da4:	b2db      	uxtb	r3, r3
    7da6:	4619      	mov	r1, r3
    7da8:	4a05      	ldr	r2, [pc, #20]	; (7dc0 <Port_Ipw_SetGpioDirChangeability+0x98>)
    7daa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7dae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    /* Exit critical region */
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18();
    7db2:	f00e fa75 	bl	162a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>
}
    7db6:	bf00      	nop
    7db8:	b005      	add	sp, #20
    7dba:	f85d fb04 	ldr.w	pc, [sp], #4
    7dbe:	bf00      	nop
    7dc0:	1fff8d2c 	.word	0x1fff8d2c

00007dc4 <Port_Ipw_SetGpioPadOutput>:
void Port_Ipw_SetGpioPadOutput
(
    Port_PinType            PinIndex,
    const Port_ConfigType * pConfigPtr
)
{
    7dc4:	b084      	sub	sp, #16
    7dc6:	9001      	str	r0, [sp, #4]
    7dc8:	9100      	str	r1, [sp, #0]
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7dca:	9b00      	ldr	r3, [sp, #0]
    7dcc:	68d9      	ldr	r1, [r3, #12]
    7dce:	9a01      	ldr	r2, [sp, #4]
    7dd0:	4613      	mov	r3, r2
    7dd2:	009b      	lsls	r3, r3, #2
    7dd4:	4413      	add	r3, r2
    7dd6:	009b      	lsls	r3, r3, #2
    7dd8:	440b      	add	r3, r1
    7dda:	881b      	ldrh	r3, [r3, #0]
    7ddc:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint8 u8LocalPDO = pConfigPtr->pUsedPadConfig[PinIndex].u8PDO;
    7de0:	9b00      	ldr	r3, [sp, #0]
    7de2:	68d9      	ldr	r1, [r3, #12]
    7de4:	9a01      	ldr	r2, [sp, #4]
    7de6:	4613      	mov	r3, r2
    7de8:	009b      	lsls	r3, r3, #2
    7dea:	4413      	add	r3, r2
    7dec:	009b      	lsls	r3, r3, #2
    7dee:	440b      	add	r3, r1
    7df0:	7a1b      	ldrb	r3, [r3, #8]
    7df2:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Set pin to High value */
    if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    7df6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7dfa:	2b01      	cmp	r3, #1
    7dfc:	d110      	bne.n	7e20 <Port_Ipw_SetGpioPadOutput+0x5c>
    {
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7dfe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e02:	f003 021f 	and.w	r2, r3, #31
    7e06:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e0a:	095b      	lsrs	r3, r3, #5
    7e0c:	b29b      	uxth	r3, r3
    7e0e:	4619      	mov	r1, r3
    7e10:	4b0f      	ldr	r3, [pc, #60]	; (7e50 <Port_Ipw_SetGpioPadOutput+0x8c>)
    7e12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7e16:	2101      	movs	r1, #1
    7e18:	fa01 f202 	lsl.w	r2, r1, r2
    7e1c:	605a      	str	r2, [r3, #4]
    }
    else
    {
        /* No action to be done */
    }
}
    7e1e:	e013      	b.n	7e48 <Port_Ipw_SetGpioPadOutput+0x84>
    else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    7e20:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7e24:	2b00      	cmp	r3, #0
    7e26:	d10f      	bne.n	7e48 <Port_Ipw_SetGpioPadOutput+0x84>
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7e28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e2c:	f003 021f 	and.w	r2, r3, #31
    7e30:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e34:	095b      	lsrs	r3, r3, #5
    7e36:	b29b      	uxth	r3, r3
    7e38:	4619      	mov	r1, r3
    7e3a:	4b05      	ldr	r3, [pc, #20]	; (7e50 <Port_Ipw_SetGpioPadOutput+0x8c>)
    7e3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7e40:	2101      	movs	r1, #1
    7e42:	fa01 f202 	lsl.w	r2, r1, r2
    7e46:	609a      	str	r2, [r3, #8]
}
    7e48:	bf00      	nop
    7e4a:	b004      	add	sp, #16
    7e4c:	4770      	bx	lr
    7e4e:	bf00      	nop
    7e50:	000197cc 	.word	0x000197cc

00007e54 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    7e54:	b500      	push	{lr}
    7e56:	b085      	sub	sp, #20
    7e58:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    7e5a:	9b01      	ldr	r3, [sp, #4]
    7e5c:	881b      	ldrh	r3, [r3, #0]
    7e5e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7e62:	2300      	movs	r3, #0
    7e64:	f8ad 300e 	strh.w	r3, [sp, #14]
    7e68:	e0d2      	b.n	8010 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    7e6a:	9b01      	ldr	r3, [sp, #4]
    7e6c:	68d9      	ldr	r1, [r3, #12]
    7e6e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7e72:	4613      	mov	r3, r2
    7e74:	009b      	lsls	r3, r3, #2
    7e76:	4413      	add	r3, r2
    7e78:	009b      	lsls	r3, r3, #2
    7e7a:	440b      	add	r3, r1
    7e7c:	7c5b      	ldrb	r3, [r3, #17]
    7e7e:	f083 0301 	eor.w	r3, r3, #1
    7e82:	b2db      	uxtb	r3, r3
    7e84:	2b00      	cmp	r3, #0
    7e86:	f000 80be 	beq.w	8006 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    7e8a:	9b01      	ldr	r3, [sp, #4]
    7e8c:	68d9      	ldr	r1, [r3, #12]
    7e8e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7e92:	4613      	mov	r3, r2
    7e94:	009b      	lsls	r3, r3, #2
    7e96:	4413      	add	r3, r2
    7e98:	009b      	lsls	r3, r3, #2
    7e9a:	440b      	add	r3, r1
    7e9c:	7c1b      	ldrb	r3, [r3, #16]
    7e9e:	2b00      	cmp	r3, #0
    7ea0:	f000 80b1 	beq.w	8006 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    7ea4:	9b01      	ldr	r3, [sp, #4]
    7ea6:	68d9      	ldr	r1, [r3, #12]
    7ea8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7eac:	4613      	mov	r3, r2
    7eae:	009b      	lsls	r3, r3, #2
    7eb0:	4413      	add	r3, r2
    7eb2:	009b      	lsls	r3, r3, #2
    7eb4:	440b      	add	r3, r1
    7eb6:	881b      	ldrh	r3, [r3, #0]
    7eb8:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7ebc:	9b01      	ldr	r3, [sp, #4]
    7ebe:	68d9      	ldr	r1, [r3, #12]
    7ec0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7ec4:	4613      	mov	r3, r2
    7ec6:	009b      	lsls	r3, r3, #2
    7ec8:	4413      	add	r3, r2
    7eca:	009b      	lsls	r3, r3, #2
    7ecc:	440b      	add	r3, r1
    7ece:	68db      	ldr	r3, [r3, #12]
    7ed0:	2b02      	cmp	r3, #2
    7ed2:	d11d      	bne.n	7f10 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7ed4:	f00e fa0a 	bl	162ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7ed8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7edc:	095b      	lsrs	r3, r3, #5
    7ede:	b29b      	uxth	r3, r3
    7ee0:	461a      	mov	r2, r3
    7ee2:	4b51      	ldr	r3, [pc, #324]	; (8028 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ee8:	6959      	ldr	r1, [r3, #20]
    7eea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7eee:	f003 031f 	and.w	r3, r3, #31
    7ef2:	2201      	movs	r2, #1
    7ef4:	409a      	lsls	r2, r3
    7ef6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7efa:	095b      	lsrs	r3, r3, #5
    7efc:	b29b      	uxth	r3, r3
    7efe:	4618      	mov	r0, r3
    7f00:	4b49      	ldr	r3, [pc, #292]	; (8028 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7f02:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7f06:	430a      	orrs	r2, r1
    7f08:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7f0a:	f00e fa1b 	bl	16344 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    7f0e:	e07a      	b.n	8006 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    7f10:	9b01      	ldr	r3, [sp, #4]
    7f12:	68d9      	ldr	r1, [r3, #12]
    7f14:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7f18:	4613      	mov	r3, r2
    7f1a:	009b      	lsls	r3, r3, #2
    7f1c:	4413      	add	r3, r2
    7f1e:	009b      	lsls	r3, r3, #2
    7f20:	440b      	add	r3, r1
    7f22:	68db      	ldr	r3, [r3, #12]
    7f24:	2b01      	cmp	r3, #1
    7f26:	d00b      	beq.n	7f40 <Port_Ipw_RefreshPortDirection+0xec>
    7f28:	9b01      	ldr	r3, [sp, #4]
    7f2a:	68d9      	ldr	r1, [r3, #12]
    7f2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7f30:	4613      	mov	r3, r2
    7f32:	009b      	lsls	r3, r3, #2
    7f34:	4413      	add	r3, r2
    7f36:	009b      	lsls	r3, r3, #2
    7f38:	440b      	add	r3, r1
    7f3a:	68db      	ldr	r3, [r3, #12]
    7f3c:	2b03      	cmp	r3, #3
    7f3e:	d162      	bne.n	8006 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7f40:	f00e f9d4 	bl	162ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7f44:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7f48:	095b      	lsrs	r3, r3, #5
    7f4a:	b29b      	uxth	r3, r3
    7f4c:	461a      	mov	r2, r3
    7f4e:	4b36      	ldr	r3, [pc, #216]	; (8028 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f54:	6959      	ldr	r1, [r3, #20]
    7f56:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7f5a:	f003 031f 	and.w	r3, r3, #31
    7f5e:	2201      	movs	r2, #1
    7f60:	fa02 f303 	lsl.w	r3, r2, r3
    7f64:	43da      	mvns	r2, r3
    7f66:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7f6a:	095b      	lsrs	r3, r3, #5
    7f6c:	b29b      	uxth	r3, r3
    7f6e:	4618      	mov	r0, r3
    7f70:	4b2d      	ldr	r3, [pc, #180]	; (8028 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7f72:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7f76:	400a      	ands	r2, r1
    7f78:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7f7a:	f00e f9e3 	bl	16344 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    7f7e:	f00e fa07 	bl	16390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7f82:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7f86:	095b      	lsrs	r3, r3, #5
    7f88:	b29b      	uxth	r3, r3
    7f8a:	461a      	mov	r2, r3
    7f8c:	4b26      	ldr	r3, [pc, #152]	; (8028 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f92:	6999      	ldr	r1, [r3, #24]
    7f94:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7f98:	f003 031f 	and.w	r3, r3, #31
    7f9c:	2201      	movs	r2, #1
    7f9e:	fa02 f303 	lsl.w	r3, r2, r3
    7fa2:	43da      	mvns	r2, r3
    7fa4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fa8:	095b      	lsrs	r3, r3, #5
    7faa:	b29b      	uxth	r3, r3
    7fac:	4618      	mov	r0, r3
    7fae:	4b1e      	ldr	r3, [pc, #120]	; (8028 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7fb0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7fb4:	400a      	ands	r2, r1
    7fb6:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7fb8:	9b01      	ldr	r3, [sp, #4]
    7fba:	68d9      	ldr	r1, [r3, #12]
    7fbc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7fc0:	4613      	mov	r3, r2
    7fc2:	009b      	lsls	r3, r3, #2
    7fc4:	4413      	add	r3, r2
    7fc6:	009b      	lsls	r3, r3, #2
    7fc8:	440b      	add	r3, r1
    7fca:	68db      	ldr	r3, [r3, #12]
    7fcc:	2b03      	cmp	r3, #3
    7fce:	d118      	bne.n	8002 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7fd0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fd4:	095b      	lsrs	r3, r3, #5
    7fd6:	b29b      	uxth	r3, r3
    7fd8:	461a      	mov	r2, r3
    7fda:	4b13      	ldr	r3, [pc, #76]	; (8028 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7fe0:	6999      	ldr	r1, [r3, #24]
    7fe2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fe6:	f003 031f 	and.w	r3, r3, #31
    7fea:	2201      	movs	r2, #1
    7fec:	409a      	lsls	r2, r3
    7fee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7ff2:	095b      	lsrs	r3, r3, #5
    7ff4:	b29b      	uxth	r3, r3
    7ff6:	4618      	mov	r0, r3
    7ff8:	4b0b      	ldr	r3, [pc, #44]	; (8028 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7ffa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7ffe:	430a      	orrs	r2, r1
    8000:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    8002:	f00e f9f1 	bl	163e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    8006:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    800a:	3301      	adds	r3, #1
    800c:	f8ad 300e 	strh.w	r3, [sp, #14]
    8010:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8014:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8018:	429a      	cmp	r2, r3
    801a:	f4ff af26 	bcc.w	7e6a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    801e:	bf00      	nop
    8020:	bf00      	nop
    8022:	b005      	add	sp, #20
    8024:	f85d fb04 	ldr.w	pc, [sp], #4
    8028:	000197cc 	.word	0x000197cc

0000802c <Dio_ValidateChannelLevel>:
 */
static inline Std_ReturnType Dio_ValidateChannelLevel
(
    Dio_LevelType Level
)
{
    802c:	b500      	push	{lr}
    802e:	b085      	sub	sp, #20
    8030:	4603      	mov	r3, r0
    8032:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    8036:	2301      	movs	r3, #1
    8038:	f88d 300f 	strb.w	r3, [sp, #15]

    if (((Dio_LevelType)STD_HIGH == Level) || ((Dio_LevelType)STD_LOW == Level))
    803c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8040:	2b01      	cmp	r3, #1
    8042:	d003      	beq.n	804c <Dio_ValidateChannelLevel+0x20>
    8044:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8048:	2b00      	cmp	r3, #0
    804a:	d103      	bne.n	8054 <Dio_ValidateChannelLevel+0x28>
    {
        Valid = (Std_ReturnType)E_OK;
    804c:	2300      	movs	r3, #0
    804e:	f88d 300f 	strb.w	r3, [sp, #15]
    8052:	e005      	b.n	8060 <Dio_ValidateChannelLevel+0x34>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNEL_ID, DIO_E_PARAM_LEVEL);
    8054:	2321      	movs	r3, #33	; 0x21
    8056:	2201      	movs	r2, #1
    8058:	2100      	movs	r1, #0
    805a:	2078      	movs	r0, #120	; 0x78
    805c:	f010 fbe8 	bl	18830 <Det_ReportError>
    }

    return Valid;
    8060:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8064:	4618      	mov	r0, r3
    8066:	b005      	add	sp, #20
    8068:	f85d fb04 	ldr.w	pc, [sp], #4

0000806c <Dio_ValidateChannelForWrite>:
static inline Std_ReturnType Dio_ValidateChannelForWrite
(
    Dio_ChannelType ChannelId,
    uint8 u8ServiceId
)
{
    806c:	b500      	push	{lr}
    806e:	b085      	sub	sp, #20
    8070:	4603      	mov	r3, r0
    8072:	460a      	mov	r2, r1
    8074:	f8ad 3006 	strh.w	r3, [sp, #6]
    8078:	4613      	mov	r3, r2
    807a:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    807e:	2301      	movs	r3, #1
    8080:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    8084:	2300      	movs	r3, #0
    8086:	f88d 300e 	strb.w	r3, [sp, #14]
    Dio_ChannelType maxChannelId = (Dio_ChannelType)DIO_NUM_CHANNELS_U16;
    808a:	2390      	movs	r3, #144	; 0x90
    808c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (SIUL2_DIO_IP_MAX_MSCR_REGISTERS <= ChannelId)
    {
        maxChannelId = (Dio_ChannelType)(SIUL2_DIO_IP_MAX_MSCR_REGISTERS + SIUL2_DIO_IP_MAX_SIUL2_AE_CHANNELS);
    }
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    8090:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8094:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8098:	429a      	cmp	r2, r3
    809a:	d831      	bhi.n	8100 <Dio_ValidateChannelForWrite+0x94>
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForWrite[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    809c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    80a0:	095b      	lsrs	r3, r3, #5
    80a2:	b29b      	uxth	r3, r3
    80a4:	461a      	mov	r2, r3
    80a6:	4b1d      	ldr	r3, [pc, #116]	; (811c <Dio_ValidateChannelForWrite+0xb0>)
    80a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                                    (DIO_IPW_CHECK_CHANNEL_VALIDITY((uint16)ChannelId))
    80ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    80b0:	f003 031f 	and.w	r3, r3, #31
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForWrite[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    80b4:	fa22 f303 	lsr.w	r3, r2, r3
    80b8:	f003 0301 	and.w	r3, r3, #1
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    80bc:	2b00      	cmp	r3, #0
    80be:	d01f      	beq.n	8100 <Dio_ValidateChannelForWrite+0x94>
        else
        {
            u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
        }
#else
        u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
    80c0:	4b17      	ldr	r3, [pc, #92]	; (8120 <Dio_ValidateChannelForWrite+0xb4>)
    80c2:	689a      	ldr	r2, [r3, #8]
    80c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    80c8:	009b      	lsls	r3, r3, #2
    80ca:	4413      	add	r3, r2
    80cc:	681b      	ldr	r3, [r3, #0]
    80ce:	9302      	str	r3, [sp, #8]
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    80d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    80d4:	2201      	movs	r2, #1
    80d6:	409a      	lsls	r2, r3
    80d8:	9b02      	ldr	r3, [sp, #8]
    80da:	401a      	ands	r2, r3
    80dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    80e0:	fa22 f303 	lsr.w	r3, r2, r3
    80e4:	2b01      	cmp	r3, #1
    80e6:	d103      	bne.n	80f0 <Dio_ValidateChannelForWrite+0x84>
        {
            Valid = (Std_ReturnType)E_OK;
    80e8:	2300      	movs	r3, #0
    80ea:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    80ee:	e00e      	b.n	810e <Dio_ValidateChannelForWrite+0xa2>
        }
        else
        {
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    80f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    80f4:	23f0      	movs	r3, #240	; 0xf0
    80f6:	2100      	movs	r1, #0
    80f8:	2078      	movs	r0, #120	; 0x78
    80fa:	f010 fb99 	bl	18830 <Det_ReportError>
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    80fe:	e006      	b.n	810e <Dio_ValidateChannelForWrite+0xa2>
        }
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_CHANNEL_ID);
    8100:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8104:	230a      	movs	r3, #10
    8106:	2100      	movs	r1, #0
    8108:	2078      	movs	r0, #120	; 0x78
    810a:	f010 fb91 	bl	18830 <Det_ReportError>
    }

    return Valid;
    810e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8112:	4618      	mov	r0, r3
    8114:	b005      	add	sp, #20
    8116:	f85d fb04 	ldr.w	pc, [sp], #4
    811a:	bf00      	nop
    811c:	0001a048 	.word	0x0001a048
    8120:	0001a070 	.word	0x0001a070

00008124 <Dio_ValidateChannelForRead>:
static inline Std_ReturnType Dio_ValidateChannelForRead
(
    Dio_ChannelType ChannelId,
    uint8 u8ServiceId
)
{
    8124:	b500      	push	{lr}
    8126:	b085      	sub	sp, #20
    8128:	4603      	mov	r3, r0
    812a:	460a      	mov	r2, r1
    812c:	f8ad 3006 	strh.w	r3, [sp, #6]
    8130:	4613      	mov	r3, r2
    8132:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    8136:	2301      	movs	r3, #1
    8138:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    813c:	2300      	movs	r3, #0
    813e:	f88d 300e 	strb.w	r3, [sp, #14]
    Dio_ChannelType maxChannelId = (Dio_ChannelType)DIO_NUM_CHANNELS_U16;
    8142:	2390      	movs	r3, #144	; 0x90
    8144:	f8ad 300c 	strh.w	r3, [sp, #12]
        maxChannelId = (Dio_ChannelType)(SIUL2_DIO_IP_MAX_MSCR_REGISTERS + SIUL2_DIO_IP_MAX_SIUL2_AE_CHANNELS);
    }
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */

    /* Check if that channel ID is available for read */
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    8148:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    814c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8150:	429a      	cmp	r2, r3
    8152:	d831      	bhi.n	81b8 <Dio_ValidateChannelForRead+0x94>
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForRead[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    8154:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8158:	095b      	lsrs	r3, r3, #5
    815a:	b29b      	uxth	r3, r3
    815c:	461a      	mov	r2, r3
    815e:	4b1d      	ldr	r3, [pc, #116]	; (81d4 <Dio_ValidateChannelForRead+0xb0>)
    8160:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                  (DIO_IPW_CHECK_CHANNEL_VALIDITY((uint16)ChannelId))
    8164:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8168:	f003 031f 	and.w	r3, r3, #31
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForRead[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    816c:	fa22 f303 	lsr.w	r3, r2, r3
    8170:	f003 0301 	and.w	r3, r3, #1
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    8174:	2b00      	cmp	r3, #0
    8176:	d01f      	beq.n	81b8 <Dio_ValidateChannelForRead+0x94>
        else
        {
            u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
        }
#else
        u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
    8178:	4b17      	ldr	r3, [pc, #92]	; (81d8 <Dio_ValidateChannelForRead+0xb4>)
    817a:	689a      	ldr	r2, [r3, #8]
    817c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8180:	009b      	lsls	r3, r3, #2
    8182:	4413      	add	r3, r2
    8184:	681b      	ldr	r3, [r3, #0]
    8186:	9302      	str	r3, [sp, #8]
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
        /* Check if port was assigned to the current coreID */
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    8188:	f89d 300e 	ldrb.w	r3, [sp, #14]
    818c:	2201      	movs	r2, #1
    818e:	409a      	lsls	r2, r3
    8190:	9b02      	ldr	r3, [sp, #8]
    8192:	401a      	ands	r2, r3
    8194:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8198:	fa22 f303 	lsr.w	r3, r2, r3
    819c:	2b01      	cmp	r3, #1
    819e:	d103      	bne.n	81a8 <Dio_ValidateChannelForRead+0x84>
        {
            Valid = (Std_ReturnType)E_OK;
    81a0:	2300      	movs	r3, #0
    81a2:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    81a6:	e00e      	b.n	81c6 <Dio_ValidateChannelForRead+0xa2>
        }
        else
        {
            /* Raise Det error when invalid serviceID */
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    81a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    81ac:	23f0      	movs	r3, #240	; 0xf0
    81ae:	2100      	movs	r1, #0
    81b0:	2078      	movs	r0, #120	; 0x78
    81b2:	f010 fb3d 	bl	18830 <Det_ReportError>
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    81b6:	e006      	b.n	81c6 <Dio_ValidateChannelForRead+0xa2>
        }
    }
    else
    {
        /* Raise Det error when invalid channel ID */
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_CHANNEL_ID);
    81b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    81bc:	230a      	movs	r3, #10
    81be:	2100      	movs	r1, #0
    81c0:	2078      	movs	r0, #120	; 0x78
    81c2:	f010 fb35 	bl	18830 <Det_ReportError>
    }

    return Valid;
    81c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    81ca:	4618      	mov	r0, r3
    81cc:	b005      	add	sp, #20
    81ce:	f85d fb04 	ldr.w	pc, [sp], #4
    81d2:	bf00      	nop
    81d4:	0001a05c 	.word	0x0001a05c
    81d8:	0001a070 	.word	0x0001a070

000081dc <Dio_ValidatePortForWrite>:
static inline Std_ReturnType Dio_ValidatePortForWrite
(
    Dio_PortType PortId,
    uint8 u8ServiceId
)
{
    81dc:	b500      	push	{lr}
    81de:	b085      	sub	sp, #20
    81e0:	4603      	mov	r3, r0
    81e2:	460a      	mov	r2, r1
    81e4:	f88d 3007 	strb.w	r3, [sp, #7]
    81e8:	4613      	mov	r3, r2
    81ea:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    81ee:	2301      	movs	r3, #1
    81f0:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    81f4:	2300      	movs	r3, #0
    81f6:	f88d 300e 	strb.w	r3, [sp, #14]

    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    81fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    81fe:	2b04      	cmp	r3, #4
    8200:	d825      	bhi.n	824e <Dio_ValidatePortForWrite+0x72>
        (Dio_aAvailablePinsForWrite[(uint8)(PortId)] != DIO_NO_AVAILABLE_CHANNELS_U16)
    8202:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8206:	4a18      	ldr	r2, [pc, #96]	; (8268 <Dio_ValidatePortForWrite+0x8c>)
    8208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    820c:	2b00      	cmp	r3, #0
    820e:	d01e      	beq.n	824e <Dio_ValidatePortForWrite+0x72>
       )
    {
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    8210:	4b16      	ldr	r3, [pc, #88]	; (826c <Dio_ValidatePortForWrite+0x90>)
    8212:	68da      	ldr	r2, [r3, #12]
    8214:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8218:	009b      	lsls	r3, r3, #2
    821a:	4413      	add	r3, r2
    821c:	681a      	ldr	r2, [r3, #0]
    821e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8222:	2101      	movs	r1, #1
    8224:	fa01 f303 	lsl.w	r3, r1, r3
    8228:	401a      	ands	r2, r3
    822a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    822e:	fa22 f303 	lsr.w	r3, r2, r3
    8232:	2b01      	cmp	r3, #1
    8234:	d103      	bne.n	823e <Dio_ValidatePortForWrite+0x62>
        {
            Valid = ( Std_ReturnType)E_OK;
    8236:	2300      	movs	r3, #0
    8238:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    823c:	e00e      	b.n	825c <Dio_ValidatePortForWrite+0x80>
        }
        else
        {
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    823e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8242:	23f0      	movs	r3, #240	; 0xf0
    8244:	2100      	movs	r1, #0
    8246:	2078      	movs	r0, #120	; 0x78
    8248:	f010 faf2 	bl	18830 <Det_ReportError>
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    824c:	e006      	b.n	825c <Dio_ValidatePortForWrite+0x80>
        }
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_PORT_ID);
    824e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8252:	2314      	movs	r3, #20
    8254:	2100      	movs	r1, #0
    8256:	2078      	movs	r0, #120	; 0x78
    8258:	f010 faea 	bl	18830 <Det_ReportError>
    }

    return Valid;
    825c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8260:	4618      	mov	r0, r3
    8262:	b005      	add	sp, #20
    8264:	f85d fb04 	ldr.w	pc, [sp], #4
    8268:	0001a048 	.word	0x0001a048
    826c:	0001a070 	.word	0x0001a070

00008270 <Dio_ValidatePortForRead>:
static inline Std_ReturnType Dio_ValidatePortForRead
(
    Dio_PortType PortId,
    uint8 u8ServiceId
)
{
    8270:	b500      	push	{lr}
    8272:	b085      	sub	sp, #20
    8274:	4603      	mov	r3, r0
    8276:	460a      	mov	r2, r1
    8278:	f88d 3007 	strb.w	r3, [sp, #7]
    827c:	4613      	mov	r3, r2
    827e:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    8282:	2301      	movs	r3, #1
    8284:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    8288:	2300      	movs	r3, #0
    828a:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Check input parameters are available for read */
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    828e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8292:	2b04      	cmp	r3, #4
    8294:	d825      	bhi.n	82e2 <Dio_ValidatePortForRead+0x72>
        (Dio_aAvailablePinsForRead[(uint8)(PortId)] != DIO_NO_AVAILABLE_CHANNELS_U16)
    8296:	f89d 3007 	ldrb.w	r3, [sp, #7]
    829a:	4a18      	ldr	r2, [pc, #96]	; (82fc <Dio_ValidatePortForRead+0x8c>)
    829c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    82a0:	2b00      	cmp	r3, #0
    82a2:	d01e      	beq.n	82e2 <Dio_ValidatePortForRead+0x72>
       )
    {
        /* Check if Port was assigned to the current coreID */
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    82a4:	4b16      	ldr	r3, [pc, #88]	; (8300 <Dio_ValidatePortForRead+0x90>)
    82a6:	68da      	ldr	r2, [r3, #12]
    82a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82ac:	009b      	lsls	r3, r3, #2
    82ae:	4413      	add	r3, r2
    82b0:	681a      	ldr	r2, [r3, #0]
    82b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    82b6:	2101      	movs	r1, #1
    82b8:	fa01 f303 	lsl.w	r3, r1, r3
    82bc:	401a      	ands	r2, r3
    82be:	f89d 300e 	ldrb.w	r3, [sp, #14]
    82c2:	fa22 f303 	lsr.w	r3, r2, r3
    82c6:	2b01      	cmp	r3, #1
    82c8:	d103      	bne.n	82d2 <Dio_ValidatePortForRead+0x62>
        {
            Valid = ( Std_ReturnType)E_OK;
    82ca:	2300      	movs	r3, #0
    82cc:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    82d0:	e00e      	b.n	82f0 <Dio_ValidatePortForRead+0x80>
        }
        else
        {
            /* Raise Det error when invalid serviceID */
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    82d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    82d6:	23f0      	movs	r3, #240	; 0xf0
    82d8:	2100      	movs	r1, #0
    82da:	2078      	movs	r0, #120	; 0x78
    82dc:	f010 faa8 	bl	18830 <Det_ReportError>
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    82e0:	e006      	b.n	82f0 <Dio_ValidatePortForRead+0x80>
        }
    }
    else
    {
        /* Raise Det error when invalid port ID */
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_PORT_ID);
    82e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    82e6:	2314      	movs	r3, #20
    82e8:	2100      	movs	r1, #0
    82ea:	2078      	movs	r0, #120	; 0x78
    82ec:	f010 faa0 	bl	18830 <Det_ReportError>
    }

    return Valid;
    82f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    82f4:	4618      	mov	r0, r3
    82f6:	b005      	add	sp, #20
    82f8:	f85d fb04 	ldr.w	pc, [sp], #4
    82fc:	0001a05c 	.word	0x0001a05c
    8300:	0001a070 	.word	0x0001a070

00008304 <Dio_ValidateChannelGroupForWrite>:
static inline Std_ReturnType Dio_ValidateChannelGroupForWrite
(
    const Dio_ChannelGroupType * pChannelGroup,
    uint8                u8ServiceId
)
{
    8304:	b500      	push	{lr}
    8306:	b085      	sub	sp, #20
    8308:	9001      	str	r0, [sp, #4]
    830a:	460b      	mov	r3, r1
    830c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    8310:	2301      	movs	r3, #1
    8312:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ChannelGroup = pChannelGroup->port;
    8316:	9b01      	ldr	r3, [sp, #4]
    8318:	781b      	ldrb	r3, [r3, #0]
    831a:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Compiler_Warning: Pointer to channel group is converted to unsigned long in order for it to
                          be compared with the boundaries of the channel group list. */
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    831e:	4b19      	ldr	r3, [pc, #100]	; (8384 <Dio_ValidateChannelGroupForWrite+0x80>)
    8320:	685b      	ldr	r3, [r3, #4]
    8322:	461a      	mov	r2, r3
    8324:	9b01      	ldr	r3, [sp, #4]
    8326:	429a      	cmp	r2, r3
    8328:	d81f      	bhi.n	836a <Dio_ValidateChannelGroupForWrite+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    832a:	4b16      	ldr	r3, [pc, #88]	; (8384 <Dio_ValidateChannelGroupForWrite+0x80>)
    832c:	685a      	ldr	r2, [r3, #4]
    832e:	4b15      	ldr	r3, [pc, #84]	; (8384 <Dio_ValidateChannelGroupForWrite+0x80>)
    8330:	781b      	ldrb	r3, [r3, #0]
    8332:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    8336:	3b01      	subs	r3, #1
    8338:	00db      	lsls	r3, r3, #3
    833a:	4413      	add	r3, r2
    833c:	461a      	mov	r2, r3
    833e:	9b01      	ldr	r3, [sp, #4]
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    8340:	429a      	cmp	r2, r3
    8342:	d312      	bcc.n	836a <Dio_ValidateChannelGroupForWrite+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    8344:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8348:	2b04      	cmp	r3, #4
    834a:	d80e      	bhi.n	836a <Dio_ValidateChannelGroupForWrite+0x66>
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
        (Dio_aAvailablePinsForWrite[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)              &&  \
    834c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8350:	4a0d      	ldr	r2, [pc, #52]	; (8388 <Dio_ValidateChannelGroupForWrite+0x84>)
    8352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
    8356:	2b00      	cmp	r3, #0
    8358:	d007      	beq.n	836a <Dio_ValidateChannelGroupForWrite+0x66>
        ((uint8)(pChannelGroup->u8offset) <= DIO_MAX_VALID_OFFSET_U8)
    835a:	9b01      	ldr	r3, [sp, #4]
    835c:	785b      	ldrb	r3, [r3, #1]
        (Dio_aAvailablePinsForWrite[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)              &&  \
    835e:	2b1f      	cmp	r3, #31
    8360:	d803      	bhi.n	836a <Dio_ValidateChannelGroupForWrite+0x66>
       )
    {
        Valid = (Std_ReturnType)E_OK;
    8362:	2300      	movs	r3, #0
    8364:	f88d 300f 	strb.w	r3, [sp, #15]
    8368:	e006      	b.n	8378 <Dio_ValidateChannelGroupForWrite+0x74>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_GROUP_ID);
    836a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    836e:	231f      	movs	r3, #31
    8370:	2100      	movs	r1, #0
    8372:	2078      	movs	r0, #120	; 0x78
    8374:	f010 fa5c 	bl	18830 <Det_ReportError>
    }

    return Valid;
    8378:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    837c:	4618      	mov	r0, r3
    837e:	b005      	add	sp, #20
    8380:	f85d fb04 	ldr.w	pc, [sp], #4
    8384:	0001a070 	.word	0x0001a070
    8388:	0001a048 	.word	0x0001a048

0000838c <Dio_ValidateChannelGroupForRead>:
static inline Std_ReturnType Dio_ValidateChannelGroupForRead
(
    const Dio_ChannelGroupType * pChannelGroup,
    uint8                 u8ServiceId
)
{
    838c:	b500      	push	{lr}
    838e:	b085      	sub	sp, #20
    8390:	9001      	str	r0, [sp, #4]
    8392:	460b      	mov	r3, r1
    8394:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    8398:	2301      	movs	r3, #1
    839a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ChannelGroup = pChannelGroup->port;
    839e:	9b01      	ldr	r3, [sp, #4]
    83a0:	781b      	ldrb	r3, [r3, #0]
    83a2:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Compiler_Warning: Pointer to channel group is converted to unsigned long in order for it to
                          be compared with the boundaries of the channel group list. */
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    83a6:	4b19      	ldr	r3, [pc, #100]	; (840c <Dio_ValidateChannelGroupForRead+0x80>)
    83a8:	685b      	ldr	r3, [r3, #4]
    83aa:	461a      	mov	r2, r3
    83ac:	9b01      	ldr	r3, [sp, #4]
    83ae:	429a      	cmp	r2, r3
    83b0:	d81f      	bhi.n	83f2 <Dio_ValidateChannelGroupForRead+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    83b2:	4b16      	ldr	r3, [pc, #88]	; (840c <Dio_ValidateChannelGroupForRead+0x80>)
    83b4:	685a      	ldr	r2, [r3, #4]
    83b6:	4b15      	ldr	r3, [pc, #84]	; (840c <Dio_ValidateChannelGroupForRead+0x80>)
    83b8:	781b      	ldrb	r3, [r3, #0]
    83ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    83be:	3b01      	subs	r3, #1
    83c0:	00db      	lsls	r3, r3, #3
    83c2:	4413      	add	r3, r2
    83c4:	461a      	mov	r2, r3
    83c6:	9b01      	ldr	r3, [sp, #4]
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    83c8:	429a      	cmp	r2, r3
    83ca:	d312      	bcc.n	83f2 <Dio_ValidateChannelGroupForRead+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    83cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    83d0:	2b04      	cmp	r3, #4
    83d2:	d80e      	bhi.n	83f2 <Dio_ValidateChannelGroupForRead+0x66>
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
        (Dio_aAvailablePinsForRead[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)               &&  \
    83d4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    83d8:	4a0d      	ldr	r2, [pc, #52]	; (8410 <Dio_ValidateChannelGroupForRead+0x84>)
    83da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
    83de:	2b00      	cmp	r3, #0
    83e0:	d007      	beq.n	83f2 <Dio_ValidateChannelGroupForRead+0x66>
        ((uint8)(pChannelGroup->u8offset) <= DIO_MAX_VALID_OFFSET_U8)
    83e2:	9b01      	ldr	r3, [sp, #4]
    83e4:	785b      	ldrb	r3, [r3, #1]
        (Dio_aAvailablePinsForRead[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)               &&  \
    83e6:	2b1f      	cmp	r3, #31
    83e8:	d803      	bhi.n	83f2 <Dio_ValidateChannelGroupForRead+0x66>
       )
    {
        Valid = (Std_ReturnType)E_OK;
    83ea:	2300      	movs	r3, #0
    83ec:	f88d 300f 	strb.w	r3, [sp, #15]
    83f0:	e006      	b.n	8400 <Dio_ValidateChannelGroupForRead+0x74>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_GROUP_ID);
    83f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    83f6:	231f      	movs	r3, #31
    83f8:	2100      	movs	r1, #0
    83fa:	2078      	movs	r0, #120	; 0x78
    83fc:	f010 fa18 	bl	18830 <Det_ReportError>
    }

    return Valid;
    8400:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8404:	4618      	mov	r0, r3
    8406:	b005      	add	sp, #20
    8408:	f85d fb04 	ldr.w	pc, [sp], #4
    840c:	0001a070 	.word	0x0001a070
    8410:	0001a05c 	.word	0x0001a05c

00008414 <Dio_GetVersionInfo>:
*/
void Dio_GetVersionInfo
(
    Std_VersionInfoType * VersionInfo
)
{
    8414:	b500      	push	{lr}
    8416:	b083      	sub	sp, #12
    8418:	9001      	str	r0, [sp, #4]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    if (NULL_PTR == VersionInfo)
    841a:	9b01      	ldr	r3, [sp, #4]
    841c:	2b00      	cmp	r3, #0
    841e:	d106      	bne.n	842e <Dio_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_GETVERSIONINFO_ID, DIO_E_PARAM_POINTER);
    8420:	2320      	movs	r3, #32
    8422:	2212      	movs	r2, #18
    8424:	2100      	movs	r1, #0
    8426:	2078      	movs	r0, #120	; 0x78
    8428:	f010 fa02 	bl	18830 <Det_ReportError>
        VersionInfo->moduleID         = (uint16)DIO_MODULE_ID;
        VersionInfo->sw_major_version = (uint8)DIO_SW_MAJOR_VERSION;
        VersionInfo->sw_minor_version = (uint8)DIO_SW_MINOR_VERSION;
        VersionInfo->sw_patch_version = (uint8)DIO_SW_PATCH_VERSION;
    }
}
    842c:	e00e      	b.n	844c <Dio_GetVersionInfo+0x38>
        VersionInfo->vendorID         = (uint16)DIO_VENDOR_ID;
    842e:	9b01      	ldr	r3, [sp, #4]
    8430:	222b      	movs	r2, #43	; 0x2b
    8432:	801a      	strh	r2, [r3, #0]
        VersionInfo->moduleID         = (uint16)DIO_MODULE_ID;
    8434:	9b01      	ldr	r3, [sp, #4]
    8436:	2278      	movs	r2, #120	; 0x78
    8438:	805a      	strh	r2, [r3, #2]
        VersionInfo->sw_major_version = (uint8)DIO_SW_MAJOR_VERSION;
    843a:	9b01      	ldr	r3, [sp, #4]
    843c:	2202      	movs	r2, #2
    843e:	711a      	strb	r2, [r3, #4]
        VersionInfo->sw_minor_version = (uint8)DIO_SW_MINOR_VERSION;
    8440:	9b01      	ldr	r3, [sp, #4]
    8442:	2200      	movs	r2, #0
    8444:	715a      	strb	r2, [r3, #5]
        VersionInfo->sw_patch_version = (uint8)DIO_SW_PATCH_VERSION;
    8446:	9b01      	ldr	r3, [sp, #4]
    8448:	2200      	movs	r2, #0
    844a:	719a      	strb	r2, [r3, #6]
}
    844c:	bf00      	nop
    844e:	b003      	add	sp, #12
    8450:	f85d fb04 	ldr.w	pc, [sp], #4

00008454 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    8454:	b500      	push	{lr}
    8456:	b085      	sub	sp, #20
    8458:	4603      	mov	r3, r0
    845a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    845e:	2300      	movs	r3, #0
    8460:	f88d 300f 	strb.w	r3, [sp, #15]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);
    8464:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8468:	2100      	movs	r1, #0
    846a:	4618      	mov	r0, r3
    846c:	f7ff fe5a 	bl	8124 <Dio_ValidateChannelForRead>
    8470:	4603      	mov	r3, r0
    8472:	f88d 300e 	strb.w	r3, [sp, #14]

    if ((Std_ReturnType)E_OK == Valid)
    8476:	f89d 300e 	ldrb.w	r3, [sp, #14]
    847a:	2b00      	cmp	r3, #0
    847c:	d107      	bne.n	848e <Dio_ReadChannel+0x3a>
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    847e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8482:	4618      	mov	r0, r3
    8484:	f000 f8c6 	bl	8614 <Dio_Ipw_ReadChannel>
    8488:	4603      	mov	r3, r0
    848a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    848e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8492:	4618      	mov	r0, r3
    8494:	b005      	add	sp, #20
    8496:	f85d fb04 	ldr.w	pc, [sp], #4

0000849a <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    849a:	b500      	push	{lr}
    849c:	b085      	sub	sp, #20
    849e:	4603      	mov	r3, r0
    84a0:	460a      	mov	r2, r1
    84a2:	f8ad 3006 	strh.w	r3, [sp, #6]
    84a6:	4613      	mov	r3, r2
    84a8:	f88d 3005 	strb.w	r3, [sp, #5]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_WRITECHANNEL_ID);
    84ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    84b0:	2101      	movs	r1, #1
    84b2:	4618      	mov	r0, r3
    84b4:	f7ff fdda 	bl	806c <Dio_ValidateChannelForWrite>
    84b8:	4603      	mov	r3, r0
    84ba:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType) E_OK == Valid)
    84be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84c2:	2b00      	cmp	r3, #0
    84c4:	d113      	bne.n	84ee <Dio_WriteChannel+0x54>
    {
        Valid = Dio_ValidateChannelLevel(Level);
    84c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    84ca:	4618      	mov	r0, r3
    84cc:	f7ff fdae 	bl	802c <Dio_ValidateChannelLevel>
    84d0:	4603      	mov	r3, r0
    84d2:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType) E_OK == Valid)
    84d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84da:	2b00      	cmp	r3, #0
    84dc:	d107      	bne.n	84ee <Dio_WriteChannel+0x54>
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    84de:	f89d 2005 	ldrb.w	r2, [sp, #5]
    84e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    84e6:	4611      	mov	r1, r2
    84e8:	4618      	mov	r0, r3
    84ea:	f000 f8b9 	bl	8660 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    84ee:	bf00      	nop
    84f0:	b005      	add	sp, #20
    84f2:	f85d fb04 	ldr.w	pc, [sp], #4

000084f6 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    84f6:	b500      	push	{lr}
    84f8:	b085      	sub	sp, #20
    84fa:	4603      	mov	r3, r0
    84fc:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    8500:	2300      	movs	r3, #0
    8502:	f88d 300f 	strb.w	r3, [sp, #15]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);
    8506:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    850a:	2111      	movs	r1, #17
    850c:	4618      	mov	r0, r3
    850e:	f7ff fdad 	bl	806c <Dio_ValidateChannelForWrite>
    8512:	4603      	mov	r3, r0
    8514:	f88d 300e 	strb.w	r3, [sp, #14]

    if ((Std_ReturnType)E_OK == Valid)
    8518:	f89d 300e 	ldrb.w	r3, [sp, #14]
    851c:	2b00      	cmp	r3, #0
    851e:	d107      	bne.n	8530 <Dio_FlipChannel+0x3a>
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    8520:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8524:	4618      	mov	r0, r3
    8526:	f000 f8c1 	bl	86ac <Dio_Ipw_FlipChannel>
    852a:	4603      	mov	r3, r0
    852c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    8530:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8534:	4618      	mov	r0, r3
    8536:	b005      	add	sp, #20
    8538:	f85d fb04 	ldr.w	pc, [sp], #4

0000853c <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    853c:	b500      	push	{lr}
    853e:	b085      	sub	sp, #20
    8540:	4603      	mov	r3, r0
    8542:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    8546:	2300      	movs	r3, #0
    8548:	9303      	str	r3, [sp, #12]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);
    854a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    854e:	2102      	movs	r1, #2
    8550:	4618      	mov	r0, r3
    8552:	f7ff fe8d 	bl	8270 <Dio_ValidatePortForRead>
    8556:	4603      	mov	r3, r0
    8558:	f88d 300b 	strb.w	r3, [sp, #11]

    if ((Std_ReturnType) E_OK == Valid)
    855c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8560:	2b00      	cmp	r3, #0
    8562:	d105      	bne.n	8570 <Dio_ReadPort+0x34>
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    8564:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8568:	4618      	mov	r0, r3
    856a:	f000 f8d5 	bl	8718 <Dio_Ipw_ReadPort>
    856e:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    8570:	9b03      	ldr	r3, [sp, #12]
}
    8572:	4618      	mov	r0, r3
    8574:	b005      	add	sp, #20
    8576:	f85d fb04 	ldr.w	pc, [sp], #4

0000857a <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    857a:	b500      	push	{lr}
    857c:	b085      	sub	sp, #20
    857e:	4603      	mov	r3, r0
    8580:	9100      	str	r1, [sp, #0]
    8582:	f88d 3007 	strb.w	r3, [sp, #7]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);
    8586:	f89d 3007 	ldrb.w	r3, [sp, #7]
    858a:	2103      	movs	r1, #3
    858c:	4618      	mov	r0, r3
    858e:	f7ff fe25 	bl	81dc <Dio_ValidatePortForWrite>
    8592:	4603      	mov	r3, r0
    8594:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == Valid)
    8598:	f89d 300f 	ldrb.w	r3, [sp, #15]
    859c:	2b00      	cmp	r3, #0
    859e:	d105      	bne.n	85ac <Dio_WritePort+0x32>
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    85a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    85a4:	9900      	ldr	r1, [sp, #0]
    85a6:	4618      	mov	r0, r3
    85a8:	f000 f8ce 	bl	8748 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    85ac:	bf00      	nop
    85ae:	b005      	add	sp, #20
    85b0:	f85d fb04 	ldr.w	pc, [sp], #4

000085b4 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    85b4:	b500      	push	{lr}
    85b6:	b085      	sub	sp, #20
    85b8:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    85ba:	2300      	movs	r3, #0
    85bc:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid;

#ifdef DIO_CHANNEL_GROUPS_AVAILABLE
    CoreId = (uint8)Dio_GetCoreID();
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    Valid = Dio_ValidateChannelGroupForRead(ChannelGroupIdPtr, DIO_READCHANNELGROUP_ID);
    85be:	2104      	movs	r1, #4
    85c0:	9801      	ldr	r0, [sp, #4]
    85c2:	f7ff fee3 	bl	838c <Dio_ValidateChannelGroupForRead>
    85c6:	4603      	mov	r3, r0
    85c8:	f88d 300b 	strb.w	r3, [sp, #11]

    if ((Std_ReturnType)E_OK == Valid)
    85cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    85d0:	2b00      	cmp	r3, #0
    85d2:	d103      	bne.n	85dc <Dio_ReadChannelGroup+0x28>
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    85d4:	9801      	ldr	r0, [sp, #4]
    85d6:	f000 f8cf 	bl	8778 <Dio_Ipw_ReadChannelGroup>
    85da:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    85dc:	9b03      	ldr	r3, [sp, #12]
}
    85de:	4618      	mov	r0, r3
    85e0:	b005      	add	sp, #20
    85e2:	f85d fb04 	ldr.w	pc, [sp], #4

000085e6 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    85e6:	b500      	push	{lr}
    85e8:	b085      	sub	sp, #20
    85ea:	9001      	str	r0, [sp, #4]
    85ec:	9100      	str	r1, [sp, #0]

#ifdef DIO_CHANNEL_GROUPS_AVAILABLE
    CoreId = (uint8)Dio_GetCoreID();
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */

    Valid = Dio_ValidateChannelGroupForWrite(ChannelGroupIdPtr, DIO_WRITECHANNELGROUP_ID);
    85ee:	2105      	movs	r1, #5
    85f0:	9801      	ldr	r0, [sp, #4]
    85f2:	f7ff fe87 	bl	8304 <Dio_ValidateChannelGroupForWrite>
    85f6:	4603      	mov	r3, r0
    85f8:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == Valid)
    85fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8600:	2b00      	cmp	r3, #0
    8602:	d103      	bne.n	860c <Dio_WriteChannelGroup+0x26>
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    8604:	9900      	ldr	r1, [sp, #0]
    8606:	9801      	ldr	r0, [sp, #4]
    8608:	f000 f8d6 	bl	87b8 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    860c:	bf00      	nop
    860e:	b005      	add	sp, #20
    8610:	f85d fb04 	ldr.w	pc, [sp], #4

00008614 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    8614:	b500      	push	{lr}
    8616:	b087      	sub	sp, #28
    8618:	4603      	mov	r3, r0
    861a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    861e:	2300      	movs	r3, #0
    8620:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    8624:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8628:	095b      	lsrs	r3, r3, #5
    862a:	b29b      	uxth	r3, r3
    862c:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    862e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8632:	f003 031f 	and.w	r3, r3, #31
    8636:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    8638:	4a08      	ldr	r2, [pc, #32]	; (865c <Dio_Ipw_ReadChannel+0x48>)
    863a:	9b04      	ldr	r3, [sp, #16]
    863c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8640:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    8642:	9903      	ldr	r1, [sp, #12]
    8644:	9802      	ldr	r0, [sp, #8]
    8646:	f000 f940 	bl	88ca <Gpio_Dio_Ip_ReadPin>
    864a:	4603      	mov	r3, r0
    864c:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    8650:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    8654:	4618      	mov	r0, r3
    8656:	b007      	add	sp, #28
    8658:	f85d fb04 	ldr.w	pc, [sp], #4
    865c:	1fff8b28 	.word	0x1fff8b28

00008660 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    8660:	b500      	push	{lr}
    8662:	b087      	sub	sp, #28
    8664:	4603      	mov	r3, r0
    8666:	460a      	mov	r2, r1
    8668:	f8ad 3006 	strh.w	r3, [sp, #6]
    866c:	4613      	mov	r3, r2
    866e:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    8672:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8676:	095b      	lsrs	r3, r3, #5
    8678:	b29b      	uxth	r3, r3
    867a:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    867c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8680:	f003 031f 	and.w	r3, r3, #31
    8684:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    8686:	4a08      	ldr	r2, [pc, #32]	; (86a8 <Dio_Ipw_WriteChannel+0x48>)
    8688:	9b05      	ldr	r3, [sp, #20]
    868a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    868e:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    8690:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8694:	461a      	mov	r2, r3
    8696:	9904      	ldr	r1, [sp, #16]
    8698:	9803      	ldr	r0, [sp, #12]
    869a:	f000 f8b7 	bl	880c <Gpio_Dio_Ip_WritePin>
}
    869e:	bf00      	nop
    86a0:	b007      	add	sp, #28
    86a2:	f85d fb04 	ldr.w	pc, [sp], #4
    86a6:	bf00      	nop
    86a8:	1fff8b28 	.word	0x1fff8b28

000086ac <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    86ac:	b500      	push	{lr}
    86ae:	b089      	sub	sp, #36	; 0x24
    86b0:	4603      	mov	r3, r0
    86b2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    86b6:	2300      	movs	r3, #0
    86b8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    86bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    86c0:	095b      	lsrs	r3, r3, #5
    86c2:	b29b      	uxth	r3, r3
    86c4:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    86c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    86ca:	f003 031f 	and.w	r3, r3, #31
    86ce:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    86d0:	4a10      	ldr	r2, [pc, #64]	; (8714 <Dio_Ipw_FlipChannel+0x68>)
    86d2:	9b06      	ldr	r3, [sp, #24]
    86d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86d8:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    86da:	2201      	movs	r2, #1
    86dc:	9b05      	ldr	r3, [sp, #20]
    86de:	fa02 f303 	lsl.w	r3, r2, r3
    86e2:	4619      	mov	r1, r3
    86e4:	9804      	ldr	r0, [sp, #16]
    86e6:	f000 f8dc 	bl	88a2 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    86ea:	9804      	ldr	r0, [sp, #16]
    86ec:	f000 f8bc 	bl	8868 <Gpio_Dio_Ip_GetPinsOutput>
    86f0:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    86f2:	2201      	movs	r2, #1
    86f4:	9b05      	ldr	r3, [sp, #20]
    86f6:	409a      	lsls	r2, r3
    86f8:	9b03      	ldr	r3, [sp, #12]
    86fa:	401a      	ands	r2, r3
    86fc:	9b05      	ldr	r3, [sp, #20]
    86fe:	fa22 f303 	lsr.w	r3, r2, r3
    8702:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    8706:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    870a:	4618      	mov	r0, r3
    870c:	b009      	add	sp, #36	; 0x24
    870e:	f85d fb04 	ldr.w	pc, [sp], #4
    8712:	bf00      	nop
    8714:	1fff8b28 	.word	0x1fff8b28

00008718 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    8718:	b500      	push	{lr}
    871a:	b085      	sub	sp, #20
    871c:	4603      	mov	r3, r0
    871e:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    8722:	2300      	movs	r3, #0
    8724:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    8726:	f89d 3007 	ldrb.w	r3, [sp, #7]
    872a:	4a06      	ldr	r2, [pc, #24]	; (8744 <Dio_Ipw_ReadPort+0x2c>)
    872c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8730:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    8732:	9802      	ldr	r0, [sp, #8]
    8734:	f000 f8be 	bl	88b4 <Gpio_Dio_Ip_ReadPins>
    8738:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    873a:	9b03      	ldr	r3, [sp, #12]
}
    873c:	4618      	mov	r0, r3
    873e:	b005      	add	sp, #20
    8740:	f85d fb04 	ldr.w	pc, [sp], #4
    8744:	1fff8b28 	.word	0x1fff8b28

00008748 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    8748:	b500      	push	{lr}
    874a:	b085      	sub	sp, #20
    874c:	4603      	mov	r3, r0
    874e:	9100      	str	r1, [sp, #0]
    8750:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    8754:	9b00      	ldr	r3, [sp, #0]
    8756:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    8758:	f89d 3007 	ldrb.w	r3, [sp, #7]
    875c:	4a05      	ldr	r2, [pc, #20]	; (8774 <Dio_Ipw_WritePort+0x2c>)
    875e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8762:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    8764:	9903      	ldr	r1, [sp, #12]
    8766:	9802      	ldr	r0, [sp, #8]
    8768:	f000 f875 	bl	8856 <Gpio_Dio_Ip_WritePins>
}
    876c:	bf00      	nop
    876e:	b005      	add	sp, #20
    8770:	f85d fb04 	ldr.w	pc, [sp], #4
    8774:	1fff8b28 	.word	0x1fff8b28

00008778 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    8778:	b500      	push	{lr}
    877a:	b087      	sub	sp, #28
    877c:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    877e:	2300      	movs	r3, #0
    8780:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    8782:	9b01      	ldr	r3, [sp, #4]
    8784:	781b      	ldrb	r3, [r3, #0]
    8786:	461a      	mov	r2, r3
    8788:	4b0a      	ldr	r3, [pc, #40]	; (87b4 <Dio_Ipw_ReadChannelGroup+0x3c>)
    878a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    878e:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    8790:	9804      	ldr	r0, [sp, #16]
    8792:	f000 f88f 	bl	88b4 <Gpio_Dio_Ip_ReadPins>
    8796:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    8798:	9b01      	ldr	r3, [sp, #4]
    879a:	685a      	ldr	r2, [r3, #4]
    879c:	9b03      	ldr	r3, [sp, #12]
    879e:	4013      	ands	r3, r2
    87a0:	9a01      	ldr	r2, [sp, #4]
    87a2:	7852      	ldrb	r2, [r2, #1]
    87a4:	40d3      	lsrs	r3, r2
    87a6:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    87a8:	9b05      	ldr	r3, [sp, #20]
}
    87aa:	4618      	mov	r0, r3
    87ac:	b007      	add	sp, #28
    87ae:	f85d fb04 	ldr.w	pc, [sp], #4
    87b2:	bf00      	nop
    87b4:	1fff8b28 	.word	0x1fff8b28

000087b8 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    87b8:	b500      	push	{lr}
    87ba:	b087      	sub	sp, #28
    87bc:	9001      	str	r0, [sp, #4]
    87be:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    87c0:	9b01      	ldr	r3, [sp, #4]
    87c2:	781b      	ldrb	r3, [r3, #0]
    87c4:	461a      	mov	r2, r3
    87c6:	4b10      	ldr	r3, [pc, #64]	; (8808 <Dio_Ipw_WriteChannelGroup+0x50>)
    87c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    87cc:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    87ce:	9b01      	ldr	r3, [sp, #4]
    87d0:	785b      	ldrb	r3, [r3, #1]
    87d2:	461a      	mov	r2, r3
    87d4:	9b00      	ldr	r3, [sp, #0]
    87d6:	fa03 f202 	lsl.w	r2, r3, r2
    87da:	9b01      	ldr	r3, [sp, #4]
    87dc:	685b      	ldr	r3, [r3, #4]
    87de:	4013      	ands	r3, r2
    87e0:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    87e2:	9904      	ldr	r1, [sp, #16]
    87e4:	9805      	ldr	r0, [sp, #20]
    87e6:	f000 f84a 	bl	887e <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    87ea:	9b04      	ldr	r3, [sp, #16]
    87ec:	43da      	mvns	r2, r3
    87ee:	9b01      	ldr	r3, [sp, #4]
    87f0:	685b      	ldr	r3, [r3, #4]
    87f2:	4013      	ands	r3, r2
    87f4:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    87f6:	9903      	ldr	r1, [sp, #12]
    87f8:	9805      	ldr	r0, [sp, #20]
    87fa:	f000 f849 	bl	8890 <Gpio_Dio_Ip_ClearPins>

}
    87fe:	bf00      	nop
    8800:	b007      	add	sp, #28
    8802:	f85d fb04 	ldr.w	pc, [sp], #4
    8806:	bf00      	nop
    8808:	1fff8b28 	.word	0x1fff8b28

0000880c <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    880c:	b500      	push	{lr}
    880e:	b087      	sub	sp, #28
    8810:	9003      	str	r0, [sp, #12]
    8812:	9102      	str	r1, [sp, #8]
    8814:	4613      	mov	r3, r2
    8816:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    881a:	f00c fdb7 	bl	1538c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    881e:	9b03      	ldr	r3, [sp, #12]
    8820:	681b      	ldr	r3, [r3, #0]
    8822:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    8824:	2201      	movs	r2, #1
    8826:	9b02      	ldr	r3, [sp, #8]
    8828:	fa02 f303 	lsl.w	r3, r2, r3
    882c:	43db      	mvns	r3, r3
    882e:	9a05      	ldr	r2, [sp, #20]
    8830:	4013      	ands	r3, r2
    8832:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    8834:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8838:	9b02      	ldr	r3, [sp, #8]
    883a:	fa02 f303 	lsl.w	r3, r2, r3
    883e:	9a05      	ldr	r2, [sp, #20]
    8840:	4313      	orrs	r3, r2
    8842:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    8844:	9b03      	ldr	r3, [sp, #12]
    8846:	9a05      	ldr	r2, [sp, #20]
    8848:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    884a:	f00c fdcb 	bl	153e4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    884e:	bf00      	nop
    8850:	b007      	add	sp, #28
    8852:	f85d fb04 	ldr.w	pc, [sp], #4

00008856 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    8856:	b082      	sub	sp, #8
    8858:	9001      	str	r0, [sp, #4]
    885a:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    885c:	9b01      	ldr	r3, [sp, #4]
    885e:	9a00      	ldr	r2, [sp, #0]
    8860:	601a      	str	r2, [r3, #0]
}
    8862:	bf00      	nop
    8864:	b002      	add	sp, #8
    8866:	4770      	bx	lr

00008868 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    8868:	b084      	sub	sp, #16
    886a:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    886c:	2300      	movs	r3, #0
    886e:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    8870:	9b01      	ldr	r3, [sp, #4]
    8872:	681b      	ldr	r3, [r3, #0]
    8874:	9303      	str	r3, [sp, #12]
    return returnValue;
    8876:	9b03      	ldr	r3, [sp, #12]
}
    8878:	4618      	mov	r0, r3
    887a:	b004      	add	sp, #16
    887c:	4770      	bx	lr

0000887e <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    887e:	b082      	sub	sp, #8
    8880:	9001      	str	r0, [sp, #4]
    8882:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    8884:	9b01      	ldr	r3, [sp, #4]
    8886:	9a00      	ldr	r2, [sp, #0]
    8888:	605a      	str	r2, [r3, #4]
}
    888a:	bf00      	nop
    888c:	b002      	add	sp, #8
    888e:	4770      	bx	lr

00008890 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    8890:	b082      	sub	sp, #8
    8892:	9001      	str	r0, [sp, #4]
    8894:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    8896:	9b01      	ldr	r3, [sp, #4]
    8898:	9a00      	ldr	r2, [sp, #0]
    889a:	609a      	str	r2, [r3, #8]
}
    889c:	bf00      	nop
    889e:	b002      	add	sp, #8
    88a0:	4770      	bx	lr

000088a2 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    88a2:	b082      	sub	sp, #8
    88a4:	9001      	str	r0, [sp, #4]
    88a6:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    88a8:	9b01      	ldr	r3, [sp, #4]
    88aa:	9a00      	ldr	r2, [sp, #0]
    88ac:	60da      	str	r2, [r3, #12]
}
    88ae:	bf00      	nop
    88b0:	b002      	add	sp, #8
    88b2:	4770      	bx	lr

000088b4 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    88b4:	b084      	sub	sp, #16
    88b6:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    88b8:	2300      	movs	r3, #0
    88ba:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    88bc:	9b01      	ldr	r3, [sp, #4]
    88be:	691b      	ldr	r3, [r3, #16]
    88c0:	9303      	str	r3, [sp, #12]
    return returnValue;
    88c2:	9b03      	ldr	r3, [sp, #12]
}
    88c4:	4618      	mov	r0, r3
    88c6:	b004      	add	sp, #16
    88c8:	4770      	bx	lr

000088ca <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    88ca:	b084      	sub	sp, #16
    88cc:	9001      	str	r0, [sp, #4]
    88ce:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    88d0:	2300      	movs	r3, #0
    88d2:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    88d6:	9b01      	ldr	r3, [sp, #4]
    88d8:	691a      	ldr	r2, [r3, #16]
    88da:	2101      	movs	r1, #1
    88dc:	9b00      	ldr	r3, [sp, #0]
    88de:	fa01 f303 	lsl.w	r3, r1, r3
    88e2:	401a      	ands	r2, r3
    88e4:	9b00      	ldr	r3, [sp, #0]
    88e6:	fa22 f303 	lsr.w	r3, r2, r3
    88ea:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    88ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    88f2:	4618      	mov	r0, r3
    88f4:	b004      	add	sp, #16
    88f6:	4770      	bx	lr

000088f8 <Adc_ReportDetError>:
* @return     void
* SWS_Adc_00377
*/
static inline void Adc_ReportDetError(uint8 ServiceId,
                                      uint8 ErrorId)
{
    88f8:	b500      	push	{lr}
    88fa:	b083      	sub	sp, #12
    88fc:	4603      	mov	r3, r0
    88fe:	460a      	mov	r2, r1
    8900:	f88d 3007 	strb.w	r3, [sp, #7]
    8904:	4613      	mov	r3, r2
    8906:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    890a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    890e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8912:	2100      	movs	r1, #0
    8914:	207b      	movs	r0, #123	; 0x7b
    8916:	f00f ff8b 	bl	18830 <Det_ReportError>
}
    891a:	bf00      	nop
    891c:	b003      	add	sp, #12
    891e:	f85d fb04 	ldr.w	pc, [sp], #4

00008922 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    8922:	b500      	push	{lr}
    8924:	b083      	sub	sp, #12
    8926:	4603      	mov	r3, r0
    8928:	460a      	mov	r2, r1
    892a:	f88d 3007 	strb.w	r3, [sp, #7]
    892e:	4613      	mov	r3, r2
    8930:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    8934:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8938:	f89d 2007 	ldrb.w	r2, [sp, #7]
    893c:	2100      	movs	r1, #0
    893e:	207b      	movs	r0, #123	; 0x7b
    8940:	f00f ffda 	bl	188f8 <Det_ReportRuntimeError>
}
    8944:	bf00      	nop
    8946:	b003      	add	sp, #12
    8948:	f85d fb04 	ldr.w	pc, [sp], #4

0000894c <Adc_ReportValidationError>:
* @return     void
*/
static void Adc_ReportValidationError(Adc_ValidationResultType * Result,
                                      uint8 ServiceId,
                                      uint8 ErrorId)
{
    894c:	b500      	push	{lr}
    894e:	b083      	sub	sp, #12
    8950:	9001      	str	r0, [sp, #4]
    8952:	460b      	mov	r3, r1
    8954:	f88d 3003 	strb.w	r3, [sp, #3]
    8958:	4613      	mov	r3, r2
    895a:	f88d 3002 	strb.w	r3, [sp, #2]
    Result->EndValidations = TRUE;
    895e:	9b01      	ldr	r3, [sp, #4]
    8960:	2201      	movs	r2, #1
    8962:	701a      	strb	r2, [r3, #0]
    Result->ValidParams = (Std_ReturnType)E_NOT_OK;
    8964:	9b01      	ldr	r3, [sp, #4]
    8966:	2201      	movs	r2, #1
    8968:	705a      	strb	r2, [r3, #1]

    Adc_ReportDetError(ServiceId, ErrorId);
    896a:	f89d 2002 	ldrb.w	r2, [sp, #2]
    896e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8972:	4611      	mov	r1, r2
    8974:	4618      	mov	r0, r3
    8976:	f7ff ffbf 	bl	88f8 <Adc_ReportDetError>
}
    897a:	bf00      	nop
    897c:	b003      	add	sp, #12
    897e:	f85d fb04 	ldr.w	pc, [sp], #4

00008982 <Adc_ValidateGloballCall>:
* @implements  Adc_ValidateGlobalCall_Activity
*
*/
static inline Std_ReturnType Adc_ValidateGloballCall(uint8 ServiceId,
                                                     uint8 CoreId)
{
    8982:	b500      	push	{lr}
    8984:	b085      	sub	sp, #20
    8986:	4603      	mov	r3, r0
    8988:	460a      	mov	r2, r1
    898a:	f88d 3007 	strb.w	r3, [sp, #7]
    898e:	4613      	mov	r3, r2
    8990:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8994:	2301      	movs	r3, #1
    8996:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_STATE_UNINIT == Adc_aeGlobalState[CoreId])
    899a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    899e:	4a14      	ldr	r2, [pc, #80]	; (89f0 <Adc_ValidateGloballCall+0x6e>)
    89a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89a4:	2b00      	cmp	r3, #0
    89a6:	d10e      	bne.n	89c6 <Adc_ValidateGloballCall+0x44>
    {
        if (ADC_INIT_ID == ServiceId)
    89a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89ac:	2b00      	cmp	r3, #0
    89ae:	d103      	bne.n	89b8 <Adc_ValidateGloballCall+0x36>
        {
            ValidState = (Std_ReturnType)E_OK;
    89b0:	2300      	movs	r3, #0
    89b2:	f88d 300f 	strb.w	r3, [sp, #15]
    89b6:	e014      	b.n	89e2 <Adc_ValidateGloballCall+0x60>
        }
        else
        {
            /* SWS_Adc_00154 */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    89b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89bc:	210a      	movs	r1, #10
    89be:	4618      	mov	r0, r3
    89c0:	f7ff ff9a 	bl	88f8 <Adc_ReportDetError>
    89c4:	e00d      	b.n	89e2 <Adc_ValidateGloballCall+0x60>
        }
    }
    else
    {
        if (ADC_INIT_ID == ServiceId)
    89c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89ca:	2b00      	cmp	r3, #0
    89cc:	d106      	bne.n	89dc <Adc_ValidateGloballCall+0x5a>
        {
            /* Error: ADC already initialized */
            /* SWS_Adc_00107 */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_ALREADY_INITIALIZED);
    89ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89d2:	210d      	movs	r1, #13
    89d4:	4618      	mov	r0, r3
    89d6:	f7ff ff8f 	bl	88f8 <Adc_ReportDetError>
    89da:	e002      	b.n	89e2 <Adc_ValidateGloballCall+0x60>
        }
        else
        {
            ValidState = (Std_ReturnType)E_OK;
    89dc:	2300      	movs	r3, #0
    89de:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    }

    return ValidState;
    89e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    89e6:	4618      	mov	r0, r3
    89e8:	b005      	add	sp, #20
    89ea:	f85d fb04 	ldr.w	pc, [sp], #4
    89ee:	bf00      	nop
    89f0:	1fff8d44 	.word	0x1fff8d44

000089f4 <Adc_ValidatePtrInit>:
*
* @note       Non Reentrant function.
*
*/
static inline Std_ReturnType Adc_ValidatePtrInit(const Adc_ConfigType * ConfigPtr)
{
    89f4:	b500      	push	{lr}
    89f6:	b085      	sub	sp, #20
    89f8:	9001      	str	r0, [sp, #4]
    Std_ReturnType ValidPtr = (Std_ReturnType)E_OK;
    89fa:	2300      	movs	r3, #0
    89fc:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
    /* ADC344 */
    if (NULL_PTR != ConfigPtr)
#else
    /* ADC343 */
    if (NULL_PTR == ConfigPtr)
    8a00:	9b01      	ldr	r3, [sp, #4]
    8a02:	2b00      	cmp	r3, #0
    8a04:	d106      	bne.n	8a14 <Adc_ValidatePtrInit+0x20>
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
    {
        ValidPtr = (Std_ReturnType)E_NOT_OK;
    8a06:	2301      	movs	r3, #1
    8a08:	f88d 300f 	strb.w	r3, [sp, #15]
        Adc_ReportDetError((uint8)ADC_INIT_ID, (uint8) ADC_E_PARAM_POINTER);
    8a0c:	2114      	movs	r1, #20
    8a0e:	2000      	movs	r0, #0
    8a10:	f7ff ff72 	bl	88f8 <Adc_ReportDetError>
    }
    return ValidPtr;
    8a14:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a18:	4618      	mov	r0, r3
    8a1a:	b005      	add	sp, #20
    8a1c:	f85d fb04 	ldr.w	pc, [sp], #4

00008a20 <Adc_ValidatePtr>:
* @note       ...
* ADC_VALUEREADGROUP_ID
*/
static inline Std_ReturnType Adc_ValidatePtr(uint8 ServiceId,
                                             const void * PtrVal)
{
    8a20:	b500      	push	{lr}
    8a22:	b085      	sub	sp, #20
    8a24:	4603      	mov	r3, r0
    8a26:	9100      	str	r1, [sp, #0]
    8a28:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ValidPtr = (Std_ReturnType)E_OK;
    8a2c:	2300      	movs	r3, #0
    8a2e:	f88d 300f 	strb.w	r3, [sp, #15]

    /* SWS_Adc_00458, SWS_Adc_00457, CPR_RTD_00264.adc */
    if (NULL_PTR == PtrVal)
    8a32:	9b00      	ldr	r3, [sp, #0]
    8a34:	2b00      	cmp	r3, #0
    8a36:	d108      	bne.n	8a4a <Adc_ValidatePtr+0x2a>
    {
        ValidPtr = (Std_ReturnType)E_NOT_OK;
    8a38:	2301      	movs	r3, #1
    8a3a:	f88d 300f 	strb.w	r3, [sp, #15]
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_POINTER);
    8a3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a42:	2114      	movs	r1, #20
    8a44:	4618      	mov	r0, r3
    8a46:	f7ff ff57 	bl	88f8 <Adc_ReportDetError>
    }

    return ValidPtr;
    8a4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a4e:	4618      	mov	r0, r3
    8a50:	b005      	add	sp, #20
    8a52:	f85d fb04 	ldr.w	pc, [sp], #4

00008a56 <Adc_ValidateBufferUninit>:

#if ((ADC_ENABLE_START_STOP_GROUP_API == STD_ON) || (ADC_HW_TRIGGER_API == STD_ON))
static inline void Adc_ValidateBufferUninit(Adc_ValidationResultType * ReturnValue,
                                            uint8 ServiceId,
                                            Adc_GroupType Group)
{
    8a56:	b500      	push	{lr}
    8a58:	b083      	sub	sp, #12
    8a5a:	9001      	str	r0, [sp, #4]
    8a5c:	460b      	mov	r3, r1
    8a5e:	f88d 3003 	strb.w	r3, [sp, #3]
    8a62:	4613      	mov	r3, r2
    8a64:	f8ad 3000 	strh.w	r3, [sp]
    switch (ServiceId)
    8a68:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8a6c:	2b02      	cmp	r3, #2
    8a6e:	d113      	bne.n	8a98 <Adc_ValidateBufferUninit+0x42>
#if (ADC_HW_TRIGGER_API == STD_ON)
        /* fall-through */
        case ADC_ENABLEHARDWARETRIGGER_ID:
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        {
            if (NULL_PTR == Adc_axGroupStatus[Group].ResultsBufferPtr)
    8a70:	f8bd 2000 	ldrh.w	r2, [sp]
    8a74:	490c      	ldr	r1, [pc, #48]	; (8aa8 <Adc_ValidateBufferUninit+0x52>)
    8a76:	4613      	mov	r3, r2
    8a78:	009b      	lsls	r3, r3, #2
    8a7a:	4413      	add	r3, r2
    8a7c:	009b      	lsls	r3, r3, #2
    8a7e:	440b      	add	r3, r1
    8a80:	330c      	adds	r3, #12
    8a82:	681b      	ldr	r3, [r3, #0]
    8a84:	2b00      	cmp	r3, #0
    8a86:	d109      	bne.n	8a9c <Adc_ValidateBufferUninit+0x46>
            {
                /* SWS_Adc_00425, SWS_Adc_00424 */
                Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_BUFFER_UNINIT);
    8a88:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8a8c:	2219      	movs	r2, #25
    8a8e:	4619      	mov	r1, r3
    8a90:	9801      	ldr	r0, [sp, #4]
    8a92:	f7ff ff5b 	bl	894c <Adc_ReportValidationError>
            }
            break;
    8a96:	e001      	b.n	8a9c <Adc_ValidateBufferUninit+0x46>
        }
        default:
        {
            ; /* no-op */
            break;
    8a98:	bf00      	nop
    8a9a:	e000      	b.n	8a9e <Adc_ValidateBufferUninit+0x48>
            break;
    8a9c:	bf00      	nop
        }
    }
}
    8a9e:	bf00      	nop
    8aa0:	b003      	add	sp, #12
    8aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    8aa6:	bf00      	nop
    8aa8:	1fff8d48 	.word	0x1fff8d48

00008aac <Adc_ValidateTriggerSrc>:
    )
static inline void Adc_ValidateTriggerSrc(Adc_ValidationResultType * ReturnValue,
                                          uint8 ServiceId,
                                          Adc_GroupType Group,
                                          uint8 CoreId)
{
    8aac:	b500      	push	{lr}
    8aae:	b085      	sub	sp, #20
    8ab0:	9001      	str	r0, [sp, #4]
    8ab2:	4608      	mov	r0, r1
    8ab4:	4611      	mov	r1, r2
    8ab6:	461a      	mov	r2, r3
    8ab8:	4603      	mov	r3, r0
    8aba:	f88d 3003 	strb.w	r3, [sp, #3]
    8abe:	460b      	mov	r3, r1
    8ac0:	f8ad 3000 	strh.w	r3, [sp]
    8ac4:	4613      	mov	r3, r2
    8ac6:	f88d 3002 	strb.w	r3, [sp, #2]
    /* Get the mapping index of group in the current partition */
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8aca:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8ace:	4a17      	ldr	r2, [pc, #92]	; (8b2c <Adc_ValidateTriggerSrc+0x80>)
    8ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ad4:	68da      	ldr	r2, [r3, #12]
    8ad6:	f8bd 3000 	ldrh.w	r3, [sp]
    8ada:	005b      	lsls	r3, r3, #1
    8adc:	4413      	add	r3, r2
    8ade:	881b      	ldrh	r3, [r3, #0]
    8ae0:	f8ad 300e 	strh.w	r3, [sp, #14]

    switch (ServiceId)
    8ae4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8ae8:	3b02      	subs	r3, #2
    8aea:	2b01      	cmp	r3, #1
    8aec:	d816      	bhi.n	8b1c <Adc_ValidateTriggerSrc+0x70>
#if (ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON)
        case ADC_ENABLE_CHANNEL_ID:
        case ADC_DISABLE_CHANNEL_ID:
#endif /* ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON */
        {
            if (ADC_TRIGG_SRC_SW != Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    8aee:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8af2:	4a0e      	ldr	r2, [pc, #56]	; (8b2c <Adc_ValidateTriggerSrc+0x80>)
    8af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8af8:	685a      	ldr	r2, [r3, #4]
    8afa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8afe:	2134      	movs	r1, #52	; 0x34
    8b00:	fb01 f303 	mul.w	r3, r1, r3
    8b04:	4413      	add	r3, r2
    8b06:	695b      	ldr	r3, [r3, #20]
    8b08:	2b00      	cmp	r3, #0
    8b0a:	d009      	beq.n	8b20 <Adc_ValidateTriggerSrc+0x74>
            {
                /* SWS_Adc_00164, SWS_Adc_00133 */
                Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_WRONG_TRIGG_SRC);
    8b0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8b10:	2217      	movs	r2, #23
    8b12:	4619      	mov	r1, r3
    8b14:	9801      	ldr	r0, [sp, #4]
    8b16:	f7ff ff19 	bl	894c <Adc_ReportValidationError>
            }
            break;
    8b1a:	e001      	b.n	8b20 <Adc_ValidateTriggerSrc+0x74>
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        default:
        {
            ; /* no-op */
            break;
    8b1c:	bf00      	nop
    8b1e:	e000      	b.n	8b22 <Adc_ValidateTriggerSrc+0x76>
            break;
    8b20:	bf00      	nop
        }
    }
}
    8b22:	bf00      	nop
    8b24:	b005      	add	sp, #20
    8b26:	f85d fb04 	ldr.w	pc, [sp], #4
    8b2a:	bf00      	nop
    8b2c:	1fff8d40 	.word	0x1fff8d40

00008b30 <Adc_ValidateQueueNotFull>:
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
static inline void Adc_ValidateQueueNotFull(Adc_ValidationResultType * ReturnValue,
                                            uint8 ServiceId,
                                            Adc_GroupType Group,
                                            uint8 CoreId)
{
    8b30:	b500      	push	{lr}
    8b32:	b085      	sub	sp, #20
    8b34:	9001      	str	r0, [sp, #4]
    8b36:	4608      	mov	r0, r1
    8b38:	4611      	mov	r1, r2
    8b3a:	461a      	mov	r2, r3
    8b3c:	4603      	mov	r3, r0
    8b3e:	f88d 3003 	strb.w	r3, [sp, #3]
    8b42:	460b      	mov	r3, r1
    8b44:	f8ad 3000 	strh.w	r3, [sp]
    8b48:	4613      	mov	r3, r2
    8b4a:	f88d 3002 	strb.w	r3, [sp, #2]
    Adc_GroupType GroupIndex;
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8b4e:	2300      	movs	r3, #0
    8b50:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8b54:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8b58:	4a21      	ldr	r2, [pc, #132]	; (8be0 <Adc_ValidateQueueNotFull+0xb0>)
    8b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b5e:	68da      	ldr	r2, [r3, #12]
    8b60:	f8bd 3000 	ldrh.w	r3, [sp]
    8b64:	005b      	lsls	r3, r3, #1
    8b66:	4413      	add	r3, r2
    8b68:	881b      	ldrh	r3, [r3, #0]
    8b6a:	f8ad 300c 	strh.w	r3, [sp, #12]
    LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    8b6e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8b72:	4a1b      	ldr	r2, [pc, #108]	; (8be0 <Adc_ValidateQueueNotFull+0xb0>)
    8b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b78:	685a      	ldr	r2, [r3, #4]
    8b7a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8b7e:	2134      	movs	r1, #52	; 0x34
    8b80:	fb01 f303 	mul.w	r3, r1, r3
    8b84:	4413      	add	r3, r2
    8b86:	789b      	ldrb	r3, [r3, #2]
    8b88:	f88d 300f 	strb.w	r3, [sp, #15]

    switch (ServiceId)
    8b8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8b90:	2b02      	cmp	r3, #2
    8b92:	d11e      	bne.n	8bd2 <Adc_ValidateQueueNotFull+0xa2>
    {
        case ADC_STARTGROUPCONVERSION_ID:
        {
            if (ADC_CONV_TYPE_NORMAL == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Type)
    8b94:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8b98:	4a11      	ldr	r2, [pc, #68]	; (8be0 <Adc_ValidateQueueNotFull+0xb0>)
    8b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b9e:	685a      	ldr	r2, [r3, #4]
    8ba0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8ba4:	2134      	movs	r1, #52	; 0x34
    8ba6:	fb01 f303 	mul.w	r3, r1, r3
    8baa:	4413      	add	r3, r2
    8bac:	68db      	ldr	r3, [r3, #12]
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d111      	bne.n	8bd6 <Adc_ValidateQueueNotFull+0xa6>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex >= ADC_QUEUE_MAX_DEPTH_MAX)
    8bb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bb6:	4a0b      	ldr	r2, [pc, #44]	; (8be4 <Adc_ValidateQueueNotFull+0xb4>)
    8bb8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8bbc:	b29b      	uxth	r3, r3
    8bbe:	2b01      	cmp	r3, #1
    8bc0:	d909      	bls.n	8bd6 <Adc_ValidateQueueNotFull+0xa6>
                {
                    Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_QUEUE_FULL);
    8bc2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8bc6:	2220      	movs	r2, #32
    8bc8:	4619      	mov	r1, r3
    8bca:	9801      	ldr	r0, [sp, #4]
    8bcc:	f7ff febe 	bl	894c <Adc_ReportValidationError>
                }
            }
            break;
    8bd0:	e001      	b.n	8bd6 <Adc_ValidateQueueNotFull+0xa6>
        }

        default:
        {
            ; /* no-op */
            break;
    8bd2:	bf00      	nop
    8bd4:	e000      	b.n	8bd8 <Adc_ValidateQueueNotFull+0xa8>
            break;
    8bd6:	bf00      	nop
        }
    }
}
    8bd8:	bf00      	nop
    8bda:	b005      	add	sp, #20
    8bdc:	f85d fb04 	ldr.w	pc, [sp], #4
    8be0:	1fff8d40 	.word	0x1fff8d40
    8be4:	1fff8d70 	.word	0x1fff8d70

00008be8 <Adc_ValidateExtraParams>:
    )
static inline Std_ReturnType Adc_ValidateExtraParams(uint8 ServiceId,
                                                     uint32 ErrorIdList,
                                                     Adc_GroupType Group,
                                                     uint8 CoreId)
{
    8be8:	b500      	push	{lr}
    8bea:	b085      	sub	sp, #20
    8bec:	9100      	str	r1, [sp, #0]
    8bee:	4611      	mov	r1, r2
    8bf0:	461a      	mov	r2, r3
    8bf2:	4603      	mov	r3, r0
    8bf4:	f88d 3007 	strb.w	r3, [sp, #7]
    8bf8:	460b      	mov	r3, r1
    8bfa:	f8ad 3004 	strh.w	r3, [sp, #4]
    8bfe:	4613      	mov	r3, r2
    8c00:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ValidationResultType ValidationStatus;

    ValidationStatus.EndValidations = FALSE;
    8c04:	2300      	movs	r3, #0
    8c06:	f88d 300c 	strb.w	r3, [sp, #12]
    ValidationStatus.ValidParams = (Std_ReturnType)E_OK;
    8c0a:	2300      	movs	r3, #0
    8c0c:	f88d 300d 	strb.w	r3, [sp, #13]

#if ((ADC_ENABLE_START_STOP_GROUP_API == STD_ON) || (ADC_HW_TRIGGER_API == STD_ON))
    if ((0U != (ErrorIdList&ADC_E_BUFFER_UNINIT_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8c10:	9b00      	ldr	r3, [sp, #0]
    8c12:	f003 0301 	and.w	r3, r3, #1
    8c16:	2b00      	cmp	r3, #0
    8c18:	d00e      	beq.n	8c38 <Adc_ValidateExtraParams+0x50>
    8c1a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8c1e:	f083 0301 	eor.w	r3, r3, #1
    8c22:	b2db      	uxtb	r3, r3
    8c24:	2b00      	cmp	r3, #0
    8c26:	d007      	beq.n	8c38 <Adc_ValidateExtraParams+0x50>
    {
        Adc_ValidateBufferUninit(&ValidationStatus, ServiceId, Group);
    8c28:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8c2c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8c30:	ab03      	add	r3, sp, #12
    8c32:	4618      	mov	r0, r3
    8c34:	f7ff ff0f 	bl	8a56 <Adc_ValidateBufferUninit>
    }
#endif
    if ((0U != (ErrorIdList&ADC_E_WRONG_TRIGG_SRC_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8c38:	9b00      	ldr	r3, [sp, #0]
    8c3a:	f003 0302 	and.w	r3, r3, #2
    8c3e:	2b00      	cmp	r3, #0
    8c40:	d00f      	beq.n	8c62 <Adc_ValidateExtraParams+0x7a>
    8c42:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8c46:	f083 0301 	eor.w	r3, r3, #1
    8c4a:	b2db      	uxtb	r3, r3
    8c4c:	2b00      	cmp	r3, #0
    8c4e:	d008      	beq.n	8c62 <Adc_ValidateExtraParams+0x7a>
    {
       Adc_ValidateTriggerSrc(&ValidationStatus, ServiceId, Group, CoreId);
    8c50:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8c54:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8c58:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8c5c:	a803      	add	r0, sp, #12
    8c5e:	f7ff ff25 	bl	8aac <Adc_ValidateTriggerSrc>
    }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if ((0U != (ErrorIdList&ADC_E_QUEUE_FULL_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8c62:	9b00      	ldr	r3, [sp, #0]
    8c64:	f003 0304 	and.w	r3, r3, #4
    8c68:	2b00      	cmp	r3, #0
    8c6a:	d00f      	beq.n	8c8c <Adc_ValidateExtraParams+0xa4>
    8c6c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8c70:	f083 0301 	eor.w	r3, r3, #1
    8c74:	b2db      	uxtb	r3, r3
    8c76:	2b00      	cmp	r3, #0
    8c78:	d008      	beq.n	8c8c <Adc_ValidateExtraParams+0xa4>
    {
        Adc_ValidateQueueNotFull(&ValidationStatus, ServiceId, Group, CoreId);
    8c7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8c7e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8c82:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8c86:	a803      	add	r0, sp, #12
    8c88:	f7ff ff52 	bl	8b30 <Adc_ValidateQueueNotFull>
    {
        Adc_ValidateEnableDisbleGroupList(&ValidationStatus, ServiceId, Group, CoreId);
    }
#endif /* ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON */

    return ValidationStatus.ValidParams;
    8c8c:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    8c90:	4618      	mov	r0, r3
    8c92:	b005      	add	sp, #20
    8c94:	f85d fb04 	ldr.w	pc, [sp], #4

00008c98 <Adc_EndValidateGloballCall>:
* @return void
*/
static inline void Adc_EndValidateGloballCall(Std_ReturnType ValidCall,
                                              uint8 ServiceId,
                                              uint8 CoreId)
{
    8c98:	b082      	sub	sp, #8
    8c9a:	4603      	mov	r3, r0
    8c9c:	f88d 3007 	strb.w	r3, [sp, #7]
    8ca0:	460b      	mov	r3, r1
    8ca2:	f88d 3006 	strb.w	r3, [sp, #6]
    8ca6:	4613      	mov	r3, r2
    8ca8:	f88d 3005 	strb.w	r3, [sp, #5]
    if ((Std_ReturnType)E_OK == ValidCall)
    8cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cb0:	2b00      	cmp	r3, #0
    8cb2:	d110      	bne.n	8cd6 <Adc_EndValidateGloballCall+0x3e>
    {
        if (ADC_DEINIT_ID == ServiceId)
    8cb4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8cb8:	2b01      	cmp	r3, #1
    8cba:	d106      	bne.n	8cca <Adc_EndValidateGloballCall+0x32>
        {
            Adc_aeGlobalState[CoreId] = ADC_STATE_UNINIT;
    8cbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8cc0:	4a06      	ldr	r2, [pc, #24]	; (8cdc <Adc_EndValidateGloballCall+0x44>)
    8cc2:	2100      	movs	r1, #0
    8cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        else
        {
            Adc_aeGlobalState[CoreId] = ADC_STATE_IDLE;
        }
    }
}
    8cc8:	e005      	b.n	8cd6 <Adc_EndValidateGloballCall+0x3e>
            Adc_aeGlobalState[CoreId] = ADC_STATE_IDLE;
    8cca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8cce:	4a03      	ldr	r2, [pc, #12]	; (8cdc <Adc_EndValidateGloballCall+0x44>)
    8cd0:	2102      	movs	r1, #2
    8cd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    8cd6:	bf00      	nop
    8cd8:	b002      	add	sp, #8
    8cda:	4770      	bx	lr
    8cdc:	1fff8d44 	.word	0x1fff8d44

00008ce0 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    8ce0:	b500      	push	{lr}
    8ce2:	b085      	sub	sp, #20
    8ce4:	4603      	mov	r3, r0
    8ce6:	460a      	mov	r2, r1
    8ce8:	f88d 3007 	strb.w	r3, [sp, #7]
    8cec:	4613      	mov	r3, r2
    8cee:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    8cf2:	2300      	movs	r3, #0
    8cf4:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8cf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cfc:	4a0b      	ldr	r2, [pc, #44]	; (8d2c <Adc_ValidateNotBusyNoQueue+0x4c>)
    8cfe:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8d02:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    8d06:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8d0a:	2b00      	cmp	r3, #0
    8d0c:	d008      	beq.n	8d20 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    8d0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8d12:	210b      	movs	r1, #11
    8d14:	4618      	mov	r0, r3
    8d16:	f7ff fe04 	bl	8922 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    8d1a:	2301      	movs	r3, #1
    8d1c:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    8d20:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8d24:	4618      	mov	r0, r3
    8d26:	b005      	add	sp, #20
    8d28:	f85d fb04 	ldr.w	pc, [sp], #4
    8d2c:	1fff8d70 	.word	0x1fff8d70

00008d30 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    8d30:	b500      	push	{lr}
    8d32:	b085      	sub	sp, #20
    8d34:	4603      	mov	r3, r0
    8d36:	f8ad 3006 	strh.w	r3, [sp, #6]
    8d3a:	460b      	mov	r3, r1
    8d3c:	f88d 3005 	strb.w	r3, [sp, #5]
    8d40:	4613      	mov	r3, r2
    8d42:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8d46:	2301      	movs	r3, #1
    8d48:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    8d4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8d50:	4917      	ldr	r1, [pc, #92]	; (8db0 <Adc_ValidateNotBusyNoPrio+0x80>)
    8d52:	4613      	mov	r3, r2
    8d54:	009b      	lsls	r3, r3, #2
    8d56:	4413      	add	r3, r2
    8d58:	009b      	lsls	r3, r3, #2
    8d5a:	440b      	add	r3, r1
    8d5c:	681b      	ldr	r3, [r3, #0]
    8d5e:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    8d60:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8d64:	f083 0301 	eor.w	r3, r3, #1
    8d68:	b2db      	uxtb	r3, r3
    8d6a:	2b00      	cmp	r3, #0
    8d6c:	d007      	beq.n	8d7e <Adc_ValidateNotBusyNoPrio+0x4e>
    8d6e:	9b02      	ldr	r3, [sp, #8]
    8d70:	2b00      	cmp	r3, #0
    8d72:	d004      	beq.n	8d7e <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    8d74:	210b      	movs	r1, #11
    8d76:	2002      	movs	r0, #2
    8d78:	f7ff fdd3 	bl	8922 <Adc_ReportDetRuntimeError>
    8d7c:	e011      	b.n	8da2 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    8d7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8d82:	2b00      	cmp	r3, #0
    8d84:	d00a      	beq.n	8d9c <Adc_ValidateNotBusyNoPrio+0x6c>
    8d86:	9b02      	ldr	r3, [sp, #8]
    8d88:	2b00      	cmp	r3, #0
    8d8a:	d007      	beq.n	8d9c <Adc_ValidateNotBusyNoPrio+0x6c>
    8d8c:	9b02      	ldr	r3, [sp, #8]
    8d8e:	2b03      	cmp	r3, #3
    8d90:	d004      	beq.n	8d9c <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    8d92:	210b      	movs	r1, #11
    8d94:	2002      	movs	r0, #2
    8d96:	f7ff fdc4 	bl	8922 <Adc_ReportDetRuntimeError>
    8d9a:	e002      	b.n	8da2 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    8d9c:	2300      	movs	r3, #0
    8d9e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    8da2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8da6:	4618      	mov	r0, r3
    8da8:	b005      	add	sp, #20
    8daa:	f85d fb04 	ldr.w	pc, [sp], #4
    8dae:	bf00      	nop
    8db0:	1fff8d48 	.word	0x1fff8d48

00008db4 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    8db4:	b500      	push	{lr}
    8db6:	b087      	sub	sp, #28
    8db8:	4603      	mov	r3, r0
    8dba:	460a      	mov	r2, r1
    8dbc:	f88d 3007 	strb.w	r3, [sp, #7]
    8dc0:	4613      	mov	r3, r2
    8dc2:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    8dc6:	2300      	movs	r3, #0
    8dc8:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    8dcc:	2300      	movs	r3, #0
    8dce:	f8ad 3016 	strh.w	r3, [sp, #22]
    8dd2:	e02c      	b.n	8e2e <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    8dd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8dd8:	4a1d      	ldr	r2, [pc, #116]	; (8e50 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    8dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dde:	685a      	ldr	r2, [r3, #4]
    8de0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8de4:	2134      	movs	r1, #52	; 0x34
    8de6:	fb01 f303 	mul.w	r3, r1, r3
    8dea:	4413      	add	r3, r2
    8dec:	881b      	ldrh	r3, [r3, #0]
    8dee:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    8df2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    8df6:	4917      	ldr	r1, [pc, #92]	; (8e54 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    8df8:	4613      	mov	r3, r2
    8dfa:	009b      	lsls	r3, r3, #2
    8dfc:	4413      	add	r3, r2
    8dfe:	009b      	lsls	r3, r3, #2
    8e00:	440b      	add	r3, r1
    8e02:	681b      	ldr	r3, [r3, #0]
    8e04:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    8e06:	9b03      	ldr	r3, [sp, #12]
    8e08:	2b00      	cmp	r3, #0
    8e0a:	d00b      	beq.n	8e24 <Adc_ValidateCheckGroupNotConversion+0x70>
    8e0c:	9b03      	ldr	r3, [sp, #12]
    8e0e:	2b03      	cmp	r3, #3
    8e10:	d008      	beq.n	8e24 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    8e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8e16:	210b      	movs	r1, #11
    8e18:	4618      	mov	r0, r3
    8e1a:	f7ff fd82 	bl	8922 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    8e1e:	2301      	movs	r3, #1
    8e20:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    8e24:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8e28:	3301      	adds	r3, #1
    8e2a:	f8ad 3016 	strh.w	r3, [sp, #22]
    8e2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e32:	4a07      	ldr	r2, [pc, #28]	; (8e50 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    8e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e38:	891b      	ldrh	r3, [r3, #8]
    8e3a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    8e3e:	429a      	cmp	r2, r3
    8e40:	d3c8      	bcc.n	8dd4 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    8e42:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    8e46:	4618      	mov	r0, r3
    8e48:	b007      	add	sp, #28
    8e4a:	f85d fb04 	ldr.w	pc, [sp], #4
    8e4e:	bf00      	nop
    8e50:	1fff8d40 	.word	0x1fff8d40
    8e54:	1fff8d48 	.word	0x1fff8d48

00008e58 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    8e58:	b500      	push	{lr}
    8e5a:	b085      	sub	sp, #20
    8e5c:	4603      	mov	r3, r0
    8e5e:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    8e62:	2300      	movs	r3, #0
    8e64:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8e68:	2301      	movs	r3, #1
    8e6a:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8e6e:	2300      	movs	r3, #0
    8e70:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    8e74:	2300      	movs	r3, #0
    8e76:	f88d 300d 	strb.w	r3, [sp, #13]
    8e7a:	e01d      	b.n	8eb8 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    8e7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8e80:	4a1b      	ldr	r2, [pc, #108]	; (8ef0 <Adc_ValidateDeInitNotBusy+0x98>)
    8e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e86:	681a      	ldr	r2, [r3, #0]
    8e88:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8e8c:	4413      	add	r3, r2
    8e8e:	7f9b      	ldrb	r3, [r3, #30]
    8e90:	2b01      	cmp	r3, #1
    8e92:	d10c      	bne.n	8eae <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    8e94:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8e98:	2101      	movs	r1, #1
    8e9a:	4618      	mov	r0, r3
    8e9c:	f7ff ff20 	bl	8ce0 <Adc_ValidateNotBusyNoQueue>
    8ea0:	4603      	mov	r3, r0
    8ea2:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    8ea6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8eaa:	2b01      	cmp	r3, #1
    8eac:	d009      	beq.n	8ec2 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    8eae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8eb2:	3301      	adds	r3, #1
    8eb4:	f88d 300d 	strb.w	r3, [sp, #13]
    8eb8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8ebc:	2b01      	cmp	r3, #1
    8ebe:	d9dd      	bls.n	8e7c <Adc_ValidateDeInitNotBusy+0x24>
    8ec0:	e000      	b.n	8ec4 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    8ec2:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    8ec4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ec8:	2b00      	cmp	r3, #0
    8eca:	d10b      	bne.n	8ee4 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    8ecc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ed0:	4619      	mov	r1, r3
    8ed2:	2001      	movs	r0, #1
    8ed4:	f7ff ff6e 	bl	8db4 <Adc_ValidateCheckGroupNotConversion>
    8ed8:	4603      	mov	r3, r0
    8eda:	2b00      	cmp	r3, #0
    8edc:	d102      	bne.n	8ee4 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    8ede:	2300      	movs	r3, #0
    8ee0:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    8ee4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    8ee8:	4618      	mov	r0, r3
    8eea:	b005      	add	sp, #20
    8eec:	f85d fb04 	ldr.w	pc, [sp], #4
    8ef0:	1fff8d40 	.word	0x1fff8d40

00008ef4 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    8ef4:	b500      	push	{lr}
    8ef6:	b085      	sub	sp, #20
    8ef8:	4603      	mov	r3, r0
    8efa:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8efe:	2301      	movs	r3, #1
    8f00:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    8f04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8f08:	490b      	ldr	r1, [pc, #44]	; (8f38 <Adc_ValidateSetupBufferNotBusy+0x44>)
    8f0a:	4613      	mov	r3, r2
    8f0c:	009b      	lsls	r3, r3, #2
    8f0e:	4413      	add	r3, r2
    8f10:	009b      	lsls	r3, r3, #2
    8f12:	440b      	add	r3, r1
    8f14:	681b      	ldr	r3, [r3, #0]
    8f16:	2b00      	cmp	r3, #0
    8f18:	d004      	beq.n	8f24 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    8f1a:	210b      	movs	r1, #11
    8f1c:	200c      	movs	r0, #12
    8f1e:	f7ff fd00 	bl	8922 <Adc_ReportDetRuntimeError>
    8f22:	e002      	b.n	8f2a <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    8f24:	2300      	movs	r3, #0
    8f26:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    8f2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8f2e:	4618      	mov	r0, r3
    8f30:	b005      	add	sp, #20
    8f32:	f85d fb04 	ldr.w	pc, [sp], #4
    8f36:	bf00      	nop
    8f38:	1fff8d48 	.word	0x1fff8d48

00008f3c <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    8f3c:	b500      	push	{lr}
    8f3e:	b085      	sub	sp, #20
    8f40:	4603      	mov	r3, r0
    8f42:	460a      	mov	r2, r1
    8f44:	f8ad 3006 	strh.w	r3, [sp, #6]
    8f48:	4613      	mov	r3, r2
    8f4a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    8f4e:	2300      	movs	r3, #0
    8f50:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    8f54:	2300      	movs	r3, #0
    8f56:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8f5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8f5e:	4a32      	ldr	r2, [pc, #200]	; (9028 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    8f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f64:	68da      	ldr	r2, [r3, #12]
    8f66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8f6a:	005b      	lsls	r3, r3, #1
    8f6c:	4413      	add	r3, r2
    8f6e:	881b      	ldrh	r3, [r3, #0]
    8f70:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    8f74:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8f78:	4a2b      	ldr	r2, [pc, #172]	; (9028 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    8f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f7e:	685a      	ldr	r2, [r3, #4]
    8f80:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8f84:	2134      	movs	r1, #52	; 0x34
    8f86:	fb01 f303 	mul.w	r3, r1, r3
    8f8a:	4413      	add	r3, r2
    8f8c:	689b      	ldr	r3, [r3, #8]
    8f8e:	2b00      	cmp	r3, #0
    8f90:	d02c      	beq.n	8fec <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    8f92:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8f96:	4a24      	ldr	r2, [pc, #144]	; (9028 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    8f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f9c:	685a      	ldr	r2, [r3, #4]
    8f9e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8fa2:	2134      	movs	r1, #52	; 0x34
    8fa4:	fb01 f303 	mul.w	r3, r1, r3
    8fa8:	4413      	add	r3, r2
    8faa:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    8fac:	2b01      	cmp	r3, #1
    8fae:	d120      	bne.n	8ff2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    8fb0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8fb4:	4a1c      	ldr	r2, [pc, #112]	; (9028 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    8fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fba:	685a      	ldr	r2, [r3, #4]
    8fbc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8fc0:	2134      	movs	r1, #52	; 0x34
    8fc2:	fb01 f303 	mul.w	r3, r1, r3
    8fc6:	4413      	add	r3, r2
    8fc8:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    8fca:	2b01      	cmp	r3, #1
    8fcc:	d111      	bne.n	8ff2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    8fce:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8fd2:	4a15      	ldr	r2, [pc, #84]	; (9028 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    8fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fd8:	685a      	ldr	r2, [r3, #4]
    8fda:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8fde:	2134      	movs	r1, #52	; 0x34
    8fe0:	fb01 f303 	mul.w	r3, r1, r3
    8fe4:	4413      	add	r3, r2
    8fe6:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    8fe8:	2b00      	cmp	r3, #0
    8fea:	d102      	bne.n	8ff2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    8fec:	2301      	movs	r3, #1
    8fee:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    8ff2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ff6:	2b01      	cmp	r3, #1
    8ff8:	d104      	bne.n	9004 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    8ffa:	210b      	movs	r1, #11
    8ffc:	2002      	movs	r0, #2
    8ffe:	f7ff fc90 	bl	8922 <Adc_ReportDetRuntimeError>
    9002:	e00b      	b.n	901c <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    9004:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9008:	f89d 100e 	ldrb.w	r1, [sp, #14]
    900c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9010:	4618      	mov	r0, r3
    9012:	f7ff fe8d 	bl	8d30 <Adc_ValidateNotBusyNoPrio>
    9016:	4603      	mov	r3, r0
    9018:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    901c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9020:	4618      	mov	r0, r3
    9022:	b005      	add	sp, #20
    9024:	f85d fb04 	ldr.w	pc, [sp], #4
    9028:	1fff8d40 	.word	0x1fff8d40

0000902c <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    902c:	b500      	push	{lr}
    902e:	b085      	sub	sp, #20
    9030:	4603      	mov	r3, r0
    9032:	f88d 3007 	strb.w	r3, [sp, #7]
    9036:	460b      	mov	r3, r1
    9038:	f8ad 3004 	strh.w	r3, [sp, #4]
    903c:	4613      	mov	r3, r2
    903e:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    9042:	2300      	movs	r3, #0
    9044:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    9048:	f89d 3007 	ldrb.w	r3, [sp, #7]
    904c:	2b0b      	cmp	r3, #11
    904e:	d03b      	beq.n	90c8 <Adc_ValidateStateNotIdle+0x9c>
    9050:	2b0b      	cmp	r3, #11
    9052:	dc4e      	bgt.n	90f2 <Adc_ValidateStateNotIdle+0xc6>
    9054:	2b03      	cmp	r3, #3
    9056:	d022      	beq.n	909e <Adc_ValidateStateNotIdle+0x72>
    9058:	2b04      	cmp	r3, #4
    905a:	d14a      	bne.n	90f2 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    905c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9060:	492a      	ldr	r1, [pc, #168]	; (910c <Adc_ValidateStateNotIdle+0xe0>)
    9062:	4613      	mov	r3, r2
    9064:	009b      	lsls	r3, r3, #2
    9066:	4413      	add	r3, r2
    9068:	009b      	lsls	r3, r3, #2
    906a:	440b      	add	r3, r1
    906c:	681b      	ldr	r3, [r3, #0]
    906e:	2b00      	cmp	r3, #0
    9070:	d141      	bne.n	90f6 <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    9072:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9076:	4925      	ldr	r1, [pc, #148]	; (910c <Adc_ValidateStateNotIdle+0xe0>)
    9078:	4613      	mov	r3, r2
    907a:	009b      	lsls	r3, r3, #2
    907c:	4413      	add	r3, r2
    907e:	009b      	lsls	r3, r3, #2
    9080:	440b      	add	r3, r1
    9082:	3304      	adds	r3, #4
    9084:	681b      	ldr	r3, [r3, #0]
    9086:	2b00      	cmp	r3, #0
    9088:	d135      	bne.n	90f6 <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    908a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    908e:	210c      	movs	r1, #12
    9090:	4618      	mov	r0, r3
    9092:	f7ff fc46 	bl	8922 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    9096:	2301      	movs	r3, #1
    9098:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    909c:	e02b      	b.n	90f6 <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    909e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    90a2:	491a      	ldr	r1, [pc, #104]	; (910c <Adc_ValidateStateNotIdle+0xe0>)
    90a4:	4613      	mov	r3, r2
    90a6:	009b      	lsls	r3, r3, #2
    90a8:	4413      	add	r3, r2
    90aa:	009b      	lsls	r3, r3, #2
    90ac:	440b      	add	r3, r1
    90ae:	681b      	ldr	r3, [r3, #0]
    90b0:	2b00      	cmp	r3, #0
    90b2:	d122      	bne.n	90fa <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    90b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90b8:	210c      	movs	r1, #12
    90ba:	4618      	mov	r0, r3
    90bc:	f7ff fc31 	bl	8922 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    90c0:	2301      	movs	r3, #1
    90c2:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    90c6:	e018      	b.n	90fa <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    90c8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    90cc:	490f      	ldr	r1, [pc, #60]	; (910c <Adc_ValidateStateNotIdle+0xe0>)
    90ce:	4613      	mov	r3, r2
    90d0:	009b      	lsls	r3, r3, #2
    90d2:	4413      	add	r3, r2
    90d4:	009b      	lsls	r3, r3, #2
    90d6:	440b      	add	r3, r1
    90d8:	681b      	ldr	r3, [r3, #0]
    90da:	2b00      	cmp	r3, #0
    90dc:	d10f      	bne.n	90fe <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    90de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90e2:	210c      	movs	r1, #12
    90e4:	4618      	mov	r0, r3
    90e6:	f7ff fc1c 	bl	8922 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    90ea:	2301      	movs	r3, #1
    90ec:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    90f0:	e005      	b.n	90fe <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    90f2:	bf00      	nop
    90f4:	e004      	b.n	9100 <Adc_ValidateStateNotIdle+0xd4>
            break;
    90f6:	bf00      	nop
    90f8:	e002      	b.n	9100 <Adc_ValidateStateNotIdle+0xd4>
            break;
    90fa:	bf00      	nop
    90fc:	e000      	b.n	9100 <Adc_ValidateStateNotIdle+0xd4>
            break;
    90fe:	bf00      	nop
        }
    }

    return ValidState;
    9100:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9104:	4618      	mov	r0, r3
    9106:	b005      	add	sp, #20
    9108:	f85d fb04 	ldr.w	pc, [sp], #4
    910c:	1fff8d48 	.word	0x1fff8d48

00009110 <Adc_ValidateCallAndGroup>:
* @implements     Adc_ValidateCallAndGroup_Activity
*/
static inline Std_ReturnType Adc_ValidateCallAndGroup(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    9110:	b500      	push	{lr}
    9112:	b085      	sub	sp, #20
    9114:	4603      	mov	r3, r0
    9116:	f88d 3007 	strb.w	r3, [sp, #7]
    911a:	460b      	mov	r3, r1
    911c:	f8ad 3004 	strh.w	r3, [sp, #4]
    9120:	4613      	mov	r3, r2
    9122:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidCallAndGroup = (Std_ReturnType)E_NOT_OK;
    9126:	2301      	movs	r3, #1
    9128:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    912c:	2301      	movs	r3, #1
    912e:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType GroupIndex = 0U;
    9132:	2300      	movs	r3, #0
    9134:	f8ad 300c 	strh.w	r3, [sp, #12]

    if (NULL_PTR == Adc_apxCfgPtr[CoreId])
    9138:	f89d 3006 	ldrb.w	r3, [sp, #6]
    913c:	4a2e      	ldr	r2, [pc, #184]	; (91f8 <Adc_ValidateCallAndGroup+0xe8>)
    913e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9142:	2b00      	cmp	r3, #0
    9144:	d106      	bne.n	9154 <Adc_ValidateCallAndGroup+0x44>
    {
        /* SWS_Adc_00300, SWS_Adc_00301, SWS_Adc_00302, SWS_Adc_00299, SWS_Adc_00298, SWS_Adc_00297, SWS_Adc_00296, SWS_Adc_00295, SWS_Adc_00294, SWS_Adc_00434 */
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    9146:	f89d 3007 	ldrb.w	r3, [sp, #7]
    914a:	210a      	movs	r1, #10
    914c:	4618      	mov	r0, r3
    914e:	f7ff fbd3 	bl	88f8 <Adc_ReportDetError>
    9152:	e04b      	b.n	91ec <Adc_ValidateCallAndGroup+0xdc>
        (void)GroupIndex;
        (void)ValidCoreId;
    }
    else
    {
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreId);
    9154:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9158:	4a27      	ldr	r2, [pc, #156]	; (91f8 <Adc_ValidateCallAndGroup+0xe8>)
    915a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    915e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9162:	4611      	mov	r1, r2
    9164:	4618      	mov	r0, r3
    9166:	f000 f961 	bl	942c <Adc_CheckCurrentCoreId>
    916a:	4603      	mov	r3, r0
    916c:	f88d 300e 	strb.w	r3, [sp, #14]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    9170:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9174:	2b00      	cmp	r3, #0
    9176:	d133      	bne.n	91e0 <Adc_ValidateCallAndGroup+0xd0>
        {
            if (Group >= ADC_MAX_GROUPS)
    9178:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    917c:	2b01      	cmp	r3, #1
    917e:	d906      	bls.n	918e <Adc_ValidateCallAndGroup+0x7e>
            {
                /* SWS_Adc_00218, SWS_Adc_00225, SWS_Adc_00131, SWS_Adc_00130, SWS_Adc_00129, SWS_Adc_00128, SWS_Adc_00152, SWS_Adc_00126, SWS_Adc_00125, SWS_Adc_00423 */
                Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_GROUP);
    9180:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9184:	2115      	movs	r1, #21
    9186:	4618      	mov	r0, r3
    9188:	f7ff fbb6 	bl	88f8 <Adc_ReportDetError>
    918c:	e02e      	b.n	91ec <Adc_ValidateCallAndGroup+0xdc>
                (void)GroupIndex;
            }
            else
            {
                /* Get the mapping index of group in the current partition */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    918e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9192:	4a19      	ldr	r2, [pc, #100]	; (91f8 <Adc_ValidateCallAndGroup+0xe8>)
    9194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9198:	68da      	ldr	r2, [r3, #12]
    919a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    919e:	005b      	lsls	r3, r3, #1
    91a0:	4413      	add	r3, r2
    91a2:	881b      	ldrh	r3, [r3, #0]
    91a4:	f8ad 300c 	strh.w	r3, [sp, #12]
                if (Group != Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].GroupId)
    91a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    91ac:	4a12      	ldr	r2, [pc, #72]	; (91f8 <Adc_ValidateCallAndGroup+0xe8>)
    91ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91b2:	685a      	ldr	r2, [r3, #4]
    91b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    91b8:	2134      	movs	r1, #52	; 0x34
    91ba:	fb01 f303 	mul.w	r3, r1, r3
    91be:	4413      	add	r3, r2
    91c0:	881b      	ldrh	r3, [r3, #0]
    91c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    91c6:	429a      	cmp	r2, r3
    91c8:	d006      	beq.n	91d8 <Adc_ValidateCallAndGroup+0xc8>
                {
                    /* Group doesn't belong to current core */
                    Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    91ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91ce:	210e      	movs	r1, #14
    91d0:	4618      	mov	r0, r3
    91d2:	f7ff fb91 	bl	88f8 <Adc_ReportDetError>
    91d6:	e009      	b.n	91ec <Adc_ValidateCallAndGroup+0xdc>
                }
                else
                {
                    ValidCallAndGroup = (Std_ReturnType)E_OK;
    91d8:	2300      	movs	r3, #0
    91da:	f88d 300f 	strb.w	r3, [sp, #15]
    91de:	e005      	b.n	91ec <Adc_ValidateCallAndGroup+0xdc>
            }
        }
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    91e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91e4:	210e      	movs	r1, #14
    91e6:	4618      	mov	r0, r3
    91e8:	f7ff fb86 	bl	88f8 <Adc_ReportDetError>
        }
    }

    return ValidCallAndGroup;
    91ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    91f0:	4618      	mov	r0, r3
    91f2:	b005      	add	sp, #20
    91f4:	f85d fb04 	ldr.w	pc, [sp], #4
    91f8:	1fff8d40 	.word	0x1fff8d40

000091fc <Adc_ValidateCallAndUnit>:
* @implements     Adc_ValidateCallAndUnit_Activity
*/
static inline Std_ReturnType Adc_ValidateCallAndUnit(uint8 ServiceId,
                                                     Adc_HwUnitType Unit,
                                                     uint8 CoreId)
{
    91fc:	b500      	push	{lr}
    91fe:	b085      	sub	sp, #20
    9200:	4603      	mov	r3, r0
    9202:	f88d 3007 	strb.w	r3, [sp, #7]
    9206:	460b      	mov	r3, r1
    9208:	f88d 3006 	strb.w	r3, [sp, #6]
    920c:	4613      	mov	r3, r2
    920e:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType ValidCallAndUnit = (Std_ReturnType)E_NOT_OK;
    9212:	2301      	movs	r3, #1
    9214:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId;

    if (NULL_PTR == Adc_apxCfgPtr[CoreId])
    9218:	f89d 3005 	ldrb.w	r3, [sp, #5]
    921c:	4a25      	ldr	r2, [pc, #148]	; (92b4 <Adc_ValidateCallAndUnit+0xb8>)
    921e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9222:	2b00      	cmp	r3, #0
    9224:	d106      	bne.n	9234 <Adc_ValidateCallAndUnit+0x38>
    {
        /* CPR_RTD_00272.adc, CPR_RTD_00273.adc */
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    9226:	f89d 3007 	ldrb.w	r3, [sp, #7]
    922a:	210a      	movs	r1, #10
    922c:	4618      	mov	r0, r3
    922e:	f7ff fb63 	bl	88f8 <Adc_ReportDetError>
    9232:	e039      	b.n	92a8 <Adc_ValidateCallAndUnit+0xac>
    }
    else if (Unit >= ADC_IPW_MAX_HW_UNITS_CFG)
    9234:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9238:	2b01      	cmp	r3, #1
    923a:	d906      	bls.n	924a <Adc_ValidateCallAndUnit+0x4e>
    {
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_UNIT);
    923c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9240:	2126      	movs	r1, #38	; 0x26
    9242:	4618      	mov	r0, r3
    9244:	f7ff fb58 	bl	88f8 <Adc_ReportDetError>
    9248:	e02e      	b.n	92a8 <Adc_ValidateCallAndUnit+0xac>
    }
    else
    {
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreId);
    924a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    924e:	4a19      	ldr	r2, [pc, #100]	; (92b4 <Adc_ValidateCallAndUnit+0xb8>)
    9250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9254:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9258:	4611      	mov	r1, r2
    925a:	4618      	mov	r0, r3
    925c:	f000 f8e6 	bl	942c <Adc_CheckCurrentCoreId>
    9260:	4603      	mov	r3, r0
    9262:	f88d 300e 	strb.w	r3, [sp, #14]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    9266:	f89d 300e 	ldrb.w	r3, [sp, #14]
    926a:	2b00      	cmp	r3, #0
    926c:	d116      	bne.n	929c <Adc_ValidateCallAndUnit+0xa0>
        {
            if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[Unit] == (uint8)STD_ON) /* HW unit enabled on current partition */
    926e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9272:	4a10      	ldr	r2, [pc, #64]	; (92b4 <Adc_ValidateCallAndUnit+0xb8>)
    9274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9278:	681a      	ldr	r2, [r3, #0]
    927a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    927e:	4413      	add	r3, r2
    9280:	7f9b      	ldrb	r3, [r3, #30]
    9282:	2b01      	cmp	r3, #1
    9284:	d103      	bne.n	928e <Adc_ValidateCallAndUnit+0x92>
            {
                ValidCallAndUnit = (Std_ReturnType)E_OK;
    9286:	2300      	movs	r3, #0
    9288:	f88d 300f 	strb.w	r3, [sp, #15]
    928c:	e00c      	b.n	92a8 <Adc_ValidateCallAndUnit+0xac>
            }
            else
            {
                Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    928e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9292:	210e      	movs	r1, #14
    9294:	4618      	mov	r0, r3
    9296:	f7ff fb2f 	bl	88f8 <Adc_ReportDetError>
    929a:	e005      	b.n	92a8 <Adc_ValidateCallAndUnit+0xac>
            }
        }
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    929c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92a0:	210e      	movs	r1, #14
    92a2:	4618      	mov	r0, r3
    92a4:	f7ff fb28 	bl	88f8 <Adc_ReportDetError>
        }
    }

    return ValidCallAndUnit;
    92a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    92ac:	4618      	mov	r0, r3
    92ae:	b005      	add	sp, #20
    92b0:	f85d fb04 	ldr.w	pc, [sp], #4
    92b4:	1fff8d40 	.word	0x1fff8d40

000092b8 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    92b8:	b084      	sub	sp, #16
    92ba:	4603      	mov	r3, r0
    92bc:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    92c0:	2300      	movs	r3, #0
    92c2:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    92c6:	2300      	movs	r3, #0
    92c8:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    92cc:	2300      	movs	r3, #0
    92ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    92d2:	e049      	b.n	9368 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    92d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92d8:	4a2a      	ldr	r2, [pc, #168]	; (9384 <Adc_InitGroupsStatus+0xcc>)
    92da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92de:	685a      	ldr	r2, [r3, #4]
    92e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    92e4:	2134      	movs	r1, #52	; 0x34
    92e6:	fb01 f303 	mul.w	r3, r1, r3
    92ea:	4413      	add	r3, r2
    92ec:	881b      	ldrh	r3, [r3, #0]
    92ee:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    92f2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    92f6:	4924      	ldr	r1, [pc, #144]	; (9388 <Adc_InitGroupsStatus+0xd0>)
    92f8:	4613      	mov	r3, r2
    92fa:	009b      	lsls	r3, r3, #2
    92fc:	4413      	add	r3, r2
    92fe:	009b      	lsls	r3, r3, #2
    9300:	440b      	add	r3, r1
    9302:	2200      	movs	r2, #0
    9304:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    9306:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    930a:	491f      	ldr	r1, [pc, #124]	; (9388 <Adc_InitGroupsStatus+0xd0>)
    930c:	4613      	mov	r3, r2
    930e:	009b      	lsls	r3, r3, #2
    9310:	4413      	add	r3, r2
    9312:	009b      	lsls	r3, r3, #2
    9314:	440b      	add	r3, r1
    9316:	3304      	adds	r3, #4
    9318:	2200      	movs	r2, #0
    931a:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    931c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9320:	4919      	ldr	r1, [pc, #100]	; (9388 <Adc_InitGroupsStatus+0xd0>)
    9322:	4613      	mov	r3, r2
    9324:	009b      	lsls	r3, r3, #2
    9326:	4413      	add	r3, r2
    9328:	009b      	lsls	r3, r3, #2
    932a:	440b      	add	r3, r1
    932c:	3308      	adds	r3, #8
    932e:	2200      	movs	r2, #0
    9330:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    9332:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9336:	4914      	ldr	r1, [pc, #80]	; (9388 <Adc_InitGroupsStatus+0xd0>)
    9338:	4613      	mov	r3, r2
    933a:	009b      	lsls	r3, r3, #2
    933c:	4413      	add	r3, r2
    933e:	009b      	lsls	r3, r3, #2
    9340:	440b      	add	r3, r1
    9342:	330c      	adds	r3, #12
    9344:	2200      	movs	r2, #0
    9346:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    9348:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    934c:	490e      	ldr	r1, [pc, #56]	; (9388 <Adc_InitGroupsStatus+0xd0>)
    934e:	4613      	mov	r3, r2
    9350:	009b      	lsls	r3, r3, #2
    9352:	4413      	add	r3, r2
    9354:	009b      	lsls	r3, r3, #2
    9356:	440b      	add	r3, r1
    9358:	3310      	adds	r3, #16
    935a:	2200      	movs	r2, #0
    935c:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    935e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9362:	3301      	adds	r3, #1
    9364:	f8ad 300e 	strh.w	r3, [sp, #14]
    9368:	f89d 3007 	ldrb.w	r3, [sp, #7]
    936c:	4a05      	ldr	r2, [pc, #20]	; (9384 <Adc_InitGroupsStatus+0xcc>)
    936e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9372:	891b      	ldrh	r3, [r3, #8]
    9374:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9378:	429a      	cmp	r2, r3
    937a:	d3ab      	bcc.n	92d4 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    937c:	bf00      	nop
    937e:	bf00      	nop
    9380:	b004      	add	sp, #16
    9382:	4770      	bx	lr
    9384:	1fff8d40 	.word	0x1fff8d40
    9388:	1fff8d48 	.word	0x1fff8d48

0000938c <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    938c:	b084      	sub	sp, #16
    938e:	4603      	mov	r3, r0
    9390:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9394:	2300      	movs	r3, #0
    9396:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    939a:	2300      	movs	r3, #0
    939c:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    93a0:	2300      	movs	r3, #0
    93a2:	f88d 300f 	strb.w	r3, [sp, #15]
    93a6:	e035      	b.n	9414 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    93a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93ac:	4a1d      	ldr	r2, [pc, #116]	; (9424 <Adc_InitUnitStatus+0x98>)
    93ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93b2:	681a      	ldr	r2, [r3, #0]
    93b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    93b8:	4413      	add	r3, r2
    93ba:	7f9b      	ldrb	r3, [r3, #30]
    93bc:	2b01      	cmp	r3, #1
    93be:	d124      	bne.n	940a <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    93c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    93c4:	4a18      	ldr	r2, [pc, #96]	; (9428 <Adc_InitUnitStatus+0x9c>)
    93c6:	2100      	movs	r1, #0
    93c8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    93cc:	2300      	movs	r3, #0
    93ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    93d2:	e00f      	b.n	93f4 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    93d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    93d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    93dc:	4912      	ldr	r1, [pc, #72]	; (9428 <Adc_InitUnitStatus+0x9c>)
    93de:	0092      	lsls	r2, r2, #2
    93e0:	4413      	add	r3, r2
    93e2:	005b      	lsls	r3, r3, #1
    93e4:	440b      	add	r3, r1
    93e6:	2200      	movs	r2, #0
    93e8:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    93ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    93ee:	3301      	adds	r3, #1
    93f0:	f8ad 300c 	strh.w	r3, [sp, #12]
    93f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    93f8:	2b01      	cmp	r3, #1
    93fa:	d9eb      	bls.n	93d4 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    93fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9400:	4a09      	ldr	r2, [pc, #36]	; (9428 <Adc_InitUnitStatus+0x9c>)
    9402:	00db      	lsls	r3, r3, #3
    9404:	4413      	add	r3, r2
    9406:	2200      	movs	r2, #0
    9408:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    940a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    940e:	3301      	adds	r3, #1
    9410:	f88d 300f 	strb.w	r3, [sp, #15]
    9414:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9418:	2b01      	cmp	r3, #1
    941a:	d9c5      	bls.n	93a8 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    941c:	bf00      	nop
    941e:	bf00      	nop
    9420:	b004      	add	sp, #16
    9422:	4770      	bx	lr
    9424:	1fff8d40 	.word	0x1fff8d40
    9428:	1fff8d70 	.word	0x1fff8d70

0000942c <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    942c:	b084      	sub	sp, #16
    942e:	9001      	str	r0, [sp, #4]
    9430:	460b      	mov	r3, r1
    9432:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    9436:	2300      	movs	r3, #0
    9438:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    943c:	2301      	movs	r3, #1
    943e:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    9442:	9b01      	ldr	r3, [sp, #4]
    9444:	7c1b      	ldrb	r3, [r3, #16]
    9446:	f89d 2003 	ldrb.w	r2, [sp, #3]
    944a:	429a      	cmp	r2, r3
    944c:	d11c      	bne.n	9488 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    944e:	2300      	movs	r3, #0
    9450:	f88d 300f 	strb.w	r3, [sp, #15]
    9454:	e012      	b.n	947c <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    9456:	9b01      	ldr	r3, [sp, #4]
    9458:	695a      	ldr	r2, [r3, #20]
    945a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    945e:	4413      	add	r3, r2
    9460:	781b      	ldrb	r3, [r3, #0]
    9462:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9466:	429a      	cmp	r2, r3
    9468:	d103      	bne.n	9472 <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    946a:	2300      	movs	r3, #0
    946c:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    9470:	e00a      	b.n	9488 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    9472:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9476:	3301      	adds	r3, #1
    9478:	f88d 300f 	strb.w	r3, [sp, #15]
    947c:	9b01      	ldr	r3, [sp, #4]
    947e:	7e1b      	ldrb	r3, [r3, #24]
    9480:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9484:	429a      	cmp	r2, r3
    9486:	d3e6      	bcc.n	9456 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    9488:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    948c:	4618      	mov	r0, r3
    948e:	b004      	add	sp, #16
    9490:	4770      	bx	lr

00009492 <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    9492:	b500      	push	{lr}
    9494:	b085      	sub	sp, #20
    9496:	4603      	mov	r3, r0
    9498:	f8ad 3006 	strh.w	r3, [sp, #6]
    949c:	460b      	mov	r3, r1
    949e:	f88d 3005 	strb.w	r3, [sp, #5]
    94a2:	4613      	mov	r3, r2
    94a4:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    94a8:	2300      	movs	r3, #0
    94aa:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    94ae:	2300      	movs	r3, #0
    94b0:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    94b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    94b8:	493e      	ldr	r1, [pc, #248]	; (95b4 <Adc_UpdateStatusStartConversion+0x122>)
    94ba:	4613      	mov	r3, r2
    94bc:	009b      	lsls	r3, r3, #2
    94be:	4413      	add	r3, r2
    94c0:	009b      	lsls	r3, r3, #2
    94c2:	440b      	add	r3, r1
    94c4:	2201      	movs	r2, #1
    94c6:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    94c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    94cc:	4939      	ldr	r1, [pc, #228]	; (95b4 <Adc_UpdateStatusStartConversion+0x122>)
    94ce:	4613      	mov	r3, r2
    94d0:	009b      	lsls	r3, r3, #2
    94d2:	4413      	add	r3, r2
    94d4:	009b      	lsls	r3, r3, #2
    94d6:	440b      	add	r3, r1
    94d8:	3308      	adds	r3, #8
    94da:	2200      	movs	r2, #0
    94dc:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    94de:	f008 f843 	bl	11568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    94e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    94e6:	4a34      	ldr	r2, [pc, #208]	; (95b8 <Adc_UpdateStatusStartConversion+0x126>)
    94e8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    94ec:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    94f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    94f4:	2b00      	cmp	r3, #0
    94f6:	d016      	beq.n	9526 <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    94f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    94fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9500:	492d      	ldr	r1, [pc, #180]	; (95b8 <Adc_UpdateStatusStartConversion+0x126>)
    9502:	0092      	lsls	r2, r2, #2
    9504:	4413      	add	r3, r2
    9506:	005b      	lsls	r3, r3, #1
    9508:	440b      	add	r3, r1
    950a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    950e:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    9510:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9514:	4a28      	ldr	r2, [pc, #160]	; (95b8 <Adc_UpdateStatusStartConversion+0x126>)
    9516:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    951a:	b292      	uxth	r2, r2
    951c:	3201      	adds	r2, #1
    951e:	b291      	uxth	r1, r2
    9520:	4a25      	ldr	r2, [pc, #148]	; (95b8 <Adc_UpdateStatusStartConversion+0x126>)
    9522:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    9526:	f008 f84b 	bl	115c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    952a:	f008 f81d 	bl	11568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    952e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9532:	4a21      	ldr	r2, [pc, #132]	; (95b8 <Adc_UpdateStatusStartConversion+0x126>)
    9534:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9538:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    953c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9540:	4a1d      	ldr	r2, [pc, #116]	; (95b8 <Adc_UpdateStatusStartConversion+0x126>)
    9542:	00db      	lsls	r3, r3, #3
    9544:	4413      	add	r3, r2
    9546:	885b      	ldrh	r3, [r3, #2]
    9548:	b29b      	uxth	r3, r3
    954a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    954e:	429a      	cmp	r2, r3
    9550:	d003      	beq.n	955a <Adc_UpdateStatusStartConversion+0xc8>
    9552:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    9556:	2b00      	cmp	r3, #0
    9558:	d125      	bne.n	95a6 <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    955a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    955e:	4a16      	ldr	r2, [pc, #88]	; (95b8 <Adc_UpdateStatusStartConversion+0x126>)
    9560:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9564:	b29b      	uxth	r3, r3
    9566:	2b00      	cmp	r3, #0
    9568:	d112      	bne.n	9590 <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    956a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    956e:	4a12      	ldr	r2, [pc, #72]	; (95b8 <Adc_UpdateStatusStartConversion+0x126>)
    9570:	00db      	lsls	r3, r3, #3
    9572:	4413      	add	r3, r2
    9574:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9578:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    957a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    957e:	4a0e      	ldr	r2, [pc, #56]	; (95b8 <Adc_UpdateStatusStartConversion+0x126>)
    9580:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    9584:	b292      	uxth	r2, r2
    9586:	3201      	adds	r2, #1
    9588:	b291      	uxth	r1, r2
    958a:	4a0b      	ldr	r2, [pc, #44]	; (95b8 <Adc_UpdateStatusStartConversion+0x126>)
    958c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    9590:	f008 f816 	bl	115c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9594:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9598:	f89d 3005 	ldrb.w	r3, [sp, #5]
    959c:	4611      	mov	r1, r2
    959e:	4618      	mov	r0, r3
    95a0:	f002 fcda 	bl	bf58 <Adc_Ipw_StartNormalConversion>
    95a4:	e002      	b.n	95ac <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    95a6:	f008 f80b 	bl	115c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    95aa:	bf00      	nop
    95ac:	bf00      	nop
    95ae:	b005      	add	sp, #20
    95b0:	f85d fb04 	ldr.w	pc, [sp], #4
    95b4:	1fff8d48 	.word	0x1fff8d48
    95b8:	1fff8d70 	.word	0x1fff8d70

000095bc <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    95bc:	b500      	push	{lr}
    95be:	b085      	sub	sp, #20
    95c0:	9001      	str	r0, [sp, #4]
    95c2:	4608      	mov	r0, r1
    95c4:	4611      	mov	r1, r2
    95c6:	461a      	mov	r2, r3
    95c8:	4603      	mov	r3, r0
    95ca:	f8ad 3002 	strh.w	r3, [sp, #2]
    95ce:	460b      	mov	r3, r1
    95d0:	f88d 3001 	strb.w	r3, [sp, #1]
    95d4:	4613      	mov	r3, r2
    95d6:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    95da:	2300      	movs	r3, #0
    95dc:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    95e0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    95e4:	4a26      	ldr	r2, [pc, #152]	; (9680 <Adc_StopSwGroupConversion+0xc4>)
    95e6:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    95ea:	b29a      	uxth	r2, r3
    95ec:	9b01      	ldr	r3, [sp, #4]
    95ee:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    95f0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    95f4:	4a22      	ldr	r2, [pc, #136]	; (9680 <Adc_StopSwGroupConversion+0xc4>)
    95f6:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    95fa:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    95fe:	2300      	movs	r3, #0
    9600:	f8ad 300c 	strh.w	r3, [sp, #12]
    9604:	e02f      	b.n	9666 <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    9606:	f89d 2001 	ldrb.w	r2, [sp, #1]
    960a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    960e:	491c      	ldr	r1, [pc, #112]	; (9680 <Adc_StopSwGroupConversion+0xc4>)
    9610:	0092      	lsls	r2, r2, #2
    9612:	4413      	add	r3, r2
    9614:	005b      	lsls	r3, r3, #1
    9616:	440b      	add	r3, r1
    9618:	885b      	ldrh	r3, [r3, #2]
    961a:	b29b      	uxth	r3, r3
    961c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    9620:	429a      	cmp	r2, r3
    9622:	d11b      	bne.n	965c <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    9624:	9b01      	ldr	r3, [sp, #4]
    9626:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    962a:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    962c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9630:	2b00      	cmp	r3, #0
    9632:	d10b      	bne.n	964c <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    9634:	f89d 2000 	ldrb.w	r2, [sp]
    9638:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    963c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9640:	4618      	mov	r0, r3
    9642:	f002 fd33 	bl	c0ac <Adc_Ipw_StopCurrentConversion>
    9646:	4603      	mov	r3, r0
    9648:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    964c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9650:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9654:	4611      	mov	r1, r2
    9656:	4618      	mov	r0, r3
    9658:	f001 fe70 	bl	b33c <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    965c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9660:	3301      	adds	r3, #1
    9662:	f8ad 300c 	strh.w	r3, [sp, #12]
    9666:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    966a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    966e:	429a      	cmp	r2, r3
    9670:	d3c9      	bcc.n	9606 <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    9672:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9676:	4618      	mov	r0, r3
    9678:	b005      	add	sp, #20
    967a:	f85d fb04 	ldr.w	pc, [sp], #4
    967e:	bf00      	nop
    9680:	1fff8d70 	.word	0x1fff8d70

00009684 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    9684:	b500      	push	{lr}
    9686:	b089      	sub	sp, #36	; 0x24
    9688:	4603      	mov	r3, r0
    968a:	f8ad 3006 	strh.w	r3, [sp, #6]
    968e:	460b      	mov	r3, r1
    9690:	f88d 3005 	strb.w	r3, [sp, #5]
    9694:	4613      	mov	r3, r2
    9696:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    969a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    969e:	4a4f      	ldr	r2, [pc, #316]	; (97dc <Adc_UpdateStatusStopConversion+0x158>)
    96a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96a4:	68da      	ldr	r2, [r3, #12]
    96a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    96aa:	005b      	lsls	r3, r3, #1
    96ac:	4413      	add	r3, r2
    96ae:	881b      	ldrh	r3, [r3, #0]
    96b0:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    96b4:	2300      	movs	r3, #0
    96b6:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    96ba:	2300      	movs	r3, #0
    96bc:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    96c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    96c4:	4a45      	ldr	r2, [pc, #276]	; (97dc <Adc_UpdateStatusStopConversion+0x158>)
    96c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ca:	685a      	ldr	r2, [r3, #4]
    96cc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    96d0:	2134      	movs	r1, #52	; 0x34
    96d2:	fb01 f303 	mul.w	r3, r1, r3
    96d6:	4413      	add	r3, r2
    96d8:	689b      	ldr	r3, [r3, #8]
    96da:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    96dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    96e0:	4a3e      	ldr	r2, [pc, #248]	; (97dc <Adc_UpdateStatusStopConversion+0x158>)
    96e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96e6:	685a      	ldr	r2, [r3, #4]
    96e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    96ec:	2134      	movs	r1, #52	; 0x34
    96ee:	fb01 f303 	mul.w	r3, r1, r3
    96f2:	4413      	add	r3, r2
    96f4:	685b      	ldr	r3, [r3, #4]
    96f6:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    96f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    96fc:	4a37      	ldr	r2, [pc, #220]	; (97dc <Adc_UpdateStatusStopConversion+0x158>)
    96fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9702:	685a      	ldr	r2, [r3, #4]
    9704:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9708:	2134      	movs	r1, #52	; 0x34
    970a:	fb01 f303 	mul.w	r3, r1, r3
    970e:	4413      	add	r3, r2
    9710:	699b      	ldr	r3, [r3, #24]
    9712:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    9714:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9718:	4931      	ldr	r1, [pc, #196]	; (97e0 <Adc_UpdateStatusStopConversion+0x15c>)
    971a:	4613      	mov	r3, r2
    971c:	009b      	lsls	r3, r3, #2
    971e:	4413      	add	r3, r2
    9720:	009b      	lsls	r3, r3, #2
    9722:	440b      	add	r3, r1
    9724:	681b      	ldr	r3, [r3, #0]
    9726:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    9728:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    972c:	492c      	ldr	r1, [pc, #176]	; (97e0 <Adc_UpdateStatusStopConversion+0x15c>)
    972e:	4613      	mov	r3, r2
    9730:	009b      	lsls	r3, r3, #2
    9732:	4413      	add	r3, r2
    9734:	009b      	lsls	r3, r3, #2
    9736:	440b      	add	r3, r1
    9738:	3308      	adds	r3, #8
    973a:	2200      	movs	r2, #0
    973c:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    973e:	9b06      	ldr	r3, [sp, #24]
    9740:	2b00      	cmp	r3, #0
    9742:	d005      	beq.n	9750 <Adc_UpdateStatusStopConversion+0xcc>
    9744:	9b05      	ldr	r3, [sp, #20]
    9746:	2b01      	cmp	r3, #1
    9748:	d110      	bne.n	976c <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    974a:	9b04      	ldr	r3, [sp, #16]
    974c:	2b00      	cmp	r3, #0
    974e:	d10d      	bne.n	976c <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    9750:	9b03      	ldr	r3, [sp, #12]
    9752:	2b03      	cmp	r3, #3
    9754:	d10a      	bne.n	976c <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9756:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    975a:	4921      	ldr	r1, [pc, #132]	; (97e0 <Adc_UpdateStatusStopConversion+0x15c>)
    975c:	4613      	mov	r3, r2
    975e:	009b      	lsls	r3, r3, #2
    9760:	4413      	add	r3, r2
    9762:	009b      	lsls	r3, r3, #2
    9764:	440b      	add	r3, r1
    9766:	2200      	movs	r2, #0
    9768:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    976a:	e032      	b.n	97d2 <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    976c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9770:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9774:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    9778:	f10d 000a 	add.w	r0, sp, #10
    977c:	f7ff ff1e 	bl	95bc <Adc_StopSwGroupConversion>
    9780:	4603      	mov	r3, r0
    9782:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9786:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    978a:	4915      	ldr	r1, [pc, #84]	; (97e0 <Adc_UpdateStatusStopConversion+0x15c>)
    978c:	4613      	mov	r3, r2
    978e:	009b      	lsls	r3, r3, #2
    9790:	4413      	add	r3, r2
    9792:	009b      	lsls	r3, r3, #2
    9794:	440b      	add	r3, r1
    9796:	2200      	movs	r2, #0
    9798:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    979a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    979e:	2b00      	cmp	r3, #0
    97a0:	d10f      	bne.n	97c2 <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    97a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    97a6:	4a0f      	ldr	r2, [pc, #60]	; (97e4 <Adc_UpdateStatusStopConversion+0x160>)
    97a8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    97ac:	b29b      	uxth	r3, r3
    97ae:	2b00      	cmp	r3, #0
    97b0:	d007      	beq.n	97c2 <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    97b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    97b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    97ba:	4611      	mov	r1, r2
    97bc:	4618      	mov	r0, r3
    97be:	f002 fbcb 	bl	bf58 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    97c2:	f89d 301d 	ldrb.w	r3, [sp, #29]
    97c6:	2b01      	cmp	r3, #1
    97c8:	d103      	bne.n	97d2 <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    97ca:	212b      	movs	r1, #43	; 0x2b
    97cc:	2003      	movs	r0, #3
    97ce:	f7ff f8a8 	bl	8922 <Adc_ReportDetRuntimeError>
}
    97d2:	bf00      	nop
    97d4:	b009      	add	sp, #36	; 0x24
    97d6:	f85d fb04 	ldr.w	pc, [sp], #4
    97da:	bf00      	nop
    97dc:	1fff8d40 	.word	0x1fff8d40
    97e0:	1fff8d48 	.word	0x1fff8d48
    97e4:	1fff8d70 	.word	0x1fff8d70

000097e8 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    97e8:	b500      	push	{lr}
    97ea:	b085      	sub	sp, #20
    97ec:	4603      	mov	r3, r0
    97ee:	f8ad 3006 	strh.w	r3, [sp, #6]
    97f2:	460b      	mov	r3, r1
    97f4:	f88d 3005 	strb.w	r3, [sp, #5]
    97f8:	4613      	mov	r3, r2
    97fa:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    97fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9802:	4a18      	ldr	r2, [pc, #96]	; (9864 <Adc_UpdateStatusReadGroup+0x7c>)
    9804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9808:	68da      	ldr	r2, [r3, #12]
    980a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    980e:	005b      	lsls	r3, r3, #1
    9810:	4413      	add	r3, r2
    9812:	881b      	ldrh	r3, [r3, #0]
    9814:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    9818:	f89d 3004 	ldrb.w	r3, [sp, #4]
    981c:	4a11      	ldr	r2, [pc, #68]	; (9864 <Adc_UpdateStatusReadGroup+0x7c>)
    981e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9822:	685a      	ldr	r2, [r3, #4]
    9824:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9828:	2134      	movs	r1, #52	; 0x34
    982a:	fb01 f303 	mul.w	r3, r1, r3
    982e:	4413      	add	r3, r2
    9830:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9834:	2b01      	cmp	r3, #1
    9836:	d109      	bne.n	984c <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    9838:	f89d 2004 	ldrb.w	r2, [sp, #4]
    983c:	f89d 1005 	ldrb.w	r1, [sp, #5]
    9840:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9844:	4618      	mov	r0, r3
    9846:	f000 f80f 	bl	9868 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    984a:	e007      	b.n	985c <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    984c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9850:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9854:	4611      	mov	r1, r2
    9856:	4618      	mov	r0, r3
    9858:	f000 f8e8 	bl	9a2c <Adc_UpdateStatusReadGroupInt>
}
    985c:	bf00      	nop
    985e:	b005      	add	sp, #20
    9860:	f85d fb04 	ldr.w	pc, [sp], #4
    9864:	1fff8d40 	.word	0x1fff8d40

00009868 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    9868:	b500      	push	{lr}
    986a:	b085      	sub	sp, #20
    986c:	4603      	mov	r3, r0
    986e:	f8ad 3006 	strh.w	r3, [sp, #6]
    9872:	460b      	mov	r3, r1
    9874:	f88d 3005 	strb.w	r3, [sp, #5]
    9878:	4613      	mov	r3, r2
    987a:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    987e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9882:	4a2c      	ldr	r2, [pc, #176]	; (9934 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    9884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9888:	68da      	ldr	r2, [r3, #12]
    988a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    988e:	005b      	lsls	r3, r3, #1
    9890:	4413      	add	r3, r2
    9892:	881b      	ldrh	r3, [r3, #0]
    9894:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    9898:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    989c:	4926      	ldr	r1, [pc, #152]	; (9938 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    989e:	4613      	mov	r3, r2
    98a0:	009b      	lsls	r3, r3, #2
    98a2:	4413      	add	r3, r2
    98a4:	009b      	lsls	r3, r3, #2
    98a6:	440b      	add	r3, r1
    98a8:	3304      	adds	r3, #4
    98aa:	2201      	movs	r2, #1
    98ac:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    98ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    98b2:	2b00      	cmp	r3, #0
    98b4:	d03a      	beq.n	992c <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    98b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    98ba:	4a1e      	ldr	r2, [pc, #120]	; (9934 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    98bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98c0:	685a      	ldr	r2, [r3, #4]
    98c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    98c6:	2134      	movs	r1, #52	; 0x34
    98c8:	fb01 f303 	mul.w	r3, r1, r3
    98cc:	4413      	add	r3, r2
    98ce:	689b      	ldr	r3, [r3, #8]
    98d0:	2b01      	cmp	r3, #1
    98d2:	d10a      	bne.n	98ea <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    98d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    98d8:	4917      	ldr	r1, [pc, #92]	; (9938 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    98da:	4613      	mov	r3, r2
    98dc:	009b      	lsls	r3, r3, #2
    98de:	4413      	add	r3, r2
    98e0:	009b      	lsls	r3, r3, #2
    98e2:	440b      	add	r3, r1
    98e4:	2201      	movs	r2, #1
    98e6:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    98e8:	e020      	b.n	992c <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    98ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
    98ee:	4a11      	ldr	r2, [pc, #68]	; (9934 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    98f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98f4:	685a      	ldr	r2, [r3, #4]
    98f6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    98fa:	2134      	movs	r1, #52	; 0x34
    98fc:	fb01 f303 	mul.w	r3, r1, r3
    9900:	4413      	add	r3, r2
    9902:	695b      	ldr	r3, [r3, #20]
    9904:	2b00      	cmp	r3, #0
    9906:	d111      	bne.n	992c <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9908:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    990c:	490a      	ldr	r1, [pc, #40]	; (9938 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    990e:	4613      	mov	r3, r2
    9910:	009b      	lsls	r3, r3, #2
    9912:	4413      	add	r3, r2
    9914:	009b      	lsls	r3, r3, #2
    9916:	440b      	add	r3, r1
    9918:	2200      	movs	r2, #0
    991a:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    991c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9920:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9924:	4611      	mov	r1, r2
    9926:	4618      	mov	r0, r3
    9928:	f000 f808 	bl	993c <Adc_UpdateSwQueueIndexNoInt>
}
    992c:	bf00      	nop
    992e:	b005      	add	sp, #20
    9930:	f85d fb04 	ldr.w	pc, [sp], #4
    9934:	1fff8d40 	.word	0x1fff8d40
    9938:	1fff8d48 	.word	0x1fff8d48

0000993c <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    993c:	b500      	push	{lr}
    993e:	b085      	sub	sp, #20
    9940:	4603      	mov	r3, r0
    9942:	460a      	mov	r2, r1
    9944:	f8ad 3006 	strh.w	r3, [sp, #6]
    9948:	4613      	mov	r3, r2
    994a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    994e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9952:	4a34      	ldr	r2, [pc, #208]	; (9a24 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    9954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9958:	68da      	ldr	r2, [r3, #12]
    995a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    995e:	005b      	lsls	r3, r3, #1
    9960:	4413      	add	r3, r2
    9962:	881b      	ldrh	r3, [r3, #0]
    9964:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    9968:	f89d 3005 	ldrb.w	r3, [sp, #5]
    996c:	4a2d      	ldr	r2, [pc, #180]	; (9a24 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    996e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9972:	685a      	ldr	r2, [r3, #4]
    9974:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9978:	2134      	movs	r1, #52	; 0x34
    997a:	fb01 f303 	mul.w	r3, r1, r3
    997e:	4413      	add	r3, r2
    9980:	789b      	ldrb	r3, [r3, #2]
    9982:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9986:	f89d 300b 	ldrb.w	r3, [sp, #11]
    998a:	4a27      	ldr	r2, [pc, #156]	; (9a28 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    998c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9990:	b29b      	uxth	r3, r3
    9992:	2b00      	cmp	r3, #0
    9994:	d041      	beq.n	9a1a <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    9996:	f89d 300b 	ldrb.w	r3, [sp, #11]
    999a:	4a23      	ldr	r2, [pc, #140]	; (9a28 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    999c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    99a0:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    99a4:	2300      	movs	r3, #0
    99a6:	f8ad 300e 	strh.w	r3, [sp, #14]
    99aa:	e01c      	b.n	99e6 <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    99ac:	f89d 200b 	ldrb.w	r2, [sp, #11]
    99b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    99b4:	491c      	ldr	r1, [pc, #112]	; (9a28 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    99b6:	0092      	lsls	r2, r2, #2
    99b8:	4413      	add	r3, r2
    99ba:	005b      	lsls	r3, r3, #1
    99bc:	440b      	add	r3, r1
    99be:	885b      	ldrh	r3, [r3, #2]
    99c0:	b29b      	uxth	r3, r3
    99c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    99c6:	429a      	cmp	r2, r3
    99c8:	d108      	bne.n	99dc <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    99ca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    99ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    99d2:	4611      	mov	r1, r2
    99d4:	4618      	mov	r0, r3
    99d6:	f001 fcb1 	bl	b33c <Adc_Ipw_RemoveFromQueue>
                    break;
    99da:	e00a      	b.n	99f2 <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    99dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    99e0:	3301      	adds	r3, #1
    99e2:	f8ad 300e 	strh.w	r3, [sp, #14]
    99e6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    99ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    99ee:	429a      	cmp	r2, r3
    99f0:	d3dc      	bcc.n	99ac <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    99f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    99f6:	2b00      	cmp	r3, #0
    99f8:	d10f      	bne.n	9a1a <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    99fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    99fe:	4a0a      	ldr	r2, [pc, #40]	; (9a28 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    9a00:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9a04:	b29b      	uxth	r3, r3
    9a06:	2b00      	cmp	r3, #0
    9a08:	d007      	beq.n	9a1a <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    9a0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9a0e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a12:	4611      	mov	r1, r2
    9a14:	4618      	mov	r0, r3
    9a16:	f002 fa9f 	bl	bf58 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    9a1a:	bf00      	nop
    9a1c:	b005      	add	sp, #20
    9a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    9a22:	bf00      	nop
    9a24:	1fff8d40 	.word	0x1fff8d40
    9a28:	1fff8d70 	.word	0x1fff8d70

00009a2c <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    9a2c:	b084      	sub	sp, #16
    9a2e:	4603      	mov	r3, r0
    9a30:	460a      	mov	r2, r1
    9a32:	f8ad 3006 	strh.w	r3, [sp, #6]
    9a36:	4613      	mov	r3, r2
    9a38:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9a3c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9a40:	4a47      	ldr	r2, [pc, #284]	; (9b60 <Adc_UpdateStatusReadGroupInt+0x134>)
    9a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a46:	68da      	ldr	r2, [r3, #12]
    9a48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9a4c:	005b      	lsls	r3, r3, #1
    9a4e:	4413      	add	r3, r2
    9a50:	881b      	ldrh	r3, [r3, #0]
    9a52:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9a56:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9a5a:	4942      	ldr	r1, [pc, #264]	; (9b64 <Adc_UpdateStatusReadGroupInt+0x138>)
    9a5c:	4613      	mov	r3, r2
    9a5e:	009b      	lsls	r3, r3, #2
    9a60:	4413      	add	r3, r2
    9a62:	009b      	lsls	r3, r3, #2
    9a64:	440b      	add	r3, r1
    9a66:	681b      	ldr	r3, [r3, #0]
    9a68:	2b02      	cmp	r3, #2
    9a6a:	d10a      	bne.n	9a82 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9a6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9a70:	493c      	ldr	r1, [pc, #240]	; (9b64 <Adc_UpdateStatusReadGroupInt+0x138>)
    9a72:	4613      	mov	r3, r2
    9a74:	009b      	lsls	r3, r3, #2
    9a76:	4413      	add	r3, r2
    9a78:	009b      	lsls	r3, r3, #2
    9a7a:	440b      	add	r3, r1
    9a7c:	2201      	movs	r2, #1
    9a7e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    9a80:	e06a      	b.n	9b58 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9a82:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9a86:	4937      	ldr	r1, [pc, #220]	; (9b64 <Adc_UpdateStatusReadGroupInt+0x138>)
    9a88:	4613      	mov	r3, r2
    9a8a:	009b      	lsls	r3, r3, #2
    9a8c:	4413      	add	r3, r2
    9a8e:	009b      	lsls	r3, r3, #2
    9a90:	440b      	add	r3, r1
    9a92:	681b      	ldr	r3, [r3, #0]
    9a94:	2b03      	cmp	r3, #3
    9a96:	d15f      	bne.n	9b58 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    9a98:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9a9c:	4a30      	ldr	r2, [pc, #192]	; (9b60 <Adc_UpdateStatusReadGroupInt+0x134>)
    9a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9aa2:	685a      	ldr	r2, [r3, #4]
    9aa4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9aa8:	2134      	movs	r1, #52	; 0x34
    9aaa:	fb01 f303 	mul.w	r3, r1, r3
    9aae:	4413      	add	r3, r2
    9ab0:	695b      	ldr	r3, [r3, #20]
    9ab2:	2b00      	cmp	r3, #0
    9ab4:	d150      	bne.n	9b58 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    9ab6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9aba:	4a29      	ldr	r2, [pc, #164]	; (9b60 <Adc_UpdateStatusReadGroupInt+0x134>)
    9abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ac0:	685a      	ldr	r2, [r3, #4]
    9ac2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9ac6:	2134      	movs	r1, #52	; 0x34
    9ac8:	fb01 f303 	mul.w	r3, r1, r3
    9acc:	4413      	add	r3, r2
    9ace:	689b      	ldr	r3, [r3, #8]
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	d02c      	beq.n	9b2e <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9ad4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9ad8:	4a21      	ldr	r2, [pc, #132]	; (9b60 <Adc_UpdateStatusReadGroupInt+0x134>)
    9ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ade:	685a      	ldr	r2, [r3, #4]
    9ae0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9ae4:	2134      	movs	r1, #52	; 0x34
    9ae6:	fb01 f303 	mul.w	r3, r1, r3
    9aea:	4413      	add	r3, r2
    9aec:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    9aee:	2b01      	cmp	r3, #1
    9af0:	d128      	bne.n	9b44 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9af2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9af6:	4a1a      	ldr	r2, [pc, #104]	; (9b60 <Adc_UpdateStatusReadGroupInt+0x134>)
    9af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9afc:	685a      	ldr	r2, [r3, #4]
    9afe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b02:	2134      	movs	r1, #52	; 0x34
    9b04:	fb01 f303 	mul.w	r3, r1, r3
    9b08:	4413      	add	r3, r2
    9b0a:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9b0c:	2b01      	cmp	r3, #1
    9b0e:	d119      	bne.n	9b44 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    9b10:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9b14:	4a12      	ldr	r2, [pc, #72]	; (9b60 <Adc_UpdateStatusReadGroupInt+0x134>)
    9b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b1a:	685a      	ldr	r2, [r3, #4]
    9b1c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b20:	2134      	movs	r1, #52	; 0x34
    9b22:	fb01 f303 	mul.w	r3, r1, r3
    9b26:	4413      	add	r3, r2
    9b28:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	d10a      	bne.n	9b44 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9b2e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9b32:	490c      	ldr	r1, [pc, #48]	; (9b64 <Adc_UpdateStatusReadGroupInt+0x138>)
    9b34:	4613      	mov	r3, r2
    9b36:	009b      	lsls	r3, r3, #2
    9b38:	4413      	add	r3, r2
    9b3a:	009b      	lsls	r3, r3, #2
    9b3c:	440b      	add	r3, r1
    9b3e:	2200      	movs	r2, #0
    9b40:	601a      	str	r2, [r3, #0]
}
    9b42:	e009      	b.n	9b58 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9b44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9b48:	4906      	ldr	r1, [pc, #24]	; (9b64 <Adc_UpdateStatusReadGroupInt+0x138>)
    9b4a:	4613      	mov	r3, r2
    9b4c:	009b      	lsls	r3, r3, #2
    9b4e:	4413      	add	r3, r2
    9b50:	009b      	lsls	r3, r3, #2
    9b52:	440b      	add	r3, r1
    9b54:	2201      	movs	r2, #1
    9b56:	601a      	str	r2, [r3, #0]
}
    9b58:	bf00      	nop
    9b5a:	b004      	add	sp, #16
    9b5c:	4770      	bx	lr
    9b5e:	bf00      	nop
    9b60:	1fff8d40 	.word	0x1fff8d40
    9b64:	1fff8d48 	.word	0x1fff8d48

00009b68 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    9b68:	b084      	sub	sp, #16
    9b6a:	4603      	mov	r3, r0
    9b6c:	460a      	mov	r2, r1
    9b6e:	f8ad 3006 	strh.w	r3, [sp, #6]
    9b72:	4613      	mov	r3, r2
    9b74:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9b78:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9b7c:	4a46      	ldr	r2, [pc, #280]	; (9c98 <Adc_UpdateStatusAfterGetStream+0x130>)
    9b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b82:	68da      	ldr	r2, [r3, #12]
    9b84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9b88:	005b      	lsls	r3, r3, #1
    9b8a:	4413      	add	r3, r2
    9b8c:	881b      	ldrh	r3, [r3, #0]
    9b8e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9b92:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9b96:	4941      	ldr	r1, [pc, #260]	; (9c9c <Adc_UpdateStatusAfterGetStream+0x134>)
    9b98:	4613      	mov	r3, r2
    9b9a:	009b      	lsls	r3, r3, #2
    9b9c:	4413      	add	r3, r2
    9b9e:	009b      	lsls	r3, r3, #2
    9ba0:	440b      	add	r3, r1
    9ba2:	681b      	ldr	r3, [r3, #0]
    9ba4:	2b02      	cmp	r3, #2
    9ba6:	d109      	bne.n	9bbc <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9ba8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9bac:	493b      	ldr	r1, [pc, #236]	; (9c9c <Adc_UpdateStatusAfterGetStream+0x134>)
    9bae:	4613      	mov	r3, r2
    9bb0:	009b      	lsls	r3, r3, #2
    9bb2:	4413      	add	r3, r2
    9bb4:	009b      	lsls	r3, r3, #2
    9bb6:	440b      	add	r3, r1
    9bb8:	2201      	movs	r2, #1
    9bba:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9bbc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9bc0:	4936      	ldr	r1, [pc, #216]	; (9c9c <Adc_UpdateStatusAfterGetStream+0x134>)
    9bc2:	4613      	mov	r3, r2
    9bc4:	009b      	lsls	r3, r3, #2
    9bc6:	4413      	add	r3, r2
    9bc8:	009b      	lsls	r3, r3, #2
    9bca:	440b      	add	r3, r1
    9bcc:	681b      	ldr	r3, [r3, #0]
    9bce:	2b03      	cmp	r3, #3
    9bd0:	d15f      	bne.n	9c92 <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    9bd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9bd6:	4a30      	ldr	r2, [pc, #192]	; (9c98 <Adc_UpdateStatusAfterGetStream+0x130>)
    9bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bdc:	685a      	ldr	r2, [r3, #4]
    9bde:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9be2:	2134      	movs	r1, #52	; 0x34
    9be4:	fb01 f303 	mul.w	r3, r1, r3
    9be8:	4413      	add	r3, r2
    9bea:	695b      	ldr	r3, [r3, #20]
    9bec:	2b00      	cmp	r3, #0
    9bee:	d150      	bne.n	9c92 <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    9bf0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9bf4:	4a28      	ldr	r2, [pc, #160]	; (9c98 <Adc_UpdateStatusAfterGetStream+0x130>)
    9bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bfa:	685a      	ldr	r2, [r3, #4]
    9bfc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c00:	2134      	movs	r1, #52	; 0x34
    9c02:	fb01 f303 	mul.w	r3, r1, r3
    9c06:	4413      	add	r3, r2
    9c08:	689b      	ldr	r3, [r3, #8]
    9c0a:	2b00      	cmp	r3, #0
    9c0c:	d02c      	beq.n	9c68 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9c0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9c12:	4a21      	ldr	r2, [pc, #132]	; (9c98 <Adc_UpdateStatusAfterGetStream+0x130>)
    9c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c18:	685a      	ldr	r2, [r3, #4]
    9c1a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c1e:	2134      	movs	r1, #52	; 0x34
    9c20:	fb01 f303 	mul.w	r3, r1, r3
    9c24:	4413      	add	r3, r2
    9c26:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    9c28:	2b01      	cmp	r3, #1
    9c2a:	d128      	bne.n	9c7e <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9c2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9c30:	4a19      	ldr	r2, [pc, #100]	; (9c98 <Adc_UpdateStatusAfterGetStream+0x130>)
    9c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c36:	685a      	ldr	r2, [r3, #4]
    9c38:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c3c:	2134      	movs	r1, #52	; 0x34
    9c3e:	fb01 f303 	mul.w	r3, r1, r3
    9c42:	4413      	add	r3, r2
    9c44:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9c46:	2b01      	cmp	r3, #1
    9c48:	d119      	bne.n	9c7e <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    9c4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9c4e:	4a12      	ldr	r2, [pc, #72]	; (9c98 <Adc_UpdateStatusAfterGetStream+0x130>)
    9c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c54:	685a      	ldr	r2, [r3, #4]
    9c56:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c5a:	2134      	movs	r1, #52	; 0x34
    9c5c:	fb01 f303 	mul.w	r3, r1, r3
    9c60:	4413      	add	r3, r2
    9c62:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9c64:	2b00      	cmp	r3, #0
    9c66:	d10a      	bne.n	9c7e <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9c68:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9c6c:	490b      	ldr	r1, [pc, #44]	; (9c9c <Adc_UpdateStatusAfterGetStream+0x134>)
    9c6e:	4613      	mov	r3, r2
    9c70:	009b      	lsls	r3, r3, #2
    9c72:	4413      	add	r3, r2
    9c74:	009b      	lsls	r3, r3, #2
    9c76:	440b      	add	r3, r1
    9c78:	2200      	movs	r2, #0
    9c7a:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    9c7c:	e009      	b.n	9c92 <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9c7e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9c82:	4906      	ldr	r1, [pc, #24]	; (9c9c <Adc_UpdateStatusAfterGetStream+0x134>)
    9c84:	4613      	mov	r3, r2
    9c86:	009b      	lsls	r3, r3, #2
    9c88:	4413      	add	r3, r2
    9c8a:	009b      	lsls	r3, r3, #2
    9c8c:	440b      	add	r3, r1
    9c8e:	2201      	movs	r2, #1
    9c90:	601a      	str	r2, [r3, #0]
}
    9c92:	bf00      	nop
    9c94:	b004      	add	sp, #16
    9c96:	4770      	bx	lr
    9c98:	1fff8d40 	.word	0x1fff8d40
    9c9c:	1fff8d48 	.word	0x1fff8d48

00009ca0 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    9ca0:	b500      	push	{lr}
    9ca2:	b085      	sub	sp, #20
    9ca4:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    9ca6:	f002 fb43 	bl	c330 <Adc_GetCoreID>
    9caa:	4603      	mov	r3, r0
    9cac:	f88d 300b 	strb.w	r3, [sp, #11]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    9cb0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9cb4:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        ValidStatus = Adc_ValidateGloballCall(ADC_INIT_ID, CoreId);
    9cb8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9cbc:	b2db      	uxtb	r3, r3
    9cbe:	4619      	mov	r1, r3
    9cc0:	2000      	movs	r0, #0
    9cc2:	f7fe fe5e 	bl	8982 <Adc_ValidateGloballCall>
    9cc6:	4603      	mov	r3, r0
    9cc8:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_OK == ValidStatus)
    9ccc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9cd0:	2b00      	cmp	r3, #0
    9cd2:	d14c      	bne.n	9d6e <Adc_Init+0xce>
        {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */

#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON)
            ValidStatus = Adc_ValidatePtrInit(ConfigPtr);
    9cd4:	9801      	ldr	r0, [sp, #4]
    9cd6:	f7fe fe8d 	bl	89f4 <Adc_ValidatePtrInit>
    9cda:	4603      	mov	r3, r0
    9cdc:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_OK == ValidStatus)
    9ce0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ce4:	2b00      	cmp	r3, #0
    9ce6:	d142      	bne.n	9d6e <Adc_Init+0xce>
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    9ce8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9cec:	b2db      	uxtb	r3, r3
    9cee:	4619      	mov	r1, r3
    9cf0:	9801      	ldr	r0, [sp, #4]
    9cf2:	f7ff fb9b 	bl	942c <Adc_CheckCurrentCoreId>
    9cf6:	4603      	mov	r3, r0
    9cf8:	f88d 300d 	strb.w	r3, [sp, #13]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    9cfc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9d00:	2b00      	cmp	r3, #0
    9d02:	d12d      	bne.n	9d60 <Adc_Init+0xc0>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    9d04:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d08:	b2db      	uxtb	r3, r3
    9d0a:	4619      	mov	r1, r3
    9d0c:	4a20      	ldr	r2, [pc, #128]	; (9d90 <Adc_Init+0xf0>)
    9d0e:	9b01      	ldr	r3, [sp, #4]
    9d10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    9d14:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d18:	b2db      	uxtb	r3, r3
    9d1a:	4618      	mov	r0, r3
    9d1c:	f7ff fb36 	bl	938c <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    9d20:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d24:	b2db      	uxtb	r3, r3
    9d26:	4618      	mov	r0, r3
    9d28:	f7ff fac6 	bl	92b8 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    9d2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d30:	b2db      	uxtb	r3, r3
    9d32:	461a      	mov	r2, r3
    9d34:	4b16      	ldr	r3, [pc, #88]	; (9d90 <Adc_Init+0xf0>)
    9d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9d3a:	681b      	ldr	r3, [r3, #0]
    9d3c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9d40:	4611      	mov	r1, r2
    9d42:	4618      	mov	r0, r3
    9d44:	f002 f848 	bl	bdd8 <Adc_Ipw_Init>
    9d48:	4603      	mov	r3, r0
    9d4a:	f88d 300c 	strb.w	r3, [sp, #12]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    9d4e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9d52:	2b01      	cmp	r3, #1
    9d54:	d10b      	bne.n	9d6e <Adc_Init+0xce>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    9d56:	212b      	movs	r1, #43	; 0x2b
    9d58:	2000      	movs	r0, #0
    9d5a:	f7fe fde2 	bl	8922 <Adc_ReportDetRuntimeError>
    9d5e:	e006      	b.n	9d6e <Adc_Init+0xce>
#endif /* ((ADC_ENABLE_TEMPSENSE_API == STD_ON) && (ADC_POWER_ON_TEMPSENSE == STD_ON)) */
                }
#if (ADC_DEV_ERROR_DETECT == STD_ON)
                else
                {
                    ValidStatus = (Std_ReturnType)E_NOT_OK;
    9d60:	2301      	movs	r3, #1
    9d62:	f88d 300f 	strb.w	r3, [sp, #15]
                    /* CPR_RTD_00420.adc */
                    Adc_ReportDetError((uint8)ADC_INIT_ID, (uint8)ADC_E_PARAM_CONFIG);
    9d66:	210e      	movs	r1, #14
    9d68:	2000      	movs	r0, #0
    9d6a:	f7fe fdc5 	bl	88f8 <Adc_ReportDetError>
            }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        }
        if ((Std_ReturnType)E_OK == ValidStatus)
    9d6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d72:	2b00      	cmp	r3, #0
    9d74:	d108      	bne.n	9d88 <Adc_Init+0xe8>
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
    9d76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d7a:	b2da      	uxtb	r2, r3
    9d7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d80:	2100      	movs	r1, #0
    9d82:	4618      	mov	r0, r3
    9d84:	f7fe ff88 	bl	8c98 <Adc_EndValidateGloballCall>
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    9d88:	bf00      	nop
    9d8a:	b005      	add	sp, #20
    9d8c:	f85d fb04 	ldr.w	pc, [sp], #4
    9d90:	1fff8d40 	.word	0x1fff8d40

00009d94 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    9d94:	b500      	push	{lr}
    9d96:	b085      	sub	sp, #20
    9d98:	4603      	mov	r3, r0
    9d9a:	9100      	str	r1, [sp, #0]
    9d9c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    9da0:	2301      	movs	r3, #1
    9da2:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_GroupType GroupIndex;
    const Adc_GroupConfigurationType * GroupPtr = NULL_PTR;
#endif /* ADC_DMA_SUPPORTED */
#if ((ADC_VALIDATE_CALL_AND_GROUP == STD_ON) || (defined(ADC_DMA_SUPPORTED)))
    volatile uint8 CoreId;
    CoreId = Adc_GetCoreID();
    9da6:	f002 fac3 	bl	c330 <Adc_GetCoreID>
    9daa:	4603      	mov	r3, r0
    9dac:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* ((ADC_VALIDATE_CALL_AND_GROUP == STD_ON) || (defined(ADC_DMA_SUPPORTED))) */
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_SETUPRESULTBUFFER_ID, Group, CoreId))
    9db0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9db4:	b2da      	uxtb	r2, r3
    9db6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9dba:	4619      	mov	r1, r3
    9dbc:	200c      	movs	r0, #12
    9dbe:	f7ff f9a7 	bl	9110 <Adc_ValidateCallAndGroup>
    9dc2:	4603      	mov	r3, r0
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	d11c      	bne.n	9e02 <Adc_SetupResultBuffer+0x6e>
           to avoid false detection of CWE AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK */
        GroupPtr = &Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex];
#endif /* ADC_DMA_SUPPORTED */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
    9dc8:	9900      	ldr	r1, [sp, #0]
    9dca:	200c      	movs	r0, #12
    9dcc:	f7fe fe28 	bl	8a20 <Adc_ValidatePtr>
    9dd0:	4603      	mov	r3, r0
    9dd2:	2b00      	cmp	r3, #0
    9dd4:	d115      	bne.n	9e02 <Adc_SetupResultBuffer+0x6e>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    9dd6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9dda:	4618      	mov	r0, r3
    9ddc:	f7ff f88a 	bl	8ef4 <Adc_ValidateSetupBufferNotBusy>
    9de0:	4603      	mov	r3, r0
    9de2:	2b00      	cmp	r3, #0
    9de4:	d10d      	bne.n	9e02 <Adc_SetupResultBuffer+0x6e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    9de6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9dea:	4909      	ldr	r1, [pc, #36]	; (9e10 <Adc_SetupResultBuffer+0x7c>)
    9dec:	4613      	mov	r3, r2
    9dee:	009b      	lsls	r3, r3, #2
    9df0:	4413      	add	r3, r2
    9df2:	009b      	lsls	r3, r3, #2
    9df4:	440b      	add	r3, r1
    9df6:	330c      	adds	r3, #12
    9df8:	9a00      	ldr	r2, [sp, #0]
    9dfa:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    9dfc:	2300      	movs	r3, #0
    9dfe:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    9e02:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9e06:	4618      	mov	r0, r3
    9e08:	b005      	add	sp, #20
    9e0a:	f85d fb04 	ldr.w	pc, [sp], #4
    9e0e:	bf00      	nop
    9e10:	1fff8d48 	.word	0x1fff8d48

00009e14 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    9e14:	b500      	push	{lr}
    9e16:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9e18:	2300      	movs	r3, #0
    9e1a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    9e1e:	f002 fa87 	bl	c330 <Adc_GetCoreID>
    9e22:	4603      	mov	r3, r0
    9e24:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    9e28:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9e2c:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    9e30:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9e34:	b2db      	uxtb	r3, r3
    9e36:	4619      	mov	r1, r3
    9e38:	2001      	movs	r0, #1
    9e3a:	f7fe fda2 	bl	8982 <Adc_ValidateGloballCall>
    9e3e:	4603      	mov	r3, r0
    9e40:	f88d 3006 	strb.w	r3, [sp, #6]
    if ((Std_ReturnType)E_OK == ValidStatus)
    9e44:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e48:	2b00      	cmp	r3, #0
    9e4a:	d160      	bne.n	9f0e <Adc_DeInit+0xfa>
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    9e4c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9e50:	b2db      	uxtb	r3, r3
    9e52:	461a      	mov	r2, r3
    9e54:	4b34      	ldr	r3, [pc, #208]	; (9f28 <Adc_DeInit+0x114>)
    9e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9e5a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9e5e:	4611      	mov	r1, r2
    9e60:	4618      	mov	r0, r3
    9e62:	f7ff fae3 	bl	942c <Adc_CheckCurrentCoreId>
    9e66:	4603      	mov	r3, r0
    9e68:	f88d 3004 	strb.w	r3, [sp, #4]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    9e6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9e70:	2b00      	cmp	r3, #0
    9e72:	d148      	bne.n	9f06 <Adc_DeInit+0xf2>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    9e74:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9e78:	b2db      	uxtb	r3, r3
    9e7a:	4618      	mov	r0, r3
    9e7c:	f7fe ffec 	bl	8e58 <Adc_ValidateDeInitNotBusy>
    9e80:	4603      	mov	r3, r0
    9e82:	f88d 3006 	strb.w	r3, [sp, #6]
            if ((Std_ReturnType)E_OK == ValidStatus)
    9e86:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e8a:	2b00      	cmp	r3, #0
    9e8c:	d13f      	bne.n	9f0e <Adc_DeInit+0xfa>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    9e8e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9e92:	b2db      	uxtb	r3, r3
    9e94:	4618      	mov	r0, r3
    9e96:	f001 ffe4 	bl	be62 <Adc_Ipw_DeInit>
    9e9a:	4603      	mov	r3, r0
    9e9c:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    9ea0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9ea4:	2b01      	cmp	r3, #1
    9ea6:	d103      	bne.n	9eb0 <Adc_DeInit+0x9c>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    9ea8:	212b      	movs	r1, #43	; 0x2b
    9eaa:	2001      	movs	r0, #1
    9eac:	f7fe fd39 	bl	8922 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    9eb0:	2300      	movs	r3, #0
    9eb2:	f88d 3007 	strb.w	r3, [sp, #7]
    9eb6:	e019      	b.n	9eec <Adc_DeInit+0xd8>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    9eb8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9ebc:	b2db      	uxtb	r3, r3
    9ebe:	461a      	mov	r2, r3
    9ec0:	4b19      	ldr	r3, [pc, #100]	; (9f28 <Adc_DeInit+0x114>)
    9ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9ec6:	681a      	ldr	r2, [r3, #0]
    9ec8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ecc:	4413      	add	r3, r2
    9ece:	7f9b      	ldrb	r3, [r3, #30]
    9ed0:	2b01      	cmp	r3, #1
    9ed2:	d106      	bne.n	9ee2 <Adc_DeInit+0xce>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    9ed4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ed8:	4a14      	ldr	r2, [pc, #80]	; (9f2c <Adc_DeInit+0x118>)
    9eda:	00db      	lsls	r3, r3, #3
    9edc:	4413      	add	r3, r2
    9ede:	2200      	movs	r2, #0
    9ee0:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    9ee2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ee6:	3301      	adds	r3, #1
    9ee8:	f88d 3007 	strb.w	r3, [sp, #7]
    9eec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ef0:	2b01      	cmp	r3, #1
    9ef2:	d9e1      	bls.n	9eb8 <Adc_DeInit+0xa4>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    9ef4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9ef8:	b2db      	uxtb	r3, r3
    9efa:	4619      	mov	r1, r3
    9efc:	4b0a      	ldr	r3, [pc, #40]	; (9f28 <Adc_DeInit+0x114>)
    9efe:	2200      	movs	r2, #0
    9f00:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    9f04:	e003      	b.n	9f0e <Adc_DeInit+0xfa>
        }
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
    9f06:	210e      	movs	r1, #14
    9f08:	2001      	movs	r0, #1
    9f0a:	f7fe fcf5 	bl	88f8 <Adc_ReportDetError>
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
    9f0e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9f12:	b2da      	uxtb	r2, r3
    9f14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f18:	2101      	movs	r1, #1
    9f1a:	4618      	mov	r0, r3
    9f1c:	f7fe febc 	bl	8c98 <Adc_EndValidateGloballCall>
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    9f20:	bf00      	nop
    9f22:	b003      	add	sp, #12
    9f24:	f85d fb04 	ldr.w	pc, [sp], #4
    9f28:	1fff8d40 	.word	0x1fff8d40
    9f2c:	1fff8d70 	.word	0x1fff8d70

00009f30 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    9f30:	b500      	push	{lr}
    9f32:	b085      	sub	sp, #20
    9f34:	4603      	mov	r3, r0
    9f36:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    9f3a:	2300      	movs	r3, #0
    9f3c:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9f40:	2300      	movs	r3, #0
    9f42:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    9f46:	f002 f9f3 	bl	c330 <Adc_GetCoreID>
    9f4a:	4603      	mov	r3, r0
    9f4c:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    9f50:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9f54:	b2da      	uxtb	r2, r3
    9f56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9f5a:	4619      	mov	r1, r3
    9f5c:	2002      	movs	r0, #2
    9f5e:	f7ff f8d7 	bl	9110 <Adc_ValidateCallAndGroup>
    9f62:	4603      	mov	r3, r0
    9f64:	2b00      	cmp	r3, #0
    9f66:	d141      	bne.n	9fec <Adc_StartGroupConversion+0xbc>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9f68:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9f6c:	b2db      	uxtb	r3, r3
    9f6e:	461a      	mov	r2, r3
    9f70:	4b20      	ldr	r3, [pc, #128]	; (9ff4 <Adc_StartGroupConversion+0xc4>)
    9f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f76:	68da      	ldr	r2, [r3, #12]
    9f78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9f7c:	005b      	lsls	r3, r3, #1
    9f7e:	4413      	add	r3, r2
    9f80:	881b      	ldrh	r3, [r3, #0]
    9f82:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    9f86:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9f8a:	b2da      	uxtb	r2, r3
    9f8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9f90:	4611      	mov	r1, r2
    9f92:	4618      	mov	r0, r3
    9f94:	f7fe ffd2 	bl	8f3c <Adc_ValidateStateStartGroupConvNotBusy>
    9f98:	4603      	mov	r3, r0
    9f9a:	2b00      	cmp	r3, #0
    9f9c:	d126      	bne.n	9fec <Adc_StartGroupConversion+0xbc>
        {
#if (ADC_VALIDATE_PARAMS == STD_ON)
            if ((Std_ReturnType)E_OK == Adc_ValidateExtraParams(ADC_STARTGROUPCONVERSION_ID,
    9f9e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9fa2:	b2db      	uxtb	r3, r3
    9fa4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9fa8:	2107      	movs	r1, #7
    9faa:	2002      	movs	r0, #2
    9fac:	f7fe fe1c 	bl	8be8 <Adc_ValidateExtraParams>
    9fb0:	4603      	mov	r3, r0
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	d11a      	bne.n	9fec <Adc_StartGroupConversion+0xbc>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    9fb6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9fba:	b2db      	uxtb	r3, r3
    9fbc:	461a      	mov	r2, r3
    9fbe:	4b0d      	ldr	r3, [pc, #52]	; (9ff4 <Adc_StartGroupConversion+0xc4>)
    9fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9fc4:	685a      	ldr	r2, [r3, #4]
    9fc6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9fca:	2134      	movs	r1, #52	; 0x34
    9fcc:	fb01 f303 	mul.w	r3, r1, r3
    9fd0:	4413      	add	r3, r2
    9fd2:	789b      	ldrb	r3, [r3, #2]
    9fd4:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    9fd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9fdc:	b2da      	uxtb	r2, r3
    9fde:	f89d 100d 	ldrb.w	r1, [sp, #13]
    9fe2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9fe6:	4618      	mov	r0, r3
    9fe8:	f7ff fa53 	bl	9492 <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    9fec:	bf00      	nop
    9fee:	b005      	add	sp, #20
    9ff0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ff4:	1fff8d40 	.word	0x1fff8d40

00009ff8 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    9ff8:	b500      	push	{lr}
    9ffa:	b085      	sub	sp, #20
    9ffc:	4603      	mov	r3, r0
    9ffe:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a002:	2300      	movs	r3, #0
    a004:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    a008:	2300      	movs	r3, #0
    a00a:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    a00e:	f002 f98f 	bl	c330 <Adc_GetCoreID>
    a012:	4603      	mov	r3, r0
    a014:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    a018:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a01c:	b2da      	uxtb	r2, r3
    a01e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a022:	4619      	mov	r1, r3
    a024:	2003      	movs	r0, #3
    a026:	f7ff f873 	bl	9110 <Adc_ValidateCallAndGroup>
    a02a:	4603      	mov	r3, r0
    a02c:	2b00      	cmp	r3, #0
    a02e:	d141      	bne.n	a0b4 <Adc_StopGroupConversion+0xbc>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    a030:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a034:	b2da      	uxtb	r2, r3
    a036:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a03a:	4619      	mov	r1, r3
    a03c:	2003      	movs	r0, #3
    a03e:	f7fe fff5 	bl	902c <Adc_ValidateStateNotIdle>
    a042:	4603      	mov	r3, r0
    a044:	2b00      	cmp	r3, #0
    a046:	d135      	bne.n	a0b4 <Adc_StopGroupConversion+0xbc>
        {
#if (ADC_VALIDATE_PARAMS == STD_ON)
            if ((Std_ReturnType)E_OK == Adc_ValidateExtraParams(ADC_STOPGROUPCONVERSION_ID,
    a048:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a04c:	b2db      	uxtb	r3, r3
    a04e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a052:	2102      	movs	r1, #2
    a054:	2003      	movs	r0, #3
    a056:	f7fe fdc7 	bl	8be8 <Adc_ValidateExtraParams>
    a05a:	4603      	mov	r3, r0
    a05c:	2b00      	cmp	r3, #0
    a05e:	d129      	bne.n	a0b4 <Adc_StopGroupConversion+0xbc>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a060:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a064:	b2db      	uxtb	r3, r3
    a066:	461a      	mov	r2, r3
    a068:	4b14      	ldr	r3, [pc, #80]	; (a0bc <Adc_StopGroupConversion+0xc4>)
    a06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a06e:	68da      	ldr	r2, [r3, #12]
    a070:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a074:	005b      	lsls	r3, r3, #1
    a076:	4413      	add	r3, r2
    a078:	881b      	ldrh	r3, [r3, #0]
    a07a:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    a07e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a082:	b2db      	uxtb	r3, r3
    a084:	461a      	mov	r2, r3
    a086:	4b0d      	ldr	r3, [pc, #52]	; (a0bc <Adc_StopGroupConversion+0xc4>)
    a088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a08c:	685a      	ldr	r2, [r3, #4]
    a08e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a092:	2134      	movs	r1, #52	; 0x34
    a094:	fb01 f303 	mul.w	r3, r1, r3
    a098:	4413      	add	r3, r2
    a09a:	789b      	ldrb	r3, [r3, #2]
    a09c:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    a0a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0a4:	b2da      	uxtb	r2, r3
    a0a6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a0aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a0ae:	4618      	mov	r0, r3
    a0b0:	f7ff fae8 	bl	9684 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    a0b4:	bf00      	nop
    a0b6:	b005      	add	sp, #20
    a0b8:	f85d fb04 	ldr.w	pc, [sp], #4
    a0bc:	1fff8d40 	.word	0x1fff8d40

0000a0c0 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    a0c0:	b500      	push	{lr}
    a0c2:	b085      	sub	sp, #20
    a0c4:	4603      	mov	r3, r0
    a0c6:	9100      	str	r1, [sp, #0]
    a0c8:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    a0cc:	2301      	movs	r3, #1
    a0ce:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    a0d2:	2301      	movs	r3, #1
    a0d4:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    a0d8:	f002 f92a 	bl	c330 <Adc_GetCoreID>
    a0dc:	4603      	mov	r3, r0
    a0de:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_VALUEREADGROUP_ID, Group, CoreId))
    a0e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a0e6:	b2da      	uxtb	r2, r3
    a0e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a0ec:	4619      	mov	r1, r3
    a0ee:	2004      	movs	r0, #4
    a0f0:	f7ff f80e 	bl	9110 <Adc_ValidateCallAndGroup>
    a0f4:	4603      	mov	r3, r0
    a0f6:	2b00      	cmp	r3, #0
    a0f8:	d134      	bne.n	a164 <Adc_ReadGroup+0xa4>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
    a0fa:	9900      	ldr	r1, [sp, #0]
    a0fc:	2004      	movs	r0, #4
    a0fe:	f7fe fc8f 	bl	8a20 <Adc_ValidatePtr>
    a102:	4603      	mov	r3, r0
    a104:	2b00      	cmp	r3, #0
    a106:	d12d      	bne.n	a164 <Adc_ReadGroup+0xa4>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    a108:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a10c:	b2da      	uxtb	r2, r3
    a10e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a112:	4619      	mov	r1, r3
    a114:	2004      	movs	r0, #4
    a116:	f7fe ff89 	bl	902c <Adc_ValidateStateNotIdle>
    a11a:	4603      	mov	r3, r0
    a11c:	2b00      	cmp	r3, #0
    a11e:	d121      	bne.n	a164 <Adc_ReadGroup+0xa4>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    a120:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a124:	b2db      	uxtb	r3, r3
    a126:	f10d 020d 	add.w	r2, sp, #13
    a12a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a12e:	9900      	ldr	r1, [sp, #0]
    a130:	f002 f857 	bl	c1e2 <Adc_Ipw_ReadGroup>
    a134:	4603      	mov	r3, r0
    a136:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    a13a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a13e:	2b00      	cmp	r3, #0
    a140:	d006      	beq.n	a150 <Adc_ReadGroup+0x90>
    a142:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a146:	f083 0301 	eor.w	r3, r3, #1
    a14a:	b2db      	uxtb	r3, r3
    a14c:	2b00      	cmp	r3, #0
    a14e:	d009      	beq.n	a164 <Adc_ReadGroup+0xa4>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    a150:	f89d 100d 	ldrb.w	r1, [sp, #13]
    a154:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a158:	b2da      	uxtb	r2, r3
    a15a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a15e:	4618      	mov	r0, r3
    a160:	f7ff fb42 	bl	97e8 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    a164:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a168:	4618      	mov	r0, r3
    a16a:	b005      	add	sp, #20
    a16c:	f85d fb04 	ldr.w	pc, [sp], #4

0000a170 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    a170:	b500      	push	{lr}
    a172:	b085      	sub	sp, #20
    a174:	4603      	mov	r3, r0
    a176:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    a17a:	2300      	movs	r3, #0
    a17c:	9303      	str	r3, [sp, #12]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    CoreId = Adc_GetCoreID();
    a17e:	f002 f8d7 	bl	c330 <Adc_GetCoreID>
    a182:	4603      	mov	r3, r0
    a184:	f88d 300b 	strb.w	r3, [sp, #11]
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    a188:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a18c:	b2da      	uxtb	r2, r3
    a18e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a192:	4619      	mov	r1, r3
    a194:	2009      	movs	r0, #9
    a196:	f7fe ffbb 	bl	9110 <Adc_ValidateCallAndGroup>
    a19a:	4603      	mov	r3, r0
    a19c:	2b00      	cmp	r3, #0
    a19e:	d109      	bne.n	a1b4 <Adc_GetGroupStatus+0x44>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    a1a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a1a4:	4906      	ldr	r1, [pc, #24]	; (a1c0 <Adc_GetGroupStatus+0x50>)
    a1a6:	4613      	mov	r3, r2
    a1a8:	009b      	lsls	r3, r3, #2
    a1aa:	4413      	add	r3, r2
    a1ac:	009b      	lsls	r3, r3, #2
    a1ae:	440b      	add	r3, r1
    a1b0:	681b      	ldr	r3, [r3, #0]
    a1b2:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    a1b4:	9b03      	ldr	r3, [sp, #12]
}
    a1b6:	4618      	mov	r0, r3
    a1b8:	b005      	add	sp, #20
    a1ba:	f85d fb04 	ldr.w	pc, [sp], #4
    a1be:	bf00      	nop
    a1c0:	1fff8d48 	.word	0x1fff8d48

0000a1c4 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    a1c4:	b500      	push	{lr}
    a1c6:	b085      	sub	sp, #20
    a1c8:	4603      	mov	r3, r0
    a1ca:	9100      	str	r1, [sp, #0]
    a1cc:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    a1d0:	f002 f8ae 	bl	c330 <Adc_GetCoreID>
    a1d4:	4603      	mov	r3, r0
    a1d6:	f88d 3008 	strb.w	r3, [sp, #8]
    Adc_GroupType GroupIndex = 0U;
    a1da:	2300      	movs	r3, #0
    a1dc:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    a1e0:	2300      	movs	r3, #0
    a1e2:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    a1e6:	2300      	movs	r3, #0
    a1e8:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    Adc_ChannelIndexType ChannelCount;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    Std_ReturnType ValidStatus = Adc_ValidateCallAndGroup(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId);
    a1ec:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a1f0:	b2da      	uxtb	r2, r3
    a1f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a1f6:	4619      	mov	r1, r3
    a1f8:	200b      	movs	r0, #11
    a1fa:	f7fe ff89 	bl	9110 <Adc_ValidateCallAndGroup>
    a1fe:	4603      	mov	r3, r0
    a200:	f88d 3009 	strb.w	r3, [sp, #9]
    if (ValidStatus == (Std_ReturnType)E_OK)
    a204:	f89d 3009 	ldrb.w	r3, [sp, #9]
    a208:	2b00      	cmp	r3, #0
    a20a:	f040 809f 	bne.w	a34c <Adc_GetStreamLastPointer+0x188>
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    a20e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a212:	b2da      	uxtb	r2, r3
    a214:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a218:	4619      	mov	r1, r3
    a21a:	200b      	movs	r0, #11
    a21c:	f7fe ff06 	bl	902c <Adc_ValidateStateNotIdle>
    a220:	4603      	mov	r3, r0
    a222:	2b00      	cmp	r3, #0
    a224:	f040 808e 	bne.w	a344 <Adc_GetStreamLastPointer+0x180>
        {
            *PtrToSamplePtr = NULL_PTR;
    a228:	9b00      	ldr	r3, [sp, #0]
    a22a:	2200      	movs	r2, #0
    a22c:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    a22e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a232:	494b      	ldr	r1, [pc, #300]	; (a360 <Adc_GetStreamLastPointer+0x19c>)
    a234:	4613      	mov	r3, r2
    a236:	009b      	lsls	r3, r3, #2
    a238:	4413      	add	r3, r2
    a23a:	009b      	lsls	r3, r3, #2
    a23c:	440b      	add	r3, r1
    a23e:	681b      	ldr	r3, [r3, #0]
    a240:	2b00      	cmp	r3, #0
    a242:	f000 8086 	beq.w	a352 <Adc_GetStreamLastPointer+0x18e>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    a246:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a24a:	4945      	ldr	r1, [pc, #276]	; (a360 <Adc_GetStreamLastPointer+0x19c>)
    a24c:	4613      	mov	r3, r2
    a24e:	009b      	lsls	r3, r3, #2
    a250:	4413      	add	r3, r2
    a252:	009b      	lsls	r3, r3, #2
    a254:	440b      	add	r3, r1
    a256:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    a258:	2b01      	cmp	r3, #1
    a25a:	d07a      	beq.n	a352 <Adc_GetStreamLastPointer+0x18e>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a25c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a260:	b2db      	uxtb	r3, r3
    a262:	461a      	mov	r2, r3
    a264:	4b3f      	ldr	r3, [pc, #252]	; (a364 <Adc_GetStreamLastPointer+0x1a0>)
    a266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a26a:	68da      	ldr	r2, [r3, #12]
    a26c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a270:	005b      	lsls	r3, r3, #1
    a272:	4413      	add	r3, r2
    a274:	881b      	ldrh	r3, [r3, #0]
    a276:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    a27a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a27e:	4938      	ldr	r1, [pc, #224]	; (a360 <Adc_GetStreamLastPointer+0x19c>)
    a280:	4613      	mov	r3, r2
    a282:	009b      	lsls	r3, r3, #2
    a284:	4413      	add	r3, r2
    a286:	009b      	lsls	r3, r3, #2
    a288:	440b      	add	r3, r1
    a28a:	3308      	adds	r3, #8
    a28c:	881b      	ldrh	r3, [r3, #0]
    a28e:	b29b      	uxth	r3, r3
    a290:	2b00      	cmp	r3, #0
    a292:	d123      	bne.n	a2dc <Adc_GetStreamLastPointer+0x118>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    a294:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a298:	b2db      	uxtb	r3, r3
    a29a:	461a      	mov	r2, r3
    a29c:	4b31      	ldr	r3, [pc, #196]	; (a364 <Adc_GetStreamLastPointer+0x1a0>)
    a29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a2a2:	685a      	ldr	r2, [r3, #4]
    a2a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    a2a8:	2134      	movs	r1, #52	; 0x34
    a2aa:	fb01 f303 	mul.w	r3, r1, r3
    a2ae:	4413      	add	r3, r2
    a2b0:	8b9b      	ldrh	r3, [r3, #28]
    a2b2:	3b01      	subs	r3, #1
    a2b4:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    a2b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a2bc:	b2db      	uxtb	r3, r3
    a2be:	461a      	mov	r2, r3
    a2c0:	4b28      	ldr	r3, [pc, #160]	; (a364 <Adc_GetStreamLastPointer+0x1a0>)
    a2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a2c6:	685a      	ldr	r2, [r3, #4]
    a2c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    a2cc:	2134      	movs	r1, #52	; 0x34
    a2ce:	fb01 f303 	mul.w	r3, r1, r3
    a2d2:	4413      	add	r3, r2
    a2d4:	8b9b      	ldrh	r3, [r3, #28]
    a2d6:	f8ad 300e 	strh.w	r3, [sp, #14]
    a2da:	e019      	b.n	a310 <Adc_GetStreamLastPointer+0x14c>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    a2dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a2e0:	491f      	ldr	r1, [pc, #124]	; (a360 <Adc_GetStreamLastPointer+0x19c>)
    a2e2:	4613      	mov	r3, r2
    a2e4:	009b      	lsls	r3, r3, #2
    a2e6:	4413      	add	r3, r2
    a2e8:	009b      	lsls	r3, r3, #2
    a2ea:	440b      	add	r3, r1
    a2ec:	3308      	adds	r3, #8
    a2ee:	881b      	ldrh	r3, [r3, #0]
    a2f0:	b29b      	uxth	r3, r3
    a2f2:	3b01      	subs	r3, #1
    a2f4:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    a2f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a2fc:	4918      	ldr	r1, [pc, #96]	; (a360 <Adc_GetStreamLastPointer+0x19c>)
    a2fe:	4613      	mov	r3, r2
    a300:	009b      	lsls	r3, r3, #2
    a302:	4413      	add	r3, r2
    a304:	009b      	lsls	r3, r3, #2
    a306:	440b      	add	r3, r1
    a308:	3308      	adds	r3, #8
    a30a:	881b      	ldrh	r3, [r3, #0]
    a30c:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    a310:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a314:	4912      	ldr	r1, [pc, #72]	; (a360 <Adc_GetStreamLastPointer+0x19c>)
    a316:	4613      	mov	r3, r2
    a318:	009b      	lsls	r3, r3, #2
    a31a:	4413      	add	r3, r2
    a31c:	009b      	lsls	r3, r3, #2
    a31e:	440b      	add	r3, r1
    a320:	330c      	adds	r3, #12
    a322:	681a      	ldr	r2, [r3, #0]
    a324:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a328:	005b      	lsls	r3, r3, #1
    a32a:	441a      	add	r2, r3
    a32c:	9b00      	ldr	r3, [sp, #0]
    a32e:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    a330:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a334:	b2da      	uxtb	r2, r3
    a336:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a33a:	4611      	mov	r1, r2
    a33c:	4618      	mov	r0, r3
    a33e:	f7ff fc13 	bl	9b68 <Adc_UpdateStatusAfterGetStream>
    a342:	e006      	b.n	a352 <Adc_GetStreamLastPointer+0x18e>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    a344:	9b00      	ldr	r3, [sp, #0]
    a346:	2200      	movs	r2, #0
    a348:	601a      	str	r2, [r3, #0]
    a34a:	e002      	b.n	a352 <Adc_GetStreamLastPointer+0x18e>
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
    else
    {
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    a34c:	9b00      	ldr	r3, [sp, #0]
    a34e:	2200      	movs	r2, #0
    a350:	601a      	str	r2, [r3, #0]
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    a352:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a356:	4618      	mov	r0, r3
    a358:	b005      	add	sp, #20
    a35a:	f85d fb04 	ldr.w	pc, [sp], #4
    a35e:	bf00      	nop
    a360:	1fff8d48 	.word	0x1fff8d48
    a364:	1fff8d40 	.word	0x1fff8d40

0000a368 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    a368:	b500      	push	{lr}
    a36a:	b083      	sub	sp, #12
    a36c:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    a36e:	9901      	ldr	r1, [sp, #4]
    a370:	200a      	movs	r0, #10
    a372:	f7fe fb55 	bl	8a20 <Adc_ValidatePtr>
    a376:	4603      	mov	r3, r0
    a378:	2b00      	cmp	r3, #0
    a37a:	d10e      	bne.n	a39a <Adc_GetVersionInfo+0x32>
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    a37c:	9b01      	ldr	r3, [sp, #4]
    a37e:	222b      	movs	r2, #43	; 0x2b
    a380:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    a382:	9b01      	ldr	r3, [sp, #4]
    a384:	227b      	movs	r2, #123	; 0x7b
    a386:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    a388:	9b01      	ldr	r3, [sp, #4]
    a38a:	2202      	movs	r2, #2
    a38c:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    a38e:	9b01      	ldr	r3, [sp, #4]
    a390:	2200      	movs	r2, #0
    a392:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    a394:	9b01      	ldr	r3, [sp, #4]
    a396:	2200      	movs	r2, #0
    a398:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    a39a:	bf00      	nop
    a39c:	b003      	add	sp, #12
    a39e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a3a2 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    a3a2:	b500      	push	{lr}
    a3a4:	b085      	sub	sp, #20
    a3a6:	4603      	mov	r3, r0
    a3a8:	9100      	str	r1, [sp, #0]
    a3aa:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    a3ae:	2300      	movs	r3, #0
    a3b0:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    a3b4:	f001 ffbc 	bl	c330 <Adc_GetCoreID>
    a3b8:	4603      	mov	r3, r0
    a3ba:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndUnit(ADC_CALIBRATE_ID, Unit, CoreId))
    a3be:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a3c2:	b2da      	uxtb	r2, r3
    a3c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3c8:	4619      	mov	r1, r3
    a3ca:	2029      	movs	r0, #41	; 0x29
    a3cc:	f7fe ff16 	bl	91fc <Adc_ValidateCallAndUnit>
    a3d0:	4603      	mov	r3, r0
    a3d2:	2b00      	cmp	r3, #0
    a3d4:	d134      	bne.n	a440 <Adc_Calibrate+0x9e>
    {
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
    a3d6:	9900      	ldr	r1, [sp, #0]
    a3d8:	2029      	movs	r0, #41	; 0x29
    a3da:	f7fe fb21 	bl	8a20 <Adc_ValidatePtr>
    a3de:	4603      	mov	r3, r0
    a3e0:	2b00      	cmp	r3, #0
    a3e2:	d12d      	bne.n	a440 <Adc_Calibrate+0x9e>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    a3e4:	9b00      	ldr	r3, [sp, #0]
    a3e6:	2201      	movs	r2, #1
    a3e8:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    a3ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3ee:	2129      	movs	r1, #41	; 0x29
    a3f0:	4618      	mov	r0, r3
    a3f2:	f7fe fc75 	bl	8ce0 <Adc_ValidateNotBusyNoQueue>
    a3f6:	4603      	mov	r3, r0
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	d115      	bne.n	a428 <Adc_Calibrate+0x86>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    a3fc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a400:	b2db      	uxtb	r3, r3
    a402:	4619      	mov	r1, r3
    a404:	2029      	movs	r0, #41	; 0x29
    a406:	f7fe fcd5 	bl	8db4 <Adc_ValidateCheckGroupNotConversion>
    a40a:	4603      	mov	r3, r0
    a40c:	2b00      	cmp	r3, #0
    a40e:	d10b      	bne.n	a428 <Adc_Calibrate+0x86>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    a410:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a414:	b2da      	uxtb	r2, r3
    a416:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a41a:	9900      	ldr	r1, [sp, #0]
    a41c:	4618      	mov	r0, r3
    a41e:	f001 ff5d 	bl	c2dc <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    a422:	2301      	movs	r3, #1
    a424:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    a428:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a42c:	2b00      	cmp	r3, #0
    a42e:	d007      	beq.n	a440 <Adc_Calibrate+0x9e>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    a430:	9b00      	ldr	r3, [sp, #0]
    a432:	781b      	ldrb	r3, [r3, #0]
    a434:	2b01      	cmp	r3, #1
    a436:	d103      	bne.n	a440 <Adc_Calibrate+0x9e>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    a438:	212b      	movs	r1, #43	; 0x2b
    a43a:	2029      	movs	r0, #41	; 0x29
    a43c:	f7fe fa71 	bl	8922 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    a440:	bf00      	nop
    a442:	b005      	add	sp, #20
    a444:	f85d fb04 	ldr.w	pc, [sp], #4

0000a448 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    a448:	b086      	sub	sp, #24
    a44a:	9003      	str	r0, [sp, #12]
    a44c:	9102      	str	r1, [sp, #8]
    a44e:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    a450:	9b03      	ldr	r3, [sp, #12]
    a452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a456:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    a458:	9b02      	ldr	r3, [sp, #8]
    a45a:	43db      	mvns	r3, r3
    a45c:	9a05      	ldr	r2, [sp, #20]
    a45e:	4013      	ands	r3, r2
    a460:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    a462:	9a05      	ldr	r2, [sp, #20]
    a464:	9b01      	ldr	r3, [sp, #4]
    a466:	4313      	orrs	r3, r2
    a468:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    a46a:	9b03      	ldr	r3, [sp, #12]
    a46c:	9a05      	ldr	r2, [sp, #20]
    a46e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    a472:	bf00      	nop
    a474:	b006      	add	sp, #24
    a476:	4770      	bx	lr

0000a478 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    a478:	b086      	sub	sp, #24
    a47a:	9003      	str	r0, [sp, #12]
    a47c:	9102      	str	r1, [sp, #8]
    a47e:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    a480:	9b03      	ldr	r3, [sp, #12]
    a482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a484:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    a486:	9b05      	ldr	r3, [sp, #20]
    a488:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    a48c:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    a48e:	9b02      	ldr	r3, [sp, #8]
    a490:	015b      	lsls	r3, r3, #5
    a492:	f003 0360 	and.w	r3, r3, #96	; 0x60
    a496:	9a05      	ldr	r2, [sp, #20]
    a498:	4313      	orrs	r3, r2
    a49a:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    a49c:	9b01      	ldr	r3, [sp, #4]
    a49e:	f003 0303 	and.w	r3, r3, #3
    a4a2:	9a05      	ldr	r2, [sp, #20]
    a4a4:	4313      	orrs	r3, r2
    a4a6:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    a4a8:	9b03      	ldr	r3, [sp, #12]
    a4aa:	9a05      	ldr	r2, [sp, #20]
    a4ac:	641a      	str	r2, [r3, #64]	; 0x40
}
    a4ae:	bf00      	nop
    a4b0:	b006      	add	sp, #24
    a4b2:	4770      	bx	lr

0000a4b4 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    a4b4:	b084      	sub	sp, #16
    a4b6:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    a4b8:	2300      	movs	r3, #0
    a4ba:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    a4bc:	9b01      	ldr	r3, [sp, #4]
    a4be:	095b      	lsrs	r3, r3, #5
    a4c0:	f003 0303 	and.w	r3, r3, #3
    a4c4:	2b03      	cmp	r3, #3
    a4c6:	d00c      	beq.n	a4e2 <Adc_HwAcc_GetClockDivide+0x2e>
    a4c8:	2b03      	cmp	r3, #3
    a4ca:	d80d      	bhi.n	a4e8 <Adc_HwAcc_GetClockDivide+0x34>
    a4cc:	2b01      	cmp	r3, #1
    a4ce:	d002      	beq.n	a4d6 <Adc_HwAcc_GetClockDivide+0x22>
    a4d0:	2b02      	cmp	r3, #2
    a4d2:	d003      	beq.n	a4dc <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    a4d4:	e008      	b.n	a4e8 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    a4d6:	2301      	movs	r3, #1
    a4d8:	9303      	str	r3, [sp, #12]
            break;
    a4da:	e006      	b.n	a4ea <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    a4dc:	2302      	movs	r3, #2
    a4de:	9303      	str	r3, [sp, #12]
            break;
    a4e0:	e003      	b.n	a4ea <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    a4e2:	2303      	movs	r3, #3
    a4e4:	9303      	str	r3, [sp, #12]
            break;
    a4e6:	e000      	b.n	a4ea <Adc_HwAcc_GetClockDivide+0x36>
            break;
    a4e8:	bf00      	nop
    }
    return ReturnValue;
    a4ea:	9b03      	ldr	r3, [sp, #12]
}
    a4ec:	4618      	mov	r0, r3
    a4ee:	b004      	add	sp, #16
    a4f0:	4770      	bx	lr

0000a4f2 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    a4f2:	b084      	sub	sp, #16
    a4f4:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    a4f6:	2300      	movs	r3, #0
    a4f8:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    a4fa:	9b01      	ldr	r3, [sp, #4]
    a4fc:	f003 0303 	and.w	r3, r3, #3
    a500:	2b03      	cmp	r3, #3
    a502:	d00c      	beq.n	a51e <Adc_HwAcc_GetInputClock+0x2c>
    a504:	2b03      	cmp	r3, #3
    a506:	d80d      	bhi.n	a524 <Adc_HwAcc_GetInputClock+0x32>
    a508:	2b01      	cmp	r3, #1
    a50a:	d002      	beq.n	a512 <Adc_HwAcc_GetInputClock+0x20>
    a50c:	2b02      	cmp	r3, #2
    a50e:	d003      	beq.n	a518 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    a510:	e008      	b.n	a524 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    a512:	2301      	movs	r3, #1
    a514:	9303      	str	r3, [sp, #12]
            break;
    a516:	e006      	b.n	a526 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    a518:	2302      	movs	r3, #2
    a51a:	9303      	str	r3, [sp, #12]
            break;
    a51c:	e003      	b.n	a526 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    a51e:	2303      	movs	r3, #3
    a520:	9303      	str	r3, [sp, #12]
            break;
    a522:	e000      	b.n	a526 <Adc_HwAcc_GetInputClock+0x34>
            break;
    a524:	bf00      	nop
    }
    return ReturnValue;
    a526:	9b03      	ldr	r3, [sp, #12]
}
    a528:	4618      	mov	r0, r3
    a52a:	b004      	add	sp, #16
    a52c:	4770      	bx	lr

0000a52e <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    a52e:	b084      	sub	sp, #16
    a530:	9001      	str	r0, [sp, #4]
    a532:	460b      	mov	r3, r1
    a534:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    a538:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a53c:	2b00      	cmp	r3, #0
    a53e:	d002      	beq.n	a546 <Adc_HwAcc_SetSampleTime+0x18>
    a540:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a544:	e000      	b.n	a548 <Adc_HwAcc_SetSampleTime+0x1a>
    a546:	2301      	movs	r3, #1
    a548:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    a54c:	9b01      	ldr	r3, [sp, #4]
    a54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    a550:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    a552:	9b02      	ldr	r3, [sp, #8]
    a554:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a558:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    a55a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a55e:	9a02      	ldr	r2, [sp, #8]
    a560:	4313      	orrs	r3, r2
    a562:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    a564:	9b01      	ldr	r3, [sp, #4]
    a566:	9a02      	ldr	r2, [sp, #8]
    a568:	645a      	str	r2, [r3, #68]	; 0x44
}
    a56a:	bf00      	nop
    a56c:	b004      	add	sp, #16
    a56e:	4770      	bx	lr

0000a570 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    a570:	b086      	sub	sp, #24
    a572:	9003      	str	r0, [sp, #12]
    a574:	460b      	mov	r3, r1
    a576:	9201      	str	r2, [sp, #4]
    a578:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    a57c:	9b03      	ldr	r3, [sp, #12]
    a57e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    a582:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    a584:	9b05      	ldr	r3, [sp, #20]
    a586:	f023 0307 	bic.w	r3, r3, #7
    a58a:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    a58c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a590:	2b00      	cmp	r3, #0
    a592:	d001      	beq.n	a598 <Adc_HwAcc_SetAveraging+0x28>
    a594:	2304      	movs	r3, #4
    a596:	e000      	b.n	a59a <Adc_HwAcc_SetAveraging+0x2a>
    a598:	2300      	movs	r3, #0
    a59a:	9a05      	ldr	r2, [sp, #20]
    a59c:	4313      	orrs	r3, r2
    a59e:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    a5a0:	9b01      	ldr	r3, [sp, #4]
    a5a2:	f003 0303 	and.w	r3, r3, #3
    a5a6:	9a05      	ldr	r2, [sp, #20]
    a5a8:	4313      	orrs	r3, r2
    a5aa:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    a5ac:	9b03      	ldr	r3, [sp, #12]
    a5ae:	9a05      	ldr	r2, [sp, #20]
    a5b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    a5b4:	bf00      	nop
    a5b6:	b006      	add	sp, #24
    a5b8:	4770      	bx	lr

0000a5ba <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    a5ba:	b084      	sub	sp, #16
    a5bc:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    a5be:	2300      	movs	r3, #0
    a5c0:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    a5c2:	9b01      	ldr	r3, [sp, #4]
    a5c4:	f003 0303 	and.w	r3, r3, #3
    a5c8:	2b03      	cmp	r3, #3
    a5ca:	d00c      	beq.n	a5e6 <Adc_HwAcc_GetAverageSelect+0x2c>
    a5cc:	2b03      	cmp	r3, #3
    a5ce:	d80d      	bhi.n	a5ec <Adc_HwAcc_GetAverageSelect+0x32>
    a5d0:	2b01      	cmp	r3, #1
    a5d2:	d002      	beq.n	a5da <Adc_HwAcc_GetAverageSelect+0x20>
    a5d4:	2b02      	cmp	r3, #2
    a5d6:	d003      	beq.n	a5e0 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    a5d8:	e008      	b.n	a5ec <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    a5da:	2301      	movs	r3, #1
    a5dc:	9303      	str	r3, [sp, #12]
            break;
    a5de:	e006      	b.n	a5ee <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    a5e0:	2302      	movs	r3, #2
    a5e2:	9303      	str	r3, [sp, #12]
            break;
    a5e4:	e003      	b.n	a5ee <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    a5e6:	2303      	movs	r3, #3
    a5e8:	9303      	str	r3, [sp, #12]
            break;
    a5ea:	e000      	b.n	a5ee <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    a5ec:	bf00      	nop
    }
    return ReturnValue;
    a5ee:	9b03      	ldr	r3, [sp, #12]
}
    a5f0:	4618      	mov	r0, r3
    a5f2:	b004      	add	sp, #16
    a5f4:	4770      	bx	lr

0000a5f6 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    a5f6:	b084      	sub	sp, #16
    a5f8:	9001      	str	r0, [sp, #4]
    a5fa:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    a5fc:	9b01      	ldr	r3, [sp, #4]
    a5fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a602:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    a604:	9b03      	ldr	r3, [sp, #12]
    a606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    a60a:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    a60c:	9b00      	ldr	r3, [sp, #0]
    a60e:	019b      	lsls	r3, r3, #6
    a610:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a614:	9a03      	ldr	r2, [sp, #12]
    a616:	4313      	orrs	r3, r2
    a618:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    a61a:	9b01      	ldr	r3, [sp, #4]
    a61c:	9a03      	ldr	r2, [sp, #12]
    a61e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    a622:	bf00      	nop
    a624:	b004      	add	sp, #16
    a626:	4770      	bx	lr

0000a628 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    a628:	b084      	sub	sp, #16
    a62a:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    a62c:	2300      	movs	r3, #0
    a62e:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    a630:	9b01      	ldr	r3, [sp, #4]
    a632:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a636:	2b00      	cmp	r3, #0
    a638:	d001      	beq.n	a63e <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    a63a:	2301      	movs	r3, #1
    a63c:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    a63e:	9b03      	ldr	r3, [sp, #12]
}
    a640:	4618      	mov	r0, r3
    a642:	b004      	add	sp, #16
    a644:	4770      	bx	lr

0000a646 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    a646:	b086      	sub	sp, #24
    a648:	9003      	str	r0, [sp, #12]
    a64a:	9201      	str	r2, [sp, #4]
    a64c:	461a      	mov	r2, r3
    a64e:	460b      	mov	r3, r1
    a650:	f88d 300b 	strb.w	r3, [sp, #11]
    a654:	4613      	mov	r3, r2
    a656:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    a65a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a65e:	9b03      	ldr	r3, [sp, #12]
    a660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a664:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    a666:	9b05      	ldr	r3, [sp, #20]
    a668:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    a66c:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    a66e:	9b01      	ldr	r3, [sp, #4]
    a670:	f003 031f 	and.w	r3, r3, #31
    a674:	9a05      	ldr	r2, [sp, #20]
    a676:	4313      	orrs	r3, r2
    a678:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    a67a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a67e:	2b00      	cmp	r3, #0
    a680:	d001      	beq.n	a686 <Adc_HwAcc_SetChannel+0x40>
    a682:	2340      	movs	r3, #64	; 0x40
    a684:	e000      	b.n	a688 <Adc_HwAcc_SetChannel+0x42>
    a686:	2300      	movs	r3, #0
    a688:	9a05      	ldr	r2, [sp, #20]
    a68a:	4313      	orrs	r3, r2
    a68c:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    a68e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a692:	9b03      	ldr	r3, [sp, #12]
    a694:	9905      	ldr	r1, [sp, #20]
    a696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    a69a:	bf00      	nop
    a69c:	b006      	add	sp, #24
    a69e:	4770      	bx	lr

0000a6a0 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    a6a0:	b082      	sub	sp, #8
    a6a2:	9001      	str	r0, [sp, #4]
    a6a4:	460b      	mov	r3, r1
    a6a6:	f8ad 3002 	strh.w	r3, [sp, #2]
    a6aa:	4613      	mov	r3, r2
    a6ac:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    a6b0:	f8bd 3000 	ldrh.w	r3, [sp]
    a6b4:	b2da      	uxtb	r2, r3
    a6b6:	9b01      	ldr	r3, [sp, #4]
    a6b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    a6bc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a6c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
    a6c4:	9b01      	ldr	r3, [sp, #4]
    a6c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    a6ca:	bf00      	nop
    a6cc:	b002      	add	sp, #8
    a6ce:	4770      	bx	lr

0000a6d0 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    a6d0:	b082      	sub	sp, #8
    a6d2:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    a6d4:	9b01      	ldr	r3, [sp, #4]
    a6d6:	099b      	lsrs	r3, r3, #6
    a6d8:	f003 0301 	and.w	r3, r3, #1
    a6dc:	2b00      	cmp	r3, #0
    a6de:	bf14      	ite	ne
    a6e0:	2301      	movne	r3, #1
    a6e2:	2300      	moveq	r3, #0
    a6e4:	b2db      	uxtb	r3, r3
}
    a6e6:	4618      	mov	r0, r3
    a6e8:	b002      	add	sp, #8
    a6ea:	4770      	bx	lr

0000a6ec <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    a6ec:	b082      	sub	sp, #8
    a6ee:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    a6f0:	9b01      	ldr	r3, [sp, #4]
    a6f2:	09db      	lsrs	r3, r3, #7
    a6f4:	f003 0301 	and.w	r3, r3, #1
    a6f8:	2b00      	cmp	r3, #0
    a6fa:	bf14      	ite	ne
    a6fc:	2301      	movne	r3, #1
    a6fe:	2300      	moveq	r3, #0
    a700:	b2db      	uxtb	r3, r3
}
    a702:	4618      	mov	r0, r3
    a704:	b002      	add	sp, #8
    a706:	4770      	bx	lr

0000a708 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    a708:	b084      	sub	sp, #16
    a70a:	9001      	str	r0, [sp, #4]
    a70c:	460b      	mov	r3, r1
    a70e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    a712:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a716:	9b01      	ldr	r3, [sp, #4]
    a718:	3212      	adds	r2, #18
    a71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a71e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    a722:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a726:	f3c3 030b 	ubfx	r3, r3, #0, #12
    a72a:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    a72e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a732:	4618      	mov	r0, r3
    a734:	b004      	add	sp, #16
    a736:	4770      	bx	lr

0000a738 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    a738:	b500      	push	{lr}
    a73a:	b085      	sub	sp, #20
    a73c:	9003      	str	r0, [sp, #12]
    a73e:	9102      	str	r1, [sp, #8]
    a740:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    a742:	f008 f809 	bl	12758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    a746:	9b02      	ldr	r3, [sp, #8]
    a748:	7a59      	ldrb	r1, [r3, #9]
    a74a:	9b02      	ldr	r3, [sp, #8]
    a74c:	68db      	ldr	r3, [r3, #12]
    a74e:	461a      	mov	r2, r3
    a750:	9803      	ldr	r0, [sp, #12]
    a752:	f7ff ff0d 	bl	a570 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    a756:	f008 f82b 	bl	127b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    a75a:	f007 fe63 	bl	12424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    a75e:	9901      	ldr	r1, [sp, #4]
    a760:	9803      	ldr	r0, [sp, #12]
    a762:	f7ff ff48 	bl	a5f6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    a766:	f007 fe89 	bl	1247c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    a76a:	f007 fb79 	bl	11e60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    a76e:	9b02      	ldr	r3, [sp, #8]
    a770:	7a1b      	ldrb	r3, [r3, #8]
    a772:	4619      	mov	r1, r3
    a774:	9803      	ldr	r0, [sp, #12]
    a776:	f7ff feda 	bl	a52e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    a77a:	f007 fb9d 	bl	11eb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    a77e:	f007 facb 	bl	11d18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    a782:	9b02      	ldr	r3, [sp, #8]
    a784:	6819      	ldr	r1, [r3, #0]
    a786:	9b02      	ldr	r3, [sp, #8]
    a788:	685b      	ldr	r3, [r3, #4]
    a78a:	461a      	mov	r2, r3
    a78c:	9803      	ldr	r0, [sp, #12]
    a78e:	f7ff fe73 	bl	a478 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    a792:	f007 faed 	bl	11d70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    a796:	bf00      	nop
    a798:	b005      	add	sp, #20
    a79a:	f85d fb04 	ldr.w	pc, [sp], #4

0000a79e <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    a79e:	b500      	push	{lr}
    a7a0:	b087      	sub	sp, #28
    a7a2:	9001      	str	r0, [sp, #4]
    a7a4:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    a7a6:	4a67      	ldr	r2, [pc, #412]	; (a944 <Adc_Ip_Init+0x1a6>)
    a7a8:	9b01      	ldr	r3, [sp, #4]
    a7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7ae:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    a7b0:	2300      	movs	r3, #0
    a7b2:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    a7b4:	2300      	movs	r3, #0
    a7b6:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    a7b8:	9b00      	ldr	r3, [sp, #0]
    a7ba:	6819      	ldr	r1, [r3, #0]
    a7bc:	9b00      	ldr	r3, [sp, #0]
    a7be:	689b      	ldr	r3, [r3, #8]
    a7c0:	461a      	mov	r2, r3
    a7c2:	9802      	ldr	r0, [sp, #8]
    a7c4:	f7ff fe58 	bl	a478 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    a7c8:	9b00      	ldr	r3, [sp, #0]
    a7ca:	7b1b      	ldrb	r3, [r3, #12]
    a7cc:	4619      	mov	r1, r3
    a7ce:	9802      	ldr	r0, [sp, #8]
    a7d0:	f7ff fead 	bl	a52e <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    a7d4:	9b00      	ldr	r3, [sp, #0]
    a7d6:	7b59      	ldrb	r1, [r3, #13]
    a7d8:	9b00      	ldr	r3, [sp, #0]
    a7da:	691b      	ldr	r3, [r3, #16]
    a7dc:	461a      	mov	r2, r3
    a7de:	9802      	ldr	r0, [sp, #8]
    a7e0:	f7ff fec6 	bl	a570 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    a7e4:	9b00      	ldr	r3, [sp, #0]
    a7e6:	695b      	ldr	r3, [r3, #20]
    a7e8:	4619      	mov	r1, r3
    a7ea:	9801      	ldr	r0, [sp, #4]
    a7ec:	f000 f9ea 	bl	abc4 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    a7f0:	9b04      	ldr	r3, [sp, #16]
    a7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a7f6:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    a7f8:	9b00      	ldr	r3, [sp, #0]
    a7fa:	699b      	ldr	r3, [r3, #24]
    a7fc:	019b      	lsls	r3, r3, #6
    a7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a802:	9a05      	ldr	r2, [sp, #20]
    a804:	4313      	orrs	r3, r2
    a806:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    a808:	9b00      	ldr	r3, [sp, #0]
    a80a:	7f1b      	ldrb	r3, [r3, #28]
    a80c:	2b00      	cmp	r3, #0
    a80e:	d004      	beq.n	a81a <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    a810:	9b05      	ldr	r3, [sp, #20]
    a812:	f043 0304 	orr.w	r3, r3, #4
    a816:	9305      	str	r3, [sp, #20]
    a818:	e003      	b.n	a822 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    a81a:	9b04      	ldr	r3, [sp, #16]
    a81c:	f043 0304 	orr.w	r3, r3, #4
    a820:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    a822:	9b04      	ldr	r3, [sp, #16]
    a824:	f043 0303 	orr.w	r3, r3, #3
    a828:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    a82a:	9b00      	ldr	r3, [sp, #0]
    a82c:	6a1b      	ldr	r3, [r3, #32]
    a82e:	f003 0303 	and.w	r3, r3, #3
    a832:	9a05      	ldr	r2, [sp, #20]
    a834:	4313      	orrs	r3, r2
    a836:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    a838:	9b04      	ldr	r3, [sp, #16]
    a83a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    a83e:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    a840:	9b00      	ldr	r3, [sp, #0]
    a842:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    a846:	2b00      	cmp	r3, #0
    a848:	d001      	beq.n	a84e <Adc_Ip_Init+0xb0>
    a84a:	2320      	movs	r3, #32
    a84c:	e000      	b.n	a850 <Adc_Ip_Init+0xb2>
    a84e:	2300      	movs	r3, #0
    a850:	9a05      	ldr	r2, [sp, #20]
    a852:	4313      	orrs	r3, r2
    a854:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    a856:	9b00      	ldr	r3, [sp, #0]
    a858:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    a85c:	2b00      	cmp	r3, #0
    a85e:	d001      	beq.n	a864 <Adc_Ip_Init+0xc6>
    a860:	2310      	movs	r3, #16
    a862:	e000      	b.n	a866 <Adc_Ip_Init+0xc8>
    a864:	2300      	movs	r3, #0
    a866:	9a05      	ldr	r2, [sp, #20]
    a868:	4313      	orrs	r3, r2
    a86a:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    a86c:	9b00      	ldr	r3, [sp, #0]
    a86e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    a872:	2b00      	cmp	r3, #0
    a874:	d001      	beq.n	a87a <Adc_Ip_Init+0xdc>
    a876:	2308      	movs	r3, #8
    a878:	e000      	b.n	a87c <Adc_Ip_Init+0xde>
    a87a:	2300      	movs	r3, #0
    a87c:	9a05      	ldr	r2, [sp, #20]
    a87e:	4313      	orrs	r3, r2
    a880:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    a882:	9b00      	ldr	r3, [sp, #0]
    a884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    a886:	461a      	mov	r2, r3
    a888:	9b02      	ldr	r3, [sp, #8]
    a88a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    a88e:	9b00      	ldr	r3, [sp, #0]
    a890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    a892:	461a      	mov	r2, r3
    a894:	9b02      	ldr	r3, [sp, #8]
    a896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    a89a:	9a05      	ldr	r2, [sp, #20]
    a89c:	9904      	ldr	r1, [sp, #16]
    a89e:	9802      	ldr	r0, [sp, #8]
    a8a0:	f7ff fdd2 	bl	a448 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    a8a4:	9b00      	ldr	r3, [sp, #0]
    a8a6:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    a8a8:	9b00      	ldr	r3, [sp, #0]
    a8aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    a8ac:	461a      	mov	r2, r3
    a8ae:	9802      	ldr	r0, [sp, #8]
    a8b0:	f7ff fef6 	bl	a6a0 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    a8b4:	9b00      	ldr	r3, [sp, #0]
    a8b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a8ba:	4619      	mov	r1, r3
    a8bc:	9801      	ldr	r0, [sp, #4]
    a8be:	f000 f955 	bl	ab6c <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    a8c2:	9b00      	ldr	r3, [sp, #0]
    a8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a8c6:	2b00      	cmp	r3, #0
    a8c8:	d01c      	beq.n	a904 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    a8ca:	2300      	movs	r3, #0
    a8cc:	f88d 300f 	strb.w	r3, [sp, #15]
    a8d0:	e011      	b.n	a8f6 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    a8d2:	9b00      	ldr	r3, [sp, #0]
    a8d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
    a8d6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a8da:	4613      	mov	r3, r2
    a8dc:	005b      	lsls	r3, r3, #1
    a8de:	4413      	add	r3, r2
    a8e0:	009b      	lsls	r3, r3, #2
    a8e2:	440b      	add	r3, r1
    a8e4:	4619      	mov	r1, r3
    a8e6:	9801      	ldr	r0, [sp, #4]
    a8e8:	f000 f9c2 	bl	ac70 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    a8ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8f0:	3301      	adds	r3, #1
    a8f2:	f88d 300f 	strb.w	r3, [sp, #15]
    a8f6:	9b00      	ldr	r3, [sp, #0]
    a8f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    a8fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a900:	429a      	cmp	r2, r3
    a902:	d3e6      	bcc.n	a8d2 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    a904:	9b00      	ldr	r3, [sp, #0]
    a906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a908:	490f      	ldr	r1, [pc, #60]	; (a948 <Adc_Ip_Init+0x1aa>)
    a90a:	9b01      	ldr	r3, [sp, #4]
    a90c:	204c      	movs	r0, #76	; 0x4c
    a90e:	fb00 f303 	mul.w	r3, r0, r3
    a912:	440b      	add	r3, r1
    a914:	3308      	adds	r3, #8
    a916:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    a918:	9b00      	ldr	r3, [sp, #0]
    a91a:	685a      	ldr	r2, [r3, #4]
    a91c:	490a      	ldr	r1, [pc, #40]	; (a948 <Adc_Ip_Init+0x1aa>)
    a91e:	9b01      	ldr	r3, [sp, #4]
    a920:	204c      	movs	r0, #76	; 0x4c
    a922:	fb00 f303 	mul.w	r3, r0, r3
    a926:	440b      	add	r3, r1
    a928:	3304      	adds	r3, #4
    a92a:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    a92c:	4a06      	ldr	r2, [pc, #24]	; (a948 <Adc_Ip_Init+0x1aa>)
    a92e:	9b01      	ldr	r3, [sp, #4]
    a930:	214c      	movs	r1, #76	; 0x4c
    a932:	fb01 f303 	mul.w	r3, r1, r3
    a936:	4413      	add	r3, r2
    a938:	2201      	movs	r2, #1
    a93a:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    a93c:	bf00      	nop
    a93e:	b007      	add	sp, #28
    a940:	f85d fb04 	ldr.w	pc, [sp], #4
    a944:	000197e0 	.word	0x000197e0
    a948:	1fff8d80 	.word	0x1fff8d80

0000a94c <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    a94c:	b500      	push	{lr}
    a94e:	b0c3      	sub	sp, #268	; 0x10c
    a950:	ab42      	add	r3, sp, #264	; 0x108
    a952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    a956:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    a958:	2300      	movs	r3, #0
    a95a:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    a95c:	2303      	movs	r3, #3
    a95e:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    a960:	2300      	movs	r3, #0
    a962:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    a964:	230c      	movs	r3, #12
    a966:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    a96a:	2300      	movs	r3, #0
    a96c:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    a970:	2300      	movs	r3, #0
    a972:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    a974:	2300      	movs	r3, #0
    a976:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    a978:	2300      	movs	r3, #0
    a97a:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    a97c:	2300      	movs	r3, #0
    a97e:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    a982:	2300      	movs	r3, #0
    a984:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    a986:	2300      	movs	r3, #0
    a988:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    a98c:	2300      	movs	r3, #0
    a98e:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    a992:	2300      	movs	r3, #0
    a994:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    a998:	2300      	movs	r3, #0
    a99a:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    a99e:	2300      	movs	r3, #0
    a9a0:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    a9a4:	2300      	movs	r3, #0
    a9a6:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    a9aa:	2304      	movs	r3, #4
    a9ac:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    a9b0:	2300      	movs	r3, #0
    a9b2:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    a9b6:	2310      	movs	r3, #16
    a9b8:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    a9bc:	2300      	movs	r3, #0
    a9be:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    a9c2:	e02b      	b.n	aa1c <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    a9c4:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    a9c8:	ab42      	add	r3, sp, #264	; 0x108
    a9ca:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    a9ce:	4613      	mov	r3, r2
    a9d0:	005b      	lsls	r3, r3, #1
    a9d2:	4413      	add	r3, r2
    a9d4:	009b      	lsls	r3, r3, #2
    a9d6:	440b      	add	r3, r1
    a9d8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    a9dc:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    a9de:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    a9e2:	ab42      	add	r3, sp, #264	; 0x108
    a9e4:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    a9e8:	4613      	mov	r3, r2
    a9ea:	005b      	lsls	r3, r3, #1
    a9ec:	4413      	add	r3, r2
    a9ee:	009b      	lsls	r3, r3, #2
    a9f0:	440b      	add	r3, r1
    a9f2:	3304      	adds	r3, #4
    a9f4:	221f      	movs	r2, #31
    a9f6:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    a9f8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    a9fc:	ab42      	add	r3, sp, #264	; 0x108
    a9fe:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    aa02:	4613      	mov	r3, r2
    aa04:	005b      	lsls	r3, r3, #1
    aa06:	4413      	add	r3, r2
    aa08:	009b      	lsls	r3, r3, #2
    aa0a:	440b      	add	r3, r1
    aa0c:	3308      	adds	r3, #8
    aa0e:	2200      	movs	r2, #0
    aa10:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    aa12:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    aa16:	3301      	adds	r3, #1
    aa18:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    aa1c:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    aa20:	2b0f      	cmp	r3, #15
    aa22:	d9cf      	bls.n	a9c4 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    aa24:	ab02      	add	r3, sp, #8
    aa26:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    aa28:	2300      	movs	r3, #0
    aa2a:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    aa2c:	aa32      	add	r2, sp, #200	; 0xc8
    aa2e:	ab42      	add	r3, sp, #264	; 0x108
    aa30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    aa34:	4611      	mov	r1, r2
    aa36:	6818      	ldr	r0, [r3, #0]
    aa38:	f7ff feb1 	bl	a79e <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    aa3c:	4a07      	ldr	r2, [pc, #28]	; (aa5c <Adc_Ip_DeInit+0x110>)
    aa3e:	ab42      	add	r3, sp, #264	; 0x108
    aa40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    aa44:	681b      	ldr	r3, [r3, #0]
    aa46:	214c      	movs	r1, #76	; 0x4c
    aa48:	fb01 f303 	mul.w	r3, r1, r3
    aa4c:	4413      	add	r3, r2
    aa4e:	2200      	movs	r2, #0
    aa50:	701a      	strb	r2, [r3, #0]
}
    aa52:	bf00      	nop
    aa54:	b043      	add	sp, #268	; 0x10c
    aa56:	f85d fb04 	ldr.w	pc, [sp], #4
    aa5a:	bf00      	nop
    aa5c:	1fff8d80 	.word	0x1fff8d80

0000aa60 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    aa60:	b500      	push	{lr}
    aa62:	b087      	sub	sp, #28
    aa64:	9003      	str	r0, [sp, #12]
    aa66:	460b      	mov	r3, r1
    aa68:	9201      	str	r2, [sp, #4]
    aa6a:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    aa6e:	4a0a      	ldr	r2, [pc, #40]	; (aa98 <Adc_Ip_SetAveraging+0x38>)
    aa70:	9b03      	ldr	r3, [sp, #12]
    aa72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa76:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    aa78:	f007 fdca 	bl	12610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    aa7c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aa80:	9a01      	ldr	r2, [sp, #4]
    aa82:	4619      	mov	r1, r3
    aa84:	9805      	ldr	r0, [sp, #20]
    aa86:	f7ff fd73 	bl	a570 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    aa8a:	f007 fded 	bl	12668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    aa8e:	bf00      	nop
    aa90:	b007      	add	sp, #28
    aa92:	f85d fb04 	ldr.w	pc, [sp], #4
    aa96:	bf00      	nop
    aa98:	000197e0 	.word	0x000197e0

0000aa9c <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    aa9c:	b500      	push	{lr}
    aa9e:	b085      	sub	sp, #20
    aaa0:	9001      	str	r0, [sp, #4]
    aaa2:	460b      	mov	r3, r1
    aaa4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    aaa8:	4a09      	ldr	r2, [pc, #36]	; (aad0 <Adc_Ip_SetSampleTime+0x34>)
    aaaa:	9b01      	ldr	r3, [sp, #4]
    aaac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aab0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    aab2:	f007 fa27 	bl	11f04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    aab6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    aaba:	4619      	mov	r1, r3
    aabc:	9803      	ldr	r0, [sp, #12]
    aabe:	f7ff fd36 	bl	a52e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    aac2:	f007 fa4b 	bl	11f5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    aac6:	bf00      	nop
    aac8:	b005      	add	sp, #20
    aaca:	f85d fb04 	ldr.w	pc, [sp], #4
    aace:	bf00      	nop
    aad0:	000197e0 	.word	0x000197e0

0000aad4 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    aad4:	b500      	push	{lr}
    aad6:	b085      	sub	sp, #20
    aad8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    aada:	4a0a      	ldr	r2, [pc, #40]	; (ab04 <Adc_Ip_EnableDma+0x30>)
    aadc:	9b01      	ldr	r3, [sp, #4]
    aade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aae2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    aae4:	f007 fd42 	bl	1256c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    aae8:	9b03      	ldr	r3, [sp, #12]
    aaea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    aaee:	f043 0204 	orr.w	r2, r3, #4
    aaf2:	9b03      	ldr	r3, [sp, #12]
    aaf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    aaf8:	f007 fd64 	bl	125c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    aafc:	bf00      	nop
    aafe:	b005      	add	sp, #20
    ab00:	f85d fb04 	ldr.w	pc, [sp], #4
    ab04:	000197e0 	.word	0x000197e0

0000ab08 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    ab08:	b500      	push	{lr}
    ab0a:	b085      	sub	sp, #20
    ab0c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ab0e:	4a0a      	ldr	r2, [pc, #40]	; (ab38 <Adc_Ip_DisableDma+0x30>)
    ab10:	9b01      	ldr	r3, [sp, #4]
    ab12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab16:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    ab18:	f007 fbe0 	bl	122dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    ab1c:	9b03      	ldr	r3, [sp, #12]
    ab1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    ab22:	f023 0204 	bic.w	r2, r3, #4
    ab26:	9b03      	ldr	r3, [sp, #12]
    ab28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    ab2c:	f007 fc02 	bl	12334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    ab30:	bf00      	nop
    ab32:	b005      	add	sp, #20
    ab34:	f85d fb04 	ldr.w	pc, [sp], #4
    ab38:	000197e0 	.word	0x000197e0

0000ab3c <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    ab3c:	b500      	push	{lr}
    ab3e:	b085      	sub	sp, #20
    ab40:	9001      	str	r0, [sp, #4]
    ab42:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ab44:	4a08      	ldr	r2, [pc, #32]	; (ab68 <Adc_Ip_SetTriggerMode+0x2c>)
    ab46:	9b01      	ldr	r3, [sp, #4]
    ab48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab4c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    ab4e:	f007 fc17 	bl	12380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    ab52:	9900      	ldr	r1, [sp, #0]
    ab54:	9803      	ldr	r0, [sp, #12]
    ab56:	f7ff fd4e 	bl	a5f6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    ab5a:	f007 fc3d 	bl	123d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    ab5e:	bf00      	nop
    ab60:	b005      	add	sp, #20
    ab62:	f85d fb04 	ldr.w	pc, [sp], #4
    ab66:	bf00      	nop
    ab68:	000197e0 	.word	0x000197e0

0000ab6c <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    ab6c:	b500      	push	{lr}
    ab6e:	b085      	sub	sp, #20
    ab70:	9001      	str	r0, [sp, #4]
    ab72:	460b      	mov	r3, r1
    ab74:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ab78:	4a11      	ldr	r2, [pc, #68]	; (abc0 <Adc_Ip_SetContinuousMode+0x54>)
    ab7a:	9b01      	ldr	r3, [sp, #4]
    ab7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab80:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    ab82:	f007 fe3b 	bl	127fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    ab86:	9b03      	ldr	r3, [sp, #12]
    ab88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    ab8c:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    ab8e:	9b02      	ldr	r3, [sp, #8]
    ab90:	f023 0308 	bic.w	r3, r3, #8
    ab94:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    ab96:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ab9a:	2b00      	cmp	r3, #0
    ab9c:	d001      	beq.n	aba2 <Adc_Ip_SetContinuousMode+0x36>
    ab9e:	2308      	movs	r3, #8
    aba0:	e000      	b.n	aba4 <Adc_Ip_SetContinuousMode+0x38>
    aba2:	2300      	movs	r3, #0
    aba4:	9a02      	ldr	r2, [sp, #8]
    aba6:	4313      	orrs	r3, r2
    aba8:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    abaa:	9b03      	ldr	r3, [sp, #12]
    abac:	9a02      	ldr	r2, [sp, #8]
    abae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    abb2:	f007 fe4f 	bl	12854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    abb6:	bf00      	nop
    abb8:	b005      	add	sp, #20
    abba:	f85d fb04 	ldr.w	pc, [sp], #4
    abbe:	bf00      	nop
    abc0:	000197e0 	.word	0x000197e0

0000abc4 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    abc4:	b500      	push	{lr}
    abc6:	b085      	sub	sp, #20
    abc8:	9001      	str	r0, [sp, #4]
    abca:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    abcc:	4a0e      	ldr	r2, [pc, #56]	; (ac08 <Adc_Ip_SetResolution+0x44>)
    abce:	9b01      	ldr	r3, [sp, #4]
    abd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abd4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    abd6:	f006 fe61 	bl	1189c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    abda:	9b03      	ldr	r3, [sp, #12]
    abdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    abde:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    abe0:	9b02      	ldr	r3, [sp, #8]
    abe2:	f023 030c 	bic.w	r3, r3, #12
    abe6:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    abe8:	9b00      	ldr	r3, [sp, #0]
    abea:	009b      	lsls	r3, r3, #2
    abec:	f003 030c 	and.w	r3, r3, #12
    abf0:	9a02      	ldr	r2, [sp, #8]
    abf2:	4313      	orrs	r3, r2
    abf4:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    abf6:	9b03      	ldr	r3, [sp, #12]
    abf8:	9a02      	ldr	r2, [sp, #8]
    abfa:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    abfc:	f006 fe7a 	bl	118f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    ac00:	bf00      	nop
    ac02:	b005      	add	sp, #20
    ac04:	f85d fb04 	ldr.w	pc, [sp], #4
    ac08:	000197e0 	.word	0x000197e0

0000ac0c <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    ac0c:	b500      	push	{lr}
    ac0e:	b085      	sub	sp, #20
    ac10:	9001      	str	r0, [sp, #4]
    ac12:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ac14:	4a15      	ldr	r2, [pc, #84]	; (ac6c <Adc_Ip_SetClockMode+0x60>)
    ac16:	9b01      	ldr	r3, [sp, #4]
    ac18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac1c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    ac1e:	f006 ffd7 	bl	11bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    ac22:	9b00      	ldr	r3, [sp, #0]
    ac24:	6819      	ldr	r1, [r3, #0]
    ac26:	9b00      	ldr	r3, [sp, #0]
    ac28:	685b      	ldr	r3, [r3, #4]
    ac2a:	461a      	mov	r2, r3
    ac2c:	9803      	ldr	r0, [sp, #12]
    ac2e:	f7ff fc23 	bl	a478 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    ac32:	f006 fff9 	bl	11c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    ac36:	f007 f8c1 	bl	11dbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    ac3a:	9b00      	ldr	r3, [sp, #0]
    ac3c:	7a1b      	ldrb	r3, [r3, #8]
    ac3e:	4619      	mov	r1, r3
    ac40:	9803      	ldr	r0, [sp, #12]
    ac42:	f7ff fc74 	bl	a52e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    ac46:	f007 f8e5 	bl	11e14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    ac4a:	f007 fd33 	bl	126b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    ac4e:	9b00      	ldr	r3, [sp, #0]
    ac50:	7a59      	ldrb	r1, [r3, #9]
    ac52:	9b00      	ldr	r3, [sp, #0]
    ac54:	68db      	ldr	r3, [r3, #12]
    ac56:	461a      	mov	r2, r3
    ac58:	9803      	ldr	r0, [sp, #12]
    ac5a:	f7ff fc89 	bl	a570 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    ac5e:	f007 fd55 	bl	1270c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    ac62:	bf00      	nop
    ac64:	b005      	add	sp, #20
    ac66:	f85d fb04 	ldr.w	pc, [sp], #4
    ac6a:	bf00      	nop
    ac6c:	000197e0 	.word	0x000197e0

0000ac70 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    ac70:	b510      	push	{r4, lr}
    ac72:	b084      	sub	sp, #16
    ac74:	9001      	str	r0, [sp, #4]
    ac76:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ac78:	4a13      	ldr	r2, [pc, #76]	; (acc8 <Adc_Ip_ConfigChannel+0x58>)
    ac7a:	9b01      	ldr	r3, [sp, #4]
    ac7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac80:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    ac82:	9b00      	ldr	r3, [sp, #0]
    ac84:	685b      	ldr	r3, [r3, #4]
    ac86:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    ac88:	f007 fad6 	bl	12238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    ac8c:	9b00      	ldr	r3, [sp, #0]
    ac8e:	7819      	ldrb	r1, [r3, #0]
    ac90:	9b00      	ldr	r3, [sp, #0]
    ac92:	7a1b      	ldrb	r3, [r3, #8]
    ac94:	9a02      	ldr	r2, [sp, #8]
    ac96:	9803      	ldr	r0, [sp, #12]
    ac98:	f7ff fcd5 	bl	a646 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    ac9c:	f007 faf8 	bl	12290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    aca0:	9b00      	ldr	r3, [sp, #0]
    aca2:	781b      	ldrb	r3, [r3, #0]
    aca4:	461c      	mov	r4, r3
    aca6:	9b00      	ldr	r3, [sp, #0]
    aca8:	6859      	ldr	r1, [r3, #4]
    acaa:	4808      	ldr	r0, [pc, #32]	; (accc <Adc_Ip_ConfigChannel+0x5c>)
    acac:	9a01      	ldr	r2, [sp, #4]
    acae:	4613      	mov	r3, r2
    acb0:	00db      	lsls	r3, r3, #3
    acb2:	4413      	add	r3, r2
    acb4:	005b      	lsls	r3, r3, #1
    acb6:	4413      	add	r3, r2
    acb8:	4423      	add	r3, r4
    acba:	3302      	adds	r3, #2
    acbc:	009b      	lsls	r3, r3, #2
    acbe:	4403      	add	r3, r0
    acc0:	6059      	str	r1, [r3, #4]
}
    acc2:	bf00      	nop
    acc4:	b004      	add	sp, #16
    acc6:	bd10      	pop	{r4, pc}
    acc8:	000197e0 	.word	0x000197e0
    accc:	1fff8d80 	.word	0x1fff8d80

0000acd0 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    acd0:	b500      	push	{lr}
    acd2:	b089      	sub	sp, #36	; 0x24
    acd4:	9001      	str	r0, [sp, #4]
    acd6:	460b      	mov	r3, r1
    acd8:	f88d 3003 	strb.w	r3, [sp, #3]
    acdc:	4613      	mov	r3, r2
    acde:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ace2:	4a24      	ldr	r2, [pc, #144]	; (ad74 <Adc_Ip_SetDisabledChannel+0xa4>)
    ace4:	9b01      	ldr	r3, [sp, #4]
    ace6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acea:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    acec:	2300      	movs	r3, #0
    acee:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    acf0:	2100      	movs	r1, #0
    acf2:	4821      	ldr	r0, [pc, #132]	; (ad78 <Adc_Ip_SetDisabledChannel+0xa8>)
    acf4:	f7f7 fea8 	bl	2a48 <OsIf_MicrosToTicks>
    acf8:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    acfa:	2000      	movs	r0, #0
    acfc:	f7f7 fe58 	bl	29b0 <OsIf_GetCounter>
    ad00:	4603      	mov	r3, r0
    ad02:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    ad04:	2300      	movs	r3, #0
    ad06:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    ad08:	f007 f94e 	bl	11fa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    ad0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ad10:	9b05      	ldr	r3, [sp, #20]
    ad12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ad16:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ad1a:	f043 011f 	orr.w	r1, r3, #31
    ad1e:	9b05      	ldr	r3, [sp, #20]
    ad20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    ad24:	f007 f96c 	bl	12000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    ad28:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ad2c:	2b00      	cmp	r3, #0
    ad2e:	d01c      	beq.n	ad6a <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    ad30:	e008      	b.n	ad44 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    ad32:	ab03      	add	r3, sp, #12
    ad34:	2100      	movs	r1, #0
    ad36:	4618      	mov	r0, r3
    ad38:	f7f7 fe53 	bl	29e2 <OsIf_GetElapsed>
    ad3c:	4602      	mov	r2, r0
    ad3e:	9b06      	ldr	r3, [sp, #24]
    ad40:	4413      	add	r3, r2
    ad42:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    ad44:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ad48:	9b05      	ldr	r3, [sp, #20]
    ad4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ad4e:	f003 031f 	and.w	r3, r3, #31
    ad52:	2b1f      	cmp	r3, #31
    ad54:	d003      	beq.n	ad5e <Adc_Ip_SetDisabledChannel+0x8e>
    ad56:	9a06      	ldr	r2, [sp, #24]
    ad58:	9b04      	ldr	r3, [sp, #16]
    ad5a:	429a      	cmp	r2, r3
    ad5c:	d3e9      	bcc.n	ad32 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    ad5e:	9a06      	ldr	r2, [sp, #24]
    ad60:	9b04      	ldr	r3, [sp, #16]
    ad62:	429a      	cmp	r2, r3
    ad64:	d301      	bcc.n	ad6a <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    ad66:	2302      	movs	r3, #2
    ad68:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    ad6a:	9b07      	ldr	r3, [sp, #28]
}
    ad6c:	4618      	mov	r0, r3
    ad6e:	b009      	add	sp, #36	; 0x24
    ad70:	f85d fb04 	ldr.w	pc, [sp], #4
    ad74:	000197e0 	.word	0x000197e0
    ad78:	000186a0 	.word	0x000186a0

0000ad7c <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    ad7c:	b500      	push	{lr}
    ad7e:	b087      	sub	sp, #28
    ad80:	9003      	str	r0, [sp, #12]
    ad82:	9102      	str	r1, [sp, #8]
    ad84:	4613      	mov	r3, r2
    ad86:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ad8a:	4a0a      	ldr	r2, [pc, #40]	; (adb4 <Adc_Ip_StartConversion+0x38>)
    ad8c:	9b03      	ldr	r3, [sp, #12]
    ad8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad92:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    ad94:	f007 f95a 	bl	1204c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    ad98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ad9c:	9a02      	ldr	r2, [sp, #8]
    ad9e:	2100      	movs	r1, #0
    ada0:	9805      	ldr	r0, [sp, #20]
    ada2:	f7ff fc50 	bl	a646 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    ada6:	f007 f97d 	bl	120a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    adaa:	bf00      	nop
    adac:	b007      	add	sp, #28
    adae:	f85d fb04 	ldr.w	pc, [sp], #4
    adb2:	bf00      	nop
    adb4:	000197e0 	.word	0x000197e0

0000adb8 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    adb8:	b084      	sub	sp, #16
    adba:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    adbc:	4a0b      	ldr	r2, [pc, #44]	; (adec <Adc_Ip_GetConvActiveFlag+0x34>)
    adbe:	9b01      	ldr	r3, [sp, #4]
    adc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adc4:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    adc6:	9b03      	ldr	r3, [sp, #12]
    adc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    adcc:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    adce:	9b02      	ldr	r3, [sp, #8]
    add0:	09db      	lsrs	r3, r3, #7
    add2:	f003 0301 	and.w	r3, r3, #1
    add6:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    add8:	9b02      	ldr	r3, [sp, #8]
    adda:	2b00      	cmp	r3, #0
    addc:	bf14      	ite	ne
    adde:	2301      	movne	r3, #1
    ade0:	2300      	moveq	r3, #0
    ade2:	b2db      	uxtb	r3, r3
}
    ade4:	4618      	mov	r0, r3
    ade6:	b004      	add	sp, #16
    ade8:	4770      	bx	lr
    adea:	bf00      	nop
    adec:	000197e0 	.word	0x000197e0

0000adf0 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    adf0:	b500      	push	{lr}
    adf2:	b085      	sub	sp, #20
    adf4:	9001      	str	r0, [sp, #4]
    adf6:	460b      	mov	r3, r1
    adf8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    adfc:	4a08      	ldr	r2, [pc, #32]	; (ae20 <Adc_Ip_GetChanInterrupt+0x30>)
    adfe:	9b01      	ldr	r3, [sp, #4]
    ae00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae04:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ae08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ae0c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    ae0e:	9803      	ldr	r0, [sp, #12]
    ae10:	f7ff fc5e 	bl	a6d0 <Adc_HwAcc_GetAIEN>
    ae14:	4603      	mov	r3, r0
}
    ae16:	4618      	mov	r0, r3
    ae18:	b005      	add	sp, #20
    ae1a:	f85d fb04 	ldr.w	pc, [sp], #4
    ae1e:	bf00      	nop
    ae20:	000197e0 	.word	0x000197e0

0000ae24 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    ae24:	b500      	push	{lr}
    ae26:	b085      	sub	sp, #20
    ae28:	9001      	str	r0, [sp, #4]
    ae2a:	460b      	mov	r3, r1
    ae2c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    ae30:	4a08      	ldr	r2, [pc, #32]	; (ae54 <Adc_Ip_GetConvCompleteFlag+0x30>)
    ae32:	9b01      	ldr	r3, [sp, #4]
    ae34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae38:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ae3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ae40:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    ae42:	9803      	ldr	r0, [sp, #12]
    ae44:	f7ff fc52 	bl	a6ec <Adc_HwAcc_GetCOCO>
    ae48:	4603      	mov	r3, r0
}
    ae4a:	4618      	mov	r0, r3
    ae4c:	b005      	add	sp, #20
    ae4e:	f85d fb04 	ldr.w	pc, [sp], #4
    ae52:	bf00      	nop
    ae54:	000197e0 	.word	0x000197e0

0000ae58 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    ae58:	b500      	push	{lr}
    ae5a:	b085      	sub	sp, #20
    ae5c:	9001      	str	r0, [sp, #4]
    ae5e:	460b      	mov	r3, r1
    ae60:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ae64:	4a07      	ldr	r2, [pc, #28]	; (ae84 <Adc_Ip_GetConvData+0x2c>)
    ae66:	9b01      	ldr	r3, [sp, #4]
    ae68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae6c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    ae6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ae72:	4619      	mov	r1, r3
    ae74:	9803      	ldr	r0, [sp, #12]
    ae76:	f7ff fc47 	bl	a708 <Adc_HwAcc_GetData>
    ae7a:	4603      	mov	r3, r0
}
    ae7c:	4618      	mov	r0, r3
    ae7e:	b005      	add	sp, #20
    ae80:	f85d fb04 	ldr.w	pc, [sp], #4
    ae84:	000197e0 	.word	0x000197e0

0000ae88 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    ae88:	b500      	push	{lr}
    ae8a:	b093      	sub	sp, #76	; 0x4c
    ae8c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ae8e:	4a59      	ldr	r2, [pc, #356]	; (aff4 <Adc_Ip_DoCalibration+0x16c>)
    ae90:	9b01      	ldr	r3, [sp, #4]
    ae92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae96:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    ae98:	2300      	movs	r3, #0
    ae9a:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    ae9c:	2100      	movs	r1, #0
    ae9e:	4856      	ldr	r0, [pc, #344]	; (aff8 <Adc_Ip_DoCalibration+0x170>)
    aea0:	f7f7 fdd2 	bl	2a48 <OsIf_MicrosToTicks>
    aea4:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    aea6:	2000      	movs	r0, #0
    aea8:	f7f7 fd82 	bl	29b0 <OsIf_GetCounter>
    aeac:	4603      	mov	r3, r0
    aeae:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    aeb0:	2300      	movs	r3, #0
    aeb2:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    aeb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aeb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    aeba:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    aebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aebe:	089b      	lsrs	r3, r3, #2
    aec0:	f003 0301 	and.w	r3, r3, #1
    aec4:	2b00      	cmp	r3, #0
    aec6:	bf14      	ite	ne
    aec8:	2301      	movne	r3, #1
    aeca:	2300      	moveq	r3, #0
    aecc:	b2db      	uxtb	r3, r3
    aece:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    aed2:	980d      	ldr	r0, [sp, #52]	; 0x34
    aed4:	f7ff fb71 	bl	a5ba <Adc_HwAcc_GetAverageSelect>
    aed8:	4603      	mov	r3, r0
    aeda:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    aedc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    aee0:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    aee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aee4:	b2db      	uxtb	r3, r3
    aee6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    aeea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aeec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    aef0:	4618      	mov	r0, r3
    aef2:	f7ff fb99 	bl	a628 <Adc_HwAcc_GetTriggerMode>
    aef6:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    aef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    aefc:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    aefe:	980d      	ldr	r0, [sp, #52]	; 0x34
    af00:	f7ff fad8 	bl	a4b4 <Adc_HwAcc_GetClockDivide>
    af04:	4603      	mov	r3, r0
    af06:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    af08:	980d      	ldr	r0, [sp, #52]	; 0x34
    af0a:	f7ff faf2 	bl	a4f2 <Adc_HwAcc_GetInputClock>
    af0e:	4603      	mov	r3, r0
    af10:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    af12:	2301      	movs	r3, #1
    af14:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    af18:	2303      	movs	r3, #3
    af1a:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    af1c:	230c      	movs	r3, #12
    af1e:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    af22:	4a36      	ldr	r2, [pc, #216]	; (affc <Adc_Ip_DoCalibration+0x174>)
    af24:	9b01      	ldr	r3, [sp, #4]
    af26:	214c      	movs	r1, #76	; 0x4c
    af28:	fb01 f303 	mul.w	r3, r1, r3
    af2c:	4413      	add	r3, r2
    af2e:	3304      	adds	r3, #4
    af30:	681b      	ldr	r3, [r3, #0]
    af32:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    af34:	9b08      	ldr	r3, [sp, #32]
    af36:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    af38:	ab03      	add	r3, sp, #12
    af3a:	2200      	movs	r2, #0
    af3c:	4619      	mov	r1, r3
    af3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    af40:	f7ff fbfa 	bl	a738 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    af44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af46:	2200      	movs	r2, #0
    af48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    af4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af4e:	2200      	movs	r2, #0
    af50:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    af54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af56:	2200      	movs	r2, #0
    af58:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    af5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af5e:	2200      	movs	r2, #0
    af60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    af64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af66:	2200      	movs	r2, #0
    af68:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    af6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af6e:	2200      	movs	r2, #0
    af70:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    af74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af76:	2200      	movs	r2, #0
    af78:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    af7c:	f007 fbec 	bl	12758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    af80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    af86:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    af88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    af8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    af8e:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    af90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    af92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    af96:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    af98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    af9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    afa0:	f007 fc06 	bl	127b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    afa4:	e008      	b.n	afb8 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    afa6:	ab0b      	add	r3, sp, #44	; 0x2c
    afa8:	2100      	movs	r1, #0
    afaa:	4618      	mov	r0, r3
    afac:	f7f7 fd19 	bl	29e2 <OsIf_GetElapsed>
    afb0:	4602      	mov	r2, r0
    afb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    afb4:	4413      	add	r3, r2
    afb6:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    afb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    afba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    afbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    afc2:	2b00      	cmp	r3, #0
    afc4:	d003      	beq.n	afce <Adc_Ip_DoCalibration+0x146>
    afc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    afc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    afca:	429a      	cmp	r2, r3
    afcc:	d3eb      	bcc.n	afa6 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    afce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    afd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    afd2:	429a      	cmp	r2, r3
    afd4:	d301      	bcc.n	afda <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    afd6:	2302      	movs	r3, #2
    afd8:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    afda:	ab07      	add	r3, sp, #28
    afdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    afde:	4619      	mov	r1, r3
    afe0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    afe2:	f7ff fba9 	bl	a738 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    afe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    afe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    afea:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    afec:	4618      	mov	r0, r3
    afee:	b013      	add	sp, #76	; 0x4c
    aff0:	f85d fb04 	ldr.w	pc, [sp], #4
    aff4:	000197e0 	.word	0x000197e0
    aff8:	000186a0 	.word	0x000186a0
    affc:	1fff8d80 	.word	0x1fff8d80

0000b000 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    b000:	b500      	push	{lr}
    b002:	b089      	sub	sp, #36	; 0x24
    b004:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b006:	4a1e      	ldr	r2, [pc, #120]	; (b080 <Adc_Ip_ClearLatchedTriggers+0x80>)
    b008:	9b01      	ldr	r3, [sp, #4]
    b00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b00e:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    b010:	2300      	movs	r3, #0
    b012:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    b014:	2100      	movs	r1, #0
    b016:	481b      	ldr	r0, [pc, #108]	; (b084 <Adc_Ip_ClearLatchedTriggers+0x84>)
    b018:	f7f7 fd16 	bl	2a48 <OsIf_MicrosToTicks>
    b01c:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    b01e:	2000      	movs	r0, #0
    b020:	f7f7 fcc6 	bl	29b0 <OsIf_GetCounter>
    b024:	4603      	mov	r3, r0
    b026:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    b028:	2300      	movs	r3, #0
    b02a:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    b02c:	f006 fe22 	bl	11c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    b030:	9b05      	ldr	r3, [sp, #20]
    b032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b034:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    b038:	9b05      	ldr	r3, [sp, #20]
    b03a:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    b03c:	f006 fe46 	bl	11ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b040:	e008      	b.n	b054 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    b042:	ab03      	add	r3, sp, #12
    b044:	2100      	movs	r1, #0
    b046:	4618      	mov	r0, r3
    b048:	f7f7 fccb 	bl	29e2 <OsIf_GetElapsed>
    b04c:	4602      	mov	r2, r0
    b04e:	9b06      	ldr	r3, [sp, #24]
    b050:	4413      	add	r3, r2
    b052:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b054:	9b05      	ldr	r3, [sp, #20]
    b056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b05a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    b05e:	2b00      	cmp	r3, #0
    b060:	d003      	beq.n	b06a <Adc_Ip_ClearLatchedTriggers+0x6a>
    b062:	9a06      	ldr	r2, [sp, #24]
    b064:	9b04      	ldr	r3, [sp, #16]
    b066:	429a      	cmp	r2, r3
    b068:	d3eb      	bcc.n	b042 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    b06a:	9a06      	ldr	r2, [sp, #24]
    b06c:	9b04      	ldr	r3, [sp, #16]
    b06e:	429a      	cmp	r2, r3
    b070:	d301      	bcc.n	b076 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    b072:	2302      	movs	r3, #2
    b074:	9307      	str	r3, [sp, #28]
    }

    return Status;
    b076:	9b07      	ldr	r3, [sp, #28]
}
    b078:	4618      	mov	r0, r3
    b07a:	b009      	add	sp, #36	; 0x24
    b07c:	f85d fb04 	ldr.w	pc, [sp], #4
    b080:	000197e0 	.word	0x000197e0
    b084:	000186a0 	.word	0x000186a0

0000b088 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    b088:	b500      	push	{lr}
    b08a:	b085      	sub	sp, #20
    b08c:	9001      	str	r0, [sp, #4]
    b08e:	460b      	mov	r3, r1
    b090:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b094:	4a0c      	ldr	r2, [pc, #48]	; (b0c8 <Adc_Ip_EnableChannelNotification+0x40>)
    b096:	9b01      	ldr	r3, [sp, #4]
    b098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b09c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    b09e:	f007 f827 	bl	120f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    b0a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b0a6:	9b03      	ldr	r3, [sp, #12]
    b0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b0ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b0b0:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    b0b4:	9b03      	ldr	r3, [sp, #12]
    b0b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    b0ba:	f007 f845 	bl	12148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    b0be:	bf00      	nop
    b0c0:	b005      	add	sp, #20
    b0c2:	f85d fb04 	ldr.w	pc, [sp], #4
    b0c6:	bf00      	nop
    b0c8:	000197e0 	.word	0x000197e0

0000b0cc <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    b0cc:	b500      	push	{lr}
    b0ce:	b085      	sub	sp, #20
    b0d0:	9001      	str	r0, [sp, #4]
    b0d2:	460b      	mov	r3, r1
    b0d4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b0d8:	4a0c      	ldr	r2, [pc, #48]	; (b10c <Adc_Ip_DisableChannelNotification+0x40>)
    b0da:	9b01      	ldr	r3, [sp, #4]
    b0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0e0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    b0e2:	f007 f857 	bl	12194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    b0e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b0ea:	9b03      	ldr	r3, [sp, #12]
    b0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b0f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b0f4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    b0f8:	9b03      	ldr	r3, [sp, #12]
    b0fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    b0fe:	f007 f875 	bl	121ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    b102:	bf00      	nop
    b104:	b005      	add	sp, #20
    b106:	f85d fb04 	ldr.w	pc, [sp], #4
    b10a:	bf00      	nop
    b10c:	000197e0 	.word	0x000197e0

0000b110 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    b110:	b500      	push	{lr}
    b112:	b085      	sub	sp, #20
    b114:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b116:	4a0a      	ldr	r2, [pc, #40]	; (b140 <Adc_Ip_ClearTrigErrReg+0x30>)
    b118:	9b01      	ldr	r3, [sp, #4]
    b11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b11e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    b120:	f007 f9d2 	bl	124c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    b124:	9b03      	ldr	r3, [sp, #12]
    b126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b12a:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    b12e:	9b03      	ldr	r3, [sp, #12]
    b130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    b134:	f007 f9f4 	bl	12520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    b138:	bf00      	nop
    b13a:	b005      	add	sp, #20
    b13c:	f85d fb04 	ldr.w	pc, [sp], #4
    b140:	000197e0 	.word	0x000197e0

0000b144 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    b144:	b084      	sub	sp, #16
    b146:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b148:	4a06      	ldr	r2, [pc, #24]	; (b164 <Adc_Ip_GetTrigErrReg+0x20>)
    b14a:	9b01      	ldr	r3, [sp, #4]
    b14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b150:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    b152:	9b03      	ldr	r3, [sp, #12]
    b154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b158:	0e1b      	lsrs	r3, r3, #24
    b15a:	f003 030f 	and.w	r3, r3, #15
}
    b15e:	4618      	mov	r0, r3
    b160:	b004      	add	sp, #16
    b162:	4770      	bx	lr
    b164:	000197e0 	.word	0x000197e0

0000b168 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    b168:	b082      	sub	sp, #8
    b16a:	9001      	str	r0, [sp, #4]
    b16c:	460b      	mov	r3, r1
    b16e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    b172:	4a06      	ldr	r2, [pc, #24]	; (b18c <Adc_Ip_GetDataAddress+0x24>)
    b174:	9b01      	ldr	r3, [sp, #4]
    b176:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    b17a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b17e:	3312      	adds	r3, #18
    b180:	009b      	lsls	r3, r3, #2
    b182:	4413      	add	r3, r2
}
    b184:	4618      	mov	r0, r3
    b186:	b002      	add	sp, #8
    b188:	4770      	bx	lr
    b18a:	bf00      	nop
    b18c:	000197e0 	.word	0x000197e0

0000b190 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    b190:	b088      	sub	sp, #32
    b192:	9003      	str	r0, [sp, #12]
    b194:	9102      	str	r1, [sp, #8]
    b196:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b198:	4a25      	ldr	r2, [pc, #148]	; (b230 <Adc_Ip_GetChanData+0xa0>)
    b19a:	9b03      	ldr	r3, [sp, #12]
    b19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1a0:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    b1a2:	2300      	movs	r3, #0
    b1a4:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    b1a6:	2300      	movs	r3, #0
    b1a8:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    b1ac:	2300      	movs	r3, #0
    b1ae:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b1b2:	2300      	movs	r3, #0
    b1b4:	f88d 3019 	strb.w	r3, [sp, #25]
    b1b8:	e019      	b.n	b1ee <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    b1ba:	f89d 1019 	ldrb.w	r1, [sp, #25]
    b1be:	481d      	ldr	r0, [pc, #116]	; (b234 <Adc_Ip_GetChanData+0xa4>)
    b1c0:	9a03      	ldr	r2, [sp, #12]
    b1c2:	4613      	mov	r3, r2
    b1c4:	00db      	lsls	r3, r3, #3
    b1c6:	4413      	add	r3, r2
    b1c8:	005b      	lsls	r3, r3, #1
    b1ca:	4413      	add	r3, r2
    b1cc:	440b      	add	r3, r1
    b1ce:	3302      	adds	r3, #2
    b1d0:	009b      	lsls	r3, r3, #2
    b1d2:	4403      	add	r3, r0
    b1d4:	685b      	ldr	r3, [r3, #4]
    b1d6:	9a02      	ldr	r2, [sp, #8]
    b1d8:	429a      	cmp	r2, r3
    b1da:	d103      	bne.n	b1e4 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    b1dc:	2301      	movs	r3, #1
    b1de:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    b1e2:	e008      	b.n	b1f6 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b1e4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b1e8:	3301      	adds	r3, #1
    b1ea:	f88d 3019 	strb.w	r3, [sp, #25]
    b1ee:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b1f2:	2b0f      	cmp	r3, #15
    b1f4:	d9e1      	bls.n	b1ba <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    b1f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	d00e      	beq.n	b21c <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    b1fe:	f89d 2019 	ldrb.w	r2, [sp, #25]
    b202:	9b05      	ldr	r3, [sp, #20]
    b204:	3212      	adds	r2, #18
    b206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b20a:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    b20e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b212:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b216:	f8ad 301a 	strh.w	r3, [sp, #26]
    b21a:	e001      	b.n	b220 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    b21c:	2301      	movs	r3, #1
    b21e:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    b220:	9b01      	ldr	r3, [sp, #4]
    b222:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    b226:	801a      	strh	r2, [r3, #0]

    return Status;
    b228:	9b07      	ldr	r3, [sp, #28]
}
    b22a:	4618      	mov	r0, r3
    b22c:	b008      	add	sp, #32
    b22e:	4770      	bx	lr
    b230:	000197e0 	.word	0x000197e0
    b234:	1fff8d80 	.word	0x1fff8d80

0000b238 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    b238:	b500      	push	{lr}
    b23a:	b085      	sub	sp, #20
    b23c:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    b23e:	2300      	movs	r3, #0
    b240:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    b244:	2300      	movs	r3, #0
    b246:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    b24a:	4a32      	ldr	r2, [pc, #200]	; (b314 <Adc_Ip_IRQHandler+0xdc>)
    b24c:	9b01      	ldr	r3, [sp, #4]
    b24e:	214c      	movs	r1, #76	; 0x4c
    b250:	fb01 f303 	mul.w	r3, r1, r3
    b254:	4413      	add	r3, r2
    b256:	781b      	ldrb	r3, [r3, #0]
    b258:	2b00      	cmp	r3, #0
    b25a:	d040      	beq.n	b2de <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    b25c:	4a2d      	ldr	r2, [pc, #180]	; (b314 <Adc_Ip_IRQHandler+0xdc>)
    b25e:	9b01      	ldr	r3, [sp, #4]
    b260:	214c      	movs	r1, #76	; 0x4c
    b262:	fb01 f303 	mul.w	r3, r1, r3
    b266:	4413      	add	r3, r2
    b268:	3308      	adds	r3, #8
    b26a:	681b      	ldr	r3, [r3, #0]
    b26c:	2b00      	cmp	r3, #0
    b26e:	d04d      	beq.n	b30c <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b270:	2300      	movs	r3, #0
    b272:	f88d 300f 	strb.w	r3, [sp, #15]
    b276:	e02d      	b.n	b2d4 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    b278:	4a27      	ldr	r2, [pc, #156]	; (b318 <Adc_Ip_IRQHandler+0xe0>)
    b27a:	9b01      	ldr	r3, [sp, #4]
    b27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b280:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b288:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    b28a:	9802      	ldr	r0, [sp, #8]
    b28c:	f7ff fa20 	bl	a6d0 <Adc_HwAcc_GetAIEN>
    b290:	4603      	mov	r3, r0
    b292:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    b296:	9802      	ldr	r0, [sp, #8]
    b298:	f7ff fa28 	bl	a6ec <Adc_HwAcc_GetCOCO>
    b29c:	4603      	mov	r3, r0
    b29e:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    b2a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b2a6:	2b00      	cmp	r3, #0
    b2a8:	d00f      	beq.n	b2ca <Adc_Ip_IRQHandler+0x92>
    b2aa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b2ae:	2b00      	cmp	r3, #0
    b2b0:	d00b      	beq.n	b2ca <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    b2b2:	4a18      	ldr	r2, [pc, #96]	; (b314 <Adc_Ip_IRQHandler+0xdc>)
    b2b4:	9b01      	ldr	r3, [sp, #4]
    b2b6:	214c      	movs	r1, #76	; 0x4c
    b2b8:	fb01 f303 	mul.w	r3, r1, r3
    b2bc:	4413      	add	r3, r2
    b2be:	3308      	adds	r3, #8
    b2c0:	681b      	ldr	r3, [r3, #0]
    b2c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b2c6:	4610      	mov	r0, r2
    b2c8:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b2ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b2ce:	3301      	adds	r3, #1
    b2d0:	f88d 300f 	strb.w	r3, [sp, #15]
    b2d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b2d8:	2b0f      	cmp	r3, #15
    b2da:	d9cd      	bls.n	b278 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    b2dc:	e016      	b.n	b30c <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b2de:	2300      	movs	r3, #0
    b2e0:	f88d 300f 	strb.w	r3, [sp, #15]
    b2e4:	e00e      	b.n	b304 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    b2e6:	4a0c      	ldr	r2, [pc, #48]	; (b318 <Adc_Ip_IRQHandler+0xe0>)
    b2e8:	9b01      	ldr	r3, [sp, #4]
    b2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2ee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b2f2:	4611      	mov	r1, r2
    b2f4:	4618      	mov	r0, r3
    b2f6:	f7ff fa07 	bl	a708 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b2fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b2fe:	3301      	adds	r3, #1
    b300:	f88d 300f 	strb.w	r3, [sp, #15]
    b304:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b308:	2b0f      	cmp	r3, #15
    b30a:	d9ec      	bls.n	b2e6 <Adc_Ip_IRQHandler+0xae>
}
    b30c:	bf00      	nop
    b30e:	b005      	add	sp, #20
    b310:	f85d fb04 	ldr.w	pc, [sp], #4
    b314:	1fff8d80 	.word	0x1fff8d80
    b318:	000197e0 	.word	0x000197e0

0000b31c <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    b31c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    b31e:	2000      	movs	r0, #0
    b320:	f7ff ff8a 	bl	b238 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    b324:	f3bf 8f4f 	dsb	sy
}
    b328:	bf00      	nop
    b32a:	bd08      	pop	{r3, pc}

0000b32c <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    b32c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    b32e:	2001      	movs	r0, #1
    b330:	f7ff ff82 	bl	b238 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    b334:	f3bf 8f4f 	dsb	sy
}
    b338:	bf00      	nop
    b33a:	bd08      	pop	{r3, pc}

0000b33c <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    b33c:	b510      	push	{r4, lr}
    b33e:	b084      	sub	sp, #16
    b340:	4603      	mov	r3, r0
    b342:	460a      	mov	r2, r1
    b344:	f88d 3007 	strb.w	r3, [sp, #7]
    b348:	4613      	mov	r3, r2
    b34a:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    b34e:	2300      	movs	r3, #0
    b350:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    b354:	2300      	movs	r3, #0
    b356:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    b35a:	f006 f8b3 	bl	114c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    b35e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b362:	4a24      	ldr	r2, [pc, #144]	; (b3f4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b364:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    b368:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    b36c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b370:	2b01      	cmp	r3, #1
    b372:	d806      	bhi.n	b382 <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    b374:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b378:	4a1e      	ldr	r2, [pc, #120]	; (b3f4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b37a:	2100      	movs	r1, #0
    b37c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    b380:	e032      	b.n	b3e8 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    b382:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b386:	3301      	adds	r3, #1
    b388:	f8ad 300e 	strh.w	r3, [sp, #14]
    b38c:	e01b      	b.n	b3c6 <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    b38e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    b392:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b396:	f89d 1007 	ldrb.w	r1, [sp, #7]
    b39a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    b39e:	3a01      	subs	r2, #1
    b3a0:	4c14      	ldr	r4, [pc, #80]	; (b3f4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b3a2:	0080      	lsls	r0, r0, #2
    b3a4:	4403      	add	r3, r0
    b3a6:	005b      	lsls	r3, r3, #1
    b3a8:	4423      	add	r3, r4
    b3aa:	885b      	ldrh	r3, [r3, #2]
    b3ac:	b29c      	uxth	r4, r3
    b3ae:	4811      	ldr	r0, [pc, #68]	; (b3f4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b3b0:	008b      	lsls	r3, r1, #2
    b3b2:	4413      	add	r3, r2
    b3b4:	005b      	lsls	r3, r3, #1
    b3b6:	4403      	add	r3, r0
    b3b8:	4622      	mov	r2, r4
    b3ba:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    b3bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b3c0:	3301      	adds	r3, #1
    b3c2:	f8ad 300e 	strh.w	r3, [sp, #14]
    b3c6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    b3ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b3ce:	429a      	cmp	r2, r3
    b3d0:	d3dd      	bcc.n	b38e <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    b3d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b3d6:	4a07      	ldr	r2, [pc, #28]	; (b3f4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b3d8:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    b3dc:	b292      	uxth	r2, r2
    b3de:	3a01      	subs	r2, #1
    b3e0:	b291      	uxth	r1, r2
    b3e2:	4a04      	ldr	r2, [pc, #16]	; (b3f4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b3e4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    b3e8:	f006 f898 	bl	1151c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    b3ec:	bf00      	nop
    b3ee:	b004      	add	sp, #16
    b3f0:	bd10      	pop	{r4, pc}
    b3f2:	bf00      	nop
    b3f4:	1fff8d70 	.word	0x1fff8d70

0000b3f8 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    b3f8:	b500      	push	{lr}
    b3fa:	b087      	sub	sp, #28
    b3fc:	9003      	str	r0, [sp, #12]
    b3fe:	9102      	str	r1, [sp, #8]
    b400:	9201      	str	r2, [sp, #4]
    b402:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    b406:	2300      	movs	r3, #0
    b408:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    b40c:	9b03      	ldr	r3, [sp, #12]
    b40e:	789b      	ldrb	r3, [r3, #2]
    b410:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    b414:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b418:	4a29      	ldr	r2, [pc, #164]	; (b4c0 <Adc_Ipw_ReadGroupConvData+0xc8>)
    b41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b41e:	681a      	ldr	r2, [r3, #0]
    b420:	f89d 3015 	ldrb.w	r3, [sp, #21]
    b424:	4413      	add	r3, r2
    b426:	7c1b      	ldrb	r3, [r3, #16]
    b428:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    b42c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b430:	4a23      	ldr	r2, [pc, #140]	; (b4c0 <Adc_Ipw_ReadGroupConvData+0xc8>)
    b432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b436:	681b      	ldr	r3, [r3, #0]
    b438:	f89d 2015 	ldrb.w	r2, [sp, #21]
    b43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b440:	695b      	ldr	r3, [r3, #20]
    b442:	4618      	mov	r0, r3
    b444:	f000 fbce 	bl	bbe4 <Adc_Ipw_CalculateNumsBitShift>
    b448:	4603      	mov	r3, r0
    b44a:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    b44e:	9b03      	ldr	r3, [sp, #12]
    b450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b454:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    b458:	2300      	movs	r3, #0
    b45a:	f88d 3017 	strb.w	r3, [sp, #23]
    b45e:	e022      	b.n	b4a6 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    b460:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b464:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b468:	4611      	mov	r1, r2
    b46a:	4618      	mov	r0, r3
    b46c:	f7ff fcf4 	bl	ae58 <Adc_Ip_GetConvData>
    b470:	4603      	mov	r3, r0
    b472:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    b476:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b47a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b47e:	fa02 f303 	lsl.w	r3, r2, r3
    b482:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    b486:	9b01      	ldr	r3, [sp, #4]
    b488:	2201      	movs	r2, #1
    b48a:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    b48c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b490:	005b      	lsls	r3, r3, #1
    b492:	9a02      	ldr	r2, [sp, #8]
    b494:	4413      	add	r3, r2
    b496:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b49a:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    b49c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b4a0:	3301      	adds	r3, #1
    b4a2:	f88d 3017 	strb.w	r3, [sp, #23]
    b4a6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b4aa:	f89d 3012 	ldrb.w	r3, [sp, #18]
    b4ae:	429a      	cmp	r2, r3
    b4b0:	d3d6      	bcc.n	b460 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    b4b2:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    b4b6:	4618      	mov	r0, r3
    b4b8:	b007      	add	sp, #28
    b4ba:	f85d fb04 	ldr.w	pc, [sp], #4
    b4be:	bf00      	nop
    b4c0:	1fff8d40 	.word	0x1fff8d40

0000b4c4 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    b4c4:	b500      	push	{lr}
    b4c6:	b087      	sub	sp, #28
    b4c8:	9003      	str	r0, [sp, #12]
    b4ca:	9102      	str	r1, [sp, #8]
    b4cc:	9201      	str	r2, [sp, #4]
    b4ce:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    b4d2:	2301      	movs	r3, #1
    b4d4:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    b4d8:	2300      	movs	r3, #0
    b4da:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    b4de:	9b03      	ldr	r3, [sp, #12]
    b4e0:	789b      	ldrb	r3, [r3, #2]
    b4e2:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    b4e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b4ea:	4a19      	ldr	r2, [pc, #100]	; (b550 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    b4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4f0:	681a      	ldr	r2, [r3, #0]
    b4f2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    b4f6:	4413      	add	r3, r2
    b4f8:	7c1b      	ldrb	r3, [r3, #16]
    b4fa:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    b4fe:	9b03      	ldr	r3, [sp, #12]
    b500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b504:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    b508:	f89d 2013 	ldrb.w	r2, [sp, #19]
    b50c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b510:	2100      	movs	r1, #0
    b512:	4618      	mov	r0, r3
    b514:	f000 fe2a 	bl	c16c <Adc_Ipw_CheckValidConversion>
    b518:	4603      	mov	r3, r0
    b51a:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    b51e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b522:	2b00      	cmp	r3, #0
    b524:	d00a      	beq.n	b53c <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    b526:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b52a:	9a01      	ldr	r2, [sp, #4]
    b52c:	9902      	ldr	r1, [sp, #8]
    b52e:	9803      	ldr	r0, [sp, #12]
    b530:	f7ff ff62 	bl	b3f8 <Adc_Ipw_ReadGroupConvData>
    b534:	4603      	mov	r3, r0
    b536:	f88d 3017 	strb.w	r3, [sp, #23]
    b53a:	e002      	b.n	b542 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    b53c:	2301      	movs	r3, #1
    b53e:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    b542:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    b546:	4618      	mov	r0, r3
    b548:	b007      	add	sp, #28
    b54a:	f85d fb04 	ldr.w	pc, [sp], #4
    b54e:	bf00      	nop
    b550:	1fff8d40 	.word	0x1fff8d40

0000b554 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    b554:	b088      	sub	sp, #32
    b556:	4603      	mov	r3, r0
    b558:	9100      	str	r1, [sp, #0]
    b55a:	f8ad 3006 	strh.w	r3, [sp, #6]
    b55e:	4613      	mov	r3, r2
    b560:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    b564:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b568:	4a3a      	ldr	r2, [pc, #232]	; (b654 <Adc_Ipw_WriteDataBuffer+0x100>)
    b56a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b56e:	68da      	ldr	r2, [r3, #12]
    b570:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b574:	005b      	lsls	r3, r3, #1
    b576:	4413      	add	r3, r2
    b578:	881b      	ldrh	r3, [r3, #0]
    b57a:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    b57e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b582:	4a34      	ldr	r2, [pc, #208]	; (b654 <Adc_Ipw_WriteDataBuffer+0x100>)
    b584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b588:	685a      	ldr	r2, [r3, #4]
    b58a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    b58e:	2134      	movs	r1, #52	; 0x34
    b590:	fb01 f303 	mul.w	r3, r1, r3
    b594:	4413      	add	r3, r2
    b596:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    b598:	9b04      	ldr	r3, [sp, #16]
    b59a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b59e:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    b5a2:	2300      	movs	r3, #0
    b5a4:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    b5a6:	2300      	movs	r3, #0
    b5a8:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    b5ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b5b0:	4929      	ldr	r1, [pc, #164]	; (b658 <Adc_Ipw_WriteDataBuffer+0x104>)
    b5b2:	4613      	mov	r3, r2
    b5b4:	009b      	lsls	r3, r3, #2
    b5b6:	4413      	add	r3, r2
    b5b8:	009b      	lsls	r3, r3, #2
    b5ba:	440b      	add	r3, r1
    b5bc:	3308      	adds	r3, #8
    b5be:	881b      	ldrh	r3, [r3, #0]
    b5c0:	b29b      	uxth	r3, r3
    b5c2:	3b01      	subs	r3, #1
    b5c4:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    b5c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b5cc:	4922      	ldr	r1, [pc, #136]	; (b658 <Adc_Ipw_WriteDataBuffer+0x104>)
    b5ce:	4613      	mov	r3, r2
    b5d0:	009b      	lsls	r3, r3, #2
    b5d2:	4413      	add	r3, r2
    b5d4:	009b      	lsls	r3, r3, #2
    b5d6:	440b      	add	r3, r1
    b5d8:	3308      	adds	r3, #8
    b5da:	881b      	ldrh	r3, [r3, #0]
    b5dc:	b29b      	uxth	r3, r3
    b5de:	2b00      	cmp	r3, #0
    b5e0:	d104      	bne.n	b5ec <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    b5e2:	9b04      	ldr	r3, [sp, #16]
    b5e4:	8b9b      	ldrh	r3, [r3, #28]
    b5e6:	3b01      	subs	r3, #1
    b5e8:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    b5ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b5f0:	4919      	ldr	r1, [pc, #100]	; (b658 <Adc_Ipw_WriteDataBuffer+0x104>)
    b5f2:	4613      	mov	r3, r2
    b5f4:	009b      	lsls	r3, r3, #2
    b5f6:	4413      	add	r3, r2
    b5f8:	009b      	lsls	r3, r3, #2
    b5fa:	440b      	add	r3, r1
    b5fc:	330c      	adds	r3, #12
    b5fe:	681a      	ldr	r2, [r3, #0]
    b600:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    b604:	005b      	lsls	r3, r3, #1
    b606:	4413      	add	r3, r2
    b608:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    b60a:	9b04      	ldr	r3, [sp, #16]
    b60c:	8b9b      	ldrh	r3, [r3, #28]
    b60e:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    b612:	2300      	movs	r3, #0
    b614:	f88d 301f 	strb.w	r3, [sp, #31]
    b618:	e012      	b.n	b640 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    b61a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b61e:	005b      	lsls	r3, r3, #1
    b620:	9a00      	ldr	r2, [sp, #0]
    b622:	4413      	add	r3, r2
    b624:	9a06      	ldr	r2, [sp, #24]
    b626:	8812      	ldrh	r2, [r2, #0]
    b628:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    b62a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b62e:	005b      	lsls	r3, r3, #1
    b630:	9a06      	ldr	r2, [sp, #24]
    b632:	4413      	add	r3, r2
    b634:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    b636:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b63a:	3301      	adds	r3, #1
    b63c:	f88d 301f 	strb.w	r3, [sp, #31]
    b640:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b644:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b648:	429a      	cmp	r2, r3
    b64a:	d3e6      	bcc.n	b61a <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    b64c:	bf00      	nop
    b64e:	bf00      	nop
    b650:	b008      	add	sp, #32
    b652:	4770      	bx	lr
    b654:	1fff8d40 	.word	0x1fff8d40
    b658:	1fff8d48 	.word	0x1fff8d48

0000b65c <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    b65c:	b500      	push	{lr}
    b65e:	b089      	sub	sp, #36	; 0x24
    b660:	9200      	str	r2, [sp, #0]
    b662:	461a      	mov	r2, r3
    b664:	4603      	mov	r3, r0
    b666:	f88d 3007 	strb.w	r3, [sp, #7]
    b66a:	460b      	mov	r3, r1
    b66c:	f8ad 3004 	strh.w	r3, [sp, #4]
    b670:	4613      	mov	r3, r2
    b672:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    b676:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b67a:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    b67e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b682:	f003 0307 	and.w	r3, r3, #7
    b686:	b2db      	uxtb	r3, r3
    b688:	2b00      	cmp	r3, #0
    b68a:	d006      	beq.n	b69a <Adc_Ipw_ConfigurePdbChannels+0x3e>
    b68c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b690:	08db      	lsrs	r3, r3, #3
    b692:	b2db      	uxtb	r3, r3
    b694:	3301      	adds	r3, #1
    b696:	b2db      	uxtb	r3, r3
    b698:	e003      	b.n	b6a2 <Adc_Ipw_ConfigurePdbChannels+0x46>
    b69a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b69e:	08db      	lsrs	r3, r3, #3
    b6a0:	b2db      	uxtb	r3, r3
    b6a2:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    b6a6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b6aa:	4987      	ldr	r1, [pc, #540]	; (b8c8 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    b6ac:	4613      	mov	r3, r2
    b6ae:	009b      	lsls	r3, r3, #2
    b6b0:	4413      	add	r3, r2
    b6b2:	009b      	lsls	r3, r3, #2
    b6b4:	440b      	add	r3, r1
    b6b6:	3310      	adds	r3, #16
    b6b8:	781b      	ldrb	r3, [r3, #0]
    b6ba:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    b6be:	4b83      	ldr	r3, [pc, #524]	; (b8cc <Adc_Ipw_ConfigurePdbChannels+0x270>)
    b6c0:	681b      	ldr	r3, [r3, #0]
    b6c2:	681a      	ldr	r2, [r3, #0]
    b6c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b6c8:	4413      	add	r3, r2
    b6ca:	7c1b      	ldrb	r3, [r3, #16]
    b6cc:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    b6d0:	9b00      	ldr	r3, [sp, #0]
    b6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b6d4:	691b      	ldr	r3, [r3, #16]
    b6d6:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    b6d8:	2300      	movs	r3, #0
    b6da:	f88d 301f 	strb.w	r3, [sp, #31]
    b6de:	e0e6      	b.n	b8ae <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    b6e0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    b6e4:	08db      	lsrs	r3, r3, #3
    b6e6:	b2db      	uxtb	r3, r3
    b6e8:	2b00      	cmp	r3, #0
    b6ea:	d102      	bne.n	b6f2 <Adc_Ipw_ConfigurePdbChannels+0x96>
    b6ec:	f89d 301d 	ldrb.w	r3, [sp, #29]
    b6f0:	e000      	b.n	b6f4 <Adc_Ipw_ConfigurePdbChannels+0x98>
    b6f2:	2308      	movs	r3, #8
    b6f4:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    b6f8:	9b00      	ldr	r3, [sp, #0]
    b6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b6fc:	7bdb      	ldrb	r3, [r3, #15]
    b6fe:	2b00      	cmp	r3, #0
    b700:	d05e      	beq.n	b7c0 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    b702:	9b00      	ldr	r3, [sp, #0]
    b704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b706:	7b9b      	ldrb	r3, [r3, #14]
    b708:	f083 0301 	eor.w	r3, r3, #1
    b70c:	b2db      	uxtb	r3, r3
    b70e:	2b00      	cmp	r3, #0
    b710:	d02a      	beq.n	b768 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    b712:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b716:	f1c3 0308 	rsb	r3, r3, #8
    b71a:	22ff      	movs	r2, #255	; 0xff
    b71c:	fa22 f303 	lsr.w	r3, r2, r3
    b720:	b2db      	uxtb	r3, r3
    b722:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    b726:	2300      	movs	r3, #0
    b728:	f88d 301e 	strb.w	r3, [sp, #30]
    b72c:	e015      	b.n	b75a <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    b72e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b732:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    b736:	f89d 301e 	ldrb.w	r3, [sp, #30]
    b73a:	4413      	add	r3, r2
    b73c:	005b      	lsls	r3, r3, #1
    b73e:	9a05      	ldr	r2, [sp, #20]
    b740:	4413      	add	r3, r2
    b742:	881b      	ldrh	r3, [r3, #0]
    b744:	f89d 201e 	ldrb.w	r2, [sp, #30]
    b748:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b74c:	f001 fd16 	bl	d17c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    b750:	f89d 301e 	ldrb.w	r3, [sp, #30]
    b754:	3301      	adds	r3, #1
    b756:	f88d 301e 	strb.w	r3, [sp, #30]
    b75a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    b75e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b762:	429a      	cmp	r2, r3
    b764:	d3e3      	bcc.n	b72e <Adc_Ipw_ConfigurePdbChannels+0xd2>
    b766:	e051      	b.n	b80c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    b768:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b76c:	2b00      	cmp	r3, #0
    b76e:	d110      	bne.n	b792 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    b770:	2301      	movs	r3, #1
    b772:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    b776:	9b05      	ldr	r3, [sp, #20]
    b778:	881b      	ldrh	r3, [r3, #0]
    b77a:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    b77e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b782:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b786:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b78a:	2200      	movs	r2, #0
    b78c:	f001 fcf6 	bl	d17c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    b790:	e03c      	b.n	b80c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    b792:	2301      	movs	r3, #1
    b794:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    b798:	9b00      	ldr	r3, [sp, #0]
    b79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b79c:	899a      	ldrh	r2, [r3, #12]
    b79e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b7a2:	b29b      	uxth	r3, r3
    b7a4:	fb12 f303 	smulbb	r3, r2, r3
    b7a8:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    b7ac:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b7b0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b7b4:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b7b8:	2200      	movs	r2, #0
    b7ba:	f001 fcdf 	bl	d17c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    b7be:	e025      	b.n	b80c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    b7c0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b7c4:	2b00      	cmp	r3, #0
    b7c6:	d10b      	bne.n	b7e0 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    b7c8:	2301      	movs	r3, #1
    b7ca:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    b7ce:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b7d2:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b7d6:	2300      	movs	r3, #0
    b7d8:	2200      	movs	r2, #0
    b7da:	f001 fccf 	bl	d17c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    b7de:	e015      	b.n	b80c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    b7e0:	2301      	movs	r3, #1
    b7e2:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    b7e6:	9b00      	ldr	r3, [sp, #0]
    b7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b7ea:	899a      	ldrh	r2, [r3, #12]
    b7ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b7f0:	b29b      	uxth	r3, r3
    b7f2:	fb12 f303 	smulbb	r3, r2, r3
    b7f6:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    b7fa:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b7fe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b802:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b806:	2200      	movs	r2, #0
    b808:	f001 fcb8 	bl	d17c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    b80c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b810:	4618      	mov	r0, r3
    b812:	f001 fb87 	bl	cf24 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    b816:	f89d 201d 	ldrb.w	r2, [sp, #29]
    b81a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b81e:	1ad3      	subs	r3, r2, r3
    b820:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    b824:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b828:	b29a      	uxth	r2, r3
    b82a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b82e:	4413      	add	r3, r2
    b830:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    b834:	9b00      	ldr	r3, [sp, #0]
    b836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b838:	7b9b      	ldrb	r3, [r3, #14]
    b83a:	2b00      	cmp	r3, #0
    b83c:	d01d      	beq.n	b87a <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    b83e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b842:	2b00      	cmp	r3, #0
    b844:	d10c      	bne.n	b860 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    b846:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b84a:	f1c3 0308 	rsb	r3, r3, #8
    b84e:	22ff      	movs	r2, #255	; 0xff
    b850:	fa22 f303 	lsr.w	r3, r2, r3
    b854:	b2db      	uxtb	r3, r3
    b856:	3b01      	subs	r3, #1
    b858:	b2db      	uxtb	r3, r3
    b85a:	f88d 300e 	strb.w	r3, [sp, #14]
    b85e:	e00f      	b.n	b880 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    b860:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b864:	f1c3 0308 	rsb	r3, r3, #8
    b868:	22ff      	movs	r2, #255	; 0xff
    b86a:	fa22 f303 	lsr.w	r3, r2, r3
    b86e:	b2db      	uxtb	r3, r3
    b870:	3b01      	subs	r3, #1
    b872:	b2db      	uxtb	r3, r3
    b874:	f88d 300e 	strb.w	r3, [sp, #14]
    b878:	e002      	b.n	b880 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    b87a:	2300      	movs	r3, #0
    b87c:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    b880:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b884:	f1c3 0308 	rsb	r3, r3, #8
    b888:	22ff      	movs	r2, #255	; 0xff
    b88a:	fa22 f303 	lsr.w	r3, r2, r3
    b88e:	b2db      	uxtb	r3, r3
    b890:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    b894:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b898:	aa03      	add	r2, sp, #12
    b89a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b89e:	4618      	mov	r0, r3
    b8a0:	f001 fb7c 	bl	cf9c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    b8a4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b8a8:	3301      	adds	r3, #1
    b8aa:	f88d 301f 	strb.w	r3, [sp, #31]
    b8ae:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b8b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b8b6:	429a      	cmp	r2, r3
    b8b8:	f4ff af12 	bcc.w	b6e0 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    b8bc:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    b8c0:	4618      	mov	r0, r3
    b8c2:	b009      	add	sp, #36	; 0x24
    b8c4:	f85d fb04 	ldr.w	pc, [sp], #4
    b8c8:	1fff8d48 	.word	0x1fff8d48
    b8cc:	1fff8d40 	.word	0x1fff8d40

0000b8d0 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    b8d0:	b500      	push	{lr}
    b8d2:	b089      	sub	sp, #36	; 0x24
    b8d4:	9202      	str	r2, [sp, #8]
    b8d6:	9301      	str	r3, [sp, #4]
    b8d8:	4603      	mov	r3, r0
    b8da:	f88d 300f 	strb.w	r3, [sp, #15]
    b8de:	460b      	mov	r3, r1
    b8e0:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    b8e4:	2300      	movs	r3, #0
    b8e6:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    b8ea:	4b62      	ldr	r3, [pc, #392]	; (ba74 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    b8ec:	681b      	ldr	r3, [r3, #0]
    b8ee:	681a      	ldr	r2, [r3, #0]
    b8f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8f4:	4413      	add	r3, r2
    b8f6:	7c1b      	ldrb	r3, [r3, #16]
    b8f8:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    b8fc:	9b02      	ldr	r3, [sp, #8]
    b8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b900:	691b      	ldr	r3, [r3, #16]
    b902:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    b904:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b908:	f003 0307 	and.w	r3, r3, #7
    b90c:	b2db      	uxtb	r3, r3
    b90e:	2b00      	cmp	r3, #0
    b910:	d006      	beq.n	b920 <Adc_Ipw_ConfigurePdbConversion+0x50>
    b912:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b916:	08db      	lsrs	r3, r3, #3
    b918:	b2db      	uxtb	r3, r3
    b91a:	3301      	adds	r3, #1
    b91c:	b2db      	uxtb	r3, r3
    b91e:	e003      	b.n	b928 <Adc_Ipw_ConfigurePdbConversion+0x58>
    b920:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b924:	08db      	lsrs	r3, r3, #3
    b926:	b2db      	uxtb	r3, r3
    b928:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    b92c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    b930:	4618      	mov	r0, r3
    b932:	f001 fa61 	bl	cdf8 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    b936:	f89d 301b 	ldrb.w	r3, [sp, #27]
    b93a:	9901      	ldr	r1, [sp, #4]
    b93c:	4618      	mov	r0, r3
    b93e:	f001 fa89 	bl	ce54 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    b942:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b946:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b94a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b94e:	9a02      	ldr	r2, [sp, #8]
    b950:	f7ff fe84 	bl	b65c <Adc_Ipw_ConfigurePdbChannels>
    b954:	4603      	mov	r3, r0
    b956:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    b95a:	9b02      	ldr	r3, [sp, #8]
    b95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b95e:	7bdb      	ldrb	r3, [r3, #15]
    b960:	2b00      	cmp	r3, #0
    b962:	d02f      	beq.n	b9c4 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    b964:	9b02      	ldr	r3, [sp, #8]
    b966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b968:	7b9b      	ldrb	r3, [r3, #14]
    b96a:	f083 0301 	eor.w	r3, r3, #1
    b96e:	b2db      	uxtb	r3, r3
    b970:	2b00      	cmp	r3, #0
    b972:	d017      	beq.n	b9a4 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    b974:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b978:	493f      	ldr	r1, [pc, #252]	; (ba78 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    b97a:	4613      	mov	r3, r2
    b97c:	009b      	lsls	r3, r3, #2
    b97e:	4413      	add	r3, r2
    b980:	009b      	lsls	r3, r3, #2
    b982:	440b      	add	r3, r1
    b984:	3310      	adds	r3, #16
    b986:	781b      	ldrb	r3, [r3, #0]
    b988:	461a      	mov	r2, r3
    b98a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b98e:	4413      	add	r3, r2
    b990:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    b994:	3b01      	subs	r3, #1
    b996:	005b      	lsls	r3, r3, #1
    b998:	9a05      	ldr	r2, [sp, #20]
    b99a:	4413      	add	r3, r2
    b99c:	881b      	ldrh	r3, [r3, #0]
    b99e:	f8ad 301c 	strh.w	r3, [sp, #28]
    b9a2:	e01a      	b.n	b9da <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    b9a4:	9b05      	ldr	r3, [sp, #20]
    b9a6:	881a      	ldrh	r2, [r3, #0]
    b9a8:	9b02      	ldr	r3, [sp, #8]
    b9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b9ac:	8999      	ldrh	r1, [r3, #12]
    b9ae:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b9b2:	3b01      	subs	r3, #1
    b9b4:	b29b      	uxth	r3, r3
    b9b6:	fb11 f303 	smulbb	r3, r1, r3
    b9ba:	b29b      	uxth	r3, r3
    b9bc:	4413      	add	r3, r2
    b9be:	f8ad 301c 	strh.w	r3, [sp, #28]
    b9c2:	e00a      	b.n	b9da <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    b9c4:	9b02      	ldr	r3, [sp, #8]
    b9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b9c8:	899a      	ldrh	r2, [r3, #12]
    b9ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b9ce:	3b01      	subs	r3, #1
    b9d0:	b29b      	uxth	r3, r3
    b9d2:	fb12 f303 	smulbb	r3, r2, r3
    b9d6:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    b9da:	f89d 301b 	ldrb.w	r3, [sp, #27]
    b9de:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    b9e2:	4611      	mov	r1, r2
    b9e4:	4618      	mov	r0, r3
    b9e6:	f001 fab5 	bl	cf54 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    b9ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
    b9ee:	4618      	mov	r0, r3
    b9f0:	f001 fa98 	bl	cf24 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    b9f4:	2300      	movs	r3, #0
    b9f6:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    b9fa:	2300      	movs	r3, #0
    b9fc:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    ba00:	2300      	movs	r3, #0
    ba02:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    ba06:	e00c      	b.n	ba22 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    ba08:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ba0c:	aa04      	add	r2, sp, #16
    ba0e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    ba12:	4618      	mov	r0, r3
    ba14:	f001 fac2 	bl	cf9c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    ba18:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ba1c:	3301      	adds	r3, #1
    ba1e:	f88d 301f 	strb.w	r3, [sp, #31]
    ba22:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ba26:	2b01      	cmp	r3, #1
    ba28:	d9ee      	bls.n	ba08 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    ba2a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ba2e:	4912      	ldr	r1, [pc, #72]	; (ba78 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    ba30:	4613      	mov	r3, r2
    ba32:	009b      	lsls	r3, r3, #2
    ba34:	4413      	add	r3, r2
    ba36:	009b      	lsls	r3, r3, #2
    ba38:	440b      	add	r3, r1
    ba3a:	3310      	adds	r3, #16
    ba3c:	7819      	ldrb	r1, [r3, #0]
    ba3e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ba42:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    ba46:	440b      	add	r3, r1
    ba48:	b2d8      	uxtb	r0, r3
    ba4a:	490b      	ldr	r1, [pc, #44]	; (ba78 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    ba4c:	4613      	mov	r3, r2
    ba4e:	009b      	lsls	r3, r3, #2
    ba50:	4413      	add	r3, r2
    ba52:	009b      	lsls	r3, r3, #2
    ba54:	440b      	add	r3, r1
    ba56:	3310      	adds	r3, #16
    ba58:	4602      	mov	r2, r0
    ba5a:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    ba5c:	9b01      	ldr	r3, [sp, #4]
    ba5e:	2b0f      	cmp	r3, #15
    ba60:	d104      	bne.n	ba6c <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    ba62:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ba66:	4618      	mov	r0, r3
    ba68:	f001 fa34 	bl	ced4 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    ba6c:	bf00      	nop
    ba6e:	b009      	add	sp, #36	; 0x24
    ba70:	f85d fb04 	ldr.w	pc, [sp], #4
    ba74:	1fff8d40 	.word	0x1fff8d40
    ba78:	1fff8d48 	.word	0x1fff8d48

0000ba7c <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    ba7c:	b500      	push	{lr}
    ba7e:	b087      	sub	sp, #28
    ba80:	4603      	mov	r3, r0
    ba82:	f88d 3007 	strb.w	r3, [sp, #7]
    ba86:	460b      	mov	r3, r1
    ba88:	f8ad 3004 	strh.w	r3, [sp, #4]
    ba8c:	4613      	mov	r3, r2
    ba8e:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    ba92:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ba96:	4a36      	ldr	r2, [pc, #216]	; (bb70 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    ba98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba9c:	68da      	ldr	r2, [r3, #12]
    ba9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    baa2:	005b      	lsls	r3, r3, #1
    baa4:	4413      	add	r3, r2
    baa6:	881b      	ldrh	r3, [r3, #0]
    baa8:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    baac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bab0:	4a2f      	ldr	r2, [pc, #188]	; (bb70 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bab6:	681a      	ldr	r2, [r3, #0]
    bab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    babc:	4413      	add	r3, r2
    babe:	7c1b      	ldrb	r3, [r3, #16]
    bac0:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    bac4:	2300      	movs	r3, #0
    bac6:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    baca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bace:	4618      	mov	r0, r3
    bad0:	f001 fb7e 	bl	d1d0 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    bad4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bad8:	4a25      	ldr	r2, [pc, #148]	; (bb70 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bade:	685a      	ldr	r2, [r3, #4]
    bae0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bae4:	2134      	movs	r1, #52	; 0x34
    bae6:	fb01 f303 	mul.w	r3, r1, r3
    baea:	4413      	add	r3, r2
    baec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    baf0:	2b01      	cmp	r3, #1
    baf2:	d114      	bne.n	bb1e <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    baf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    baf8:	4a1d      	ldr	r2, [pc, #116]	; (bb70 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bafe:	685a      	ldr	r2, [r3, #4]
    bb00:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bb04:	2134      	movs	r1, #52	; 0x34
    bb06:	fb01 f303 	mul.w	r3, r1, r3
    bb0a:	4413      	add	r3, r2
    bb0c:	689b      	ldr	r3, [r3, #8]
    bb0e:	2b01      	cmp	r3, #1
    bb10:	d105      	bne.n	bb1e <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    bb12:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bb16:	2100      	movs	r1, #0
    bb18:	4618      	mov	r0, r3
    bb1a:	f7ff f827 	bl	ab6c <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    bb1e:	2300      	movs	r3, #0
    bb20:	f88d 3016 	strb.w	r3, [sp, #22]
    bb24:	e013      	b.n	bb4e <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    bb26:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bb2a:	f89d 1016 	ldrb.w	r1, [sp, #22]
    bb2e:	2201      	movs	r2, #1
    bb30:	4618      	mov	r0, r3
    bb32:	f7ff f8cd 	bl	acd0 <Adc_Ip_SetDisabledChannel>
    bb36:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    bb38:	9b03      	ldr	r3, [sp, #12]
    bb3a:	2b02      	cmp	r3, #2
    bb3c:	d102      	bne.n	bb44 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    bb3e:	2301      	movs	r3, #1
    bb40:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    bb44:	f89d 3016 	ldrb.w	r3, [sp, #22]
    bb48:	3301      	adds	r3, #1
    bb4a:	f88d 3016 	strb.w	r3, [sp, #22]
    bb4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bb52:	4a08      	ldr	r2, [pc, #32]	; (bb74 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    bb54:	00db      	lsls	r3, r3, #3
    bb56:	4413      	add	r3, r2
    bb58:	799b      	ldrb	r3, [r3, #6]
    bb5a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    bb5e:	429a      	cmp	r2, r3
    bb60:	d3e1      	bcc.n	bb26 <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    bb62:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    bb66:	4618      	mov	r0, r3
    bb68:	b007      	add	sp, #28
    bb6a:	f85d fb04 	ldr.w	pc, [sp], #4
    bb6e:	bf00      	nop
    bb70:	1fff8d40 	.word	0x1fff8d40
    bb74:	1fff8d70 	.word	0x1fff8d70

0000bb78 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    bb78:	b500      	push	{lr}
    bb7a:	b085      	sub	sp, #20
    bb7c:	4603      	mov	r3, r0
    bb7e:	9100      	str	r1, [sp, #0]
    bb80:	f88d 3007 	strb.w	r3, [sp, #7]
    bb84:	4613      	mov	r3, r2
    bb86:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bb8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bb8e:	4a14      	ldr	r2, [pc, #80]	; (bbe0 <Adc_Ipw_PrepareGroupStart+0x68>)
    bb90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb94:	681a      	ldr	r2, [r3, #0]
    bb96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bb9a:	4413      	add	r3, r2
    bb9c:	7c1b      	ldrb	r3, [r3, #16]
    bb9e:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    bba2:	9b00      	ldr	r3, [sp, #0]
    bba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bba6:	781b      	ldrb	r3, [r3, #0]
    bba8:	2b01      	cmp	r3, #1
    bbaa:	d108      	bne.n	bbbe <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    bbac:	f89d 000f 	ldrb.w	r0, [sp, #15]
    bbb0:	9b00      	ldr	r3, [sp, #0]
    bbb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bbb4:	685b      	ldr	r3, [r3, #4]
    bbb6:	461a      	mov	r2, r3
    bbb8:	2101      	movs	r1, #1
    bbba:	f7fe ff51 	bl	aa60 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    bbbe:	9b00      	ldr	r3, [sp, #0]
    bbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bbc2:	7a1b      	ldrb	r3, [r3, #8]
    bbc4:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    bbc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bbcc:	f89d 200e 	ldrb.w	r2, [sp, #14]
    bbd0:	4611      	mov	r1, r2
    bbd2:	4618      	mov	r0, r3
    bbd4:	f7fe ff62 	bl	aa9c <Adc_Ip_SetSampleTime>
}
    bbd8:	bf00      	nop
    bbda:	b005      	add	sp, #20
    bbdc:	f85d fb04 	ldr.w	pc, [sp], #4
    bbe0:	1fff8d40 	.word	0x1fff8d40

0000bbe4 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    bbe4:	b084      	sub	sp, #16
    bbe6:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    bbe8:	2300      	movs	r3, #0
    bbea:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    bbee:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bbf2:	4618      	mov	r0, r3
    bbf4:	b004      	add	sp, #16
    bbf6:	4770      	bx	lr

0000bbf8 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    bbf8:	b500      	push	{lr}
    bbfa:	b08f      	sub	sp, #60	; 0x3c
    bbfc:	9202      	str	r2, [sp, #8]
    bbfe:	461a      	mov	r2, r3
    bc00:	4603      	mov	r3, r0
    bc02:	f88d 300f 	strb.w	r3, [sp, #15]
    bc06:	460b      	mov	r3, r1
    bc08:	f8ad 300c 	strh.w	r3, [sp, #12]
    bc0c:	4613      	mov	r3, r2
    bc0e:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    bc12:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bc16:	4a6d      	ldr	r2, [pc, #436]	; (bdcc <Adc_Ipw_ConfigureConversion+0x1d4>)
    bc18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc1c:	68da      	ldr	r2, [r3, #12]
    bc1e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    bc22:	005b      	lsls	r3, r3, #1
    bc24:	4413      	add	r3, r2
    bc26:	881b      	ldrh	r3, [r3, #0]
    bc28:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    bc2c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bc30:	4a66      	ldr	r2, [pc, #408]	; (bdcc <Adc_Ipw_ConfigureConversion+0x1d4>)
    bc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc36:	685a      	ldr	r2, [r3, #4]
    bc38:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    bc3c:	2134      	movs	r1, #52	; 0x34
    bc3e:	fb01 f303 	mul.w	r3, r1, r3
    bc42:	4413      	add	r3, r2
    bc44:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bc46:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bc4a:	4a60      	ldr	r2, [pc, #384]	; (bdcc <Adc_Ipw_ConfigureConversion+0x1d4>)
    bc4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc50:	681a      	ldr	r2, [r3, #0]
    bc52:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bc56:	4413      	add	r3, r2
    bc58:	7c1b      	ldrb	r3, [r3, #16]
    bc5a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    bc5e:	2300      	movs	r3, #0
    bc60:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    bc62:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    bc66:	495a      	ldr	r1, [pc, #360]	; (bdd0 <Adc_Ipw_ConfigureConversion+0x1d8>)
    bc68:	4613      	mov	r3, r2
    bc6a:	009b      	lsls	r3, r3, #2
    bc6c:	4413      	add	r3, r2
    bc6e:	009b      	lsls	r3, r3, #2
    bc70:	440b      	add	r3, r1
    bc72:	3310      	adds	r3, #16
    bc74:	781b      	ldrb	r3, [r3, #0]
    bc76:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    bc7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bc7c:	6a1b      	ldr	r3, [r3, #32]
    bc7e:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    bc80:	2300      	movs	r3, #0
    bc82:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bc86:	e030      	b.n	bcea <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    bc88:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bc8c:	4a4f      	ldr	r2, [pc, #316]	; (bdcc <Adc_Ipw_ConfigureConversion+0x1d4>)
    bc8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc92:	681b      	ldr	r3, [r3, #0]
    bc94:	f89d 200f 	ldrb.w	r2, [sp, #15]
    bc98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bc9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    bc9e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    bca2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bca6:	440b      	add	r3, r1
    bca8:	005b      	lsls	r3, r3, #1
    bcaa:	990a      	ldr	r1, [sp, #40]	; 0x28
    bcac:	440b      	add	r3, r1
    bcae:	881b      	ldrh	r3, [r3, #0]
    bcb0:	4619      	mov	r1, r3
    bcb2:	460b      	mov	r3, r1
    bcb4:	005b      	lsls	r3, r3, #1
    bcb6:	440b      	add	r3, r1
    bcb8:	009b      	lsls	r3, r3, #2
    bcba:	4413      	add	r3, r2
    bcbc:	685b      	ldr	r3, [r3, #4]
    bcbe:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    bcc0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bcc4:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    bcc8:	9b08      	ldr	r3, [sp, #32]
    bcca:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    bccc:	2300      	movs	r3, #0
    bcce:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    bcd2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    bcd6:	aa05      	add	r2, sp, #20
    bcd8:	4611      	mov	r1, r2
    bcda:	4618      	mov	r0, r3
    bcdc:	f7fe ffc8 	bl	ac70 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    bce0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bce4:	3301      	adds	r3, #1
    bce6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bcea:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    bcee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bcf2:	3b01      	subs	r3, #1
    bcf4:	429a      	cmp	r2, r3
    bcf6:	d3c7      	bcc.n	bc88 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    bcf8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bcfc:	4a33      	ldr	r2, [pc, #204]	; (bdcc <Adc_Ipw_ConfigureConversion+0x1d4>)
    bcfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd02:	681b      	ldr	r3, [r3, #0]
    bd04:	f89d 200f 	ldrb.w	r2, [sp, #15]
    bd08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bd0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    bd0e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    bd12:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bd16:	440b      	add	r3, r1
    bd18:	005b      	lsls	r3, r3, #1
    bd1a:	990a      	ldr	r1, [sp, #40]	; 0x28
    bd1c:	440b      	add	r3, r1
    bd1e:	881b      	ldrh	r3, [r3, #0]
    bd20:	4619      	mov	r1, r3
    bd22:	460b      	mov	r3, r1
    bd24:	005b      	lsls	r3, r3, #1
    bd26:	440b      	add	r3, r1
    bd28:	009b      	lsls	r3, r3, #2
    bd2a:	4413      	add	r3, r2
    bd2c:	685b      	ldr	r3, [r3, #4]
    bd2e:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    bd30:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bd34:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    bd38:	9b08      	ldr	r3, [sp, #32]
    bd3a:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    bd3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd3e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    bd42:	2b00      	cmp	r3, #0
    bd44:	d103      	bne.n	bd4e <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    bd46:	2301      	movs	r3, #1
    bd48:	f88d 301c 	strb.w	r3, [sp, #28]
    bd4c:	e002      	b.n	bd54 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    bd4e:	2300      	movs	r3, #0
    bd50:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    bd54:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    bd58:	aa05      	add	r2, sp, #20
    bd5a:	4611      	mov	r1, r2
    bd5c:	4618      	mov	r0, r3
    bd5e:	f7fe ff87 	bl	ac70 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    bd62:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bd66:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bd6a:	e014      	b.n	bd96 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    bd6c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bd70:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    bd74:	231f      	movs	r3, #31
    bd76:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    bd78:	2300      	movs	r3, #0
    bd7a:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    bd7e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    bd82:	aa05      	add	r2, sp, #20
    bd84:	4611      	mov	r1, r2
    bd86:	4618      	mov	r0, r3
    bd88:	f7fe ff72 	bl	ac70 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    bd8c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bd90:	3301      	adds	r3, #1
    bd92:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bd96:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bd9a:	2b0f      	cmp	r3, #15
    bd9c:	d9e6      	bls.n	bd6c <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    bd9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bda2:	4a0c      	ldr	r2, [pc, #48]	; (bdd4 <Adc_Ipw_ConfigureConversion+0x1dc>)
    bda4:	00db      	lsls	r3, r3, #3
    bda6:	4413      	add	r3, r2
    bda8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    bdac:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    bdae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    bdb2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    bdb6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bdba:	9300      	str	r3, [sp, #0]
    bdbc:	9b02      	ldr	r3, [sp, #8]
    bdbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bdc0:	f7ff fd86 	bl	b8d0 <Adc_Ipw_ConfigurePdbConversion>
}
    bdc4:	bf00      	nop
    bdc6:	b00f      	add	sp, #60	; 0x3c
    bdc8:	f85d fb04 	ldr.w	pc, [sp], #4
    bdcc:	1fff8d40 	.word	0x1fff8d40
    bdd0:	1fff8d48 	.word	0x1fff8d48
    bdd4:	1fff8d70 	.word	0x1fff8d70

0000bdd8 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    bdd8:	b500      	push	{lr}
    bdda:	b085      	sub	sp, #20
    bddc:	9001      	str	r0, [sp, #4]
    bdde:	460b      	mov	r3, r1
    bde0:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    bde4:	2300      	movs	r3, #0
    bde6:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    bdea:	2300      	movs	r3, #0
    bdec:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    bdf0:	2300      	movs	r3, #0
    bdf2:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    bdf6:	2300      	movs	r3, #0
    bdf8:	f88d 300f 	strb.w	r3, [sp, #15]
    bdfc:	e027      	b.n	be4e <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    bdfe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    be02:	9a01      	ldr	r2, [sp, #4]
    be04:	4413      	add	r3, r2
    be06:	7f9b      	ldrb	r3, [r3, #30]
    be08:	2b01      	cmp	r3, #1
    be0a:	d11b      	bne.n	be44 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    be0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    be10:	9a01      	ldr	r2, [sp, #4]
    be12:	4413      	add	r3, r2
    be14:	7c1b      	ldrb	r3, [r3, #16]
    be16:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    be1a:	f89d 000e 	ldrb.w	r0, [sp, #14]
    be1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    be22:	9b01      	ldr	r3, [sp, #4]
    be24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    be28:	4619      	mov	r1, r3
    be2a:	f7fe fcb8 	bl	a79e <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    be2e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    be32:	f89d 200f 	ldrb.w	r2, [sp, #15]
    be36:	9b01      	ldr	r3, [sp, #4]
    be38:	3202      	adds	r2, #2
    be3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    be3e:	4619      	mov	r1, r3
    be40:	f000 fead 	bl	cb9e <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    be44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    be48:	3301      	adds	r3, #1
    be4a:	f88d 300f 	strb.w	r3, [sp, #15]
    be4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    be52:	2b01      	cmp	r3, #1
    be54:	d9d3      	bls.n	bdfe <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    be56:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    be5a:	4618      	mov	r0, r3
    be5c:	b005      	add	sp, #20
    be5e:	f85d fb04 	ldr.w	pc, [sp], #4

0000be62 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    be62:	b500      	push	{lr}
    be64:	b087      	sub	sp, #28
    be66:	4603      	mov	r3, r0
    be68:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    be6c:	2300      	movs	r3, #0
    be6e:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    be72:	2300      	movs	r3, #0
    be74:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    be78:	2300      	movs	r3, #0
    be7a:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    be7e:	2300      	movs	r3, #0
    be80:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    be84:	2300      	movs	r3, #0
    be86:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    be8a:	2300      	movs	r3, #0
    be8c:	f88d 3017 	strb.w	r3, [sp, #23]
    be90:	e026      	b.n	bee0 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    be92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    be96:	4a2e      	ldr	r2, [pc, #184]	; (bf50 <Adc_Ipw_DeInit+0xee>)
    be98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be9c:	681a      	ldr	r2, [r3, #0]
    be9e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bea2:	4413      	add	r3, r2
    bea4:	7f9b      	ldrb	r3, [r3, #30]
    bea6:	2b01      	cmp	r3, #1
    bea8:	d115      	bne.n	bed6 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    beaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    beae:	4a28      	ldr	r2, [pc, #160]	; (bf50 <Adc_Ipw_DeInit+0xee>)
    beb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    beb4:	681a      	ldr	r2, [r3, #0]
    beb6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    beba:	4413      	add	r3, r2
    bebc:	7c1b      	ldrb	r3, [r3, #16]
    bebe:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    bec2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bec6:	4618      	mov	r0, r3
    bec8:	f7fe fd40 	bl	a94c <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    becc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bed0:	4618      	mov	r0, r3
    bed2:	f000 ff0d 	bl	ccf0 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    bed6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    beda:	3301      	adds	r3, #1
    bedc:	f88d 3017 	strb.w	r3, [sp, #23]
    bee0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bee4:	2b01      	cmp	r3, #1
    bee6:	d9d4      	bls.n	be92 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    bee8:	2300      	movs	r3, #0
    beea:	f8ad 3014 	strh.w	r3, [sp, #20]
    beee:	e01e      	b.n	bf2e <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    bef0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bef4:	4a16      	ldr	r2, [pc, #88]	; (bf50 <Adc_Ipw_DeInit+0xee>)
    bef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    befa:	685a      	ldr	r2, [r3, #4]
    befc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bf00:	2134      	movs	r1, #52	; 0x34
    bf02:	fb01 f303 	mul.w	r3, r1, r3
    bf06:	4413      	add	r3, r2
    bf08:	881b      	ldrh	r3, [r3, #0]
    bf0a:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    bf0e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    bf12:	4910      	ldr	r1, [pc, #64]	; (bf54 <Adc_Ipw_DeInit+0xf2>)
    bf14:	4613      	mov	r3, r2
    bf16:	009b      	lsls	r3, r3, #2
    bf18:	4413      	add	r3, r2
    bf1a:	009b      	lsls	r3, r3, #2
    bf1c:	440b      	add	r3, r1
    bf1e:	330c      	adds	r3, #12
    bf20:	2200      	movs	r2, #0
    bf22:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    bf24:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bf28:	3301      	adds	r3, #1
    bf2a:	f8ad 3014 	strh.w	r3, [sp, #20]
    bf2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bf32:	4a07      	ldr	r2, [pc, #28]	; (bf50 <Adc_Ipw_DeInit+0xee>)
    bf34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf38:	891b      	ldrh	r3, [r3, #8]
    bf3a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    bf3e:	429a      	cmp	r2, r3
    bf40:	d3d6      	bcc.n	bef0 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    bf42:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bf46:	4618      	mov	r0, r3
    bf48:	b007      	add	sp, #28
    bf4a:	f85d fb04 	ldr.w	pc, [sp], #4
    bf4e:	bf00      	nop
    bf50:	1fff8d40 	.word	0x1fff8d40
    bf54:	1fff8d48 	.word	0x1fff8d48

0000bf58 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    bf58:	b500      	push	{lr}
    bf5a:	b089      	sub	sp, #36	; 0x24
    bf5c:	4603      	mov	r3, r0
    bf5e:	460a      	mov	r2, r1
    bf60:	f88d 300f 	strb.w	r3, [sp, #15]
    bf64:	4613      	mov	r3, r2
    bf66:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    bf6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bf6e:	4a4c      	ldr	r2, [pc, #304]	; (c0a0 <Adc_Ipw_StartNormalConversion+0x148>)
    bf70:	00db      	lsls	r3, r3, #3
    bf72:	4413      	add	r3, r2
    bf74:	885b      	ldrh	r3, [r3, #2]
    bf76:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    bf7a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bf7e:	4a49      	ldr	r2, [pc, #292]	; (c0a4 <Adc_Ipw_StartNormalConversion+0x14c>)
    bf80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf84:	68da      	ldr	r2, [r3, #12]
    bf86:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    bf8a:	005b      	lsls	r3, r3, #1
    bf8c:	4413      	add	r3, r2
    bf8e:	881b      	ldrh	r3, [r3, #0]
    bf90:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    bf94:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bf98:	4a42      	ldr	r2, [pc, #264]	; (c0a4 <Adc_Ipw_StartNormalConversion+0x14c>)
    bf9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf9e:	685a      	ldr	r2, [r3, #4]
    bfa0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    bfa4:	2134      	movs	r1, #52	; 0x34
    bfa6:	fb01 f303 	mul.w	r3, r1, r3
    bfaa:	4413      	add	r3, r2
    bfac:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bfae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bfb2:	4a3c      	ldr	r2, [pc, #240]	; (c0a4 <Adc_Ipw_StartNormalConversion+0x14c>)
    bfb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfb8:	681a      	ldr	r2, [r3, #0]
    bfba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bfbe:	4413      	add	r3, r2
    bfc0:	7c1b      	ldrb	r3, [r3, #16]
    bfc2:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    bfc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bfca:	4a35      	ldr	r2, [pc, #212]	; (c0a0 <Adc_Ipw_StartNormalConversion+0x148>)
    bfcc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    bfd0:	b29b      	uxth	r3, r3
    bfd2:	2b00      	cmp	r3, #0
    bfd4:	d05f      	beq.n	c096 <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    bfd6:	f89d 200e 	ldrb.w	r2, [sp, #14]
    bfda:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bfde:	9905      	ldr	r1, [sp, #20]
    bfe0:	4618      	mov	r0, r3
    bfe2:	f7ff fdc9 	bl	bb78 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    bfe6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    bfea:	492f      	ldr	r1, [pc, #188]	; (c0a8 <Adc_Ipw_StartNormalConversion+0x150>)
    bfec:	4613      	mov	r3, r2
    bfee:	009b      	lsls	r3, r3, #2
    bff0:	4413      	add	r3, r2
    bff2:	009b      	lsls	r3, r3, #2
    bff4:	440b      	add	r3, r1
    bff6:	3310      	adds	r3, #16
    bff8:	2200      	movs	r2, #0
    bffa:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    bffc:	9b05      	ldr	r3, [sp, #20]
    bffe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c002:	2b0f      	cmp	r3, #15
    c004:	d806      	bhi.n	c014 <Adc_Ipw_StartNormalConversion+0xbc>
    c006:	9b05      	ldr	r3, [sp, #20]
    c008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c00c:	f003 030f 	and.w	r3, r3, #15
    c010:	b2db      	uxtb	r3, r3
    c012:	e000      	b.n	c016 <Adc_Ipw_StartNormalConversion+0xbe>
    c014:	2310      	movs	r3, #16
    c016:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    c01a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c01e:	4a20      	ldr	r2, [pc, #128]	; (c0a0 <Adc_Ipw_StartNormalConversion+0x148>)
    c020:	00db      	lsls	r3, r3, #3
    c022:	4413      	add	r3, r2
    c024:	799b      	ldrb	r3, [r3, #6]
    c026:	2b00      	cmp	r3, #0
    c028:	d107      	bne.n	c03a <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    c02a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c02e:	4a1c      	ldr	r2, [pc, #112]	; (c0a0 <Adc_Ipw_StartNormalConversion+0x148>)
    c030:	00db      	lsls	r3, r3, #3
    c032:	4413      	add	r3, r2
    c034:	f89d 2012 	ldrb.w	r2, [sp, #18]
    c038:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c03a:	2300      	movs	r3, #0
    c03c:	f88d 301f 	strb.w	r3, [sp, #31]
    c040:	e00c      	b.n	c05c <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    c042:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c046:	f89d 201f 	ldrb.w	r2, [sp, #31]
    c04a:	4611      	mov	r1, r2
    c04c:	4618      	mov	r0, r3
    c04e:	f7fe ff03 	bl	ae58 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c052:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c056:	3301      	adds	r3, #1
    c058:	f88d 301f 	strb.w	r3, [sp, #31]
    c05c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c060:	4a0f      	ldr	r2, [pc, #60]	; (c0a0 <Adc_Ipw_StartNormalConversion+0x148>)
    c062:	00db      	lsls	r3, r3, #3
    c064:	4413      	add	r3, r2
    c066:	799b      	ldrb	r3, [r3, #6]
    c068:	f89d 201f 	ldrb.w	r2, [sp, #31]
    c06c:	429a      	cmp	r2, r3
    c06e:	d3e8      	bcc.n	c042 <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    c070:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c074:	2101      	movs	r1, #1
    c076:	4618      	mov	r0, r3
    c078:	f7fe fd60 	bl	ab3c <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    c07c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    c080:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    c084:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c088:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c08c:	9300      	str	r3, [sp, #0]
    c08e:	4613      	mov	r3, r2
    c090:	220f      	movs	r2, #15
    c092:	f7ff fdb1 	bl	bbf8 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    c096:	bf00      	nop
    c098:	b009      	add	sp, #36	; 0x24
    c09a:	f85d fb04 	ldr.w	pc, [sp], #4
    c09e:	bf00      	nop
    c0a0:	1fff8d70 	.word	0x1fff8d70
    c0a4:	1fff8d40 	.word	0x1fff8d40
    c0a8:	1fff8d48 	.word	0x1fff8d48

0000c0ac <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    c0ac:	b500      	push	{lr}
    c0ae:	b085      	sub	sp, #20
    c0b0:	4603      	mov	r3, r0
    c0b2:	f88d 3007 	strb.w	r3, [sp, #7]
    c0b6:	460b      	mov	r3, r1
    c0b8:	f8ad 3004 	strh.w	r3, [sp, #4]
    c0bc:	4613      	mov	r3, r2
    c0be:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    c0c2:	2300      	movs	r3, #0
    c0c4:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c0c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c0cc:	4a24      	ldr	r2, [pc, #144]	; (c160 <Adc_Ipw_StopCurrentConversion+0xb4>)
    c0ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0d2:	681a      	ldr	r2, [r3, #0]
    c0d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c0d8:	4413      	add	r3, r2
    c0da:	7c1b      	ldrb	r3, [r3, #16]
    c0dc:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c0e0:	2300      	movs	r3, #0
    c0e2:	f88d 300f 	strb.w	r3, [sp, #15]
    c0e6:	e014      	b.n	c112 <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    c0e8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c0ec:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c0f0:	2200      	movs	r2, #0
    c0f2:	4618      	mov	r0, r3
    c0f4:	f7fe fdec 	bl	acd0 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    c0f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c0fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c100:	4611      	mov	r1, r2
    c102:	4618      	mov	r0, r3
    c104:	f7fe fea8 	bl	ae58 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c108:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c10c:	3301      	adds	r3, #1
    c10e:	f88d 300f 	strb.w	r3, [sp, #15]
    c112:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c116:	4a13      	ldr	r2, [pc, #76]	; (c164 <Adc_Ipw_StopCurrentConversion+0xb8>)
    c118:	00db      	lsls	r3, r3, #3
    c11a:	4413      	add	r3, r2
    c11c:	799b      	ldrb	r3, [r3, #6]
    c11e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c122:	429a      	cmp	r2, r3
    c124:	d3e0      	bcc.n	c0e8 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    c126:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c12a:	490f      	ldr	r1, [pc, #60]	; (c168 <Adc_Ipw_StopCurrentConversion+0xbc>)
    c12c:	4613      	mov	r3, r2
    c12e:	009b      	lsls	r3, r3, #2
    c130:	4413      	add	r3, r2
    c132:	009b      	lsls	r3, r3, #2
    c134:	440b      	add	r3, r1
    c136:	3310      	adds	r3, #16
    c138:	2200      	movs	r2, #0
    c13a:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    c13c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c140:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c144:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c148:	4618      	mov	r0, r3
    c14a:	f7ff fc97 	bl	ba7c <Adc_Ipw_StopConversionCheckTimeout>
    c14e:	4603      	mov	r3, r0
    c150:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    c154:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    c158:	4618      	mov	r0, r3
    c15a:	b005      	add	sp, #20
    c15c:	f85d fb04 	ldr.w	pc, [sp], #4
    c160:	1fff8d40 	.word	0x1fff8d40
    c164:	1fff8d70 	.word	0x1fff8d70
    c168:	1fff8d48 	.word	0x1fff8d48

0000c16c <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    c16c:	b500      	push	{lr}
    c16e:	b085      	sub	sp, #20
    c170:	4603      	mov	r3, r0
    c172:	f88d 3007 	strb.w	r3, [sp, #7]
    c176:	460b      	mov	r3, r1
    c178:	f88d 3006 	strb.w	r3, [sp, #6]
    c17c:	4613      	mov	r3, r2
    c17e:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    c182:	2301      	movs	r3, #1
    c184:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    c188:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c18c:	f88d 300f 	strb.w	r3, [sp, #15]
    c190:	e019      	b.n	c1c6 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    c192:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c196:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c19a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c19e:	1ad3      	subs	r3, r2, r3
    c1a0:	b2db      	uxtb	r3, r3
    c1a2:	4619      	mov	r1, r3
    c1a4:	f7fe fe3e 	bl	ae24 <Adc_Ip_GetConvCompleteFlag>
    c1a8:	4603      	mov	r3, r0
    c1aa:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    c1ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c1b2:	f083 0301 	eor.w	r3, r3, #1
    c1b6:	b2db      	uxtb	r3, r3
    c1b8:	2b00      	cmp	r3, #0
    c1ba:	d10b      	bne.n	c1d4 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    c1bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c1c0:	3301      	adds	r3, #1
    c1c2:	f88d 300f 	strb.w	r3, [sp, #15]
    c1c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c1ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c1ce:	429a      	cmp	r2, r3
    c1d0:	d3df      	bcc.n	c192 <Adc_Ipw_CheckValidConversion+0x26>
    c1d2:	e000      	b.n	c1d6 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    c1d4:	bf00      	nop
        }
    }

    return ValidConversion;
    c1d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    c1da:	4618      	mov	r0, r3
    c1dc:	b005      	add	sp, #20
    c1de:	f85d fb04 	ldr.w	pc, [sp], #4

0000c1e2 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    c1e2:	b500      	push	{lr}
    c1e4:	b089      	sub	sp, #36	; 0x24
    c1e6:	9102      	str	r1, [sp, #8]
    c1e8:	9201      	str	r2, [sp, #4]
    c1ea:	461a      	mov	r2, r3
    c1ec:	4603      	mov	r3, r0
    c1ee:	f8ad 300e 	strh.w	r3, [sp, #14]
    c1f2:	4613      	mov	r3, r2
    c1f4:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    c1f8:	2300      	movs	r3, #0
    c1fa:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c1fe:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c202:	4a33      	ldr	r2, [pc, #204]	; (c2d0 <Adc_Ipw_ReadGroup+0xee>)
    c204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c208:	68da      	ldr	r2, [r3, #12]
    c20a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c20e:	005b      	lsls	r3, r3, #1
    c210:	4413      	add	r3, r2
    c212:	881b      	ldrh	r3, [r3, #0]
    c214:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    c218:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c21c:	4a2c      	ldr	r2, [pc, #176]	; (c2d0 <Adc_Ipw_ReadGroup+0xee>)
    c21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c222:	685a      	ldr	r2, [r3, #4]
    c224:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    c228:	2134      	movs	r1, #52	; 0x34
    c22a:	fb01 f303 	mul.w	r3, r1, r3
    c22e:	4413      	add	r3, r2
    c230:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    c232:	9b06      	ldr	r3, [sp, #24]
    c234:	789b      	ldrb	r3, [r3, #2]
    c236:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    c23a:	9b06      	ldr	r3, [sp, #24]
    c23c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    c240:	2b01      	cmp	r3, #1
    c242:	d124      	bne.n	c28e <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    c244:	9b06      	ldr	r3, [sp, #24]
    c246:	68db      	ldr	r3, [r3, #12]
    c248:	2b00      	cmp	r3, #0
    c24a:	d111      	bne.n	c270 <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    c24c:	9b06      	ldr	r3, [sp, #24]
    c24e:	695b      	ldr	r3, [r3, #20]
    c250:	2b00      	cmp	r3, #0
    c252:	d10d      	bne.n	c270 <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    c254:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c258:	4a1e      	ldr	r2, [pc, #120]	; (c2d4 <Adc_Ipw_ReadGroup+0xf2>)
    c25a:	00db      	lsls	r3, r3, #3
    c25c:	4413      	add	r3, r2
    c25e:	885b      	ldrh	r3, [r3, #2]
    c260:	b29b      	uxth	r3, r3
    c262:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    c266:	429a      	cmp	r2, r3
    c268:	d002      	beq.n	c270 <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    c26a:	2301      	movs	r3, #1
    c26c:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    c270:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c274:	2b00      	cmp	r3, #0
    c276:	d124      	bne.n	c2c2 <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    c278:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c27c:	9a01      	ldr	r2, [sp, #4]
    c27e:	9902      	ldr	r1, [sp, #8]
    c280:	9806      	ldr	r0, [sp, #24]
    c282:	f7ff f91f 	bl	b4c4 <Adc_Ipw_ReadGroupNoInt>
    c286:	4603      	mov	r3, r0
    c288:	f88d 301f 	strb.w	r3, [sp, #31]
    c28c:	e019      	b.n	c2c2 <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    c28e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    c292:	4911      	ldr	r1, [pc, #68]	; (c2d8 <Adc_Ipw_ReadGroup+0xf6>)
    c294:	4613      	mov	r3, r2
    c296:	009b      	lsls	r3, r3, #2
    c298:	4413      	add	r3, r2
    c29a:	009b      	lsls	r3, r3, #2
    c29c:	440b      	add	r3, r1
    c29e:	681b      	ldr	r3, [r3, #0]
    c2a0:	2b01      	cmp	r3, #1
    c2a2:	d102      	bne.n	c2aa <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    c2a4:	2301      	movs	r3, #1
    c2a6:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    c2aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d107      	bne.n	c2c2 <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    c2b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
    c2b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c2ba:	9902      	ldr	r1, [sp, #8]
    c2bc:	4618      	mov	r0, r3
    c2be:	f7ff f949 	bl	b554 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    c2c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    c2c6:	4618      	mov	r0, r3
    c2c8:	b009      	add	sp, #36	; 0x24
    c2ca:	f85d fb04 	ldr.w	pc, [sp], #4
    c2ce:	bf00      	nop
    c2d0:	1fff8d40 	.word	0x1fff8d40
    c2d4:	1fff8d70 	.word	0x1fff8d70
    c2d8:	1fff8d48 	.word	0x1fff8d48

0000c2dc <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    c2dc:	b500      	push	{lr}
    c2de:	b085      	sub	sp, #20
    c2e0:	4603      	mov	r3, r0
    c2e2:	9100      	str	r1, [sp, #0]
    c2e4:	f88d 3007 	strb.w	r3, [sp, #7]
    c2e8:	4613      	mov	r3, r2
    c2ea:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c2ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c2f2:	4a0e      	ldr	r2, [pc, #56]	; (c32c <Adc_Ipw_Calibrate+0x50>)
    c2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2f8:	681a      	ldr	r2, [r3, #0]
    c2fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c2fe:	4413      	add	r3, r2
    c300:	7c1b      	ldrb	r3, [r3, #16]
    c302:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    c306:	9b00      	ldr	r3, [sp, #0]
    c308:	2200      	movs	r2, #0
    c30a:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    c30c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c310:	4618      	mov	r0, r3
    c312:	f7fe fdb9 	bl	ae88 <Adc_Ip_DoCalibration>
    c316:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    c318:	9b02      	ldr	r3, [sp, #8]
    c31a:	2b00      	cmp	r3, #0
    c31c:	d002      	beq.n	c324 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    c31e:	9b00      	ldr	r3, [sp, #0]
    c320:	2201      	movs	r2, #1
    c322:	701a      	strb	r2, [r3, #0]
    }
}
    c324:	bf00      	nop
    c326:	b005      	add	sp, #20
    c328:	f85d fb04 	ldr.w	pc, [sp], #4
    c32c:	1fff8d40 	.word	0x1fff8d40

0000c330 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    c330:	2300      	movs	r3, #0
}
    c332:	4618      	mov	r0, r3
    c334:	4770      	bx	lr
    c336:	bf00      	nop

0000c338 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    c338:	b500      	push	{lr}
    c33a:	b083      	sub	sp, #12
    c33c:	4603      	mov	r3, r0
    c33e:	460a      	mov	r2, r1
    c340:	f88d 3007 	strb.w	r3, [sp, #7]
    c344:	4613      	mov	r3, r2
    c346:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    c34a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c34e:	2100      	movs	r1, #0
    c350:	4618      	mov	r0, r3
    c352:	f7fe fff3 	bl	b33c <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    c356:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c35a:	4a09      	ldr	r2, [pc, #36]	; (c380 <Adc_Ipw_UpdateQueue+0x48>)
    c35c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    c360:	b29b      	uxth	r3, r3
    c362:	2b00      	cmp	r3, #0
    c364:	d007      	beq.n	c376 <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    c366:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c36a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c36e:	4611      	mov	r1, r2
    c370:	4618      	mov	r0, r3
    c372:	f7ff fdf1 	bl	bf58 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    c376:	bf00      	nop
    c378:	b003      	add	sp, #12
    c37a:	f85d fb04 	ldr.w	pc, [sp], #4
    c37e:	bf00      	nop
    c380:	1fff8d70 	.word	0x1fff8d70

0000c384 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    c384:	b510      	push	{r4, lr}
    c386:	b08a      	sub	sp, #40	; 0x28
    c388:	4604      	mov	r4, r0
    c38a:	4608      	mov	r0, r1
    c38c:	4611      	mov	r1, r2
    c38e:	461a      	mov	r2, r3
    c390:	4623      	mov	r3, r4
    c392:	f88d 300f 	strb.w	r3, [sp, #15]
    c396:	4603      	mov	r3, r0
    c398:	f8ad 300c 	strh.w	r3, [sp, #12]
    c39c:	460b      	mov	r3, r1
    c39e:	f8ad 300a 	strh.w	r3, [sp, #10]
    c3a2:	4613      	mov	r3, r2
    c3a4:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c3a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c3ac:	4a68      	ldr	r2, [pc, #416]	; (c550 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3b2:	68da      	ldr	r2, [r3, #12]
    c3b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c3b8:	005b      	lsls	r3, r3, #1
    c3ba:	4413      	add	r3, r2
    c3bc:	881b      	ldrh	r3, [r3, #0]
    c3be:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    c3c2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c3c6:	4963      	ldr	r1, [pc, #396]	; (c554 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c3c8:	4613      	mov	r3, r2
    c3ca:	009b      	lsls	r3, r3, #2
    c3cc:	4413      	add	r3, r2
    c3ce:	009b      	lsls	r3, r3, #2
    c3d0:	440b      	add	r3, r1
    c3d2:	3310      	adds	r3, #16
    c3d4:	781b      	ldrb	r3, [r3, #0]
    c3d6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    c3da:	2300      	movs	r3, #0
    c3dc:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c3de:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c3e2:	4a5b      	ldr	r2, [pc, #364]	; (c550 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3e8:	681a      	ldr	r2, [r3, #0]
    c3ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3ee:	4413      	add	r3, r2
    c3f0:	7c1b      	ldrb	r3, [r3, #16]
    c3f2:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    c3f6:	2300      	movs	r3, #0
    c3f8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    c3fc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c400:	4a53      	ldr	r2, [pc, #332]	; (c550 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c406:	681b      	ldr	r3, [r3, #0]
    c408:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c410:	695b      	ldr	r3, [r3, #20]
    c412:	4618      	mov	r0, r3
    c414:	f7ff fbe6 	bl	bbe4 <Adc_Ipw_CalculateNumsBitShift>
    c418:	4603      	mov	r3, r0
    c41a:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    c41e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c422:	4a4b      	ldr	r2, [pc, #300]	; (c550 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c428:	685a      	ldr	r2, [r3, #4]
    c42a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    c42e:	2134      	movs	r1, #52	; 0x34
    c430:	fb01 f303 	mul.w	r3, r1, r3
    c434:	4413      	add	r3, r2
    c436:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c43a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    c43e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c442:	4a43      	ldr	r2, [pc, #268]	; (c550 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c448:	685a      	ldr	r2, [r3, #4]
    c44a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    c44e:	2134      	movs	r1, #52	; 0x34
    c450:	fb01 f303 	mul.w	r3, r1, r3
    c454:	4413      	add	r3, r2
    c456:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    c458:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c45c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c460:	429a      	cmp	r2, r3
    c462:	d870      	bhi.n	c546 <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    c464:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c468:	f003 030f 	and.w	r3, r3, #15
    c46c:	b2db      	uxtb	r3, r3
    c46e:	2b00      	cmp	r3, #0
    c470:	d104      	bne.n	c47c <Adc_Ipw_CheckConversionChannels+0xf8>
    c472:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c476:	3b10      	subs	r3, #16
    c478:	b2db      	uxtb	r3, r3
    c47a:	e004      	b.n	c486 <Adc_Ipw_CheckConversionChannels+0x102>
    c47c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c480:	f023 030f 	bic.w	r3, r3, #15
    c484:	b2db      	uxtb	r3, r3
    c486:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    c48a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c48e:	4931      	ldr	r1, [pc, #196]	; (c554 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c490:	4613      	mov	r3, r2
    c492:	009b      	lsls	r3, r3, #2
    c494:	4413      	add	r3, r2
    c496:	009b      	lsls	r3, r3, #2
    c498:	440b      	add	r3, r1
    c49a:	330c      	adds	r3, #12
    c49c:	6819      	ldr	r1, [r3, #0]
    c49e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c4a2:	482c      	ldr	r0, [pc, #176]	; (c554 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c4a4:	4613      	mov	r3, r2
    c4a6:	009b      	lsls	r3, r3, #2
    c4a8:	4413      	add	r3, r2
    c4aa:	009b      	lsls	r3, r3, #2
    c4ac:	4403      	add	r3, r0
    c4ae:	3308      	adds	r3, #8
    c4b0:	881b      	ldrh	r3, [r3, #0]
    c4b2:	b29b      	uxth	r3, r3
    c4b4:	005b      	lsls	r3, r3, #1
    c4b6:	440b      	add	r3, r1
    c4b8:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    c4ba:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c4be:	f89d 1013 	ldrb.w	r1, [sp, #19]
    c4c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    c4c6:	4618      	mov	r0, r3
    c4c8:	f7ff fe50 	bl	c16c <Adc_Ipw_CheckValidConversion>
    c4cc:	4603      	mov	r3, r0
    c4ce:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    c4d2:	f89d 3012 	ldrb.w	r3, [sp, #18]
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	d032      	beq.n	c540 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    c4da:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c4de:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    c4e2:	e026      	b.n	c532 <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    c4e4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    c4e8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    c4ec:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c4f0:	1ad3      	subs	r3, r2, r3
    c4f2:	b2db      	uxtb	r3, r3
    c4f4:	4619      	mov	r1, r3
    c4f6:	f7fe fcaf 	bl	ae58 <Adc_Ip_GetConvData>
    c4fa:	4603      	mov	r3, r0
    c4fc:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    c500:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    c504:	f89d 301a 	ldrb.w	r3, [sp, #26]
    c508:	fa02 f303 	lsl.w	r3, r2, r3
    c50c:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    c510:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    c514:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c518:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    c51c:	9300      	str	r3, [sp, #0]
    c51e:	460b      	mov	r3, r1
    c520:	9907      	ldr	r1, [sp, #28]
    c522:	9805      	ldr	r0, [sp, #20]
    c524:	f000 fa02 	bl	c92c <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    c528:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c52c:	3301      	adds	r3, #1
    c52e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    c532:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    c536:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c53a:	429a      	cmp	r2, r3
    c53c:	d3d2      	bcc.n	c4e4 <Adc_Ipw_CheckConversionChannels+0x160>
    c53e:	e002      	b.n	c546 <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    c540:	2301      	movs	r3, #1
    c542:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    c546:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    c54a:	4618      	mov	r0, r3
    c54c:	b00a      	add	sp, #40	; 0x28
    c54e:	bd10      	pop	{r4, pc}
    c550:	1fff8d40 	.word	0x1fff8d40
    c554:	1fff8d48 	.word	0x1fff8d48

0000c558 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    c558:	b500      	push	{lr}
    c55a:	b087      	sub	sp, #28
    c55c:	4603      	mov	r3, r0
    c55e:	f88d 300f 	strb.w	r3, [sp, #15]
    c562:	460b      	mov	r3, r1
    c564:	f8ad 300c 	strh.w	r3, [sp, #12]
    c568:	4613      	mov	r3, r2
    c56a:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c56e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c572:	4a33      	ldr	r2, [pc, #204]	; (c640 <Adc_Ipw_RestartConversion+0xe8>)
    c574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c578:	68da      	ldr	r2, [r3, #12]
    c57a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c57e:	005b      	lsls	r3, r3, #1
    c580:	4413      	add	r3, r2
    c582:	881b      	ldrh	r3, [r3, #0]
    c584:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c588:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c58c:	4a2c      	ldr	r2, [pc, #176]	; (c640 <Adc_Ipw_RestartConversion+0xe8>)
    c58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c592:	681a      	ldr	r2, [r3, #0]
    c594:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c598:	4413      	add	r3, r2
    c59a:	7c1b      	ldrb	r3, [r3, #16]
    c59c:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    c5a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c5a4:	4a26      	ldr	r2, [pc, #152]	; (c640 <Adc_Ipw_RestartConversion+0xe8>)
    c5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5aa:	685a      	ldr	r2, [r3, #4]
    c5ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c5b0:	2134      	movs	r1, #52	; 0x34
    c5b2:	fb01 f303 	mul.w	r3, r1, r3
    c5b6:	4413      	add	r3, r2
    c5b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c5bc:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    c5c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c5c4:	2b0f      	cmp	r3, #15
    c5c6:	d805      	bhi.n	c5d4 <Adc_Ipw_RestartConversion+0x7c>
    c5c8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c5cc:	f003 030f 	and.w	r3, r3, #15
    c5d0:	b2db      	uxtb	r3, r3
    c5d2:	e000      	b.n	c5d6 <Adc_Ipw_RestartConversion+0x7e>
    c5d4:	2310      	movs	r3, #16
    c5d6:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    c5da:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c5de:	2b10      	cmp	r3, #16
    c5e0:	d811      	bhi.n	c606 <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    c5e2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c5e6:	4917      	ldr	r1, [pc, #92]	; (c644 <Adc_Ipw_RestartConversion+0xec>)
    c5e8:	4613      	mov	r3, r2
    c5ea:	009b      	lsls	r3, r3, #2
    c5ec:	4413      	add	r3, r2
    c5ee:	009b      	lsls	r3, r3, #2
    c5f0:	440b      	add	r3, r1
    c5f2:	3310      	adds	r3, #16
    c5f4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    c5f8:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    c5fa:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c5fe:	4618      	mov	r0, r3
    c600:	f000 fc68 	bl	ced4 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    c604:	e017      	b.n	c636 <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    c606:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c60a:	490e      	ldr	r1, [pc, #56]	; (c644 <Adc_Ipw_RestartConversion+0xec>)
    c60c:	4613      	mov	r3, r2
    c60e:	009b      	lsls	r3, r3, #2
    c610:	4413      	add	r3, r2
    c612:	009b      	lsls	r3, r3, #2
    c614:	440b      	add	r3, r1
    c616:	3310      	adds	r3, #16
    c618:	2200      	movs	r2, #0
    c61a:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    c61c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    c620:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c624:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c628:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c62c:	9300      	str	r3, [sp, #0]
    c62e:	4613      	mov	r3, r2
    c630:	220f      	movs	r2, #15
    c632:	f7ff fae1 	bl	bbf8 <Adc_Ipw_ConfigureConversion>
}
    c636:	bf00      	nop
    c638:	b007      	add	sp, #28
    c63a:	f85d fb04 	ldr.w	pc, [sp], #4
    c63e:	bf00      	nop
    c640:	1fff8d40 	.word	0x1fff8d40
    c644:	1fff8d48 	.word	0x1fff8d48

0000c648 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    c648:	b084      	sub	sp, #16
    c64a:	4603      	mov	r3, r0
    c64c:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    c650:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c654:	4907      	ldr	r1, [pc, #28]	; (c674 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    c656:	4613      	mov	r3, r2
    c658:	009b      	lsls	r3, r3, #2
    c65a:	4413      	add	r3, r2
    c65c:	009b      	lsls	r3, r3, #2
    c65e:	440b      	add	r3, r1
    c660:	3308      	adds	r3, #8
    c662:	881b      	ldrh	r3, [r3, #0]
    c664:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    c668:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    c66c:	4618      	mov	r0, r3
    c66e:	b004      	add	sp, #16
    c670:	4770      	bx	lr
    c672:	bf00      	nop
    c674:	1fff8d48 	.word	0x1fff8d48

0000c678 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    c678:	b510      	push	{r4, lr}
    c67a:	b084      	sub	sp, #16
    c67c:	4604      	mov	r4, r0
    c67e:	4608      	mov	r0, r1
    c680:	4611      	mov	r1, r2
    c682:	461a      	mov	r2, r3
    c684:	4623      	mov	r3, r4
    c686:	f88d 3007 	strb.w	r3, [sp, #7]
    c68a:	4603      	mov	r3, r0
    c68c:	f8ad 3004 	strh.w	r3, [sp, #4]
    c690:	460b      	mov	r3, r1
    c692:	f8ad 3002 	strh.w	r3, [sp, #2]
    c696:	4613      	mov	r3, r2
    c698:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c69c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c6a0:	4a4f      	ldr	r2, [pc, #316]	; (c7e0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6a6:	68da      	ldr	r2, [r3, #12]
    c6a8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c6ac:	005b      	lsls	r3, r3, #1
    c6ae:	4413      	add	r3, r2
    c6b0:	881b      	ldrh	r3, [r3, #0]
    c6b2:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    c6b6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c6ba:	494a      	ldr	r1, [pc, #296]	; (c7e4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c6bc:	4613      	mov	r3, r2
    c6be:	009b      	lsls	r3, r3, #2
    c6c0:	4413      	add	r3, r2
    c6c2:	009b      	lsls	r3, r3, #2
    c6c4:	440b      	add	r3, r1
    c6c6:	3304      	adds	r3, #4
    c6c8:	2201      	movs	r2, #1
    c6ca:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    c6cc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c6d0:	4944      	ldr	r1, [pc, #272]	; (c7e4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c6d2:	4613      	mov	r3, r2
    c6d4:	009b      	lsls	r3, r3, #2
    c6d6:	4413      	add	r3, r2
    c6d8:	009b      	lsls	r3, r3, #2
    c6da:	440b      	add	r3, r1
    c6dc:	681b      	ldr	r3, [r3, #0]
    c6de:	2b01      	cmp	r3, #1
    c6e0:	d109      	bne.n	c6f6 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    c6e2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c6e6:	493f      	ldr	r1, [pc, #252]	; (c7e4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c6e8:	4613      	mov	r3, r2
    c6ea:	009b      	lsls	r3, r3, #2
    c6ec:	4413      	add	r3, r2
    c6ee:	009b      	lsls	r3, r3, #2
    c6f0:	440b      	add	r3, r1
    c6f2:	2202      	movs	r2, #2
    c6f4:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    c6f6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c6fa:	4618      	mov	r0, r3
    c6fc:	f7ff ffa4 	bl	c648 <Adc_Ipw_GetCurrentSampleCount>
    c700:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    c702:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    c706:	9a02      	ldr	r2, [sp, #8]
    c708:	429a      	cmp	r2, r3
    c70a:	d35d      	bcc.n	c7c8 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    c70c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c710:	4934      	ldr	r1, [pc, #208]	; (c7e4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c712:	4613      	mov	r3, r2
    c714:	009b      	lsls	r3, r3, #2
    c716:	4413      	add	r3, r2
    c718:	009b      	lsls	r3, r3, #2
    c71a:	440b      	add	r3, r1
    c71c:	2203      	movs	r2, #3
    c71e:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    c720:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c724:	4a2e      	ldr	r2, [pc, #184]	; (c7e0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c72a:	685a      	ldr	r2, [r3, #4]
    c72c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c730:	2134      	movs	r1, #52	; 0x34
    c732:	fb01 f303 	mul.w	r3, r1, r3
    c736:	4413      	add	r3, r2
    c738:	699b      	ldr	r3, [r3, #24]
    c73a:	2b00      	cmp	r3, #0
    c73c:	d117      	bne.n	c76e <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    c73e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c742:	4a27      	ldr	r2, [pc, #156]	; (c7e0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c748:	685a      	ldr	r2, [r3, #4]
    c74a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c74e:	2134      	movs	r1, #52	; 0x34
    c750:	fb01 f303 	mul.w	r3, r1, r3
    c754:	4413      	add	r3, r2
    c756:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    c758:	2b01      	cmp	r3, #1
    c75a:	d108      	bne.n	c76e <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    c75c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c760:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c764:	4611      	mov	r1, r2
    c766:	4618      	mov	r0, r3
    c768:	f7ff fde6 	bl	c338 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    c76c:	e035      	b.n	c7da <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    c76e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c772:	4a1b      	ldr	r2, [pc, #108]	; (c7e0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c778:	685a      	ldr	r2, [r3, #4]
    c77a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c77e:	2134      	movs	r1, #52	; 0x34
    c780:	fb01 f303 	mul.w	r3, r1, r3
    c784:	4413      	add	r3, r2
    c786:	689b      	ldr	r3, [r3, #8]
    c788:	2b01      	cmp	r3, #1
    c78a:	d114      	bne.n	c7b6 <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    c78c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c790:	4914      	ldr	r1, [pc, #80]	; (c7e4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c792:	4613      	mov	r3, r2
    c794:	009b      	lsls	r3, r3, #2
    c796:	4413      	add	r3, r2
    c798:	009b      	lsls	r3, r3, #2
    c79a:	440b      	add	r3, r1
    c79c:	3308      	adds	r3, #8
    c79e:	2200      	movs	r2, #0
    c7a0:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    c7a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c7a6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c7aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7ae:	4618      	mov	r0, r3
    c7b0:	f7ff fed2 	bl	c558 <Adc_Ipw_RestartConversion>
}
    c7b4:	e011      	b.n	c7da <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    c7b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c7ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7be:	4611      	mov	r1, r2
    c7c0:	4618      	mov	r0, r3
    c7c2:	f7ff fdb9 	bl	c338 <Adc_Ipw_UpdateQueue>
}
    c7c6:	e008      	b.n	c7da <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    c7c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c7cc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c7d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c7d4:	4618      	mov	r0, r3
    c7d6:	f7ff febf 	bl	c558 <Adc_Ipw_RestartConversion>
}
    c7da:	bf00      	nop
    c7dc:	b004      	add	sp, #16
    c7de:	bd10      	pop	{r4, pc}
    c7e0:	1fff8d40 	.word	0x1fff8d40
    c7e4:	1fff8d48 	.word	0x1fff8d48

0000c7e8 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    c7e8:	b510      	push	{r4, lr}
    c7ea:	b088      	sub	sp, #32
    c7ec:	4604      	mov	r4, r0
    c7ee:	4608      	mov	r0, r1
    c7f0:	4611      	mov	r1, r2
    c7f2:	461a      	mov	r2, r3
    c7f4:	4623      	mov	r3, r4
    c7f6:	f88d 300f 	strb.w	r3, [sp, #15]
    c7fa:	4603      	mov	r3, r0
    c7fc:	f8ad 300c 	strh.w	r3, [sp, #12]
    c800:	460b      	mov	r3, r1
    c802:	f88d 300e 	strb.w	r3, [sp, #14]
    c806:	4613      	mov	r3, r2
    c808:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c80c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c810:	4a44      	ldr	r2, [pc, #272]	; (c924 <Adc_Ipw_EndConversion+0x13c>)
    c812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c816:	68da      	ldr	r2, [r3, #12]
    c818:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c81c:	005b      	lsls	r3, r3, #1
    c81e:	4413      	add	r3, r2
    c820:	881b      	ldrh	r3, [r3, #0]
    c822:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    c826:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c82a:	4a3e      	ldr	r2, [pc, #248]	; (c924 <Adc_Ipw_EndConversion+0x13c>)
    c82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c830:	685a      	ldr	r2, [r3, #4]
    c832:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    c836:	2134      	movs	r1, #52	; 0x34
    c838:	fb01 f303 	mul.w	r3, r1, r3
    c83c:	4413      	add	r3, r2
    c83e:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    c840:	9b06      	ldr	r3, [sp, #24]
    c842:	8b9a      	ldrh	r2, [r3, #28]
    c844:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c848:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c84c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c850:	f7ff fd98 	bl	c384 <Adc_Ipw_CheckConversionChannels>
    c854:	4603      	mov	r3, r0
    c856:	2b00      	cmp	r3, #0
    c858:	d160      	bne.n	c91c <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    c85a:	9b06      	ldr	r3, [sp, #24]
    c85c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c860:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    c864:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c868:	492f      	ldr	r1, [pc, #188]	; (c928 <Adc_Ipw_EndConversion+0x140>)
    c86a:	4613      	mov	r3, r2
    c86c:	009b      	lsls	r3, r3, #2
    c86e:	4413      	add	r3, r2
    c870:	009b      	lsls	r3, r3, #2
    c872:	440b      	add	r3, r1
    c874:	3310      	adds	r3, #16
    c876:	781b      	ldrb	r3, [r3, #0]
    c878:	f89d 2017 	ldrb.w	r2, [sp, #23]
    c87c:	429a      	cmp	r2, r3
    c87e:	d929      	bls.n	c8d4 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    c880:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c884:	4928      	ldr	r1, [pc, #160]	; (c928 <Adc_Ipw_EndConversion+0x140>)
    c886:	4613      	mov	r3, r2
    c888:	009b      	lsls	r3, r3, #2
    c88a:	4413      	add	r3, r2
    c88c:	009b      	lsls	r3, r3, #2
    c88e:	440b      	add	r3, r1
    c890:	3310      	adds	r3, #16
    c892:	781b      	ldrb	r3, [r3, #0]
    c894:	f89d 2017 	ldrb.w	r2, [sp, #23]
    c898:	1ad3      	subs	r3, r2, r3
    c89a:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    c89e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c8a2:	2b0f      	cmp	r3, #15
    c8a4:	d805      	bhi.n	c8b2 <Adc_Ipw_EndConversion+0xca>
    c8a6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c8aa:	f003 030f 	and.w	r3, r3, #15
    c8ae:	b2db      	uxtb	r3, r3
    c8b0:	e000      	b.n	c8b4 <Adc_Ipw_EndConversion+0xcc>
    c8b2:	2310      	movs	r3, #16
    c8b4:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    c8b8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    c8bc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c8c0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c8c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c8c8:	9300      	str	r3, [sp, #0]
    c8ca:	4613      	mov	r3, r2
    c8cc:	220f      	movs	r2, #15
    c8ce:	f7ff f993 	bl	bbf8 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    c8d2:	e023      	b.n	c91c <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    c8d4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c8d8:	4913      	ldr	r1, [pc, #76]	; (c928 <Adc_Ipw_EndConversion+0x140>)
    c8da:	4613      	mov	r3, r2
    c8dc:	009b      	lsls	r3, r3, #2
    c8de:	4413      	add	r3, r2
    c8e0:	009b      	lsls	r3, r3, #2
    c8e2:	440b      	add	r3, r1
    c8e4:	3308      	adds	r3, #8
    c8e6:	881b      	ldrh	r3, [r3, #0]
    c8e8:	b29b      	uxth	r3, r3
    c8ea:	3301      	adds	r3, #1
    c8ec:	b298      	uxth	r0, r3
    c8ee:	490e      	ldr	r1, [pc, #56]	; (c928 <Adc_Ipw_EndConversion+0x140>)
    c8f0:	4613      	mov	r3, r2
    c8f2:	009b      	lsls	r3, r3, #2
    c8f4:	4413      	add	r3, r2
    c8f6:	009b      	lsls	r3, r3, #2
    c8f8:	440b      	add	r3, r1
    c8fa:	3308      	adds	r3, #8
    c8fc:	4602      	mov	r2, r0
    c8fe:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    c900:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c904:	2b00      	cmp	r3, #0
    c906:	d009      	beq.n	c91c <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    c908:	9b06      	ldr	r3, [sp, #24]
    c90a:	8b9a      	ldrh	r2, [r3, #28]
    c90c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c910:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c914:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c918:	f7ff feae 	bl	c678 <Adc_Ipw_UpdateSoftwareGroupState>
}
    c91c:	bf00      	nop
    c91e:	b008      	add	sp, #32
    c920:	bd10      	pop	{r4, pc}
    c922:	bf00      	nop
    c924:	1fff8d40 	.word	0x1fff8d40
    c928:	1fff8d48 	.word	0x1fff8d48

0000c92c <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    c92c:	b084      	sub	sp, #16
    c92e:	9003      	str	r0, [sp, #12]
    c930:	9102      	str	r1, [sp, #8]
    c932:	4611      	mov	r1, r2
    c934:	461a      	mov	r2, r3
    c936:	460b      	mov	r3, r1
    c938:	f8ad 3006 	strh.w	r3, [sp, #6]
    c93c:	4613      	mov	r3, r2
    c93e:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    c942:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c946:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c94a:	fb02 f303 	mul.w	r3, r2, r3
    c94e:	005b      	lsls	r3, r3, #1
    c950:	9a02      	ldr	r2, [sp, #8]
    c952:	4413      	add	r3, r2
    c954:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    c958:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    c95a:	bf00      	nop
    c95c:	b004      	add	sp, #16
    c95e:	4770      	bx	lr

0000c960 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    c960:	b500      	push	{lr}
    c962:	b085      	sub	sp, #20
    c964:	4603      	mov	r3, r0
    c966:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    c96a:	f7ff fce1 	bl	c330 <Adc_GetCoreID>
    c96e:	4603      	mov	r3, r0
    c970:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    c974:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c978:	b2db      	uxtb	r3, r3
    c97a:	461a      	mov	r2, r3
    c97c:	4b14      	ldr	r3, [pc, #80]	; (c9d0 <Adc_Ipw_EndConversionNotification+0x70>)
    c97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c982:	681a      	ldr	r2, [r3, #0]
    c984:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c988:	4413      	add	r3, r2
    c98a:	f893 3020 	ldrb.w	r3, [r3, #32]
    c98e:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    c992:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c996:	4a0f      	ldr	r2, [pc, #60]	; (c9d4 <Adc_Ipw_EndConversionNotification+0x74>)
    c998:	00db      	lsls	r3, r3, #3
    c99a:	4413      	add	r3, r2
    c99c:	885b      	ldrh	r3, [r3, #2]
    c99e:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    c9a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c9a6:	4a0b      	ldr	r2, [pc, #44]	; (c9d4 <Adc_Ipw_EndConversionNotification+0x74>)
    c9a8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    c9ac:	b29b      	uxth	r3, r3
    c9ae:	2b00      	cmp	r3, #0
    c9b0:	d009      	beq.n	c9c6 <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    c9b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c9b6:	b2db      	uxtb	r3, r3
    c9b8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c9bc:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c9c0:	2201      	movs	r2, #1
    c9c2:	f7ff ff11 	bl	c7e8 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    c9c6:	bf00      	nop
    c9c8:	b005      	add	sp, #20
    c9ca:	f85d fb04 	ldr.w	pc, [sp], #4
    c9ce:	bf00      	nop
    c9d0:	1fff8d40 	.word	0x1fff8d40
    c9d4:	1fff8d70 	.word	0x1fff8d70

0000c9d8 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    c9d8:	b500      	push	{lr}
    c9da:	b085      	sub	sp, #20
    c9dc:	4603      	mov	r3, r0
    c9de:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    c9e2:	2300      	movs	r3, #0
    c9e4:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    c9e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c9ec:	4618      	mov	r0, r3
    c9ee:	f7ff ffb7 	bl	c960 <Adc_Ipw_EndConversionNotification>
}
    c9f2:	bf00      	nop
    c9f4:	b005      	add	sp, #20
    c9f6:	f85d fb04 	ldr.w	pc, [sp], #4

0000c9fa <Adc_Ipw_Adc1EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc1EndConversionNotification(const uint8 ControlChanIdx)
{
    c9fa:	b500      	push	{lr}
    c9fc:	b085      	sub	sp, #20
    c9fe:	4603      	mov	r3, r0
    ca00:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 1U;
    ca04:	2301      	movs	r3, #1
    ca06:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    ca0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca0e:	4618      	mov	r0, r3
    ca10:	f7ff ffa6 	bl	c960 <Adc_Ipw_EndConversionNotification>
}
    ca14:	bf00      	nop
    ca16:	b005      	add	sp, #20
    ca18:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca1c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    ca1c:	b084      	sub	sp, #16
    ca1e:	9003      	str	r0, [sp, #12]
    ca20:	9201      	str	r2, [sp, #4]
    ca22:	461a      	mov	r2, r3
    ca24:	460b      	mov	r3, r1
    ca26:	f88d 300b 	strb.w	r3, [sp, #11]
    ca2a:	4613      	mov	r3, r2
    ca2c:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    ca30:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ca34:	2b00      	cmp	r3, #0
    ca36:	d016      	beq.n	ca66 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    ca38:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ca3c:	9903      	ldr	r1, [sp, #12]
    ca3e:	4613      	mov	r3, r2
    ca40:	009b      	lsls	r3, r3, #2
    ca42:	4413      	add	r3, r2
    ca44:	00db      	lsls	r3, r3, #3
    ca46:	440b      	add	r3, r1
    ca48:	3310      	adds	r3, #16
    ca4a:	6819      	ldr	r1, [r3, #0]
    ca4c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ca50:	9b01      	ldr	r3, [sp, #4]
    ca52:	4319      	orrs	r1, r3
    ca54:	9803      	ldr	r0, [sp, #12]
    ca56:	4613      	mov	r3, r2
    ca58:	009b      	lsls	r3, r3, #2
    ca5a:	4413      	add	r3, r2
    ca5c:	00db      	lsls	r3, r3, #3
    ca5e:	4403      	add	r3, r0
    ca60:	3310      	adds	r3, #16
    ca62:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    ca64:	e016      	b.n	ca94 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    ca66:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ca6a:	9903      	ldr	r1, [sp, #12]
    ca6c:	4613      	mov	r3, r2
    ca6e:	009b      	lsls	r3, r3, #2
    ca70:	4413      	add	r3, r2
    ca72:	00db      	lsls	r3, r3, #3
    ca74:	440b      	add	r3, r1
    ca76:	3310      	adds	r3, #16
    ca78:	6819      	ldr	r1, [r3, #0]
    ca7a:	9b01      	ldr	r3, [sp, #4]
    ca7c:	43db      	mvns	r3, r3
    ca7e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ca82:	4019      	ands	r1, r3
    ca84:	9803      	ldr	r0, [sp, #12]
    ca86:	4613      	mov	r3, r2
    ca88:	009b      	lsls	r3, r3, #2
    ca8a:	4413      	add	r3, r2
    ca8c:	00db      	lsls	r3, r3, #3
    ca8e:	4403      	add	r3, r0
    ca90:	3310      	adds	r3, #16
    ca92:	6019      	str	r1, [r3, #0]
}
    ca94:	bf00      	nop
    ca96:	b004      	add	sp, #16
    ca98:	4770      	bx	lr

0000ca9a <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    ca9a:	b082      	sub	sp, #8
    ca9c:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    ca9e:	9b01      	ldr	r3, [sp, #4]
    caa0:	681b      	ldr	r3, [r3, #0]
    caa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    caa6:	9b01      	ldr	r3, [sp, #4]
    caa8:	601a      	str	r2, [r3, #0]
}
    caaa:	bf00      	nop
    caac:	b002      	add	sp, #8
    caae:	4770      	bx	lr

0000cab0 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    cab0:	b082      	sub	sp, #8
    cab2:	9001      	str	r0, [sp, #4]
    cab4:	460b      	mov	r3, r1
    cab6:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    caba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cabe:	2b00      	cmp	r3, #0
    cac0:	d006      	beq.n	cad0 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    cac2:	9b01      	ldr	r3, [sp, #4]
    cac4:	681b      	ldr	r3, [r3, #0]
    cac6:	f043 0202 	orr.w	r2, r3, #2
    caca:	9b01      	ldr	r3, [sp, #4]
    cacc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    cace:	e005      	b.n	cadc <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    cad0:	9b01      	ldr	r3, [sp, #4]
    cad2:	681b      	ldr	r3, [r3, #0]
    cad4:	f023 0202 	bic.w	r2, r3, #2
    cad8:	9b01      	ldr	r3, [sp, #4]
    cada:	601a      	str	r2, [r3, #0]
}
    cadc:	bf00      	nop
    cade:	b002      	add	sp, #8
    cae0:	4770      	bx	lr

0000cae2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    cae2:	b086      	sub	sp, #24
    cae4:	9003      	str	r0, [sp, #12]
    cae6:	460b      	mov	r3, r1
    cae8:	9201      	str	r2, [sp, #4]
    caea:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    caee:	f89d 200b 	ldrb.w	r2, [sp, #11]
    caf2:	9903      	ldr	r1, [sp, #12]
    caf4:	4613      	mov	r3, r2
    caf6:	009b      	lsls	r3, r3, #2
    caf8:	4413      	add	r3, r2
    cafa:	00db      	lsls	r3, r3, #3
    cafc:	440b      	add	r3, r1
    cafe:	3310      	adds	r3, #16
    cb00:	681b      	ldr	r3, [r3, #0]
    cb02:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    cb04:	9b05      	ldr	r3, [sp, #20]
    cb06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    cb0a:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    cb0c:	9b01      	ldr	r3, [sp, #4]
    cb0e:	781b      	ldrb	r3, [r3, #0]
    cb10:	461a      	mov	r2, r3
    cb12:	9b05      	ldr	r3, [sp, #20]
    cb14:	4313      	orrs	r3, r2
    cb16:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    cb18:	9b01      	ldr	r3, [sp, #4]
    cb1a:	785b      	ldrb	r3, [r3, #1]
    cb1c:	021b      	lsls	r3, r3, #8
    cb1e:	b29b      	uxth	r3, r3
    cb20:	9a05      	ldr	r2, [sp, #20]
    cb22:	4313      	orrs	r3, r2
    cb24:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    cb26:	9b01      	ldr	r3, [sp, #4]
    cb28:	789b      	ldrb	r3, [r3, #2]
    cb2a:	041b      	lsls	r3, r3, #16
    cb2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    cb30:	9a05      	ldr	r2, [sp, #20]
    cb32:	4313      	orrs	r3, r2
    cb34:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    cb36:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cb3a:	9903      	ldr	r1, [sp, #12]
    cb3c:	4613      	mov	r3, r2
    cb3e:	009b      	lsls	r3, r3, #2
    cb40:	4413      	add	r3, r2
    cb42:	00db      	lsls	r3, r3, #3
    cb44:	440b      	add	r3, r1
    cb46:	3310      	adds	r3, #16
    cb48:	9a05      	ldr	r2, [sp, #20]
    cb4a:	601a      	str	r2, [r3, #0]
}
    cb4c:	bf00      	nop
    cb4e:	b006      	add	sp, #24
    cb50:	4770      	bx	lr

0000cb52 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    cb52:	b082      	sub	sp, #8
    cb54:	9001      	str	r0, [sp, #4]
    cb56:	460b      	mov	r3, r1
    cb58:	f88d 3003 	strb.w	r3, [sp, #3]
    cb5c:	4613      	mov	r3, r2
    cb5e:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    cb62:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cb66:	9901      	ldr	r1, [sp, #4]
    cb68:	4613      	mov	r3, r2
    cb6a:	009b      	lsls	r3, r3, #2
    cb6c:	4413      	add	r3, r2
    cb6e:	00db      	lsls	r3, r3, #3
    cb70:	440b      	add	r3, r1
    cb72:	3314      	adds	r3, #20
    cb74:	6819      	ldr	r1, [r3, #0]
    cb76:	f8bd 3000 	ldrh.w	r3, [sp]
    cb7a:	041b      	lsls	r3, r3, #16
    cb7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    cb80:	43db      	mvns	r3, r3
    cb82:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cb86:	4019      	ands	r1, r3
    cb88:	9801      	ldr	r0, [sp, #4]
    cb8a:	4613      	mov	r3, r2
    cb8c:	009b      	lsls	r3, r3, #2
    cb8e:	4413      	add	r3, r2
    cb90:	00db      	lsls	r3, r3, #3
    cb92:	4403      	add	r3, r0
    cb94:	3314      	adds	r3, #20
    cb96:	6019      	str	r1, [r3, #0]
}
    cb98:	bf00      	nop
    cb9a:	b002      	add	sp, #8
    cb9c:	4770      	bx	lr

0000cb9e <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    cb9e:	b500      	push	{lr}
    cba0:	b087      	sub	sp, #28
    cba2:	9001      	str	r0, [sp, #4]
    cba4:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cba6:	4a50      	ldr	r2, [pc, #320]	; (cce8 <Pdb_Adc_Ip_Init+0x14a>)
    cba8:	9b01      	ldr	r3, [sp, #4]
    cbaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbae:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    cbb0:	2300      	movs	r3, #0
    cbb2:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    cbb4:	9b00      	ldr	r3, [sp, #0]
    cbb6:	681b      	ldr	r3, [r3, #0]
    cbb8:	049b      	lsls	r3, r3, #18
    cbba:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    cbbe:	9a04      	ldr	r2, [sp, #16]
    cbc0:	4313      	orrs	r3, r2
    cbc2:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    cbc4:	9b00      	ldr	r3, [sp, #0]
    cbc6:	685b      	ldr	r3, [r3, #4]
    cbc8:	031b      	lsls	r3, r3, #12
    cbca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    cbce:	9a04      	ldr	r2, [sp, #16]
    cbd0:	4313      	orrs	r3, r2
    cbd2:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    cbd4:	9b00      	ldr	r3, [sp, #0]
    cbd6:	689b      	ldr	r3, [r3, #8]
    cbd8:	009b      	lsls	r3, r3, #2
    cbda:	f003 030c 	and.w	r3, r3, #12
    cbde:	9a04      	ldr	r2, [sp, #16]
    cbe0:	4313      	orrs	r3, r2
    cbe2:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    cbe4:	9b00      	ldr	r3, [sp, #0]
    cbe6:	68db      	ldr	r3, [r3, #12]
    cbe8:	021b      	lsls	r3, r3, #8
    cbea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    cbee:	9a04      	ldr	r2, [sp, #16]
    cbf0:	4313      	orrs	r3, r2
    cbf2:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    cbf4:	9b00      	ldr	r3, [sp, #0]
    cbf6:	7c1b      	ldrb	r3, [r3, #16]
    cbf8:	2b00      	cmp	r3, #0
    cbfa:	d003      	beq.n	cc04 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    cbfc:	9b04      	ldr	r3, [sp, #16]
    cbfe:	f043 0302 	orr.w	r3, r3, #2
    cc02:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    cc04:	9b00      	ldr	r3, [sp, #0]
    cc06:	7c5b      	ldrb	r3, [r3, #17]
    cc08:	2b00      	cmp	r3, #0
    cc0a:	d003      	beq.n	cc14 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    cc0c:	9b04      	ldr	r3, [sp, #16]
    cc0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    cc12:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    cc14:	9b00      	ldr	r3, [sp, #0]
    cc16:	69db      	ldr	r3, [r3, #28]
    cc18:	2b00      	cmp	r3, #0
    cc1a:	d003      	beq.n	cc24 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    cc1c:	9b04      	ldr	r3, [sp, #16]
    cc1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    cc22:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    cc24:	9b03      	ldr	r3, [sp, #12]
    cc26:	9a04      	ldr	r2, [sp, #16]
    cc28:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    cc2a:	9b00      	ldr	r3, [sp, #0]
    cc2c:	8a5b      	ldrh	r3, [r3, #18]
    cc2e:	4619      	mov	r1, r3
    cc30:	9801      	ldr	r0, [sp, #4]
    cc32:	f000 f98f 	bl	cf54 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    cc36:	9b00      	ldr	r3, [sp, #0]
    cc38:	7d1b      	ldrb	r3, [r3, #20]
    cc3a:	2b00      	cmp	r3, #0
    cc3c:	d03e      	beq.n	ccbc <Pdb_Adc_Ip_Init+0x11e>
    cc3e:	9b00      	ldr	r3, [sp, #0]
    cc40:	699b      	ldr	r3, [r3, #24]
    cc42:	2b00      	cmp	r3, #0
    cc44:	d03a      	beq.n	ccbc <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    cc46:	2300      	movs	r3, #0
    cc48:	f88d 3017 	strb.w	r3, [sp, #23]
    cc4c:	e030      	b.n	ccb0 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    cc4e:	9b00      	ldr	r3, [sp, #0]
    cc50:	6999      	ldr	r1, [r3, #24]
    cc52:	f89d 2017 	ldrb.w	r2, [sp, #23]
    cc56:	4613      	mov	r3, r2
    cc58:	009b      	lsls	r3, r3, #2
    cc5a:	4413      	add	r3, r2
    cc5c:	009b      	lsls	r3, r3, #2
    cc5e:	440b      	add	r3, r1
    cc60:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    cc62:	9b02      	ldr	r3, [sp, #8]
    cc64:	7819      	ldrb	r1, [r3, #0]
    cc66:	9b02      	ldr	r3, [sp, #8]
    cc68:	3301      	adds	r3, #1
    cc6a:	461a      	mov	r2, r3
    cc6c:	9803      	ldr	r0, [sp, #12]
    cc6e:	f7ff ff38 	bl	cae2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    cc72:	2300      	movs	r3, #0
    cc74:	f88d 3016 	strb.w	r3, [sp, #22]
    cc78:	e011      	b.n	cc9e <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    cc7a:	9b02      	ldr	r3, [sp, #8]
    cc7c:	7819      	ldrb	r1, [r3, #0]
    cc7e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cc82:	9a02      	ldr	r2, [sp, #8]
    cc84:	005b      	lsls	r3, r3, #1
    cc86:	4413      	add	r3, r2
    cc88:	889b      	ldrh	r3, [r3, #4]
    cc8a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cc8e:	9801      	ldr	r0, [sp, #4]
    cc90:	f000 fa74 	bl	d17c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    cc94:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cc98:	3301      	adds	r3, #1
    cc9a:	f88d 3016 	strb.w	r3, [sp, #22]
    cc9e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cca2:	2b07      	cmp	r3, #7
    cca4:	d9e9      	bls.n	cc7a <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    cca6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ccaa:	3301      	adds	r3, #1
    ccac:	f88d 3017 	strb.w	r3, [sp, #23]
    ccb0:	9b00      	ldr	r3, [sp, #0]
    ccb2:	7d1b      	ldrb	r3, [r3, #20]
    ccb4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ccb8:	429a      	cmp	r2, r3
    ccba:	d3c8      	bcc.n	cc4e <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    ccbc:	9801      	ldr	r0, [sp, #4]
    ccbe:	f000 f89b 	bl	cdf8 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    ccc2:	9801      	ldr	r0, [sp, #4]
    ccc4:	f000 f92e 	bl	cf24 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    ccc8:	9b00      	ldr	r3, [sp, #0]
    ccca:	69da      	ldr	r2, [r3, #28]
    cccc:	4907      	ldr	r1, [pc, #28]	; (ccec <Pdb_Adc_Ip_Init+0x14e>)
    ccce:	9b01      	ldr	r3, [sp, #4]
    ccd0:	00db      	lsls	r3, r3, #3
    ccd2:	440b      	add	r3, r1
    ccd4:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    ccd6:	4a05      	ldr	r2, [pc, #20]	; (ccec <Pdb_Adc_Ip_Init+0x14e>)
    ccd8:	9b01      	ldr	r3, [sp, #4]
    ccda:	2101      	movs	r1, #1
    ccdc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    cce0:	bf00      	nop
    cce2:	b007      	add	sp, #28
    cce4:	f85d fb04 	ldr.w	pc, [sp], #4
    cce8:	000197e8 	.word	0x000197e8
    ccec:	1fff8e18 	.word	0x1fff8e18

0000ccf0 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    ccf0:	b500      	push	{lr}
    ccf2:	b097      	sub	sp, #92	; 0x5c
    ccf4:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    ccf6:	2300      	movs	r3, #0
    ccf8:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    ccfa:	2300      	movs	r3, #0
    ccfc:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    ccfe:	2300      	movs	r3, #0
    cd00:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    cd02:	2300      	movs	r3, #0
    cd04:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    cd06:	2300      	movs	r3, #0
    cd08:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    cd0c:	2300      	movs	r3, #0
    cd0e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    cd12:	2300      	movs	r3, #0
    cd14:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    cd18:	2302      	movs	r3, #2
    cd1a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    cd1e:	2300      	movs	r3, #0
    cd20:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    cd24:	e04d      	b.n	cdc2 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    cd26:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cd2a:	4613      	mov	r3, r2
    cd2c:	009b      	lsls	r3, r3, #2
    cd2e:	4413      	add	r3, r2
    cd30:	009b      	lsls	r3, r3, #2
    cd32:	aa16      	add	r2, sp, #88	; 0x58
    cd34:	4413      	add	r3, r2
    cd36:	3b4c      	subs	r3, #76	; 0x4c
    cd38:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cd3c:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    cd3e:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cd42:	4613      	mov	r3, r2
    cd44:	009b      	lsls	r3, r3, #2
    cd46:	4413      	add	r3, r2
    cd48:	009b      	lsls	r3, r3, #2
    cd4a:	aa16      	add	r2, sp, #88	; 0x58
    cd4c:	4413      	add	r3, r2
    cd4e:	3b4b      	subs	r3, #75	; 0x4b
    cd50:	2200      	movs	r2, #0
    cd52:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    cd54:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cd58:	4613      	mov	r3, r2
    cd5a:	009b      	lsls	r3, r3, #2
    cd5c:	4413      	add	r3, r2
    cd5e:	009b      	lsls	r3, r3, #2
    cd60:	aa16      	add	r2, sp, #88	; 0x58
    cd62:	4413      	add	r3, r2
    cd64:	3b4a      	subs	r3, #74	; 0x4a
    cd66:	2200      	movs	r2, #0
    cd68:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    cd6a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cd6e:	4613      	mov	r3, r2
    cd70:	009b      	lsls	r3, r3, #2
    cd72:	4413      	add	r3, r2
    cd74:	009b      	lsls	r3, r3, #2
    cd76:	aa16      	add	r2, sp, #88	; 0x58
    cd78:	4413      	add	r3, r2
    cd7a:	3b49      	subs	r3, #73	; 0x49
    cd7c:	2200      	movs	r2, #0
    cd7e:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    cd80:	2300      	movs	r3, #0
    cd82:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    cd86:	e013      	b.n	cdb0 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    cd88:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cd8c:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    cd90:	4613      	mov	r3, r2
    cd92:	009b      	lsls	r3, r3, #2
    cd94:	4413      	add	r3, r2
    cd96:	005b      	lsls	r3, r3, #1
    cd98:	440b      	add	r3, r1
    cd9a:	005b      	lsls	r3, r3, #1
    cd9c:	aa16      	add	r2, sp, #88	; 0x58
    cd9e:	4413      	add	r3, r2
    cda0:	2200      	movs	r2, #0
    cda2:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    cda6:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    cdaa:	3301      	adds	r3, #1
    cdac:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    cdb0:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    cdb4:	2b07      	cmp	r3, #7
    cdb6:	d9e7      	bls.n	cd88 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    cdb8:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    cdbc:	3301      	adds	r3, #1
    cdbe:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    cdc2:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    cdc6:	2b01      	cmp	r3, #1
    cdc8:	d9ad      	bls.n	cd26 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    cdca:	ab03      	add	r3, sp, #12
    cdcc:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    cdce:	2300      	movs	r3, #0
    cdd0:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    cdd2:	ab0d      	add	r3, sp, #52	; 0x34
    cdd4:	4619      	mov	r1, r3
    cdd6:	9801      	ldr	r0, [sp, #4]
    cdd8:	f7ff fee1 	bl	cb9e <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    cddc:	9801      	ldr	r0, [sp, #4]
    cdde:	f000 f823 	bl	ce28 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    cde2:	4a04      	ldr	r2, [pc, #16]	; (cdf4 <Pdb_Adc_Ip_DeInit+0x104>)
    cde4:	9b01      	ldr	r3, [sp, #4]
    cde6:	2100      	movs	r1, #0
    cde8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    cdec:	bf00      	nop
    cdee:	b017      	add	sp, #92	; 0x5c
    cdf0:	f85d fb04 	ldr.w	pc, [sp], #4
    cdf4:	1fff8e18 	.word	0x1fff8e18

0000cdf8 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    cdf8:	b500      	push	{lr}
    cdfa:	b085      	sub	sp, #20
    cdfc:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cdfe:	4a09      	ldr	r2, [pc, #36]	; (ce24 <Pdb_Adc_Ip_Enable+0x2c>)
    ce00:	9b01      	ldr	r3, [sp, #4]
    ce02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce06:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    ce08:	f005 fe40 	bl	12a8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    ce0c:	9b03      	ldr	r3, [sp, #12]
    ce0e:	681b      	ldr	r3, [r3, #0]
    ce10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    ce14:	9b03      	ldr	r3, [sp, #12]
    ce16:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    ce18:	f005 fe64 	bl	12ae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    ce1c:	bf00      	nop
    ce1e:	b005      	add	sp, #20
    ce20:	f85d fb04 	ldr.w	pc, [sp], #4
    ce24:	000197e8 	.word	0x000197e8

0000ce28 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    ce28:	b500      	push	{lr}
    ce2a:	b085      	sub	sp, #20
    ce2c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ce2e:	4a08      	ldr	r2, [pc, #32]	; (ce50 <Pdb_Adc_Ip_Disable+0x28>)
    ce30:	9b01      	ldr	r3, [sp, #4]
    ce32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce36:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    ce38:	f005 fe7a 	bl	12b30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    ce3c:	9803      	ldr	r0, [sp, #12]
    ce3e:	f7ff fe2c 	bl	ca9a <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    ce42:	f005 fea1 	bl	12b88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    ce46:	bf00      	nop
    ce48:	b005      	add	sp, #20
    ce4a:	f85d fb04 	ldr.w	pc, [sp], #4
    ce4e:	bf00      	nop
    ce50:	000197e8 	.word	0x000197e8

0000ce54 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    ce54:	b500      	push	{lr}
    ce56:	b085      	sub	sp, #20
    ce58:	9001      	str	r0, [sp, #4]
    ce5a:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ce5c:	4a0e      	ldr	r2, [pc, #56]	; (ce98 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    ce5e:	9b01      	ldr	r3, [sp, #4]
    ce60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce64:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    ce66:	f005 feb5 	bl	12bd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    ce6a:	9b03      	ldr	r3, [sp, #12]
    ce6c:	681b      	ldr	r3, [r3, #0]
    ce6e:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    ce70:	9b02      	ldr	r3, [sp, #8]
    ce72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    ce76:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    ce78:	9b00      	ldr	r3, [sp, #0]
    ce7a:	021b      	lsls	r3, r3, #8
    ce7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ce80:	9a02      	ldr	r2, [sp, #8]
    ce82:	4313      	orrs	r3, r2
    ce84:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    ce86:	9b03      	ldr	r3, [sp, #12]
    ce88:	9a02      	ldr	r2, [sp, #8]
    ce8a:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    ce8c:	f005 fece 	bl	12c2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    ce90:	bf00      	nop
    ce92:	b005      	add	sp, #20
    ce94:	f85d fb04 	ldr.w	pc, [sp], #4
    ce98:	000197e8 	.word	0x000197e8

0000ce9c <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    ce9c:	b500      	push	{lr}
    ce9e:	b085      	sub	sp, #20
    cea0:	9001      	str	r0, [sp, #4]
    cea2:	460b      	mov	r3, r1
    cea4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cea8:	4a09      	ldr	r2, [pc, #36]	; (ced0 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    ceaa:	9b01      	ldr	r3, [sp, #4]
    ceac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceb0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    ceb2:	f005 fee1 	bl	12c78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    ceb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ceba:	4619      	mov	r1, r3
    cebc:	9803      	ldr	r0, [sp, #12]
    cebe:	f7ff fdf7 	bl	cab0 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    cec2:	f005 ff05 	bl	12cd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    cec6:	bf00      	nop
    cec8:	b005      	add	sp, #20
    ceca:	f85d fb04 	ldr.w	pc, [sp], #4
    cece:	bf00      	nop
    ced0:	000197e8 	.word	0x000197e8

0000ced4 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    ced4:	b500      	push	{lr}
    ced6:	b085      	sub	sp, #20
    ced8:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ceda:	4a09      	ldr	r2, [pc, #36]	; (cf00 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    cedc:	9b01      	ldr	r3, [sp, #4]
    cede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cee2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    cee4:	f005 ff1a 	bl	12d1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    cee8:	9b03      	ldr	r3, [sp, #12]
    ceea:	681b      	ldr	r3, [r3, #0]
    ceec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    cef0:	9b03      	ldr	r3, [sp, #12]
    cef2:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    cef4:	f005 ff3e 	bl	12d74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    cef8:	bf00      	nop
    cefa:	b005      	add	sp, #20
    cefc:	f85d fb04 	ldr.w	pc, [sp], #4
    cf00:	000197e8 	.word	0x000197e8

0000cf04 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    cf04:	b084      	sub	sp, #16
    cf06:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cf08:	4a05      	ldr	r2, [pc, #20]	; (cf20 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    cf0a:	9b01      	ldr	r3, [sp, #4]
    cf0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf10:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    cf12:	9b03      	ldr	r3, [sp, #12]
    cf14:	689b      	ldr	r3, [r3, #8]
    cf16:	b29b      	uxth	r3, r3
}
    cf18:	4618      	mov	r0, r3
    cf1a:	b004      	add	sp, #16
    cf1c:	4770      	bx	lr
    cf1e:	bf00      	nop
    cf20:	000197e8 	.word	0x000197e8

0000cf24 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    cf24:	b500      	push	{lr}
    cf26:	b085      	sub	sp, #20
    cf28:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cf2a:	4a09      	ldr	r2, [pc, #36]	; (cf50 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    cf2c:	9b01      	ldr	r3, [sp, #4]
    cf2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf32:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    cf34:	f005 ff44 	bl	12dc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    cf38:	9b03      	ldr	r3, [sp, #12]
    cf3a:	681b      	ldr	r3, [r3, #0]
    cf3c:	f043 0201 	orr.w	r2, r3, #1
    cf40:	9b03      	ldr	r3, [sp, #12]
    cf42:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    cf44:	f005 ff68 	bl	12e18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    cf48:	bf00      	nop
    cf4a:	b005      	add	sp, #20
    cf4c:	f85d fb04 	ldr.w	pc, [sp], #4
    cf50:	000197e8 	.word	0x000197e8

0000cf54 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    cf54:	b500      	push	{lr}
    cf56:	b085      	sub	sp, #20
    cf58:	9001      	str	r0, [sp, #4]
    cf5a:	460b      	mov	r3, r1
    cf5c:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cf60:	4a0d      	ldr	r2, [pc, #52]	; (cf98 <Pdb_Adc_Ip_SetModulus+0x44>)
    cf62:	9b01      	ldr	r3, [sp, #4]
    cf64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf68:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    cf6a:	f006 fa0b 	bl	13384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    cf6e:	9b03      	ldr	r3, [sp, #12]
    cf70:	685b      	ldr	r3, [r3, #4]
    cf72:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    cf74:	9b02      	ldr	r3, [sp, #8]
    cf76:	0c1b      	lsrs	r3, r3, #16
    cf78:	041b      	lsls	r3, r3, #16
    cf7a:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    cf7c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    cf80:	9a02      	ldr	r2, [sp, #8]
    cf82:	4313      	orrs	r3, r2
    cf84:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    cf86:	9b03      	ldr	r3, [sp, #12]
    cf88:	9a02      	ldr	r2, [sp, #8]
    cf8a:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    cf8c:	f006 fa26 	bl	133dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    cf90:	bf00      	nop
    cf92:	b005      	add	sp, #20
    cf94:	f85d fb04 	ldr.w	pc, [sp], #4
    cf98:	000197e8 	.word	0x000197e8

0000cf9c <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    cf9c:	b500      	push	{lr}
    cf9e:	b087      	sub	sp, #28
    cfa0:	9003      	str	r0, [sp, #12]
    cfa2:	460b      	mov	r3, r1
    cfa4:	9201      	str	r2, [sp, #4]
    cfa6:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cfaa:	4a0a      	ldr	r2, [pc, #40]	; (cfd4 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    cfac:	9b03      	ldr	r3, [sp, #12]
    cfae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfb2:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    cfb4:	f005 ffa8 	bl	12f08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    cfb8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cfbc:	9a01      	ldr	r2, [sp, #4]
    cfbe:	4619      	mov	r1, r3
    cfc0:	9805      	ldr	r0, [sp, #20]
    cfc2:	f7ff fd8e 	bl	cae2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    cfc6:	f005 ffcb 	bl	12f60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    cfca:	bf00      	nop
    cfcc:	b007      	add	sp, #28
    cfce:	f85d fb04 	ldr.w	pc, [sp], #4
    cfd2:	bf00      	nop
    cfd4:	000197e8 	.word	0x000197e8

0000cfd8 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    cfd8:	b084      	sub	sp, #16
    cfda:	9001      	str	r0, [sp, #4]
    cfdc:	460b      	mov	r3, r1
    cfde:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cfe2:	4a0c      	ldr	r2, [pc, #48]	; (d014 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    cfe4:	9b01      	ldr	r3, [sp, #4]
    cfe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfea:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    cfec:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cff0:	9903      	ldr	r1, [sp, #12]
    cff2:	4613      	mov	r3, r2
    cff4:	009b      	lsls	r3, r3, #2
    cff6:	4413      	add	r3, r2
    cff8:	00db      	lsls	r3, r3, #3
    cffa:	440b      	add	r3, r1
    cffc:	3314      	adds	r3, #20
    cffe:	681b      	ldr	r3, [r3, #0]
    d000:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    d002:	9b02      	ldr	r3, [sp, #8]
    d004:	0c1b      	lsrs	r3, r3, #16
    d006:	b2db      	uxtb	r3, r3
    d008:	9302      	str	r3, [sp, #8]

    return Result;
    d00a:	9b02      	ldr	r3, [sp, #8]
}
    d00c:	4618      	mov	r0, r3
    d00e:	b004      	add	sp, #16
    d010:	4770      	bx	lr
    d012:	bf00      	nop
    d014:	000197e8 	.word	0x000197e8

0000d018 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    d018:	b500      	push	{lr}
    d01a:	b085      	sub	sp, #20
    d01c:	9001      	str	r0, [sp, #4]
    d01e:	460b      	mov	r3, r1
    d020:	f88d 3003 	strb.w	r3, [sp, #3]
    d024:	4613      	mov	r3, r2
    d026:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d02a:	4a0a      	ldr	r2, [pc, #40]	; (d054 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    d02c:	9b01      	ldr	r3, [sp, #4]
    d02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d032:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    d034:	f006 f902 	bl	1323c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    d038:	f8bd 2000 	ldrh.w	r2, [sp]
    d03c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d040:	4619      	mov	r1, r3
    d042:	9803      	ldr	r0, [sp, #12]
    d044:	f7ff fd85 	bl	cb52 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    d048:	f006 f924 	bl	13294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    d04c:	bf00      	nop
    d04e:	b005      	add	sp, #20
    d050:	f85d fb04 	ldr.w	pc, [sp], #4
    d054:	000197e8 	.word	0x000197e8

0000d058 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    d058:	b500      	push	{lr}
    d05a:	b085      	sub	sp, #20
    d05c:	9001      	str	r0, [sp, #4]
    d05e:	4608      	mov	r0, r1
    d060:	4611      	mov	r1, r2
    d062:	461a      	mov	r2, r3
    d064:	4603      	mov	r3, r0
    d066:	f88d 3003 	strb.w	r3, [sp, #3]
    d06a:	460b      	mov	r3, r1
    d06c:	f88d 3002 	strb.w	r3, [sp, #2]
    d070:	4613      	mov	r3, r2
    d072:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d076:	4a10      	ldr	r2, [pc, #64]	; (d0b8 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    d078:	9b01      	ldr	r3, [sp, #4]
    d07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d07e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d080:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d084:	2201      	movs	r2, #1
    d086:	fa02 f303 	lsl.w	r3, r2, r3
    d08a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    d08c:	9b02      	ldr	r3, [sp, #8]
    d08e:	041b      	lsls	r3, r3, #16
    d090:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    d094:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    d096:	f005 ff89 	bl	12fac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d09a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d09e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d0a2:	9a02      	ldr	r2, [sp, #8]
    d0a4:	9803      	ldr	r0, [sp, #12]
    d0a6:	f7ff fcb9 	bl	ca1c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    d0aa:	f005 ffab 	bl	13004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    d0ae:	bf00      	nop
    d0b0:	b005      	add	sp, #20
    d0b2:	f85d fb04 	ldr.w	pc, [sp], #4
    d0b6:	bf00      	nop
    d0b8:	000197e8 	.word	0x000197e8

0000d0bc <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    d0bc:	b500      	push	{lr}
    d0be:	b085      	sub	sp, #20
    d0c0:	9001      	str	r0, [sp, #4]
    d0c2:	4608      	mov	r0, r1
    d0c4:	4611      	mov	r1, r2
    d0c6:	461a      	mov	r2, r3
    d0c8:	4603      	mov	r3, r0
    d0ca:	f88d 3003 	strb.w	r3, [sp, #3]
    d0ce:	460b      	mov	r3, r1
    d0d0:	f88d 3002 	strb.w	r3, [sp, #2]
    d0d4:	4613      	mov	r3, r2
    d0d6:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d0da:	4a0f      	ldr	r2, [pc, #60]	; (d118 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    d0dc:	9b01      	ldr	r3, [sp, #4]
    d0de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0e2:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d0e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d0e8:	2201      	movs	r2, #1
    d0ea:	fa02 f303 	lsl.w	r3, r2, r3
    d0ee:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    d0f0:	9b02      	ldr	r3, [sp, #8]
    d0f2:	b2db      	uxtb	r3, r3
    d0f4:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    d0f6:	f005 ffab 	bl	13050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d0fa:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d0fe:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d102:	9a02      	ldr	r2, [sp, #8]
    d104:	9803      	ldr	r0, [sp, #12]
    d106:	f7ff fc89 	bl	ca1c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    d10a:	f005 ffcd 	bl	130a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    d10e:	bf00      	nop
    d110:	b005      	add	sp, #20
    d112:	f85d fb04 	ldr.w	pc, [sp], #4
    d116:	bf00      	nop
    d118:	000197e8 	.word	0x000197e8

0000d11c <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    d11c:	b500      	push	{lr}
    d11e:	b085      	sub	sp, #20
    d120:	9001      	str	r0, [sp, #4]
    d122:	4608      	mov	r0, r1
    d124:	4611      	mov	r1, r2
    d126:	461a      	mov	r2, r3
    d128:	4603      	mov	r3, r0
    d12a:	f88d 3003 	strb.w	r3, [sp, #3]
    d12e:	460b      	mov	r3, r1
    d130:	f88d 3002 	strb.w	r3, [sp, #2]
    d134:	4613      	mov	r3, r2
    d136:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d13a:	4a0f      	ldr	r2, [pc, #60]	; (d178 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    d13c:	9b01      	ldr	r3, [sp, #4]
    d13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d142:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d144:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d148:	2201      	movs	r2, #1
    d14a:	fa02 f303 	lsl.w	r3, r2, r3
    d14e:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    d150:	9b02      	ldr	r3, [sp, #8]
    d152:	021b      	lsls	r3, r3, #8
    d154:	b29b      	uxth	r3, r3
    d156:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    d158:	f005 ffcc 	bl	130f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d15c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d160:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d164:	9a02      	ldr	r2, [sp, #8]
    d166:	9803      	ldr	r0, [sp, #12]
    d168:	f7ff fc58 	bl	ca1c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    d16c:	f005 ffee 	bl	1314c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    d170:	bf00      	nop
    d172:	b005      	add	sp, #20
    d174:	f85d fb04 	ldr.w	pc, [sp], #4
    d178:	000197e8 	.word	0x000197e8

0000d17c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    d17c:	b410      	push	{r4}
    d17e:	b085      	sub	sp, #20
    d180:	9001      	str	r0, [sp, #4]
    d182:	4608      	mov	r0, r1
    d184:	4611      	mov	r1, r2
    d186:	461a      	mov	r2, r3
    d188:	4603      	mov	r3, r0
    d18a:	f88d 3003 	strb.w	r3, [sp, #3]
    d18e:	460b      	mov	r3, r1
    d190:	f88d 3002 	strb.w	r3, [sp, #2]
    d194:	4613      	mov	r3, r2
    d196:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d19a:	4a0c      	ldr	r2, [pc, #48]	; (d1cc <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    d19c:	9b01      	ldr	r3, [sp, #4]
    d19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1a2:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    d1a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d1a8:	f89d 4002 	ldrb.w	r4, [sp, #2]
    d1ac:	f8bd 0000 	ldrh.w	r0, [sp]
    d1b0:	9903      	ldr	r1, [sp, #12]
    d1b2:	4613      	mov	r3, r2
    d1b4:	009b      	lsls	r3, r3, #2
    d1b6:	4413      	add	r3, r2
    d1b8:	005b      	lsls	r3, r3, #1
    d1ba:	4423      	add	r3, r4
    d1bc:	3306      	adds	r3, #6
    d1be:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    d1c2:	bf00      	nop
    d1c4:	b005      	add	sp, #20
    d1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    d1ca:	4770      	bx	lr
    d1cc:	000197e8 	.word	0x000197e8

0000d1d0 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    d1d0:	b500      	push	{lr}
    d1d2:	b087      	sub	sp, #28
    d1d4:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d1d6:	4a19      	ldr	r2, [pc, #100]	; (d23c <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    d1d8:	9b01      	ldr	r3, [sp, #4]
    d1da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1de:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    d1e0:	2300      	movs	r3, #0
    d1e2:	f88d 300c 	strb.w	r3, [sp, #12]
    d1e6:	2300      	movs	r3, #0
    d1e8:	f88d 300d 	strb.w	r3, [sp, #13]
    d1ec:	2300      	movs	r3, #0
    d1ee:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    d1f2:	f005 fe37 	bl	12e64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    d1f6:	9804      	ldr	r0, [sp, #16]
    d1f8:	f7ff fc4f 	bl	ca9a <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    d1fc:	2100      	movs	r1, #0
    d1fe:	9804      	ldr	r0, [sp, #16]
    d200:	f7ff fc56 	bl	cab0 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    d204:	f005 fe5a 	bl	12ebc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d208:	2300      	movs	r3, #0
    d20a:	f88d 3017 	strb.w	r3, [sp, #23]
    d20e:	e00b      	b.n	d228 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    d210:	aa03      	add	r2, sp, #12
    d212:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d216:	4619      	mov	r1, r3
    d218:	9804      	ldr	r0, [sp, #16]
    d21a:	f000 f899 	bl	d350 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d21e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d222:	3301      	adds	r3, #1
    d224:	f88d 3017 	strb.w	r3, [sp, #23]
    d228:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d22c:	2b01      	cmp	r3, #1
    d22e:	d9ef      	bls.n	d210 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    d230:	bf00      	nop
    d232:	bf00      	nop
    d234:	b007      	add	sp, #28
    d236:	f85d fb04 	ldr.w	pc, [sp], #4
    d23a:	bf00      	nop
    d23c:	000197e8 	.word	0x000197e8

0000d240 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    d240:	b500      	push	{lr}
    d242:	b087      	sub	sp, #28
    d244:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d246:	4a40      	ldr	r2, [pc, #256]	; (d348 <Pdb_Adc_Ip_IRQHandler+0x108>)
    d248:	9b01      	ldr	r3, [sp, #4]
    d24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d24e:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    d250:	4a3e      	ldr	r2, [pc, #248]	; (d34c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d252:	9b01      	ldr	r3, [sp, #4]
    d254:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    d258:	2b00      	cmp	r3, #0
    d25a:	d04d      	beq.n	d2f8 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    d25c:	9b04      	ldr	r3, [sp, #16]
    d25e:	681b      	ldr	r3, [r3, #0]
    d260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d264:	2b00      	cmp	r3, #0
    d266:	d06a      	beq.n	d33e <Pdb_Adc_Ip_IRQHandler+0xfe>
    d268:	4a38      	ldr	r2, [pc, #224]	; (d34c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d26a:	9b01      	ldr	r3, [sp, #4]
    d26c:	00db      	lsls	r3, r3, #3
    d26e:	4413      	add	r3, r2
    d270:	685b      	ldr	r3, [r3, #4]
    d272:	2b00      	cmp	r3, #0
    d274:	d063      	beq.n	d33e <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d276:	2300      	movs	r3, #0
    d278:	f88d 3017 	strb.w	r3, [sp, #23]
    d27c:	e037      	b.n	d2ee <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    d27e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d282:	9904      	ldr	r1, [sp, #16]
    d284:	4613      	mov	r3, r2
    d286:	009b      	lsls	r3, r3, #2
    d288:	4413      	add	r3, r2
    d28a:	00db      	lsls	r3, r3, #3
    d28c:	440b      	add	r3, r1
    d28e:	3314      	adds	r3, #20
    d290:	681b      	ldr	r3, [r3, #0]
    d292:	b29b      	uxth	r3, r3
    d294:	b2db      	uxtb	r3, r3
    d296:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    d29a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    d29e:	2b00      	cmp	r3, #0
    d2a0:	d020      	beq.n	d2e4 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d2a2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d2a6:	9904      	ldr	r1, [sp, #16]
    d2a8:	4613      	mov	r3, r2
    d2aa:	009b      	lsls	r3, r3, #2
    d2ac:	4413      	add	r3, r2
    d2ae:	00db      	lsls	r3, r3, #3
    d2b0:	440b      	add	r3, r1
    d2b2:	3314      	adds	r3, #20
    d2b4:	681b      	ldr	r3, [r3, #0]
    d2b6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d2ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d2be:	9804      	ldr	r0, [sp, #16]
    d2c0:	4613      	mov	r3, r2
    d2c2:	009b      	lsls	r3, r3, #2
    d2c4:	4413      	add	r3, r2
    d2c6:	00db      	lsls	r3, r3, #3
    d2c8:	4403      	add	r3, r0
    d2ca:	3314      	adds	r3, #20
    d2cc:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    d2ce:	4a1f      	ldr	r2, [pc, #124]	; (d34c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d2d0:	9b01      	ldr	r3, [sp, #4]
    d2d2:	00db      	lsls	r3, r3, #3
    d2d4:	4413      	add	r3, r2
    d2d6:	685b      	ldr	r3, [r3, #4]
    d2d8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    d2dc:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d2e0:	4610      	mov	r0, r2
    d2e2:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d2e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d2e8:	3301      	adds	r3, #1
    d2ea:	f88d 3017 	strb.w	r3, [sp, #23]
    d2ee:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d2f2:	2b01      	cmp	r3, #1
    d2f4:	d9c3      	bls.n	d27e <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    d2f6:	e022      	b.n	d33e <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d2f8:	2300      	movs	r3, #0
    d2fa:	f88d 3017 	strb.w	r3, [sp, #23]
    d2fe:	e01a      	b.n	d336 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d300:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d304:	9904      	ldr	r1, [sp, #16]
    d306:	4613      	mov	r3, r2
    d308:	009b      	lsls	r3, r3, #2
    d30a:	4413      	add	r3, r2
    d30c:	00db      	lsls	r3, r3, #3
    d30e:	440b      	add	r3, r1
    d310:	3314      	adds	r3, #20
    d312:	681b      	ldr	r3, [r3, #0]
    d314:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d318:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d31c:	9804      	ldr	r0, [sp, #16]
    d31e:	4613      	mov	r3, r2
    d320:	009b      	lsls	r3, r3, #2
    d322:	4413      	add	r3, r2
    d324:	00db      	lsls	r3, r3, #3
    d326:	4403      	add	r3, r0
    d328:	3314      	adds	r3, #20
    d32a:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d32c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d330:	3301      	adds	r3, #1
    d332:	f88d 3017 	strb.w	r3, [sp, #23]
    d336:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d33a:	2b01      	cmp	r3, #1
    d33c:	d9e0      	bls.n	d300 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    d33e:	bf00      	nop
    d340:	b007      	add	sp, #28
    d342:	f85d fb04 	ldr.w	pc, [sp], #4
    d346:	bf00      	nop
    d348:	000197e8 	.word	0x000197e8
    d34c:	1fff8e18 	.word	0x1fff8e18

0000d350 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    d350:	b500      	push	{lr}
    d352:	b085      	sub	sp, #20
    d354:	9003      	str	r0, [sp, #12]
    d356:	460b      	mov	r3, r1
    d358:	9201      	str	r2, [sp, #4]
    d35a:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    d35e:	f005 ff1b 	bl	13198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    d362:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d366:	9a01      	ldr	r2, [sp, #4]
    d368:	4619      	mov	r1, r3
    d36a:	9803      	ldr	r0, [sp, #12]
    d36c:	f7ff fbb9 	bl	cae2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    d370:	f005 ff3e 	bl	131f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    d374:	f005 ffb4 	bl	132e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    d378:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d37c:	22ff      	movs	r2, #255	; 0xff
    d37e:	4619      	mov	r1, r3
    d380:	9803      	ldr	r0, [sp, #12]
    d382:	f7ff fbe6 	bl	cb52 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d386:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d38a:	9903      	ldr	r1, [sp, #12]
    d38c:	4613      	mov	r3, r2
    d38e:	009b      	lsls	r3, r3, #2
    d390:	4413      	add	r3, r2
    d392:	00db      	lsls	r3, r3, #3
    d394:	440b      	add	r3, r1
    d396:	3314      	adds	r3, #20
    d398:	681b      	ldr	r3, [r3, #0]
    d39a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d39e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d3a2:	9803      	ldr	r0, [sp, #12]
    d3a4:	4613      	mov	r3, r2
    d3a6:	009b      	lsls	r3, r3, #2
    d3a8:	4413      	add	r3, r2
    d3aa:	00db      	lsls	r3, r3, #3
    d3ac:	4403      	add	r3, r0
    d3ae:	3314      	adds	r3, #20
    d3b0:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    d3b2:	f005 ffc1 	bl	13338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    d3b6:	bf00      	nop
    d3b8:	b005      	add	sp, #20
    d3ba:	f85d fb04 	ldr.w	pc, [sp], #4
    d3be:	bf00      	nop

0000d3c0 <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    d3c0:	b082      	sub	sp, #8
    d3c2:	9001      	str	r0, [sp, #4]
    d3c4:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    d3c6:	9b01      	ldr	r3, [sp, #4]
    d3c8:	681b      	ldr	r3, [r3, #0]
    d3ca:	f023 0207 	bic.w	r2, r3, #7
    d3ce:	9b00      	ldr	r3, [sp, #0]
    d3d0:	f003 0307 	and.w	r3, r3, #7
    d3d4:	431a      	orrs	r2, r3
    d3d6:	9b01      	ldr	r3, [sp, #4]
    d3d8:	601a      	str	r2, [r3, #0]
}
    d3da:	bf00      	nop
    d3dc:	b002      	add	sp, #8
    d3de:	4770      	bx	lr

0000d3e0 <Ftm_Pwm_Ip_GetClockPs>:
 * @param[in] FtmBase The FTM base address pointer
 *
 * @return The FTM clock pre-scale divider
 */
static inline uint8 Ftm_Pwm_Ip_GetClockPs(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d3e0:	b082      	sub	sp, #8
    d3e2:	9001      	str	r0, [sp, #4]
    return (uint8)((FtmBase->SC & FTM_SC_PS_MASK) >> FTM_SC_PS_SHIFT);
    d3e4:	9b01      	ldr	r3, [sp, #4]
    d3e6:	681b      	ldr	r3, [r3, #0]
    d3e8:	b2db      	uxtb	r3, r3
    d3ea:	f003 0307 	and.w	r3, r3, #7
    d3ee:	b2db      	uxtb	r3, r3
}
    d3f0:	4618      	mov	r0, r3
    d3f2:	b002      	add	sp, #8
    d3f4:	4770      	bx	lr

0000d3f6 <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    d3f6:	b082      	sub	sp, #8
    d3f8:	9001      	str	r0, [sp, #4]
    d3fa:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    d3fc:	9b01      	ldr	r3, [sp, #4]
    d3fe:	681b      	ldr	r3, [r3, #0]
    d400:	f023 0218 	bic.w	r2, r3, #24
    d404:	9b00      	ldr	r3, [sp, #0]
    d406:	00db      	lsls	r3, r3, #3
    d408:	f003 0318 	and.w	r3, r3, #24
    d40c:	431a      	orrs	r2, r3
    d40e:	9b01      	ldr	r3, [sp, #4]
    d410:	601a      	str	r2, [r3, #0]
}
    d412:	bf00      	nop
    d414:	b002      	add	sp, #8
    d416:	4770      	bx	lr

0000d418 <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    d418:	b082      	sub	sp, #8
    d41a:	9001      	str	r0, [sp, #4]
    d41c:	460b      	mov	r3, r1
    d41e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    d422:	9b01      	ldr	r3, [sp, #4]
    d424:	681b      	ldr	r3, [r3, #0]
    d426:	f023 0320 	bic.w	r3, r3, #32
    d42a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d42e:	2a00      	cmp	r2, #0
    d430:	d001      	beq.n	d436 <Ftm_Pwm_Ip_SetCpwms+0x1e>
    d432:	2220      	movs	r2, #32
    d434:	e000      	b.n	d438 <Ftm_Pwm_Ip_SetCpwms+0x20>
    d436:	2200      	movs	r2, #0
    d438:	431a      	orrs	r2, r3
    d43a:	9b01      	ldr	r3, [sp, #4]
    d43c:	601a      	str	r2, [r3, #0]
}
    d43e:	bf00      	nop
    d440:	b002      	add	sp, #8
    d442:	4770      	bx	lr

0000d444 <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d444:	b082      	sub	sp, #8
    d446:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    d448:	9b01      	ldr	r3, [sp, #4]
    d44a:	681b      	ldr	r3, [r3, #0]
    d44c:	f003 0320 	and.w	r3, r3, #32
    d450:	2b00      	cmp	r3, #0
    d452:	bf14      	ite	ne
    d454:	2301      	movne	r3, #1
    d456:	2300      	moveq	r3, #0
    d458:	b2db      	uxtb	r3, r3
}
    d45a:	4618      	mov	r0, r3
    d45c:	b002      	add	sp, #8
    d45e:	4770      	bx	lr

0000d460 <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    d460:	b082      	sub	sp, #8
    d462:	9001      	str	r0, [sp, #4]
    d464:	460b      	mov	r3, r1
    d466:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    d46a:	9b01      	ldr	r3, [sp, #4]
    d46c:	681b      	ldr	r3, [r3, #0]
    d46e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    d472:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d476:	2a00      	cmp	r2, #0
    d478:	d002      	beq.n	d480 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    d47a:	f44f 7280 	mov.w	r2, #256	; 0x100
    d47e:	e000      	b.n	d482 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    d480:	2200      	movs	r2, #0
    d482:	431a      	orrs	r2, r3
    d484:	9b01      	ldr	r3, [sp, #4]
    d486:	601a      	str	r2, [r3, #0]
}
    d488:	bf00      	nop
    d48a:	b002      	add	sp, #8
    d48c:	4770      	bx	lr

0000d48e <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d48e:	b082      	sub	sp, #8
    d490:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    d492:	9b01      	ldr	r3, [sp, #4]
    d494:	681b      	ldr	r3, [r3, #0]
    d496:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    d49a:	9b01      	ldr	r3, [sp, #4]
    d49c:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    d49e:	bf00      	nop
    d4a0:	b002      	add	sp, #8
    d4a2:	4770      	bx	lr

0000d4a4 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    d4a4:	b082      	sub	sp, #8
    d4a6:	9001      	str	r0, [sp, #4]
    d4a8:	460b      	mov	r3, r1
    d4aa:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    d4ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d4b2:	3310      	adds	r3, #16
    d4b4:	2201      	movs	r2, #1
    d4b6:	409a      	lsls	r2, r3
    d4b8:	9b01      	ldr	r3, [sp, #4]
    d4ba:	681b      	ldr	r3, [r3, #0]
    d4bc:	431a      	orrs	r2, r3
    d4be:	9b01      	ldr	r3, [sp, #4]
    d4c0:	601a      	str	r2, [r3, #0]
}
    d4c2:	bf00      	nop
    d4c4:	b002      	add	sp, #8
    d4c6:	4770      	bx	lr

0000d4c8 <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    d4c8:	b082      	sub	sp, #8
    d4ca:	9001      	str	r0, [sp, #4]
    d4cc:	460b      	mov	r3, r1
    d4ce:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    d4d2:	9b01      	ldr	r3, [sp, #4]
    d4d4:	685b      	ldr	r3, [r3, #4]
    d4d6:	0c1b      	lsrs	r3, r3, #16
    d4d8:	041b      	lsls	r3, r3, #16
    d4da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d4de:	431a      	orrs	r2, r3
    d4e0:	9b01      	ldr	r3, [sp, #4]
    d4e2:	605a      	str	r2, [r3, #4]
}
    d4e4:	bf00      	nop
    d4e6:	b002      	add	sp, #8
    d4e8:	4770      	bx	lr

0000d4ea <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    d4ea:	b082      	sub	sp, #8
    d4ec:	9001      	str	r0, [sp, #4]
    d4ee:	460b      	mov	r3, r1
    d4f0:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    d4f4:	9b01      	ldr	r3, [sp, #4]
    d4f6:	689b      	ldr	r3, [r3, #8]
    d4f8:	0c1b      	lsrs	r3, r3, #16
    d4fa:	041b      	lsls	r3, r3, #16
    d4fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d500:	431a      	orrs	r2, r3
    d502:	9b01      	ldr	r3, [sp, #4]
    d504:	609a      	str	r2, [r3, #8]
}
    d506:	bf00      	nop
    d508:	b002      	add	sp, #8
    d50a:	4770      	bx	lr

0000d50c <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    d50c:	b084      	sub	sp, #16
    d50e:	9001      	str	r0, [sp, #4]
    d510:	460b      	mov	r3, r1
    d512:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    d516:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d51a:	9a01      	ldr	r2, [sp, #4]
    d51c:	3301      	adds	r3, #1
    d51e:	00db      	lsls	r3, r3, #3
    d520:	4413      	add	r3, r2
    d522:	685b      	ldr	r3, [r3, #4]
    d524:	089b      	lsrs	r3, r3, #2
    d526:	b2db      	uxtb	r3, r3
    d528:	f003 0301 	and.w	r3, r3, #1
    d52c:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    d530:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d534:	9a01      	ldr	r2, [sp, #4]
    d536:	3301      	adds	r3, #1
    d538:	00db      	lsls	r3, r3, #3
    d53a:	4413      	add	r3, r2
    d53c:	685b      	ldr	r3, [r3, #4]
    d53e:	08db      	lsrs	r3, r3, #3
    d540:	b2db      	uxtb	r3, r3
    d542:	005b      	lsls	r3, r3, #1
    d544:	b2db      	uxtb	r3, r3
    d546:	f003 0302 	and.w	r3, r3, #2
    d54a:	b2da      	uxtb	r2, r3
    d54c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d550:	4313      	orrs	r3, r2
    d552:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    d556:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    d55a:	4618      	mov	r0, r3
    d55c:	b004      	add	sp, #16
    d55e:	4770      	bx	lr

0000d560 <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    d560:	b086      	sub	sp, #24
    d562:	9003      	str	r0, [sp, #12]
    d564:	460b      	mov	r3, r1
    d566:	9201      	str	r2, [sp, #4]
    d568:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    d56c:	9b01      	ldr	r3, [sp, #4]
    d56e:	009b      	lsls	r3, r3, #2
    d570:	f003 0304 	and.w	r3, r3, #4
    d574:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    d576:	9b01      	ldr	r3, [sp, #4]
    d578:	009b      	lsls	r3, r3, #2
    d57a:	f003 0308 	and.w	r3, r3, #8
    d57e:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    d580:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d584:	9a03      	ldr	r2, [sp, #12]
    d586:	3301      	adds	r3, #1
    d588:	00db      	lsls	r3, r3, #3
    d58a:	4413      	add	r3, r2
    d58c:	685b      	ldr	r3, [r3, #4]
    d58e:	f023 0104 	bic.w	r1, r3, #4
    d592:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d596:	9a05      	ldr	r2, [sp, #20]
    d598:	430a      	orrs	r2, r1
    d59a:	9903      	ldr	r1, [sp, #12]
    d59c:	3301      	adds	r3, #1
    d59e:	00db      	lsls	r3, r3, #3
    d5a0:	440b      	add	r3, r1
    d5a2:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    d5a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5a8:	9a03      	ldr	r2, [sp, #12]
    d5aa:	3301      	adds	r3, #1
    d5ac:	00db      	lsls	r3, r3, #3
    d5ae:	4413      	add	r3, r2
    d5b0:	685b      	ldr	r3, [r3, #4]
    d5b2:	f023 0108 	bic.w	r1, r3, #8
    d5b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5ba:	9a04      	ldr	r2, [sp, #16]
    d5bc:	430a      	orrs	r2, r1
    d5be:	9903      	ldr	r1, [sp, #12]
    d5c0:	3301      	adds	r3, #1
    d5c2:	00db      	lsls	r3, r3, #3
    d5c4:	440b      	add	r3, r1
    d5c6:	605a      	str	r2, [r3, #4]
}
    d5c8:	bf00      	nop
    d5ca:	b006      	add	sp, #24
    d5cc:	4770      	bx	lr

0000d5ce <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    d5ce:	b086      	sub	sp, #24
    d5d0:	9003      	str	r0, [sp, #12]
    d5d2:	460b      	mov	r3, r1
    d5d4:	9201      	str	r2, [sp, #4]
    d5d6:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    d5da:	9b01      	ldr	r3, [sp, #4]
    d5dc:	009b      	lsls	r3, r3, #2
    d5de:	f003 0310 	and.w	r3, r3, #16
    d5e2:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    d5e4:	9b01      	ldr	r3, [sp, #4]
    d5e6:	009b      	lsls	r3, r3, #2
    d5e8:	f003 0320 	and.w	r3, r3, #32
    d5ec:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    d5ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5f2:	9a03      	ldr	r2, [sp, #12]
    d5f4:	3301      	adds	r3, #1
    d5f6:	00db      	lsls	r3, r3, #3
    d5f8:	4413      	add	r3, r2
    d5fa:	685b      	ldr	r3, [r3, #4]
    d5fc:	f023 0110 	bic.w	r1, r3, #16
    d600:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d604:	9a05      	ldr	r2, [sp, #20]
    d606:	430a      	orrs	r2, r1
    d608:	9903      	ldr	r1, [sp, #12]
    d60a:	3301      	adds	r3, #1
    d60c:	00db      	lsls	r3, r3, #3
    d60e:	440b      	add	r3, r1
    d610:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    d612:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d616:	9a03      	ldr	r2, [sp, #12]
    d618:	3301      	adds	r3, #1
    d61a:	00db      	lsls	r3, r3, #3
    d61c:	4413      	add	r3, r2
    d61e:	685b      	ldr	r3, [r3, #4]
    d620:	f023 0120 	bic.w	r1, r3, #32
    d624:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d628:	9a04      	ldr	r2, [sp, #16]
    d62a:	430a      	orrs	r2, r1
    d62c:	9903      	ldr	r1, [sp, #12]
    d62e:	3301      	adds	r3, #1
    d630:	00db      	lsls	r3, r3, #3
    d632:	440b      	add	r3, r1
    d634:	605a      	str	r2, [r3, #4]
}
    d636:	bf00      	nop
    d638:	b006      	add	sp, #24
    d63a:	4770      	bx	lr

0000d63c <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    d63c:	b084      	sub	sp, #16
    d63e:	9001      	str	r0, [sp, #4]
    d640:	460b      	mov	r3, r1
    d642:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    d646:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d64a:	9a01      	ldr	r2, [sp, #4]
    d64c:	3301      	adds	r3, #1
    d64e:	00db      	lsls	r3, r3, #3
    d650:	4413      	add	r3, r2
    d652:	685b      	ldr	r3, [r3, #4]
    d654:	091b      	lsrs	r3, r3, #4
    d656:	b2db      	uxtb	r3, r3
    d658:	f003 0301 	and.w	r3, r3, #1
    d65c:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    d660:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d664:	9a01      	ldr	r2, [sp, #4]
    d666:	3301      	adds	r3, #1
    d668:	00db      	lsls	r3, r3, #3
    d66a:	4413      	add	r3, r2
    d66c:	685b      	ldr	r3, [r3, #4]
    d66e:	095b      	lsrs	r3, r3, #5
    d670:	b2db      	uxtb	r3, r3
    d672:	005b      	lsls	r3, r3, #1
    d674:	b2db      	uxtb	r3, r3
    d676:	f003 0302 	and.w	r3, r3, #2
    d67a:	b2da      	uxtb	r2, r3
    d67c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d680:	4313      	orrs	r3, r2
    d682:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    d686:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    d68a:	4618      	mov	r0, r3
    d68c:	b004      	add	sp, #16
    d68e:	4770      	bx	lr

0000d690 <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    d690:	b082      	sub	sp, #8
    d692:	9001      	str	r0, [sp, #4]
    d694:	460b      	mov	r3, r1
    d696:	f88d 3003 	strb.w	r3, [sp, #3]
    d69a:	4613      	mov	r3, r2
    d69c:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    d6a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d6a4:	9a01      	ldr	r2, [sp, #4]
    d6a6:	3301      	adds	r3, #1
    d6a8:	00db      	lsls	r3, r3, #3
    d6aa:	4413      	add	r3, r2
    d6ac:	685b      	ldr	r3, [r3, #4]
    d6ae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    d6b2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d6b6:	2b00      	cmp	r3, #0
    d6b8:	d001      	beq.n	d6be <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    d6ba:	2140      	movs	r1, #64	; 0x40
    d6bc:	e000      	b.n	d6c0 <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    d6be:	2100      	movs	r1, #0
    d6c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d6c4:	430a      	orrs	r2, r1
    d6c6:	9901      	ldr	r1, [sp, #4]
    d6c8:	3301      	adds	r3, #1
    d6ca:	00db      	lsls	r3, r3, #3
    d6cc:	440b      	add	r3, r1
    d6ce:	605a      	str	r2, [r3, #4]
}
    d6d0:	bf00      	nop
    d6d2:	b002      	add	sp, #8
    d6d4:	4770      	bx	lr

0000d6d6 <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    d6d6:	b082      	sub	sp, #8
    d6d8:	9001      	str	r0, [sp, #4]
    d6da:	460b      	mov	r3, r1
    d6dc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    d6e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d6e4:	9a01      	ldr	r2, [sp, #4]
    d6e6:	3301      	adds	r3, #1
    d6e8:	00db      	lsls	r3, r3, #3
    d6ea:	4413      	add	r3, r2
    d6ec:	685a      	ldr	r2, [r3, #4]
    d6ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d6f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d6f6:	9901      	ldr	r1, [sp, #4]
    d6f8:	3301      	adds	r3, #1
    d6fa:	00db      	lsls	r3, r3, #3
    d6fc:	440b      	add	r3, r1
    d6fe:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    d700:	bf00      	nop
    d702:	b002      	add	sp, #8
    d704:	4770      	bx	lr

0000d706 <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    d706:	b082      	sub	sp, #8
    d708:	9001      	str	r0, [sp, #4]
    d70a:	460b      	mov	r3, r1
    d70c:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    d710:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d714:	9a01      	ldr	r2, [sp, #4]
    d716:	3301      	adds	r3, #1
    d718:	00db      	lsls	r3, r3, #3
    d71a:	4413      	add	r3, r2
    d71c:	685b      	ldr	r3, [r3, #4]
    d71e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d722:	2b00      	cmp	r3, #0
    d724:	bf14      	ite	ne
    d726:	2301      	movne	r3, #1
    d728:	2300      	moveq	r3, #0
    d72a:	b2db      	uxtb	r3, r3
}
    d72c:	4618      	mov	r0, r3
    d72e:	b002      	add	sp, #8
    d730:	4770      	bx	lr

0000d732 <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    d732:	b082      	sub	sp, #8
    d734:	9001      	str	r0, [sp, #4]
    d736:	460b      	mov	r3, r1
    d738:	f88d 3003 	strb.w	r3, [sp, #3]
    d73c:	4613      	mov	r3, r2
    d73e:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    d742:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d746:	f8bd 2000 	ldrh.w	r2, [sp]
    d74a:	9901      	ldr	r1, [sp, #4]
    d74c:	3301      	adds	r3, #1
    d74e:	00db      	lsls	r3, r3, #3
    d750:	440b      	add	r3, r1
    d752:	609a      	str	r2, [r3, #8]
}
    d754:	bf00      	nop
    d756:	b002      	add	sp, #8
    d758:	4770      	bx	lr

0000d75a <Ftm_Pwm_Ip_GetChnCountVal>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnCountVal_Activity
 */
static inline uint16 Ftm_Pwm_Ip_GetChnCountVal(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    d75a:	b082      	sub	sp, #8
    d75c:	9001      	str	r0, [sp, #4]
    d75e:	460b      	mov	r3, r1
    d760:	f88d 3003 	strb.w	r3, [sp, #3]
    return (uint16)(FtmBase->CONTROLS[Channel].CV);
    d764:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d768:	9a01      	ldr	r2, [sp, #4]
    d76a:	3301      	adds	r3, #1
    d76c:	00db      	lsls	r3, r3, #3
    d76e:	4413      	add	r3, r2
    d770:	689b      	ldr	r3, [r3, #8]
    d772:	b29b      	uxth	r3, r3
}
    d774:	4618      	mov	r0, r3
    d776:	b002      	add	sp, #8
    d778:	4770      	bx	lr

0000d77a <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    d77a:	b082      	sub	sp, #8
    d77c:	9001      	str	r0, [sp, #4]
    d77e:	460b      	mov	r3, r1
    d780:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    d784:	9b01      	ldr	r3, [sp, #4]
    d786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d788:	0c1b      	lsrs	r3, r3, #16
    d78a:	041b      	lsls	r3, r3, #16
    d78c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d790:	431a      	orrs	r2, r3
    d792:	9b01      	ldr	r3, [sp, #4]
    d794:	64da      	str	r2, [r3, #76]	; 0x4c
}
    d796:	bf00      	nop
    d798:	b002      	add	sp, #8
    d79a:	4770      	bx	lr

0000d79c <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    d79c:	b082      	sub	sp, #8
    d79e:	9001      	str	r0, [sp, #4]
    d7a0:	460b      	mov	r3, r1
    d7a2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    d7a6:	9b01      	ldr	r3, [sp, #4]
    d7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d7aa:	f023 0301 	bic.w	r3, r3, #1
    d7ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d7b2:	2a00      	cmp	r2, #0
    d7b4:	d001      	beq.n	d7ba <Ftm_Pwm_Ip_Enable+0x1e>
    d7b6:	2201      	movs	r2, #1
    d7b8:	e000      	b.n	d7bc <Ftm_Pwm_Ip_Enable+0x20>
    d7ba:	2200      	movs	r2, #0
    d7bc:	431a      	orrs	r2, r3
    d7be:	9b01      	ldr	r3, [sp, #4]
    d7c0:	655a      	str	r2, [r3, #84]	; 0x54
}
    d7c2:	bf00      	nop
    d7c4:	b002      	add	sp, #8
    d7c6:	4770      	bx	lr

0000d7c8 <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    d7c8:	b082      	sub	sp, #8
    d7ca:	9001      	str	r0, [sp, #4]
    d7cc:	460b      	mov	r3, r1
    d7ce:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    d7d2:	9b01      	ldr	r3, [sp, #4]
    d7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d7d6:	f023 0308 	bic.w	r3, r3, #8
    d7da:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d7de:	2a00      	cmp	r2, #0
    d7e0:	d001      	beq.n	d7e6 <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    d7e2:	2208      	movs	r2, #8
    d7e4:	e000      	b.n	d7e8 <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    d7e6:	2200      	movs	r2, #0
    d7e8:	431a      	orrs	r2, r3
    d7ea:	9b01      	ldr	r3, [sp, #4]
    d7ec:	655a      	str	r2, [r3, #84]	; 0x54
}
    d7ee:	bf00      	nop
    d7f0:	b002      	add	sp, #8
    d7f2:	4770      	bx	lr

0000d7f4 <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    d7f4:	b082      	sub	sp, #8
    d7f6:	9001      	str	r0, [sp, #4]
    d7f8:	460b      	mov	r3, r1
    d7fa:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    d7fe:	9b01      	ldr	r3, [sp, #4]
    d800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d802:	f023 0301 	bic.w	r3, r3, #1
    d806:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d80a:	2a00      	cmp	r2, #0
    d80c:	d001      	beq.n	d812 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    d80e:	2201      	movs	r2, #1
    d810:	e000      	b.n	d814 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    d812:	2200      	movs	r2, #0
    d814:	431a      	orrs	r2, r3
    d816:	9b01      	ldr	r3, [sp, #4]
    d818:	659a      	str	r2, [r3, #88]	; 0x58
}
    d81a:	bf00      	nop
    d81c:	b002      	add	sp, #8
    d81e:	4770      	bx	lr

0000d820 <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    d820:	b082      	sub	sp, #8
    d822:	9001      	str	r0, [sp, #4]
    d824:	460b      	mov	r3, r1
    d826:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    d82a:	9b01      	ldr	r3, [sp, #4]
    d82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d82e:	f023 0302 	bic.w	r3, r3, #2
    d832:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d836:	2a00      	cmp	r2, #0
    d838:	d001      	beq.n	d83e <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    d83a:	2202      	movs	r2, #2
    d83c:	e000      	b.n	d840 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    d83e:	2200      	movs	r2, #0
    d840:	431a      	orrs	r2, r3
    d842:	9b01      	ldr	r3, [sp, #4]
    d844:	659a      	str	r2, [r3, #88]	; 0x58
}
    d846:	bf00      	nop
    d848:	b002      	add	sp, #8
    d84a:	4770      	bx	lr

0000d84c <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    d84c:	b082      	sub	sp, #8
    d84e:	9001      	str	r0, [sp, #4]
    d850:	460b      	mov	r3, r1
    d852:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    d856:	9b01      	ldr	r3, [sp, #4]
    d858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d85a:	f023 0308 	bic.w	r3, r3, #8
    d85e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d862:	2a00      	cmp	r2, #0
    d864:	d001      	beq.n	d86a <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    d866:	2208      	movs	r2, #8
    d868:	e000      	b.n	d86c <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    d86a:	2200      	movs	r2, #0
    d86c:	431a      	orrs	r2, r3
    d86e:	9b01      	ldr	r3, [sp, #4]
    d870:	659a      	str	r2, [r3, #88]	; 0x58
}
    d872:	bf00      	nop
    d874:	b002      	add	sp, #8
    d876:	4770      	bx	lr

0000d878 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    d878:	b082      	sub	sp, #8
    d87a:	9001      	str	r0, [sp, #4]
    d87c:	460b      	mov	r3, r1
    d87e:	f88d 3003 	strb.w	r3, [sp, #3]
    d882:	4613      	mov	r3, r2
    d884:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    d888:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d88c:	2b00      	cmp	r3, #0
    d88e:	d00a      	beq.n	d8a6 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    d890:	9b01      	ldr	r3, [sp, #4]
    d892:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    d894:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d898:	2110      	movs	r1, #16
    d89a:	fa01 f303 	lsl.w	r3, r1, r3
    d89e:	431a      	orrs	r2, r3
    d8a0:	9b01      	ldr	r3, [sp, #4]
    d8a2:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    d8a4:	e00a      	b.n	d8bc <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    d8a6:	9b01      	ldr	r3, [sp, #4]
    d8a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    d8aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d8ae:	2110      	movs	r1, #16
    d8b0:	fa01 f303 	lsl.w	r3, r1, r3
    d8b4:	43db      	mvns	r3, r3
    d8b6:	401a      	ands	r2, r3
    d8b8:	9b01      	ldr	r3, [sp, #4]
    d8ba:	659a      	str	r2, [r3, #88]	; 0x58
}
    d8bc:	bf00      	nop
    d8be:	b002      	add	sp, #8
    d8c0:	4770      	bx	lr

0000d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    d8c2:	b082      	sub	sp, #8
    d8c4:	9001      	str	r0, [sp, #4]
    d8c6:	460b      	mov	r3, r1
    d8c8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    d8cc:	9b01      	ldr	r3, [sp, #4]
    d8ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d8d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    d8d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d8d8:	2a00      	cmp	r2, #0
    d8da:	d001      	beq.n	d8e0 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    d8dc:	2280      	movs	r2, #128	; 0x80
    d8de:	e000      	b.n	d8e2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    d8e0:	2200      	movs	r2, #0
    d8e2:	431a      	orrs	r2, r3
    d8e4:	9b01      	ldr	r3, [sp, #4]
    d8e6:	659a      	str	r2, [r3, #88]	; 0x58
}
    d8e8:	bf00      	nop
    d8ea:	b002      	add	sp, #8
    d8ec:	4770      	bx	lr

0000d8ee <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    d8ee:	b084      	sub	sp, #16
    d8f0:	9003      	str	r0, [sp, #12]
    d8f2:	460b      	mov	r3, r1
    d8f4:	9201      	str	r2, [sp, #4]
    d8f6:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    d8fa:	9b01      	ldr	r3, [sp, #4]
    d8fc:	2b01      	cmp	r3, #1
    d8fe:	d10a      	bne.n	d916 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    d900:	9b03      	ldr	r3, [sp, #12]
    d902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    d904:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d908:	2101      	movs	r1, #1
    d90a:	fa01 f303 	lsl.w	r3, r1, r3
    d90e:	431a      	orrs	r2, r3
    d910:	9b03      	ldr	r3, [sp, #12]
    d912:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    d914:	e00a      	b.n	d92c <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    d916:	9b03      	ldr	r3, [sp, #12]
    d918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    d91a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d91e:	2101      	movs	r1, #1
    d920:	fa01 f303 	lsl.w	r3, r1, r3
    d924:	43db      	mvns	r3, r3
    d926:	401a      	ands	r2, r3
    d928:	9b03      	ldr	r3, [sp, #12]
    d92a:	65da      	str	r2, [r3, #92]	; 0x5c
}
    d92c:	bf00      	nop
    d92e:	b004      	add	sp, #16
    d930:	4770      	bx	lr

0000d932 <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    d932:	b082      	sub	sp, #8
    d934:	9001      	str	r0, [sp, #4]
    d936:	460b      	mov	r3, r1
    d938:	f88d 3003 	strb.w	r3, [sp, #3]
    d93c:	4613      	mov	r3, r2
    d93e:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    d942:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d946:	2b00      	cmp	r3, #0
    d948:	d00a      	beq.n	d960 <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    d94a:	9b01      	ldr	r3, [sp, #4]
    d94c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d94e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d952:	2101      	movs	r1, #1
    d954:	fa01 f303 	lsl.w	r3, r1, r3
    d958:	431a      	orrs	r2, r3
    d95a:	9b01      	ldr	r3, [sp, #4]
    d95c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    d95e:	e00a      	b.n	d976 <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    d960:	9b01      	ldr	r3, [sp, #4]
    d962:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d964:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d968:	2101      	movs	r1, #1
    d96a:	fa01 f303 	lsl.w	r3, r1, r3
    d96e:	43db      	mvns	r3, r3
    d970:	401a      	ands	r2, r3
    d972:	9b01      	ldr	r3, [sp, #4]
    d974:	661a      	str	r2, [r3, #96]	; 0x60
}
    d976:	bf00      	nop
    d978:	b002      	add	sp, #8
    d97a:	4770      	bx	lr

0000d97c <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    d97c:	b082      	sub	sp, #8
    d97e:	9001      	str	r0, [sp, #4]
    d980:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    d982:	9b01      	ldr	r3, [sp, #4]
    d984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d986:	9b00      	ldr	r3, [sp, #0]
    d988:	43db      	mvns	r3, r3
    d98a:	401a      	ands	r2, r3
    d98c:	9b00      	ldr	r3, [sp, #0]
    d98e:	431a      	orrs	r2, r3
    d990:	9b01      	ldr	r3, [sp, #4]
    d992:	661a      	str	r2, [r3, #96]	; 0x60
}
    d994:	bf00      	nop
    d996:	b002      	add	sp, #8
    d998:	4770      	bx	lr

0000d99a <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    d99a:	b082      	sub	sp, #8
    d99c:	9001      	str	r0, [sp, #4]
    d99e:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    d9a0:	9b01      	ldr	r3, [sp, #4]
    d9a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    d9a4:	9b00      	ldr	r3, [sp, #0]
    d9a6:	43db      	mvns	r3, r3
    d9a8:	401a      	ands	r2, r3
    d9aa:	9b01      	ldr	r3, [sp, #4]
    d9ac:	661a      	str	r2, [r3, #96]	; 0x60
}
    d9ae:	bf00      	nop
    d9b0:	b002      	add	sp, #8
    d9b2:	4770      	bx	lr

0000d9b4 <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    d9b4:	b082      	sub	sp, #8
    d9b6:	9001      	str	r0, [sp, #4]
    d9b8:	460b      	mov	r3, r1
    d9ba:	f88d 3003 	strb.w	r3, [sp, #3]
    d9be:	4613      	mov	r3, r2
    d9c0:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    d9c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d9c8:	2b00      	cmp	r3, #0
    d9ca:	d00b      	beq.n	d9e4 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    d9cc:	9b01      	ldr	r3, [sp, #4]
    d9ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    d9d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d9d4:	00db      	lsls	r3, r3, #3
    d9d6:	2101      	movs	r1, #1
    d9d8:	fa01 f303 	lsl.w	r3, r1, r3
    d9dc:	431a      	orrs	r2, r3
    d9de:	9b01      	ldr	r3, [sp, #4]
    d9e0:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    d9e2:	e00b      	b.n	d9fc <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    d9e4:	9b01      	ldr	r3, [sp, #4]
    d9e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    d9e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d9ec:	00db      	lsls	r3, r3, #3
    d9ee:	2101      	movs	r1, #1
    d9f0:	fa01 f303 	lsl.w	r3, r1, r3
    d9f4:	43db      	mvns	r3, r3
    d9f6:	401a      	ands	r2, r3
    d9f8:	9b01      	ldr	r3, [sp, #4]
    d9fa:	665a      	str	r2, [r3, #100]	; 0x64
}
    d9fc:	bf00      	nop
    d9fe:	b002      	add	sp, #8
    da00:	4770      	bx	lr

0000da02 <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    da02:	b082      	sub	sp, #8
    da04:	9001      	str	r0, [sp, #4]
    da06:	460b      	mov	r3, r1
    da08:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    da0c:	9b01      	ldr	r3, [sp, #4]
    da0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    da10:	f89d 3003 	ldrb.w	r3, [sp, #3]
    da14:	00db      	lsls	r3, r3, #3
    da16:	fa22 f303 	lsr.w	r3, r2, r3
    da1a:	f003 0301 	and.w	r3, r3, #1
    da1e:	2b00      	cmp	r3, #0
    da20:	bf14      	ite	ne
    da22:	2301      	movne	r3, #1
    da24:	2300      	moveq	r3, #0
    da26:	b2db      	uxtb	r3, r3
}
    da28:	4618      	mov	r0, r3
    da2a:	b002      	add	sp, #8
    da2c:	4770      	bx	lr

0000da2e <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    da2e:	b082      	sub	sp, #8
    da30:	9001      	str	r0, [sp, #4]
    da32:	460b      	mov	r3, r1
    da34:	f88d 3003 	strb.w	r3, [sp, #3]
    da38:	4613      	mov	r3, r2
    da3a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    da3e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    da42:	2b00      	cmp	r3, #0
    da44:	d00b      	beq.n	da5e <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    da46:	9b01      	ldr	r3, [sp, #4]
    da48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    da4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    da4e:	00db      	lsls	r3, r3, #3
    da50:	2102      	movs	r1, #2
    da52:	fa01 f303 	lsl.w	r3, r1, r3
    da56:	431a      	orrs	r2, r3
    da58:	9b01      	ldr	r3, [sp, #4]
    da5a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    da5c:	e00b      	b.n	da76 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    da5e:	9b01      	ldr	r3, [sp, #4]
    da60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    da62:	f89d 3003 	ldrb.w	r3, [sp, #3]
    da66:	00db      	lsls	r3, r3, #3
    da68:	2102      	movs	r1, #2
    da6a:	fa01 f303 	lsl.w	r3, r1, r3
    da6e:	43db      	mvns	r3, r3
    da70:	401a      	ands	r2, r3
    da72:	9b01      	ldr	r3, [sp, #4]
    da74:	665a      	str	r2, [r3, #100]	; 0x64
}
    da76:	bf00      	nop
    da78:	b002      	add	sp, #8
    da7a:	4770      	bx	lr

0000da7c <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    da7c:	b082      	sub	sp, #8
    da7e:	9001      	str	r0, [sp, #4]
    da80:	460b      	mov	r3, r1
    da82:	f88d 3003 	strb.w	r3, [sp, #3]
    da86:	4613      	mov	r3, r2
    da88:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    da8c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    da90:	2b00      	cmp	r3, #0
    da92:	d00b      	beq.n	daac <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    da94:	9b01      	ldr	r3, [sp, #4]
    da96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    da98:	f89d 3003 	ldrb.w	r3, [sp, #3]
    da9c:	00db      	lsls	r3, r3, #3
    da9e:	2110      	movs	r1, #16
    daa0:	fa01 f303 	lsl.w	r3, r1, r3
    daa4:	431a      	orrs	r2, r3
    daa6:	9b01      	ldr	r3, [sp, #4]
    daa8:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    daaa:	e00b      	b.n	dac4 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    daac:	9b01      	ldr	r3, [sp, #4]
    daae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dab0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dab4:	00db      	lsls	r3, r3, #3
    dab6:	2110      	movs	r1, #16
    dab8:	fa01 f303 	lsl.w	r3, r1, r3
    dabc:	43db      	mvns	r3, r3
    dabe:	401a      	ands	r2, r3
    dac0:	9b01      	ldr	r3, [sp, #4]
    dac2:	665a      	str	r2, [r3, #100]	; 0x64
}
    dac4:	bf00      	nop
    dac6:	b002      	add	sp, #8
    dac8:	4770      	bx	lr

0000daca <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    daca:	b082      	sub	sp, #8
    dacc:	9001      	str	r0, [sp, #4]
    dace:	460b      	mov	r3, r1
    dad0:	f88d 3003 	strb.w	r3, [sp, #3]
    dad4:	4613      	mov	r3, r2
    dad6:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    dada:	f89d 3002 	ldrb.w	r3, [sp, #2]
    dade:	2b00      	cmp	r3, #0
    dae0:	d00b      	beq.n	dafa <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    dae2:	9b01      	ldr	r3, [sp, #4]
    dae4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dae6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    daea:	00db      	lsls	r3, r3, #3
    daec:	2120      	movs	r1, #32
    daee:	fa01 f303 	lsl.w	r3, r1, r3
    daf2:	431a      	orrs	r2, r3
    daf4:	9b01      	ldr	r3, [sp, #4]
    daf6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    daf8:	e00b      	b.n	db12 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    dafa:	9b01      	ldr	r3, [sp, #4]
    dafc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dafe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db02:	00db      	lsls	r3, r3, #3
    db04:	2120      	movs	r1, #32
    db06:	fa01 f303 	lsl.w	r3, r1, r3
    db0a:	43db      	mvns	r3, r3
    db0c:	401a      	ands	r2, r3
    db0e:	9b01      	ldr	r3, [sp, #4]
    db10:	665a      	str	r2, [r3, #100]	; 0x64
}
    db12:	bf00      	nop
    db14:	b002      	add	sp, #8
    db16:	4770      	bx	lr

0000db18 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    db18:	b082      	sub	sp, #8
    db1a:	9001      	str	r0, [sp, #4]
    db1c:	460b      	mov	r3, r1
    db1e:	f88d 3003 	strb.w	r3, [sp, #3]
    db22:	4613      	mov	r3, r2
    db24:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    db28:	f89d 3002 	ldrb.w	r3, [sp, #2]
    db2c:	2b00      	cmp	r3, #0
    db2e:	d00b      	beq.n	db48 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    db30:	9b01      	ldr	r3, [sp, #4]
    db32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    db34:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db38:	00db      	lsls	r3, r3, #3
    db3a:	2180      	movs	r1, #128	; 0x80
    db3c:	fa01 f303 	lsl.w	r3, r1, r3
    db40:	431a      	orrs	r2, r3
    db42:	9b01      	ldr	r3, [sp, #4]
    db44:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    db46:	e00b      	b.n	db60 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    db48:	9b01      	ldr	r3, [sp, #4]
    db4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    db4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db50:	00db      	lsls	r3, r3, #3
    db52:	2180      	movs	r1, #128	; 0x80
    db54:	fa01 f303 	lsl.w	r3, r1, r3
    db58:	43db      	mvns	r3, r3
    db5a:	401a      	ands	r2, r3
    db5c:	9b01      	ldr	r3, [sp, #4]
    db5e:	665a      	str	r2, [r3, #100]	; 0x64
}
    db60:	bf00      	nop
    db62:	b002      	add	sp, #8
    db64:	4770      	bx	lr

0000db66 <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    db66:	b082      	sub	sp, #8
    db68:	9001      	str	r0, [sp, #4]
    db6a:	460b      	mov	r3, r1
    db6c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    db70:	9b01      	ldr	r3, [sp, #4]
    db72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    db74:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    db78:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    db80:	431a      	orrs	r2, r3
    db82:	9b01      	ldr	r3, [sp, #4]
    db84:	669a      	str	r2, [r3, #104]	; 0x68
}
    db86:	bf00      	nop
    db88:	b002      	add	sp, #8
    db8a:	4770      	bx	lr

0000db8c <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    db8c:	b082      	sub	sp, #8
    db8e:	9001      	str	r0, [sp, #4]
    db90:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    db92:	9b01      	ldr	r3, [sp, #4]
    db94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    db96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    db9a:	9b00      	ldr	r3, [sp, #0]
    db9c:	b2db      	uxtb	r3, r3
    db9e:	019b      	lsls	r3, r3, #6
    dba0:	b2db      	uxtb	r3, r3
    dba2:	431a      	orrs	r2, r3
    dba4:	9b01      	ldr	r3, [sp, #4]
    dba6:	669a      	str	r2, [r3, #104]	; 0x68
}
    dba8:	bf00      	nop
    dbaa:	b002      	add	sp, #8
    dbac:	4770      	bx	lr

0000dbae <Ftm_Pwm_Ip_GetDeadtimePrescaler>:
 * @brief Get the FTM dead time divider.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline uint8 Ftm_Pwm_Ip_GetDeadtimePrescaler(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    dbae:	b082      	sub	sp, #8
    dbb0:	9001      	str	r0, [sp, #4]
    return (uint8)(FtmBase->DEADTIME & FTM_DEADTIME_DTPS_MASK)>>FTM_DEADTIME_DTPS_SHIFT;
    dbb2:	9b01      	ldr	r3, [sp, #4]
    dbb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dbb6:	b2db      	uxtb	r3, r3
    dbb8:	119b      	asrs	r3, r3, #6
    dbba:	b2db      	uxtb	r3, r3
    dbbc:	f003 0303 	and.w	r3, r3, #3
    dbc0:	b2db      	uxtb	r3, r3
}
    dbc2:	4618      	mov	r0, r3
    dbc4:	b002      	add	sp, #8
    dbc6:	4770      	bx	lr

0000dbc8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    dbc8:	b082      	sub	sp, #8
    dbca:	9001      	str	r0, [sp, #4]
    dbcc:	460b      	mov	r3, r1
    dbce:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    dbd2:	9b01      	ldr	r3, [sp, #4]
    dbd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dbd6:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    dbda:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dbde:	041b      	lsls	r3, r3, #16
    dbe0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    dbe4:	431a      	orrs	r2, r3
    dbe6:	9b01      	ldr	r3, [sp, #4]
    dbe8:	669a      	str	r2, [r3, #104]	; 0x68
}
    dbea:	bf00      	nop
    dbec:	b002      	add	sp, #8
    dbee:	4770      	bx	lr

0000dbf0 <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    dbf0:	b082      	sub	sp, #8
    dbf2:	9001      	str	r0, [sp, #4]
    dbf4:	460b      	mov	r3, r1
    dbf6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    dbfa:	9b01      	ldr	r3, [sp, #4]
    dbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    dbfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    dc02:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dc06:	2a00      	cmp	r2, #0
    dc08:	d001      	beq.n	dc0e <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    dc0a:	2240      	movs	r2, #64	; 0x40
    dc0c:	e000      	b.n	dc10 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    dc0e:	2200      	movs	r2, #0
    dc10:	431a      	orrs	r2, r3
    dc12:	9b01      	ldr	r3, [sp, #4]
    dc14:	66da      	str	r2, [r3, #108]	; 0x6c
}
    dc16:	bf00      	nop
    dc18:	b002      	add	sp, #8
    dc1a:	4770      	bx	lr

0000dc1c <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    dc1c:	b082      	sub	sp, #8
    dc1e:	9001      	str	r0, [sp, #4]
    dc20:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    dc22:	9b01      	ldr	r3, [sp, #4]
    dc24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    dc26:	9b00      	ldr	r3, [sp, #0]
    dc28:	43db      	mvns	r3, r3
    dc2a:	401a      	ands	r2, r3
    dc2c:	9b01      	ldr	r3, [sp, #4]
    dc2e:	66da      	str	r2, [r3, #108]	; 0x6c
}
    dc30:	bf00      	nop
    dc32:	b002      	add	sp, #8
    dc34:	4770      	bx	lr

0000dc36 <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    dc36:	b082      	sub	sp, #8
    dc38:	9001      	str	r0, [sp, #4]
    dc3a:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    dc3c:	9b01      	ldr	r3, [sp, #4]
    dc3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    dc40:	9b00      	ldr	r3, [sp, #0]
    dc42:	43db      	mvns	r3, r3
    dc44:	401a      	ands	r2, r3
    dc46:	9b00      	ldr	r3, [sp, #0]
    dc48:	431a      	orrs	r2, r3
    dc4a:	9b01      	ldr	r3, [sp, #4]
    dc4c:	66da      	str	r2, [r3, #108]	; 0x6c
}
    dc4e:	bf00      	nop
    dc50:	b002      	add	sp, #8
    dc52:	4770      	bx	lr

0000dc54 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    dc54:	b084      	sub	sp, #16
    dc56:	9003      	str	r0, [sp, #12]
    dc58:	460b      	mov	r3, r1
    dc5a:	9201      	str	r2, [sp, #4]
    dc5c:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    dc60:	9b01      	ldr	r3, [sp, #4]
    dc62:	2b00      	cmp	r3, #0
    dc64:	d10b      	bne.n	dc7e <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    dc66:	9b03      	ldr	r3, [sp, #12]
    dc68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    dc6a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc6e:	2101      	movs	r1, #1
    dc70:	fa01 f303 	lsl.w	r3, r1, r3
    dc74:	43db      	mvns	r3, r3
    dc76:	401a      	ands	r2, r3
    dc78:	9b03      	ldr	r3, [sp, #12]
    dc7a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    dc7c:	e009      	b.n	dc92 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    dc7e:	9b03      	ldr	r3, [sp, #12]
    dc80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    dc82:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dc86:	2101      	movs	r1, #1
    dc88:	fa01 f303 	lsl.w	r3, r1, r3
    dc8c:	431a      	orrs	r2, r3
    dc8e:	9b03      	ldr	r3, [sp, #12]
    dc90:	671a      	str	r2, [r3, #112]	; 0x70
}
    dc92:	bf00      	nop
    dc94:	b004      	add	sp, #16
    dc96:	4770      	bx	lr

0000dc98 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    dc98:	b082      	sub	sp, #8
    dc9a:	9001      	str	r0, [sp, #4]
    dc9c:	460b      	mov	r3, r1
    dc9e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    dca2:	9b01      	ldr	r3, [sp, #4]
    dca4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    dca6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dcaa:	fa22 f303 	lsr.w	r3, r2, r3
    dcae:	f003 0301 	and.w	r3, r3, #1
    dcb2:	2b01      	cmp	r3, #1
    dcb4:	bf0c      	ite	eq
    dcb6:	2301      	moveq	r3, #1
    dcb8:	2300      	movne	r3, #0
    dcba:	b2db      	uxtb	r3, r3
}
    dcbc:	4618      	mov	r0, r3
    dcbe:	b002      	add	sp, #8
    dcc0:	4770      	bx	lr

0000dcc2 <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    dcc2:	b082      	sub	sp, #8
    dcc4:	9001      	str	r0, [sp, #4]
    dcc6:	460b      	mov	r3, r1
    dcc8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    dccc:	9b01      	ldr	r3, [sp, #4]
    dcce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    dcd2:	f023 021f 	bic.w	r2, r3, #31
    dcd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dcda:	f003 031f 	and.w	r3, r3, #31
    dcde:	431a      	orrs	r2, r3
    dce0:	9b01      	ldr	r3, [sp, #4]
    dce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    dce6:	bf00      	nop
    dce8:	b002      	add	sp, #8
    dcea:	4770      	bx	lr

0000dcec <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    dcec:	b082      	sub	sp, #8
    dcee:	9001      	str	r0, [sp, #4]
    dcf0:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    dcf2:	9b01      	ldr	r3, [sp, #4]
    dcf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    dcf8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    dcfc:	9b00      	ldr	r3, [sp, #0]
    dcfe:	019b      	lsls	r3, r3, #6
    dd00:	b2db      	uxtb	r3, r3
    dd02:	431a      	orrs	r2, r3
    dd04:	9b01      	ldr	r3, [sp, #4]
    dd06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    dd0a:	bf00      	nop
    dd0c:	b002      	add	sp, #8
    dd0e:	4770      	bx	lr

0000dd10 <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    dd10:	b082      	sub	sp, #8
    dd12:	9001      	str	r0, [sp, #4]
    dd14:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    dd16:	9b01      	ldr	r3, [sp, #4]
    dd18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    dd1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    dd20:	9b00      	ldr	r3, [sp, #0]
    dd22:	02db      	lsls	r3, r3, #11
    dd24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    dd28:	431a      	orrs	r2, r3
    dd2a:	9b01      	ldr	r3, [sp, #4]
    dd2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    dd30:	bf00      	nop
    dd32:	b002      	add	sp, #8
    dd34:	4770      	bx	lr

0000dd36 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    dd36:	b082      	sub	sp, #8
    dd38:	9001      	str	r0, [sp, #4]
    dd3a:	460b      	mov	r3, r1
    dd3c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    dd40:	9b01      	ldr	r3, [sp, #4]
    dd42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dd46:	f023 0301 	bic.w	r3, r3, #1
    dd4a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dd4e:	2a00      	cmp	r2, #0
    dd50:	d001      	beq.n	dd56 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    dd52:	2201      	movs	r2, #1
    dd54:	e000      	b.n	dd58 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    dd56:	2200      	movs	r2, #0
    dd58:	431a      	orrs	r2, r3
    dd5a:	9b01      	ldr	r3, [sp, #4]
    dd5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dd60:	bf00      	nop
    dd62:	b002      	add	sp, #8
    dd64:	4770      	bx	lr

0000dd66 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    dd66:	b082      	sub	sp, #8
    dd68:	9001      	str	r0, [sp, #4]
    dd6a:	460b      	mov	r3, r1
    dd6c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    dd70:	9b01      	ldr	r3, [sp, #4]
    dd72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dd76:	f023 0304 	bic.w	r3, r3, #4
    dd7a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dd7e:	2a00      	cmp	r2, #0
    dd80:	d001      	beq.n	dd86 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    dd82:	2204      	movs	r2, #4
    dd84:	e000      	b.n	dd88 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    dd86:	2200      	movs	r2, #0
    dd88:	431a      	orrs	r2, r3
    dd8a:	9b01      	ldr	r3, [sp, #4]
    dd8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dd90:	bf00      	nop
    dd92:	b002      	add	sp, #8
    dd94:	4770      	bx	lr

0000dd96 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    dd96:	b082      	sub	sp, #8
    dd98:	9001      	str	r0, [sp, #4]
    dd9a:	460b      	mov	r3, r1
    dd9c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    dda0:	9b01      	ldr	r3, [sp, #4]
    dda2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dda6:	f023 0310 	bic.w	r3, r3, #16
    ddaa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ddae:	2a00      	cmp	r2, #0
    ddb0:	d001      	beq.n	ddb6 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    ddb2:	2210      	movs	r2, #16
    ddb4:	e000      	b.n	ddb8 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    ddb6:	2200      	movs	r2, #0
    ddb8:	431a      	orrs	r2, r3
    ddba:	9b01      	ldr	r3, [sp, #4]
    ddbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    ddc0:	bf00      	nop
    ddc2:	b002      	add	sp, #8
    ddc4:	4770      	bx	lr

0000ddc6 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    ddc6:	b082      	sub	sp, #8
    ddc8:	9001      	str	r0, [sp, #4]
    ddca:	460b      	mov	r3, r1
    ddcc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    ddd0:	9b01      	ldr	r3, [sp, #4]
    ddd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    ddd6:	f023 0320 	bic.w	r3, r3, #32
    ddda:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ddde:	2a00      	cmp	r2, #0
    dde0:	d001      	beq.n	dde6 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    dde2:	2220      	movs	r2, #32
    dde4:	e000      	b.n	dde8 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    dde6:	2200      	movs	r2, #0
    dde8:	431a      	orrs	r2, r3
    ddea:	9b01      	ldr	r3, [sp, #4]
    ddec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    ddf0:	bf00      	nop
    ddf2:	b002      	add	sp, #8
    ddf4:	4770      	bx	lr

0000ddf6 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    ddf6:	b082      	sub	sp, #8
    ddf8:	9001      	str	r0, [sp, #4]
    ddfa:	460b      	mov	r3, r1
    ddfc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    de00:	9b01      	ldr	r3, [sp, #4]
    de02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    de06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    de0a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de0e:	2a00      	cmp	r2, #0
    de10:	d001      	beq.n	de16 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    de12:	2280      	movs	r2, #128	; 0x80
    de14:	e000      	b.n	de18 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    de16:	2200      	movs	r2, #0
    de18:	431a      	orrs	r2, r3
    de1a:	9b01      	ldr	r3, [sp, #4]
    de1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    de20:	bf00      	nop
    de22:	b002      	add	sp, #8
    de24:	4770      	bx	lr

0000de26 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    de26:	b082      	sub	sp, #8
    de28:	9001      	str	r0, [sp, #4]
    de2a:	460b      	mov	r3, r1
    de2c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    de30:	9b01      	ldr	r3, [sp, #4]
    de32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    de36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    de3a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de3e:	2a00      	cmp	r2, #0
    de40:	d002      	beq.n	de48 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    de42:	f44f 7280 	mov.w	r2, #256	; 0x100
    de46:	e000      	b.n	de4a <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    de48:	2200      	movs	r2, #0
    de4a:	431a      	orrs	r2, r3
    de4c:	9b01      	ldr	r3, [sp, #4]
    de4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    de52:	bf00      	nop
    de54:	b002      	add	sp, #8
    de56:	4770      	bx	lr

0000de58 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    de58:	b082      	sub	sp, #8
    de5a:	9001      	str	r0, [sp, #4]
    de5c:	460b      	mov	r3, r1
    de5e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    de62:	9b01      	ldr	r3, [sp, #4]
    de64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    de68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    de6c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de70:	2a00      	cmp	r2, #0
    de72:	d002      	beq.n	de7a <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    de74:	f44f 7200 	mov.w	r2, #512	; 0x200
    de78:	e000      	b.n	de7c <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    de7a:	2200      	movs	r2, #0
    de7c:	431a      	orrs	r2, r3
    de7e:	9b01      	ldr	r3, [sp, #4]
    de80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    de84:	bf00      	nop
    de86:	b002      	add	sp, #8
    de88:	4770      	bx	lr

0000de8a <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    de8a:	b082      	sub	sp, #8
    de8c:	9001      	str	r0, [sp, #4]
    de8e:	460b      	mov	r3, r1
    de90:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    de94:	9b01      	ldr	r3, [sp, #4]
    de96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    de9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    de9e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dea2:	2a00      	cmp	r2, #0
    dea4:	d002      	beq.n	deac <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    dea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    deaa:	e000      	b.n	deae <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    deac:	2200      	movs	r2, #0
    deae:	431a      	orrs	r2, r3
    deb0:	9b01      	ldr	r3, [sp, #4]
    deb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    deb6:	bf00      	nop
    deb8:	b002      	add	sp, #8
    deba:	4770      	bx	lr

0000debc <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    debc:	b082      	sub	sp, #8
    debe:	9001      	str	r0, [sp, #4]
    dec0:	460b      	mov	r3, r1
    dec2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    dec6:	9b01      	ldr	r3, [sp, #4]
    dec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    decc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    ded0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ded4:	2a00      	cmp	r2, #0
    ded6:	d002      	beq.n	dede <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    ded8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    dedc:	e000      	b.n	dee0 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    dede:	2200      	movs	r2, #0
    dee0:	431a      	orrs	r2, r3
    dee2:	9b01      	ldr	r3, [sp, #4]
    dee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dee8:	bf00      	nop
    deea:	b002      	add	sp, #8
    deec:	4770      	bx	lr

0000deee <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    deee:	b082      	sub	sp, #8
    def0:	9001      	str	r0, [sp, #4]
    def2:	460b      	mov	r3, r1
    def4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    def8:	9b01      	ldr	r3, [sp, #4]
    defa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    defe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    df02:	f89d 2003 	ldrb.w	r2, [sp, #3]
    df06:	2a00      	cmp	r2, #0
    df08:	d002      	beq.n	df10 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    df0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    df0e:	e000      	b.n	df12 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    df10:	2200      	movs	r2, #0
    df12:	431a      	orrs	r2, r3
    df14:	9b01      	ldr	r3, [sp, #4]
    df16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    df1a:	bf00      	nop
    df1c:	b002      	add	sp, #8
    df1e:	4770      	bx	lr

0000df20 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    df20:	b082      	sub	sp, #8
    df22:	9001      	str	r0, [sp, #4]
    df24:	460b      	mov	r3, r1
    df26:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    df2a:	9b01      	ldr	r3, [sp, #4]
    df2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    df30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    df34:	f89d 2003 	ldrb.w	r2, [sp, #3]
    df38:	2a00      	cmp	r2, #0
    df3a:	d002      	beq.n	df42 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    df3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    df40:	e000      	b.n	df44 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    df42:	2200      	movs	r2, #0
    df44:	431a      	orrs	r2, r3
    df46:	9b01      	ldr	r3, [sp, #4]
    df48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    df4c:	bf00      	nop
    df4e:	b002      	add	sp, #8
    df50:	4770      	bx	lr

0000df52 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    df52:	b082      	sub	sp, #8
    df54:	9001      	str	r0, [sp, #4]
    df56:	460b      	mov	r3, r1
    df58:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    df5c:	9b01      	ldr	r3, [sp, #4]
    df5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    df62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    df66:	f89d 2003 	ldrb.w	r2, [sp, #3]
    df6a:	2a00      	cmp	r2, #0
    df6c:	d002      	beq.n	df74 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    df6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    df72:	e000      	b.n	df76 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    df74:	2200      	movs	r2, #0
    df76:	431a      	orrs	r2, r3
    df78:	9b01      	ldr	r3, [sp, #4]
    df7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    df7e:	bf00      	nop
    df80:	b002      	add	sp, #8
    df82:	4770      	bx	lr

0000df84 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    df84:	b082      	sub	sp, #8
    df86:	9001      	str	r0, [sp, #4]
    df88:	460b      	mov	r3, r1
    df8a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    df8e:	9b01      	ldr	r3, [sp, #4]
    df90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    df94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    df98:	f89d 2003 	ldrb.w	r2, [sp, #3]
    df9c:	2a00      	cmp	r2, #0
    df9e:	d002      	beq.n	dfa6 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    dfa0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    dfa4:	e000      	b.n	dfa8 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    dfa6:	2200      	movs	r2, #0
    dfa8:	431a      	orrs	r2, r3
    dfaa:	9b01      	ldr	r3, [sp, #4]
    dfac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dfb0:	bf00      	nop
    dfb2:	b002      	add	sp, #8
    dfb4:	4770      	bx	lr

0000dfb6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    dfb6:	b082      	sub	sp, #8
    dfb8:	9001      	str	r0, [sp, #4]
    dfba:	460b      	mov	r3, r1
    dfbc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    dfc0:	9b01      	ldr	r3, [sp, #4]
    dfc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dfc6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    dfca:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dfce:	2a00      	cmp	r2, #0
    dfd0:	d002      	beq.n	dfd8 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    dfd2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    dfd6:	e000      	b.n	dfda <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    dfd8:	2200      	movs	r2, #0
    dfda:	431a      	orrs	r2, r3
    dfdc:	9b01      	ldr	r3, [sp, #4]
    dfde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dfe2:	bf00      	nop
    dfe4:	b002      	add	sp, #8
    dfe6:	4770      	bx	lr

0000dfe8 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    dfe8:	b084      	sub	sp, #16
    dfea:	9001      	str	r0, [sp, #4]
    dfec:	460b      	mov	r3, r1
    dfee:	f88d 3003 	strb.w	r3, [sp, #3]
    dff2:	4613      	mov	r3, r2
    dff4:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    dff8:	9b01      	ldr	r3, [sp, #4]
    dffa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    dffc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e000:	fa22 f303 	lsr.w	r3, r2, r3
    e004:	b2db      	uxtb	r3, r3
    e006:	f003 0301 	and.w	r3, r3, #1
    e00a:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    e00e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e012:	2b00      	cmp	r3, #0
    e014:	bf14      	ite	ne
    e016:	2301      	movne	r3, #1
    e018:	2300      	moveq	r3, #0
    e01a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    e01e:	f89d 2002 	ldrb.w	r2, [sp, #2]
    e022:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e026:	429a      	cmp	r2, r3
    e028:	d00d      	beq.n	e046 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    e02a:	9b01      	ldr	r3, [sp, #4]
    e02c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e030:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e034:	3308      	adds	r3, #8
    e036:	2101      	movs	r1, #1
    e038:	fa01 f303 	lsl.w	r3, r1, r3
    e03c:	431a      	orrs	r2, r3
    e03e:	9b01      	ldr	r3, [sp, #4]
    e040:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    e044:	e00d      	b.n	e062 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    e046:	9b01      	ldr	r3, [sp, #4]
    e048:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e04c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e050:	3308      	adds	r3, #8
    e052:	2101      	movs	r1, #1
    e054:	fa01 f303 	lsl.w	r3, r1, r3
    e058:	43db      	mvns	r3, r3
    e05a:	401a      	ands	r2, r3
    e05c:	9b01      	ldr	r3, [sp, #4]
    e05e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e062:	bf00      	nop
    e064:	b004      	add	sp, #16
    e066:	4770      	bx	lr

0000e068 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    e068:	b082      	sub	sp, #8
    e06a:	9001      	str	r0, [sp, #4]
    e06c:	460b      	mov	r3, r1
    e06e:	f88d 3003 	strb.w	r3, [sp, #3]
    e072:	4613      	mov	r3, r2
    e074:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e078:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e07c:	2b00      	cmp	r3, #0
    e07e:	d00c      	beq.n	e09a <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    e080:	9b01      	ldr	r3, [sp, #4]
    e082:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e086:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e08a:	2101      	movs	r1, #1
    e08c:	fa01 f303 	lsl.w	r3, r1, r3
    e090:	431a      	orrs	r2, r3
    e092:	9b01      	ldr	r3, [sp, #4]
    e094:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    e098:	e00c      	b.n	e0b4 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    e09a:	9b01      	ldr	r3, [sp, #4]
    e09c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e0a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e0a4:	2101      	movs	r1, #1
    e0a6:	fa01 f303 	lsl.w	r3, r1, r3
    e0aa:	43db      	mvns	r3, r3
    e0ac:	401a      	ands	r2, r3
    e0ae:	9b01      	ldr	r3, [sp, #4]
    e0b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e0b4:	bf00      	nop
    e0b6:	b002      	add	sp, #8
    e0b8:	4770      	bx	lr

0000e0ba <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    e0ba:	b082      	sub	sp, #8
    e0bc:	9001      	str	r0, [sp, #4]
    e0be:	460b      	mov	r3, r1
    e0c0:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    e0c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e0c8:	9b01      	ldr	r3, [sp, #4]
    e0ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e0ce:	bf00      	nop
    e0d0:	b002      	add	sp, #8
    e0d2:	4770      	bx	lr

0000e0d4 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    e0d4:	b082      	sub	sp, #8
    e0d6:	9001      	str	r0, [sp, #4]
    e0d8:	460b      	mov	r3, r1
    e0da:	f88d 3003 	strb.w	r3, [sp, #3]
    e0de:	4613      	mov	r3, r2
    e0e0:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e0e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e0e8:	2b00      	cmp	r3, #0
    e0ea:	d00c      	beq.n	e106 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    e0ec:	9b01      	ldr	r3, [sp, #4]
    e0ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    e0f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e0f6:	2101      	movs	r1, #1
    e0f8:	fa01 f303 	lsl.w	r3, r1, r3
    e0fc:	431a      	orrs	r2, r3
    e0fe:	9b01      	ldr	r3, [sp, #4]
    e100:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    e104:	e00c      	b.n	e120 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    e106:	9b01      	ldr	r3, [sp, #4]
    e108:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    e10c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e110:	2101      	movs	r1, #1
    e112:	fa01 f303 	lsl.w	r3, r1, r3
    e116:	43db      	mvns	r3, r3
    e118:	401a      	ands	r2, r3
    e11a:	9b01      	ldr	r3, [sp, #4]
    e11c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    e120:	bf00      	nop
    e122:	b002      	add	sp, #8
    e124:	4770      	bx	lr

0000e126 <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    e126:	b082      	sub	sp, #8
    e128:	9001      	str	r0, [sp, #4]
    e12a:	460b      	mov	r3, r1
    e12c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    e130:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e134:	2b00      	cmp	r3, #0
    e136:	d008      	beq.n	e14a <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    e138:	9b01      	ldr	r3, [sp, #4]
    e13a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    e13e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    e142:	9b01      	ldr	r3, [sp, #4]
    e144:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    e148:	e007      	b.n	e15a <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    e14a:	9b01      	ldr	r3, [sp, #4]
    e14c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    e150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    e154:	9b01      	ldr	r3, [sp, #4]
    e156:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    e15a:	bf00      	nop
    e15c:	b002      	add	sp, #8
    e15e:	4770      	bx	lr

0000e160 <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    e160:	b082      	sub	sp, #8
    e162:	9001      	str	r0, [sp, #4]
    e164:	460b      	mov	r3, r1
    e166:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    e16a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e16e:	9b01      	ldr	r3, [sp, #4]
    e170:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    e174:	bf00      	nop
    e176:	b002      	add	sp, #8
    e178:	4770      	bx	lr

0000e17a <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e17a:	b082      	sub	sp, #8
    e17c:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    e17e:	9b01      	ldr	r3, [sp, #4]
    e180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    e184:	b29b      	uxth	r3, r3
}
    e186:	4618      	mov	r0, r3
    e188:	b002      	add	sp, #8
    e18a:	4770      	bx	lr

0000e18c <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e18c:	b082      	sub	sp, #8
    e18e:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    e190:	9b01      	ldr	r3, [sp, #4]
    e192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    e194:	b29b      	uxth	r3, r3
}
    e196:	4618      	mov	r0, r3
    e198:	b002      	add	sp, #8
    e19a:	4770      	bx	lr

0000e19c <Ftm_Pwm_Ip_GetDualChnCompCmd>:
 *            - TRUE : The channel (n+1) output is the complement of the channel (n) output
 *            - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCompCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                               Channel)
{
    e19c:	b084      	sub	sp, #16
    e19e:	9001      	str	r0, [sp, #4]
    e1a0:	460b      	mov	r3, r1
    e1a2:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 ChPairId = Channel >> 1U;
    e1a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e1aa:	085b      	lsrs	r3, r3, #1
    e1ac:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Comp = (uint8)((uint32)(FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e1b0:	9b01      	ldr	r3, [sp, #4]
    e1b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e1b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e1b8:	00db      	lsls	r3, r3, #3
    e1ba:	2102      	movs	r1, #2
    e1bc:	fa01 f303 	lsl.w	r3, r1, r3
    e1c0:	401a      	ands	r2, r3
    e1c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e1c6:	00db      	lsls	r3, r3, #3
    e1c8:	fa22 f303 	lsr.w	r3, r2, r3
    e1cc:	f88d 300e 	strb.w	r3, [sp, #14]
    return ((Comp == FTM_COMBINE_COMP0_MASK)? TRUE : FALSE);
    e1d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e1d4:	2b02      	cmp	r3, #2
    e1d6:	bf0c      	ite	eq
    e1d8:	2301      	moveq	r3, #1
    e1da:	2300      	movne	r3, #0
    e1dc:	b2db      	uxtb	r3, r3
}
    e1de:	4618      	mov	r0, r3
    e1e0:	b004      	add	sp, #16
    e1e2:	4770      	bx	lr

0000e1e4 <Ftm_Pwm_Ip_GetDualChnDeadtimeCmd>:
 *            - TRUE : The deadtime insertion in this pair of channels is disabled.
 *            - FALSE: The deadtime insertion in this pair of channels is enabled.
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnDeadtimeCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                               Channel)
{
    e1e4:	b084      	sub	sp, #16
    e1e6:	9001      	str	r0, [sp, #4]
    e1e8:	460b      	mov	r3, r1
    e1ea:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 ChPairId = Channel >> 1U;
    e1ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e1f2:	085b      	lsrs	r3, r3, #1
    e1f4:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 DetEnable = (uint8)((uint32)(FtmBase->COMBINE & ((uint32)FTM_COMBINE_DTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e1f8:	9b01      	ldr	r3, [sp, #4]
    e1fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e1fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e200:	00db      	lsls	r3, r3, #3
    e202:	2110      	movs	r1, #16
    e204:	fa01 f303 	lsl.w	r3, r1, r3
    e208:	401a      	ands	r2, r3
    e20a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e20e:	00db      	lsls	r3, r3, #3
    e210:	fa22 f303 	lsr.w	r3, r2, r3
    e214:	f88d 300e 	strb.w	r3, [sp, #14]
    return ((DetEnable == FTM_COMBINE_DTEN0_MASK)? TRUE : FALSE);
    e218:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e21c:	2b10      	cmp	r3, #16
    e21e:	bf0c      	ite	eq
    e220:	2301      	moveq	r3, #1
    e222:	2300      	movne	r3, #0
    e224:	b2db      	uxtb	r3, r3
}
    e226:	4618      	mov	r0, r3
    e228:	b004      	add	sp, #16
    e22a:	4770      	bx	lr

0000e22c <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    e22c:	b500      	push	{lr}
    e22e:	b085      	sub	sp, #20
    e230:	9001      	str	r0, [sp, #4]
    e232:	460b      	mov	r3, r1
    e234:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    e238:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e23c:	085b      	lsrs	r3, r3, #1
    e23e:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e242:	9b01      	ldr	r3, [sp, #4]
    e244:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e246:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e24a:	00db      	lsls	r3, r3, #3
    e24c:	2101      	movs	r1, #1
    e24e:	fa01 f303 	lsl.w	r3, r1, r3
    e252:	401a      	ands	r2, r3
    e254:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e258:	00db      	lsls	r3, r3, #3
    e25a:	fa22 f303 	lsr.w	r3, r2, r3
    e25e:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e262:	9b01      	ldr	r3, [sp, #4]
    e264:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e266:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e26a:	00db      	lsls	r3, r3, #3
    e26c:	2180      	movs	r1, #128	; 0x80
    e26e:	fa01 f303 	lsl.w	r3, r1, r3
    e272:	401a      	ands	r2, r3
    e274:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e278:	00db      	lsls	r3, r3, #3
    e27a:	fa22 f303 	lsr.w	r3, r2, r3
    e27e:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    e282:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e286:	2b80      	cmp	r3, #128	; 0x80
    e288:	d101      	bne.n	e28e <Ftm_Pwm_Ip_GetChannelMode+0x62>
    e28a:	2301      	movs	r3, #1
    e28c:	e000      	b.n	e290 <Ftm_Pwm_Ip_GetChannelMode+0x64>
    e28e:	2300      	movs	r3, #0
    e290:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    e294:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e298:	4619      	mov	r1, r3
    e29a:	9801      	ldr	r0, [sp, #4]
    e29c:	f7ff f936 	bl	d50c <Ftm_Pwm_Ip_GetChnEdgeLevel>
    e2a0:	4603      	mov	r3, r0
    e2a2:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    e2a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e2aa:	4619      	mov	r1, r3
    e2ac:	9801      	ldr	r0, [sp, #4]
    e2ae:	f7ff f9c5 	bl	d63c <Ftm_Pwm_Ip_GetChnMode>
    e2b2:	4603      	mov	r3, r0
    e2b4:	009b      	lsls	r3, r3, #2
    e2b6:	b2da      	uxtb	r2, r3
    e2b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e2bc:	4313      	orrs	r3, r2
    e2be:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    e2c2:	9801      	ldr	r0, [sp, #4]
    e2c4:	f7ff f8be 	bl	d444 <Ftm_Pwm_Ip_GetCpwms>
    e2c8:	4603      	mov	r3, r0
    e2ca:	b2db      	uxtb	r3, r3
    e2cc:	011b      	lsls	r3, r3, #4
    e2ce:	b2da      	uxtb	r2, r3
    e2d0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e2d4:	4313      	orrs	r3, r2
    e2d6:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    e2da:	f89d 300a 	ldrb.w	r3, [sp, #10]
    e2de:	015b      	lsls	r3, r3, #5
    e2e0:	b2da      	uxtb	r2, r3
    e2e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e2e6:	4313      	orrs	r3, r2
    e2e8:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    e2ec:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e2f0:	019b      	lsls	r3, r3, #6
    e2f2:	b2da      	uxtb	r2, r3
    e2f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e2f8:	4313      	orrs	r3, r2
    e2fa:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    e2fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e302:	2b62      	cmp	r3, #98	; 0x62
    e304:	d055      	beq.n	e3b2 <Ftm_Pwm_Ip_GetChannelMode+0x186>
    e306:	2b62      	cmp	r3, #98	; 0x62
    e308:	dc59      	bgt.n	e3be <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e30a:	2b22      	cmp	r3, #34	; 0x22
    e30c:	dc3c      	bgt.n	e388 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    e30e:	2b09      	cmp	r3, #9
    e310:	db55      	blt.n	e3be <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e312:	3b09      	subs	r3, #9
    e314:	2b19      	cmp	r3, #25
    e316:	d852      	bhi.n	e3be <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e318:	a201      	add	r2, pc, #4	; (adr r2, e320 <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    e31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e31e:	bf00      	nop
    e320:	0000e395 	.word	0x0000e395
    e324:	0000e38f 	.word	0x0000e38f
    e328:	0000e3bf 	.word	0x0000e3bf
    e32c:	0000e3bf 	.word	0x0000e3bf
    e330:	0000e3bf 	.word	0x0000e3bf
    e334:	0000e3bf 	.word	0x0000e3bf
    e338:	0000e3bf 	.word	0x0000e3bf
    e33c:	0000e3bf 	.word	0x0000e3bf
    e340:	0000e3a1 	.word	0x0000e3a1
    e344:	0000e39b 	.word	0x0000e39b
    e348:	0000e3bf 	.word	0x0000e3bf
    e34c:	0000e3bf 	.word	0x0000e3bf
    e350:	0000e3bf 	.word	0x0000e3bf
    e354:	0000e3bf 	.word	0x0000e3bf
    e358:	0000e3bf 	.word	0x0000e3bf
    e35c:	0000e3bf 	.word	0x0000e3bf
    e360:	0000e3bf 	.word	0x0000e3bf
    e364:	0000e3bf 	.word	0x0000e3bf
    e368:	0000e3bf 	.word	0x0000e3bf
    e36c:	0000e3bf 	.word	0x0000e3bf
    e370:	0000e3bf 	.word	0x0000e3bf
    e374:	0000e3bf 	.word	0x0000e3bf
    e378:	0000e3bf 	.word	0x0000e3bf
    e37c:	0000e3bf 	.word	0x0000e3bf
    e380:	0000e3ad 	.word	0x0000e3ad
    e384:	0000e3a7 	.word	0x0000e3a7
    e388:	2b61      	cmp	r3, #97	; 0x61
    e38a:	d015      	beq.n	e3b8 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    e38c:	e017      	b.n	e3be <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    e38e:	230a      	movs	r3, #10
    e390:	9303      	str	r3, [sp, #12]
            break;
    e392:	e017      	b.n	e3c4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    e394:	2309      	movs	r3, #9
    e396:	9303      	str	r3, [sp, #12]
            break;
    e398:	e014      	b.n	e3c4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    e39a:	2312      	movs	r3, #18
    e39c:	9303      	str	r3, [sp, #12]
            break;
    e39e:	e011      	b.n	e3c4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    e3a0:	2311      	movs	r3, #17
    e3a2:	9303      	str	r3, [sp, #12]
            break;
    e3a4:	e00e      	b.n	e3c4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    e3a6:	2322      	movs	r3, #34	; 0x22
    e3a8:	9303      	str	r3, [sp, #12]
            break;
    e3aa:	e00b      	b.n	e3c4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    e3ac:	2321      	movs	r3, #33	; 0x21
    e3ae:	9303      	str	r3, [sp, #12]
            break;
    e3b0:	e008      	b.n	e3c4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    e3b2:	2362      	movs	r3, #98	; 0x62
    e3b4:	9303      	str	r3, [sp, #12]
            break;
    e3b6:	e005      	b.n	e3c4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    e3b8:	2361      	movs	r3, #97	; 0x61
    e3ba:	9303      	str	r3, [sp, #12]
            break;
    e3bc:	e002      	b.n	e3c4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    e3be:	23ff      	movs	r3, #255	; 0xff
    e3c0:	9303      	str	r3, [sp, #12]
            break;
    e3c2:	bf00      	nop
    }

    return ChMode; 
    e3c4:	9b03      	ldr	r3, [sp, #12]
}
    e3c6:	4618      	mov	r0, r3
    e3c8:	b005      	add	sp, #20
    e3ca:	f85d fb04 	ldr.w	pc, [sp], #4

0000e3ce <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    e3ce:	b082      	sub	sp, #8
    e3d0:	9001      	str	r0, [sp, #4]
    e3d2:	460b      	mov	r3, r1
    e3d4:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    e3d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d006      	beq.n	e3ee <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    e3e0:	9b01      	ldr	r3, [sp, #4]
    e3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e3e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e3e8:	9b01      	ldr	r3, [sp, #4]
    e3ea:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    e3ec:	e00b      	b.n	e406 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    e3ee:	9b01      	ldr	r3, [sp, #4]
    e3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e3f6:	2b00      	cmp	r3, #0
    e3f8:	d005      	beq.n	e406 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    e3fa:	9b01      	ldr	r3, [sp, #4]
    e3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e3fe:	f043 0204 	orr.w	r2, r3, #4
    e402:	9b01      	ldr	r3, [sp, #4]
    e404:	655a      	str	r2, [r3, #84]	; 0x54
}
    e406:	bf00      	nop
    e408:	b002      	add	sp, #8
    e40a:	4770      	bx	lr

0000e40c <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e40c:	b500      	push	{lr}
    e40e:	b085      	sub	sp, #20
    e410:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    e412:	2100      	movs	r1, #0
    e414:	9801      	ldr	r0, [sp, #4]
    e416:	f7ff ffda 	bl	e3ce <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    e41a:	9b01      	ldr	r3, [sp, #4]
    e41c:	681a      	ldr	r2, [r3, #0]
    e41e:	9b01      	ldr	r3, [sp, #4]
    e420:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    e422:	9b01      	ldr	r3, [sp, #4]
    e424:	2200      	movs	r2, #0
    e426:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    e428:	9b01      	ldr	r3, [sp, #4]
    e42a:	2200      	movs	r2, #0
    e42c:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    e42e:	9b01      	ldr	r3, [sp, #4]
    e430:	2200      	movs	r2, #0
    e432:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    e434:	9b01      	ldr	r3, [sp, #4]
    e436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    e438:	9b01      	ldr	r3, [sp, #4]
    e43a:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    e43c:	9b01      	ldr	r3, [sp, #4]
    e43e:	2204      	movs	r2, #4
    e440:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    e442:	9b01      	ldr	r3, [sp, #4]
    e444:	2200      	movs	r2, #0
    e446:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    e448:	9b01      	ldr	r3, [sp, #4]
    e44a:	2200      	movs	r2, #0
    e44c:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    e44e:	9b01      	ldr	r3, [sp, #4]
    e450:	2200      	movs	r2, #0
    e452:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    e454:	9b01      	ldr	r3, [sp, #4]
    e456:	2200      	movs	r2, #0
    e458:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    e45a:	9b01      	ldr	r3, [sp, #4]
    e45c:	2200      	movs	r2, #0
    e45e:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    e460:	9b01      	ldr	r3, [sp, #4]
    e462:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e464:	9b01      	ldr	r3, [sp, #4]
    e466:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    e468:	9b01      	ldr	r3, [sp, #4]
    e46a:	2200      	movs	r2, #0
    e46c:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    e46e:	9b01      	ldr	r3, [sp, #4]
    e470:	2200      	movs	r2, #0
    e472:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    e474:	9b01      	ldr	r3, [sp, #4]
    e476:	2200      	movs	r2, #0
    e478:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    e47a:	9b01      	ldr	r3, [sp, #4]
    e47c:	2200      	movs	r2, #0
    e47e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    e482:	9b01      	ldr	r3, [sp, #4]
    e484:	2200      	movs	r2, #0
    e486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    e48a:	9b01      	ldr	r3, [sp, #4]
    e48c:	2200      	movs	r2, #0
    e48e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    e492:	9b01      	ldr	r3, [sp, #4]
    e494:	2200      	movs	r2, #0
    e496:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    e49a:	9b01      	ldr	r3, [sp, #4]
    e49c:	2200      	movs	r2, #0
    e49e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    e4a2:	9b01      	ldr	r3, [sp, #4]
    e4a4:	2200      	movs	r2, #0
    e4a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    e4aa:	9b01      	ldr	r3, [sp, #4]
    e4ac:	2200      	movs	r2, #0
    e4ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    e4b2:	2300      	movs	r3, #0
    e4b4:	f88d 300f 	strb.w	r3, [sp, #15]
    e4b8:	e014      	b.n	e4e4 <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    e4ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e4be:	9a01      	ldr	r2, [sp, #4]
    e4c0:	3301      	adds	r3, #1
    e4c2:	00db      	lsls	r3, r3, #3
    e4c4:	4413      	add	r3, r2
    e4c6:	2200      	movs	r2, #0
    e4c8:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    e4ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e4ce:	9a01      	ldr	r2, [sp, #4]
    e4d0:	3301      	adds	r3, #1
    e4d2:	00db      	lsls	r3, r3, #3
    e4d4:	4413      	add	r3, r2
    e4d6:	2200      	movs	r2, #0
    e4d8:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    e4da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e4de:	3301      	adds	r3, #1
    e4e0:	f88d 300f 	strb.w	r3, [sp, #15]
    e4e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e4e8:	2b07      	cmp	r3, #7
    e4ea:	d9e6      	bls.n	e4ba <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    e4ec:	bf00      	nop
    e4ee:	bf00      	nop
    e4f0:	b005      	add	sp, #20
    e4f2:	f85d fb04 	ldr.w	pc, [sp], #4

0000e4f6 <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    e4f6:	b084      	sub	sp, #16
    e4f8:	9001      	str	r0, [sp, #4]
    e4fa:	460b      	mov	r3, r1
    e4fc:	f88d 3003 	strb.w	r3, [sp, #3]
    e500:	4613      	mov	r3, r2
    e502:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    e506:	2300      	movs	r3, #0
    e508:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    e50a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e50e:	2b01      	cmp	r3, #1
    e510:	d806      	bhi.n	e520 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    e512:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e516:	2210      	movs	r2, #16
    e518:	fa02 f303 	lsl.w	r3, r2, r3
    e51c:	9303      	str	r3, [sp, #12]
    e51e:	e013      	b.n	e548 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    e520:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e524:	2b05      	cmp	r3, #5
    e526:	d807      	bhi.n	e538 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    e528:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e52c:	3b02      	subs	r3, #2
    e52e:	2201      	movs	r2, #1
    e530:	fa02 f303 	lsl.w	r3, r2, r3
    e534:	9303      	str	r3, [sp, #12]
    e536:	e007      	b.n	e548 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    e538:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e53c:	3b06      	subs	r3, #6
    e53e:	f44f 7280 	mov.w	r2, #256	; 0x100
    e542:	fa02 f303 	lsl.w	r3, r2, r3
    e546:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    e548:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e54c:	2b00      	cmp	r3, #0
    e54e:	d006      	beq.n	e55e <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    e550:	9b01      	ldr	r3, [sp, #4]
    e552:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e554:	9b03      	ldr	r3, [sp, #12]
    e556:	431a      	orrs	r2, r3
    e558:	9b01      	ldr	r3, [sp, #4]
    e55a:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    e55c:	e006      	b.n	e56c <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    e55e:	9b01      	ldr	r3, [sp, #4]
    e560:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e562:	9b03      	ldr	r3, [sp, #12]
    e564:	43db      	mvns	r3, r3
    e566:	401a      	ands	r2, r3
    e568:	9b01      	ldr	r3, [sp, #4]
    e56a:	66da      	str	r2, [r3, #108]	; 0x6c
}
    e56c:	bf00      	nop
    e56e:	b004      	add	sp, #16
    e570:	4770      	bx	lr

0000e572 <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    e572:	b082      	sub	sp, #8
    e574:	9001      	str	r0, [sp, #4]
    e576:	9100      	str	r1, [sp, #0]
    e578:	9b00      	ldr	r3, [sp, #0]
    e57a:	2b03      	cmp	r3, #3
    e57c:	d82a      	bhi.n	e5d4 <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    e57e:	a201      	add	r2, pc, #4	; (adr r2, e584 <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    e580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e584:	0000e595 	.word	0x0000e595
    e588:	0000e5a3 	.word	0x0000e5a3
    e58c:	0000e5b5 	.word	0x0000e5b5
    e590:	0000e5c7 	.word	0x0000e5c7
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    e594:	9b01      	ldr	r3, [sp, #4]
    e596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e598:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    e59c:	9b01      	ldr	r3, [sp, #4]
    e59e:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e5a0:	e019      	b.n	e5d6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    e5a2:	9b01      	ldr	r3, [sp, #4]
    e5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e5a6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    e5aa:	f043 0220 	orr.w	r2, r3, #32
    e5ae:	9b01      	ldr	r3, [sp, #4]
    e5b0:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e5b2:	e010      	b.n	e5d6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    e5b4:	9b01      	ldr	r3, [sp, #4]
    e5b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e5b8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    e5bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e5c0:	9b01      	ldr	r3, [sp, #4]
    e5c2:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e5c4:	e007      	b.n	e5d6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    e5c6:	9b01      	ldr	r3, [sp, #4]
    e5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e5ca:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    e5ce:	9b01      	ldr	r3, [sp, #4]
    e5d0:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e5d2:	e000      	b.n	e5d6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    e5d4:	bf00      	nop
    }
}
    e5d6:	bf00      	nop
    e5d8:	b002      	add	sp, #8
    e5da:	4770      	bx	lr

0000e5dc <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    e5dc:	b082      	sub	sp, #8
    e5de:	9001      	str	r0, [sp, #4]
    e5e0:	460b      	mov	r3, r1
    e5e2:	f88d 3003 	strb.w	r3, [sp, #3]
    e5e6:	4613      	mov	r3, r2
    e5e8:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e5ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e5f0:	2b00      	cmp	r3, #0
    e5f2:	d00b      	beq.n	e60c <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    e5f4:	9b01      	ldr	r3, [sp, #4]
    e5f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e5f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e5fc:	00db      	lsls	r3, r3, #3
    e5fe:	2140      	movs	r1, #64	; 0x40
    e600:	fa01 f303 	lsl.w	r3, r1, r3
    e604:	431a      	orrs	r2, r3
    e606:	9b01      	ldr	r3, [sp, #4]
    e608:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    e60a:	e00b      	b.n	e624 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e60c:	9b01      	ldr	r3, [sp, #4]
    e60e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e610:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e614:	00db      	lsls	r3, r3, #3
    e616:	2140      	movs	r1, #64	; 0x40
    e618:	fa01 f303 	lsl.w	r3, r1, r3
    e61c:	43db      	mvns	r3, r3
    e61e:	401a      	ands	r2, r3
    e620:	9b01      	ldr	r3, [sp, #4]
    e622:	665a      	str	r2, [r3, #100]	; 0x64
}
    e624:	bf00      	nop
    e626:	b002      	add	sp, #8
    e628:	4770      	bx	lr

0000e62a <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    e62a:	b082      	sub	sp, #8
    e62c:	9001      	str	r0, [sp, #4]
    e62e:	460b      	mov	r3, r1
    e630:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    e634:	9b01      	ldr	r3, [sp, #4]
    e636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e63c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e640:	2a00      	cmp	r2, #0
    e642:	d001      	beq.n	e648 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    e644:	2280      	movs	r2, #128	; 0x80
    e646:	e000      	b.n	e64a <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    e648:	2200      	movs	r2, #0
    e64a:	431a      	orrs	r2, r3
    e64c:	9b01      	ldr	r3, [sp, #4]
    e64e:	655a      	str	r2, [r3, #84]	; 0x54
}
    e650:	bf00      	nop
    e652:	b002      	add	sp, #8
    e654:	4770      	bx	lr

0000e656 <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e656:	b082      	sub	sp, #8
    e658:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    e65a:	9b01      	ldr	r3, [sp, #4]
    e65c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e65e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    e662:	9b01      	ldr	r3, [sp, #4]
    e664:	675a      	str	r2, [r3, #116]	; 0x74
}
    e666:	bf00      	nop
    e668:	b002      	add	sp, #8
    e66a:	4770      	bx	lr

0000e66c <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    e66c:	b082      	sub	sp, #8
    e66e:	9001      	str	r0, [sp, #4]
    e670:	460b      	mov	r3, r1
    e672:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    e676:	9b01      	ldr	r3, [sp, #4]
    e678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e67a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    e67e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e682:	021b      	lsls	r3, r3, #8
    e684:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    e688:	431a      	orrs	r2, r3
    e68a:	9b01      	ldr	r3, [sp, #4]
    e68c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e68e:	bf00      	nop
    e690:	b002      	add	sp, #8
    e692:	4770      	bx	lr

0000e694 <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    e694:	b082      	sub	sp, #8
    e696:	9001      	str	r0, [sp, #4]
    e698:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    e69a:	9b01      	ldr	r3, [sp, #4]
    e69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e69e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    e6a2:	9a00      	ldr	r2, [sp, #0]
    e6a4:	2a00      	cmp	r2, #0
    e6a6:	d002      	beq.n	e6ae <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    e6a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e6ac:	e000      	b.n	e6b0 <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    e6ae:	2200      	movs	r2, #0
    e6b0:	431a      	orrs	r2, r3
    e6b2:	9b01      	ldr	r3, [sp, #4]
    e6b4:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e6b6:	bf00      	nop
    e6b8:	b002      	add	sp, #8
    e6ba:	4770      	bx	lr

0000e6bc <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    e6bc:	b086      	sub	sp, #24
    e6be:	9003      	str	r0, [sp, #12]
    e6c0:	460b      	mov	r3, r1
    e6c2:	9201      	str	r2, [sp, #4]
    e6c4:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    e6c8:	9b01      	ldr	r3, [sp, #4]
    e6ca:	2b00      	cmp	r3, #0
    e6cc:	bf14      	ite	ne
    e6ce:	2301      	movne	r3, #1
    e6d0:	2300      	moveq	r3, #0
    e6d2:	b2db      	uxtb	r3, r3
    e6d4:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    e6d6:	9b03      	ldr	r3, [sp, #12]
    e6d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    e6dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e6e0:	2101      	movs	r1, #1
    e6e2:	fa01 f303 	lsl.w	r3, r1, r3
    e6e6:	43db      	mvns	r3, r3
    e6e8:	401a      	ands	r2, r3
    e6ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e6ee:	9905      	ldr	r1, [sp, #20]
    e6f0:	fa01 f303 	lsl.w	r3, r1, r3
    e6f4:	431a      	orrs	r2, r3
    e6f6:	9b03      	ldr	r3, [sp, #12]
    e6f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    e6fc:	bf00      	nop
    e6fe:	b006      	add	sp, #24
    e700:	4770      	bx	lr

0000e702 <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    e702:	b084      	sub	sp, #16
    e704:	9001      	str	r0, [sp, #4]
    e706:	460b      	mov	r3, r1
    e708:	f88d 3003 	strb.w	r3, [sp, #3]
    e70c:	4613      	mov	r3, r2
    e70e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    e712:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e716:	2b00      	cmp	r3, #0
    e718:	d001      	beq.n	e71e <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    e71a:	2301      	movs	r3, #1
    e71c:	e000      	b.n	e720 <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    e71e:	2300      	movs	r3, #0
    e720:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    e722:	9b01      	ldr	r3, [sp, #4]
    e724:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    e726:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e72a:	2101      	movs	r1, #1
    e72c:	fa01 f303 	lsl.w	r3, r1, r3
    e730:	43db      	mvns	r3, r3
    e732:	401a      	ands	r2, r3
    e734:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e738:	9903      	ldr	r1, [sp, #12]
    e73a:	fa01 f303 	lsl.w	r3, r1, r3
    e73e:	431a      	orrs	r2, r3
    e740:	9b01      	ldr	r3, [sp, #4]
    e742:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e744:	bf00      	nop
    e746:	b004      	add	sp, #16
    e748:	4770      	bx	lr

0000e74a <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    e74a:	b084      	sub	sp, #16
    e74c:	9001      	str	r0, [sp, #4]
    e74e:	460b      	mov	r3, r1
    e750:	f88d 3003 	strb.w	r3, [sp, #3]
    e754:	4613      	mov	r3, r2
    e756:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    e75a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e75e:	2b00      	cmp	r3, #0
    e760:	d001      	beq.n	e766 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    e762:	2301      	movs	r3, #1
    e764:	e000      	b.n	e768 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    e766:	2300      	movs	r3, #0
    e768:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    e76a:	9b01      	ldr	r3, [sp, #4]
    e76c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    e76e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e772:	2110      	movs	r1, #16
    e774:	fa01 f303 	lsl.w	r3, r1, r3
    e778:	43db      	mvns	r3, r3
    e77a:	401a      	ands	r2, r3
    e77c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e780:	9903      	ldr	r1, [sp, #12]
    e782:	fa01 f303 	lsl.w	r3, r1, r3
    e786:	011b      	lsls	r3, r3, #4
    e788:	431a      	orrs	r2, r3
    e78a:	9b01      	ldr	r3, [sp, #4]
    e78c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e78e:	bf00      	nop
    e790:	b004      	add	sp, #16
    e792:	4770      	bx	lr

0000e794 <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    e794:	b082      	sub	sp, #8
    e796:	9001      	str	r0, [sp, #4]
    e798:	460b      	mov	r3, r1
    e79a:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    e79e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e7a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e7a6:	409a      	lsls	r2, r3
    e7a8:	9b01      	ldr	r3, [sp, #4]
    e7aa:	6a1b      	ldr	r3, [r3, #32]
    e7ac:	431a      	orrs	r2, r3
    e7ae:	9b01      	ldr	r3, [sp, #4]
    e7b0:	621a      	str	r2, [r3, #32]
}
    e7b2:	bf00      	nop
    e7b4:	b002      	add	sp, #8
    e7b6:	4770      	bx	lr

0000e7b8 <Ftm_Pwm_Ip_ValidateParamDeadTime>:
 *
 *END**************************************************************************/  
static boolean Ftm_Pwm_Ip_ValidateParamDeadTime(uint8 Instance,
                                                uint8 Channel,
                                                uint16 DeadTimeVal)
{
    e7b8:	b500      	push	{lr}
    e7ba:	b089      	sub	sp, #36	; 0x24
    e7bc:	4603      	mov	r3, r0
    e7be:	f88d 3007 	strb.w	r3, [sp, #7]
    e7c2:	460b      	mov	r3, r1
    e7c4:	f88d 3006 	strb.w	r3, [sp, #6]
    e7c8:	4613      	mov	r3, r2
    e7ca:	f8ad 3004 	strh.w	r3, [sp, #4]
    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e7ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e7d2:	4a39      	ldr	r2, [pc, #228]	; (e8b8 <Ftm_Pwm_Ip_ValidateParamDeadTime+0x100>)
    e7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7d8:	9306      	str	r3, [sp, #24]
    boolean RetVal = FALSE;
    e7da:	2300      	movs	r3, #0
    e7dc:	f88d 301f 	strb.w	r3, [sp, #31]

    uint8 PairId = Channel >> 1U;
    e7e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e7e4:	085b      	lsrs	r3, r3, #1
    e7e6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint16 EvenCounterVal = Ftm_Pwm_Ip_GetChnCountVal(FtmBase, (PairId * 2U));
    e7ea:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e7ee:	005b      	lsls	r3, r3, #1
    e7f0:	b2db      	uxtb	r3, r3
    e7f2:	4619      	mov	r1, r3
    e7f4:	9806      	ldr	r0, [sp, #24]
    e7f6:	f7fe ffb0 	bl	d75a <Ftm_Pwm_Ip_GetChnCountVal>
    e7fa:	4603      	mov	r3, r0
    e7fc:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint16 OddCounterVal  = Ftm_Pwm_Ip_GetChnCountVal(FtmBase, ((PairId * 2U) + 1U));
    e800:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e804:	005b      	lsls	r3, r3, #1
    e806:	b2db      	uxtb	r3, r3
    e808:	3301      	adds	r3, #1
    e80a:	b2db      	uxtb	r3, r3
    e80c:	4619      	mov	r1, r3
    e80e:	9806      	ldr	r0, [sp, #24]
    e810:	f7fe ffa3 	bl	d75a <Ftm_Pwm_Ip_GetChnCountVal>
    e814:	4603      	mov	r3, r0
    e816:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint8 Prescaler = Ftm_Pwm_Ip_GetClockPs(FtmBase);
    e81a:	9806      	ldr	r0, [sp, #24]
    e81c:	f7fe fde0 	bl	d3e0 <Ftm_Pwm_Ip_GetClockPs>
    e820:	4603      	mov	r3, r0
    e822:	f88d 3011 	strb.w	r3, [sp, #17]
    uint8 DeadTimePs = Ftm_Pwm_Ip_GetDeadtimePrescaler(FtmBase);
    e826:	9806      	ldr	r0, [sp, #24]
    e828:	f7ff f9c1 	bl	dbae <Ftm_Pwm_Ip_GetDeadtimePrescaler>
    e82c:	4603      	mov	r3, r0
    e82e:	f88d 3010 	strb.w	r3, [sp, #16]

    uint16 CompareEven = (OddCounterVal - EvenCounterVal);
    e832:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    e836:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e83a:	1ad3      	subs	r3, r2, r3
    e83c:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16 CompareOdd = Ftm_Pwm_Ip_aPeriod[Instance] - CompareEven;
    e840:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e844:	4a1d      	ldr	r2, [pc, #116]	; (e8bc <Ftm_Pwm_Ip_ValidateParamDeadTime+0x104>)
    e846:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    e84a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    e84e:	1ad3      	subs	r3, r2, r3
    e850:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Validate the range deadtime value is less than 1024U and greater than 0U */
    if ((DeadTimeVal < 1024U) && (DeadTimeVal > 0U))
    e854:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    e85c:	d206      	bcs.n	e86c <Ftm_Pwm_Ip_ValidateParamDeadTime+0xb4>
    e85e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e862:	2b00      	cmp	r3, #0
    e864:	d002      	beq.n	e86c <Ftm_Pwm_Ip_ValidateParamDeadTime+0xb4>
    {
        RetVal = TRUE;
    e866:	2301      	movs	r3, #1
    e868:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    /* Deadtime insertion corner cases */
    /* The deadtime delay is less than the channel (n) duty cycle */
    /* The deadtime delay is less than the channel (n+1) duty cycle */
    if ((0U == Prescaler) && ((0U == DeadTimePs) || (1U == DeadTimePs)))
    e86c:	f89d 3011 	ldrb.w	r3, [sp, #17]
    e870:	2b00      	cmp	r3, #0
    e872:	d11a      	bne.n	e8aa <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
    e874:	f89d 3010 	ldrb.w	r3, [sp, #16]
    e878:	2b00      	cmp	r3, #0
    e87a:	d003      	beq.n	e884 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xcc>
    e87c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    e880:	2b01      	cmp	r3, #1
    e882:	d112      	bne.n	e8aa <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
    { 
        if ((DeadTimeVal < CompareEven) && (DeadTimeVal < CompareOdd))
    e884:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e888:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    e88c:	429a      	cmp	r2, r3
    e88e:	d209      	bcs.n	e8a4 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xec>
    e890:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e894:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    e898:	429a      	cmp	r2, r3
    e89a:	d203      	bcs.n	e8a4 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xec>
        {
            RetVal = TRUE;
    e89c:	2301      	movs	r3, #1
    e89e:	f88d 301f 	strb.w	r3, [sp, #31]
    e8a2:	e002      	b.n	e8aa <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
        }
        else
        {
            RetVal = FALSE;
    e8a4:	2300      	movs	r3, #0
    e8a6:	f88d 301f 	strb.w	r3, [sp, #31]
        }
    }

    return RetVal;
    e8aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    e8ae:	4618      	mov	r0, r3
    e8b0:	b009      	add	sp, #36	; 0x24
    e8b2:	f85d fb04 	ldr.w	pc, [sp], #4
    e8b6:	bf00      	nop
    e8b8:	000197f0 	.word	0x000197f0
    e8bc:	1fff8e2c 	.word	0x1fff8e2c

0000e8c0 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    e8c0:	b084      	sub	sp, #16
    e8c2:	4603      	mov	r3, r0
    e8c4:	f88d 3007 	strb.w	r3, [sp, #7]
    e8c8:	460b      	mov	r3, r1
    e8ca:	f8ad 3004 	strh.w	r3, [sp, #4]
    e8ce:	4613      	mov	r3, r2
    e8d0:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    e8d4:	2300      	movs	r3, #0
    e8d6:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    e8da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e8de:	4a17      	ldr	r2, [pc, #92]	; (e93c <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    e8e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    e8e4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e8e8:	429a      	cmp	r2, r3
    e8ea:	d107      	bne.n	e8fc <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    e8ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e8f0:	4a12      	ldr	r2, [pc, #72]	; (e93c <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    e8f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    e8f6:	f8ad 300e 	strh.w	r3, [sp, #14]
    e8fa:	e019      	b.n	e930 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    e8fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e900:	2b00      	cmp	r3, #0
    e902:	d104      	bne.n	e90e <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    e904:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    e908:	f8ad 300e 	strh.w	r3, [sp, #14]
    e90c:	e010      	b.n	e930 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    e90e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e912:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e916:	4413      	add	r3, r2
    e918:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e91c:	4907      	ldr	r1, [pc, #28]	; (e93c <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    e91e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    e922:	fb93 f1f2 	sdiv	r1, r3, r2
    e926:	fb01 f202 	mul.w	r2, r1, r2
    e92a:	1a9b      	subs	r3, r3, r2
    e92c:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    e930:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    e934:	4618      	mov	r0, r3
    e936:	b004      	add	sp, #16
    e938:	4770      	bx	lr
    e93a:	bf00      	nop
    e93c:	1fff8e2c 	.word	0x1fff8e2c

0000e940 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    e940:	b500      	push	{lr}
    e942:	b085      	sub	sp, #20
    e944:	4603      	mov	r3, r0
    e946:	9100      	str	r1, [sp, #0]
    e948:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e94c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e950:	4a53      	ldr	r2, [pc, #332]	; (eaa0 <Ftm_Pwm_Ip_InitPair+0x160>)
    e952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e956:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    e958:	2300      	movs	r3, #0
    e95a:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    e95e:	2300      	movs	r3, #0
    e960:	f88d 300a 	strb.w	r3, [sp, #10]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    e964:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e968:	2b03      	cmp	r3, #3
    e96a:	bf94      	ite	ls
    e96c:	2301      	movls	r3, #1
    e96e:	2300      	movhi	r3, #0
    e970:	b2db      	uxtb	r3, r3
    e972:	4618      	mov	r0, r3
    e974:	f7f1 ffba 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserPairCfg);
    e978:	9b00      	ldr	r3, [sp, #0]
    e97a:	2b00      	cmp	r3, #0
    e97c:	bf14      	ite	ne
    e97e:	2301      	movne	r3, #1
    e980:	2300      	moveq	r3, #0
    e982:	b2db      	uxtb	r3, r3
    e984:	4618      	mov	r0, r3
    e986:	f7f1 ffb1 	bl	8ec <DevAssert>
    DevAssert(FTM_PWM_IP_PAIR_COUNT > UserPairCfg->PairId);
    e98a:	9b00      	ldr	r3, [sp, #0]
    e98c:	781b      	ldrb	r3, [r3, #0]
    e98e:	2b03      	cmp	r3, #3
    e990:	bf94      	ite	ls
    e992:	2301      	movls	r3, #1
    e994:	2300      	movhi	r3, #0
    e996:	b2db      	uxtb	r3, r3
    e998:	4618      	mov	r0, r3
    e99a:	f7f1 ffa7 	bl	8ec <DevAssert>
    /* Check that deadtime is used in complementary mode */
    if (TRUE == UserPairCfg->DeadtimeEn)
    e99e:	9b00      	ldr	r3, [sp, #0]
    e9a0:	785b      	ldrb	r3, [r3, #1]
    e9a2:	2b00      	cmp	r3, #0
    e9a4:	d004      	beq.n	e9b0 <Ftm_Pwm_Ip_InitPair+0x70>
    {
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    e9a6:	9b00      	ldr	r3, [sp, #0]
    e9a8:	789b      	ldrb	r3, [r3, #2]
    e9aa:	4618      	mov	r0, r3
    e9ac:	f7f1 ff9e 	bl	8ec <DevAssert>
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    e9b0:	9b00      	ldr	r3, [sp, #0]
    e9b2:	781b      	ldrb	r3, [r3, #0]
    e9b4:	005b      	lsls	r3, r3, #1
    e9b6:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    e9ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e9be:	3301      	adds	r3, #1
    e9c0:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    e9c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e9c8:	9a00      	ldr	r2, [sp, #0]
    e9ca:	7812      	ldrb	r2, [r2, #0]
    e9cc:	4610      	mov	r0, r2
    e9ce:	9a00      	ldr	r2, [sp, #0]
    e9d0:	8951      	ldrh	r1, [r2, #10]
    e9d2:	4a34      	ldr	r2, [pc, #208]	; (eaa4 <Ftm_Pwm_Ip_InitPair+0x164>)
    e9d4:	009b      	lsls	r3, r3, #2
    e9d6:	4403      	add	r3, r0
    e9d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    e9dc:	9b00      	ldr	r3, [sp, #0]
    e9de:	7819      	ldrb	r1, [r3, #0]
    e9e0:	9b00      	ldr	r3, [sp, #0]
    e9e2:	789b      	ldrb	r3, [r3, #2]
    e9e4:	461a      	mov	r2, r3
    e9e6:	9803      	ldr	r0, [sp, #12]
    e9e8:	f7ff f821 	bl	da2e <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    e9ec:	9b00      	ldr	r3, [sp, #0]
    e9ee:	789b      	ldrb	r3, [r3, #2]
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	d02f      	beq.n	ea54 <Ftm_Pwm_Ip_InitPair+0x114>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    e9f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e9f8:	4619      	mov	r1, r3
    e9fa:	9803      	ldr	r0, [sp, #12]
    e9fc:	f7ff f94c 	bl	dc98 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    ea00:	4603      	mov	r3, r0
    ea02:	2b01      	cmp	r3, #1
    ea04:	d113      	bne.n	ea2e <Ftm_Pwm_Ip_InitPair+0xee>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    ea06:	9b00      	ldr	r3, [sp, #0]
    ea08:	685b      	ldr	r3, [r3, #4]
    ea0a:	2b01      	cmp	r3, #1
    ea0c:	d107      	bne.n	ea1e <Ftm_Pwm_Ip_InitPair+0xde>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    ea0e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ea12:	2200      	movs	r2, #0
    ea14:	4619      	mov	r1, r3
    ea16:	9803      	ldr	r0, [sp, #12]
    ea18:	f7ff f91c 	bl	dc54 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ea1c:	e01a      	b.n	ea54 <Ftm_Pwm_Ip_InitPair+0x114>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    ea1e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ea22:	2201      	movs	r2, #1
    ea24:	4619      	mov	r1, r3
    ea26:	9803      	ldr	r0, [sp, #12]
    ea28:	f7ff f914 	bl	dc54 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ea2c:	e012      	b.n	ea54 <Ftm_Pwm_Ip_InitPair+0x114>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    ea2e:	9b00      	ldr	r3, [sp, #0]
    ea30:	685b      	ldr	r3, [r3, #4]
    ea32:	2b01      	cmp	r3, #1
    ea34:	d107      	bne.n	ea46 <Ftm_Pwm_Ip_InitPair+0x106>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    ea36:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ea3a:	2201      	movs	r2, #1
    ea3c:	4619      	mov	r1, r3
    ea3e:	9803      	ldr	r0, [sp, #12]
    ea40:	f7ff f908 	bl	dc54 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ea44:	e006      	b.n	ea54 <Ftm_Pwm_Ip_InitPair+0x114>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    ea46:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ea4a:	2200      	movs	r2, #0
    ea4c:	4619      	mov	r1, r3
    ea4e:	9803      	ldr	r0, [sp, #12]
    ea50:	f7ff f900 	bl	dc54 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    ea54:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ea58:	4619      	mov	r1, r3
    ea5a:	9803      	ldr	r0, [sp, #12]
    ea5c:	f7fe fd22 	bl	d4a4 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    ea60:	9b00      	ldr	r3, [sp, #0]
    ea62:	7819      	ldrb	r1, [r3, #0]
    ea64:	9b00      	ldr	r3, [sp, #0]
    ea66:	7a5b      	ldrb	r3, [r3, #9]
    ea68:	461a      	mov	r2, r3
    ea6a:	9803      	ldr	r0, [sp, #12]
    ea6c:	f7ff f82d 	bl	daca <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    ea70:	9b00      	ldr	r3, [sp, #0]
    ea72:	7819      	ldrb	r1, [r3, #0]
    ea74:	9b00      	ldr	r3, [sp, #0]
    ea76:	785b      	ldrb	r3, [r3, #1]
    ea78:	461a      	mov	r2, r3
    ea7a:	9803      	ldr	r0, [sp, #12]
    ea7c:	f7fe fffe 	bl	da7c <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    ea80:	9b00      	ldr	r3, [sp, #0]
    ea82:	7a1a      	ldrb	r2, [r3, #8]
    ea84:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ea88:	4619      	mov	r1, r3
    ea8a:	9803      	ldr	r0, [sp, #12]
    ea8c:	f7ff fd33 	bl	e4f6 <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    ea90:	2101      	movs	r1, #1
    ea92:	9803      	ldr	r0, [sp, #12]
    ea94:	f7fe ff15 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    ea98:	bf00      	nop
    ea9a:	b005      	add	sp, #20
    ea9c:	f85d fb04 	ldr.w	pc, [sp], #4
    eaa0:	000197f0 	.word	0x000197f0
    eaa4:	1fff8e74 	.word	0x1fff8e74

0000eaa8 <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    eaa8:	b500      	push	{lr}
    eaaa:	b085      	sub	sp, #20
    eaac:	4603      	mov	r3, r0
    eaae:	460a      	mov	r2, r1
    eab0:	f88d 3007 	strb.w	r3, [sp, #7]
    eab4:	4613      	mov	r3, r2
    eab6:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    eaba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eabe:	4a0a      	ldr	r2, [pc, #40]	; (eae8 <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    eac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eac4:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    eac6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    eaca:	2200      	movs	r2, #0
    eacc:	4619      	mov	r1, r3
    eace:	9803      	ldr	r0, [sp, #12]
    ead0:	f7fe fdde 	bl	d690 <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    ead4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ead8:	4619      	mov	r1, r3
    eada:	9803      	ldr	r0, [sp, #12]
    eadc:	f7fe fdfb 	bl	d6d6 <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    eae0:	bf00      	nop
    eae2:	b005      	add	sp, #20
    eae4:	f85d fb04 	ldr.w	pc, [sp], #4
    eae8:	000197f0 	.word	0x000197f0

0000eaec <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    eaec:	b500      	push	{lr}
    eaee:	b085      	sub	sp, #20
    eaf0:	4603      	mov	r3, r0
    eaf2:	9100      	str	r1, [sp, #0]
    eaf4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    eaf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eafc:	4a53      	ldr	r2, [pc, #332]	; (ec4c <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    eafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb02:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    eb04:	9b00      	ldr	r3, [sp, #0]
    eb06:	681b      	ldr	r3, [r3, #0]
    eb08:	2b00      	cmp	r3, #0
    eb0a:	d002      	beq.n	eb12 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    eb0c:	2b01      	cmp	r3, #1
    eb0e:	d04c      	beq.n	ebaa <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    eb10:	e097      	b.n	ec42 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    eb12:	9b00      	ldr	r3, [sp, #0]
    eb14:	699b      	ldr	r3, [r3, #24]
    eb16:	2b00      	cmp	r3, #0
    eb18:	bf14      	ite	ne
    eb1a:	2301      	movne	r3, #1
    eb1c:	2300      	moveq	r3, #0
    eb1e:	b2db      	uxtb	r3, r3
    eb20:	4619      	mov	r1, r3
    eb22:	9803      	ldr	r0, [sp, #12]
    eb24:	f7ff f9b1 	bl	de8a <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    eb28:	2100      	movs	r1, #0
    eb2a:	9803      	ldr	r0, [sp, #12]
    eb2c:	f7ff fa2a 	bl	df84 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    eb30:	9b00      	ldr	r3, [sp, #0]
    eb32:	691b      	ldr	r3, [r3, #16]
    eb34:	2b00      	cmp	r3, #0
    eb36:	bf14      	ite	ne
    eb38:	2301      	movne	r3, #1
    eb3a:	2300      	moveq	r3, #0
    eb3c:	b2db      	uxtb	r3, r3
    eb3e:	4619      	mov	r1, r3
    eb40:	9803      	ldr	r0, [sp, #12]
    eb42:	f7ff f9bb 	bl	debc <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    eb46:	2100      	movs	r1, #0
    eb48:	9803      	ldr	r0, [sp, #12]
    eb4a:	f7ff fa34 	bl	dfb6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    eb4e:	9b00      	ldr	r3, [sp, #0]
    eb50:	695b      	ldr	r3, [r3, #20]
    eb52:	2b00      	cmp	r3, #0
    eb54:	bf14      	ite	ne
    eb56:	2301      	movne	r3, #1
    eb58:	2300      	moveq	r3, #0
    eb5a:	b2db      	uxtb	r3, r3
    eb5c:	4619      	mov	r1, r3
    eb5e:	9803      	ldr	r0, [sp, #12]
    eb60:	f7ff f9c5 	bl	deee <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    eb64:	2100      	movs	r1, #0
    eb66:	9803      	ldr	r0, [sp, #12]
    eb68:	f7ff fa25 	bl	dfb6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    eb6c:	9b00      	ldr	r3, [sp, #0]
    eb6e:	69db      	ldr	r3, [r3, #28]
    eb70:	2b00      	cmp	r3, #0
    eb72:	bf14      	ite	ne
    eb74:	2301      	movne	r3, #1
    eb76:	2300      	moveq	r3, #0
    eb78:	b2db      	uxtb	r3, r3
    eb7a:	4619      	mov	r1, r3
    eb7c:	9803      	ldr	r0, [sp, #12]
    eb7e:	f7ff f96b 	bl	de58 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    eb82:	2100      	movs	r1, #0
    eb84:	9803      	ldr	r0, [sp, #12]
    eb86:	f7ff f9e4 	bl	df52 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    eb8a:	9b00      	ldr	r3, [sp, #0]
    eb8c:	6a1b      	ldr	r3, [r3, #32]
    eb8e:	2b00      	cmp	r3, #0
    eb90:	bf14      	ite	ne
    eb92:	2301      	movne	r3, #1
    eb94:	2300      	moveq	r3, #0
    eb96:	b2db      	uxtb	r3, r3
    eb98:	4619      	mov	r1, r3
    eb9a:	9803      	ldr	r0, [sp, #12]
    eb9c:	f7ff f943 	bl	de26 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    eba0:	2100      	movs	r1, #0
    eba2:	9803      	ldr	r0, [sp, #12]
    eba4:	f7ff f9bc 	bl	df20 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    eba8:	e04b      	b.n	ec42 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    ebaa:	2100      	movs	r1, #0
    ebac:	9803      	ldr	r0, [sp, #12]
    ebae:	f7ff f96c 	bl	de8a <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    ebb2:	9b00      	ldr	r3, [sp, #0]
    ebb4:	699b      	ldr	r3, [r3, #24]
    ebb6:	2b00      	cmp	r3, #0
    ebb8:	bf14      	ite	ne
    ebba:	2301      	movne	r3, #1
    ebbc:	2300      	moveq	r3, #0
    ebbe:	b2db      	uxtb	r3, r3
    ebc0:	4619      	mov	r1, r3
    ebc2:	9803      	ldr	r0, [sp, #12]
    ebc4:	f7ff f9de 	bl	df84 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    ebc8:	2100      	movs	r1, #0
    ebca:	9803      	ldr	r0, [sp, #12]
    ebcc:	f7ff f976 	bl	debc <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    ebd0:	9b00      	ldr	r3, [sp, #0]
    ebd2:	691b      	ldr	r3, [r3, #16]
    ebd4:	2b00      	cmp	r3, #0
    ebd6:	bf14      	ite	ne
    ebd8:	2301      	movne	r3, #1
    ebda:	2300      	moveq	r3, #0
    ebdc:	b2db      	uxtb	r3, r3
    ebde:	4619      	mov	r1, r3
    ebe0:	9803      	ldr	r0, [sp, #12]
    ebe2:	f7ff f9e8 	bl	dfb6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    ebe6:	2100      	movs	r1, #0
    ebe8:	9803      	ldr	r0, [sp, #12]
    ebea:	f7ff f980 	bl	deee <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    ebee:	9b00      	ldr	r3, [sp, #0]
    ebf0:	695b      	ldr	r3, [r3, #20]
    ebf2:	2b00      	cmp	r3, #0
    ebf4:	bf14      	ite	ne
    ebf6:	2301      	movne	r3, #1
    ebf8:	2300      	moveq	r3, #0
    ebfa:	b2db      	uxtb	r3, r3
    ebfc:	4619      	mov	r1, r3
    ebfe:	9803      	ldr	r0, [sp, #12]
    ec00:	f7ff f9d9 	bl	dfb6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    ec04:	2100      	movs	r1, #0
    ec06:	9803      	ldr	r0, [sp, #12]
    ec08:	f7ff f926 	bl	de58 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ec0c:	9b00      	ldr	r3, [sp, #0]
    ec0e:	69db      	ldr	r3, [r3, #28]
    ec10:	2b00      	cmp	r3, #0
    ec12:	bf14      	ite	ne
    ec14:	2301      	movne	r3, #1
    ec16:	2300      	moveq	r3, #0
    ec18:	b2db      	uxtb	r3, r3
    ec1a:	4619      	mov	r1, r3
    ec1c:	9803      	ldr	r0, [sp, #12]
    ec1e:	f7ff f998 	bl	df52 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    ec22:	2100      	movs	r1, #0
    ec24:	9803      	ldr	r0, [sp, #12]
    ec26:	f7ff f8fe 	bl	de26 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ec2a:	9b00      	ldr	r3, [sp, #0]
    ec2c:	6a1b      	ldr	r3, [r3, #32]
    ec2e:	2b00      	cmp	r3, #0
    ec30:	bf14      	ite	ne
    ec32:	2301      	movne	r3, #1
    ec34:	2300      	moveq	r3, #0
    ec36:	b2db      	uxtb	r3, r3
    ec38:	4619      	mov	r1, r3
    ec3a:	9803      	ldr	r0, [sp, #12]
    ec3c:	f7ff f970 	bl	df20 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    ec40:	bf00      	nop
    }
}
    ec42:	bf00      	nop
    ec44:	b005      	add	sp, #20
    ec46:	f85d fb04 	ldr.w	pc, [sp], #4
    ec4a:	bf00      	nop
    ec4c:	000197f0 	.word	0x000197f0

0000ec50 <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    ec50:	b500      	push	{lr}
    ec52:	b085      	sub	sp, #20
    ec54:	4603      	mov	r3, r0
    ec56:	9100      	str	r1, [sp, #0]
    ec58:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ec5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec60:	4a19      	ldr	r2, [pc, #100]	; (ecc8 <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    ec62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec66:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ec68:	9b00      	ldr	r3, [sp, #0]
    ec6a:	699b      	ldr	r3, [r3, #24]
    ec6c:	2b00      	cmp	r3, #0
    ec6e:	bf14      	ite	ne
    ec70:	2301      	movne	r3, #1
    ec72:	2300      	moveq	r3, #0
    ec74:	b2db      	uxtb	r3, r3
    ec76:	4619      	mov	r1, r3
    ec78:	9803      	ldr	r0, [sp, #12]
    ec7a:	f7fe fde7 	bl	d84c <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ec7e:	9b00      	ldr	r3, [sp, #0]
    ec80:	691b      	ldr	r3, [r3, #16]
    ec82:	2b00      	cmp	r3, #0
    ec84:	bf14      	ite	ne
    ec86:	2301      	movne	r3, #1
    ec88:	2300      	moveq	r3, #0
    ec8a:	b2db      	uxtb	r3, r3
    ec8c:	4619      	mov	r1, r3
    ec8e:	9803      	ldr	r0, [sp, #12]
    ec90:	f7ff f881 	bl	dd96 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ec94:	9b00      	ldr	r3, [sp, #0]
    ec96:	695b      	ldr	r3, [r3, #20]
    ec98:	2b00      	cmp	r3, #0
    ec9a:	bf14      	ite	ne
    ec9c:	2301      	movne	r3, #1
    ec9e:	2300      	moveq	r3, #0
    eca0:	b2db      	uxtb	r3, r3
    eca2:	4619      	mov	r1, r3
    eca4:	9803      	ldr	r0, [sp, #12]
    eca6:	f7ff f88e 	bl	ddc6 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ecaa:	9b00      	ldr	r3, [sp, #0]
    ecac:	69db      	ldr	r3, [r3, #28]
    ecae:	2b00      	cmp	r3, #0
    ecb0:	bf14      	ite	ne
    ecb2:	2301      	movne	r3, #1
    ecb4:	2300      	moveq	r3, #0
    ecb6:	b2db      	uxtb	r3, r3
    ecb8:	4619      	mov	r1, r3
    ecba:	9803      	ldr	r0, [sp, #12]
    ecbc:	f7ff f853 	bl	dd66 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    ecc0:	bf00      	nop
    ecc2:	b005      	add	sp, #20
    ecc4:	f85d fb04 	ldr.w	pc, [sp], #4
    ecc8:	000197f0 	.word	0x000197f0

0000eccc <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    eccc:	b500      	push	{lr}
    ecce:	b087      	sub	sp, #28
    ecd0:	4603      	mov	r3, r0
    ecd2:	9100      	str	r1, [sp, #0]
    ecd4:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ecd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ecdc:	4a4b      	ldr	r2, [pc, #300]	; (ee0c <Ftm_Pwm_Ip_UpdateSync+0x140>)
    ecde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ece2:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    ece4:	2300      	movs	r3, #0
    ece6:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    ece8:	2300      	movs	r3, #0
    ecea:	f88d 300f 	strb.w	r3, [sp, #15]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    ecee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ecf2:	2b03      	cmp	r3, #3
    ecf4:	bf94      	ite	ls
    ecf6:	2301      	movls	r3, #1
    ecf8:	2300      	movhi	r3, #0
    ecfa:	b2db      	uxtb	r3, r3
    ecfc:	4618      	mov	r0, r3
    ecfe:	f7f1 fdf5 	bl	8ec <DevAssert>
    DevAssert(SyncCfg != NULL_PTR);
    ed02:	9b00      	ldr	r3, [sp, #0]
    ed04:	2b00      	cmp	r3, #0
    ed06:	bf14      	ite	ne
    ed08:	2301      	movne	r3, #1
    ed0a:	2300      	moveq	r3, #0
    ed0c:	b2db      	uxtb	r3, r3
    ed0e:	4618      	mov	r0, r3
    ed10:	f7f1 fdec 	bl	8ec <DevAssert>
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    ed14:	9b00      	ldr	r3, [sp, #0]
    ed16:	791b      	ldrb	r3, [r3, #4]
    ed18:	2b00      	cmp	r3, #0
    ed1a:	d107      	bne.n	ed2c <Ftm_Pwm_Ip_UpdateSync+0x60>
    ed1c:	9b00      	ldr	r3, [sp, #0]
    ed1e:	795b      	ldrb	r3, [r3, #5]
    ed20:	2b00      	cmp	r3, #0
    ed22:	d103      	bne.n	ed2c <Ftm_Pwm_Ip_UpdateSync+0x60>
    ed24:	9b00      	ldr	r3, [sp, #0]
    ed26:	799b      	ldrb	r3, [r3, #6]
    ed28:	2b00      	cmp	r3, #0
    ed2a:	d001      	beq.n	ed30 <Ftm_Pwm_Ip_UpdateSync+0x64>
    ed2c:	2301      	movs	r3, #1
    ed2e:	e000      	b.n	ed32 <Ftm_Pwm_Ip_UpdateSync+0x66>
    ed30:	2300      	movs	r3, #0
    ed32:	f88d 300f 	strb.w	r3, [sp, #15]
    ed36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ed3a:	f003 0301 	and.w	r3, r3, #1
    ed3e:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    ed42:	9b00      	ldr	r3, [sp, #0]
    ed44:	681b      	ldr	r3, [r3, #0]
    ed46:	2b00      	cmp	r3, #0
    ed48:	d105      	bne.n	ed56 <Ftm_Pwm_Ip_UpdateSync+0x8a>
    ed4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ed4e:	2b00      	cmp	r3, #0
    ed50:	d001      	beq.n	ed56 <Ftm_Pwm_Ip_UpdateSync+0x8a>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    ed52:	2301      	movs	r3, #1
    ed54:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    ed56:	9b00      	ldr	r3, [sp, #0]
    ed58:	6a1b      	ldr	r3, [r3, #32]
    ed5a:	2b02      	cmp	r3, #2
    ed5c:	d101      	bne.n	ed62 <Ftm_Pwm_Ip_UpdateSync+0x96>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    ed5e:	2301      	movs	r3, #1
    ed60:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    ed62:	9b05      	ldr	r3, [sp, #20]
    ed64:	2b00      	cmp	r3, #0
    ed66:	d14c      	bne.n	ee02 <Ftm_Pwm_Ip_UpdateSync+0x136>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    ed68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ed6c:	9900      	ldr	r1, [sp, #0]
    ed6e:	4618      	mov	r0, r3
    ed70:	f7ff febc 	bl	eaec <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    ed74:	2101      	movs	r1, #1
    ed76:	9804      	ldr	r0, [sp, #16]
    ed78:	f7ff f83d 	bl	ddf6 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    ed7c:	9b00      	ldr	r3, [sp, #0]
    ed7e:	791b      	ldrb	r3, [r3, #4]
    ed80:	461a      	mov	r2, r3
    ed82:	2100      	movs	r1, #0
    ed84:	9804      	ldr	r0, [sp, #16]
    ed86:	f7fe fd77 	bl	d878 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    ed8a:	9b00      	ldr	r3, [sp, #0]
    ed8c:	795b      	ldrb	r3, [r3, #5]
    ed8e:	461a      	mov	r2, r3
    ed90:	2101      	movs	r1, #1
    ed92:	9804      	ldr	r0, [sp, #16]
    ed94:	f7fe fd70 	bl	d878 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    ed98:	9b00      	ldr	r3, [sp, #0]
    ed9a:	799b      	ldrb	r3, [r3, #6]
    ed9c:	461a      	mov	r2, r3
    ed9e:	2102      	movs	r1, #2
    eda0:	9804      	ldr	r0, [sp, #16]
    eda2:	f7fe fd69 	bl	d878 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    eda6:	9b00      	ldr	r3, [sp, #0]
    eda8:	79db      	ldrb	r3, [r3, #7]
    edaa:	4619      	mov	r1, r3
    edac:	9804      	ldr	r0, [sp, #16]
    edae:	f7fe ffc2 	bl	dd36 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    edb2:	9b00      	ldr	r3, [sp, #0]
    edb4:	7a1b      	ldrb	r3, [r3, #8]
    edb6:	4619      	mov	r1, r3
    edb8:	9804      	ldr	r0, [sp, #16]
    edba:	f7fe fd31 	bl	d820 <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    edbe:	9b00      	ldr	r3, [sp, #0]
    edc0:	7a5b      	ldrb	r3, [r3, #9]
    edc2:	4619      	mov	r1, r3
    edc4:	9804      	ldr	r0, [sp, #16]
    edc6:	f7fe fd15 	bl	d7f4 <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    edca:	9b00      	ldr	r3, [sp, #0]
    edcc:	7a9b      	ldrb	r3, [r3, #10]
    edce:	2b00      	cmp	r3, #0
    edd0:	d005      	beq.n	edde <Ftm_Pwm_Ip_UpdateSync+0x112>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    edd2:	9b00      	ldr	r3, [sp, #0]
    edd4:	899b      	ldrh	r3, [r3, #12]
    edd6:	4619      	mov	r1, r3
    edd8:	9804      	ldr	r0, [sp, #16]
    edda:	f7ff f9c1 	bl	e160 <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    edde:	9b00      	ldr	r3, [sp, #0]
    ede0:	7a9b      	ldrb	r3, [r3, #10]
    ede2:	4619      	mov	r1, r3
    ede4:	9804      	ldr	r0, [sp, #16]
    ede6:	f7ff f99e 	bl	e126 <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    edea:	9b00      	ldr	r3, [sp, #0]
    edec:	7b9b      	ldrb	r3, [r3, #14]
    edee:	4619      	mov	r1, r3
    edf0:	9804      	ldr	r0, [sp, #16]
    edf2:	f7fe ff66 	bl	dcc2 <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    edf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    edfa:	9900      	ldr	r1, [sp, #0]
    edfc:	4618      	mov	r0, r3
    edfe:	f7ff ff27 	bl	ec50 <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    ee02:	9b05      	ldr	r3, [sp, #20]
}
    ee04:	4618      	mov	r0, r3
    ee06:	b007      	add	sp, #28
    ee08:	f85d fb04 	ldr.w	pc, [sp], #4
    ee0c:	000197f0 	.word	0x000197f0

0000ee10 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    ee10:	b500      	push	{lr}
    ee12:	b085      	sub	sp, #20
    ee14:	4603      	mov	r3, r0
    ee16:	9100      	str	r1, [sp, #0]
    ee18:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ee1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ee20:	4a1f      	ldr	r2, [pc, #124]	; (eea0 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    ee22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee26:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    ee28:	9803      	ldr	r0, [sp, #12]
    ee2a:	f7ff faef 	bl	e40c <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    ee2e:	2100      	movs	r1, #0
    ee30:	9803      	ldr	r0, [sp, #12]
    ee32:	f7fe fae0 	bl	d3f6 <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    ee36:	9803      	ldr	r0, [sp, #12]
    ee38:	f7fe fb29 	bl	d48e <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    ee3c:	9b00      	ldr	r3, [sp, #0]
    ee3e:	68db      	ldr	r3, [r3, #12]
    ee40:	2b00      	cmp	r3, #0
    ee42:	bf14      	ite	ne
    ee44:	2301      	movne	r3, #1
    ee46:	2300      	moveq	r3, #0
    ee48:	b2db      	uxtb	r3, r3
    ee4a:	4619      	mov	r1, r3
    ee4c:	9803      	ldr	r0, [sp, #12]
    ee4e:	f7fe fae3 	bl	d418 <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    ee52:	2100      	movs	r1, #0
    ee54:	9803      	ldr	r0, [sp, #12]
    ee56:	f7fe fca1 	bl	d79c <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    ee5a:	9b00      	ldr	r3, [sp, #0]
    ee5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ee5e:	4619      	mov	r1, r3
    ee60:	9803      	ldr	r0, [sp, #12]
    ee62:	f7fe ff43 	bl	dcec <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    ee66:	9b00      	ldr	r3, [sp, #0]
    ee68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    ee6a:	b2db      	uxtb	r3, r3
    ee6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ee70:	b2db      	uxtb	r3, r3
    ee72:	4619      	mov	r1, r3
    ee74:	9803      	ldr	r0, [sp, #12]
    ee76:	f7fe fe76 	bl	db66 <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    ee7a:	9b00      	ldr	r3, [sp, #0]
    ee7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    ee7e:	099b      	lsrs	r3, r3, #6
    ee80:	b29b      	uxth	r3, r3
    ee82:	b2db      	uxtb	r3, r3
    ee84:	4619      	mov	r1, r3
    ee86:	9803      	ldr	r0, [sp, #12]
    ee88:	f7fe fe9e 	bl	dbc8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    ee8c:	9b00      	ldr	r3, [sp, #0]
    ee8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ee90:	4619      	mov	r1, r3
    ee92:	9803      	ldr	r0, [sp, #12]
    ee94:	f7fe fe7a 	bl	db8c <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    ee98:	bf00      	nop
    ee9a:	b005      	add	sp, #20
    ee9c:	f85d fb04 	ldr.w	pc, [sp], #4
    eea0:	000197f0 	.word	0x000197f0

0000eea4 <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    eea4:	b500      	push	{lr}
    eea6:	b085      	sub	sp, #20
    eea8:	4603      	mov	r3, r0
    eeaa:	9100      	str	r1, [sp, #0]
    eeac:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    eeb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eeb4:	4a48      	ldr	r2, [pc, #288]	; (efd8 <Ftm_Pwm_Ip_InitInstance+0x134>)
    eeb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeba:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    eebc:	4b47      	ldr	r3, [pc, #284]	; (efdc <Ftm_Pwm_Ip_InitInstance+0x138>)
    eebe:	9302      	str	r3, [sp, #8]
#endif

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    eec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eec4:	2b03      	cmp	r3, #3
    eec6:	bf94      	ite	ls
    eec8:	2301      	movls	r3, #1
    eeca:	2300      	movhi	r3, #0
    eecc:	b2db      	uxtb	r3, r3
    eece:	4618      	mov	r0, r3
    eed0:	f7f1 fd0c 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserInstCfg);
    eed4:	9b00      	ldr	r3, [sp, #0]
    eed6:	2b00      	cmp	r3, #0
    eed8:	bf14      	ite	ne
    eeda:	2301      	movne	r3, #1
    eedc:	2300      	moveq	r3, #0
    eede:	b2db      	uxtb	r3, r3
    eee0:	4618      	mov	r0, r3
    eee2:	f7f1 fd03 	bl	8ec <DevAssert>
    /* Maximum value for Deadtime is 1023 including the extension */
    DevAssert((uint16)0x3FF >= UserInstCfg->DeadTimeValue);
    eee6:	9b00      	ldr	r3, [sp, #0]
    eee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    eeea:	f240 32ff 	movw	r2, #1023	; 0x3ff
    eeee:	4293      	cmp	r3, r2
    eef0:	bf94      	ite	ls
    eef2:	2301      	movls	r3, #1
    eef4:	2300      	movhi	r3, #0
    eef6:	b2db      	uxtb	r3, r3
    eef8:	4618      	mov	r0, r3
    eefa:	f7f1 fcf7 	bl	8ec <DevAssert>
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    eefe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef02:	4619      	mov	r1, r3
    ef04:	9802      	ldr	r0, [sp, #8]
    ef06:	f7ff fc45 	bl	e794 <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    ef0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef0e:	9900      	ldr	r1, [sp, #0]
    ef10:	4618      	mov	r0, r3
    ef12:	f7ff ff7d 	bl	ee10 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    ef16:	9b00      	ldr	r3, [sp, #0]
    ef18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    ef1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef1e:	4611      	mov	r1, r2
    ef20:	4618      	mov	r0, r3
    ef22:	f7ff fed3 	bl	eccc <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    ef26:	2100      	movs	r1, #0
    ef28:	9803      	ldr	r0, [sp, #12]
    ef2a:	f7fe fc26 	bl	d77a <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    ef2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef32:	9a00      	ldr	r2, [sp, #0]
    ef34:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    ef36:	4a2a      	ldr	r2, [pc, #168]	; (efe0 <Ftm_Pwm_Ip_InitInstance+0x13c>)
    ef38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    ef3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef40:	9a00      	ldr	r2, [sp, #0]
    ef42:	6812      	ldr	r2, [r2, #0]
    ef44:	4927      	ldr	r1, [pc, #156]	; (efe4 <Ftm_Pwm_Ip_InitInstance+0x140>)
    ef46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    ef4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef4e:	9a00      	ldr	r2, [sp, #0]
    ef50:	6852      	ldr	r2, [r2, #4]
    ef52:	4925      	ldr	r1, [pc, #148]	; (efe8 <Ftm_Pwm_Ip_InitInstance+0x144>)
    ef54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    ef58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef5c:	9a00      	ldr	r2, [sp, #0]
    ef5e:	6892      	ldr	r2, [r2, #8]
    ef60:	4922      	ldr	r1, [pc, #136]	; (efec <Ftm_Pwm_Ip_InitInstance+0x148>)
    ef62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    ef66:	9b00      	ldr	r3, [sp, #0]
    ef68:	7c1b      	ldrb	r3, [r3, #16]
    ef6a:	2b00      	cmp	r3, #0
    ef6c:	d00e      	beq.n	ef8c <Ftm_Pwm_Ip_InitInstance+0xe8>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    ef6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef72:	9a00      	ldr	r2, [sp, #0]
    ef74:	6952      	ldr	r2, [r2, #20]
    ef76:	491e      	ldr	r1, [pc, #120]	; (eff0 <Ftm_Pwm_Ip_InitInstance+0x14c>)
    ef78:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    ef7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef80:	9a00      	ldr	r2, [sp, #0]
    ef82:	6992      	ldr	r2, [r2, #24]
    ef84:	491a      	ldr	r1, [pc, #104]	; (eff0 <Ftm_Pwm_Ip_InitInstance+0x14c>)
    ef86:	00db      	lsls	r3, r3, #3
    ef88:	440b      	add	r3, r1
    ef8a:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    ef8c:	9b00      	ldr	r3, [sp, #0]
    ef8e:	68db      	ldr	r3, [r3, #12]
    ef90:	2b01      	cmp	r3, #1
    ef92:	d108      	bne.n	efa6 <Ftm_Pwm_Ip_InitInstance+0x102>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    ef94:	9b00      	ldr	r3, [sp, #0]
    ef96:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    ef98:	085b      	lsrs	r3, r3, #1
    ef9a:	b29b      	uxth	r3, r3
    ef9c:	4619      	mov	r1, r3
    ef9e:	9803      	ldr	r0, [sp, #12]
    efa0:	f7fe faa3 	bl	d4ea <Ftm_Pwm_Ip_SetMod>
    efa4:	e007      	b.n	efb6 <Ftm_Pwm_Ip_InitInstance+0x112>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    efa6:	9b00      	ldr	r3, [sp, #0]
    efa8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    efaa:	3b01      	subs	r3, #1
    efac:	b29b      	uxth	r3, r3
    efae:	4619      	mov	r1, r3
    efb0:	9803      	ldr	r0, [sp, #12]
    efb2:	f7fe fa9a 	bl	d4ea <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    efb6:	9b00      	ldr	r3, [sp, #0]
    efb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    efbc:	4619      	mov	r1, r3
    efbe:	9803      	ldr	r0, [sp, #12]
    efc0:	f7fe fe16 	bl	dbf0 <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    efc4:	9b00      	ldr	r3, [sp, #0]
    efc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    efc8:	4619      	mov	r1, r3
    efca:	9803      	ldr	r0, [sp, #12]
    efcc:	f7fe fea0 	bl	dd10 <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    efd0:	bf00      	nop
    efd2:	b005      	add	sp, #20
    efd4:	f85d fb04 	ldr.w	pc, [sp], #4
    efd8:	000197f0 	.word	0x000197f0
    efdc:	40048000 	.word	0x40048000
    efe0:	1fff8e2c 	.word	0x1fff8e2c
    efe4:	1fff9124 	.word	0x1fff9124
    efe8:	1fff9134 	.word	0x1fff9134
    efec:	1fff9144 	.word	0x1fff9144
    eff0:	1fff8fd4 	.word	0x1fff8fd4

0000eff4 <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    eff4:	b500      	push	{lr}
    eff6:	b085      	sub	sp, #20
    eff8:	4603      	mov	r3, r0
    effa:	9100      	str	r1, [sp, #0]
    effc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f000:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f004:	4a23      	ldr	r2, [pc, #140]	; (f094 <Ftm_Pwm_Ip_InitInstanceStart+0xa0>)
    f006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f00a:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f00c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f010:	2b03      	cmp	r3, #3
    f012:	bf94      	ite	ls
    f014:	2301      	movls	r3, #1
    f016:	2300      	movhi	r3, #0
    f018:	b2db      	uxtb	r3, r3
    f01a:	4618      	mov	r0, r3
    f01c:	f7f1 fc66 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserInstCfg);
    f020:	9b00      	ldr	r3, [sp, #0]
    f022:	2b00      	cmp	r3, #0
    f024:	bf14      	ite	ne
    f026:	2301      	movne	r3, #1
    f028:	2300      	moveq	r3, #0
    f02a:	b2db      	uxtb	r3, r3
    f02c:	4618      	mov	r0, r3
    f02e:	f7f1 fc5d 	bl	8ec <DevAssert>
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    f032:	9b00      	ldr	r3, [sp, #0]
    f034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    f038:	4619      	mov	r1, r3
    f03a:	9803      	ldr	r0, [sp, #12]
    f03c:	f7ff fb16 	bl	e66c <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    f040:	9b00      	ldr	r3, [sp, #0]
    f042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f044:	4619      	mov	r1, r3
    f046:	9803      	ldr	r0, [sp, #12]
    f048:	f7ff fb24 	bl	e694 <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    f04c:	9b00      	ldr	r3, [sp, #0]
    f04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f050:	4619      	mov	r1, r3
    f052:	9803      	ldr	r0, [sp, #12]
    f054:	f7ff fa8d 	bl	e572 <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    f058:	2101      	movs	r1, #1
    f05a:	9803      	ldr	r0, [sp, #12]
    f05c:	f7fe fb9e 	bl	d79c <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    f060:	2101      	movs	r1, #1
    f062:	9803      	ldr	r0, [sp, #12]
    f064:	f7fe fbb0 	bl	d7c8 <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    f068:	9b00      	ldr	r3, [sp, #0]
    f06a:	685b      	ldr	r3, [r3, #4]
    f06c:	4619      	mov	r1, r3
    f06e:	9803      	ldr	r0, [sp, #12]
    f070:	f7fe f9a6 	bl	d3c0 <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    f074:	9b00      	ldr	r3, [sp, #0]
    f076:	681b      	ldr	r3, [r3, #0]
    f078:	4619      	mov	r1, r3
    f07a:	9803      	ldr	r0, [sp, #12]
    f07c:	f7fe f9bb 	bl	d3f6 <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f080:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f084:	4a04      	ldr	r2, [pc, #16]	; (f098 <Ftm_Pwm_Ip_InitInstanceStart+0xa4>)
    f086:	2101      	movs	r1, #1
    f088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    f08c:	bf00      	nop
    f08e:	b005      	add	sp, #20
    f090:	f85d fb04 	ldr.w	pc, [sp], #4
    f094:	000197f0 	.word	0x000197f0
    f098:	1fff8ff4 	.word	0x1fff8ff4

0000f09c <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f09c:	b500      	push	{lr}
    f09e:	b085      	sub	sp, #20
    f0a0:	4603      	mov	r3, r0
    f0a2:	9100      	str	r1, [sp, #0]
    f0a4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f0a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f0ac:	4a37      	ldr	r2, [pc, #220]	; (f18c <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    f0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0b2:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    f0b4:	2300      	movs	r3, #0
    f0b6:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    f0ba:	2300      	movs	r3, #0
    f0bc:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    f0c0:	9b00      	ldr	r3, [sp, #0]
    f0c2:	781b      	ldrb	r3, [r3, #0]
    f0c4:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    f0c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f0cc:	085b      	lsrs	r3, r3, #1
    f0ce:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    f0d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f0d6:	2201      	movs	r2, #1
    f0d8:	4619      	mov	r1, r3
    f0da:	9803      	ldr	r0, [sp, #12]
    f0dc:	f7fe fcf5 	bl	daca <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    f0e0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f0e4:	2201      	movs	r2, #1
    f0e6:	4619      	mov	r1, r3
    f0e8:	9803      	ldr	r0, [sp, #12]
    f0ea:	f7ff fa77 	bl	e5dc <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f0ee:	9b00      	ldr	r3, [sp, #0]
    f0f0:	685b      	ldr	r3, [r3, #4]
    f0f2:	2b22      	cmp	r3, #34	; 0x22
    f0f4:	d003      	beq.n	f0fe <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    f0f6:	9b00      	ldr	r3, [sp, #0]
    f0f8:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f0fa:	2b21      	cmp	r3, #33	; 0x21
    f0fc:	d113      	bne.n	f126 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    f0fe:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f102:	005b      	lsls	r3, r3, #1
    f104:	b2db      	uxtb	r3, r3
    f106:	3301      	adds	r3, #1
    f108:	b2d9      	uxtb	r1, r3
    f10a:	9b00      	ldr	r3, [sp, #0]
    f10c:	685b      	ldr	r3, [r3, #4]
    f10e:	461a      	mov	r2, r3
    f110:	9803      	ldr	r0, [sp, #12]
    f112:	f7fe fa25 	bl	d560 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    f116:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f11a:	2201      	movs	r2, #1
    f11c:	4619      	mov	r1, r3
    f11e:	9803      	ldr	r0, [sp, #12]
    f120:	f7fe fc48 	bl	d9b4 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    f124:	e021      	b.n	f16a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f126:	9b00      	ldr	r3, [sp, #0]
    f128:	685b      	ldr	r3, [r3, #4]
    f12a:	2b62      	cmp	r3, #98	; 0x62
    f12c:	d003      	beq.n	f136 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    f12e:	9b00      	ldr	r3, [sp, #0]
    f130:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f132:	2b61      	cmp	r3, #97	; 0x61
    f134:	d119      	bne.n	f16a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    f136:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f13a:	005b      	lsls	r3, r3, #1
    f13c:	b2db      	uxtb	r3, r3
    f13e:	3301      	adds	r3, #1
    f140:	b2d9      	uxtb	r1, r3
    f142:	9b00      	ldr	r3, [sp, #0]
    f144:	685b      	ldr	r3, [r3, #4]
    f146:	461a      	mov	r2, r3
    f148:	9803      	ldr	r0, [sp, #12]
    f14a:	f7fe fa09 	bl	d560 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    f14e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f152:	2201      	movs	r2, #1
    f154:	4619      	mov	r1, r3
    f156:	9803      	ldr	r0, [sp, #12]
    f158:	f7fe fc2c 	bl	d9b4 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    f15c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f160:	2201      	movs	r2, #1
    f162:	4619      	mov	r1, r3
    f164:	9803      	ldr	r0, [sp, #12]
    f166:	f7fe fcd7 	bl	db18 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    f16a:	9b00      	ldr	r3, [sp, #0]
    f16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f16e:	2b00      	cmp	r3, #0
    f170:	d007      	beq.n	f182 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    f172:	9b00      	ldr	r3, [sp, #0]
    f174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f176:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f17a:	4611      	mov	r1, r2
    f17c:	4618      	mov	r0, r3
    f17e:	f7ff fbdf 	bl	e940 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    f182:	bf00      	nop
    f184:	b005      	add	sp, #20
    f186:	f85d fb04 	ldr.w	pc, [sp], #4
    f18a:	bf00      	nop
    f18c:	000197f0 	.word	0x000197f0

0000f190 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f190:	b500      	push	{lr}
    f192:	b085      	sub	sp, #20
    f194:	4603      	mov	r3, r0
    f196:	9100      	str	r1, [sp, #0]
    f198:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f19c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f1a0:	4a15      	ldr	r2, [pc, #84]	; (f1f8 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    f1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1a6:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    f1a8:	9b00      	ldr	r3, [sp, #0]
    f1aa:	7819      	ldrb	r1, [r3, #0]
    f1ac:	9b00      	ldr	r3, [sp, #0]
    f1ae:	7ddb      	ldrb	r3, [r3, #23]
    f1b0:	461a      	mov	r2, r3
    f1b2:	9803      	ldr	r0, [sp, #12]
    f1b4:	f7ff f99f 	bl	e4f6 <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    f1b8:	9b00      	ldr	r3, [sp, #0]
    f1ba:	7819      	ldrb	r1, [r3, #0]
    f1bc:	9b00      	ldr	r3, [sp, #0]
    f1be:	7e1b      	ldrb	r3, [r3, #24]
    f1c0:	461a      	mov	r2, r3
    f1c2:	9803      	ldr	r0, [sp, #12]
    f1c4:	f7fe ff86 	bl	e0d4 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    f1c8:	9b00      	ldr	r3, [sp, #0]
    f1ca:	7819      	ldrb	r1, [r3, #0]
    f1cc:	9b00      	ldr	r3, [sp, #0]
    f1ce:	7d5b      	ldrb	r3, [r3, #21]
    f1d0:	461a      	mov	r2, r3
    f1d2:	9803      	ldr	r0, [sp, #12]
    f1d4:	f7fe ff48 	bl	e068 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    f1d8:	9b00      	ldr	r3, [sp, #0]
    f1da:	7819      	ldrb	r1, [r3, #0]
    f1dc:	9b00      	ldr	r3, [sp, #0]
    f1de:	7d9b      	ldrb	r3, [r3, #22]
    f1e0:	461a      	mov	r2, r3
    f1e2:	9803      	ldr	r0, [sp, #12]
    f1e4:	f7fe ff00 	bl	dfe8 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    f1e8:	2101      	movs	r1, #1
    f1ea:	9803      	ldr	r0, [sp, #12]
    f1ec:	f7fe fb69 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    f1f0:	bf00      	nop
    f1f2:	b005      	add	sp, #20
    f1f4:	f85d fb04 	ldr.w	pc, [sp], #4
    f1f8:	000197f0 	.word	0x000197f0

0000f1fc <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f1fc:	b500      	push	{lr}
    f1fe:	b085      	sub	sp, #20
    f200:	4603      	mov	r3, r0
    f202:	9100      	str	r1, [sp, #0]
    f204:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f208:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f20c:	4a7b      	ldr	r2, [pc, #492]	; (f3fc <Ftm_Pwm_Ip_InitChannel+0x200>)
    f20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f212:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    f214:	2300      	movs	r3, #0
    f216:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f21a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f21e:	2b03      	cmp	r3, #3
    f220:	bf94      	ite	ls
    f222:	2301      	movls	r3, #1
    f224:	2300      	movhi	r3, #0
    f226:	b2db      	uxtb	r3, r3
    f228:	4618      	mov	r0, r3
    f22a:	f7f1 fb5f 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserChCfg);
    f22e:	9b00      	ldr	r3, [sp, #0]
    f230:	2b00      	cmp	r3, #0
    f232:	bf14      	ite	ne
    f234:	2301      	movne	r3, #1
    f236:	2300      	moveq	r3, #0
    f238:	b2db      	uxtb	r3, r3
    f23a:	4618      	mov	r0, r3
    f23c:	f7f1 fb56 	bl	8ec <DevAssert>
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    f240:	9b00      	ldr	r3, [sp, #0]
    f242:	781b      	ldrb	r3, [r3, #0]
    f244:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)

    /* Center Aligned PWM is available only in FTM CPWM counter mode */
    if ((FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == UserChCfg->ChannelMode) ||
    f248:	9b00      	ldr	r3, [sp, #0]
    f24a:	685b      	ldr	r3, [r3, #4]
    f24c:	2b12      	cmp	r3, #18
    f24e:	d003      	beq.n	f258 <Ftm_Pwm_Ip_InitChannel+0x5c>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW == UserChCfg->ChannelMode))
    f250:	9b00      	ldr	r3, [sp, #0]
    f252:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == UserChCfg->ChannelMode) ||
    f254:	2b11      	cmp	r3, #17
    f256:	d10b      	bne.n	f270 <Ftm_Pwm_Ip_InitChannel+0x74>
    {
        DevAssert(FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase));
    f258:	9803      	ldr	r0, [sp, #12]
    f25a:	f7fe f8f3 	bl	d444 <Ftm_Pwm_Ip_GetCpwms>
    f25e:	4603      	mov	r3, r0
    f260:	2b01      	cmp	r3, #1
    f262:	bf0c      	ite	eq
    f264:	2301      	moveq	r3, #1
    f266:	2300      	movne	r3, #0
    f268:	b2db      	uxtb	r3, r3
    f26a:	4618      	mov	r0, r3
    f26c:	f7f1 fb3e 	bl	8ec <DevAssert>
    }
    /* Only the main channel of a pair can have the PairCfg pointer set */
    if (NULL_PTR != UserChCfg->PairCfg)
    f270:	9b00      	ldr	r3, [sp, #0]
    f272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f274:	2b00      	cmp	r3, #0
    f276:	d015      	beq.n	f2a4 <Ftm_Pwm_Ip_InitChannel+0xa8>
    {
        if (0x01U == (ChannelId % 2U))
    f278:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f27c:	f003 0301 	and.w	r3, r3, #1
    f280:	b2db      	uxtb	r3, r3
    f282:	2b00      	cmp	r3, #0
    f284:	d003      	beq.n	f28e <Ftm_Pwm_Ip_InitChannel+0x92>
        {
            DevAssert(FALSE);
    f286:	2000      	movs	r0, #0
    f288:	f7f1 fb30 	bl	8ec <DevAssert>
    f28c:	e00a      	b.n	f2a4 <Ftm_Pwm_Ip_InitChannel+0xa8>
        }/* Check if pair configuration */
        else if ((UserChCfg->PairCfg->PairId * 2U) != ChannelId)
    f28e:	9b00      	ldr	r3, [sp, #0]
    f290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f292:	781b      	ldrb	r3, [r3, #0]
    f294:	005a      	lsls	r2, r3, #1
    f296:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f29a:	429a      	cmp	r2, r3
    f29c:	d002      	beq.n	f2a4 <Ftm_Pwm_Ip_InitChannel+0xa8>
        {
            DevAssert(FALSE);
    f29e:	2000      	movs	r0, #0
    f2a0:	f7f1 fb24 	bl	8ec <DevAssert>
        {
            /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
        }
    }

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f2a4:	9b00      	ldr	r3, [sp, #0]
    f2a6:	685b      	ldr	r3, [r3, #4]
    f2a8:	2b22      	cmp	r3, #34	; 0x22
    f2aa:	d00b      	beq.n	f2c4 <Ftm_Pwm_Ip_InitChannel+0xc8>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f2ac:	9b00      	ldr	r3, [sp, #0]
    f2ae:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f2b0:	2b62      	cmp	r3, #98	; 0x62
    f2b2:	d007      	beq.n	f2c4 <Ftm_Pwm_Ip_InitChannel+0xc8>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode) ||
    f2b4:	9b00      	ldr	r3, [sp, #0]
    f2b6:	685b      	ldr	r3, [r3, #4]
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f2b8:	2b61      	cmp	r3, #97	; 0x61
    f2ba:	d003      	beq.n	f2c4 <Ftm_Pwm_Ip_InitChannel+0xc8>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    f2bc:	9b00      	ldr	r3, [sp, #0]
    f2be:	685b      	ldr	r3, [r3, #4]
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode) ||
    f2c0:	2b21      	cmp	r3, #33	; 0x21
    f2c2:	d114      	bne.n	f2ee <Ftm_Pwm_Ip_InitChannel+0xf2>

    {
        DevAssert(NULL_PTR != UserChCfg->PairCfg);
    f2c4:	9b00      	ldr	r3, [sp, #0]
    f2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f2c8:	2b00      	cmp	r3, #0
    f2ca:	bf14      	ite	ne
    f2cc:	2301      	movne	r3, #1
    f2ce:	2300      	moveq	r3, #0
    f2d0:	b2db      	uxtb	r3, r3
    f2d2:	4618      	mov	r0, r3
    f2d4:	f7f1 fb0a 	bl	8ec <DevAssert>
        Ftm_Pwm_Ip_aChannelState[Instance][ChannelId + 1U] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f2d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f2dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f2e0:	3301      	adds	r3, #1
    f2e2:	4947      	ldr	r1, [pc, #284]	; (f400 <Ftm_Pwm_Ip_InitChannel+0x204>)
    f2e4:	00d2      	lsls	r2, r2, #3
    f2e6:	4413      	add	r3, r2
    f2e8:	2201      	movs	r2, #1
    f2ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    f2ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f2f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f2f6:	9900      	ldr	r1, [sp, #0]
    f2f8:	8b48      	ldrh	r0, [r1, #26]
    f2fa:	4942      	ldr	r1, [pc, #264]	; (f404 <Ftm_Pwm_Ip_InitChannel+0x208>)
    f2fc:	00d2      	lsls	r2, r2, #3
    f2fe:	4413      	add	r3, r2
    f300:	4602      	mov	r2, r0
    f302:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    f306:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f30a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f30e:	9a00      	ldr	r2, [sp, #0]
    f310:	69d2      	ldr	r2, [r2, #28]
    f312:	483d      	ldr	r0, [pc, #244]	; (f408 <Ftm_Pwm_Ip_InitChannel+0x20c>)
    f314:	00c9      	lsls	r1, r1, #3
    f316:	440b      	add	r3, r1
    f318:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    f31c:	9b00      	ldr	r3, [sp, #0]
    f31e:	6a1a      	ldr	r2, [r3, #32]
    f320:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f324:	4619      	mov	r1, r3
    f326:	9803      	ldr	r0, [sp, #12]
    f328:	f7fe fc94 	bl	dc54 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    f32c:	9b00      	ldr	r3, [sp, #0]
    f32e:	69da      	ldr	r2, [r3, #28]
    f330:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f334:	4619      	mov	r1, r3
    f336:	9803      	ldr	r0, [sp, #12]
    f338:	f7fe fad9 	bl	d8ee <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    f33c:	9b00      	ldr	r3, [sp, #0]
    f33e:	685a      	ldr	r2, [r3, #4]
    f340:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f344:	4619      	mov	r1, r3
    f346:	9803      	ldr	r0, [sp, #12]
    f348:	f7fe f90a 	bl	d560 <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    f34c:	9b00      	ldr	r3, [sp, #0]
    f34e:	685a      	ldr	r2, [r3, #4]
    f350:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f354:	4619      	mov	r1, r3
    f356:	9803      	ldr	r0, [sp, #12]
    f358:	f7fe f939 	bl	d5ce <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    f35c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f360:	9900      	ldr	r1, [sp, #0]
    f362:	4618      	mov	r0, r3
    f364:	f7ff fe9a 	bl	f09c <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    f368:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f36c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f370:	4924      	ldr	r1, [pc, #144]	; (f404 <Ftm_Pwm_Ip_InitChannel+0x208>)
    f372:	00d2      	lsls	r2, r2, #3
    f374:	4413      	add	r3, r2
    f376:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    f37a:	f89d 100b 	ldrb.w	r1, [sp, #11]
    f37e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f382:	2301      	movs	r3, #1
    f384:	f000 f9f2 	bl	f76c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    f388:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f38c:	9900      	ldr	r1, [sp, #0]
    f38e:	4618      	mov	r0, r3
    f390:	f7ff fefe 	bl	f190 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    f394:	9b00      	ldr	r3, [sp, #0]
    f396:	7d1b      	ldrb	r3, [r3, #20]
    f398:	2b00      	cmp	r3, #0
    f39a:	d005      	beq.n	f3a8 <Ftm_Pwm_Ip_InitChannel+0x1ac>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    f39c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f3a0:	4619      	mov	r1, r3
    f3a2:	9803      	ldr	r0, [sp, #12]
    f3a4:	f7fe f87e 	bl	d4a4 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f3a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f3ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f3b0:	4913      	ldr	r1, [pc, #76]	; (f400 <Ftm_Pwm_Ip_InitChannel+0x204>)
    f3b2:	00d2      	lsls	r2, r2, #3
    f3b4:	4413      	add	r3, r2
    f3b6:	2201      	movs	r2, #1
    f3b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    f3bc:	9b00      	ldr	r3, [sp, #0]
    f3be:	7a1b      	ldrb	r3, [r3, #8]
    f3c0:	2b00      	cmp	r3, #0
    f3c2:	d016      	beq.n	f3f2 <Ftm_Pwm_Ip_InitChannel+0x1f6>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    f3c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f3c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f3cc:	9a00      	ldr	r2, [sp, #0]
    f3ce:	68d2      	ldr	r2, [r2, #12]
    f3d0:	480e      	ldr	r0, [pc, #56]	; (f40c <Ftm_Pwm_Ip_InitChannel+0x210>)
    f3d2:	00c9      	lsls	r1, r1, #3
    f3d4:	440b      	add	r3, r1
    f3d6:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    f3da:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f3de:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f3e2:	9a00      	ldr	r2, [sp, #0]
    f3e4:	6912      	ldr	r2, [r2, #16]
    f3e6:	4809      	ldr	r0, [pc, #36]	; (f40c <Ftm_Pwm_Ip_InitChannel+0x210>)
    f3e8:	00c9      	lsls	r1, r1, #3
    f3ea:	440b      	add	r3, r1
    f3ec:	00db      	lsls	r3, r3, #3
    f3ee:	4403      	add	r3, r0
    f3f0:	605a      	str	r2, [r3, #4]
    }

}
    f3f2:	bf00      	nop
    f3f4:	b005      	add	sp, #20
    f3f6:	f85d fb04 	ldr.w	pc, [sp], #4
    f3fa:	bf00      	nop
    f3fc:	000197f0 	.word	0x000197f0
    f400:	1fff9004 	.word	0x1fff9004
    f404:	1fff8e34 	.word	0x1fff8e34
    f408:	1fff90a4 	.word	0x1fff90a4
    f40c:	1fff8ed4 	.word	0x1fff8ed4

0000f410 <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    f410:	b500      	push	{lr}
    f412:	b085      	sub	sp, #20
    f414:	4603      	mov	r3, r0
    f416:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f41a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f41e:	4a1c      	ldr	r2, [pc, #112]	; (f490 <Ftm_Pwm_Ip_DeInitInstance+0x80>)
    f420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f424:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f426:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f42a:	2b03      	cmp	r3, #3
    f42c:	bf94      	ite	ls
    f42e:	2301      	movls	r3, #1
    f430:	2300      	movhi	r3, #0
    f432:	b2db      	uxtb	r3, r3
    f434:	4618      	mov	r0, r3
    f436:	f7f1 fa59 	bl	8ec <DevAssert>
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    f43a:	2100      	movs	r1, #0
    f43c:	9803      	ldr	r0, [sp, #12]
    f43e:	f7fd ffda 	bl	d3f6 <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    f442:	2100      	movs	r1, #0
    f444:	9803      	ldr	r0, [sp, #12]
    f446:	f7fe fbbf 	bl	dbc8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    f44a:	2101      	movs	r1, #1
    f44c:	9803      	ldr	r0, [sp, #12]
    f44e:	f7fe fb9d 	bl	db8c <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    f452:	2100      	movs	r1, #0
    f454:	9803      	ldr	r0, [sp, #12]
    f456:	f7fe fb86 	bl	db66 <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    f45a:	2100      	movs	r1, #0
    f45c:	9803      	ldr	r0, [sp, #12]
    f45e:	f7fe fc45 	bl	dcec <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    f462:	2100      	movs	r1, #0
    f464:	9803      	ldr	r0, [sp, #12]
    f466:	f7fd fffb 	bl	d460 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    f46a:	2100      	movs	r1, #0
    f46c:	9803      	ldr	r0, [sp, #12]
    f46e:	f7fe f83c 	bl	d4ea <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    f472:	2100      	movs	r1, #0
    f474:	9803      	ldr	r0, [sp, #12]
    f476:	f7fe f827 	bl	d4c8 <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    f47a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f47e:	4a05      	ldr	r2, [pc, #20]	; (f494 <Ftm_Pwm_Ip_DeInitInstance+0x84>)
    f480:	2100      	movs	r1, #0
    f482:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    f486:	bf00      	nop
    f488:	b005      	add	sp, #20
    f48a:	f85d fb04 	ldr.w	pc, [sp], #4
    f48e:	bf00      	nop
    f490:	000197f0 	.word	0x000197f0
    f494:	1fff8ff4 	.word	0x1fff8ff4

0000f498 <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    f498:	b500      	push	{lr}
    f49a:	b085      	sub	sp, #20
    f49c:	4603      	mov	r3, r0
    f49e:	460a      	mov	r2, r1
    f4a0:	f88d 3007 	strb.w	r3, [sp, #7]
    f4a4:	4613      	mov	r3, r2
    f4a6:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f4aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4ae:	4a2e      	ldr	r2, [pc, #184]	; (f568 <Ftm_Pwm_Ip_DeInitChannel+0xd0>)
    f4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4b4:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    f4b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f4ba:	085b      	lsrs	r3, r3, #1
    f4bc:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f4c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4c4:	2b03      	cmp	r3, #3
    f4c6:	bf94      	ite	ls
    f4c8:	2301      	movls	r3, #1
    f4ca:	2300      	movhi	r3, #0
    f4cc:	b2db      	uxtb	r3, r3
    f4ce:	4618      	mov	r0, r3
    f4d0:	f7f1 fa0c 	bl	8ec <DevAssert>
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    f4d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    f4d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4dc:	4611      	mov	r1, r2
    f4de:	4618      	mov	r0, r3
    f4e0:	f7ff fae2 	bl	eaa8 <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    f4e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f4e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f4ec:	491f      	ldr	r1, [pc, #124]	; (f56c <Ftm_Pwm_Ip_DeInitChannel+0xd4>)
    f4ee:	00d2      	lsls	r2, r2, #3
    f4f0:	4413      	add	r3, r2
    f4f2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    f4f6:	f89d 1006 	ldrb.w	r1, [sp, #6]
    f4fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f4fe:	2301      	movs	r3, #1
    f500:	f000 fa92 	bl	fa28 <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    f504:	2100      	movs	r1, #0
    f506:	9803      	ldr	r0, [sp, #12]
    f508:	f7fe f9db 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    f50c:	2101      	movs	r1, #1
    f50e:	9803      	ldr	r0, [sp, #12]
    f510:	f7fe f99c 	bl	d84c <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    f514:	2101      	movs	r1, #1
    f516:	9803      	ldr	r0, [sp, #12]
    f518:	f7fe fcb7 	bl	de8a <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    f51c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f520:	2200      	movs	r2, #0
    f522:	4619      	mov	r1, r3
    f524:	9803      	ldr	r0, [sp, #12]
    f526:	f7fe fa04 	bl	d932 <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    f52a:	2101      	movs	r1, #1
    f52c:	9803      	ldr	r0, [sp, #12]
    f52e:	f7fe f9c8 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    f532:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f536:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f53a:	005b      	lsls	r3, r3, #1
    f53c:	490c      	ldr	r1, [pc, #48]	; (f570 <Ftm_Pwm_Ip_DeInitChannel+0xd8>)
    f53e:	00d2      	lsls	r2, r2, #3
    f540:	440a      	add	r2, r1
    f542:	4413      	add	r3, r2
    f544:	2200      	movs	r2, #0
    f546:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    f548:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f54c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f550:	005b      	lsls	r3, r3, #1
    f552:	3301      	adds	r3, #1
    f554:	4906      	ldr	r1, [pc, #24]	; (f570 <Ftm_Pwm_Ip_DeInitChannel+0xd8>)
    f556:	00d2      	lsls	r2, r2, #3
    f558:	440a      	add	r2, r1
    f55a:	4413      	add	r3, r2
    f55c:	2200      	movs	r2, #0
    f55e:	701a      	strb	r2, [r3, #0]

}
    f560:	bf00      	nop
    f562:	b005      	add	sp, #20
    f564:	f85d fb04 	ldr.w	pc, [sp], #4
    f568:	000197f0 	.word	0x000197f0
    f56c:	1fff90a4 	.word	0x1fff90a4
    f570:	1fff9084 	.word	0x1fff9084

0000f574 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    f574:	b500      	push	{lr}
    f576:	b085      	sub	sp, #20
    f578:	4603      	mov	r3, r0
    f57a:	9100      	str	r1, [sp, #0]
    f57c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f580:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f584:	4a15      	ldr	r2, [pc, #84]	; (f5dc <Ftm_Pwm_Ip_InitChFault+0x68>)
    f586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f58a:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    f58c:	9b00      	ldr	r3, [sp, #0]
    f58e:	7819      	ldrb	r1, [r3, #0]
    f590:	9b00      	ldr	r3, [sp, #0]
    f592:	685b      	ldr	r3, [r3, #4]
    f594:	461a      	mov	r2, r3
    f596:	9803      	ldr	r0, [sp, #12]
    f598:	f7ff f890 	bl	e6bc <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    f59c:	9b00      	ldr	r3, [sp, #0]
    f59e:	7819      	ldrb	r1, [r3, #0]
    f5a0:	9b00      	ldr	r3, [sp, #0]
    f5a2:	7a1b      	ldrb	r3, [r3, #8]
    f5a4:	461a      	mov	r2, r3
    f5a6:	9803      	ldr	r0, [sp, #12]
    f5a8:	f7ff f8cf 	bl	e74a <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    f5ac:	9b00      	ldr	r3, [sp, #0]
    f5ae:	781b      	ldrb	r3, [r3, #0]
    f5b0:	2201      	movs	r2, #1
    f5b2:	4619      	mov	r1, r3
    f5b4:	9803      	ldr	r0, [sp, #12]
    f5b6:	f7ff f8a4 	bl	e702 <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    f5ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5be:	9a00      	ldr	r2, [sp, #0]
    f5c0:	7812      	ldrb	r2, [r2, #0]
    f5c2:	4610      	mov	r0, r2
    f5c4:	9a00      	ldr	r2, [sp, #0]
    f5c6:	68d2      	ldr	r2, [r2, #12]
    f5c8:	4905      	ldr	r1, [pc, #20]	; (f5e0 <Ftm_Pwm_Ip_InitChFault+0x6c>)
    f5ca:	009b      	lsls	r3, r3, #2
    f5cc:	4403      	add	r3, r0
    f5ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f5d2:	bf00      	nop
    f5d4:	b005      	add	sp, #20
    f5d6:	f85d fb04 	ldr.w	pc, [sp], #4
    f5da:	bf00      	nop
    f5dc:	000197f0 	.word	0x000197f0
    f5e0:	1fff8e94 	.word	0x1fff8e94

0000f5e4 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    f5e4:	b500      	push	{lr}
    f5e6:	b085      	sub	sp, #20
    f5e8:	4603      	mov	r3, r0
    f5ea:	9100      	str	r1, [sp, #0]
    f5ec:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    f5f0:	2300      	movs	r3, #0
    f5f2:	f88d 300f 	strb.w	r3, [sp, #15]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f5f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5fa:	2b03      	cmp	r3, #3
    f5fc:	bf94      	ite	ls
    f5fe:	2301      	movls	r3, #1
    f600:	2300      	movhi	r3, #0
    f602:	b2db      	uxtb	r3, r3
    f604:	4618      	mov	r0, r3
    f606:	f7f1 f971 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserCfg);
    f60a:	9b00      	ldr	r3, [sp, #0]
    f60c:	2b00      	cmp	r3, #0
    f60e:	bf14      	ite	ne
    f610:	2301      	movne	r3, #1
    f612:	2300      	moveq	r3, #0
    f614:	b2db      	uxtb	r3, r3
    f616:	4618      	mov	r0, r3
    f618:	f7f1 f968 	bl	8ec <DevAssert>
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    f61c:	4b29      	ldr	r3, [pc, #164]	; (f6c4 <Ftm_Pwm_Ip_Init+0xe0>)
    f61e:	2200      	movs	r2, #0
    f620:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    f622:	9b00      	ldr	r3, [sp, #0]
    f624:	681a      	ldr	r2, [r3, #0]
    f626:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f62a:	4611      	mov	r1, r2
    f62c:	4618      	mov	r0, r3
    f62e:	f7ff fc39 	bl	eea4 <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    f632:	2300      	movs	r3, #0
    f634:	f88d 300f 	strb.w	r3, [sp, #15]
    f638:	e011      	b.n	f65e <Ftm_Pwm_Ip_Init+0x7a>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    f63a:	9b00      	ldr	r3, [sp, #0]
    f63c:	685a      	ldr	r2, [r3, #4]
    f63e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f642:	009b      	lsls	r3, r3, #2
    f644:	4413      	add	r3, r2
    f646:	681a      	ldr	r2, [r3, #0]
    f648:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f64c:	4611      	mov	r1, r2
    f64e:	4618      	mov	r0, r3
    f650:	f7ff fdd4 	bl	f1fc <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    f654:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f658:	3301      	adds	r3, #1
    f65a:	f88d 300f 	strb.w	r3, [sp, #15]
    f65e:	9b00      	ldr	r3, [sp, #0]
    f660:	7a1b      	ldrb	r3, [r3, #8]
    f662:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f666:	429a      	cmp	r2, r3
    f668:	d3e7      	bcc.n	f63a <Ftm_Pwm_Ip_Init+0x56>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    f66a:	9b00      	ldr	r3, [sp, #0]
    f66c:	7c1b      	ldrb	r3, [r3, #16]
    f66e:	2b00      	cmp	r3, #0
    f670:	d01b      	beq.n	f6aa <Ftm_Pwm_Ip_Init+0xc6>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    f672:	2300      	movs	r3, #0
    f674:	f88d 300f 	strb.w	r3, [sp, #15]
    f678:	e011      	b.n	f69e <Ftm_Pwm_Ip_Init+0xba>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    f67a:	9b00      	ldr	r3, [sp, #0]
    f67c:	68da      	ldr	r2, [r3, #12]
    f67e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f682:	009b      	lsls	r3, r3, #2
    f684:	4413      	add	r3, r2
    f686:	681a      	ldr	r2, [r3, #0]
    f688:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f68c:	4611      	mov	r1, r2
    f68e:	4618      	mov	r0, r3
    f690:	f7ff ff70 	bl	f574 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    f694:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f698:	3301      	adds	r3, #1
    f69a:	f88d 300f 	strb.w	r3, [sp, #15]
    f69e:	9b00      	ldr	r3, [sp, #0]
    f6a0:	7c1b      	ldrb	r3, [r3, #16]
    f6a2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f6a6:	429a      	cmp	r2, r3
    f6a8:	d3e7      	bcc.n	f67a <Ftm_Pwm_Ip_Init+0x96>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    f6aa:	9b00      	ldr	r3, [sp, #0]
    f6ac:	681a      	ldr	r2, [r3, #0]
    f6ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f6b2:	4611      	mov	r1, r2
    f6b4:	4618      	mov	r0, r3
    f6b6:	f7ff fc9d 	bl	eff4 <Ftm_Pwm_Ip_InitInstanceStart>
}
    f6ba:	bf00      	nop
    f6bc:	b005      	add	sp, #20
    f6be:	f85d fb04 	ldr.w	pc, [sp], #4
    f6c2:	bf00      	nop
    f6c4:	1fff8e28 	.word	0x1fff8e28

0000f6c8 <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    f6c8:	b500      	push	{lr}
    f6ca:	b085      	sub	sp, #20
    f6cc:	4603      	mov	r3, r0
    f6ce:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f6d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f6d6:	4a23      	ldr	r2, [pc, #140]	; (f764 <Ftm_Pwm_Ip_DeInit+0x9c>)
    f6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6dc:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    f6de:	2300      	movs	r3, #0
    f6e0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f6e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f6e8:	2b03      	cmp	r3, #3
    f6ea:	bf94      	ite	ls
    f6ec:	2301      	movls	r3, #1
    f6ee:	2300      	movhi	r3, #0
    f6f0:	b2db      	uxtb	r3, r3
    f6f2:	4618      	mov	r0, r3
    f6f4:	f7f1 f8fa 	bl	8ec <DevAssert>
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    f6f8:	9802      	ldr	r0, [sp, #8]
    f6fa:	f7fe fe87 	bl	e40c <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    f6fe:	2300      	movs	r3, #0
    f700:	f88d 300f 	strb.w	r3, [sp, #15]
    f704:	e021      	b.n	f74a <Ftm_Pwm_Ip_DeInit+0x82>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    f706:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f70a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f70e:	4916      	ldr	r1, [pc, #88]	; (f768 <Ftm_Pwm_Ip_DeInit+0xa0>)
    f710:	00d2      	lsls	r2, r2, #3
    f712:	4413      	add	r3, r2
    f714:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    f718:	2b00      	cmp	r3, #0
    f71a:	d011      	beq.n	f740 <Ftm_Pwm_Ip_DeInit+0x78>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    f71c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f720:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f724:	4611      	mov	r1, r2
    f726:	4618      	mov	r0, r3
    f728:	f7ff feb6 	bl	f498 <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    f72c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f730:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f734:	490c      	ldr	r1, [pc, #48]	; (f768 <Ftm_Pwm_Ip_DeInit+0xa0>)
    f736:	00d2      	lsls	r2, r2, #3
    f738:	4413      	add	r3, r2
    f73a:	2200      	movs	r2, #0
    f73c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    f740:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f744:	3301      	adds	r3, #1
    f746:	f88d 300f 	strb.w	r3, [sp, #15]
    f74a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f74e:	2b07      	cmp	r3, #7
    f750:	d9d9      	bls.n	f706 <Ftm_Pwm_Ip_DeInit+0x3e>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    f752:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f756:	4618      	mov	r0, r3
    f758:	f7ff fe5a 	bl	f410 <Ftm_Pwm_Ip_DeInitInstance>
}
    f75c:	bf00      	nop
    f75e:	b005      	add	sp, #20
    f760:	f85d fb04 	ldr.w	pc, [sp], #4
    f764:	000197f0 	.word	0x000197f0
    f768:	1fff9004 	.word	0x1fff9004

0000f76c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    f76c:	b510      	push	{r4, lr}
    f76e:	b088      	sub	sp, #32
    f770:	4604      	mov	r4, r0
    f772:	4608      	mov	r0, r1
    f774:	4611      	mov	r1, r2
    f776:	461a      	mov	r2, r3
    f778:	4623      	mov	r3, r4
    f77a:	f88d 300f 	strb.w	r3, [sp, #15]
    f77e:	4603      	mov	r3, r0
    f780:	f88d 300e 	strb.w	r3, [sp, #14]
    f784:	460b      	mov	r3, r1
    f786:	f8ad 300c 	strh.w	r3, [sp, #12]
    f78a:	4613      	mov	r3, r2
    f78c:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f790:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f794:	4a5e      	ldr	r2, [pc, #376]	; (f910 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1a4>)
    f796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f79a:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    f79c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    f7a0:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    f7a4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f7a8:	085b      	lsrs	r3, r3, #1
    f7aa:	f88d 3019 	strb.w	r3, [sp, #25]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f7ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f7b2:	2b03      	cmp	r3, #3
    f7b4:	bf94      	ite	ls
    f7b6:	2301      	movls	r3, #1
    f7b8:	2300      	movhi	r3, #0
    f7ba:	b2db      	uxtb	r3, r3
    f7bc:	4618      	mov	r0, r3
    f7be:	f7f1 f895 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    f7c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f7c6:	2b07      	cmp	r3, #7
    f7c8:	bf94      	ite	ls
    f7ca:	2301      	movls	r3, #1
    f7cc:	2300      	movhi	r3, #0
    f7ce:	b2db      	uxtb	r3, r3
    f7d0:	4618      	mov	r0, r3
    f7d2:	f7f1 f88b 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    f7d6:	f007 f86b 	bl	168b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    f7da:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f7de:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f7e2:	494c      	ldr	r1, [pc, #304]	; (f914 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1a8>)
    f7e4:	00d2      	lsls	r2, r2, #3
    f7e6:	4413      	add	r3, r2
    f7e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    f7ec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    f7f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f7f4:	4619      	mov	r1, r3
    f7f6:	9807      	ldr	r0, [sp, #28]
    f7f8:	f7fe fd18 	bl	e22c <Ftm_Pwm_Ip_GetChannelMode>
    f7fc:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    f7fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f802:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f806:	4944      	ldr	r1, [pc, #272]	; (f918 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1ac>)
    f808:	00d2      	lsls	r2, r2, #3
    f80a:	4413      	add	r3, r2
    f80c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    f810:	2b02      	cmp	r3, #2
    f812:	d111      	bne.n	f838 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xcc>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f814:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f818:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f81c:	493e      	ldr	r1, [pc, #248]	; (f918 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1ac>)
    f81e:	00d2      	lsls	r2, r2, #3
    f820:	4413      	add	r3, r2
    f822:	2201      	movs	r2, #1
    f824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    f828:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f82c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f830:	2300      	movs	r3, #0
    f832:	2200      	movs	r2, #0
    f834:	f000 f8f8 	bl	fa28 <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    f838:	9b05      	ldr	r3, [sp, #20]
    f83a:	2b0a      	cmp	r3, #10
    f83c:	d008      	beq.n	f850 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
    f83e:	9b05      	ldr	r3, [sp, #20]
    f840:	2b09      	cmp	r3, #9
    f842:	d005      	beq.n	f850 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    f844:	9b05      	ldr	r3, [sp, #20]
    f846:	2b12      	cmp	r3, #18
    f848:	d002      	beq.n	f850 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    f84a:	9b05      	ldr	r3, [sp, #20]
    f84c:	2b11      	cmp	r3, #17
    f84e:	d10c      	bne.n	f86a <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xfe>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    f850:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    f854:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f858:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f85c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f860:	9300      	str	r3, [sp, #0]
    f862:	2300      	movs	r3, #0
    f864:	f000 f9ba 	bl	fbdc <Ftm_Pwm_Ip_UpdatePwmChannel>
    f868:	e04c      	b.n	f904 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    f86a:	9b05      	ldr	r3, [sp, #20]
    f86c:	2b22      	cmp	r3, #34	; 0x22
    f86e:	d008      	beq.n	f882 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
    f870:	9b05      	ldr	r3, [sp, #20]
    f872:	2b62      	cmp	r3, #98	; 0x62
    f874:	d005      	beq.n	f882 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    f876:	9b05      	ldr	r3, [sp, #20]
    f878:	2b61      	cmp	r3, #97	; 0x61
    f87a:	d002      	beq.n	f882 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    f87c:	9b05      	ldr	r3, [sp, #20]
    f87e:	2b21      	cmp	r3, #33	; 0x21
    f880:	d140      	bne.n	f904 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    f882:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f886:	f89d 3019 	ldrb.w	r3, [sp, #25]
    f88a:	4924      	ldr	r1, [pc, #144]	; (f91c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    f88c:	0092      	lsls	r2, r2, #2
    f88e:	4413      	add	r3, r2
    f890:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    f894:	2b00      	cmp	r3, #0
    f896:	d10d      	bne.n	f8b4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x148>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    f898:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    f89c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f8a0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f8a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f8a8:	9300      	str	r3, [sp, #0]
    f8aa:	4613      	mov	r3, r2
    f8ac:	2200      	movs	r2, #0
    f8ae:	f000 f995 	bl	fbdc <Ftm_Pwm_Ip_UpdatePwmChannel>
    f8b2:	e027      	b.n	f904 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    f8b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f8b8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    f8bc:	4917      	ldr	r1, [pc, #92]	; (f91c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    f8be:	0092      	lsls	r2, r2, #2
    f8c0:	4413      	add	r3, r2
    f8c2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    f8c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    f8ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f8ce:	4618      	mov	r0, r3
    f8d0:	f7fe fff6 	bl	e8c0 <Ftm_Pwm_Ip_CalculatePhaseShift>
    f8d4:	4603      	mov	r3, r0
    f8d6:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    f8da:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f8de:	f89d 3019 	ldrb.w	r3, [sp, #25]
    f8e2:	490e      	ldr	r1, [pc, #56]	; (f91c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    f8e4:	0092      	lsls	r2, r2, #2
    f8e6:	4413      	add	r3, r2
    f8e8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    f8ec:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    f8f0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f8f4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f8f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f8fc:	9300      	str	r3, [sp, #0]
    f8fe:	4623      	mov	r3, r4
    f900:	f000 f96c 	bl	fbdc <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    f904:	f007 f800 	bl	16908 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    f908:	bf00      	nop
    f90a:	b008      	add	sp, #32
    f90c:	bd10      	pop	{r4, pc}
    f90e:	bf00      	nop
    f910:	000197f0 	.word	0x000197f0
    f914:	1fff8e34 	.word	0x1fff8e34
    f918:	1fff9004 	.word	0x1fff9004
    f91c:	1fff8e74 	.word	0x1fff8e74

0000f920 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    f920:	b510      	push	{r4, lr}
    f922:	b084      	sub	sp, #16
    f924:	4604      	mov	r4, r0
    f926:	4608      	mov	r0, r1
    f928:	4611      	mov	r1, r2
    f92a:	461a      	mov	r2, r3
    f92c:	4623      	mov	r3, r4
    f92e:	f88d 3007 	strb.w	r3, [sp, #7]
    f932:	4603      	mov	r3, r0
    f934:	f88d 3006 	strb.w	r3, [sp, #6]
    f938:	460b      	mov	r3, r1
    f93a:	f8ad 3004 	strh.w	r3, [sp, #4]
    f93e:	4613      	mov	r3, r2
    f940:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    f944:	2300      	movs	r3, #0
    f946:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f94a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f94e:	4a33      	ldr	r2, [pc, #204]	; (fa1c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xfc>)
    f950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f954:	9302      	str	r3, [sp, #8]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f956:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f95a:	2b03      	cmp	r3, #3
    f95c:	bf94      	ite	ls
    f95e:	2301      	movls	r3, #1
    f960:	2300      	movhi	r3, #0
    f962:	b2db      	uxtb	r3, r3
    f964:	4618      	mov	r0, r3
    f966:	f7f0 ffc1 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    f96a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f96e:	2b07      	cmp	r3, #7
    f970:	bf94      	ite	ls
    f972:	2301      	movls	r3, #1
    f974:	2300      	movhi	r3, #0
    f976:	b2db      	uxtb	r3, r3
    f978:	4618      	mov	r0, r3
    f97a:	f7f0 ffb7 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    f97e:	f006 ffe9 	bl	16954 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    f982:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f986:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f98a:	4925      	ldr	r1, [pc, #148]	; (fa20 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x100>)
    f98c:	00d2      	lsls	r2, r2, #3
    f98e:	4413      	add	r3, r2
    f990:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    f994:	2b02      	cmp	r3, #2
    f996:	d111      	bne.n	f9bc <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x9c>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f998:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f99c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f9a0:	491f      	ldr	r1, [pc, #124]	; (fa20 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x100>)
    f9a2:	00d2      	lsls	r2, r2, #3
    f9a4:	4413      	add	r3, r2
    f9a6:	2201      	movs	r2, #1
    f9a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    f9ac:	f89d 1006 	ldrb.w	r1, [sp, #6]
    f9b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f9b4:	2300      	movs	r3, #0
    f9b6:	2200      	movs	r2, #0
    f9b8:	f000 f836 	bl	fa28 <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    f9bc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f9c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f9c4:	2200      	movs	r2, #0
    f9c6:	4618      	mov	r0, r3
    f9c8:	f000 f9b0 	bl	fd2c <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    f9cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f9d0:	4914      	ldr	r1, [pc, #80]	; (fa24 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x104>)
    f9d2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f9d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    f9da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    f9de:	2b00      	cmp	r3, #0
    f9e0:	d103      	bne.n	f9ea <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xca>
    {
        TempDutyCycle = (uint16)0U;
    f9e2:	2300      	movs	r3, #0
    f9e4:	f8ad 300e 	strh.w	r3, [sp, #14]
    f9e8:	e003      	b.n	f9f2 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd2>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    f9ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    f9ee:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    f9f2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    f9f6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    f9fa:	f89d 1006 	ldrb.w	r1, [sp, #6]
    f9fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
    fa02:	f7ff feb3 	bl	f76c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    fa06:	f89d 3018 	ldrb.w	r3, [sp, #24]
    fa0a:	4619      	mov	r1, r3
    fa0c:	9802      	ldr	r0, [sp, #8]
    fa0e:	f7fd ff58 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    fa12:	f006 ffcb 	bl	169ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    fa16:	bf00      	nop
    fa18:	b004      	add	sp, #16
    fa1a:	bd10      	pop	{r4, pc}
    fa1c:	000197f0 	.word	0x000197f0
    fa20:	1fff9004 	.word	0x1fff9004
    fa24:	1fff8e2c 	.word	0x1fff8e2c

0000fa28 <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    fa28:	b500      	push	{lr}
    fa2a:	b089      	sub	sp, #36	; 0x24
    fa2c:	9200      	str	r2, [sp, #0]
    fa2e:	461a      	mov	r2, r3
    fa30:	4603      	mov	r3, r0
    fa32:	f88d 3007 	strb.w	r3, [sp, #7]
    fa36:	460b      	mov	r3, r1
    fa38:	f88d 3006 	strb.w	r3, [sp, #6]
    fa3c:	4613      	mov	r3, r2
    fa3e:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fa42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fa46:	4a62      	ldr	r2, [pc, #392]	; (fbd0 <Ftm_Pwm_Ip_SwOutputControl+0x1a8>)
    fa48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa4c:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    fa4e:	2300      	movs	r3, #0
    fa50:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    fa54:	2300      	movs	r3, #0
    fa56:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    fa5a:	2300      	movs	r3, #0
    fa5c:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    fa60:	2300      	movs	r3, #0
    fa62:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    fa66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fa6a:	4619      	mov	r1, r3
    fa6c:	9805      	ldr	r0, [sp, #20]
    fa6e:	f7fe fbdd 	bl	e22c <Ftm_Pwm_Ip_GetChannelMode>
    fa72:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    fa74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fa78:	2b03      	cmp	r3, #3
    fa7a:	bf94      	ite	ls
    fa7c:	2301      	movls	r3, #1
    fa7e:	2300      	movhi	r3, #0
    fa80:	b2db      	uxtb	r3, r3
    fa82:	4618      	mov	r0, r3
    fa84:	f7f0 ff32 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    fa88:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fa8c:	2b07      	cmp	r3, #7
    fa8e:	bf94      	ite	ls
    fa90:	2301      	movls	r3, #1
    fa92:	2300      	movhi	r3, #0
    fa94:	b2db      	uxtb	r3, r3
    fa96:	4618      	mov	r0, r3
    fa98:	f7f0 ff28 	bl	8ec <DevAssert>
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    fa9c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    faa0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    faa4:	494b      	ldr	r1, [pc, #300]	; (fbd4 <Ftm_Pwm_Ip_SwOutputControl+0x1ac>)
    faa6:	00d2      	lsls	r2, r2, #3
    faa8:	4413      	add	r3, r2
    faaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    faae:	2b02      	cmp	r3, #2
    fab0:	d109      	bne.n	fac6 <Ftm_Pwm_Ip_SwOutputControl+0x9e>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    fab2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fab6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    faba:	4947      	ldr	r1, [pc, #284]	; (fbd8 <Ftm_Pwm_Ip_SwOutputControl+0x1b0>)
    fabc:	00d2      	lsls	r2, r2, #3
    fabe:	4413      	add	r3, r2
    fac0:	2200      	movs	r2, #0
    fac2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    fac6:	9805      	ldr	r0, [sp, #20]
    fac8:	f7fe fb57 	bl	e17a <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    facc:	4603      	mov	r3, r0
    face:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    fad2:	9b03      	ldr	r3, [sp, #12]
    fad4:	2b22      	cmp	r3, #34	; 0x22
    fad6:	d008      	beq.n	faea <Ftm_Pwm_Ip_SwOutputControl+0xc2>
    fad8:	9b03      	ldr	r3, [sp, #12]
    fada:	2b62      	cmp	r3, #98	; 0x62
    fadc:	d005      	beq.n	faea <Ftm_Pwm_Ip_SwOutputControl+0xc2>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    fade:	9b03      	ldr	r3, [sp, #12]
    fae0:	2b61      	cmp	r3, #97	; 0x61
    fae2:	d002      	beq.n	faea <Ftm_Pwm_Ip_SwOutputControl+0xc2>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    fae4:	9b03      	ldr	r3, [sp, #12]
    fae6:	2b21      	cmp	r3, #33	; 0x21
    fae8:	d103      	bne.n	faf2 <Ftm_Pwm_Ip_SwOutputControl+0xca>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    faea:	2303      	movs	r3, #3
    faec:	f8ad 301c 	strh.w	r3, [sp, #28]
    faf0:	e002      	b.n	faf8 <Ftm_Pwm_Ip_SwOutputControl+0xd0>
    }
    else
    {
        ChannelMask = (uint16)1U;
    faf2:	2301      	movs	r3, #1
    faf4:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    faf8:	9805      	ldr	r0, [sp, #20]
    fafa:	f7fe fb47 	bl	e18c <Ftm_Pwm_Ip_GetPolInstance>
    fafe:	4603      	mov	r3, r0
    fb00:	4619      	mov	r1, r3
    fb02:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fb06:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb0a:	fa02 f303 	lsl.w	r3, r2, r3
    fb0e:	b29b      	uxth	r3, r3
    fb10:	400b      	ands	r3, r1
    fb12:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    fb16:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    fb1a:	021b      	lsls	r3, r3, #8
    fb1c:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    fb20:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fb24:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb28:	3308      	adds	r3, #8
    fb2a:	fa02 f303 	lsl.w	r3, r2, r3
    fb2e:	b29b      	uxth	r3, r3
    fb30:	43db      	mvns	r3, r3
    fb32:	b29a      	uxth	r2, r3
    fb34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fb38:	4013      	ands	r3, r2
    fb3a:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    fb3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    fb42:	2b00      	cmp	r3, #0
    fb44:	d027      	beq.n	fb96 <Ftm_Pwm_Ip_SwOutputControl+0x16e>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    fb46:	9b00      	ldr	r3, [sp, #0]
    fb48:	2b01      	cmp	r3, #1
    fb4a:	d109      	bne.n	fb60 <Ftm_Pwm_Ip_SwOutputControl+0x138>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    fb4c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fb50:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb54:	3308      	adds	r3, #8
    fb56:	fa02 f303 	lsl.w	r3, r2, r3
    fb5a:	f8ad 301a 	strh.w	r3, [sp, #26]
    fb5e:	e002      	b.n	fb66 <Ftm_Pwm_Ip_SwOutputControl+0x13e>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    fb60:	2300      	movs	r3, #0
    fb62:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    fb66:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    fb6a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    fb6e:	4053      	eors	r3, r2
    fb70:	b29a      	uxth	r2, r3
    fb72:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fb76:	4313      	orrs	r3, r2
    fb78:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    fb7c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fb80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb84:	fa02 f303 	lsl.w	r3, r2, r3
    fb88:	b29a      	uxth	r2, r3
    fb8a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fb8e:	4313      	orrs	r3, r2
    fb90:	f8ad 301e 	strh.w	r3, [sp, #30]
    fb94:	e00d      	b.n	fbb2 <Ftm_Pwm_Ip_SwOutputControl+0x18a>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    fb96:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fb9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb9e:	fa02 f303 	lsl.w	r3, r2, r3
    fba2:	b29b      	uxth	r3, r3
    fba4:	43db      	mvns	r3, r3
    fba6:	b29a      	uxth	r2, r3
    fba8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fbac:	4013      	ands	r3, r2
    fbae:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    fbb2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fbb6:	4619      	mov	r1, r3
    fbb8:	9805      	ldr	r0, [sp, #20]
    fbba:	f7fe fa7e 	bl	e0ba <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    fbbe:	2101      	movs	r1, #1
    fbc0:	9805      	ldr	r0, [sp, #20]
    fbc2:	f7fd fe7e 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    fbc6:	bf00      	nop
    fbc8:	b009      	add	sp, #36	; 0x24
    fbca:	f85d fb04 	ldr.w	pc, [sp], #4
    fbce:	bf00      	nop
    fbd0:	000197f0 	.word	0x000197f0
    fbd4:	1fff9004 	.word	0x1fff9004
    fbd8:	1fff8e34 	.word	0x1fff8e34

0000fbdc <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    fbdc:	b510      	push	{r4, lr}
    fbde:	b086      	sub	sp, #24
    fbe0:	4604      	mov	r4, r0
    fbe2:	4608      	mov	r0, r1
    fbe4:	4611      	mov	r1, r2
    fbe6:	461a      	mov	r2, r3
    fbe8:	4623      	mov	r3, r4
    fbea:	f88d 3007 	strb.w	r3, [sp, #7]
    fbee:	4603      	mov	r3, r0
    fbf0:	f88d 3006 	strb.w	r3, [sp, #6]
    fbf4:	460b      	mov	r3, r1
    fbf6:	f8ad 3004 	strh.w	r3, [sp, #4]
    fbfa:	4613      	mov	r3, r2
    fbfc:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fc00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc04:	4a47      	ldr	r2, [pc, #284]	; (fd24 <Ftm_Pwm_Ip_UpdatePwmChannel+0x148>)
    fc06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc0a:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    fc0c:	2300      	movs	r3, #0
    fc0e:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    fc10:	2300      	movs	r3, #0
    fc12:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    fc16:	2300      	movs	r3, #0
    fc18:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    fc1c:	2300      	movs	r3, #0
    fc1e:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    fc22:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc26:	085b      	lsrs	r3, r3, #1
    fc28:	f88d 3009 	strb.w	r3, [sp, #9]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fc2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc30:	2b03      	cmp	r3, #3
    fc32:	bf94      	ite	ls
    fc34:	2301      	movls	r3, #1
    fc36:	2300      	movhi	r3, #0
    fc38:	b2db      	uxtb	r3, r3
    fc3a:	4618      	mov	r0, r3
    fc3c:	f7f0 fe56 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    fc40:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc44:	2b07      	cmp	r3, #7
    fc46:	bf94      	ite	ls
    fc48:	2301      	movls	r3, #1
    fc4a:	2300      	movhi	r3, #0
    fc4c:	b2db      	uxtb	r3, r3
    fc4e:	4618      	mov	r0, r3
    fc50:	f7f0 fe4c 	bl	8ec <DevAssert>
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    fc54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc58:	4a33      	ldr	r2, [pc, #204]	; (fd28 <Ftm_Pwm_Ip_UpdatePwmChannel+0x14c>)
    fc5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    fc5e:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    fc62:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fc66:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    fc6a:	429a      	cmp	r2, r3
    fc6c:	d805      	bhi.n	fc7a <Ftm_Pwm_Ip_UpdatePwmChannel+0x9e>
    fc6e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    fc72:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    fc76:	429a      	cmp	r2, r3
    fc78:	d903      	bls.n	fc82 <Ftm_Pwm_Ip_UpdatePwmChannel+0xa6>
    fc7a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    fc7e:	2b00      	cmp	r3, #0
    fc80:	d108      	bne.n	fc94 <Ftm_Pwm_Ip_UpdatePwmChannel+0xb8>
    {
        HwFirstEdge = FirstEdge;
    fc82:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fc86:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    fc8a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    fc8e:	f8ad 3010 	strh.w	r3, [sp, #16]
    fc92:	e001      	b.n	fc98 <Ftm_Pwm_Ip_UpdatePwmChannel+0xbc>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    fc94:	2301      	movs	r3, #1
    fc96:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    fc98:	9b05      	ldr	r3, [sp, #20]
    fc9a:	2b00      	cmp	r3, #0
    fc9c:	d13e      	bne.n	fd1c <Ftm_Pwm_Ip_UpdatePwmChannel+0x140>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    fc9e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    fca2:	4619      	mov	r1, r3
    fca4:	9803      	ldr	r0, [sp, #12]
    fca6:	f7fd feac 	bl	da02 <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    fcaa:	4603      	mov	r3, r0
    fcac:	2b00      	cmp	r3, #0
    fcae:	d016      	beq.n	fcde <Ftm_Pwm_Ip_UpdatePwmChannel+0x102>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    fcb0:	f89d 3009 	ldrb.w	r3, [sp, #9]
    fcb4:	005b      	lsls	r3, r3, #1
    fcb6:	b2db      	uxtb	r3, r3
    fcb8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    fcbc:	4619      	mov	r1, r3
    fcbe:	9803      	ldr	r0, [sp, #12]
    fcc0:	f7fd fd37 	bl	d732 <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    fcc4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    fcc8:	005b      	lsls	r3, r3, #1
    fcca:	b2db      	uxtb	r3, r3
    fccc:	3301      	adds	r3, #1
    fcce:	b2db      	uxtb	r3, r3
    fcd0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    fcd4:	4619      	mov	r1, r3
    fcd6:	9803      	ldr	r0, [sp, #12]
    fcd8:	f7fd fd2b 	bl	d732 <Ftm_Pwm_Ip_SetChnCountVal>
    fcdc:	e018      	b.n	fd10 <Ftm_Pwm_Ip_UpdatePwmChannel+0x134>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    fcde:	9803      	ldr	r0, [sp, #12]
    fce0:	f7fd fbb0 	bl	d444 <Ftm_Pwm_Ip_GetCpwms>
    fce4:	4603      	mov	r3, r0
    fce6:	2b01      	cmp	r3, #1
    fce8:	d10a      	bne.n	fd00 <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    fcea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    fcee:	085b      	lsrs	r3, r3, #1
    fcf0:	b29a      	uxth	r2, r3
    fcf2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fcf6:	4619      	mov	r1, r3
    fcf8:	9803      	ldr	r0, [sp, #12]
    fcfa:	f7fd fd1a 	bl	d732 <Ftm_Pwm_Ip_SetChnCountVal>
    fcfe:	e007      	b.n	fd10 <Ftm_Pwm_Ip_UpdatePwmChannel+0x134>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    fd00:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    fd04:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd08:	4619      	mov	r1, r3
    fd0a:	9803      	ldr	r0, [sp, #12]
    fd0c:	f7fd fd11 	bl	d732 <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    fd10:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fd14:	4619      	mov	r1, r3
    fd16:	9803      	ldr	r0, [sp, #12]
    fd18:	f7fd fdd3 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    fd1c:	9b05      	ldr	r3, [sp, #20]
}
    fd1e:	4618      	mov	r0, r3
    fd20:	b006      	add	sp, #24
    fd22:	bd10      	pop	{r4, pc}
    fd24:	000197f0 	.word	0x000197f0
    fd28:	1fff8e2c 	.word	0x1fff8e2c

0000fd2c <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    fd2c:	b500      	push	{lr}
    fd2e:	b085      	sub	sp, #20
    fd30:	4603      	mov	r3, r0
    fd32:	9100      	str	r1, [sp, #0]
    fd34:	f88d 3007 	strb.w	r3, [sp, #7]
    fd38:	4613      	mov	r3, r2
    fd3a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fd3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd42:	4a1b      	ldr	r2, [pc, #108]	; (fdb0 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x84>)
    fd44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd48:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    fd4a:	2300      	movs	r3, #0
    fd4c:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fd4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd52:	2b03      	cmp	r3, #3
    fd54:	bf94      	ite	ls
    fd56:	2301      	movls	r3, #1
    fd58:	2300      	movhi	r3, #0
    fd5a:	b2db      	uxtb	r3, r3
    fd5c:	4618      	mov	r0, r3
    fd5e:	f7f0 fdc5 	bl	8ec <DevAssert>
#endif
    FtmPeriod = NewValue;
    fd62:	9b00      	ldr	r3, [sp, #0]
    fd64:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    fd66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd6a:	9a00      	ldr	r2, [sp, #0]
    fd6c:	b291      	uxth	r1, r2
    fd6e:	4a11      	ldr	r2, [pc, #68]	; (fdb4 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x88>)
    fd70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    fd74:	9802      	ldr	r0, [sp, #8]
    fd76:	f7fd fb65 	bl	d444 <Ftm_Pwm_Ip_GetCpwms>
    fd7a:	4603      	mov	r3, r0
    fd7c:	2b01      	cmp	r3, #1
    fd7e:	d103      	bne.n	fd88 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x5c>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    fd80:	9b03      	ldr	r3, [sp, #12]
    fd82:	085b      	lsrs	r3, r3, #1
    fd84:	9303      	str	r3, [sp, #12]
    fd86:	e002      	b.n	fd8e <Ftm_Pwm_Ip_UpdatePwmPeriod+0x62>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    fd88:	9b03      	ldr	r3, [sp, #12]
    fd8a:	3b01      	subs	r3, #1
    fd8c:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    fd8e:	9b03      	ldr	r3, [sp, #12]
    fd90:	b29b      	uxth	r3, r3
    fd92:	4619      	mov	r1, r3
    fd94:	9802      	ldr	r0, [sp, #8]
    fd96:	f7fd fba8 	bl	d4ea <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    fd9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd9e:	4619      	mov	r1, r3
    fda0:	9802      	ldr	r0, [sp, #8]
    fda2:	f7fd fd8e 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    fda6:	2300      	movs	r3, #0
}
    fda8:	4618      	mov	r0, r3
    fdaa:	b005      	add	sp, #20
    fdac:	f85d fb04 	ldr.w	pc, [sp], #4
    fdb0:	000197f0 	.word	0x000197f0
    fdb4:	1fff8e2c 	.word	0x1fff8e2c

0000fdb8 <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    fdb8:	b500      	push	{lr}
    fdba:	b085      	sub	sp, #20
    fdbc:	4603      	mov	r3, r0
    fdbe:	460a      	mov	r2, r1
    fdc0:	f88d 3007 	strb.w	r3, [sp, #7]
    fdc4:	4613      	mov	r3, r2
    fdc6:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fdca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fdce:	4a17      	ldr	r2, [pc, #92]	; (fe2c <Ftm_Pwm_Ip_GetOutputState+0x74>)
    fdd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdd4:	9302      	str	r3, [sp, #8]
    Ftm_Pwm_Ip_OutputStateType OutputValue;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fdd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fdda:	2b03      	cmp	r3, #3
    fddc:	bf94      	ite	ls
    fdde:	2301      	movls	r3, #1
    fde0:	2300      	movhi	r3, #0
    fde2:	b2db      	uxtb	r3, r3
    fde4:	4618      	mov	r0, r3
    fde6:	f7f0 fd81 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    fdea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fdee:	2b07      	cmp	r3, #7
    fdf0:	bf94      	ite	ls
    fdf2:	2301      	movls	r3, #1
    fdf4:	2300      	movhi	r3, #0
    fdf6:	b2db      	uxtb	r3, r3
    fdf8:	4618      	mov	r0, r3
    fdfa:	f7f0 fd77 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    fdfe:	f006 fe4d 	bl	16a9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    fe02:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fe06:	4619      	mov	r1, r3
    fe08:	9802      	ldr	r0, [sp, #8]
    fe0a:	f7fd fc7c 	bl	d706 <Ftm_Pwm_Ip_GetChOutputValue>
    fe0e:	4603      	mov	r3, r0
    fe10:	2b00      	cmp	r3, #0
    fe12:	d002      	beq.n	fe1a <Ftm_Pwm_Ip_GetOutputState+0x62>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    fe14:	2301      	movs	r3, #1
    fe16:	9303      	str	r3, [sp, #12]
    fe18:	e001      	b.n	fe1e <Ftm_Pwm_Ip_GetOutputState+0x66>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    fe1a:	2300      	movs	r3, #0
    fe1c:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    fe1e:	f006 fe69 	bl	16af4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    fe22:	9b03      	ldr	r3, [sp, #12]
}
    fe24:	4618      	mov	r0, r3
    fe26:	b005      	add	sp, #20
    fe28:	f85d fb04 	ldr.w	pc, [sp], #4
    fe2c:	000197f0 	.word	0x000197f0

0000fe30 <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    fe30:	b500      	push	{lr}
    fe32:	b087      	sub	sp, #28
    fe34:	4603      	mov	r3, r0
    fe36:	9100      	str	r1, [sp, #0]
    fe38:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fe3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe40:	4a47      	ldr	r2, [pc, #284]	; (ff60 <Ftm_Pwm_Ip_DisableNotification+0x130>)
    fe42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe46:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    fe48:	9b00      	ldr	r3, [sp, #0]
    fe4a:	f88d 3013 	strb.w	r3, [sp, #19]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fe4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe52:	2b03      	cmp	r3, #3
    fe54:	bf94      	ite	ls
    fe56:	2301      	movls	r3, #1
    fe58:	2300      	movhi	r3, #0
    fe5a:	b2db      	uxtb	r3, r3
    fe5c:	4618      	mov	r0, r3
    fe5e:	f7f0 fd45 	bl	8ec <DevAssert>
    if((FTM_PWM_IP_OVERFLOW_NOTIFICATION     != NotifType)  &&
    fe62:	9b00      	ldr	r3, [sp, #0]
    fe64:	2b08      	cmp	r3, #8
    fe66:	d00f      	beq.n	fe88 <Ftm_Pwm_Ip_DisableNotification+0x58>
    fe68:	9b00      	ldr	r3, [sp, #0]
    fe6a:	2b09      	cmp	r3, #9
    fe6c:	d00c      	beq.n	fe88 <Ftm_Pwm_Ip_DisableNotification+0x58>
       (FTM_PWM_IP_RELOAD_POINT_NOTIFICATION != NotifType)  &&
    fe6e:	9b00      	ldr	r3, [sp, #0]
    fe70:	2b0a      	cmp	r3, #10
    fe72:	d009      	beq.n	fe88 <Ftm_Pwm_Ip_DisableNotification+0x58>
       (FTM_PWM_IP_FAULT_NOTIFICATION        != NotifType))
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    fe74:	f89d 3013 	ldrb.w	r3, [sp, #19]
    fe78:	2b07      	cmp	r3, #7
    fe7a:	bf94      	ite	ls
    fe7c:	2301      	movls	r3, #1
    fe7e:	2300      	movhi	r3, #0
    fe80:	b2db      	uxtb	r3, r3
    fe82:	4618      	mov	r0, r3
    fe84:	f7f0 fd32 	bl	8ec <DevAssert>
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    fe88:	f006 fe5a 	bl	16b40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    fe8c:	9b00      	ldr	r3, [sp, #0]
    fe8e:	2b00      	cmp	r3, #0
    fe90:	d014      	beq.n	febc <Ftm_Pwm_Ip_DisableNotification+0x8c>
    fe92:	9b00      	ldr	r3, [sp, #0]
    fe94:	2b01      	cmp	r3, #1
    fe96:	d011      	beq.n	febc <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    fe98:	9b00      	ldr	r3, [sp, #0]
    fe9a:	2b02      	cmp	r3, #2
    fe9c:	d00e      	beq.n	febc <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    fe9e:	9b00      	ldr	r3, [sp, #0]
    fea0:	2b03      	cmp	r3, #3
    fea2:	d00b      	beq.n	febc <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    fea4:	9b00      	ldr	r3, [sp, #0]
    fea6:	2b04      	cmp	r3, #4
    fea8:	d008      	beq.n	febc <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    feaa:	9b00      	ldr	r3, [sp, #0]
    feac:	2b05      	cmp	r3, #5
    feae:	d005      	beq.n	febc <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    feb0:	9b00      	ldr	r3, [sp, #0]
    feb2:	2b06      	cmp	r3, #6
    feb4:	d002      	beq.n	febc <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    feb6:	9b00      	ldr	r3, [sp, #0]
    feb8:	2b07      	cmp	r3, #7
    feba:	d136      	bne.n	ff2a <Ftm_Pwm_Ip_DisableNotification+0xfa>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    febc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    fec0:	085b      	lsrs	r3, r3, #1
    fec2:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    fec6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    feca:	4619      	mov	r1, r3
    fecc:	9805      	ldr	r0, [sp, #20]
    fece:	f7fe f9ad 	bl	e22c <Ftm_Pwm_Ip_GetChannelMode>
    fed2:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    fed4:	f89d 2013 	ldrb.w	r2, [sp, #19]
    fed8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fedc:	4611      	mov	r1, r2
    fede:	4618      	mov	r0, r3
    fee0:	f7fe fde2 	bl	eaa8 <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    fee4:	9b03      	ldr	r3, [sp, #12]
    fee6:	2b22      	cmp	r3, #34	; 0x22
    fee8:	d008      	beq.n	fefc <Ftm_Pwm_Ip_DisableNotification+0xcc>
    feea:	9b03      	ldr	r3, [sp, #12]
    feec:	2b62      	cmp	r3, #98	; 0x62
    feee:	d005      	beq.n	fefc <Ftm_Pwm_Ip_DisableNotification+0xcc>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    fef0:	9b03      	ldr	r3, [sp, #12]
    fef2:	2b61      	cmp	r3, #97	; 0x61
    fef4:	d002      	beq.n	fefc <Ftm_Pwm_Ip_DisableNotification+0xcc>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    fef6:	9b03      	ldr	r3, [sp, #12]
    fef8:	2b21      	cmp	r3, #33	; 0x21
    fefa:	d129      	bne.n	ff50 <Ftm_Pwm_Ip_DisableNotification+0x120>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    fefc:	f89d 3012 	ldrb.w	r3, [sp, #18]
    ff00:	005b      	lsls	r3, r3, #1
    ff02:	b2da      	uxtb	r2, r3
    ff04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ff08:	4611      	mov	r1, r2
    ff0a:	4618      	mov	r0, r3
    ff0c:	f7fe fdcc 	bl	eaa8 <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    ff10:	f89d 3012 	ldrb.w	r3, [sp, #18]
    ff14:	005b      	lsls	r3, r3, #1
    ff16:	b2db      	uxtb	r3, r3
    ff18:	3301      	adds	r3, #1
    ff1a:	b2da      	uxtb	r2, r3
    ff1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ff20:	4611      	mov	r1, r2
    ff22:	4618      	mov	r0, r3
    ff24:	f7fe fdc0 	bl	eaa8 <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    ff28:	e012      	b.n	ff50 <Ftm_Pwm_Ip_DisableNotification+0x120>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    ff2a:	9b00      	ldr	r3, [sp, #0]
    ff2c:	2b0a      	cmp	r3, #10
    ff2e:	d107      	bne.n	ff40 <Ftm_Pwm_Ip_DisableNotification+0x110>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    ff30:	2100      	movs	r1, #0
    ff32:	9805      	ldr	r0, [sp, #20]
    ff34:	f7fe fb79 	bl	e62a <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    ff38:	9805      	ldr	r0, [sp, #20]
    ff3a:	f7fe fb8c 	bl	e656 <Ftm_Pwm_Ip_ClearFaultFlag>
    ff3e:	e008      	b.n	ff52 <Ftm_Pwm_Ip_DisableNotification+0x122>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    ff40:	9805      	ldr	r0, [sp, #20]
    ff42:	f7fd faa4 	bl	d48e <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    ff46:	2100      	movs	r1, #0
    ff48:	9805      	ldr	r0, [sp, #20]
    ff4a:	f7fd fa89 	bl	d460 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    ff4e:	e000      	b.n	ff52 <Ftm_Pwm_Ip_DisableNotification+0x122>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    ff50:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    ff52:	f006 fe21 	bl	16b98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    ff56:	bf00      	nop
    ff58:	b007      	add	sp, #28
    ff5a:	f85d fb04 	ldr.w	pc, [sp], #4
    ff5e:	bf00      	nop
    ff60:	000197f0 	.word	0x000197f0

0000ff64 <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    ff64:	b500      	push	{lr}
    ff66:	b087      	sub	sp, #28
    ff68:	4603      	mov	r3, r0
    ff6a:	460a      	mov	r2, r1
    ff6c:	f88d 3007 	strb.w	r3, [sp, #7]
    ff70:	4613      	mov	r3, r2
    ff72:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ff76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ff7a:	4a22      	ldr	r2, [pc, #136]	; (10004 <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    ff7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff80:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    ff82:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ff86:	085b      	lsrs	r3, r3, #1
    ff88:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    ff8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ff90:	4619      	mov	r1, r3
    ff92:	9805      	ldr	r0, [sp, #20]
    ff94:	f7fe f94a 	bl	e22c <Ftm_Pwm_Ip_GetChannelMode>
    ff98:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    ff9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ff9e:	2201      	movs	r2, #1
    ffa0:	4619      	mov	r1, r3
    ffa2:	9805      	ldr	r0, [sp, #20]
    ffa4:	f7fd fb74 	bl	d690 <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    ffa8:	9b03      	ldr	r3, [sp, #12]
    ffaa:	2b22      	cmp	r3, #34	; 0x22
    ffac:	d008      	beq.n	ffc0 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    ffae:	9b03      	ldr	r3, [sp, #12]
    ffb0:	2b62      	cmp	r3, #98	; 0x62
    ffb2:	d005      	beq.n	ffc0 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    ffb4:	9b03      	ldr	r3, [sp, #12]
    ffb6:	2b61      	cmp	r3, #97	; 0x61
    ffb8:	d002      	beq.n	ffc0 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    ffba:	9b03      	ldr	r3, [sp, #12]
    ffbc:	2b21      	cmp	r3, #33	; 0x21
    ffbe:	d11d      	bne.n	fffc <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
    ffc0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ffc4:	005b      	lsls	r3, r3, #1
    ffc6:	b2db      	uxtb	r3, r3
    ffc8:	3301      	adds	r3, #1
    ffca:	b2db      	uxtb	r3, r3
    ffcc:	4619      	mov	r1, r3
    ffce:	9805      	ldr	r0, [sp, #20]
    ffd0:	f7fd fb81 	bl	d6d6 <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
    ffd4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ffd8:	005b      	lsls	r3, r3, #1
    ffda:	b2db      	uxtb	r3, r3
    ffdc:	2201      	movs	r2, #1
    ffde:	4619      	mov	r1, r3
    ffe0:	9805      	ldr	r0, [sp, #20]
    ffe2:	f7fd fb55 	bl	d690 <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
    ffe6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ffea:	005b      	lsls	r3, r3, #1
    ffec:	b2db      	uxtb	r3, r3
    ffee:	3301      	adds	r3, #1
    fff0:	b2db      	uxtb	r3, r3
    fff2:	2201      	movs	r2, #1
    fff4:	4619      	mov	r1, r3
    fff6:	9805      	ldr	r0, [sp, #20]
    fff8:	f7fd fb4a 	bl	d690 <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
    fffc:	bf00      	nop
    fffe:	b007      	add	sp, #28
   10000:	f85d fb04 	ldr.w	pc, [sp], #4
   10004:	000197f0 	.word	0x000197f0

00010008 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
   10008:	b500      	push	{lr}
   1000a:	b085      	sub	sp, #20
   1000c:	4603      	mov	r3, r0
   1000e:	9100      	str	r1, [sp, #0]
   10010:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10014:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10018:	4a32      	ldr	r2, [pc, #200]	; (100e4 <Ftm_Pwm_Ip_EnableNotification+0xdc>)
   1001a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1001e:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
   10020:	9b00      	ldr	r3, [sp, #0]
   10022:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10026:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1002a:	2b03      	cmp	r3, #3
   1002c:	bf94      	ite	ls
   1002e:	2301      	movls	r3, #1
   10030:	2300      	movhi	r3, #0
   10032:	b2db      	uxtb	r3, r3
   10034:	4618      	mov	r0, r3
   10036:	f7f0 fc59 	bl	8ec <DevAssert>
    if((FTM_PWM_IP_OVERFLOW_NOTIFICATION     != NotifType)  &&
   1003a:	9b00      	ldr	r3, [sp, #0]
   1003c:	2b08      	cmp	r3, #8
   1003e:	d00f      	beq.n	10060 <Ftm_Pwm_Ip_EnableNotification+0x58>
   10040:	9b00      	ldr	r3, [sp, #0]
   10042:	2b09      	cmp	r3, #9
   10044:	d00c      	beq.n	10060 <Ftm_Pwm_Ip_EnableNotification+0x58>
       (FTM_PWM_IP_RELOAD_POINT_NOTIFICATION != NotifType)  &&
   10046:	9b00      	ldr	r3, [sp, #0]
   10048:	2b0a      	cmp	r3, #10
   1004a:	d009      	beq.n	10060 <Ftm_Pwm_Ip_EnableNotification+0x58>
       (FTM_PWM_IP_FAULT_NOTIFICATION        != NotifType))
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
   1004c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10050:	2b07      	cmp	r3, #7
   10052:	bf94      	ite	ls
   10054:	2301      	movls	r3, #1
   10056:	2300      	movhi	r3, #0
   10058:	b2db      	uxtb	r3, r3
   1005a:	4618      	mov	r0, r3
   1005c:	f7f0 fc46 	bl	8ec <DevAssert>
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
   10060:	f006 fdc0 	bl	16be4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
   10064:	9b00      	ldr	r3, [sp, #0]
   10066:	2b00      	cmp	r3, #0
   10068:	d014      	beq.n	10094 <Ftm_Pwm_Ip_EnableNotification+0x8c>
   1006a:	9b00      	ldr	r3, [sp, #0]
   1006c:	2b01      	cmp	r3, #1
   1006e:	d011      	beq.n	10094 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
   10070:	9b00      	ldr	r3, [sp, #0]
   10072:	2b02      	cmp	r3, #2
   10074:	d00e      	beq.n	10094 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
   10076:	9b00      	ldr	r3, [sp, #0]
   10078:	2b03      	cmp	r3, #3
   1007a:	d00b      	beq.n	10094 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
   1007c:	9b00      	ldr	r3, [sp, #0]
   1007e:	2b04      	cmp	r3, #4
   10080:	d008      	beq.n	10094 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
   10082:	9b00      	ldr	r3, [sp, #0]
   10084:	2b05      	cmp	r3, #5
   10086:	d005      	beq.n	10094 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
   10088:	9b00      	ldr	r3, [sp, #0]
   1008a:	2b06      	cmp	r3, #6
   1008c:	d002      	beq.n	10094 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
   1008e:	9b00      	ldr	r3, [sp, #0]
   10090:	2b07      	cmp	r3, #7
   10092:	d10e      	bne.n	100b2 <Ftm_Pwm_Ip_EnableNotification+0xaa>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
   10094:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10098:	4619      	mov	r1, r3
   1009a:	9803      	ldr	r0, [sp, #12]
   1009c:	f7fd fb1b 	bl	d6d6 <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
   100a0:	f89d 200b 	ldrb.w	r2, [sp, #11]
   100a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   100a8:	4611      	mov	r1, r2
   100aa:	4618      	mov	r0, r3
   100ac:	f7ff ff5a 	bl	ff64 <Ftm_Pwm_Ip_SetNormalNotificationCase>
   100b0:	e011      	b.n	100d6 <Ftm_Pwm_Ip_EnableNotification+0xce>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
   100b2:	9b00      	ldr	r3, [sp, #0]
   100b4:	2b0a      	cmp	r3, #10
   100b6:	d107      	bne.n	100c8 <Ftm_Pwm_Ip_EnableNotification+0xc0>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
   100b8:	9803      	ldr	r0, [sp, #12]
   100ba:	f7fe facc 	bl	e656 <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
   100be:	2101      	movs	r1, #1
   100c0:	9803      	ldr	r0, [sp, #12]
   100c2:	f7fe fab2 	bl	e62a <Ftm_Pwm_Ip_SetFaultInterruptEnable>
   100c6:	e006      	b.n	100d6 <Ftm_Pwm_Ip_EnableNotification+0xce>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
   100c8:	9803      	ldr	r0, [sp, #12]
   100ca:	f7fd f9e0 	bl	d48e <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
   100ce:	2101      	movs	r1, #1
   100d0:	9803      	ldr	r0, [sp, #12]
   100d2:	f7fd f9c5 	bl	d460 <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
   100d6:	f006 fdb1 	bl	16c3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
   100da:	bf00      	nop
   100dc:	b005      	add	sp, #20
   100de:	f85d fb04 	ldr.w	pc, [sp], #4
   100e2:	bf00      	nop
   100e4:	000197f0 	.word	0x000197f0

000100e8 <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
   100e8:	b500      	push	{lr}
   100ea:	b085      	sub	sp, #20
   100ec:	4603      	mov	r3, r0
   100ee:	9100      	str	r1, [sp, #0]
   100f0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   100f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   100f8:	4a11      	ldr	r2, [pc, #68]	; (10140 <Ftm_Pwm_Ip_SetPowerState+0x58>)
   100fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100fe:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10100:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10104:	2b03      	cmp	r3, #3
   10106:	bf94      	ite	ls
   10108:	2301      	movls	r3, #1
   1010a:	2300      	movhi	r3, #0
   1010c:	b2db      	uxtb	r3, r3
   1010e:	4618      	mov	r0, r3
   10110:	f7f0 fbec 	bl	8ec <DevAssert>
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
   10114:	9b00      	ldr	r3, [sp, #0]
   10116:	2b01      	cmp	r3, #1
   10118:	d104      	bne.n	10124 <Ftm_Pwm_Ip_SetPowerState+0x3c>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
   1011a:	2100      	movs	r1, #0
   1011c:	9803      	ldr	r0, [sp, #12]
   1011e:	f7fd f96a 	bl	d3f6 <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
   10122:	e008      	b.n	10136 <Ftm_Pwm_Ip_SetPowerState+0x4e>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
   10124:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10128:	4a06      	ldr	r2, [pc, #24]	; (10144 <Ftm_Pwm_Ip_SetPowerState+0x5c>)
   1012a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1012e:	4619      	mov	r1, r3
   10130:	9803      	ldr	r0, [sp, #12]
   10132:	f7fd f960 	bl	d3f6 <Ftm_Pwm_Ip_SetClockSource>
}
   10136:	bf00      	nop
   10138:	b005      	add	sp, #20
   1013a:	f85d fb04 	ldr.w	pc, [sp], #4
   1013e:	bf00      	nop
   10140:	000197f0 	.word	0x000197f0
   10144:	1fff9124 	.word	0x1fff9124

00010148 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
   10148:	b500      	push	{lr}
   1014a:	b085      	sub	sp, #20
   1014c:	4603      	mov	r3, r0
   1014e:	9100      	str	r1, [sp, #0]
   10150:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10154:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10158:	4a13      	ldr	r2, [pc, #76]	; (101a8 <Ftm_Pwm_Ip_SetClockMode+0x60>)
   1015a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1015e:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10160:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10164:	2b03      	cmp	r3, #3
   10166:	bf94      	ite	ls
   10168:	2301      	movls	r3, #1
   1016a:	2300      	movhi	r3, #0
   1016c:	b2db      	uxtb	r3, r3
   1016e:	4618      	mov	r0, r3
   10170:	f7f0 fbbc 	bl	8ec <DevAssert>
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
   10174:	9b00      	ldr	r3, [sp, #0]
   10176:	2b01      	cmp	r3, #1
   10178:	d109      	bne.n	1018e <Ftm_Pwm_Ip_SetClockMode+0x46>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
   1017a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1017e:	4a0b      	ldr	r2, [pc, #44]	; (101ac <Ftm_Pwm_Ip_SetClockMode+0x64>)
   10180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10184:	4619      	mov	r1, r3
   10186:	9803      	ldr	r0, [sp, #12]
   10188:	f7fd f91a 	bl	d3c0 <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
   1018c:	e008      	b.n	101a0 <Ftm_Pwm_Ip_SetClockMode+0x58>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
   1018e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10192:	4a07      	ldr	r2, [pc, #28]	; (101b0 <Ftm_Pwm_Ip_SetClockMode+0x68>)
   10194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10198:	4619      	mov	r1, r3
   1019a:	9803      	ldr	r0, [sp, #12]
   1019c:	f7fd f910 	bl	d3c0 <Ftm_Pwm_Ip_SetClockPs>
}
   101a0:	bf00      	nop
   101a2:	b005      	add	sp, #20
   101a4:	f85d fb04 	ldr.w	pc, [sp], #4
   101a8:	000197f0 	.word	0x000197f0
   101ac:	1fff9144 	.word	0x1fff9144
   101b0:	1fff9134 	.word	0x1fff9134

000101b4 <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
   101b4:	b500      	push	{lr}
   101b6:	b085      	sub	sp, #20
   101b8:	4603      	mov	r3, r0
   101ba:	460a      	mov	r2, r1
   101bc:	f88d 3007 	strb.w	r3, [sp, #7]
   101c0:	4613      	mov	r3, r2
   101c2:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   101c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101ca:	4a0c      	ldr	r2, [pc, #48]	; (101fc <Ftm_Pwm_Ip_ResetCounter+0x48>)
   101cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101d0:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   101d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101d6:	2b03      	cmp	r3, #3
   101d8:	bf94      	ite	ls
   101da:	2301      	movls	r3, #1
   101dc:	2300      	movhi	r3, #0
   101de:	b2db      	uxtb	r3, r3
   101e0:	4618      	mov	r0, r3
   101e2:	f7f0 fb83 	bl	8ec <DevAssert>
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
   101e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   101ea:	4619      	mov	r1, r3
   101ec:	9803      	ldr	r0, [sp, #12]
   101ee:	f7fd fe1a 	bl	de26 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
   101f2:	bf00      	nop
   101f4:	b005      	add	sp, #20
   101f6:	f85d fb04 	ldr.w	pc, [sp], #4
   101fa:	bf00      	nop
   101fc:	000197f0 	.word	0x000197f0

00010200 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
   10200:	b500      	push	{lr}
   10202:	b085      	sub	sp, #20
   10204:	4603      	mov	r3, r0
   10206:	460a      	mov	r2, r1
   10208:	f88d 3007 	strb.w	r3, [sp, #7]
   1020c:	4613      	mov	r3, r2
   1020e:	f88d 3006 	strb.w	r3, [sp, #6]
    uint16 DutyCycle;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10212:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10216:	2b03      	cmp	r3, #3
   10218:	bf94      	ite	ls
   1021a:	2301      	movls	r3, #1
   1021c:	2300      	movhi	r3, #0
   1021e:	b2db      	uxtb	r3, r3
   10220:	4618      	mov	r0, r3
   10222:	f7f0 fb63 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   10226:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1022a:	2b07      	cmp	r3, #7
   1022c:	bf94      	ite	ls
   1022e:	2301      	movls	r3, #1
   10230:	2300      	movhi	r3, #0
   10232:	b2db      	uxtb	r3, r3
   10234:	4618      	mov	r0, r3
   10236:	f7f0 fb59 	bl	8ec <DevAssert>
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
   1023a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1023e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10242:	4906      	ldr	r1, [pc, #24]	; (1025c <Ftm_Pwm_Ip_GetChannelState+0x5c>)
   10244:	00d2      	lsls	r2, r2, #3
   10246:	4413      	add	r3, r2
   10248:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1024c:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
   10250:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   10254:	4618      	mov	r0, r3
   10256:	b005      	add	sp, #20
   10258:	f85d fb04 	ldr.w	pc, [sp], #4
   1025c:	1fff8e34 	.word	0x1fff8e34

00010260 <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
   10260:	b500      	push	{lr}
   10262:	b087      	sub	sp, #28
   10264:	9202      	str	r2, [sp, #8]
   10266:	9301      	str	r3, [sp, #4]
   10268:	4603      	mov	r3, r0
   1026a:	f88d 300f 	strb.w	r3, [sp, #15]
   1026e:	460b      	mov	r3, r1
   10270:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10274:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10278:	4a29      	ldr	r2, [pc, #164]	; (10320 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0xc0>)
   1027a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1027e:	9304      	str	r3, [sp, #16]
    uint8 Index;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10280:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10284:	2b03      	cmp	r3, #3
   10286:	bf94      	ite	ls
   10288:	2301      	movls	r3, #1
   1028a:	2300      	movhi	r3, #0
   1028c:	b2db      	uxtb	r3, r3
   1028e:	4618      	mov	r0, r3
   10290:	f7f0 fb2c 	bl	8ec <DevAssert>
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
   10294:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10298:	2b08      	cmp	r3, #8
   1029a:	bf94      	ite	ls
   1029c:	2301      	movls	r3, #1
   1029e:	2300      	movhi	r3, #0
   102a0:	b2db      	uxtb	r3, r3
   102a2:	4618      	mov	r0, r3
   102a4:	f7f0 fb22 	bl	8ec <DevAssert>
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
   102a8:	2300      	movs	r3, #0
   102aa:	f88d 3017 	strb.w	r3, [sp, #23]
   102ae:	e026      	b.n	102fe <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9e>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
   102b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   102b4:	9a02      	ldr	r2, [sp, #8]
   102b6:	4413      	add	r3, r2
   102b8:	7819      	ldrb	r1, [r3, #0]
   102ba:	f89d 3017 	ldrb.w	r3, [sp, #23]
   102be:	005b      	lsls	r3, r3, #1
   102c0:	9a01      	ldr	r2, [sp, #4]
   102c2:	4413      	add	r3, r2
   102c4:	881b      	ldrh	r3, [r3, #0]
   102c6:	461a      	mov	r2, r3
   102c8:	9804      	ldr	r0, [sp, #16]
   102ca:	f7fd fa32 	bl	d732 <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
   102ce:	f89d 3017 	ldrb.w	r3, [sp, #23]
   102d2:	005b      	lsls	r3, r3, #1
   102d4:	9a01      	ldr	r2, [sp, #4]
   102d6:	441a      	add	r2, r3
   102d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   102dc:	f89d 1017 	ldrb.w	r1, [sp, #23]
   102e0:	9802      	ldr	r0, [sp, #8]
   102e2:	4401      	add	r1, r0
   102e4:	7809      	ldrb	r1, [r1, #0]
   102e6:	4608      	mov	r0, r1
   102e8:	8811      	ldrh	r1, [r2, #0]
   102ea:	4a0e      	ldr	r2, [pc, #56]	; (10324 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0xc4>)
   102ec:	00db      	lsls	r3, r3, #3
   102ee:	4403      	add	r3, r0
   102f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
   102f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   102f8:	3301      	adds	r3, #1
   102fa:	f88d 3017 	strb.w	r3, [sp, #23]
   102fe:	f89d 2017 	ldrb.w	r2, [sp, #23]
   10302:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10306:	429a      	cmp	r2, r3
   10308:	d3d2      	bcc.n	102b0 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x50>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   1030a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1030e:	4619      	mov	r1, r3
   10310:	9804      	ldr	r0, [sp, #16]
   10312:	f7fd fad6 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
   10316:	bf00      	nop
   10318:	b007      	add	sp, #28
   1031a:	f85d fb04 	ldr.w	pc, [sp], #4
   1031e:	bf00      	nop
   10320:	000197f0 	.word	0x000197f0
   10324:	1fff8e34 	.word	0x1fff8e34

00010328 <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
   10328:	b500      	push	{lr}
   1032a:	b085      	sub	sp, #20
   1032c:	4603      	mov	r3, r0
   1032e:	9100      	str	r1, [sp, #0]
   10330:	f88d 3007 	strb.w	r3, [sp, #7]
   10334:	4613      	mov	r3, r2
   10336:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   1033a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1033e:	4a10      	ldr	r2, [pc, #64]	; (10380 <Ftm_Pwm_Ip_MaskOutputChannels+0x58>)
   10340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10344:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10346:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1034a:	2b03      	cmp	r3, #3
   1034c:	bf94      	ite	ls
   1034e:	2301      	movls	r3, #1
   10350:	2300      	movhi	r3, #0
   10352:	b2db      	uxtb	r3, r3
   10354:	4618      	mov	r0, r3
   10356:	f7f0 fac9 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
   1035a:	f006 fce7 	bl	16d2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
   1035e:	9900      	ldr	r1, [sp, #0]
   10360:	9803      	ldr	r0, [sp, #12]
   10362:	f7fd fb0b 	bl	d97c <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   10366:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1036a:	4619      	mov	r1, r3
   1036c:	9803      	ldr	r0, [sp, #12]
   1036e:	f7fd faa8 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
   10372:	f006 fd07 	bl	16d84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
   10376:	bf00      	nop
   10378:	b005      	add	sp, #20
   1037a:	f85d fb04 	ldr.w	pc, [sp], #4
   1037e:	bf00      	nop
   10380:	000197f0 	.word	0x000197f0

00010384 <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
   10384:	b500      	push	{lr}
   10386:	b085      	sub	sp, #20
   10388:	4603      	mov	r3, r0
   1038a:	9100      	str	r1, [sp, #0]
   1038c:	f88d 3007 	strb.w	r3, [sp, #7]
   10390:	4613      	mov	r3, r2
   10392:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10396:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1039a:	4a10      	ldr	r2, [pc, #64]	; (103dc <Ftm_Pwm_Ip_UnMaskOutputChannels+0x58>)
   1039c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103a0:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   103a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   103a6:	2b03      	cmp	r3, #3
   103a8:	bf94      	ite	ls
   103aa:	2301      	movls	r3, #1
   103ac:	2300      	movhi	r3, #0
   103ae:	b2db      	uxtb	r3, r3
   103b0:	4618      	mov	r0, r3
   103b2:	f7f0 fa9b 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
   103b6:	f006 fd0b 	bl	16dd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
   103ba:	9900      	ldr	r1, [sp, #0]
   103bc:	9803      	ldr	r0, [sp, #12]
   103be:	f7fd faec 	bl	d99a <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   103c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   103c6:	4619      	mov	r1, r3
   103c8:	9803      	ldr	r0, [sp, #12]
   103ca:	f7fd fa7a 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
   103ce:	f006 fd2b 	bl	16e28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
   103d2:	bf00      	nop
   103d4:	b005      	add	sp, #20
   103d6:	f85d fb04 	ldr.w	pc, [sp], #4
   103da:	bf00      	nop
   103dc:	000197f0 	.word	0x000197f0

000103e0 <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
   103e0:	b510      	push	{r4, lr}
   103e2:	b088      	sub	sp, #32
   103e4:	4604      	mov	r4, r0
   103e6:	4608      	mov	r0, r1
   103e8:	4611      	mov	r1, r2
   103ea:	461a      	mov	r2, r3
   103ec:	4623      	mov	r3, r4
   103ee:	f88d 3007 	strb.w	r3, [sp, #7]
   103f2:	4603      	mov	r3, r0
   103f4:	f88d 3006 	strb.w	r3, [sp, #6]
   103f8:	460b      	mov	r3, r1
   103fa:	f8ad 3004 	strh.w	r3, [sp, #4]
   103fe:	4613      	mov	r3, r2
   10400:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10404:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10408:	4a59      	ldr	r2, [pc, #356]	; (10570 <Ftm_Pwm_Ip_SetPhaseShift+0x190>)
   1040a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1040e:	9306      	str	r3, [sp, #24]
    uint8 PairChId;
    uint16 DutyCycleVal;
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint16  CnVValue = 0U;
   10410:	2300      	movs	r3, #0
   10412:	f8ad 3016 	strh.w	r3, [sp, #22]
    boolean CheckChMode = TRUE;
   10416:	2301      	movs	r3, #1
   10418:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean RetVal = TRUE;
   1041c:	2301      	movs	r3, #1
   1041e:	f88d 301e 	strb.w	r3, [sp, #30]

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10422:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10426:	2b03      	cmp	r3, #3
   10428:	bf94      	ite	ls
   1042a:	2301      	movls	r3, #1
   1042c:	2300      	movhi	r3, #0
   1042e:	b2db      	uxtb	r3, r3
   10430:	4618      	mov	r0, r3
   10432:	f7f0 fa5b 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   10436:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1043a:	2b07      	cmp	r3, #7
   1043c:	bf94      	ite	ls
   1043e:	2301      	movls	r3, #1
   10440:	2300      	movhi	r3, #0
   10442:	b2db      	uxtb	r3, r3
   10444:	4618      	mov	r0, r3
   10446:	f7f0 fa51 	bl	8ec <DevAssert>
    
    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
   1044a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1044e:	4619      	mov	r1, r3
   10450:	9806      	ldr	r0, [sp, #24]
   10452:	f7fd feeb 	bl	e22c <Ftm_Pwm_Ip_GetChannelMode>
   10456:	9004      	str	r0, [sp, #16]
    
    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          != ChMode) &&
   10458:	9b04      	ldr	r3, [sp, #16]
   1045a:	2b22      	cmp	r3, #34	; 0x22
   1045c:	d00b      	beq.n	10476 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
   1045e:	9b04      	ldr	r3, [sp, #16]
   10460:	2b62      	cmp	r3, #98	; 0x62
   10462:	d008      	beq.n	10476 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH != ChMode) &&
   10464:	9b04      	ldr	r3, [sp, #16]
   10466:	2b61      	cmp	r3, #97	; 0x61
   10468:	d005      	beq.n	10476 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  != ChMode) &&
   1046a:	9b04      	ldr	r3, [sp, #16]
   1046c:	2b21      	cmp	r3, #33	; 0x21
   1046e:	d002      	beq.n	10476 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
#endif
        ( FTM_PWM_IP_MODE_COMBINE_LOW           != ChMode))
    {
        CheckChMode = FALSE;
   10470:	2300      	movs	r3, #0
   10472:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    DevAssert(CheckChMode != FALSE);
   10476:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1047a:	4618      	mov	r0, r3
   1047c:	f7f0 fa36 	bl	8ec <DevAssert>
    
    CnVValue = PhaseShift + (uint16)(Period >> 1U);
   10480:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10484:	085b      	lsrs	r3, r3, #1
   10486:	b29a      	uxth	r2, r3
   10488:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1048c:	4413      	add	r3, r2
   1048e:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((CnVValue <= PhaseShift) || (Period <= CnVValue))
   10492:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   10496:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1049a:	429a      	cmp	r2, r3
   1049c:	d905      	bls.n	104aa <Ftm_Pwm_Ip_SetPhaseShift+0xca>
   1049e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   104a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   104a6:	429a      	cmp	r2, r3
   104a8:	d802      	bhi.n	104b0 <Ftm_Pwm_Ip_SetPhaseShift+0xd0>
    {
        RetVal = FALSE;
   104aa:	2300      	movs	r3, #0
   104ac:	f88d 301e 	strb.w	r3, [sp, #30]
    }
    DevAssert(RetVal != FALSE);
   104b0:	f89d 301e 	ldrb.w	r3, [sp, #30]
   104b4:	4618      	mov	r0, r3
   104b6:	f7f0 fa19 	bl	8ec <DevAssert>
#endif
    PairChId = Channel >> 1U;
   104ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
   104be:	085b      	lsrs	r3, r3, #1
   104c0:	f88d 300f 	strb.w	r3, [sp, #15]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
   104c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   104c8:	492a      	ldr	r1, [pc, #168]	; (10574 <Ftm_Pwm_Ip_SetPhaseShift+0x194>)
   104ca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   104ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
   104d2:	f006 fccf 	bl	16e74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
   104d6:	9806      	ldr	r0, [sp, #24]
   104d8:	f7fc ffb4 	bl	d444 <Ftm_Pwm_Ip_GetCpwms>
   104dc:	4603      	mov	r3, r0
   104de:	2b01      	cmp	r3, #1
   104e0:	d108      	bne.n	104f4 <Ftm_Pwm_Ip_SetPhaseShift+0x114>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
   104e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   104e6:	085b      	lsrs	r3, r3, #1
   104e8:	b29b      	uxth	r3, r3
   104ea:	4619      	mov	r1, r3
   104ec:	9806      	ldr	r0, [sp, #24]
   104ee:	f7fc fffc 	bl	d4ea <Ftm_Pwm_Ip_SetMod>
   104f2:	e007      	b.n	10504 <Ftm_Pwm_Ip_SetPhaseShift+0x124>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
   104f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   104f8:	3b01      	subs	r3, #1
   104fa:	b29b      	uxth	r3, r3
   104fc:	4619      	mov	r1, r3
   104fe:	9806      	ldr	r0, [sp, #24]
   10500:	f7fc fff3 	bl	d4ea <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
   10504:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10508:	005b      	lsls	r3, r3, #1
   1050a:	b2db      	uxtb	r3, r3
   1050c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10510:	4619      	mov	r1, r3
   10512:	9806      	ldr	r0, [sp, #24]
   10514:	f7fd f90d 	bl	d732 <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
   10518:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1051c:	085b      	lsrs	r3, r3, #1
   1051e:	f8ad 300c 	strh.w	r3, [sp, #12]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
   10522:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10526:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1052a:	4913      	ldr	r1, [pc, #76]	; (10578 <Ftm_Pwm_Ip_SetPhaseShift+0x198>)
   1052c:	00d2      	lsls	r2, r2, #3
   1052e:	4413      	add	r3, r2
   10530:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10534:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
   10538:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1053c:	005b      	lsls	r3, r3, #1
   1053e:	b2db      	uxtb	r3, r3
   10540:	3301      	adds	r3, #1
   10542:	b2d9      	uxtb	r1, r3
   10544:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10548:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1054c:	4413      	add	r3, r2
   1054e:	b29b      	uxth	r3, r3
   10550:	461a      	mov	r2, r3
   10552:	9806      	ldr	r0, [sp, #24]
   10554:	f7fd f8ed 	bl	d732 <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   10558:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1055c:	4619      	mov	r1, r3
   1055e:	9806      	ldr	r0, [sp, #24]
   10560:	f7fd f9af 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
   10564:	f006 fcb2 	bl	16ecc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
   10568:	bf00      	nop
   1056a:	b008      	add	sp, #32
   1056c:	bd10      	pop	{r4, pc}
   1056e:	bf00      	nop
   10570:	000197f0 	.word	0x000197f0
   10574:	1fff8e2c 	.word	0x1fff8e2c
   10578:	1fff8e34 	.word	0x1fff8e34

0001057c <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
   1057c:	b510      	push	{r4, lr}
   1057e:	b08a      	sub	sp, #40	; 0x28
   10580:	4604      	mov	r4, r0
   10582:	4608      	mov	r0, r1
   10584:	4611      	mov	r1, r2
   10586:	461a      	mov	r2, r3
   10588:	4623      	mov	r3, r4
   1058a:	f88d 300f 	strb.w	r3, [sp, #15]
   1058e:	4603      	mov	r3, r0
   10590:	f88d 300e 	strb.w	r3, [sp, #14]
   10594:	460b      	mov	r3, r1
   10596:	f8ad 300c 	strh.w	r3, [sp, #12]
   1059a:	4613      	mov	r3, r2
   1059c:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint16 FirstEdge;
    uint16 SecondEdgeEdge;
    uint8 PairId;
    boolean SoftwareTrigger;
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   105a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   105a4:	4a68      	ldr	r2, [pc, #416]	; (10748 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1cc>)
   105a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105aa:	9308      	str	r3, [sp, #32]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    boolean CheckChMode = TRUE;
   105ac:	2301      	movs	r3, #1
   105ae:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    boolean RetVal = TRUE;
   105b2:	2301      	movs	r3, #1
   105b4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   105b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   105bc:	2b03      	cmp	r3, #3
   105be:	bf94      	ite	ls
   105c0:	2301      	movls	r3, #1
   105c2:	2300      	movhi	r3, #0
   105c4:	b2db      	uxtb	r3, r3
   105c6:	4618      	mov	r0, r3
   105c8:	f7f0 f990 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   105cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
   105d0:	2b07      	cmp	r3, #7
   105d2:	bf94      	ite	ls
   105d4:	2301      	movls	r3, #1
   105d6:	2300      	movhi	r3, #0
   105d8:	b2db      	uxtb	r3, r3
   105da:	4618      	mov	r0, r3
   105dc:	f7f0 f986 	bl	8ec <DevAssert>
    
    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
   105e0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   105e4:	4619      	mov	r1, r3
   105e6:	9808      	ldr	r0, [sp, #32]
   105e8:	f7fd fe20 	bl	e22c <Ftm_Pwm_Ip_GetChannelMode>
   105ec:	9007      	str	r0, [sp, #28]
    
    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          != ChMode) &&
   105ee:	9b07      	ldr	r3, [sp, #28]
   105f0:	2b22      	cmp	r3, #34	; 0x22
   105f2:	d00b      	beq.n	1060c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
   105f4:	9b07      	ldr	r3, [sp, #28]
   105f6:	2b62      	cmp	r3, #98	; 0x62
   105f8:	d008      	beq.n	1060c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH != ChMode) &&
   105fa:	9b07      	ldr	r3, [sp, #28]
   105fc:	2b61      	cmp	r3, #97	; 0x61
   105fe:	d005      	beq.n	1060c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  != ChMode) &&
   10600:	9b07      	ldr	r3, [sp, #28]
   10602:	2b21      	cmp	r3, #33	; 0x21
   10604:	d002      	beq.n	1060c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
#endif
        ( FTM_PWM_IP_MODE_COMBINE_LOW           != ChMode))
    {
        CheckChMode = FALSE;
   10606:	2300      	movs	r3, #0
   10608:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    }
    DevAssert(CheckChMode != FALSE);
   1060c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   10610:	4618      	mov	r0, r3
   10612:	f7f0 f96b 	bl	8ec <DevAssert>

#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    if (((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH          == ChMode) ||
   10616:	9b07      	ldr	r3, [sp, #28]
   10618:	2b62      	cmp	r3, #98	; 0x62
   1061a:	d002      	beq.n	10622 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xa6>
   1061c:	9b07      	ldr	r3, [sp, #28]
   1061e:	2b61      	cmp	r3, #97	; 0x61
   10620:	d106      	bne.n	10630 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xb4>
         (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW           == ChMode)) &&
   10622:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   10626:	2b00      	cmp	r3, #0
   10628:	d002      	beq.n	10630 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xb4>
        (TRUE == SyncUpdate))
    {
        RetVal = FALSE;
   1062a:	2300      	movs	r3, #0
   1062c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    }
#endif

    if ((Ftm_Pwm_Ip_aPeriod[Instance] != DutyCycle) && (0U != DutyCycle))
   10630:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10634:	4a45      	ldr	r2, [pc, #276]	; (1074c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   10636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1063a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1063e:	429a      	cmp	r2, r3
   10640:	d018      	beq.n	10674 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
   10642:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10646:	2b00      	cmp	r3, #0
   10648:	d014      	beq.n	10674 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
    {
        if ((Ftm_Pwm_Ip_aPeriod[Instance] <= PhaseShift) || (Ftm_Pwm_Ip_aPeriod[Instance] < DutyCycle))
   1064a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1064e:	4a3f      	ldr	r2, [pc, #252]	; (1074c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   10650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10654:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   10658:	429a      	cmp	r2, r3
   1065a:	d208      	bcs.n	1066e <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf2>
   1065c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10660:	4a3a      	ldr	r2, [pc, #232]	; (1074c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   10662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10666:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1066a:	429a      	cmp	r2, r3
   1066c:	d902      	bls.n	10674 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
        {
            RetVal = FALSE;
   1066e:	2300      	movs	r3, #0
   10670:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        }
    }
    DevAssert(RetVal != FALSE);
   10674:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   10678:	4618      	mov	r0, r3
   1067a:	f7f0 f937 	bl	8ec <DevAssert>

#endif
    PairId = Channel >> 1U;
   1067e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10682:	085b      	lsrs	r3, r3, #1
   10684:	f88d 301b 	strb.w	r3, [sp, #27]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
   10688:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1068c:	f89d 301b 	ldrb.w	r3, [sp, #27]
   10690:	492f      	ldr	r1, [pc, #188]	; (10750 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d4>)
   10692:	0092      	lsls	r2, r2, #2
   10694:	4413      	add	r3, r2
   10696:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1069a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
   1069e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   106a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   106a6:	492b      	ldr	r1, [pc, #172]	; (10754 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d8>)
   106a8:	00d2      	lsls	r2, r2, #3
   106aa:	4413      	add	r3, r2
   106ac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   106b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
   106b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   106b8:	f8ad 3018 	strh.w	r3, [sp, #24]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
   106bc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   106c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   106c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   106c8:	4618      	mov	r0, r3
   106ca:	f7fe f8f9 	bl	e8c0 <Ftm_Pwm_Ip_CalculatePhaseShift>
   106ce:	4603      	mov	r3, r0
   106d0:	f8ad 3016 	strh.w	r3, [sp, #22]

    if (TRUE == SyncUpdate)
   106d4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   106d8:	2b00      	cmp	r3, #0
   106da:	d003      	beq.n	106e4 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x168>
    {
        SoftwareTrigger = FALSE;
   106dc:	2300      	movs	r3, #0
   106de:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   106e2:	e002      	b.n	106ea <Ftm_Pwm_Ip_SetDutyPhaseShift+0x16e>
    }
    else
    {
        SoftwareTrigger = TRUE;
   106e4:	2301      	movs	r3, #1
   106e6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
   106ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
   106ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
   106f2:	4919      	ldr	r1, [pc, #100]	; (10758 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1dc>)
   106f4:	00d2      	lsls	r2, r2, #3
   106f6:	4413      	add	r3, r2
   106f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   106fc:	2b02      	cmp	r3, #2
   106fe:	d111      	bne.n	10724 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1a8>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
   10700:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10704:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10708:	4913      	ldr	r1, [pc, #76]	; (10758 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1dc>)
   1070a:	00d2      	lsls	r2, r2, #3
   1070c:	4413      	add	r3, r2
   1070e:	2201      	movs	r2, #1
   10710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
   10714:	f89d 100e 	ldrb.w	r1, [sp, #14]
   10718:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1071c:	2300      	movs	r3, #0
   1071e:	2200      	movs	r2, #0
   10720:	f7ff f982 	bl	fa28 <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
   10724:	f8bd 4016 	ldrh.w	r4, [sp, #22]
   10728:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1072c:	f89d 100e 	ldrb.w	r1, [sp, #14]
   10730:	f89d 000f 	ldrb.w	r0, [sp, #15]
   10734:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   10738:	9300      	str	r3, [sp, #0]
   1073a:	4623      	mov	r3, r4
   1073c:	f7ff fa4e 	bl	fbdc <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
   10740:	bf00      	nop
   10742:	b00a      	add	sp, #40	; 0x28
   10744:	bd10      	pop	{r4, pc}
   10746:	bf00      	nop
   10748:	000197f0 	.word	0x000197f0
   1074c:	1fff8e2c 	.word	0x1fff8e2c
   10750:	1fff8e74 	.word	0x1fff8e74
   10754:	1fff8e34 	.word	0x1fff8e34
   10758:	1fff9004 	.word	0x1fff9004

0001075c <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
   1075c:	b500      	push	{lr}
   1075e:	b085      	sub	sp, #20
   10760:	4603      	mov	r3, r0
   10762:	9100      	str	r1, [sp, #0]
   10764:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10768:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1076c:	4a0c      	ldr	r2, [pc, #48]	; (107a0 <Ftm_Pwm_Ip_DisableTrigger+0x44>)
   1076e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10772:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10774:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10778:	2b03      	cmp	r3, #3
   1077a:	bf94      	ite	ls
   1077c:	2301      	movls	r3, #1
   1077e:	2300      	movhi	r3, #0
   10780:	b2db      	uxtb	r3, r3
   10782:	4618      	mov	r0, r3
   10784:	f7f0 f8b2 	bl	8ec <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
   10788:	f006 fbc6 	bl	16f18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
   1078c:	9900      	ldr	r1, [sp, #0]
   1078e:	9803      	ldr	r0, [sp, #12]
   10790:	f7fd fa44 	bl	dc1c <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
   10794:	f006 fbec 	bl	16f70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
   10798:	bf00      	nop
   1079a:	b005      	add	sp, #20
   1079c:	f85d fb04 	ldr.w	pc, [sp], #4
   107a0:	000197f0 	.word	0x000197f0

000107a4 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
   107a4:	b500      	push	{lr}
   107a6:	b085      	sub	sp, #20
   107a8:	4603      	mov	r3, r0
   107aa:	9100      	str	r1, [sp, #0]
   107ac:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   107b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   107b4:	4a0c      	ldr	r2, [pc, #48]	; (107e8 <Ftm_Pwm_Ip_EnableTrigger+0x44>)
   107b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107ba:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   107bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   107c0:	2b03      	cmp	r3, #3
   107c2:	bf94      	ite	ls
   107c4:	2301      	movls	r3, #1
   107c6:	2300      	movhi	r3, #0
   107c8:	b2db      	uxtb	r3, r3
   107ca:	4618      	mov	r0, r3
   107cc:	f7f0 f88e 	bl	8ec <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
   107d0:	f006 fbf4 	bl	16fbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
   107d4:	9900      	ldr	r1, [sp, #0]
   107d6:	9803      	ldr	r0, [sp, #12]
   107d8:	f7fd fa2d 	bl	dc36 <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
   107dc:	f006 fc1a 	bl	17014 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
   107e0:	bf00      	nop
   107e2:	b005      	add	sp, #20
   107e4:	f85d fb04 	ldr.w	pc, [sp], #4
   107e8:	000197f0 	.word	0x000197f0

000107ec <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
   107ec:	b500      	push	{lr}
   107ee:	b085      	sub	sp, #20
   107f0:	4603      	mov	r3, r0
   107f2:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   107f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   107fa:	4a0d      	ldr	r2, [pc, #52]	; (10830 <Ftm_Pwm_Ip_SyncUpdate+0x44>)
   107fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10800:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10802:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10806:	2b03      	cmp	r3, #3
   10808:	bf94      	ite	ls
   1080a:	2301      	movls	r3, #1
   1080c:	2300      	movhi	r3, #0
   1080e:	b2db      	uxtb	r3, r3
   10810:	4618      	mov	r0, r3
   10812:	f7f0 f86b 	bl	8ec <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
   10816:	f006 fc23 	bl	17060 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
   1081a:	2101      	movs	r1, #1
   1081c:	9803      	ldr	r0, [sp, #12]
   1081e:	f7fd f850 	bl	d8c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
   10822:	f006 fc49 	bl	170b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
   10826:	bf00      	nop
   10828:	b005      	add	sp, #20
   1082a:	f85d fb04 	ldr.w	pc, [sp], #4
   1082e:	bf00      	nop
   10830:	000197f0 	.word	0x000197f0

00010834 <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
   10834:	b500      	push	{lr}
   10836:	b085      	sub	sp, #20
   10838:	4603      	mov	r3, r0
   1083a:	f88d 3007 	strb.w	r3, [sp, #7]
   1083e:	460b      	mov	r3, r1
   10840:	f88d 3006 	strb.w	r3, [sp, #6]
   10844:	4613      	mov	r3, r2
   10846:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   1084a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1084e:	4a32      	ldr	r2, [pc, #200]	; (10918 <Ftm_Pwm_Ip_SetChannelDeadTime+0xe4>)
   10850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10854:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10856:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1085a:	2b03      	cmp	r3, #3
   1085c:	bf94      	ite	ls
   1085e:	2301      	movls	r3, #1
   10860:	2300      	movhi	r3, #0
   10862:	b2db      	uxtb	r3, r3
   10864:	4618      	mov	r0, r3
   10866:	f7f0 f841 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   1086a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1086e:	2b07      	cmp	r3, #7
   10870:	bf94      	ite	ls
   10872:	2301      	movls	r3, #1
   10874:	2300      	movhi	r3, #0
   10876:	b2db      	uxtb	r3, r3
   10878:	4618      	mov	r0, r3
   1087a:	f7f0 f837 	bl	8ec <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_GetDualChnCompCmd(FtmBase, Channel));
   1087e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10882:	4619      	mov	r1, r3
   10884:	9803      	ldr	r0, [sp, #12]
   10886:	f7fd fc89 	bl	e19c <Ftm_Pwm_Ip_GetDualChnCompCmd>
   1088a:	4603      	mov	r3, r0
   1088c:	4618      	mov	r0, r3
   1088e:	f7f0 f82d 	bl	8ec <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_GetDualChnDeadtimeCmd(FtmBase, Channel));
   10892:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10896:	4619      	mov	r1, r3
   10898:	9803      	ldr	r0, [sp, #12]
   1089a:	f7fd fca3 	bl	e1e4 <Ftm_Pwm_Ip_GetDualChnDeadtimeCmd>
   1089e:	4603      	mov	r3, r0
   108a0:	4618      	mov	r0, r3
   108a2:	f7f0 f823 	bl	8ec <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_ValidateParamDeadTime(Instance, Channel, DeadTimeVal));
   108a6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   108aa:	f89d 1006 	ldrb.w	r1, [sp, #6]
   108ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   108b2:	4618      	mov	r0, r3
   108b4:	f7fd ff80 	bl	e7b8 <Ftm_Pwm_Ip_ValidateParamDeadTime>
   108b8:	4603      	mov	r3, r0
   108ba:	4618      	mov	r0, r3
   108bc:	f7f0 f816 	bl	8ec <DevAssert>
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
   108c0:	f006 fc20 	bl	17104 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
   108c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   108c8:	2b3f      	cmp	r3, #63	; 0x3f
   108ca:	d80b      	bhi.n	108e4 <Ftm_Pwm_Ip_SetChannelDeadTime+0xb0>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
   108cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   108d0:	b2db      	uxtb	r3, r3
   108d2:	4619      	mov	r1, r3
   108d4:	9803      	ldr	r0, [sp, #12]
   108d6:	f7fd f946 	bl	db66 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
   108da:	2100      	movs	r1, #0
   108dc:	9803      	ldr	r0, [sp, #12]
   108de:	f7fd f973 	bl	dbc8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
   108e2:	e012      	b.n	1090a <Ftm_Pwm_Ip_SetChannelDeadTime+0xd6>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
   108e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   108e8:	b2db      	uxtb	r3, r3
   108ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   108ee:	b2db      	uxtb	r3, r3
   108f0:	4619      	mov	r1, r3
   108f2:	9803      	ldr	r0, [sp, #12]
   108f4:	f7fd f937 	bl	db66 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
   108f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   108fc:	099b      	lsrs	r3, r3, #6
   108fe:	b29b      	uxth	r3, r3
   10900:	b2db      	uxtb	r3, r3
   10902:	4619      	mov	r1, r3
   10904:	9803      	ldr	r0, [sp, #12]
   10906:	f7fd f95f 	bl	dbc8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
   1090a:	f006 fc27 	bl	1715c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
   1090e:	bf00      	nop
   10910:	b005      	add	sp, #20
   10912:	f85d fb04 	ldr.w	pc, [sp], #4
   10916:	bf00      	nop
   10918:	000197f0 	.word	0x000197f0

0001091c <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
   1091c:	b082      	sub	sp, #8
   1091e:	9001      	str	r0, [sp, #4]
   10920:	460b      	mov	r3, r1
   10922:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
   10926:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
   1092a:	4618      	mov	r0, r3
   1092c:	b002      	add	sp, #8
   1092e:	4770      	bx	lr

00010930 <Pwm_ValidateGlobalConfigCall>:
* @retval       E_NOT_OK            Caller of the function should drop execution
*
*/
static Std_ReturnType Pwm_ValidateGlobalConfigCall(uint32   CoreId,
                                                   uint8    ServiceId)
{
   10930:	b500      	push	{lr}
   10932:	b085      	sub	sp, #20
   10934:	9001      	str	r0, [sp, #4]
   10936:	460b      	mov	r3, r1
   10938:	f88d 3003 	strb.w	r3, [sp, #3]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   1093c:	2300      	movs	r3, #0
   1093e:	f88d 300f 	strb.w	r3, [sp, #15]

    if (PWM_STATE_UNINIT == Pwm_aState[CoreId].PwmDriverState)
   10942:	4916      	ldr	r1, [pc, #88]	; (1099c <Pwm_ValidateGlobalConfigCall+0x6c>)
   10944:	9a01      	ldr	r2, [sp, #4]
   10946:	4613      	mov	r3, r2
   10948:	005b      	lsls	r3, r3, #1
   1094a:	4413      	add	r3, r2
   1094c:	00db      	lsls	r3, r3, #3
   1094e:	440b      	add	r3, r1
   10950:	681b      	ldr	r3, [r3, #0]
   10952:	2b00      	cmp	r3, #0
   10954:	d10e      	bne.n	10974 <Pwm_ValidateGlobalConfigCall+0x44>
    {
        if (PWM_INIT_ID != ServiceId)
   10956:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1095a:	2b00      	cmp	r3, #0
   1095c:	d018      	beq.n	10990 <Pwm_ValidateGlobalConfigCall+0x60>
        {
            (void)Det_ReportError
   1095e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10962:	2311      	movs	r3, #17
   10964:	2100      	movs	r1, #0
   10966:	2079      	movs	r0, #121	; 0x79
   10968:	f007 ff62 	bl	18830 <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_UNINIT
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   1096c:	2301      	movs	r3, #1
   1096e:	f88d 300f 	strb.w	r3, [sp, #15]
   10972:	e00d      	b.n	10990 <Pwm_ValidateGlobalConfigCall+0x60>
        }
    }
    else
    {
        if (PWM_INIT_ID == ServiceId)
   10974:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10978:	2b00      	cmp	r3, #0
   1097a:	d109      	bne.n	10990 <Pwm_ValidateGlobalConfigCall+0x60>
        {
            (void)Det_ReportError
   1097c:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10980:	2314      	movs	r3, #20
   10982:	2100      	movs	r1, #0
   10984:	2079      	movs	r0, #121	; 0x79
   10986:	f007 ff53 	bl	18830 <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_ALREADY_INITIALIZED
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   1098a:	2301      	movs	r3, #1
   1098c:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    }

    return RetVal;
   10990:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10994:	4618      	mov	r0, r3
   10996:	b005      	add	sp, #20
   10998:	f85d fb04 	ldr.w	pc, [sp], #4
   1099c:	1fff8b3c 	.word	0x1fff8b3c

000109a0 <Pwm_EndValidateGlobalConfigCall>:
*
*/
static inline void Pwm_EndValidateGlobalConfigCall(uint32           CoreId,
                                                   Std_ReturnType   ValidCall,
                                                   uint8            ServiceId)
{
   109a0:	b082      	sub	sp, #8
   109a2:	9001      	str	r0, [sp, #4]
   109a4:	460b      	mov	r3, r1
   109a6:	f88d 3003 	strb.w	r3, [sp, #3]
   109aa:	4613      	mov	r3, r2
   109ac:	f88d 3002 	strb.w	r3, [sp, #2]
    /* Change the state of the driver only if the previous call to
    Pwm_ValidateGlobalConfigCall() stated that the API call is valid */
    if ((Std_ReturnType)E_OK == ValidCall)
   109b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   109b4:	2b00      	cmp	r3, #0
   109b6:	d116      	bne.n	109e6 <Pwm_EndValidateGlobalConfigCall+0x46>
    {
        if (PWM_DEINIT_ID == ServiceId)
   109b8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   109bc:	2b01      	cmp	r3, #1
   109be:	d109      	bne.n	109d4 <Pwm_EndValidateGlobalConfigCall+0x34>
        {
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_UNINIT;
   109c0:	490a      	ldr	r1, [pc, #40]	; (109ec <Pwm_EndValidateGlobalConfigCall+0x4c>)
   109c2:	9a01      	ldr	r2, [sp, #4]
   109c4:	4613      	mov	r3, r2
   109c6:	005b      	lsls	r3, r3, #1
   109c8:	4413      	add	r3, r2
   109ca:	00db      	lsls	r3, r3, #3
   109cc:	440b      	add	r3, r1
   109ce:	2200      	movs	r2, #0
   109d0:	601a      	str	r2, [r3, #0]
        else
        {
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_IDLE;
        }
    }
}
   109d2:	e008      	b.n	109e6 <Pwm_EndValidateGlobalConfigCall+0x46>
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_IDLE;
   109d4:	4905      	ldr	r1, [pc, #20]	; (109ec <Pwm_EndValidateGlobalConfigCall+0x4c>)
   109d6:	9a01      	ldr	r2, [sp, #4]
   109d8:	4613      	mov	r3, r2
   109da:	005b      	lsls	r3, r3, #1
   109dc:	4413      	add	r3, r2
   109de:	00db      	lsls	r3, r3, #3
   109e0:	440b      	add	r3, r1
   109e2:	2201      	movs	r2, #1
   109e4:	601a      	str	r2, [r3, #0]
}
   109e6:	bf00      	nop
   109e8:	b002      	add	sp, #8
   109ea:	4770      	bx	lr
   109ec:	1fff8b3c 	.word	0x1fff8b3c

000109f0 <Pwm_ValidateChannelConfigCall>:
*
*/
static inline Std_ReturnType Pwm_ValidateChannelConfigCall(uint32          CoreId,
                                                           Pwm_ChannelType ChannelNumber,
                                                           uint8           ServiceId)
{
   109f0:	b500      	push	{lr}
   109f2:	b085      	sub	sp, #20
   109f4:	9001      	str	r0, [sp, #4]
   109f6:	460b      	mov	r3, r1
   109f8:	f88d 3003 	strb.w	r3, [sp, #3]
   109fc:	4613      	mov	r3, r2
   109fe:	f88d 3002 	strb.w	r3, [sp, #2]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType          RetVal = (Std_ReturnType)E_OK;
   10a02:	2300      	movs	r3, #0
   10a04:	f88d 300f 	strb.w	r3, [sp, #15]
    Pwm_ChannelType         PartitionChannelIdx;

    /* Check if the driver is initialized */
    if (PWM_STATE_UNINIT == Pwm_aState[CoreId].PwmDriverState)
   10a08:	4925      	ldr	r1, [pc, #148]	; (10aa0 <Pwm_ValidateChannelConfigCall+0xb0>)
   10a0a:	9a01      	ldr	r2, [sp, #4]
   10a0c:	4613      	mov	r3, r2
   10a0e:	005b      	lsls	r3, r3, #1
   10a10:	4413      	add	r3, r2
   10a12:	00db      	lsls	r3, r3, #3
   10a14:	440b      	add	r3, r1
   10a16:	681b      	ldr	r3, [r3, #0]
   10a18:	2b00      	cmp	r3, #0
   10a1a:	d10a      	bne.n	10a32 <Pwm_ValidateChannelConfigCall+0x42>
    {
        RetVal = (Std_ReturnType)E_NOT_OK;
   10a1c:	2301      	movs	r3, #1
   10a1e:	f88d 300f 	strb.w	r3, [sp, #15]

        /* Driver not initialized yet */
        (void)Det_ReportError
   10a22:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10a26:	2311      	movs	r3, #17
   10a28:	2100      	movs	r1, #0
   10a2a:	2079      	movs	r0, #121	; 0x79
   10a2c:	f007 ff00 	bl	18830 <Det_ReportError>
   10a30:	e02f      	b.n	10a92 <Pwm_ValidateChannelConfigCall+0xa2>
        );
    }
    else
    {
        /* Check that the channel is in valid range */
        if (PWM_CONFIG_LOGIC_CHANNELS <= ChannelNumber)
   10a32:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a36:	2b00      	cmp	r3, #0
   10a38:	d00a      	beq.n	10a50 <Pwm_ValidateChannelConfigCall+0x60>
        {
            RetVal = (Std_ReturnType)E_NOT_OK;
   10a3a:	2301      	movs	r3, #1
   10a3c:	f88d 300f 	strb.w	r3, [sp, #15]

            (void)Det_ReportError
   10a40:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10a44:	2312      	movs	r3, #18
   10a46:	2100      	movs	r1, #0
   10a48:	2079      	movs	r0, #121	; 0x79
   10a4a:	f007 fef1 	bl	18830 <Det_ReportError>
   10a4e:	e020      	b.n	10a92 <Pwm_ValidateChannelConfigCall+0xa2>
                (uint8)  PWM_E_PARAM_CHANNEL
            );
        }
        else
        {
            PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   10a50:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a54:	4619      	mov	r1, r3
   10a56:	9801      	ldr	r0, [sp, #4]
   10a58:	f7ff ff60 	bl	1091c <Pwm_GetPartitionChannelIdx>
   10a5c:	4603      	mov	r3, r0
   10a5e:	f88d 300e 	strb.w	r3, [sp, #14]

            /* Check that the channel is not in current partition */
            if (PartitionChannelIdx >= Pwm_aState[CoreId].PwmConfig->NumChannels)
   10a62:	490f      	ldr	r1, [pc, #60]	; (10aa0 <Pwm_ValidateChannelConfigCall+0xb0>)
   10a64:	9a01      	ldr	r2, [sp, #4]
   10a66:	4613      	mov	r3, r2
   10a68:	005b      	lsls	r3, r3, #1
   10a6a:	4413      	add	r3, r2
   10a6c:	00db      	lsls	r3, r3, #3
   10a6e:	440b      	add	r3, r1
   10a70:	3304      	adds	r3, #4
   10a72:	681b      	ldr	r3, [r3, #0]
   10a74:	781b      	ldrb	r3, [r3, #0]
   10a76:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10a7a:	429a      	cmp	r2, r3
   10a7c:	d309      	bcc.n	10a92 <Pwm_ValidateChannelConfigCall+0xa2>
            {
                RetVal = (Std_ReturnType)E_NOT_OK;
   10a7e:	2301      	movs	r3, #1
   10a80:	f88d 300f 	strb.w	r3, [sp, #15]

                (void)Det_ReportError
   10a84:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10a88:	2340      	movs	r3, #64	; 0x40
   10a8a:	2100      	movs	r1, #0
   10a8c:	2079      	movs	r0, #121	; 0x79
   10a8e:	f007 fecf 	bl	18830 <Det_ReportError>
            /* Do nothing */
            }
        }
    }

    return RetVal;
   10a92:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10a96:	4618      	mov	r0, r3
   10a98:	b005      	add	sp, #20
   10a9a:	f85d fb04 	ldr.w	pc, [sp], #4
   10a9e:	bf00      	nop
   10aa0:	1fff8b3c 	.word	0x1fff8b3c

00010aa4 <Pwm_EndValidateChannelConfigCall>:
*
* @return       void
*
*/
static inline void Pwm_EndValidateChannelConfigCall(Pwm_ChannelType ChannelNumber)
{
   10aa4:	b082      	sub	sp, #8
   10aa6:	4603      	mov	r3, r0
   10aa8:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Avoid compiler warning */
    (void)ChannelNumber;
}
   10aac:	bf00      	nop
   10aae:	b002      	add	sp, #8
   10ab0:	4770      	bx	lr

00010ab2 <Pwm_ValidateParamPtrInit>:
* @retval       E_NOT_OK        Pointer is invalid
*
*/
static inline Std_ReturnType Pwm_ValidateParamPtrInit(uint32                 CoreId,
                                                      const Pwm_ConfigType * ConfigPtr)
{
   10ab2:	b500      	push	{lr}
   10ab4:	b085      	sub	sp, #20
   10ab6:	9001      	str	r0, [sp, #4]
   10ab8:	9100      	str	r1, [sp, #0]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType      RetVal = (Std_ReturnType)E_OK;
   10aba:	2300      	movs	r3, #0
   10abc:	f88d 300f 	strb.w	r3, [sp, #15]
    /* For pre-compile, check DET error if the received config pointer is not NULL_PTR */
    if (NULL_PTR != ConfigPtr)
    {
#else
    /* For post build, check DET error if the received config pointer is NULL_PTR */
    if (NULL_PTR == ConfigPtr)
   10ac0:	9b00      	ldr	r3, [sp, #0]
   10ac2:	2b00      	cmp	r3, #0
   10ac4:	d108      	bne.n	10ad8 <Pwm_ValidateParamPtrInit+0x26>
    {
#endif
        /* Avoid compiler warning */
        (void)CoreId;

        (void)Det_ReportError
   10ac6:	2310      	movs	r3, #16
   10ac8:	2200      	movs	r2, #0
   10aca:	2100      	movs	r1, #0
   10acc:	2079      	movs	r0, #121	; 0x79
   10ace:	f007 feaf 	bl	18830 <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  PWM_INIT_ID,
            (uint8)  PWM_E_INIT_FAILED
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10ad2:	2301      	movs	r3, #1
   10ad4:	f88d 300f 	strb.w	r3, [sp, #15]
    #endif
        /* Do nothing */
    }
#endif

    return RetVal;
   10ad8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10adc:	4618      	mov	r0, r3
   10ade:	b005      	add	sp, #20
   10ae0:	f85d fb04 	ldr.w	pc, [sp], #4

00010ae4 <Pwm_ValidateParamDuty>:
* @retval       E_NOT_OK          Duty Cycle is invalid
*
*/
static inline Std_ReturnType Pwm_ValidateParamDuty(uint16   DutyCycle,
                                                   uint8    ServiceId)
{
   10ae4:	b500      	push	{lr}
   10ae6:	b085      	sub	sp, #20
   10ae8:	4603      	mov	r3, r0
   10aea:	460a      	mov	r2, r1
   10aec:	f8ad 3006 	strh.w	r3, [sp, #6]
   10af0:	4613      	mov	r3, r2
   10af2:	f88d 3005 	strb.w	r3, [sp, #5]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   10af6:	2300      	movs	r3, #0
   10af8:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if the DutyCycle is in valid range */
    if (DutyCycle > PWM_DUTY_CYCLE_100)
   10afc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10b04:	d909      	bls.n	10b1a <Pwm_ValidateParamDuty+0x36>
    {
        (void)Det_ReportError
   10b06:	f89d 2005 	ldrb.w	r2, [sp, #5]
   10b0a:	2332      	movs	r3, #50	; 0x32
   10b0c:	2100      	movs	r1, #0
   10b0e:	2079      	movs	r0, #121	; 0x79
   10b10:	f007 fe8e 	bl	18830 <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  ServiceId,
            (uint8)  PWM_E_DUTYCYCLE_RANGE
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10b14:	2301      	movs	r3, #1
   10b16:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return RetVal;
   10b1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10b1e:	4618      	mov	r0, r3
   10b20:	b005      	add	sp, #20
   10b22:	f85d fb04 	ldr.w	pc, [sp], #4

00010b26 <Pwm_ValidateParamsPeriodClass>:
static inline Std_ReturnType Pwm_ValidateParamsPeriodClass(uint32                CoreId,
                                                           Pwm_ChannelType       ChannelNumber,
                                                           Pwm_ChannelClassType  ChannelClass,
                                                           Pwm_PeriodType        Period,
                                                           uint8                 ServiceId)
{
   10b26:	b500      	push	{lr}
   10b28:	b087      	sub	sp, #28
   10b2a:	9003      	str	r0, [sp, #12]
   10b2c:	9201      	str	r2, [sp, #4]
   10b2e:	461a      	mov	r2, r3
   10b30:	460b      	mov	r3, r1
   10b32:	f88d 300b 	strb.w	r3, [sp, #11]
   10b36:	4613      	mov	r3, r2
   10b38:	f8ad 3008 	strh.w	r3, [sp, #8]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType              RetVal = (Std_ReturnType)E_OK;
   10b3c:	2300      	movs	r3, #0
   10b3e:	f88d 3017 	strb.w	r3, [sp, #23]
#if (PWM_MAX_PERIOD_PLAUSABILITY == STD_ON)
    uint32                      PeriodMaxValue = (uint32)0U;
   10b42:	2300      	movs	r3, #0
   10b44:	9304      	str	r3, [sp, #16]
    (void)ChannelNumber;
    (void)CoreId;
#endif

    /* Check if channel supports updates of the period */
    if (PWM_VARIABLE_PERIOD != ChannelClass)
   10b46:	9b01      	ldr	r3, [sp, #4]
   10b48:	2b00      	cmp	r3, #0
   10b4a:	d00a      	beq.n	10b62 <Pwm_ValidateParamsPeriodClass+0x3c>
    {
        (void)Det_ReportError
   10b4c:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10b50:	2313      	movs	r3, #19
   10b52:	2100      	movs	r1, #0
   10b54:	2079      	movs	r0, #121	; 0x79
   10b56:	f007 fe6b 	bl	18830 <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  ServiceId,
            (uint8)  PWM_E_PERIOD_UNCHANGEABLE
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10b5a:	2301      	movs	r3, #1
   10b5c:	f88d 3017 	strb.w	r3, [sp, #23]
   10b60:	e023      	b.n	10baa <Pwm_ValidateParamsPeriodClass+0x84>
    }
    else
    {
#if (PWM_MAX_PERIOD_PLAUSABILITY == STD_ON)
        PeriodMaxValue = (uint32)Pwm_Ipw_GetMaxPeriodValue(&((*Pwm_aState[CoreId].PwmChannelConfigs)[ChannelNumber].IpwChannelCfg));
   10b62:	4915      	ldr	r1, [pc, #84]	; (10bb8 <Pwm_ValidateParamsPeriodClass+0x92>)
   10b64:	9a03      	ldr	r2, [sp, #12]
   10b66:	4613      	mov	r3, r2
   10b68:	005b      	lsls	r3, r3, #1
   10b6a:	4413      	add	r3, r2
   10b6c:	00db      	lsls	r3, r3, #3
   10b6e:	440b      	add	r3, r1
   10b70:	3310      	adds	r3, #16
   10b72:	6819      	ldr	r1, [r3, #0]
   10b74:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10b78:	4613      	mov	r3, r2
   10b7a:	005b      	lsls	r3, r3, #1
   10b7c:	4413      	add	r3, r2
   10b7e:	00db      	lsls	r3, r3, #3
   10b80:	440b      	add	r3, r1
   10b82:	3308      	adds	r3, #8
   10b84:	4618      	mov	r0, r3
   10b86:	f000 fc8b 	bl	114a0 <Pwm_Ipw_GetMaxPeriodValue>
   10b8a:	9004      	str	r0, [sp, #16]

        /* Check if period is in range */
        if ((uint32)Period > PeriodMaxValue)
   10b8c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   10b90:	9a04      	ldr	r2, [sp, #16]
   10b92:	429a      	cmp	r2, r3
   10b94:	d209      	bcs.n	10baa <Pwm_ValidateParamsPeriodClass+0x84>
        {
            (void)Det_ReportError
   10b96:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10b9a:	231a      	movs	r3, #26
   10b9c:	2100      	movs	r1, #0
   10b9e:	2079      	movs	r0, #121	; 0x79
   10ba0:	f007 fe46 	bl	18830 <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_PERIODVALUE
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   10ba4:	2301      	movs	r3, #1
   10ba6:	f88d 3017 	strb.w	r3, [sp, #23]
#else
        /* Nothing to do in this branch */
#endif
    }

    return RetVal;
   10baa:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   10bae:	4618      	mov	r0, r3
   10bb0:	b007      	add	sp, #28
   10bb2:	f85d fb04 	ldr.w	pc, [sp], #4
   10bb6:	bf00      	nop
   10bb8:	1fff8b3c 	.word	0x1fff8b3c

00010bbc <Pwm_ValidateSetOutPutToIdle>:
* @retval           RetVal          E_NOT_OK  Set output to idle is not valid
                                    E_OK      Set output to idle is valid
*/
static inline Std_ReturnType Pwm_ValidateSetOutPutToIdle(uint32            CoreId,
                                                         Pwm_ChannelType   ChannelNumber)
{
   10bbc:	b500      	push	{lr}
   10bbe:	b085      	sub	sp, #20
   10bc0:	9001      	str	r0, [sp, #4]
   10bc2:	460b      	mov	r3, r1
   10bc4:	f88d 3003 	strb.w	r3, [sp, #3]
    
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   10bc8:	2300      	movs	r3, #0
   10bca:	f88d 300f 	strb.w	r3, [sp, #15]

    RetVal = Pwm_Ipw_ValidateSetOutPutToIdle(&((*Pwm_aState[CoreId].PwmChannelConfigs)[ChannelNumber].IpwChannelCfg));
   10bce:	4913      	ldr	r1, [pc, #76]	; (10c1c <Pwm_ValidateSetOutPutToIdle+0x60>)
   10bd0:	9a01      	ldr	r2, [sp, #4]
   10bd2:	4613      	mov	r3, r2
   10bd4:	005b      	lsls	r3, r3, #1
   10bd6:	4413      	add	r3, r2
   10bd8:	00db      	lsls	r3, r3, #3
   10bda:	440b      	add	r3, r1
   10bdc:	3310      	adds	r3, #16
   10bde:	6819      	ldr	r1, [r3, #0]
   10be0:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10be4:	4613      	mov	r3, r2
   10be6:	005b      	lsls	r3, r3, #1
   10be8:	4413      	add	r3, r2
   10bea:	00db      	lsls	r3, r3, #3
   10bec:	440b      	add	r3, r1
   10bee:	3308      	adds	r3, #8
   10bf0:	4618      	mov	r0, r3
   10bf2:	f000 fc3f 	bl	11474 <Pwm_Ipw_ValidateSetOutPutToIdle>
   10bf6:	4603      	mov	r3, r0
   10bf8:	f88d 300f 	strb.w	r3, [sp, #15]

    if((Std_ReturnType)E_OK != RetVal)
   10bfc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10c00:	2b00      	cmp	r3, #0
   10c02:	d005      	beq.n	10c10 <Pwm_ValidateSetOutPutToIdle+0x54>
    {
        (void)Det_ReportError
   10c04:	2342      	movs	r3, #66	; 0x42
   10c06:	2204      	movs	r2, #4
   10c08:	2100      	movs	r1, #0
   10c0a:	2079      	movs	r0, #121	; 0x79
   10c0c:	f007 fe10 	bl	18830 <Det_ReportError>
            (uint8)  PWM_SETOUTPUTTOIDLE_ID,
            (uint8)  PWM_E_SETOUTPUTTOIDLE_NOT_SUPPORTED
        );
    }

    return RetVal;
   10c10:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10c14:	4618      	mov	r0, r3
   10c16:	b005      	add	sp, #20
   10c18:	f85d fb04 	ldr.w	pc, [sp], #4
   10c1c:	1fff8b3c 	.word	0x1fff8b3c

00010c20 <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
   10c20:	b510      	push	{r4, lr}
   10c22:	b084      	sub	sp, #16
   10c24:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10c26:	2300      	movs	r3, #0
   10c28:	9302      	str	r3, [sp, #8]

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    CallIsValid = Pwm_ValidateGlobalConfigCall(CoreId, PWM_INIT_ID);
   10c2a:	2100      	movs	r1, #0
   10c2c:	9802      	ldr	r0, [sp, #8]
   10c2e:	f7ff fe7f 	bl	10930 <Pwm_ValidateGlobalConfigCall>
   10c32:	4603      	mov	r3, r0
   10c34:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == CallIsValid)
   10c38:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10c3c:	2b00      	cmp	r3, #0
   10c3e:	f040 8089 	bne.w	10d54 <Pwm_Init+0x134>
    {
#endif

#if (PWM_PARAM_CHECK == STD_ON)
        CallIsValid = Pwm_ValidateParamPtrInit(CoreId, ConfigPtr);
   10c42:	9901      	ldr	r1, [sp, #4]
   10c44:	9802      	ldr	r0, [sp, #8]
   10c46:	f7ff ff34 	bl	10ab2 <Pwm_ValidateParamPtrInit>
   10c4a:	4603      	mov	r3, r0
   10c4c:	f88d 300f 	strb.w	r3, [sp, #15]

        if ((Std_ReturnType)E_OK == CallIsValid)
   10c50:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10c54:	2b00      	cmp	r3, #0
   10c56:	d17d      	bne.n	10d54 <Pwm_Init+0x134>
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
   10c58:	4943      	ldr	r1, [pc, #268]	; (10d68 <Pwm_Init+0x148>)
   10c5a:	9a02      	ldr	r2, [sp, #8]
   10c5c:	4613      	mov	r3, r2
   10c5e:	005b      	lsls	r3, r3, #1
   10c60:	4413      	add	r3, r2
   10c62:	00db      	lsls	r3, r3, #3
   10c64:	440b      	add	r3, r1
   10c66:	3304      	adds	r3, #4
   10c68:	9a01      	ldr	r2, [sp, #4]
   10c6a:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10c6c:	2300      	movs	r3, #0
   10c6e:	f88d 300e 	strb.w	r3, [sp, #14]
   10c72:	e018      	b.n	10ca6 <Pwm_Init+0x86>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
   10c74:	493c      	ldr	r1, [pc, #240]	; (10d68 <Pwm_Init+0x148>)
   10c76:	9a02      	ldr	r2, [sp, #8]
   10c78:	4613      	mov	r3, r2
   10c7a:	005b      	lsls	r3, r3, #1
   10c7c:	4413      	add	r3, r2
   10c7e:	00db      	lsls	r3, r3, #3
   10c80:	440b      	add	r3, r1
   10c82:	3304      	adds	r3, #4
   10c84:	681b      	ldr	r3, [r3, #0]
   10c86:	68d9      	ldr	r1, [r3, #12]
   10c88:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10c8c:	4613      	mov	r3, r2
   10c8e:	005b      	lsls	r3, r3, #1
   10c90:	4413      	add	r3, r2
   10c92:	009b      	lsls	r3, r3, #2
   10c94:	440b      	add	r3, r1
   10c96:	4618      	mov	r0, r3
   10c98:	f000 fa7a 	bl	11190 <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10c9c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10ca0:	3301      	adds	r3, #1
   10ca2:	f88d 300e 	strb.w	r3, [sp, #14]
   10ca6:	4930      	ldr	r1, [pc, #192]	; (10d68 <Pwm_Init+0x148>)
   10ca8:	9a02      	ldr	r2, [sp, #8]
   10caa:	4613      	mov	r3, r2
   10cac:	005b      	lsls	r3, r3, #1
   10cae:	4413      	add	r3, r2
   10cb0:	00db      	lsls	r3, r3, #3
   10cb2:	440b      	add	r3, r1
   10cb4:	3304      	adds	r3, #4
   10cb6:	681b      	ldr	r3, [r3, #0]
   10cb8:	7a1b      	ldrb	r3, [r3, #8]
   10cba:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10cbe:	429a      	cmp	r2, r3
   10cc0:	d3d8      	bcc.n	10c74 <Pwm_Init+0x54>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10cc2:	2300      	movs	r3, #0
   10cc4:	f88d 300e 	strb.w	r3, [sp, #14]
   10cc8:	e036      	b.n	10d38 <Pwm_Init+0x118>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
   10cca:	4927      	ldr	r1, [pc, #156]	; (10d68 <Pwm_Init+0x148>)
   10ccc:	9a02      	ldr	r2, [sp, #8]
   10cce:	4613      	mov	r3, r2
   10cd0:	005b      	lsls	r3, r3, #1
   10cd2:	4413      	add	r3, r2
   10cd4:	00db      	lsls	r3, r3, #3
   10cd6:	440b      	add	r3, r1
   10cd8:	3304      	adds	r3, #4
   10cda:	681b      	ldr	r3, [r3, #0]
   10cdc:	6859      	ldr	r1, [r3, #4]
   10cde:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10ce2:	f89d 000e 	ldrb.w	r0, [sp, #14]
   10ce6:	4613      	mov	r3, r2
   10ce8:	005b      	lsls	r3, r3, #1
   10cea:	4413      	add	r3, r2
   10cec:	00db      	lsls	r3, r3, #3
   10cee:	4419      	add	r1, r3
   10cf0:	4c1d      	ldr	r4, [pc, #116]	; (10d68 <Pwm_Init+0x148>)
   10cf2:	9a02      	ldr	r2, [sp, #8]
   10cf4:	4613      	mov	r3, r2
   10cf6:	005b      	lsls	r3, r3, #1
   10cf8:	4413      	add	r3, r2
   10cfa:	005b      	lsls	r3, r3, #1
   10cfc:	4403      	add	r3, r0
   10cfe:	3304      	adds	r3, #4
   10d00:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
   10d04:	4918      	ldr	r1, [pc, #96]	; (10d68 <Pwm_Init+0x148>)
   10d06:	9a02      	ldr	r2, [sp, #8]
   10d08:	4613      	mov	r3, r2
   10d0a:	005b      	lsls	r3, r3, #1
   10d0c:	4413      	add	r3, r2
   10d0e:	00db      	lsls	r3, r3, #3
   10d10:	440b      	add	r3, r1
   10d12:	3304      	adds	r3, #4
   10d14:	681b      	ldr	r3, [r3, #0]
   10d16:	6859      	ldr	r1, [r3, #4]
   10d18:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10d1c:	4613      	mov	r3, r2
   10d1e:	005b      	lsls	r3, r3, #1
   10d20:	4413      	add	r3, r2
   10d22:	00db      	lsls	r3, r3, #3
   10d24:	3308      	adds	r3, #8
   10d26:	440b      	add	r3, r1
   10d28:	4618      	mov	r0, r3
   10d2a:	f000 fa0f 	bl	1114c <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10d2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10d32:	3301      	adds	r3, #1
   10d34:	f88d 300e 	strb.w	r3, [sp, #14]
   10d38:	490b      	ldr	r1, [pc, #44]	; (10d68 <Pwm_Init+0x148>)
   10d3a:	9a02      	ldr	r2, [sp, #8]
   10d3c:	4613      	mov	r3, r2
   10d3e:	005b      	lsls	r3, r3, #1
   10d40:	4413      	add	r3, r2
   10d42:	00db      	lsls	r3, r3, #3
   10d44:	440b      	add	r3, r1
   10d46:	3304      	adds	r3, #4
   10d48:	681b      	ldr	r3, [r3, #0]
   10d4a:	781b      	ldrb	r3, [r3, #0]
   10d4c:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10d50:	429a      	cmp	r2, r3
   10d52:	d3ba      	bcc.n	10cca <Pwm_Init+0xaa>
#endif

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
   10d54:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10d58:	2200      	movs	r2, #0
   10d5a:	4619      	mov	r1, r3
   10d5c:	9802      	ldr	r0, [sp, #8]
   10d5e:	f7ff fe1f 	bl	109a0 <Pwm_EndValidateGlobalConfigCall>
#endif
}
   10d62:	bf00      	nop
   10d64:	b004      	add	sp, #16
   10d66:	bd10      	pop	{r4, pc}
   10d68:	1fff8b3c 	.word	0x1fff8b3c

00010d6c <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
   10d6c:	b500      	push	{lr}
   10d6e:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10d70:	2300      	movs	r3, #0
   10d72:	9302      	str	r3, [sp, #8]

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    CallIsValid = Pwm_ValidateGlobalConfigCall(CoreId, PWM_DEINIT_ID);
   10d74:	2101      	movs	r1, #1
   10d76:	9802      	ldr	r0, [sp, #8]
   10d78:	f7ff fdda 	bl	10930 <Pwm_ValidateGlobalConfigCall>
   10d7c:	4603      	mov	r3, r0
   10d7e:	f88d 3007 	strb.w	r3, [sp, #7]

    if ((Std_ReturnType)E_OK == CallIsValid)
   10d82:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10d86:	2b00      	cmp	r3, #0
   10d88:	f040 808e 	bne.w	10ea8 <Pwm_DeInit+0x13c>
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10d8c:	2300      	movs	r3, #0
   10d8e:	f88d 300f 	strb.w	r3, [sp, #15]
   10d92:	e02a      	b.n	10dea <Pwm_DeInit+0x7e>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
   10d94:	494a      	ldr	r1, [pc, #296]	; (10ec0 <Pwm_DeInit+0x154>)
   10d96:	9a02      	ldr	r2, [sp, #8]
   10d98:	4613      	mov	r3, r2
   10d9a:	005b      	lsls	r3, r3, #1
   10d9c:	4413      	add	r3, r2
   10d9e:	00db      	lsls	r3, r3, #3
   10da0:	440b      	add	r3, r1
   10da2:	3310      	adds	r3, #16
   10da4:	6819      	ldr	r1, [r3, #0]
   10da6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10daa:	4613      	mov	r3, r2
   10dac:	005b      	lsls	r3, r3, #1
   10dae:	4413      	add	r3, r2
   10db0:	00db      	lsls	r3, r3, #3
   10db2:	440b      	add	r3, r1
   10db4:	f103 0008 	add.w	r0, r3, #8
   10db8:	4941      	ldr	r1, [pc, #260]	; (10ec0 <Pwm_DeInit+0x154>)
   10dba:	9a02      	ldr	r2, [sp, #8]
   10dbc:	4613      	mov	r3, r2
   10dbe:	005b      	lsls	r3, r3, #1
   10dc0:	4413      	add	r3, r2
   10dc2:	00db      	lsls	r3, r3, #3
   10dc4:	440b      	add	r3, r1
   10dc6:	3310      	adds	r3, #16
   10dc8:	6819      	ldr	r1, [r3, #0]
   10dca:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10dce:	4613      	mov	r3, r2
   10dd0:	005b      	lsls	r3, r3, #1
   10dd2:	4413      	add	r3, r2
   10dd4:	00db      	lsls	r3, r3, #3
   10dd6:	440b      	add	r3, r1
   10dd8:	695b      	ldr	r3, [r3, #20]
   10dda:	4619      	mov	r1, r3
   10ddc:	f000 fa2e 	bl	1123c <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10de0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10de4:	3301      	adds	r3, #1
   10de6:	f88d 300f 	strb.w	r3, [sp, #15]
   10dea:	4935      	ldr	r1, [pc, #212]	; (10ec0 <Pwm_DeInit+0x154>)
   10dec:	9a02      	ldr	r2, [sp, #8]
   10dee:	4613      	mov	r3, r2
   10df0:	005b      	lsls	r3, r3, #1
   10df2:	4413      	add	r3, r2
   10df4:	00db      	lsls	r3, r3, #3
   10df6:	440b      	add	r3, r1
   10df8:	3304      	adds	r3, #4
   10dfa:	681b      	ldr	r3, [r3, #0]
   10dfc:	781b      	ldrb	r3, [r3, #0]
   10dfe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10e02:	429a      	cmp	r2, r3
   10e04:	d3c6      	bcc.n	10d94 <Pwm_DeInit+0x28>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
   10e06:	492e      	ldr	r1, [pc, #184]	; (10ec0 <Pwm_DeInit+0x154>)
   10e08:	9a02      	ldr	r2, [sp, #8]
   10e0a:	4613      	mov	r3, r2
   10e0c:	005b      	lsls	r3, r3, #1
   10e0e:	4413      	add	r3, r2
   10e10:	00db      	lsls	r3, r3, #3
   10e12:	440b      	add	r3, r1
   10e14:	3304      	adds	r3, #4
   10e16:	681b      	ldr	r3, [r3, #0]
   10e18:	9300      	str	r3, [sp, #0]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10e1a:	2300      	movs	r3, #0
   10e1c:	f88d 300f 	strb.w	r3, [sp, #15]
   10e20:	e010      	b.n	10e44 <Pwm_DeInit+0xd8>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
   10e22:	9b00      	ldr	r3, [sp, #0]
   10e24:	68d9      	ldr	r1, [r3, #12]
   10e26:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10e2a:	4613      	mov	r3, r2
   10e2c:	005b      	lsls	r3, r3, #1
   10e2e:	4413      	add	r3, r2
   10e30:	009b      	lsls	r3, r3, #2
   10e32:	440b      	add	r3, r1
   10e34:	4618      	mov	r0, r3
   10e36:	f000 fa21 	bl	1127c <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10e3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10e3e:	3301      	adds	r3, #1
   10e40:	f88d 300f 	strb.w	r3, [sp, #15]
   10e44:	491e      	ldr	r1, [pc, #120]	; (10ec0 <Pwm_DeInit+0x154>)
   10e46:	9a02      	ldr	r2, [sp, #8]
   10e48:	4613      	mov	r3, r2
   10e4a:	005b      	lsls	r3, r3, #1
   10e4c:	4413      	add	r3, r2
   10e4e:	00db      	lsls	r3, r3, #3
   10e50:	440b      	add	r3, r1
   10e52:	3304      	adds	r3, #4
   10e54:	681b      	ldr	r3, [r3, #0]
   10e56:	7a1b      	ldrb	r3, [r3, #8]
   10e58:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10e5c:	429a      	cmp	r2, r3
   10e5e:	d3e0      	bcc.n	10e22 <Pwm_DeInit+0xb6>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
   10e60:	4917      	ldr	r1, [pc, #92]	; (10ec0 <Pwm_DeInit+0x154>)
   10e62:	9a02      	ldr	r2, [sp, #8]
   10e64:	4613      	mov	r3, r2
   10e66:	005b      	lsls	r3, r3, #1
   10e68:	4413      	add	r3, r2
   10e6a:	00db      	lsls	r3, r3, #3
   10e6c:	440b      	add	r3, r1
   10e6e:	3304      	adds	r3, #4
   10e70:	2200      	movs	r2, #0
   10e72:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
   10e74:	2300      	movs	r3, #0
   10e76:	f88d 300f 	strb.w	r3, [sp, #15]
   10e7a:	e011      	b.n	10ea0 <Pwm_DeInit+0x134>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
   10e7c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   10e80:	480f      	ldr	r0, [pc, #60]	; (10ec0 <Pwm_DeInit+0x154>)
   10e82:	9a02      	ldr	r2, [sp, #8]
   10e84:	4613      	mov	r3, r2
   10e86:	005b      	lsls	r3, r3, #1
   10e88:	4413      	add	r3, r2
   10e8a:	005b      	lsls	r3, r3, #1
   10e8c:	440b      	add	r3, r1
   10e8e:	3304      	adds	r3, #4
   10e90:	2200      	movs	r2, #0
   10e92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
   10e96:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10e9a:	3301      	adds	r3, #1
   10e9c:	f88d 300f 	strb.w	r3, [sp, #15]
   10ea0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d0e9      	beq.n	10e7c <Pwm_DeInit+0x110>
#endif

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
   10ea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10eac:	2201      	movs	r2, #1
   10eae:	4619      	mov	r1, r3
   10eb0:	9802      	ldr	r0, [sp, #8]
   10eb2:	f7ff fd75 	bl	109a0 <Pwm_EndValidateGlobalConfigCall>
#endif

}
   10eb6:	bf00      	nop
   10eb8:	b005      	add	sp, #20
   10eba:	f85d fb04 	ldr.w	pc, [sp], #4
   10ebe:	bf00      	nop
   10ec0:	1fff8b3c 	.word	0x1fff8b3c

00010ec4 <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
   10ec4:	b500      	push	{lr}
   10ec6:	b087      	sub	sp, #28
   10ec8:	4603      	mov	r3, r0
   10eca:	460a      	mov	r2, r1
   10ecc:	f88d 3007 	strb.w	r3, [sp, #7]
   10ed0:	4613      	mov	r3, r2
   10ed2:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
   10ed6:	2300      	movs	r3, #0
   10ed8:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10edc:	2300      	movs	r3, #0
   10ede:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
   10ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10ee4:	2202      	movs	r2, #2
   10ee6:	4619      	mov	r1, r3
   10ee8:	9804      	ldr	r0, [sp, #16]
   10eea:	f7ff fd81 	bl	109f0 <Pwm_ValidateChannelConfigCall>
   10eee:	4603      	mov	r3, r0
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	d136      	bne.n	10f62 <Pwm_SetDutyCycle+0x9e>
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   10ef4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10ef8:	4619      	mov	r1, r3
   10efa:	9804      	ldr	r0, [sp, #16]
   10efc:	f7ff fd0e 	bl	1091c <Pwm_GetPartitionChannelIdx>
   10f00:	4603      	mov	r3, r0
   10f02:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
   10f06:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10f0a:	2102      	movs	r1, #2
   10f0c:	4618      	mov	r0, r3
   10f0e:	f7ff fde9 	bl	10ae4 <Pwm_ValidateParamDuty>
   10f12:	4603      	mov	r3, r0
   10f14:	2b00      	cmp	r3, #0
   10f16:	d124      	bne.n	10f62 <Pwm_SetDutyCycle+0x9e>
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   10f18:	4916      	ldr	r1, [pc, #88]	; (10f74 <Pwm_SetDutyCycle+0xb0>)
   10f1a:	9a04      	ldr	r2, [sp, #16]
   10f1c:	4613      	mov	r3, r2
   10f1e:	005b      	lsls	r3, r3, #1
   10f20:	4413      	add	r3, r2
   10f22:	00db      	lsls	r3, r3, #3
   10f24:	440b      	add	r3, r1
   10f26:	3310      	adds	r3, #16
   10f28:	6819      	ldr	r1, [r3, #0]
   10f2a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10f2e:	4613      	mov	r3, r2
   10f30:	005b      	lsls	r3, r3, #1
   10f32:	4413      	add	r3, r2
   10f34:	00db      	lsls	r3, r3, #3
   10f36:	440b      	add	r3, r1
   10f38:	f103 0208 	add.w	r2, r3, #8
   10f3c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10f40:	4611      	mov	r1, r2
   10f42:	4618      	mov	r0, r3
   10f44:	f000 f9b6 	bl	112b4 <Pwm_Ipw_SetDutyCycle>
   10f48:	4603      	mov	r3, r0
   10f4a:	f88d 3017 	strb.w	r3, [sp, #23]

            /* Avoid compiler warning */
            (void)RetVal;

#if (PWM_PARAM_CHECK == STD_ON)
            if ((Std_ReturnType)E_OK != RetVal)
   10f4e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10f52:	2b00      	cmp	r3, #0
   10f54:	d005      	beq.n	10f62 <Pwm_SetDutyCycle+0x9e>
            {
                (void)Det_ReportError
   10f56:	2334      	movs	r3, #52	; 0x34
   10f58:	2202      	movs	r2, #2
   10f5a:	2100      	movs	r1, #0
   10f5c:	2079      	movs	r0, #121	; 0x79
   10f5e:	f007 fc67 	bl	18830 <Det_ReportError>
#endif

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   10f62:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10f66:	4618      	mov	r0, r3
   10f68:	f7ff fd9c 	bl	10aa4 <Pwm_EndValidateChannelConfigCall>
#endif

}
   10f6c:	bf00      	nop
   10f6e:	b007      	add	sp, #28
   10f70:	f85d fb04 	ldr.w	pc, [sp], #4
   10f74:	1fff8b3c 	.word	0x1fff8b3c

00010f78 <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
   10f78:	b500      	push	{lr}
   10f7a:	b087      	sub	sp, #28
   10f7c:	4603      	mov	r3, r0
   10f7e:	f88d 300f 	strb.w	r3, [sp, #15]
   10f82:	460b      	mov	r3, r1
   10f84:	f8ad 300c 	strh.w	r3, [sp, #12]
   10f88:	4613      	mov	r3, r2
   10f8a:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10f8e:	2300      	movs	r3, #0
   10f90:	9305      	str	r3, [sp, #20]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
   10f92:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10f96:	2203      	movs	r2, #3
   10f98:	4619      	mov	r1, r3
   10f9a:	9805      	ldr	r0, [sp, #20]
   10f9c:	f7ff fd28 	bl	109f0 <Pwm_ValidateChannelConfigCall>
   10fa0:	4603      	mov	r3, r0
   10fa2:	2b00      	cmp	r3, #0
   10fa4:	d147      	bne.n	11036 <Pwm_SetPeriodAndDuty+0xbe>
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   10fa6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10faa:	4619      	mov	r1, r3
   10fac:	9805      	ldr	r0, [sp, #20]
   10fae:	f7ff fcb5 	bl	1091c <Pwm_GetPartitionChannelIdx>
   10fb2:	4603      	mov	r3, r0
   10fb4:	f88d 3013 	strb.w	r3, [sp, #19]

#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamsPeriodClass(CoreId, PartitionChannelIdx, (*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].PwmChannelClass, Period, PWM_SETPERIODANDDUTY_ID))
   10fb8:	4923      	ldr	r1, [pc, #140]	; (11048 <Pwm_SetPeriodAndDuty+0xd0>)
   10fba:	9a05      	ldr	r2, [sp, #20]
   10fbc:	4613      	mov	r3, r2
   10fbe:	005b      	lsls	r3, r3, #1
   10fc0:	4413      	add	r3, r2
   10fc2:	00db      	lsls	r3, r3, #3
   10fc4:	440b      	add	r3, r1
   10fc6:	3310      	adds	r3, #16
   10fc8:	6819      	ldr	r1, [r3, #0]
   10fca:	f89d 2013 	ldrb.w	r2, [sp, #19]
   10fce:	4613      	mov	r3, r2
   10fd0:	005b      	lsls	r3, r3, #1
   10fd2:	4413      	add	r3, r2
   10fd4:	00db      	lsls	r3, r3, #3
   10fd6:	440b      	add	r3, r1
   10fd8:	685a      	ldr	r2, [r3, #4]
   10fda:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10fde:	f89d 1013 	ldrb.w	r1, [sp, #19]
   10fe2:	2003      	movs	r0, #3
   10fe4:	9000      	str	r0, [sp, #0]
   10fe6:	9805      	ldr	r0, [sp, #20]
   10fe8:	f7ff fd9d 	bl	10b26 <Pwm_ValidateParamsPeriodClass>
   10fec:	4603      	mov	r3, r0
   10fee:	2b00      	cmp	r3, #0
   10ff0:	d121      	bne.n	11036 <Pwm_SetPeriodAndDuty+0xbe>
        {
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
   10ff2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   10ff6:	2103      	movs	r1, #3
   10ff8:	4618      	mov	r0, r3
   10ffa:	f7ff fd73 	bl	10ae4 <Pwm_ValidateParamDuty>
   10ffe:	4603      	mov	r3, r0
   11000:	2b00      	cmp	r3, #0
   11002:	d118      	bne.n	11036 <Pwm_SetPeriodAndDuty+0xbe>
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   11004:	4910      	ldr	r1, [pc, #64]	; (11048 <Pwm_SetPeriodAndDuty+0xd0>)
   11006:	9a05      	ldr	r2, [sp, #20]
   11008:	4613      	mov	r3, r2
   1100a:	005b      	lsls	r3, r3, #1
   1100c:	4413      	add	r3, r2
   1100e:	00db      	lsls	r3, r3, #3
   11010:	440b      	add	r3, r1
   11012:	3310      	adds	r3, #16
   11014:	6819      	ldr	r1, [r3, #0]
   11016:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1101a:	4613      	mov	r3, r2
   1101c:	005b      	lsls	r3, r3, #1
   1101e:	4413      	add	r3, r2
   11020:	00db      	lsls	r3, r3, #3
   11022:	440b      	add	r3, r1
   11024:	f103 0208 	add.w	r2, r3, #8
   11028:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1102c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11030:	4618      	mov	r0, r3
   11032:	f000 f98b 	bl	1134c <Pwm_Ipw_SetPeriodAndDuty>
#endif

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   11036:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1103a:	4618      	mov	r0, r3
   1103c:	f7ff fd32 	bl	10aa4 <Pwm_EndValidateChannelConfigCall>
#endif

}
   11040:	bf00      	nop
   11042:	b007      	add	sp, #28
   11044:	f85d fb04 	ldr.w	pc, [sp], #4
   11048:	1fff8b3c 	.word	0x1fff8b3c

0001104c <Pwm_SetOutputToIdle>:
*
* @implements   Pwm_SetOutputToIdle_Activity
*
*/
void Pwm_SetOutputToIdle(Pwm_ChannelType ChannelNumber)
{
   1104c:	b500      	push	{lr}
   1104e:	b085      	sub	sp, #20
   11050:	4603      	mov	r3, r0
   11052:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   11056:	2300      	movs	r3, #0
   11058:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETOUTPUTTOIDLE_ID))
   1105a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1105e:	2204      	movs	r2, #4
   11060:	4619      	mov	r1, r3
   11062:	9803      	ldr	r0, [sp, #12]
   11064:	f7ff fcc4 	bl	109f0 <Pwm_ValidateChannelConfigCall>
   11068:	4603      	mov	r3, r0
   1106a:	2b00      	cmp	r3, #0
   1106c:	d143      	bne.n	110f6 <Pwm_SetOutputToIdle+0xaa>
    {
#endif

        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   1106e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11072:	4619      	mov	r1, r3
   11074:	9803      	ldr	r0, [sp, #12]
   11076:	f7ff fc51 	bl	1091c <Pwm_GetPartitionChannelIdx>
   1107a:	4603      	mov	r3, r0
   1107c:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(PWM_SETOUTPUTTOIDLE_PLAUSABILITY) && (PWM_SETOUTPUTTOIDLE_PLAUSABILITY == STD_ON) && (PWM_PARAM_CHECK == STD_ON))
        if((Std_ReturnType)E_OK == Pwm_ValidateSetOutPutToIdle(CoreId, PartitionChannelIdx))
   11080:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11084:	4619      	mov	r1, r3
   11086:	9803      	ldr	r0, [sp, #12]
   11088:	f7ff fd98 	bl	10bbc <Pwm_ValidateSetOutPutToIdle>
   1108c:	4603      	mov	r3, r0
   1108e:	2b00      	cmp	r3, #0
   11090:	d131      	bne.n	110f6 <Pwm_SetOutputToIdle+0xaa>
        {
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

            /* All validations passed. Here starts the actual functional code of the function */
            Pwm_Ipw_SetOutputToIdle((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].ChannelIdleState, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   11092:	491d      	ldr	r1, [pc, #116]	; (11108 <Pwm_SetOutputToIdle+0xbc>)
   11094:	9a03      	ldr	r2, [sp, #12]
   11096:	4613      	mov	r3, r2
   11098:	005b      	lsls	r3, r3, #1
   1109a:	4413      	add	r3, r2
   1109c:	00db      	lsls	r3, r3, #3
   1109e:	440b      	add	r3, r1
   110a0:	3310      	adds	r3, #16
   110a2:	6819      	ldr	r1, [r3, #0]
   110a4:	f89d 200b 	ldrb.w	r2, [sp, #11]
   110a8:	4613      	mov	r3, r2
   110aa:	005b      	lsls	r3, r3, #1
   110ac:	4413      	add	r3, r2
   110ae:	00db      	lsls	r3, r3, #3
   110b0:	440b      	add	r3, r1
   110b2:	6958      	ldr	r0, [r3, #20]
   110b4:	4914      	ldr	r1, [pc, #80]	; (11108 <Pwm_SetOutputToIdle+0xbc>)
   110b6:	9a03      	ldr	r2, [sp, #12]
   110b8:	4613      	mov	r3, r2
   110ba:	005b      	lsls	r3, r3, #1
   110bc:	4413      	add	r3, r2
   110be:	00db      	lsls	r3, r3, #3
   110c0:	440b      	add	r3, r1
   110c2:	3310      	adds	r3, #16
   110c4:	6819      	ldr	r1, [r3, #0]
   110c6:	f89d 200b 	ldrb.w	r2, [sp, #11]
   110ca:	4613      	mov	r3, r2
   110cc:	005b      	lsls	r3, r3, #1
   110ce:	4413      	add	r3, r2
   110d0:	00db      	lsls	r3, r3, #3
   110d2:	440b      	add	r3, r1
   110d4:	3308      	adds	r3, #8
   110d6:	4619      	mov	r1, r3
   110d8:	f000 f97e 	bl	113d8 <Pwm_Ipw_SetOutputToIdle>

            /* Mark the channel in idle output mode */
            Pwm_aState[CoreId].PwmChannelIdleState[PartitionChannelIdx] = TRUE;
   110dc:	f89d 100b 	ldrb.w	r1, [sp, #11]
   110e0:	4809      	ldr	r0, [pc, #36]	; (11108 <Pwm_SetOutputToIdle+0xbc>)
   110e2:	9a03      	ldr	r2, [sp, #12]
   110e4:	4613      	mov	r3, r2
   110e6:	005b      	lsls	r3, r3, #1
   110e8:	4413      	add	r3, r2
   110ea:	00db      	lsls	r3, r3, #3
   110ec:	4403      	add	r3, r0
   110ee:	440b      	add	r3, r1
   110f0:	3314      	adds	r3, #20
   110f2:	2201      	movs	r2, #1
   110f4:	701a      	strb	r2, [r3, #0]
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   110f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   110fa:	4618      	mov	r0, r3
   110fc:	f7ff fcd2 	bl	10aa4 <Pwm_EndValidateChannelConfigCall>
#endif

}
   11100:	bf00      	nop
   11102:	b005      	add	sp, #20
   11104:	f85d fb04 	ldr.w	pc, [sp], #4
   11108:	1fff8b3c 	.word	0x1fff8b3c

0001110c <Pwm_GetVersionInfo>:
*
* @implements   Pwm_GetVersionInfo_Activity
*
*/
void Pwm_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
   1110c:	b500      	push	{lr}
   1110e:	b083      	sub	sp, #12
   11110:	9001      	str	r0, [sp, #4]
#if (PWM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != versioninfo)
   11112:	9b01      	ldr	r3, [sp, #4]
   11114:	2b00      	cmp	r3, #0
   11116:	d00f      	beq.n	11138 <Pwm_GetVersionInfo+0x2c>
    {
#endif

        (versioninfo)->vendorID         = (uint16)PWM_VENDOR_ID;
   11118:	9b01      	ldr	r3, [sp, #4]
   1111a:	222b      	movs	r2, #43	; 0x2b
   1111c:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PWM_MODULE_ID;
   1111e:	9b01      	ldr	r3, [sp, #4]
   11120:	2279      	movs	r2, #121	; 0x79
   11122:	805a      	strh	r2, [r3, #2]

        (versioninfo)->sw_major_version = (uint8)PWM_SW_MAJOR_VERSION;
   11124:	9b01      	ldr	r3, [sp, #4]
   11126:	2202      	movs	r2, #2
   11128:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PWM_SW_MINOR_VERSION;
   1112a:	9b01      	ldr	r3, [sp, #4]
   1112c:	2200      	movs	r2, #0
   1112e:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PWM_SW_PATCH_VERSION;
   11130:	9b01      	ldr	r3, [sp, #4]
   11132:	2200      	movs	r2, #0
   11134:	719a      	strb	r2, [r3, #6]
            (uint8)  PWM_E_PARAM_POINTER
        );
    }
#endif

}
   11136:	e005      	b.n	11144 <Pwm_GetVersionInfo+0x38>
        (void)Det_ReportError
   11138:	2315      	movs	r3, #21
   1113a:	2208      	movs	r2, #8
   1113c:	2100      	movs	r1, #0
   1113e:	2079      	movs	r0, #121	; 0x79
   11140:	f007 fb76 	bl	18830 <Det_ReportError>
}
   11144:	bf00      	nop
   11146:	b003      	add	sp, #12
   11148:	f85d fb04 	ldr.w	pc, [sp], #4

0001114c <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
   1114c:	b410      	push	{r4}
   1114e:	b083      	sub	sp, #12
   11150:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
   11152:	9b01      	ldr	r3, [sp, #4]
   11154:	681b      	ldr	r3, [r3, #0]
   11156:	2b00      	cmp	r3, #0
   11158:	d010      	beq.n	1117c <Pwm_Ipw_Init+0x30>
   1115a:	2b01      	cmp	r3, #1
   1115c:	d110      	bne.n	11180 <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
   1115e:	9b01      	ldr	r3, [sp, #4]
   11160:	7a1b      	ldrb	r3, [r3, #8]
   11162:	461c      	mov	r4, r3
   11164:	9b01      	ldr	r3, [sp, #4]
   11166:	685b      	ldr	r3, [r3, #4]
   11168:	781b      	ldrb	r3, [r3, #0]
   1116a:	4618      	mov	r0, r3
   1116c:	9b01      	ldr	r3, [sp, #4]
   1116e:	8959      	ldrh	r1, [r3, #10]
   11170:	4a06      	ldr	r2, [pc, #24]	; (1118c <Pwm_Ipw_Init+0x40>)
   11172:	00e3      	lsls	r3, r4, #3
   11174:	4403      	add	r3, r0
   11176:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
   1117a:	e002      	b.n	11182 <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   1117c:	bf00      	nop
   1117e:	e000      	b.n	11182 <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
   11180:	bf00      	nop
    }
}
   11182:	bf00      	nop
   11184:	b003      	add	sp, #12
   11186:	f85d 4b04 	ldr.w	r4, [sp], #4
   1118a:	4770      	bx	lr
   1118c:	1fff91d4 	.word	0x1fff91d4

00011190 <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
   11190:	b500      	push	{lr}
   11192:	b085      	sub	sp, #20
   11194:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
   11196:	2300      	movs	r3, #0
   11198:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
   1119c:	2300      	movs	r3, #0
   1119e:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
   111a2:	9b01      	ldr	r3, [sp, #4]
   111a4:	685b      	ldr	r3, [r3, #4]
   111a6:	2b00      	cmp	r3, #0
   111a8:	d03c      	beq.n	11224 <Pwm_Ipw_InitInstance+0x94>
   111aa:	2b01      	cmp	r3, #1
   111ac:	d13c      	bne.n	11228 <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
   111ae:	9b01      	ldr	r3, [sp, #4]
   111b0:	689b      	ldr	r3, [r3, #8]
   111b2:	2b00      	cmp	r3, #0
   111b4:	d03a      	beq.n	1122c <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
   111b6:	9b01      	ldr	r3, [sp, #4]
   111b8:	781a      	ldrb	r2, [r3, #0]
   111ba:	9b01      	ldr	r3, [sp, #4]
   111bc:	689b      	ldr	r3, [r3, #8]
   111be:	4619      	mov	r1, r3
   111c0:	4610      	mov	r0, r2
   111c2:	f7fe fa0f 	bl	f5e4 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
   111c6:	2300      	movs	r3, #0
   111c8:	f88d 300f 	strb.w	r3, [sp, #15]
   111cc:	e022      	b.n	11214 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
   111ce:	9b01      	ldr	r3, [sp, #4]
   111d0:	689b      	ldr	r3, [r3, #8]
   111d2:	685a      	ldr	r2, [r3, #4]
   111d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   111d8:	009b      	lsls	r3, r3, #2
   111da:	4413      	add	r3, r2
   111dc:	681b      	ldr	r3, [r3, #0]
   111de:	781b      	ldrb	r3, [r3, #0]
   111e0:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
   111e4:	9b01      	ldr	r3, [sp, #4]
   111e6:	689b      	ldr	r3, [r3, #8]
   111e8:	685a      	ldr	r2, [r3, #4]
   111ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
   111ee:	009b      	lsls	r3, r3, #2
   111f0:	4413      	add	r3, r2
   111f2:	681a      	ldr	r2, [r3, #0]
   111f4:	9b01      	ldr	r3, [sp, #4]
   111f6:	781b      	ldrb	r3, [r3, #0]
   111f8:	4619      	mov	r1, r3
   111fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
   111fe:	6a12      	ldr	r2, [r2, #32]
   11200:	480d      	ldr	r0, [pc, #52]	; (11238 <Pwm_Ipw_InitInstance+0xa8>)
   11202:	00c9      	lsls	r1, r1, #3
   11204:	440b      	add	r3, r1
   11206:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
   1120a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1120e:	3301      	adds	r3, #1
   11210:	f88d 300f 	strb.w	r3, [sp, #15]
   11214:	9b01      	ldr	r3, [sp, #4]
   11216:	689b      	ldr	r3, [r3, #8]
   11218:	7a1b      	ldrb	r3, [r3, #8]
   1121a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1121e:	429a      	cmp	r2, r3
   11220:	d3d5      	bcc.n	111ce <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
   11222:	e003      	b.n	1122c <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
   11224:	bf00      	nop
   11226:	e002      	b.n	1122e <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
   11228:	bf00      	nop
   1122a:	e000      	b.n	1122e <Pwm_Ipw_InitInstance+0x9e>
            break;
   1122c:	bf00      	nop
    }
}
   1122e:	bf00      	nop
   11230:	b005      	add	sp, #20
   11232:	f85d fb04 	ldr.w	pc, [sp], #4
   11236:	bf00      	nop
   11238:	1fff9154 	.word	0x1fff9154

0001123c <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
   1123c:	b082      	sub	sp, #8
   1123e:	9001      	str	r0, [sp, #4]
   11240:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
   11242:	9b01      	ldr	r3, [sp, #4]
   11244:	681b      	ldr	r3, [r3, #0]
   11246:	2b00      	cmp	r3, #0
   11248:	d00f      	beq.n	1126a <Pwm_Ipw_DeInit+0x2e>
   1124a:	2b01      	cmp	r3, #1
   1124c:	d10f      	bne.n	1126e <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
   1124e:	9b01      	ldr	r3, [sp, #4]
   11250:	7a1b      	ldrb	r3, [r3, #8]
   11252:	4618      	mov	r0, r3
   11254:	9b01      	ldr	r3, [sp, #4]
   11256:	685b      	ldr	r3, [r3, #4]
   11258:	781b      	ldrb	r3, [r3, #0]
   1125a:	4619      	mov	r1, r3
   1125c:	4a06      	ldr	r2, [pc, #24]	; (11278 <Pwm_Ipw_DeInit+0x3c>)
   1125e:	00c3      	lsls	r3, r0, #3
   11260:	440b      	add	r3, r1
   11262:	2100      	movs	r1, #0
   11264:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
   11268:	e002      	b.n	11270 <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   1126a:	bf00      	nop
   1126c:	e000      	b.n	11270 <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
   1126e:	bf00      	nop
    }
    (void) ChannelIdleState;

}
   11270:	bf00      	nop
   11272:	b002      	add	sp, #8
   11274:	4770      	bx	lr
   11276:	bf00      	nop
   11278:	1fff91d4 	.word	0x1fff91d4

0001127c <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
   1127c:	b500      	push	{lr}
   1127e:	b083      	sub	sp, #12
   11280:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
   11282:	9b01      	ldr	r3, [sp, #4]
   11284:	685b      	ldr	r3, [r3, #4]
   11286:	2b00      	cmp	r3, #0
   11288:	d00b      	beq.n	112a2 <Pwm_Ipw_DeInitInstance+0x26>
   1128a:	2b01      	cmp	r3, #1
   1128c:	d10b      	bne.n	112a6 <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
   1128e:	9b01      	ldr	r3, [sp, #4]
   11290:	689b      	ldr	r3, [r3, #8]
   11292:	2b00      	cmp	r3, #0
   11294:	d009      	beq.n	112aa <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
   11296:	9b01      	ldr	r3, [sp, #4]
   11298:	781b      	ldrb	r3, [r3, #0]
   1129a:	4618      	mov	r0, r3
   1129c:	f7fe fa14 	bl	f6c8 <Ftm_Pwm_Ip_DeInit>
            }
            break;
   112a0:	e003      	b.n	112aa <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
   112a2:	bf00      	nop
   112a4:	e002      	b.n	112ac <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
   112a6:	bf00      	nop
   112a8:	e000      	b.n	112ac <Pwm_Ipw_DeInitInstance+0x30>
            break;
   112aa:	bf00      	nop
    }
}
   112ac:	bf00      	nop
   112ae:	b003      	add	sp, #12
   112b0:	f85d fb04 	ldr.w	pc, [sp], #4

000112b4 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
   112b4:	b500      	push	{lr}
   112b6:	b085      	sub	sp, #20
   112b8:	4603      	mov	r3, r0
   112ba:	9100      	str	r1, [sp, #0]
   112bc:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
   112c0:	2300      	movs	r3, #0
   112c2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
   112c6:	2300      	movs	r3, #0
   112c8:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
   112cc:	9b00      	ldr	r3, [sp, #0]
   112ce:	681b      	ldr	r3, [r3, #0]
   112d0:	2b00      	cmp	r3, #0
   112d2:	d02c      	beq.n	1132e <Pwm_Ipw_SetDutyCycle+0x7a>
   112d4:	2b01      	cmp	r3, #1
   112d6:	d12c      	bne.n	11332 <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
   112d8:	9b00      	ldr	r3, [sp, #0]
   112da:	685b      	ldr	r3, [r3, #4]
   112dc:	2b00      	cmp	r3, #0
   112de:	d02a      	beq.n	11336 <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
   112e0:	9b00      	ldr	r3, [sp, #0]
   112e2:	7a1b      	ldrb	r3, [r3, #8]
   112e4:	461a      	mov	r2, r3
   112e6:	4b17      	ldr	r3, [pc, #92]	; (11344 <Pwm_Ipw_SetDutyCycle+0x90>)
   112e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   112ec:	461a      	mov	r2, r3
   112ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   112f2:	fb02 f303 	mul.w	r3, r2, r3
   112f6:	0bdb      	lsrs	r3, r3, #15
   112f8:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
   112fc:	9b00      	ldr	r3, [sp, #0]
   112fe:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
   11300:	9b00      	ldr	r3, [sp, #0]
   11302:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
   11304:	7819      	ldrb	r1, [r3, #0]
   11306:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1130a:	2301      	movs	r3, #1
   1130c:	f7fe fa2e 	bl	f76c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
   11310:	9b00      	ldr	r3, [sp, #0]
   11312:	7a1b      	ldrb	r3, [r3, #8]
   11314:	4618      	mov	r0, r3
   11316:	9b00      	ldr	r3, [sp, #0]
   11318:	685b      	ldr	r3, [r3, #4]
   1131a:	781b      	ldrb	r3, [r3, #0]
   1131c:	461a      	mov	r2, r3
   1131e:	490a      	ldr	r1, [pc, #40]	; (11348 <Pwm_Ipw_SetDutyCycle+0x94>)
   11320:	00c3      	lsls	r3, r0, #3
   11322:	4413      	add	r3, r2
   11324:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   11328:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
   1132c:	e003      	b.n	11336 <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   1132e:	bf00      	nop
   11330:	e002      	b.n	11338 <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
   11332:	bf00      	nop
   11334:	e000      	b.n	11338 <Pwm_Ipw_SetDutyCycle+0x84>
            break;
   11336:	bf00      	nop
    }

    return RetVal;
   11338:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1133c:	4618      	mov	r0, r3
   1133e:	b005      	add	sp, #20
   11340:	f85d fb04 	ldr.w	pc, [sp], #4
   11344:	1fff8e2c 	.word	0x1fff8e2c
   11348:	1fff91d4 	.word	0x1fff91d4

0001134c <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
   1134c:	b510      	push	{r4, lr}
   1134e:	b086      	sub	sp, #24
   11350:	4603      	mov	r3, r0
   11352:	9202      	str	r2, [sp, #8]
   11354:	f8ad 300e 	strh.w	r3, [sp, #14]
   11358:	460b      	mov	r3, r1
   1135a:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
   1135e:	2300      	movs	r3, #0
   11360:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
   11364:	9b02      	ldr	r3, [sp, #8]
   11366:	681b      	ldr	r3, [r3, #0]
   11368:	2b00      	cmp	r3, #0
   1136a:	d02a      	beq.n	113c2 <Pwm_Ipw_SetPeriodAndDuty+0x76>
   1136c:	2b01      	cmp	r3, #1
   1136e:	d12a      	bne.n	113c6 <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
   11370:	9b02      	ldr	r3, [sp, #8]
   11372:	685b      	ldr	r3, [r3, #4]
   11374:	2b00      	cmp	r3, #0
   11376:	d028      	beq.n	113ca <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
   11378:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1137c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   11380:	fb02 f303 	mul.w	r3, r2, r3
   11384:	0bdb      	lsrs	r3, r3, #15
   11386:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
   1138a:	9b02      	ldr	r3, [sp, #8]
   1138c:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
   1138e:	9b02      	ldr	r3, [sp, #8]
   11390:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
   11392:	7819      	ldrb	r1, [r3, #0]
   11394:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   11398:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1139c:	2401      	movs	r4, #1
   1139e:	9400      	str	r4, [sp, #0]
   113a0:	f7fe fabe 	bl	f920 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
   113a4:	9b02      	ldr	r3, [sp, #8]
   113a6:	7a1b      	ldrb	r3, [r3, #8]
   113a8:	4618      	mov	r0, r3
   113aa:	9b02      	ldr	r3, [sp, #8]
   113ac:	685b      	ldr	r3, [r3, #4]
   113ae:	781b      	ldrb	r3, [r3, #0]
   113b0:	461a      	mov	r2, r3
   113b2:	4908      	ldr	r1, [pc, #32]	; (113d4 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
   113b4:	00c3      	lsls	r3, r0, #3
   113b6:	4413      	add	r3, r2
   113b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   113bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
   113c0:	e003      	b.n	113ca <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   113c2:	bf00      	nop
   113c4:	e002      	b.n	113cc <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
   113c6:	bf00      	nop
   113c8:	e000      	b.n	113cc <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
   113ca:	bf00      	nop
    }
}
   113cc:	bf00      	nop
   113ce:	b006      	add	sp, #24
   113d0:	bd10      	pop	{r4, pc}
   113d2:	bf00      	nop
   113d4:	1fff91d4 	.word	0x1fff91d4

000113d8 <Pwm_Ipw_SetOutputToIdle>:
*
* @return       void
*
*/
void Pwm_Ipw_SetOutputToIdle(const Pwm_OutputStateType IdleState, const Pwm_IpwChannelConfigType * const IpConfig)
{
   113d8:	b500      	push	{lr}
   113da:	b085      	sub	sp, #20
   113dc:	9001      	str	r0, [sp, #4]
   113de:	9100      	str	r1, [sp, #0]
#if (PWM_FTM_USED == STD_ON)
    uint8 Instance  =  IpConfig->ChannelInstanceId;
   113e0:	9b00      	ldr	r3, [sp, #0]
   113e2:	7a1b      	ldrb	r3, [r3, #8]
   113e4:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Channel   =  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId;
   113e8:	9b00      	ldr	r3, [sp, #0]
   113ea:	685b      	ldr	r3, [r3, #4]
   113ec:	781b      	ldrb	r3, [r3, #0]
   113ee:	f88d 300e 	strb.w	r3, [sp, #14]
#endif

    switch(IpConfig->ChannelType)
   113f2:	9b00      	ldr	r3, [sp, #0]
   113f4:	681b      	ldr	r3, [r3, #0]
   113f6:	2b00      	cmp	r3, #0
   113f8:	d02e      	beq.n	11458 <Pwm_Ipw_SetOutputToIdle+0x80>
   113fa:	2b01      	cmp	r3, #1
   113fc:	d12e      	bne.n	1145c <Pwm_Ipw_SetOutputToIdle+0x84>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if ((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
   113fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11402:	f89d 300e 	ldrb.w	r3, [sp, #14]
   11406:	4919      	ldr	r1, [pc, #100]	; (1146c <Pwm_Ipw_SetOutputToIdle+0x94>)
   11408:	00d2      	lsls	r2, r2, #3
   1140a:	4413      	add	r3, r2
   1140c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   11410:	2b01      	cmp	r3, #1
   11412:	d125      	bne.n	11460 <Pwm_Ipw_SetOutputToIdle+0x88>
            {
                /* update new state of channel */
                Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE;
   11414:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11418:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1141c:	4913      	ldr	r1, [pc, #76]	; (1146c <Pwm_Ipw_SetOutputToIdle+0x94>)
   1141e:	00d2      	lsls	r2, r2, #3
   11420:	4413      	add	r3, r2
   11422:	2202      	movs	r2, #2
   11424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                
                Ftm_Pwm_Ip_SwOutputControl(Instance,
                                           Channel,
                                           ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->InitOut,
   11428:	9b00      	ldr	r3, [sp, #0]
   1142a:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_SwOutputControl(Instance,
   1142c:	69da      	ldr	r2, [r3, #28]
   1142e:	f89d 100e 	ldrb.w	r1, [sp, #14]
   11432:	f89d 000f 	ldrb.w	r0, [sp, #15]
   11436:	2301      	movs	r3, #1
   11438:	f7fe faf6 	bl	fa28 <Ftm_Pwm_Ip_SwOutputControl>
                                           TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
   1143c:	9b00      	ldr	r3, [sp, #0]
   1143e:	7a1b      	ldrb	r3, [r3, #8]
   11440:	4618      	mov	r0, r3
   11442:	9b00      	ldr	r3, [sp, #0]
   11444:	685b      	ldr	r3, [r3, #4]
   11446:	781b      	ldrb	r3, [r3, #0]
   11448:	4619      	mov	r1, r3
   1144a:	4a09      	ldr	r2, [pc, #36]	; (11470 <Pwm_Ipw_SetOutputToIdle+0x98>)
   1144c:	00c3      	lsls	r3, r0, #3
   1144e:	440b      	add	r3, r1
   11450:	2100      	movs	r1, #0
   11452:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            else
            {
                /* Do Nothing */
            }
            break;
   11456:	e003      	b.n	11460 <Pwm_Ipw_SetOutputToIdle+0x88>
            /* Nothing to do. this feature is not supported for Flexio */
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   11458:	bf00      	nop
   1145a:	e002      	b.n	11462 <Pwm_Ipw_SetOutputToIdle+0x8a>
        default:
            /* Nothing to do. */
            break;
   1145c:	bf00      	nop
   1145e:	e000      	b.n	11462 <Pwm_Ipw_SetOutputToIdle+0x8a>
            break;
   11460:	bf00      	nop
    }

    (void) IdleState;

}
   11462:	bf00      	nop
   11464:	b005      	add	sp, #20
   11466:	f85d fb04 	ldr.w	pc, [sp], #4
   1146a:	bf00      	nop
   1146c:	1fff9004 	.word	0x1fff9004
   11470:	1fff91d4 	.word	0x1fff91d4

00011474 <Pwm_Ipw_ValidateSetOutPutToIdle>:
*               E_NOT_OK        The Idle state is not ready
*               E_OK            The Idle state is ready
*
*/
Std_ReturnType Pwm_Ipw_ValidateSetOutPutToIdle(const Pwm_IpwChannelConfigType * const IpConfig)
{
   11474:	b084      	sub	sp, #16
   11476:	9001      	str	r0, [sp, #4]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType      RetVal = (Std_ReturnType)E_OK;
   11478:	2300      	movs	r3, #0
   1147a:	f88d 300f 	strb.w	r3, [sp, #15]
    
    switch(IpConfig->ChannelType)
   1147e:	9b01      	ldr	r3, [sp, #4]
   11480:	681b      	ldr	r3, [r3, #0]
   11482:	2b01      	cmp	r3, #1
   11484:	d103      	bne.n	1148e <Pwm_Ipw_ValidateSetOutPutToIdle+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (Std_ReturnType)E_OK;
   11486:	2300      	movs	r3, #0
   11488:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
   1148c:	e003      	b.n	11496 <Pwm_Ipw_ValidateSetOutPutToIdle+0x22>
            RetVal = (Std_ReturnType)E_NOT_OK;
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            RetVal = (Std_ReturnType)E_NOT_OK;
   1148e:	2301      	movs	r3, #1
   11490:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
   11494:	bf00      	nop

    }

    return RetVal; 
   11496:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1149a:	4618      	mov	r0, r3
   1149c:	b004      	add	sp, #16
   1149e:	4770      	bx	lr

000114a0 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
   114a0:	b084      	sub	sp, #16
   114a2:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
   114a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   114a8:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
   114aa:	9b01      	ldr	r3, [sp, #4]
   114ac:	681b      	ldr	r3, [r3, #0]
   114ae:	2b01      	cmp	r3, #1
   114b0:	d103      	bne.n	114ba <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
   114b2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   114b6:	9303      	str	r3, [sp, #12]
            break;
   114b8:	e000      	b.n	114bc <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
   114ba:	bf00      	nop
    }

    return RetVal;
   114bc:	9b03      	ldr	r3, [sp, #12]
}
   114be:	4618      	mov	r0, r3
   114c0:	b004      	add	sp, #16
   114c2:	4770      	bx	lr

000114c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
   114c4:	b500      	push	{lr}
   114c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114c8:	f7f0 f98a 	bl	17e0 <Sys_GetCoreID>
   114cc:	4603      	mov	r3, r0
   114ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
   114d0:	4a10      	ldr	r2, [pc, #64]	; (11514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   114d2:	9b01      	ldr	r3, [sp, #4]
   114d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114d8:	2b00      	cmp	r3, #0
   114da:	d10d      	bne.n	114f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   114dc:	f7ef fa14 	bl	908 <Adc_schm_read_msr>
   114e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   114e2:	9b00      	ldr	r3, [sp, #0]
   114e4:	f003 0301 	and.w	r3, r3, #1
   114e8:	2b00      	cmp	r3, #0
   114ea:	d100      	bne.n	114ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   114ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   114ee:	490a      	ldr	r1, [pc, #40]	; (11518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
   114f0:	9b01      	ldr	r3, [sp, #4]
   114f2:	9a00      	ldr	r2, [sp, #0]
   114f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
   114f8:	4a06      	ldr	r2, [pc, #24]	; (11514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   114fa:	9b01      	ldr	r3, [sp, #4]
   114fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11500:	1c5a      	adds	r2, r3, #1
   11502:	4904      	ldr	r1, [pc, #16]	; (11514 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   11504:	9b01      	ldr	r3, [sp, #4]
   11506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1150a:	bf00      	nop
   1150c:	b003      	add	sp, #12
   1150e:	f85d fb04 	ldr.w	pc, [sp], #4
   11512:	bf00      	nop
   11514:	1fff9218 	.word	0x1fff9218
   11518:	1fff9214 	.word	0x1fff9214

0001151c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
   1151c:	b500      	push	{lr}
   1151e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11520:	f7f0 f95e 	bl	17e0 <Sys_GetCoreID>
   11524:	4603      	mov	r3, r0
   11526:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
   11528:	4a0d      	ldr	r2, [pc, #52]	; (11560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   1152a:	9b01      	ldr	r3, [sp, #4]
   1152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11530:	1e5a      	subs	r2, r3, #1
   11532:	490b      	ldr	r1, [pc, #44]	; (11560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   11534:	9b01      	ldr	r3, [sp, #4]
   11536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1153a:	4a0a      	ldr	r2, [pc, #40]	; (11564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
   1153c:	9b01      	ldr	r3, [sp, #4]
   1153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11542:	f003 0301 	and.w	r3, r3, #1
   11546:	2b00      	cmp	r3, #0
   11548:	d106      	bne.n	11558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
   1154a:	4a05      	ldr	r2, [pc, #20]	; (11560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   1154c:	9b01      	ldr	r3, [sp, #4]
   1154e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11552:	2b00      	cmp	r3, #0
   11554:	d100      	bne.n	11558 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11556:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11558:	bf00      	nop
   1155a:	b003      	add	sp, #12
   1155c:	f85d fb04 	ldr.w	pc, [sp], #4
   11560:	1fff9218 	.word	0x1fff9218
   11564:	1fff9214 	.word	0x1fff9214

00011568 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
   11568:	b500      	push	{lr}
   1156a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1156c:	f7f0 f938 	bl	17e0 <Sys_GetCoreID>
   11570:	4603      	mov	r3, r0
   11572:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
   11574:	4a10      	ldr	r2, [pc, #64]	; (115b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   11576:	9b01      	ldr	r3, [sp, #4]
   11578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1157c:	2b00      	cmp	r3, #0
   1157e:	d10d      	bne.n	1159c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11580:	f7ef f9c2 	bl	908 <Adc_schm_read_msr>
   11584:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11586:	9b00      	ldr	r3, [sp, #0]
   11588:	f003 0301 	and.w	r3, r3, #1
   1158c:	2b00      	cmp	r3, #0
   1158e:	d100      	bne.n	11592 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11590:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   11592:	490a      	ldr	r1, [pc, #40]	; (115bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
   11594:	9b01      	ldr	r3, [sp, #4]
   11596:	9a00      	ldr	r2, [sp, #0]
   11598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
   1159c:	4a06      	ldr	r2, [pc, #24]	; (115b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   1159e:	9b01      	ldr	r3, [sp, #4]
   115a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115a4:	1c5a      	adds	r2, r3, #1
   115a6:	4904      	ldr	r1, [pc, #16]	; (115b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   115a8:	9b01      	ldr	r3, [sp, #4]
   115aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   115ae:	bf00      	nop
   115b0:	b003      	add	sp, #12
   115b2:	f85d fb04 	ldr.w	pc, [sp], #4
   115b6:	bf00      	nop
   115b8:	1fff9220 	.word	0x1fff9220
   115bc:	1fff921c 	.word	0x1fff921c

000115c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
   115c0:	b500      	push	{lr}
   115c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115c4:	f7f0 f90c 	bl	17e0 <Sys_GetCoreID>
   115c8:	4603      	mov	r3, r0
   115ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
   115cc:	4a0d      	ldr	r2, [pc, #52]	; (11604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   115ce:	9b01      	ldr	r3, [sp, #4]
   115d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115d4:	1e5a      	subs	r2, r3, #1
   115d6:	490b      	ldr	r1, [pc, #44]	; (11604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   115d8:	9b01      	ldr	r3, [sp, #4]
   115da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   115de:	4a0a      	ldr	r2, [pc, #40]	; (11608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
   115e0:	9b01      	ldr	r3, [sp, #4]
   115e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115e6:	f003 0301 	and.w	r3, r3, #1
   115ea:	2b00      	cmp	r3, #0
   115ec:	d106      	bne.n	115fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
   115ee:	4a05      	ldr	r2, [pc, #20]	; (11604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   115f0:	9b01      	ldr	r3, [sp, #4]
   115f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115f6:	2b00      	cmp	r3, #0
   115f8:	d100      	bne.n	115fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   115fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   115fc:	bf00      	nop
   115fe:	b003      	add	sp, #12
   11600:	f85d fb04 	ldr.w	pc, [sp], #4
   11604:	1fff9220 	.word	0x1fff9220
   11608:	1fff921c 	.word	0x1fff921c

0001160c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
   1160c:	b500      	push	{lr}
   1160e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11610:	f7f0 f8e6 	bl	17e0 <Sys_GetCoreID>
   11614:	4603      	mov	r3, r0
   11616:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
   11618:	4a10      	ldr	r2, [pc, #64]	; (1165c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   1161a:	9b01      	ldr	r3, [sp, #4]
   1161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11620:	2b00      	cmp	r3, #0
   11622:	d10d      	bne.n	11640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11624:	f7ef f970 	bl	908 <Adc_schm_read_msr>
   11628:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1162a:	9b00      	ldr	r3, [sp, #0]
   1162c:	f003 0301 	and.w	r3, r3, #1
   11630:	2b00      	cmp	r3, #0
   11632:	d100      	bne.n	11636 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11634:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   11636:	490a      	ldr	r1, [pc, #40]	; (11660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
   11638:	9b01      	ldr	r3, [sp, #4]
   1163a:	9a00      	ldr	r2, [sp, #0]
   1163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
   11640:	4a06      	ldr	r2, [pc, #24]	; (1165c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   11642:	9b01      	ldr	r3, [sp, #4]
   11644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11648:	1c5a      	adds	r2, r3, #1
   1164a:	4904      	ldr	r1, [pc, #16]	; (1165c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   1164c:	9b01      	ldr	r3, [sp, #4]
   1164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11652:	bf00      	nop
   11654:	b003      	add	sp, #12
   11656:	f85d fb04 	ldr.w	pc, [sp], #4
   1165a:	bf00      	nop
   1165c:	1fff9228 	.word	0x1fff9228
   11660:	1fff9224 	.word	0x1fff9224

00011664 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
   11664:	b500      	push	{lr}
   11666:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11668:	f7f0 f8ba 	bl	17e0 <Sys_GetCoreID>
   1166c:	4603      	mov	r3, r0
   1166e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
   11670:	4a0d      	ldr	r2, [pc, #52]	; (116a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   11672:	9b01      	ldr	r3, [sp, #4]
   11674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11678:	1e5a      	subs	r2, r3, #1
   1167a:	490b      	ldr	r1, [pc, #44]	; (116a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   1167c:	9b01      	ldr	r3, [sp, #4]
   1167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   11682:	4a0a      	ldr	r2, [pc, #40]	; (116ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
   11684:	9b01      	ldr	r3, [sp, #4]
   11686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1168a:	f003 0301 	and.w	r3, r3, #1
   1168e:	2b00      	cmp	r3, #0
   11690:	d106      	bne.n	116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
   11692:	4a05      	ldr	r2, [pc, #20]	; (116a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   11694:	9b01      	ldr	r3, [sp, #4]
   11696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1169a:	2b00      	cmp	r3, #0
   1169c:	d100      	bne.n	116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1169e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   116a0:	bf00      	nop
   116a2:	b003      	add	sp, #12
   116a4:	f85d fb04 	ldr.w	pc, [sp], #4
   116a8:	1fff9228 	.word	0x1fff9228
   116ac:	1fff9224 	.word	0x1fff9224

000116b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   116b0:	b500      	push	{lr}
   116b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116b4:	f7f0 f894 	bl	17e0 <Sys_GetCoreID>
   116b8:	4603      	mov	r3, r0
   116ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
   116bc:	4a10      	ldr	r2, [pc, #64]	; (11700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   116be:	9b01      	ldr	r3, [sp, #4]
   116c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116c4:	2b00      	cmp	r3, #0
   116c6:	d10d      	bne.n	116e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   116c8:	f7ef f91e 	bl	908 <Adc_schm_read_msr>
   116cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   116ce:	9b00      	ldr	r3, [sp, #0]
   116d0:	f003 0301 	and.w	r3, r3, #1
   116d4:	2b00      	cmp	r3, #0
   116d6:	d100      	bne.n	116da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   116d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   116da:	490a      	ldr	r1, [pc, #40]	; (11704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
   116dc:	9b01      	ldr	r3, [sp, #4]
   116de:	9a00      	ldr	r2, [sp, #0]
   116e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
   116e4:	4a06      	ldr	r2, [pc, #24]	; (11700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   116e6:	9b01      	ldr	r3, [sp, #4]
   116e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116ec:	1c5a      	adds	r2, r3, #1
   116ee:	4904      	ldr	r1, [pc, #16]	; (11700 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   116f0:	9b01      	ldr	r3, [sp, #4]
   116f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   116f6:	bf00      	nop
   116f8:	b003      	add	sp, #12
   116fa:	f85d fb04 	ldr.w	pc, [sp], #4
   116fe:	bf00      	nop
   11700:	1fff9230 	.word	0x1fff9230
   11704:	1fff922c 	.word	0x1fff922c

00011708 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   11708:	b500      	push	{lr}
   1170a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1170c:	f7f0 f868 	bl	17e0 <Sys_GetCoreID>
   11710:	4603      	mov	r3, r0
   11712:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
   11714:	4a0d      	ldr	r2, [pc, #52]	; (1174c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   11716:	9b01      	ldr	r3, [sp, #4]
   11718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1171c:	1e5a      	subs	r2, r3, #1
   1171e:	490b      	ldr	r1, [pc, #44]	; (1174c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   11720:	9b01      	ldr	r3, [sp, #4]
   11722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   11726:	4a0a      	ldr	r2, [pc, #40]	; (11750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
   11728:	9b01      	ldr	r3, [sp, #4]
   1172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1172e:	f003 0301 	and.w	r3, r3, #1
   11732:	2b00      	cmp	r3, #0
   11734:	d106      	bne.n	11744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
   11736:	4a05      	ldr	r2, [pc, #20]	; (1174c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   11738:	9b01      	ldr	r3, [sp, #4]
   1173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1173e:	2b00      	cmp	r3, #0
   11740:	d100      	bne.n	11744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11742:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11744:	bf00      	nop
   11746:	b003      	add	sp, #12
   11748:	f85d fb04 	ldr.w	pc, [sp], #4
   1174c:	1fff9230 	.word	0x1fff9230
   11750:	1fff922c 	.word	0x1fff922c

00011754 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   11754:	b500      	push	{lr}
   11756:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11758:	f7f0 f842 	bl	17e0 <Sys_GetCoreID>
   1175c:	4603      	mov	r3, r0
   1175e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
   11760:	4a10      	ldr	r2, [pc, #64]	; (117a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   11762:	9b01      	ldr	r3, [sp, #4]
   11764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11768:	2b00      	cmp	r3, #0
   1176a:	d10d      	bne.n	11788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1176c:	f7ef f8cc 	bl	908 <Adc_schm_read_msr>
   11770:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11772:	9b00      	ldr	r3, [sp, #0]
   11774:	f003 0301 	and.w	r3, r3, #1
   11778:	2b00      	cmp	r3, #0
   1177a:	d100      	bne.n	1177e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1177c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1177e:	490a      	ldr	r1, [pc, #40]	; (117a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
   11780:	9b01      	ldr	r3, [sp, #4]
   11782:	9a00      	ldr	r2, [sp, #0]
   11784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
   11788:	4a06      	ldr	r2, [pc, #24]	; (117a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   1178a:	9b01      	ldr	r3, [sp, #4]
   1178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11790:	1c5a      	adds	r2, r3, #1
   11792:	4904      	ldr	r1, [pc, #16]	; (117a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   11794:	9b01      	ldr	r3, [sp, #4]
   11796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1179a:	bf00      	nop
   1179c:	b003      	add	sp, #12
   1179e:	f85d fb04 	ldr.w	pc, [sp], #4
   117a2:	bf00      	nop
   117a4:	1fff9238 	.word	0x1fff9238
   117a8:	1fff9234 	.word	0x1fff9234

000117ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   117ac:	b500      	push	{lr}
   117ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117b0:	f7f0 f816 	bl	17e0 <Sys_GetCoreID>
   117b4:	4603      	mov	r3, r0
   117b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
   117b8:	4a0d      	ldr	r2, [pc, #52]	; (117f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   117ba:	9b01      	ldr	r3, [sp, #4]
   117bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117c0:	1e5a      	subs	r2, r3, #1
   117c2:	490b      	ldr	r1, [pc, #44]	; (117f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   117c4:	9b01      	ldr	r3, [sp, #4]
   117c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   117ca:	4a0a      	ldr	r2, [pc, #40]	; (117f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
   117cc:	9b01      	ldr	r3, [sp, #4]
   117ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117d2:	f003 0301 	and.w	r3, r3, #1
   117d6:	2b00      	cmp	r3, #0
   117d8:	d106      	bne.n	117e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
   117da:	4a05      	ldr	r2, [pc, #20]	; (117f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   117dc:	9b01      	ldr	r3, [sp, #4]
   117de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117e2:	2b00      	cmp	r3, #0
   117e4:	d100      	bne.n	117e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   117e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   117e8:	bf00      	nop
   117ea:	b003      	add	sp, #12
   117ec:	f85d fb04 	ldr.w	pc, [sp], #4
   117f0:	1fff9238 	.word	0x1fff9238
   117f4:	1fff9234 	.word	0x1fff9234

000117f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   117f8:	b500      	push	{lr}
   117fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117fc:	f7ef fff0 	bl	17e0 <Sys_GetCoreID>
   11800:	4603      	mov	r3, r0
   11802:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
   11804:	4a10      	ldr	r2, [pc, #64]	; (11848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   11806:	9b01      	ldr	r3, [sp, #4]
   11808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1180c:	2b00      	cmp	r3, #0
   1180e:	d10d      	bne.n	1182c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11810:	f7ef f87a 	bl	908 <Adc_schm_read_msr>
   11814:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11816:	9b00      	ldr	r3, [sp, #0]
   11818:	f003 0301 	and.w	r3, r3, #1
   1181c:	2b00      	cmp	r3, #0
   1181e:	d100      	bne.n	11822 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11820:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   11822:	490a      	ldr	r1, [pc, #40]	; (1184c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
   11824:	9b01      	ldr	r3, [sp, #4]
   11826:	9a00      	ldr	r2, [sp, #0]
   11828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
   1182c:	4a06      	ldr	r2, [pc, #24]	; (11848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   1182e:	9b01      	ldr	r3, [sp, #4]
   11830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11834:	1c5a      	adds	r2, r3, #1
   11836:	4904      	ldr	r1, [pc, #16]	; (11848 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   11838:	9b01      	ldr	r3, [sp, #4]
   1183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1183e:	bf00      	nop
   11840:	b003      	add	sp, #12
   11842:	f85d fb04 	ldr.w	pc, [sp], #4
   11846:	bf00      	nop
   11848:	1fff9240 	.word	0x1fff9240
   1184c:	1fff923c 	.word	0x1fff923c

00011850 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   11850:	b500      	push	{lr}
   11852:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11854:	f7ef ffc4 	bl	17e0 <Sys_GetCoreID>
   11858:	4603      	mov	r3, r0
   1185a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
   1185c:	4a0d      	ldr	r2, [pc, #52]	; (11894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   1185e:	9b01      	ldr	r3, [sp, #4]
   11860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11864:	1e5a      	subs	r2, r3, #1
   11866:	490b      	ldr	r1, [pc, #44]	; (11894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   11868:	9b01      	ldr	r3, [sp, #4]
   1186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1186e:	4a0a      	ldr	r2, [pc, #40]	; (11898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
   11870:	9b01      	ldr	r3, [sp, #4]
   11872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11876:	f003 0301 	and.w	r3, r3, #1
   1187a:	2b00      	cmp	r3, #0
   1187c:	d106      	bne.n	1188c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
   1187e:	4a05      	ldr	r2, [pc, #20]	; (11894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   11880:	9b01      	ldr	r3, [sp, #4]
   11882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11886:	2b00      	cmp	r3, #0
   11888:	d100      	bne.n	1188c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1188a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1188c:	bf00      	nop
   1188e:	b003      	add	sp, #12
   11890:	f85d fb04 	ldr.w	pc, [sp], #4
   11894:	1fff9240 	.word	0x1fff9240
   11898:	1fff923c 	.word	0x1fff923c

0001189c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   1189c:	b500      	push	{lr}
   1189e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118a0:	f7ef ff9e 	bl	17e0 <Sys_GetCoreID>
   118a4:	4603      	mov	r3, r0
   118a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
   118a8:	4a10      	ldr	r2, [pc, #64]	; (118ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   118aa:	9b01      	ldr	r3, [sp, #4]
   118ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118b0:	2b00      	cmp	r3, #0
   118b2:	d10d      	bne.n	118d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   118b4:	f7ef f828 	bl	908 <Adc_schm_read_msr>
   118b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   118ba:	9b00      	ldr	r3, [sp, #0]
   118bc:	f003 0301 	and.w	r3, r3, #1
   118c0:	2b00      	cmp	r3, #0
   118c2:	d100      	bne.n	118c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   118c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   118c6:	490a      	ldr	r1, [pc, #40]	; (118f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
   118c8:	9b01      	ldr	r3, [sp, #4]
   118ca:	9a00      	ldr	r2, [sp, #0]
   118cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
   118d0:	4a06      	ldr	r2, [pc, #24]	; (118ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   118d2:	9b01      	ldr	r3, [sp, #4]
   118d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118d8:	1c5a      	adds	r2, r3, #1
   118da:	4904      	ldr	r1, [pc, #16]	; (118ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   118dc:	9b01      	ldr	r3, [sp, #4]
   118de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   118e2:	bf00      	nop
   118e4:	b003      	add	sp, #12
   118e6:	f85d fb04 	ldr.w	pc, [sp], #4
   118ea:	bf00      	nop
   118ec:	1fff9248 	.word	0x1fff9248
   118f0:	1fff9244 	.word	0x1fff9244

000118f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   118f4:	b500      	push	{lr}
   118f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118f8:	f7ef ff72 	bl	17e0 <Sys_GetCoreID>
   118fc:	4603      	mov	r3, r0
   118fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
   11900:	4a0d      	ldr	r2, [pc, #52]	; (11938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   11902:	9b01      	ldr	r3, [sp, #4]
   11904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11908:	1e5a      	subs	r2, r3, #1
   1190a:	490b      	ldr	r1, [pc, #44]	; (11938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   1190c:	9b01      	ldr	r3, [sp, #4]
   1190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   11912:	4a0a      	ldr	r2, [pc, #40]	; (1193c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
   11914:	9b01      	ldr	r3, [sp, #4]
   11916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1191a:	f003 0301 	and.w	r3, r3, #1
   1191e:	2b00      	cmp	r3, #0
   11920:	d106      	bne.n	11930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
   11922:	4a05      	ldr	r2, [pc, #20]	; (11938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   11924:	9b01      	ldr	r3, [sp, #4]
   11926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1192a:	2b00      	cmp	r3, #0
   1192c:	d100      	bne.n	11930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1192e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11930:	bf00      	nop
   11932:	b003      	add	sp, #12
   11934:	f85d fb04 	ldr.w	pc, [sp], #4
   11938:	1fff9248 	.word	0x1fff9248
   1193c:	1fff9244 	.word	0x1fff9244

00011940 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   11940:	b500      	push	{lr}
   11942:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11944:	f7ef ff4c 	bl	17e0 <Sys_GetCoreID>
   11948:	4603      	mov	r3, r0
   1194a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
   1194c:	4a10      	ldr	r2, [pc, #64]	; (11990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   1194e:	9b01      	ldr	r3, [sp, #4]
   11950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11954:	2b00      	cmp	r3, #0
   11956:	d10d      	bne.n	11974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11958:	f7ee ffd6 	bl	908 <Adc_schm_read_msr>
   1195c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1195e:	9b00      	ldr	r3, [sp, #0]
   11960:	f003 0301 	and.w	r3, r3, #1
   11964:	2b00      	cmp	r3, #0
   11966:	d100      	bne.n	1196a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11968:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
   1196a:	490a      	ldr	r1, [pc, #40]	; (11994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
   1196c:	9b01      	ldr	r3, [sp, #4]
   1196e:	9a00      	ldr	r2, [sp, #0]
   11970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
   11974:	4a06      	ldr	r2, [pc, #24]	; (11990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   11976:	9b01      	ldr	r3, [sp, #4]
   11978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1197c:	1c5a      	adds	r2, r3, #1
   1197e:	4904      	ldr	r1, [pc, #16]	; (11990 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   11980:	9b01      	ldr	r3, [sp, #4]
   11982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11986:	bf00      	nop
   11988:	b003      	add	sp, #12
   1198a:	f85d fb04 	ldr.w	pc, [sp], #4
   1198e:	bf00      	nop
   11990:	1fff9250 	.word	0x1fff9250
   11994:	1fff924c 	.word	0x1fff924c

00011998 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   11998:	b500      	push	{lr}
   1199a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1199c:	f7ef ff20 	bl	17e0 <Sys_GetCoreID>
   119a0:	4603      	mov	r3, r0
   119a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
   119a4:	4a0d      	ldr	r2, [pc, #52]	; (119dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   119a6:	9b01      	ldr	r3, [sp, #4]
   119a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119ac:	1e5a      	subs	r2, r3, #1
   119ae:	490b      	ldr	r1, [pc, #44]	; (119dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   119b0:	9b01      	ldr	r3, [sp, #4]
   119b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
   119b6:	4a0a      	ldr	r2, [pc, #40]	; (119e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
   119b8:	9b01      	ldr	r3, [sp, #4]
   119ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119be:	f003 0301 	and.w	r3, r3, #1
   119c2:	2b00      	cmp	r3, #0
   119c4:	d106      	bne.n	119d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
   119c6:	4a05      	ldr	r2, [pc, #20]	; (119dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   119c8:	9b01      	ldr	r3, [sp, #4]
   119ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119ce:	2b00      	cmp	r3, #0
   119d0:	d100      	bne.n	119d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   119d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   119d4:	bf00      	nop
   119d6:	b003      	add	sp, #12
   119d8:	f85d fb04 	ldr.w	pc, [sp], #4
   119dc:	1fff9250 	.word	0x1fff9250
   119e0:	1fff924c 	.word	0x1fff924c

000119e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   119e4:	b500      	push	{lr}
   119e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119e8:	f7ef fefa 	bl	17e0 <Sys_GetCoreID>
   119ec:	4603      	mov	r3, r0
   119ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
   119f0:	4a10      	ldr	r2, [pc, #64]	; (11a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   119f2:	9b01      	ldr	r3, [sp, #4]
   119f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119f8:	2b00      	cmp	r3, #0
   119fa:	d10d      	bne.n	11a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   119fc:	f7ee ff84 	bl	908 <Adc_schm_read_msr>
   11a00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a02:	9b00      	ldr	r3, [sp, #0]
   11a04:	f003 0301 	and.w	r3, r3, #1
   11a08:	2b00      	cmp	r3, #0
   11a0a:	d100      	bne.n	11a0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
   11a0e:	490a      	ldr	r1, [pc, #40]	; (11a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
   11a10:	9b01      	ldr	r3, [sp, #4]
   11a12:	9a00      	ldr	r2, [sp, #0]
   11a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
   11a18:	4a06      	ldr	r2, [pc, #24]	; (11a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   11a1a:	9b01      	ldr	r3, [sp, #4]
   11a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a20:	1c5a      	adds	r2, r3, #1
   11a22:	4904      	ldr	r1, [pc, #16]	; (11a34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   11a24:	9b01      	ldr	r3, [sp, #4]
   11a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a2a:	bf00      	nop
   11a2c:	b003      	add	sp, #12
   11a2e:	f85d fb04 	ldr.w	pc, [sp], #4
   11a32:	bf00      	nop
   11a34:	1fff9258 	.word	0x1fff9258
   11a38:	1fff9254 	.word	0x1fff9254

00011a3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   11a3c:	b500      	push	{lr}
   11a3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a40:	f7ef fece 	bl	17e0 <Sys_GetCoreID>
   11a44:	4603      	mov	r3, r0
   11a46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
   11a48:	4a0d      	ldr	r2, [pc, #52]	; (11a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11a4a:	9b01      	ldr	r3, [sp, #4]
   11a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a50:	1e5a      	subs	r2, r3, #1
   11a52:	490b      	ldr	r1, [pc, #44]	; (11a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11a54:	9b01      	ldr	r3, [sp, #4]
   11a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
   11a5a:	4a0a      	ldr	r2, [pc, #40]	; (11a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
   11a5c:	9b01      	ldr	r3, [sp, #4]
   11a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a62:	f003 0301 	and.w	r3, r3, #1
   11a66:	2b00      	cmp	r3, #0
   11a68:	d106      	bne.n	11a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
   11a6a:	4a05      	ldr	r2, [pc, #20]	; (11a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11a6c:	9b01      	ldr	r3, [sp, #4]
   11a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a72:	2b00      	cmp	r3, #0
   11a74:	d100      	bne.n	11a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a78:	bf00      	nop
   11a7a:	b003      	add	sp, #12
   11a7c:	f85d fb04 	ldr.w	pc, [sp], #4
   11a80:	1fff9258 	.word	0x1fff9258
   11a84:	1fff9254 	.word	0x1fff9254

00011a88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   11a88:	b500      	push	{lr}
   11a8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a8c:	f7ef fea8 	bl	17e0 <Sys_GetCoreID>
   11a90:	4603      	mov	r3, r0
   11a92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
   11a94:	4a10      	ldr	r2, [pc, #64]	; (11ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11a96:	9b01      	ldr	r3, [sp, #4]
   11a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a9c:	2b00      	cmp	r3, #0
   11a9e:	d10d      	bne.n	11abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11aa0:	f7ee ff32 	bl	908 <Adc_schm_read_msr>
   11aa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11aa6:	9b00      	ldr	r3, [sp, #0]
   11aa8:	f003 0301 	and.w	r3, r3, #1
   11aac:	2b00      	cmp	r3, #0
   11aae:	d100      	bne.n	11ab2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ab0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
   11ab2:	490a      	ldr	r1, [pc, #40]	; (11adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
   11ab4:	9b01      	ldr	r3, [sp, #4]
   11ab6:	9a00      	ldr	r2, [sp, #0]
   11ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
   11abc:	4a06      	ldr	r2, [pc, #24]	; (11ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11abe:	9b01      	ldr	r3, [sp, #4]
   11ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ac4:	1c5a      	adds	r2, r3, #1
   11ac6:	4904      	ldr	r1, [pc, #16]	; (11ad8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11ac8:	9b01      	ldr	r3, [sp, #4]
   11aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ace:	bf00      	nop
   11ad0:	b003      	add	sp, #12
   11ad2:	f85d fb04 	ldr.w	pc, [sp], #4
   11ad6:	bf00      	nop
   11ad8:	1fff9260 	.word	0x1fff9260
   11adc:	1fff925c 	.word	0x1fff925c

00011ae0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   11ae0:	b500      	push	{lr}
   11ae2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ae4:	f7ef fe7c 	bl	17e0 <Sys_GetCoreID>
   11ae8:	4603      	mov	r3, r0
   11aea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
   11aec:	4a0d      	ldr	r2, [pc, #52]	; (11b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11aee:	9b01      	ldr	r3, [sp, #4]
   11af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11af4:	1e5a      	subs	r2, r3, #1
   11af6:	490b      	ldr	r1, [pc, #44]	; (11b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11af8:	9b01      	ldr	r3, [sp, #4]
   11afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
   11afe:	4a0a      	ldr	r2, [pc, #40]	; (11b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
   11b00:	9b01      	ldr	r3, [sp, #4]
   11b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b06:	f003 0301 	and.w	r3, r3, #1
   11b0a:	2b00      	cmp	r3, #0
   11b0c:	d106      	bne.n	11b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
   11b0e:	4a05      	ldr	r2, [pc, #20]	; (11b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11b10:	9b01      	ldr	r3, [sp, #4]
   11b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b16:	2b00      	cmp	r3, #0
   11b18:	d100      	bne.n	11b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b1c:	bf00      	nop
   11b1e:	b003      	add	sp, #12
   11b20:	f85d fb04 	ldr.w	pc, [sp], #4
   11b24:	1fff9260 	.word	0x1fff9260
   11b28:	1fff925c 	.word	0x1fff925c

00011b2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   11b2c:	b500      	push	{lr}
   11b2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b30:	f7ef fe56 	bl	17e0 <Sys_GetCoreID>
   11b34:	4603      	mov	r3, r0
   11b36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
   11b38:	4a10      	ldr	r2, [pc, #64]	; (11b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11b3a:	9b01      	ldr	r3, [sp, #4]
   11b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b40:	2b00      	cmp	r3, #0
   11b42:	d10d      	bne.n	11b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b44:	f7ee fee0 	bl	908 <Adc_schm_read_msr>
   11b48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b4a:	9b00      	ldr	r3, [sp, #0]
   11b4c:	f003 0301 	and.w	r3, r3, #1
   11b50:	2b00      	cmp	r3, #0
   11b52:	d100      	bne.n	11b56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
   11b56:	490a      	ldr	r1, [pc, #40]	; (11b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
   11b58:	9b01      	ldr	r3, [sp, #4]
   11b5a:	9a00      	ldr	r2, [sp, #0]
   11b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
   11b60:	4a06      	ldr	r2, [pc, #24]	; (11b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11b62:	9b01      	ldr	r3, [sp, #4]
   11b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b68:	1c5a      	adds	r2, r3, #1
   11b6a:	4904      	ldr	r1, [pc, #16]	; (11b7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11b6c:	9b01      	ldr	r3, [sp, #4]
   11b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b72:	bf00      	nop
   11b74:	b003      	add	sp, #12
   11b76:	f85d fb04 	ldr.w	pc, [sp], #4
   11b7a:	bf00      	nop
   11b7c:	1fff9268 	.word	0x1fff9268
   11b80:	1fff9264 	.word	0x1fff9264

00011b84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   11b84:	b500      	push	{lr}
   11b86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b88:	f7ef fe2a 	bl	17e0 <Sys_GetCoreID>
   11b8c:	4603      	mov	r3, r0
   11b8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
   11b90:	4a0d      	ldr	r2, [pc, #52]	; (11bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11b92:	9b01      	ldr	r3, [sp, #4]
   11b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b98:	1e5a      	subs	r2, r3, #1
   11b9a:	490b      	ldr	r1, [pc, #44]	; (11bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11b9c:	9b01      	ldr	r3, [sp, #4]
   11b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
   11ba2:	4a0a      	ldr	r2, [pc, #40]	; (11bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
   11ba4:	9b01      	ldr	r3, [sp, #4]
   11ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11baa:	f003 0301 	and.w	r3, r3, #1
   11bae:	2b00      	cmp	r3, #0
   11bb0:	d106      	bne.n	11bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
   11bb2:	4a05      	ldr	r2, [pc, #20]	; (11bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11bb4:	9b01      	ldr	r3, [sp, #4]
   11bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bba:	2b00      	cmp	r3, #0
   11bbc:	d100      	bne.n	11bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11bbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11bc0:	bf00      	nop
   11bc2:	b003      	add	sp, #12
   11bc4:	f85d fb04 	ldr.w	pc, [sp], #4
   11bc8:	1fff9268 	.word	0x1fff9268
   11bcc:	1fff9264 	.word	0x1fff9264

00011bd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   11bd0:	b500      	push	{lr}
   11bd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bd4:	f7ef fe04 	bl	17e0 <Sys_GetCoreID>
   11bd8:	4603      	mov	r3, r0
   11bda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
   11bdc:	4a10      	ldr	r2, [pc, #64]	; (11c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11bde:	9b01      	ldr	r3, [sp, #4]
   11be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11be4:	2b00      	cmp	r3, #0
   11be6:	d10d      	bne.n	11c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11be8:	f7ee fe8e 	bl	908 <Adc_schm_read_msr>
   11bec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11bee:	9b00      	ldr	r3, [sp, #0]
   11bf0:	f003 0301 	and.w	r3, r3, #1
   11bf4:	2b00      	cmp	r3, #0
   11bf6:	d100      	bne.n	11bfa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11bf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   11bfa:	490a      	ldr	r1, [pc, #40]	; (11c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
   11bfc:	9b01      	ldr	r3, [sp, #4]
   11bfe:	9a00      	ldr	r2, [sp, #0]
   11c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
   11c04:	4a06      	ldr	r2, [pc, #24]	; (11c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11c06:	9b01      	ldr	r3, [sp, #4]
   11c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c0c:	1c5a      	adds	r2, r3, #1
   11c0e:	4904      	ldr	r1, [pc, #16]	; (11c20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11c10:	9b01      	ldr	r3, [sp, #4]
   11c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c16:	bf00      	nop
   11c18:	b003      	add	sp, #12
   11c1a:	f85d fb04 	ldr.w	pc, [sp], #4
   11c1e:	bf00      	nop
   11c20:	1fff9270 	.word	0x1fff9270
   11c24:	1fff926c 	.word	0x1fff926c

00011c28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   11c28:	b500      	push	{lr}
   11c2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c2c:	f7ef fdd8 	bl	17e0 <Sys_GetCoreID>
   11c30:	4603      	mov	r3, r0
   11c32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
   11c34:	4a0d      	ldr	r2, [pc, #52]	; (11c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11c36:	9b01      	ldr	r3, [sp, #4]
   11c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c3c:	1e5a      	subs	r2, r3, #1
   11c3e:	490b      	ldr	r1, [pc, #44]	; (11c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11c40:	9b01      	ldr	r3, [sp, #4]
   11c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   11c46:	4a0a      	ldr	r2, [pc, #40]	; (11c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
   11c48:	9b01      	ldr	r3, [sp, #4]
   11c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c4e:	f003 0301 	and.w	r3, r3, #1
   11c52:	2b00      	cmp	r3, #0
   11c54:	d106      	bne.n	11c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
   11c56:	4a05      	ldr	r2, [pc, #20]	; (11c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11c58:	9b01      	ldr	r3, [sp, #4]
   11c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c5e:	2b00      	cmp	r3, #0
   11c60:	d100      	bne.n	11c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c64:	bf00      	nop
   11c66:	b003      	add	sp, #12
   11c68:	f85d fb04 	ldr.w	pc, [sp], #4
   11c6c:	1fff9270 	.word	0x1fff9270
   11c70:	1fff926c 	.word	0x1fff926c

00011c74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   11c74:	b500      	push	{lr}
   11c76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c78:	f7ef fdb2 	bl	17e0 <Sys_GetCoreID>
   11c7c:	4603      	mov	r3, r0
   11c7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
   11c80:	4a10      	ldr	r2, [pc, #64]	; (11cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11c82:	9b01      	ldr	r3, [sp, #4]
   11c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c88:	2b00      	cmp	r3, #0
   11c8a:	d10d      	bne.n	11ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c8c:	f7ee fe3c 	bl	908 <Adc_schm_read_msr>
   11c90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c92:	9b00      	ldr	r3, [sp, #0]
   11c94:	f003 0301 	and.w	r3, r3, #1
   11c98:	2b00      	cmp	r3, #0
   11c9a:	d100      	bne.n	11c9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   11c9e:	490a      	ldr	r1, [pc, #40]	; (11cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
   11ca0:	9b01      	ldr	r3, [sp, #4]
   11ca2:	9a00      	ldr	r2, [sp, #0]
   11ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
   11ca8:	4a06      	ldr	r2, [pc, #24]	; (11cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11caa:	9b01      	ldr	r3, [sp, #4]
   11cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cb0:	1c5a      	adds	r2, r3, #1
   11cb2:	4904      	ldr	r1, [pc, #16]	; (11cc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11cb4:	9b01      	ldr	r3, [sp, #4]
   11cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11cba:	bf00      	nop
   11cbc:	b003      	add	sp, #12
   11cbe:	f85d fb04 	ldr.w	pc, [sp], #4
   11cc2:	bf00      	nop
   11cc4:	1fff9278 	.word	0x1fff9278
   11cc8:	1fff9274 	.word	0x1fff9274

00011ccc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   11ccc:	b500      	push	{lr}
   11cce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cd0:	f7ef fd86 	bl	17e0 <Sys_GetCoreID>
   11cd4:	4603      	mov	r3, r0
   11cd6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
   11cd8:	4a0d      	ldr	r2, [pc, #52]	; (11d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11cda:	9b01      	ldr	r3, [sp, #4]
   11cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ce0:	1e5a      	subs	r2, r3, #1
   11ce2:	490b      	ldr	r1, [pc, #44]	; (11d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11ce4:	9b01      	ldr	r3, [sp, #4]
   11ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   11cea:	4a0a      	ldr	r2, [pc, #40]	; (11d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
   11cec:	9b01      	ldr	r3, [sp, #4]
   11cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cf2:	f003 0301 	and.w	r3, r3, #1
   11cf6:	2b00      	cmp	r3, #0
   11cf8:	d106      	bne.n	11d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
   11cfa:	4a05      	ldr	r2, [pc, #20]	; (11d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11cfc:	9b01      	ldr	r3, [sp, #4]
   11cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d02:	2b00      	cmp	r3, #0
   11d04:	d100      	bne.n	11d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d08:	bf00      	nop
   11d0a:	b003      	add	sp, #12
   11d0c:	f85d fb04 	ldr.w	pc, [sp], #4
   11d10:	1fff9278 	.word	0x1fff9278
   11d14:	1fff9274 	.word	0x1fff9274

00011d18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   11d18:	b500      	push	{lr}
   11d1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d1c:	f7ef fd60 	bl	17e0 <Sys_GetCoreID>
   11d20:	4603      	mov	r3, r0
   11d22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
   11d24:	4a10      	ldr	r2, [pc, #64]	; (11d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11d26:	9b01      	ldr	r3, [sp, #4]
   11d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d2c:	2b00      	cmp	r3, #0
   11d2e:	d10d      	bne.n	11d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d30:	f7ee fdea 	bl	908 <Adc_schm_read_msr>
   11d34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d36:	9b00      	ldr	r3, [sp, #0]
   11d38:	f003 0301 	and.w	r3, r3, #1
   11d3c:	2b00      	cmp	r3, #0
   11d3e:	d100      	bne.n	11d42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   11d42:	490a      	ldr	r1, [pc, #40]	; (11d6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
   11d44:	9b01      	ldr	r3, [sp, #4]
   11d46:	9a00      	ldr	r2, [sp, #0]
   11d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
   11d4c:	4a06      	ldr	r2, [pc, #24]	; (11d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11d4e:	9b01      	ldr	r3, [sp, #4]
   11d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d54:	1c5a      	adds	r2, r3, #1
   11d56:	4904      	ldr	r1, [pc, #16]	; (11d68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11d58:	9b01      	ldr	r3, [sp, #4]
   11d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d5e:	bf00      	nop
   11d60:	b003      	add	sp, #12
   11d62:	f85d fb04 	ldr.w	pc, [sp], #4
   11d66:	bf00      	nop
   11d68:	1fff9280 	.word	0x1fff9280
   11d6c:	1fff927c 	.word	0x1fff927c

00011d70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   11d70:	b500      	push	{lr}
   11d72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d74:	f7ef fd34 	bl	17e0 <Sys_GetCoreID>
   11d78:	4603      	mov	r3, r0
   11d7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
   11d7c:	4a0d      	ldr	r2, [pc, #52]	; (11db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   11d7e:	9b01      	ldr	r3, [sp, #4]
   11d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d84:	1e5a      	subs	r2, r3, #1
   11d86:	490b      	ldr	r1, [pc, #44]	; (11db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   11d88:	9b01      	ldr	r3, [sp, #4]
   11d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   11d8e:	4a0a      	ldr	r2, [pc, #40]	; (11db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
   11d90:	9b01      	ldr	r3, [sp, #4]
   11d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d96:	f003 0301 	and.w	r3, r3, #1
   11d9a:	2b00      	cmp	r3, #0
   11d9c:	d106      	bne.n	11dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
   11d9e:	4a05      	ldr	r2, [pc, #20]	; (11db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   11da0:	9b01      	ldr	r3, [sp, #4]
   11da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11da6:	2b00      	cmp	r3, #0
   11da8:	d100      	bne.n	11dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11daa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11dac:	bf00      	nop
   11dae:	b003      	add	sp, #12
   11db0:	f85d fb04 	ldr.w	pc, [sp], #4
   11db4:	1fff9280 	.word	0x1fff9280
   11db8:	1fff927c 	.word	0x1fff927c

00011dbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   11dbc:	b500      	push	{lr}
   11dbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11dc0:	f7ef fd0e 	bl	17e0 <Sys_GetCoreID>
   11dc4:	4603      	mov	r3, r0
   11dc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
   11dc8:	4a10      	ldr	r2, [pc, #64]	; (11e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   11dca:	9b01      	ldr	r3, [sp, #4]
   11dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dd0:	2b00      	cmp	r3, #0
   11dd2:	d10d      	bne.n	11df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11dd4:	f7ee fd98 	bl	908 <Adc_schm_read_msr>
   11dd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11dda:	9b00      	ldr	r3, [sp, #0]
   11ddc:	f003 0301 	and.w	r3, r3, #1
   11de0:	2b00      	cmp	r3, #0
   11de2:	d100      	bne.n	11de6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11de4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   11de6:	490a      	ldr	r1, [pc, #40]	; (11e10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
   11de8:	9b01      	ldr	r3, [sp, #4]
   11dea:	9a00      	ldr	r2, [sp, #0]
   11dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
   11df0:	4a06      	ldr	r2, [pc, #24]	; (11e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   11df2:	9b01      	ldr	r3, [sp, #4]
   11df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11df8:	1c5a      	adds	r2, r3, #1
   11dfa:	4904      	ldr	r1, [pc, #16]	; (11e0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   11dfc:	9b01      	ldr	r3, [sp, #4]
   11dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e02:	bf00      	nop
   11e04:	b003      	add	sp, #12
   11e06:	f85d fb04 	ldr.w	pc, [sp], #4
   11e0a:	bf00      	nop
   11e0c:	1fff9288 	.word	0x1fff9288
   11e10:	1fff9284 	.word	0x1fff9284

00011e14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   11e14:	b500      	push	{lr}
   11e16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e18:	f7ef fce2 	bl	17e0 <Sys_GetCoreID>
   11e1c:	4603      	mov	r3, r0
   11e1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
   11e20:	4a0d      	ldr	r2, [pc, #52]	; (11e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   11e22:	9b01      	ldr	r3, [sp, #4]
   11e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e28:	1e5a      	subs	r2, r3, #1
   11e2a:	490b      	ldr	r1, [pc, #44]	; (11e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   11e2c:	9b01      	ldr	r3, [sp, #4]
   11e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   11e32:	4a0a      	ldr	r2, [pc, #40]	; (11e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
   11e34:	9b01      	ldr	r3, [sp, #4]
   11e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e3a:	f003 0301 	and.w	r3, r3, #1
   11e3e:	2b00      	cmp	r3, #0
   11e40:	d106      	bne.n	11e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
   11e42:	4a05      	ldr	r2, [pc, #20]	; (11e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   11e44:	9b01      	ldr	r3, [sp, #4]
   11e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e4a:	2b00      	cmp	r3, #0
   11e4c:	d100      	bne.n	11e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e50:	bf00      	nop
   11e52:	b003      	add	sp, #12
   11e54:	f85d fb04 	ldr.w	pc, [sp], #4
   11e58:	1fff9288 	.word	0x1fff9288
   11e5c:	1fff9284 	.word	0x1fff9284

00011e60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   11e60:	b500      	push	{lr}
   11e62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e64:	f7ef fcbc 	bl	17e0 <Sys_GetCoreID>
   11e68:	4603      	mov	r3, r0
   11e6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
   11e6c:	4a10      	ldr	r2, [pc, #64]	; (11eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   11e6e:	9b01      	ldr	r3, [sp, #4]
   11e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e74:	2b00      	cmp	r3, #0
   11e76:	d10d      	bne.n	11e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e78:	f7ee fd46 	bl	908 <Adc_schm_read_msr>
   11e7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e7e:	9b00      	ldr	r3, [sp, #0]
   11e80:	f003 0301 	and.w	r3, r3, #1
   11e84:	2b00      	cmp	r3, #0
   11e86:	d100      	bne.n	11e8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   11e8a:	490a      	ldr	r1, [pc, #40]	; (11eb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
   11e8c:	9b01      	ldr	r3, [sp, #4]
   11e8e:	9a00      	ldr	r2, [sp, #0]
   11e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
   11e94:	4a06      	ldr	r2, [pc, #24]	; (11eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   11e96:	9b01      	ldr	r3, [sp, #4]
   11e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e9c:	1c5a      	adds	r2, r3, #1
   11e9e:	4904      	ldr	r1, [pc, #16]	; (11eb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   11ea0:	9b01      	ldr	r3, [sp, #4]
   11ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ea6:	bf00      	nop
   11ea8:	b003      	add	sp, #12
   11eaa:	f85d fb04 	ldr.w	pc, [sp], #4
   11eae:	bf00      	nop
   11eb0:	1fff9290 	.word	0x1fff9290
   11eb4:	1fff928c 	.word	0x1fff928c

00011eb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   11eb8:	b500      	push	{lr}
   11eba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ebc:	f7ef fc90 	bl	17e0 <Sys_GetCoreID>
   11ec0:	4603      	mov	r3, r0
   11ec2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
   11ec4:	4a0d      	ldr	r2, [pc, #52]	; (11efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   11ec6:	9b01      	ldr	r3, [sp, #4]
   11ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ecc:	1e5a      	subs	r2, r3, #1
   11ece:	490b      	ldr	r1, [pc, #44]	; (11efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   11ed0:	9b01      	ldr	r3, [sp, #4]
   11ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   11ed6:	4a0a      	ldr	r2, [pc, #40]	; (11f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
   11ed8:	9b01      	ldr	r3, [sp, #4]
   11eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ede:	f003 0301 	and.w	r3, r3, #1
   11ee2:	2b00      	cmp	r3, #0
   11ee4:	d106      	bne.n	11ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
   11ee6:	4a05      	ldr	r2, [pc, #20]	; (11efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   11ee8:	9b01      	ldr	r3, [sp, #4]
   11eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11eee:	2b00      	cmp	r3, #0
   11ef0:	d100      	bne.n	11ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ef2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ef4:	bf00      	nop
   11ef6:	b003      	add	sp, #12
   11ef8:	f85d fb04 	ldr.w	pc, [sp], #4
   11efc:	1fff9290 	.word	0x1fff9290
   11f00:	1fff928c 	.word	0x1fff928c

00011f04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   11f04:	b500      	push	{lr}
   11f06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f08:	f7ef fc6a 	bl	17e0 <Sys_GetCoreID>
   11f0c:	4603      	mov	r3, r0
   11f0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
   11f10:	4a10      	ldr	r2, [pc, #64]	; (11f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   11f12:	9b01      	ldr	r3, [sp, #4]
   11f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f18:	2b00      	cmp	r3, #0
   11f1a:	d10d      	bne.n	11f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f1c:	f7ee fcf4 	bl	908 <Adc_schm_read_msr>
   11f20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f22:	9b00      	ldr	r3, [sp, #0]
   11f24:	f003 0301 	and.w	r3, r3, #1
   11f28:	2b00      	cmp	r3, #0
   11f2a:	d100      	bne.n	11f2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   11f2e:	490a      	ldr	r1, [pc, #40]	; (11f58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
   11f30:	9b01      	ldr	r3, [sp, #4]
   11f32:	9a00      	ldr	r2, [sp, #0]
   11f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
   11f38:	4a06      	ldr	r2, [pc, #24]	; (11f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   11f3a:	9b01      	ldr	r3, [sp, #4]
   11f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f40:	1c5a      	adds	r2, r3, #1
   11f42:	4904      	ldr	r1, [pc, #16]	; (11f54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   11f44:	9b01      	ldr	r3, [sp, #4]
   11f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f4a:	bf00      	nop
   11f4c:	b003      	add	sp, #12
   11f4e:	f85d fb04 	ldr.w	pc, [sp], #4
   11f52:	bf00      	nop
   11f54:	1fff9298 	.word	0x1fff9298
   11f58:	1fff9294 	.word	0x1fff9294

00011f5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   11f5c:	b500      	push	{lr}
   11f5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f60:	f7ef fc3e 	bl	17e0 <Sys_GetCoreID>
   11f64:	4603      	mov	r3, r0
   11f66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
   11f68:	4a0d      	ldr	r2, [pc, #52]	; (11fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   11f6a:	9b01      	ldr	r3, [sp, #4]
   11f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f70:	1e5a      	subs	r2, r3, #1
   11f72:	490b      	ldr	r1, [pc, #44]	; (11fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   11f74:	9b01      	ldr	r3, [sp, #4]
   11f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   11f7a:	4a0a      	ldr	r2, [pc, #40]	; (11fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
   11f7c:	9b01      	ldr	r3, [sp, #4]
   11f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f82:	f003 0301 	and.w	r3, r3, #1
   11f86:	2b00      	cmp	r3, #0
   11f88:	d106      	bne.n	11f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
   11f8a:	4a05      	ldr	r2, [pc, #20]	; (11fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   11f8c:	9b01      	ldr	r3, [sp, #4]
   11f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f92:	2b00      	cmp	r3, #0
   11f94:	d100      	bne.n	11f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f98:	bf00      	nop
   11f9a:	b003      	add	sp, #12
   11f9c:	f85d fb04 	ldr.w	pc, [sp], #4
   11fa0:	1fff9298 	.word	0x1fff9298
   11fa4:	1fff9294 	.word	0x1fff9294

00011fa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   11fa8:	b500      	push	{lr}
   11faa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fac:	f7ef fc18 	bl	17e0 <Sys_GetCoreID>
   11fb0:	4603      	mov	r3, r0
   11fb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
   11fb4:	4a10      	ldr	r2, [pc, #64]	; (11ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   11fb6:	9b01      	ldr	r3, [sp, #4]
   11fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fbc:	2b00      	cmp	r3, #0
   11fbe:	d10d      	bne.n	11fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11fc0:	f7ee fca2 	bl	908 <Adc_schm_read_msr>
   11fc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11fc6:	9b00      	ldr	r3, [sp, #0]
   11fc8:	f003 0301 	and.w	r3, r3, #1
   11fcc:	2b00      	cmp	r3, #0
   11fce:	d100      	bne.n	11fd2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11fd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   11fd2:	490a      	ldr	r1, [pc, #40]	; (11ffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
   11fd4:	9b01      	ldr	r3, [sp, #4]
   11fd6:	9a00      	ldr	r2, [sp, #0]
   11fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
   11fdc:	4a06      	ldr	r2, [pc, #24]	; (11ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   11fde:	9b01      	ldr	r3, [sp, #4]
   11fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fe4:	1c5a      	adds	r2, r3, #1
   11fe6:	4904      	ldr	r1, [pc, #16]	; (11ff8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   11fe8:	9b01      	ldr	r3, [sp, #4]
   11fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11fee:	bf00      	nop
   11ff0:	b003      	add	sp, #12
   11ff2:	f85d fb04 	ldr.w	pc, [sp], #4
   11ff6:	bf00      	nop
   11ff8:	1fff92a0 	.word	0x1fff92a0
   11ffc:	1fff929c 	.word	0x1fff929c

00012000 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   12000:	b500      	push	{lr}
   12002:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12004:	f7ef fbec 	bl	17e0 <Sys_GetCoreID>
   12008:	4603      	mov	r3, r0
   1200a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
   1200c:	4a0d      	ldr	r2, [pc, #52]	; (12044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   1200e:	9b01      	ldr	r3, [sp, #4]
   12010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12014:	1e5a      	subs	r2, r3, #1
   12016:	490b      	ldr	r1, [pc, #44]	; (12044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   12018:	9b01      	ldr	r3, [sp, #4]
   1201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1201e:	4a0a      	ldr	r2, [pc, #40]	; (12048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
   12020:	9b01      	ldr	r3, [sp, #4]
   12022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12026:	f003 0301 	and.w	r3, r3, #1
   1202a:	2b00      	cmp	r3, #0
   1202c:	d106      	bne.n	1203c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
   1202e:	4a05      	ldr	r2, [pc, #20]	; (12044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   12030:	9b01      	ldr	r3, [sp, #4]
   12032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12036:	2b00      	cmp	r3, #0
   12038:	d100      	bne.n	1203c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1203a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1203c:	bf00      	nop
   1203e:	b003      	add	sp, #12
   12040:	f85d fb04 	ldr.w	pc, [sp], #4
   12044:	1fff92a0 	.word	0x1fff92a0
   12048:	1fff929c 	.word	0x1fff929c

0001204c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   1204c:	b500      	push	{lr}
   1204e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12050:	f7ef fbc6 	bl	17e0 <Sys_GetCoreID>
   12054:	4603      	mov	r3, r0
   12056:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
   12058:	4a10      	ldr	r2, [pc, #64]	; (1209c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   1205a:	9b01      	ldr	r3, [sp, #4]
   1205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12060:	2b00      	cmp	r3, #0
   12062:	d10d      	bne.n	12080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12064:	f7ee fc50 	bl	908 <Adc_schm_read_msr>
   12068:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1206a:	9b00      	ldr	r3, [sp, #0]
   1206c:	f003 0301 	and.w	r3, r3, #1
   12070:	2b00      	cmp	r3, #0
   12072:	d100      	bne.n	12076 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12074:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   12076:	490a      	ldr	r1, [pc, #40]	; (120a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
   12078:	9b01      	ldr	r3, [sp, #4]
   1207a:	9a00      	ldr	r2, [sp, #0]
   1207c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
   12080:	4a06      	ldr	r2, [pc, #24]	; (1209c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   12082:	9b01      	ldr	r3, [sp, #4]
   12084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12088:	1c5a      	adds	r2, r3, #1
   1208a:	4904      	ldr	r1, [pc, #16]	; (1209c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   1208c:	9b01      	ldr	r3, [sp, #4]
   1208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12092:	bf00      	nop
   12094:	b003      	add	sp, #12
   12096:	f85d fb04 	ldr.w	pc, [sp], #4
   1209a:	bf00      	nop
   1209c:	1fff92a8 	.word	0x1fff92a8
   120a0:	1fff92a4 	.word	0x1fff92a4

000120a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   120a4:	b500      	push	{lr}
   120a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120a8:	f7ef fb9a 	bl	17e0 <Sys_GetCoreID>
   120ac:	4603      	mov	r3, r0
   120ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
   120b0:	4a0d      	ldr	r2, [pc, #52]	; (120e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   120b2:	9b01      	ldr	r3, [sp, #4]
   120b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120b8:	1e5a      	subs	r2, r3, #1
   120ba:	490b      	ldr	r1, [pc, #44]	; (120e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   120bc:	9b01      	ldr	r3, [sp, #4]
   120be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   120c2:	4a0a      	ldr	r2, [pc, #40]	; (120ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
   120c4:	9b01      	ldr	r3, [sp, #4]
   120c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120ca:	f003 0301 	and.w	r3, r3, #1
   120ce:	2b00      	cmp	r3, #0
   120d0:	d106      	bne.n	120e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
   120d2:	4a05      	ldr	r2, [pc, #20]	; (120e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   120d4:	9b01      	ldr	r3, [sp, #4]
   120d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120da:	2b00      	cmp	r3, #0
   120dc:	d100      	bne.n	120e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   120de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   120e0:	bf00      	nop
   120e2:	b003      	add	sp, #12
   120e4:	f85d fb04 	ldr.w	pc, [sp], #4
   120e8:	1fff92a8 	.word	0x1fff92a8
   120ec:	1fff92a4 	.word	0x1fff92a4

000120f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   120f0:	b500      	push	{lr}
   120f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120f4:	f7ef fb74 	bl	17e0 <Sys_GetCoreID>
   120f8:	4603      	mov	r3, r0
   120fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
   120fc:	4a10      	ldr	r2, [pc, #64]	; (12140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   120fe:	9b01      	ldr	r3, [sp, #4]
   12100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12104:	2b00      	cmp	r3, #0
   12106:	d10d      	bne.n	12124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12108:	f7ee fbfe 	bl	908 <Adc_schm_read_msr>
   1210c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1210e:	9b00      	ldr	r3, [sp, #0]
   12110:	f003 0301 	and.w	r3, r3, #1
   12114:	2b00      	cmp	r3, #0
   12116:	d100      	bne.n	1211a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12118:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   1211a:	490a      	ldr	r1, [pc, #40]	; (12144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
   1211c:	9b01      	ldr	r3, [sp, #4]
   1211e:	9a00      	ldr	r2, [sp, #0]
   12120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
   12124:	4a06      	ldr	r2, [pc, #24]	; (12140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   12126:	9b01      	ldr	r3, [sp, #4]
   12128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1212c:	1c5a      	adds	r2, r3, #1
   1212e:	4904      	ldr	r1, [pc, #16]	; (12140 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   12130:	9b01      	ldr	r3, [sp, #4]
   12132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12136:	bf00      	nop
   12138:	b003      	add	sp, #12
   1213a:	f85d fb04 	ldr.w	pc, [sp], #4
   1213e:	bf00      	nop
   12140:	1fff92b0 	.word	0x1fff92b0
   12144:	1fff92ac 	.word	0x1fff92ac

00012148 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   12148:	b500      	push	{lr}
   1214a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1214c:	f7ef fb48 	bl	17e0 <Sys_GetCoreID>
   12150:	4603      	mov	r3, r0
   12152:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
   12154:	4a0d      	ldr	r2, [pc, #52]	; (1218c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   12156:	9b01      	ldr	r3, [sp, #4]
   12158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1215c:	1e5a      	subs	r2, r3, #1
   1215e:	490b      	ldr	r1, [pc, #44]	; (1218c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   12160:	9b01      	ldr	r3, [sp, #4]
   12162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   12166:	4a0a      	ldr	r2, [pc, #40]	; (12190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
   12168:	9b01      	ldr	r3, [sp, #4]
   1216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1216e:	f003 0301 	and.w	r3, r3, #1
   12172:	2b00      	cmp	r3, #0
   12174:	d106      	bne.n	12184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
   12176:	4a05      	ldr	r2, [pc, #20]	; (1218c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   12178:	9b01      	ldr	r3, [sp, #4]
   1217a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1217e:	2b00      	cmp	r3, #0
   12180:	d100      	bne.n	12184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12182:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12184:	bf00      	nop
   12186:	b003      	add	sp, #12
   12188:	f85d fb04 	ldr.w	pc, [sp], #4
   1218c:	1fff92b0 	.word	0x1fff92b0
   12190:	1fff92ac 	.word	0x1fff92ac

00012194 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   12194:	b500      	push	{lr}
   12196:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12198:	f7ef fb22 	bl	17e0 <Sys_GetCoreID>
   1219c:	4603      	mov	r3, r0
   1219e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
   121a0:	4a10      	ldr	r2, [pc, #64]	; (121e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   121a2:	9b01      	ldr	r3, [sp, #4]
   121a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121a8:	2b00      	cmp	r3, #0
   121aa:	d10d      	bne.n	121c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   121ac:	f7ee fbac 	bl	908 <Adc_schm_read_msr>
   121b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   121b2:	9b00      	ldr	r3, [sp, #0]
   121b4:	f003 0301 	and.w	r3, r3, #1
   121b8:	2b00      	cmp	r3, #0
   121ba:	d100      	bne.n	121be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   121bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   121be:	490a      	ldr	r1, [pc, #40]	; (121e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
   121c0:	9b01      	ldr	r3, [sp, #4]
   121c2:	9a00      	ldr	r2, [sp, #0]
   121c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
   121c8:	4a06      	ldr	r2, [pc, #24]	; (121e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   121ca:	9b01      	ldr	r3, [sp, #4]
   121cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121d0:	1c5a      	adds	r2, r3, #1
   121d2:	4904      	ldr	r1, [pc, #16]	; (121e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   121d4:	9b01      	ldr	r3, [sp, #4]
   121d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   121da:	bf00      	nop
   121dc:	b003      	add	sp, #12
   121de:	f85d fb04 	ldr.w	pc, [sp], #4
   121e2:	bf00      	nop
   121e4:	1fff92b8 	.word	0x1fff92b8
   121e8:	1fff92b4 	.word	0x1fff92b4

000121ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   121ec:	b500      	push	{lr}
   121ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121f0:	f7ef faf6 	bl	17e0 <Sys_GetCoreID>
   121f4:	4603      	mov	r3, r0
   121f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
   121f8:	4a0d      	ldr	r2, [pc, #52]	; (12230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   121fa:	9b01      	ldr	r3, [sp, #4]
   121fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12200:	1e5a      	subs	r2, r3, #1
   12202:	490b      	ldr	r1, [pc, #44]	; (12230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   12204:	9b01      	ldr	r3, [sp, #4]
   12206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   1220a:	4a0a      	ldr	r2, [pc, #40]	; (12234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
   1220c:	9b01      	ldr	r3, [sp, #4]
   1220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12212:	f003 0301 	and.w	r3, r3, #1
   12216:	2b00      	cmp	r3, #0
   12218:	d106      	bne.n	12228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
   1221a:	4a05      	ldr	r2, [pc, #20]	; (12230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   1221c:	9b01      	ldr	r3, [sp, #4]
   1221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12222:	2b00      	cmp	r3, #0
   12224:	d100      	bne.n	12228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12226:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12228:	bf00      	nop
   1222a:	b003      	add	sp, #12
   1222c:	f85d fb04 	ldr.w	pc, [sp], #4
   12230:	1fff92b8 	.word	0x1fff92b8
   12234:	1fff92b4 	.word	0x1fff92b4

00012238 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   12238:	b500      	push	{lr}
   1223a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1223c:	f7ef fad0 	bl	17e0 <Sys_GetCoreID>
   12240:	4603      	mov	r3, r0
   12242:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
   12244:	4a10      	ldr	r2, [pc, #64]	; (12288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   12246:	9b01      	ldr	r3, [sp, #4]
   12248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1224c:	2b00      	cmp	r3, #0
   1224e:	d10d      	bne.n	1226c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12250:	f7ee fb5a 	bl	908 <Adc_schm_read_msr>
   12254:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12256:	9b00      	ldr	r3, [sp, #0]
   12258:	f003 0301 	and.w	r3, r3, #1
   1225c:	2b00      	cmp	r3, #0
   1225e:	d100      	bne.n	12262 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12260:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   12262:	490a      	ldr	r1, [pc, #40]	; (1228c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
   12264:	9b01      	ldr	r3, [sp, #4]
   12266:	9a00      	ldr	r2, [sp, #0]
   12268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
   1226c:	4a06      	ldr	r2, [pc, #24]	; (12288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   1226e:	9b01      	ldr	r3, [sp, #4]
   12270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12274:	1c5a      	adds	r2, r3, #1
   12276:	4904      	ldr	r1, [pc, #16]	; (12288 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   12278:	9b01      	ldr	r3, [sp, #4]
   1227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1227e:	bf00      	nop
   12280:	b003      	add	sp, #12
   12282:	f85d fb04 	ldr.w	pc, [sp], #4
   12286:	bf00      	nop
   12288:	1fff92c0 	.word	0x1fff92c0
   1228c:	1fff92bc 	.word	0x1fff92bc

00012290 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   12290:	b500      	push	{lr}
   12292:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12294:	f7ef faa4 	bl	17e0 <Sys_GetCoreID>
   12298:	4603      	mov	r3, r0
   1229a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
   1229c:	4a0d      	ldr	r2, [pc, #52]	; (122d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   1229e:	9b01      	ldr	r3, [sp, #4]
   122a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122a4:	1e5a      	subs	r2, r3, #1
   122a6:	490b      	ldr	r1, [pc, #44]	; (122d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   122a8:	9b01      	ldr	r3, [sp, #4]
   122aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   122ae:	4a0a      	ldr	r2, [pc, #40]	; (122d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
   122b0:	9b01      	ldr	r3, [sp, #4]
   122b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122b6:	f003 0301 	and.w	r3, r3, #1
   122ba:	2b00      	cmp	r3, #0
   122bc:	d106      	bne.n	122cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
   122be:	4a05      	ldr	r2, [pc, #20]	; (122d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   122c0:	9b01      	ldr	r3, [sp, #4]
   122c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122c6:	2b00      	cmp	r3, #0
   122c8:	d100      	bne.n	122cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   122ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   122cc:	bf00      	nop
   122ce:	b003      	add	sp, #12
   122d0:	f85d fb04 	ldr.w	pc, [sp], #4
   122d4:	1fff92c0 	.word	0x1fff92c0
   122d8:	1fff92bc 	.word	0x1fff92bc

000122dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   122dc:	b500      	push	{lr}
   122de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122e0:	f7ef fa7e 	bl	17e0 <Sys_GetCoreID>
   122e4:	4603      	mov	r3, r0
   122e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
   122e8:	4a10      	ldr	r2, [pc, #64]	; (1232c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   122ea:	9b01      	ldr	r3, [sp, #4]
   122ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122f0:	2b00      	cmp	r3, #0
   122f2:	d10d      	bne.n	12310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   122f4:	f7ee fb08 	bl	908 <Adc_schm_read_msr>
   122f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   122fa:	9b00      	ldr	r3, [sp, #0]
   122fc:	f003 0301 	and.w	r3, r3, #1
   12300:	2b00      	cmp	r3, #0
   12302:	d100      	bne.n	12306 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12304:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   12306:	490a      	ldr	r1, [pc, #40]	; (12330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
   12308:	9b01      	ldr	r3, [sp, #4]
   1230a:	9a00      	ldr	r2, [sp, #0]
   1230c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
   12310:	4a06      	ldr	r2, [pc, #24]	; (1232c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   12312:	9b01      	ldr	r3, [sp, #4]
   12314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12318:	1c5a      	adds	r2, r3, #1
   1231a:	4904      	ldr	r1, [pc, #16]	; (1232c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   1231c:	9b01      	ldr	r3, [sp, #4]
   1231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12322:	bf00      	nop
   12324:	b003      	add	sp, #12
   12326:	f85d fb04 	ldr.w	pc, [sp], #4
   1232a:	bf00      	nop
   1232c:	1fff92c8 	.word	0x1fff92c8
   12330:	1fff92c4 	.word	0x1fff92c4

00012334 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   12334:	b500      	push	{lr}
   12336:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12338:	f7ef fa52 	bl	17e0 <Sys_GetCoreID>
   1233c:	4603      	mov	r3, r0
   1233e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
   12340:	4a0d      	ldr	r2, [pc, #52]	; (12378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   12342:	9b01      	ldr	r3, [sp, #4]
   12344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12348:	1e5a      	subs	r2, r3, #1
   1234a:	490b      	ldr	r1, [pc, #44]	; (12378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   1234c:	9b01      	ldr	r3, [sp, #4]
   1234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   12352:	4a0a      	ldr	r2, [pc, #40]	; (1237c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
   12354:	9b01      	ldr	r3, [sp, #4]
   12356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1235a:	f003 0301 	and.w	r3, r3, #1
   1235e:	2b00      	cmp	r3, #0
   12360:	d106      	bne.n	12370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
   12362:	4a05      	ldr	r2, [pc, #20]	; (12378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   12364:	9b01      	ldr	r3, [sp, #4]
   12366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1236a:	2b00      	cmp	r3, #0
   1236c:	d100      	bne.n	12370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1236e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12370:	bf00      	nop
   12372:	b003      	add	sp, #12
   12374:	f85d fb04 	ldr.w	pc, [sp], #4
   12378:	1fff92c8 	.word	0x1fff92c8
   1237c:	1fff92c4 	.word	0x1fff92c4

00012380 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   12380:	b500      	push	{lr}
   12382:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12384:	f7ef fa2c 	bl	17e0 <Sys_GetCoreID>
   12388:	4603      	mov	r3, r0
   1238a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
   1238c:	4a10      	ldr	r2, [pc, #64]	; (123d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   1238e:	9b01      	ldr	r3, [sp, #4]
   12390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12394:	2b00      	cmp	r3, #0
   12396:	d10d      	bne.n	123b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12398:	f7ee fab6 	bl	908 <Adc_schm_read_msr>
   1239c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1239e:	9b00      	ldr	r3, [sp, #0]
   123a0:	f003 0301 	and.w	r3, r3, #1
   123a4:	2b00      	cmp	r3, #0
   123a6:	d100      	bne.n	123aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   123a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   123aa:	490a      	ldr	r1, [pc, #40]	; (123d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
   123ac:	9b01      	ldr	r3, [sp, #4]
   123ae:	9a00      	ldr	r2, [sp, #0]
   123b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
   123b4:	4a06      	ldr	r2, [pc, #24]	; (123d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   123b6:	9b01      	ldr	r3, [sp, #4]
   123b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123bc:	1c5a      	adds	r2, r3, #1
   123be:	4904      	ldr	r1, [pc, #16]	; (123d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   123c0:	9b01      	ldr	r3, [sp, #4]
   123c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   123c6:	bf00      	nop
   123c8:	b003      	add	sp, #12
   123ca:	f85d fb04 	ldr.w	pc, [sp], #4
   123ce:	bf00      	nop
   123d0:	1fff92d0 	.word	0x1fff92d0
   123d4:	1fff92cc 	.word	0x1fff92cc

000123d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   123d8:	b500      	push	{lr}
   123da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123dc:	f7ef fa00 	bl	17e0 <Sys_GetCoreID>
   123e0:	4603      	mov	r3, r0
   123e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
   123e4:	4a0d      	ldr	r2, [pc, #52]	; (1241c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   123e6:	9b01      	ldr	r3, [sp, #4]
   123e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123ec:	1e5a      	subs	r2, r3, #1
   123ee:	490b      	ldr	r1, [pc, #44]	; (1241c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   123f0:	9b01      	ldr	r3, [sp, #4]
   123f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   123f6:	4a0a      	ldr	r2, [pc, #40]	; (12420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
   123f8:	9b01      	ldr	r3, [sp, #4]
   123fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123fe:	f003 0301 	and.w	r3, r3, #1
   12402:	2b00      	cmp	r3, #0
   12404:	d106      	bne.n	12414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
   12406:	4a05      	ldr	r2, [pc, #20]	; (1241c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   12408:	9b01      	ldr	r3, [sp, #4]
   1240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1240e:	2b00      	cmp	r3, #0
   12410:	d100      	bne.n	12414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12412:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12414:	bf00      	nop
   12416:	b003      	add	sp, #12
   12418:	f85d fb04 	ldr.w	pc, [sp], #4
   1241c:	1fff92d0 	.word	0x1fff92d0
   12420:	1fff92cc 	.word	0x1fff92cc

00012424 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   12424:	b500      	push	{lr}
   12426:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12428:	f7ef f9da 	bl	17e0 <Sys_GetCoreID>
   1242c:	4603      	mov	r3, r0
   1242e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
   12430:	4a10      	ldr	r2, [pc, #64]	; (12474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   12432:	9b01      	ldr	r3, [sp, #4]
   12434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12438:	2b00      	cmp	r3, #0
   1243a:	d10d      	bne.n	12458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1243c:	f7ee fa64 	bl	908 <Adc_schm_read_msr>
   12440:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12442:	9b00      	ldr	r3, [sp, #0]
   12444:	f003 0301 	and.w	r3, r3, #1
   12448:	2b00      	cmp	r3, #0
   1244a:	d100      	bne.n	1244e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1244c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   1244e:	490a      	ldr	r1, [pc, #40]	; (12478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   12450:	9b01      	ldr	r3, [sp, #4]
   12452:	9a00      	ldr	r2, [sp, #0]
   12454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   12458:	4a06      	ldr	r2, [pc, #24]	; (12474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   1245a:	9b01      	ldr	r3, [sp, #4]
   1245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12460:	1c5a      	adds	r2, r3, #1
   12462:	4904      	ldr	r1, [pc, #16]	; (12474 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   12464:	9b01      	ldr	r3, [sp, #4]
   12466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1246a:	bf00      	nop
   1246c:	b003      	add	sp, #12
   1246e:	f85d fb04 	ldr.w	pc, [sp], #4
   12472:	bf00      	nop
   12474:	1fff92d8 	.word	0x1fff92d8
   12478:	1fff92d4 	.word	0x1fff92d4

0001247c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   1247c:	b500      	push	{lr}
   1247e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12480:	f7ef f9ae 	bl	17e0 <Sys_GetCoreID>
   12484:	4603      	mov	r3, r0
   12486:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   12488:	4a0d      	ldr	r2, [pc, #52]	; (124c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   1248a:	9b01      	ldr	r3, [sp, #4]
   1248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12490:	1e5a      	subs	r2, r3, #1
   12492:	490b      	ldr	r1, [pc, #44]	; (124c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   12494:	9b01      	ldr	r3, [sp, #4]
   12496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   1249a:	4a0a      	ldr	r2, [pc, #40]	; (124c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   1249c:	9b01      	ldr	r3, [sp, #4]
   1249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124a2:	f003 0301 	and.w	r3, r3, #1
   124a6:	2b00      	cmp	r3, #0
   124a8:	d106      	bne.n	124b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   124aa:	4a05      	ldr	r2, [pc, #20]	; (124c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   124ac:	9b01      	ldr	r3, [sp, #4]
   124ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124b2:	2b00      	cmp	r3, #0
   124b4:	d100      	bne.n	124b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   124b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   124b8:	bf00      	nop
   124ba:	b003      	add	sp, #12
   124bc:	f85d fb04 	ldr.w	pc, [sp], #4
   124c0:	1fff92d8 	.word	0x1fff92d8
   124c4:	1fff92d4 	.word	0x1fff92d4

000124c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   124c8:	b500      	push	{lr}
   124ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124cc:	f7ef f988 	bl	17e0 <Sys_GetCoreID>
   124d0:	4603      	mov	r3, r0
   124d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   124d4:	4a10      	ldr	r2, [pc, #64]	; (12518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   124d6:	9b01      	ldr	r3, [sp, #4]
   124d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124dc:	2b00      	cmp	r3, #0
   124de:	d10d      	bne.n	124fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   124e0:	f7ee fa12 	bl	908 <Adc_schm_read_msr>
   124e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   124e6:	9b00      	ldr	r3, [sp, #0]
   124e8:	f003 0301 	and.w	r3, r3, #1
   124ec:	2b00      	cmp	r3, #0
   124ee:	d100      	bne.n	124f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   124f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   124f2:	490a      	ldr	r1, [pc, #40]	; (1251c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   124f4:	9b01      	ldr	r3, [sp, #4]
   124f6:	9a00      	ldr	r2, [sp, #0]
   124f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   124fc:	4a06      	ldr	r2, [pc, #24]	; (12518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   124fe:	9b01      	ldr	r3, [sp, #4]
   12500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12504:	1c5a      	adds	r2, r3, #1
   12506:	4904      	ldr	r1, [pc, #16]	; (12518 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   12508:	9b01      	ldr	r3, [sp, #4]
   1250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1250e:	bf00      	nop
   12510:	b003      	add	sp, #12
   12512:	f85d fb04 	ldr.w	pc, [sp], #4
   12516:	bf00      	nop
   12518:	1fff92e0 	.word	0x1fff92e0
   1251c:	1fff92dc 	.word	0x1fff92dc

00012520 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   12520:	b500      	push	{lr}
   12522:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12524:	f7ef f95c 	bl	17e0 <Sys_GetCoreID>
   12528:	4603      	mov	r3, r0
   1252a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   1252c:	4a0d      	ldr	r2, [pc, #52]	; (12564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   1252e:	9b01      	ldr	r3, [sp, #4]
   12530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12534:	1e5a      	subs	r2, r3, #1
   12536:	490b      	ldr	r1, [pc, #44]	; (12564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   12538:	9b01      	ldr	r3, [sp, #4]
   1253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   1253e:	4a0a      	ldr	r2, [pc, #40]	; (12568 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   12540:	9b01      	ldr	r3, [sp, #4]
   12542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12546:	f003 0301 	and.w	r3, r3, #1
   1254a:	2b00      	cmp	r3, #0
   1254c:	d106      	bne.n	1255c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   1254e:	4a05      	ldr	r2, [pc, #20]	; (12564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   12550:	9b01      	ldr	r3, [sp, #4]
   12552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12556:	2b00      	cmp	r3, #0
   12558:	d100      	bne.n	1255c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1255a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1255c:	bf00      	nop
   1255e:	b003      	add	sp, #12
   12560:	f85d fb04 	ldr.w	pc, [sp], #4
   12564:	1fff92e0 	.word	0x1fff92e0
   12568:	1fff92dc 	.word	0x1fff92dc

0001256c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   1256c:	b500      	push	{lr}
   1256e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12570:	f7ef f936 	bl	17e0 <Sys_GetCoreID>
   12574:	4603      	mov	r3, r0
   12576:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   12578:	4a10      	ldr	r2, [pc, #64]	; (125bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   1257a:	9b01      	ldr	r3, [sp, #4]
   1257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12580:	2b00      	cmp	r3, #0
   12582:	d10d      	bne.n	125a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12584:	f7ee f9c0 	bl	908 <Adc_schm_read_msr>
   12588:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1258a:	9b00      	ldr	r3, [sp, #0]
   1258c:	f003 0301 	and.w	r3, r3, #1
   12590:	2b00      	cmp	r3, #0
   12592:	d100      	bne.n	12596 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12594:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   12596:	490a      	ldr	r1, [pc, #40]	; (125c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   12598:	9b01      	ldr	r3, [sp, #4]
   1259a:	9a00      	ldr	r2, [sp, #0]
   1259c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   125a0:	4a06      	ldr	r2, [pc, #24]	; (125bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   125a2:	9b01      	ldr	r3, [sp, #4]
   125a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125a8:	1c5a      	adds	r2, r3, #1
   125aa:	4904      	ldr	r1, [pc, #16]	; (125bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   125ac:	9b01      	ldr	r3, [sp, #4]
   125ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   125b2:	bf00      	nop
   125b4:	b003      	add	sp, #12
   125b6:	f85d fb04 	ldr.w	pc, [sp], #4
   125ba:	bf00      	nop
   125bc:	1fff92e8 	.word	0x1fff92e8
   125c0:	1fff92e4 	.word	0x1fff92e4

000125c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   125c4:	b500      	push	{lr}
   125c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125c8:	f7ef f90a 	bl	17e0 <Sys_GetCoreID>
   125cc:	4603      	mov	r3, r0
   125ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   125d0:	4a0d      	ldr	r2, [pc, #52]	; (12608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   125d2:	9b01      	ldr	r3, [sp, #4]
   125d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125d8:	1e5a      	subs	r2, r3, #1
   125da:	490b      	ldr	r1, [pc, #44]	; (12608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   125dc:	9b01      	ldr	r3, [sp, #4]
   125de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   125e2:	4a0a      	ldr	r2, [pc, #40]	; (1260c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   125e4:	9b01      	ldr	r3, [sp, #4]
   125e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125ea:	f003 0301 	and.w	r3, r3, #1
   125ee:	2b00      	cmp	r3, #0
   125f0:	d106      	bne.n	12600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   125f2:	4a05      	ldr	r2, [pc, #20]	; (12608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   125f4:	9b01      	ldr	r3, [sp, #4]
   125f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125fa:	2b00      	cmp	r3, #0
   125fc:	d100      	bne.n	12600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   125fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12600:	bf00      	nop
   12602:	b003      	add	sp, #12
   12604:	f85d fb04 	ldr.w	pc, [sp], #4
   12608:	1fff92e8 	.word	0x1fff92e8
   1260c:	1fff92e4 	.word	0x1fff92e4

00012610 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   12610:	b500      	push	{lr}
   12612:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12614:	f7ef f8e4 	bl	17e0 <Sys_GetCoreID>
   12618:	4603      	mov	r3, r0
   1261a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   1261c:	4a10      	ldr	r2, [pc, #64]	; (12660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   1261e:	9b01      	ldr	r3, [sp, #4]
   12620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12624:	2b00      	cmp	r3, #0
   12626:	d10d      	bne.n	12644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12628:	f7ee f96e 	bl	908 <Adc_schm_read_msr>
   1262c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1262e:	9b00      	ldr	r3, [sp, #0]
   12630:	f003 0301 	and.w	r3, r3, #1
   12634:	2b00      	cmp	r3, #0
   12636:	d100      	bne.n	1263a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12638:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   1263a:	490a      	ldr	r1, [pc, #40]	; (12664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   1263c:	9b01      	ldr	r3, [sp, #4]
   1263e:	9a00      	ldr	r2, [sp, #0]
   12640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   12644:	4a06      	ldr	r2, [pc, #24]	; (12660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   12646:	9b01      	ldr	r3, [sp, #4]
   12648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1264c:	1c5a      	adds	r2, r3, #1
   1264e:	4904      	ldr	r1, [pc, #16]	; (12660 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   12650:	9b01      	ldr	r3, [sp, #4]
   12652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12656:	bf00      	nop
   12658:	b003      	add	sp, #12
   1265a:	f85d fb04 	ldr.w	pc, [sp], #4
   1265e:	bf00      	nop
   12660:	1fff92f0 	.word	0x1fff92f0
   12664:	1fff92ec 	.word	0x1fff92ec

00012668 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   12668:	b500      	push	{lr}
   1266a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1266c:	f7ef f8b8 	bl	17e0 <Sys_GetCoreID>
   12670:	4603      	mov	r3, r0
   12672:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   12674:	4a0d      	ldr	r2, [pc, #52]	; (126ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   12676:	9b01      	ldr	r3, [sp, #4]
   12678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1267c:	1e5a      	subs	r2, r3, #1
   1267e:	490b      	ldr	r1, [pc, #44]	; (126ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   12680:	9b01      	ldr	r3, [sp, #4]
   12682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   12686:	4a0a      	ldr	r2, [pc, #40]	; (126b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   12688:	9b01      	ldr	r3, [sp, #4]
   1268a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1268e:	f003 0301 	and.w	r3, r3, #1
   12692:	2b00      	cmp	r3, #0
   12694:	d106      	bne.n	126a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   12696:	4a05      	ldr	r2, [pc, #20]	; (126ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   12698:	9b01      	ldr	r3, [sp, #4]
   1269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1269e:	2b00      	cmp	r3, #0
   126a0:	d100      	bne.n	126a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   126a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   126a4:	bf00      	nop
   126a6:	b003      	add	sp, #12
   126a8:	f85d fb04 	ldr.w	pc, [sp], #4
   126ac:	1fff92f0 	.word	0x1fff92f0
   126b0:	1fff92ec 	.word	0x1fff92ec

000126b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   126b4:	b500      	push	{lr}
   126b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126b8:	f7ef f892 	bl	17e0 <Sys_GetCoreID>
   126bc:	4603      	mov	r3, r0
   126be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   126c0:	4a10      	ldr	r2, [pc, #64]	; (12704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   126c2:	9b01      	ldr	r3, [sp, #4]
   126c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126c8:	2b00      	cmp	r3, #0
   126ca:	d10d      	bne.n	126e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   126cc:	f7ee f91c 	bl	908 <Adc_schm_read_msr>
   126d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   126d2:	9b00      	ldr	r3, [sp, #0]
   126d4:	f003 0301 	and.w	r3, r3, #1
   126d8:	2b00      	cmp	r3, #0
   126da:	d100      	bne.n	126de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   126dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   126de:	490a      	ldr	r1, [pc, #40]	; (12708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   126e0:	9b01      	ldr	r3, [sp, #4]
   126e2:	9a00      	ldr	r2, [sp, #0]
   126e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   126e8:	4a06      	ldr	r2, [pc, #24]	; (12704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   126ea:	9b01      	ldr	r3, [sp, #4]
   126ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126f0:	1c5a      	adds	r2, r3, #1
   126f2:	4904      	ldr	r1, [pc, #16]	; (12704 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   126f4:	9b01      	ldr	r3, [sp, #4]
   126f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   126fa:	bf00      	nop
   126fc:	b003      	add	sp, #12
   126fe:	f85d fb04 	ldr.w	pc, [sp], #4
   12702:	bf00      	nop
   12704:	1fff92f8 	.word	0x1fff92f8
   12708:	1fff92f4 	.word	0x1fff92f4

0001270c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   1270c:	b500      	push	{lr}
   1270e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12710:	f7ef f866 	bl	17e0 <Sys_GetCoreID>
   12714:	4603      	mov	r3, r0
   12716:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   12718:	4a0d      	ldr	r2, [pc, #52]	; (12750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   1271a:	9b01      	ldr	r3, [sp, #4]
   1271c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12720:	1e5a      	subs	r2, r3, #1
   12722:	490b      	ldr	r1, [pc, #44]	; (12750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   12724:	9b01      	ldr	r3, [sp, #4]
   12726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   1272a:	4a0a      	ldr	r2, [pc, #40]	; (12754 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   1272c:	9b01      	ldr	r3, [sp, #4]
   1272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12732:	f003 0301 	and.w	r3, r3, #1
   12736:	2b00      	cmp	r3, #0
   12738:	d106      	bne.n	12748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   1273a:	4a05      	ldr	r2, [pc, #20]	; (12750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   1273c:	9b01      	ldr	r3, [sp, #4]
   1273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12742:	2b00      	cmp	r3, #0
   12744:	d100      	bne.n	12748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12746:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12748:	bf00      	nop
   1274a:	b003      	add	sp, #12
   1274c:	f85d fb04 	ldr.w	pc, [sp], #4
   12750:	1fff92f8 	.word	0x1fff92f8
   12754:	1fff92f4 	.word	0x1fff92f4

00012758 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   12758:	b500      	push	{lr}
   1275a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1275c:	f7ef f840 	bl	17e0 <Sys_GetCoreID>
   12760:	4603      	mov	r3, r0
   12762:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   12764:	4a10      	ldr	r2, [pc, #64]	; (127a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   12766:	9b01      	ldr	r3, [sp, #4]
   12768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1276c:	2b00      	cmp	r3, #0
   1276e:	d10d      	bne.n	1278c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12770:	f7ee f8ca 	bl	908 <Adc_schm_read_msr>
   12774:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12776:	9b00      	ldr	r3, [sp, #0]
   12778:	f003 0301 	and.w	r3, r3, #1
   1277c:	2b00      	cmp	r3, #0
   1277e:	d100      	bne.n	12782 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12780:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   12782:	490a      	ldr	r1, [pc, #40]	; (127ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   12784:	9b01      	ldr	r3, [sp, #4]
   12786:	9a00      	ldr	r2, [sp, #0]
   12788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   1278c:	4a06      	ldr	r2, [pc, #24]	; (127a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1278e:	9b01      	ldr	r3, [sp, #4]
   12790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12794:	1c5a      	adds	r2, r3, #1
   12796:	4904      	ldr	r1, [pc, #16]	; (127a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   12798:	9b01      	ldr	r3, [sp, #4]
   1279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1279e:	bf00      	nop
   127a0:	b003      	add	sp, #12
   127a2:	f85d fb04 	ldr.w	pc, [sp], #4
   127a6:	bf00      	nop
   127a8:	1fff9300 	.word	0x1fff9300
   127ac:	1fff92fc 	.word	0x1fff92fc

000127b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   127b0:	b500      	push	{lr}
   127b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127b4:	f7ef f814 	bl	17e0 <Sys_GetCoreID>
   127b8:	4603      	mov	r3, r0
   127ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   127bc:	4a0d      	ldr	r2, [pc, #52]	; (127f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   127be:	9b01      	ldr	r3, [sp, #4]
   127c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127c4:	1e5a      	subs	r2, r3, #1
   127c6:	490b      	ldr	r1, [pc, #44]	; (127f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   127c8:	9b01      	ldr	r3, [sp, #4]
   127ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   127ce:	4a0a      	ldr	r2, [pc, #40]	; (127f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   127d0:	9b01      	ldr	r3, [sp, #4]
   127d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127d6:	f003 0301 	and.w	r3, r3, #1
   127da:	2b00      	cmp	r3, #0
   127dc:	d106      	bne.n	127ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   127de:	4a05      	ldr	r2, [pc, #20]	; (127f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   127e0:	9b01      	ldr	r3, [sp, #4]
   127e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127e6:	2b00      	cmp	r3, #0
   127e8:	d100      	bne.n	127ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   127ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   127ec:	bf00      	nop
   127ee:	b003      	add	sp, #12
   127f0:	f85d fb04 	ldr.w	pc, [sp], #4
   127f4:	1fff9300 	.word	0x1fff9300
   127f8:	1fff92fc 	.word	0x1fff92fc

000127fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   127fc:	b500      	push	{lr}
   127fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12800:	f7ee ffee 	bl	17e0 <Sys_GetCoreID>
   12804:	4603      	mov	r3, r0
   12806:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   12808:	4a10      	ldr	r2, [pc, #64]	; (1284c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   1280a:	9b01      	ldr	r3, [sp, #4]
   1280c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12810:	2b00      	cmp	r3, #0
   12812:	d10d      	bne.n	12830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12814:	f7ee f878 	bl	908 <Adc_schm_read_msr>
   12818:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1281a:	9b00      	ldr	r3, [sp, #0]
   1281c:	f003 0301 	and.w	r3, r3, #1
   12820:	2b00      	cmp	r3, #0
   12822:	d100      	bne.n	12826 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12824:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   12826:	490a      	ldr	r1, [pc, #40]	; (12850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   12828:	9b01      	ldr	r3, [sp, #4]
   1282a:	9a00      	ldr	r2, [sp, #0]
   1282c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   12830:	4a06      	ldr	r2, [pc, #24]	; (1284c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   12832:	9b01      	ldr	r3, [sp, #4]
   12834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12838:	1c5a      	adds	r2, r3, #1
   1283a:	4904      	ldr	r1, [pc, #16]	; (1284c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   1283c:	9b01      	ldr	r3, [sp, #4]
   1283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12842:	bf00      	nop
   12844:	b003      	add	sp, #12
   12846:	f85d fb04 	ldr.w	pc, [sp], #4
   1284a:	bf00      	nop
   1284c:	1fff9308 	.word	0x1fff9308
   12850:	1fff9304 	.word	0x1fff9304

00012854 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   12854:	b500      	push	{lr}
   12856:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12858:	f7ee ffc2 	bl	17e0 <Sys_GetCoreID>
   1285c:	4603      	mov	r3, r0
   1285e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   12860:	4a0d      	ldr	r2, [pc, #52]	; (12898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   12862:	9b01      	ldr	r3, [sp, #4]
   12864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12868:	1e5a      	subs	r2, r3, #1
   1286a:	490b      	ldr	r1, [pc, #44]	; (12898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   1286c:	9b01      	ldr	r3, [sp, #4]
   1286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   12872:	4a0a      	ldr	r2, [pc, #40]	; (1289c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   12874:	9b01      	ldr	r3, [sp, #4]
   12876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1287a:	f003 0301 	and.w	r3, r3, #1
   1287e:	2b00      	cmp	r3, #0
   12880:	d106      	bne.n	12890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   12882:	4a05      	ldr	r2, [pc, #20]	; (12898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   12884:	9b01      	ldr	r3, [sp, #4]
   12886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1288a:	2b00      	cmp	r3, #0
   1288c:	d100      	bne.n	12890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1288e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12890:	bf00      	nop
   12892:	b003      	add	sp, #12
   12894:	f85d fb04 	ldr.w	pc, [sp], #4
   12898:	1fff9308 	.word	0x1fff9308
   1289c:	1fff9304 	.word	0x1fff9304

000128a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   128a0:	b500      	push	{lr}
   128a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128a4:	f7ee ff9c 	bl	17e0 <Sys_GetCoreID>
   128a8:	4603      	mov	r3, r0
   128aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   128ac:	4a10      	ldr	r2, [pc, #64]	; (128f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   128ae:	9b01      	ldr	r3, [sp, #4]
   128b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128b4:	2b00      	cmp	r3, #0
   128b6:	d10d      	bne.n	128d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   128b8:	f7ee f826 	bl	908 <Adc_schm_read_msr>
   128bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   128be:	9b00      	ldr	r3, [sp, #0]
   128c0:	f003 0301 	and.w	r3, r3, #1
   128c4:	2b00      	cmp	r3, #0
   128c6:	d100      	bne.n	128ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   128c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   128ca:	490a      	ldr	r1, [pc, #40]	; (128f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   128cc:	9b01      	ldr	r3, [sp, #4]
   128ce:	9a00      	ldr	r2, [sp, #0]
   128d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   128d4:	4a06      	ldr	r2, [pc, #24]	; (128f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   128d6:	9b01      	ldr	r3, [sp, #4]
   128d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128dc:	1c5a      	adds	r2, r3, #1
   128de:	4904      	ldr	r1, [pc, #16]	; (128f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   128e0:	9b01      	ldr	r3, [sp, #4]
   128e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   128e6:	bf00      	nop
   128e8:	b003      	add	sp, #12
   128ea:	f85d fb04 	ldr.w	pc, [sp], #4
   128ee:	bf00      	nop
   128f0:	1fff9310 	.word	0x1fff9310
   128f4:	1fff930c 	.word	0x1fff930c

000128f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   128f8:	b500      	push	{lr}
   128fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128fc:	f7ee ff70 	bl	17e0 <Sys_GetCoreID>
   12900:	4603      	mov	r3, r0
   12902:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   12904:	4a0d      	ldr	r2, [pc, #52]	; (1293c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   12906:	9b01      	ldr	r3, [sp, #4]
   12908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1290c:	1e5a      	subs	r2, r3, #1
   1290e:	490b      	ldr	r1, [pc, #44]	; (1293c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   12910:	9b01      	ldr	r3, [sp, #4]
   12912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   12916:	4a0a      	ldr	r2, [pc, #40]	; (12940 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   12918:	9b01      	ldr	r3, [sp, #4]
   1291a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1291e:	f003 0301 	and.w	r3, r3, #1
   12922:	2b00      	cmp	r3, #0
   12924:	d106      	bne.n	12934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   12926:	4a05      	ldr	r2, [pc, #20]	; (1293c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   12928:	9b01      	ldr	r3, [sp, #4]
   1292a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1292e:	2b00      	cmp	r3, #0
   12930:	d100      	bne.n	12934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12932:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12934:	bf00      	nop
   12936:	b003      	add	sp, #12
   12938:	f85d fb04 	ldr.w	pc, [sp], #4
   1293c:	1fff9310 	.word	0x1fff9310
   12940:	1fff930c 	.word	0x1fff930c

00012944 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   12944:	b500      	push	{lr}
   12946:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12948:	f7ee ff4a 	bl	17e0 <Sys_GetCoreID>
   1294c:	4603      	mov	r3, r0
   1294e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   12950:	4a10      	ldr	r2, [pc, #64]	; (12994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   12952:	9b01      	ldr	r3, [sp, #4]
   12954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12958:	2b00      	cmp	r3, #0
   1295a:	d10d      	bne.n	12978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1295c:	f7ed ffd4 	bl	908 <Adc_schm_read_msr>
   12960:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12962:	9b00      	ldr	r3, [sp, #0]
   12964:	f003 0301 	and.w	r3, r3, #1
   12968:	2b00      	cmp	r3, #0
   1296a:	d100      	bne.n	1296e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1296c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   1296e:	490a      	ldr	r1, [pc, #40]	; (12998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   12970:	9b01      	ldr	r3, [sp, #4]
   12972:	9a00      	ldr	r2, [sp, #0]
   12974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   12978:	4a06      	ldr	r2, [pc, #24]	; (12994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   1297a:	9b01      	ldr	r3, [sp, #4]
   1297c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12980:	1c5a      	adds	r2, r3, #1
   12982:	4904      	ldr	r1, [pc, #16]	; (12994 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   12984:	9b01      	ldr	r3, [sp, #4]
   12986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1298a:	bf00      	nop
   1298c:	b003      	add	sp, #12
   1298e:	f85d fb04 	ldr.w	pc, [sp], #4
   12992:	bf00      	nop
   12994:	1fff9318 	.word	0x1fff9318
   12998:	1fff9314 	.word	0x1fff9314

0001299c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   1299c:	b500      	push	{lr}
   1299e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129a0:	f7ee ff1e 	bl	17e0 <Sys_GetCoreID>
   129a4:	4603      	mov	r3, r0
   129a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   129a8:	4a0d      	ldr	r2, [pc, #52]	; (129e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   129aa:	9b01      	ldr	r3, [sp, #4]
   129ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129b0:	1e5a      	subs	r2, r3, #1
   129b2:	490b      	ldr	r1, [pc, #44]	; (129e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   129b4:	9b01      	ldr	r3, [sp, #4]
   129b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   129ba:	4a0a      	ldr	r2, [pc, #40]	; (129e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   129bc:	9b01      	ldr	r3, [sp, #4]
   129be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129c2:	f003 0301 	and.w	r3, r3, #1
   129c6:	2b00      	cmp	r3, #0
   129c8:	d106      	bne.n	129d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   129ca:	4a05      	ldr	r2, [pc, #20]	; (129e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   129cc:	9b01      	ldr	r3, [sp, #4]
   129ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129d2:	2b00      	cmp	r3, #0
   129d4:	d100      	bne.n	129d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   129d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   129d8:	bf00      	nop
   129da:	b003      	add	sp, #12
   129dc:	f85d fb04 	ldr.w	pc, [sp], #4
   129e0:	1fff9318 	.word	0x1fff9318
   129e4:	1fff9314 	.word	0x1fff9314

000129e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   129e8:	b500      	push	{lr}
   129ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129ec:	f7ee fef8 	bl	17e0 <Sys_GetCoreID>
   129f0:	4603      	mov	r3, r0
   129f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   129f4:	4a10      	ldr	r2, [pc, #64]	; (12a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   129f6:	9b01      	ldr	r3, [sp, #4]
   129f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129fc:	2b00      	cmp	r3, #0
   129fe:	d10d      	bne.n	12a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a00:	f7ed ff82 	bl	908 <Adc_schm_read_msr>
   12a04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a06:	9b00      	ldr	r3, [sp, #0]
   12a08:	f003 0301 	and.w	r3, r3, #1
   12a0c:	2b00      	cmp	r3, #0
   12a0e:	d100      	bne.n	12a12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   12a12:	490a      	ldr	r1, [pc, #40]	; (12a3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   12a14:	9b01      	ldr	r3, [sp, #4]
   12a16:	9a00      	ldr	r2, [sp, #0]
   12a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   12a1c:	4a06      	ldr	r2, [pc, #24]	; (12a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   12a1e:	9b01      	ldr	r3, [sp, #4]
   12a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a24:	1c5a      	adds	r2, r3, #1
   12a26:	4904      	ldr	r1, [pc, #16]	; (12a38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   12a28:	9b01      	ldr	r3, [sp, #4]
   12a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a2e:	bf00      	nop
   12a30:	b003      	add	sp, #12
   12a32:	f85d fb04 	ldr.w	pc, [sp], #4
   12a36:	bf00      	nop
   12a38:	1fff9320 	.word	0x1fff9320
   12a3c:	1fff931c 	.word	0x1fff931c

00012a40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   12a40:	b500      	push	{lr}
   12a42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a44:	f7ee fecc 	bl	17e0 <Sys_GetCoreID>
   12a48:	4603      	mov	r3, r0
   12a4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   12a4c:	4a0d      	ldr	r2, [pc, #52]	; (12a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12a4e:	9b01      	ldr	r3, [sp, #4]
   12a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a54:	1e5a      	subs	r2, r3, #1
   12a56:	490b      	ldr	r1, [pc, #44]	; (12a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12a58:	9b01      	ldr	r3, [sp, #4]
   12a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   12a5e:	4a0a      	ldr	r2, [pc, #40]	; (12a88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   12a60:	9b01      	ldr	r3, [sp, #4]
   12a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a66:	f003 0301 	and.w	r3, r3, #1
   12a6a:	2b00      	cmp	r3, #0
   12a6c:	d106      	bne.n	12a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   12a6e:	4a05      	ldr	r2, [pc, #20]	; (12a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12a70:	9b01      	ldr	r3, [sp, #4]
   12a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a76:	2b00      	cmp	r3, #0
   12a78:	d100      	bne.n	12a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a7c:	bf00      	nop
   12a7e:	b003      	add	sp, #12
   12a80:	f85d fb04 	ldr.w	pc, [sp], #4
   12a84:	1fff9320 	.word	0x1fff9320
   12a88:	1fff931c 	.word	0x1fff931c

00012a8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   12a8c:	b500      	push	{lr}
   12a8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a90:	f7ee fea6 	bl	17e0 <Sys_GetCoreID>
   12a94:	4603      	mov	r3, r0
   12a96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   12a98:	4a10      	ldr	r2, [pc, #64]	; (12adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12a9a:	9b01      	ldr	r3, [sp, #4]
   12a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aa0:	2b00      	cmp	r3, #0
   12aa2:	d10d      	bne.n	12ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12aa4:	f7ed ff30 	bl	908 <Adc_schm_read_msr>
   12aa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12aaa:	9b00      	ldr	r3, [sp, #0]
   12aac:	f003 0301 	and.w	r3, r3, #1
   12ab0:	2b00      	cmp	r3, #0
   12ab2:	d100      	bne.n	12ab6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ab4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   12ab6:	490a      	ldr	r1, [pc, #40]	; (12ae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   12ab8:	9b01      	ldr	r3, [sp, #4]
   12aba:	9a00      	ldr	r2, [sp, #0]
   12abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   12ac0:	4a06      	ldr	r2, [pc, #24]	; (12adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12ac2:	9b01      	ldr	r3, [sp, #4]
   12ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ac8:	1c5a      	adds	r2, r3, #1
   12aca:	4904      	ldr	r1, [pc, #16]	; (12adc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12acc:	9b01      	ldr	r3, [sp, #4]
   12ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ad2:	bf00      	nop
   12ad4:	b003      	add	sp, #12
   12ad6:	f85d fb04 	ldr.w	pc, [sp], #4
   12ada:	bf00      	nop
   12adc:	1fff9328 	.word	0x1fff9328
   12ae0:	1fff9324 	.word	0x1fff9324

00012ae4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   12ae4:	b500      	push	{lr}
   12ae6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ae8:	f7ee fe7a 	bl	17e0 <Sys_GetCoreID>
   12aec:	4603      	mov	r3, r0
   12aee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   12af0:	4a0d      	ldr	r2, [pc, #52]	; (12b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12af2:	9b01      	ldr	r3, [sp, #4]
   12af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12af8:	1e5a      	subs	r2, r3, #1
   12afa:	490b      	ldr	r1, [pc, #44]	; (12b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12afc:	9b01      	ldr	r3, [sp, #4]
   12afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   12b02:	4a0a      	ldr	r2, [pc, #40]	; (12b2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   12b04:	9b01      	ldr	r3, [sp, #4]
   12b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b0a:	f003 0301 	and.w	r3, r3, #1
   12b0e:	2b00      	cmp	r3, #0
   12b10:	d106      	bne.n	12b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   12b12:	4a05      	ldr	r2, [pc, #20]	; (12b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12b14:	9b01      	ldr	r3, [sp, #4]
   12b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b1a:	2b00      	cmp	r3, #0
   12b1c:	d100      	bne.n	12b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b20:	bf00      	nop
   12b22:	b003      	add	sp, #12
   12b24:	f85d fb04 	ldr.w	pc, [sp], #4
   12b28:	1fff9328 	.word	0x1fff9328
   12b2c:	1fff9324 	.word	0x1fff9324

00012b30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   12b30:	b500      	push	{lr}
   12b32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b34:	f7ee fe54 	bl	17e0 <Sys_GetCoreID>
   12b38:	4603      	mov	r3, r0
   12b3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   12b3c:	4a10      	ldr	r2, [pc, #64]	; (12b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12b3e:	9b01      	ldr	r3, [sp, #4]
   12b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d10d      	bne.n	12b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b48:	f7ed fede 	bl	908 <Adc_schm_read_msr>
   12b4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b4e:	9b00      	ldr	r3, [sp, #0]
   12b50:	f003 0301 	and.w	r3, r3, #1
   12b54:	2b00      	cmp	r3, #0
   12b56:	d100      	bne.n	12b5a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   12b5a:	490a      	ldr	r1, [pc, #40]	; (12b84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   12b5c:	9b01      	ldr	r3, [sp, #4]
   12b5e:	9a00      	ldr	r2, [sp, #0]
   12b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   12b64:	4a06      	ldr	r2, [pc, #24]	; (12b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12b66:	9b01      	ldr	r3, [sp, #4]
   12b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b6c:	1c5a      	adds	r2, r3, #1
   12b6e:	4904      	ldr	r1, [pc, #16]	; (12b80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12b70:	9b01      	ldr	r3, [sp, #4]
   12b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b76:	bf00      	nop
   12b78:	b003      	add	sp, #12
   12b7a:	f85d fb04 	ldr.w	pc, [sp], #4
   12b7e:	bf00      	nop
   12b80:	1fff9330 	.word	0x1fff9330
   12b84:	1fff932c 	.word	0x1fff932c

00012b88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   12b88:	b500      	push	{lr}
   12b8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b8c:	f7ee fe28 	bl	17e0 <Sys_GetCoreID>
   12b90:	4603      	mov	r3, r0
   12b92:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   12b94:	4a0d      	ldr	r2, [pc, #52]	; (12bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12b96:	9b01      	ldr	r3, [sp, #4]
   12b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b9c:	1e5a      	subs	r2, r3, #1
   12b9e:	490b      	ldr	r1, [pc, #44]	; (12bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12ba0:	9b01      	ldr	r3, [sp, #4]
   12ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   12ba6:	4a0a      	ldr	r2, [pc, #40]	; (12bd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   12ba8:	9b01      	ldr	r3, [sp, #4]
   12baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bae:	f003 0301 	and.w	r3, r3, #1
   12bb2:	2b00      	cmp	r3, #0
   12bb4:	d106      	bne.n	12bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   12bb6:	4a05      	ldr	r2, [pc, #20]	; (12bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12bb8:	9b01      	ldr	r3, [sp, #4]
   12bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bbe:	2b00      	cmp	r3, #0
   12bc0:	d100      	bne.n	12bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12bc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12bc4:	bf00      	nop
   12bc6:	b003      	add	sp, #12
   12bc8:	f85d fb04 	ldr.w	pc, [sp], #4
   12bcc:	1fff9330 	.word	0x1fff9330
   12bd0:	1fff932c 	.word	0x1fff932c

00012bd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   12bd4:	b500      	push	{lr}
   12bd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bd8:	f7ee fe02 	bl	17e0 <Sys_GetCoreID>
   12bdc:	4603      	mov	r3, r0
   12bde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   12be0:	4a10      	ldr	r2, [pc, #64]	; (12c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12be2:	9b01      	ldr	r3, [sp, #4]
   12be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12be8:	2b00      	cmp	r3, #0
   12bea:	d10d      	bne.n	12c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12bec:	f7ed fe8c 	bl	908 <Adc_schm_read_msr>
   12bf0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12bf2:	9b00      	ldr	r3, [sp, #0]
   12bf4:	f003 0301 	and.w	r3, r3, #1
   12bf8:	2b00      	cmp	r3, #0
   12bfa:	d100      	bne.n	12bfe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12bfc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   12bfe:	490a      	ldr	r1, [pc, #40]	; (12c28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   12c00:	9b01      	ldr	r3, [sp, #4]
   12c02:	9a00      	ldr	r2, [sp, #0]
   12c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   12c08:	4a06      	ldr	r2, [pc, #24]	; (12c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12c0a:	9b01      	ldr	r3, [sp, #4]
   12c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c10:	1c5a      	adds	r2, r3, #1
   12c12:	4904      	ldr	r1, [pc, #16]	; (12c24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12c14:	9b01      	ldr	r3, [sp, #4]
   12c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c1a:	bf00      	nop
   12c1c:	b003      	add	sp, #12
   12c1e:	f85d fb04 	ldr.w	pc, [sp], #4
   12c22:	bf00      	nop
   12c24:	1fff9338 	.word	0x1fff9338
   12c28:	1fff9334 	.word	0x1fff9334

00012c2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   12c2c:	b500      	push	{lr}
   12c2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c30:	f7ee fdd6 	bl	17e0 <Sys_GetCoreID>
   12c34:	4603      	mov	r3, r0
   12c36:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   12c38:	4a0d      	ldr	r2, [pc, #52]	; (12c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12c3a:	9b01      	ldr	r3, [sp, #4]
   12c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c40:	1e5a      	subs	r2, r3, #1
   12c42:	490b      	ldr	r1, [pc, #44]	; (12c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12c44:	9b01      	ldr	r3, [sp, #4]
   12c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   12c4a:	4a0a      	ldr	r2, [pc, #40]	; (12c74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   12c4c:	9b01      	ldr	r3, [sp, #4]
   12c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c52:	f003 0301 	and.w	r3, r3, #1
   12c56:	2b00      	cmp	r3, #0
   12c58:	d106      	bne.n	12c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   12c5a:	4a05      	ldr	r2, [pc, #20]	; (12c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12c5c:	9b01      	ldr	r3, [sp, #4]
   12c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c62:	2b00      	cmp	r3, #0
   12c64:	d100      	bne.n	12c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c68:	bf00      	nop
   12c6a:	b003      	add	sp, #12
   12c6c:	f85d fb04 	ldr.w	pc, [sp], #4
   12c70:	1fff9338 	.word	0x1fff9338
   12c74:	1fff9334 	.word	0x1fff9334

00012c78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   12c78:	b500      	push	{lr}
   12c7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c7c:	f7ee fdb0 	bl	17e0 <Sys_GetCoreID>
   12c80:	4603      	mov	r3, r0
   12c82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   12c84:	4a10      	ldr	r2, [pc, #64]	; (12cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12c86:	9b01      	ldr	r3, [sp, #4]
   12c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c8c:	2b00      	cmp	r3, #0
   12c8e:	d10d      	bne.n	12cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c90:	f7ed fe3a 	bl	908 <Adc_schm_read_msr>
   12c94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c96:	9b00      	ldr	r3, [sp, #0]
   12c98:	f003 0301 	and.w	r3, r3, #1
   12c9c:	2b00      	cmp	r3, #0
   12c9e:	d100      	bne.n	12ca2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ca0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   12ca2:	490a      	ldr	r1, [pc, #40]	; (12ccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   12ca4:	9b01      	ldr	r3, [sp, #4]
   12ca6:	9a00      	ldr	r2, [sp, #0]
   12ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   12cac:	4a06      	ldr	r2, [pc, #24]	; (12cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12cae:	9b01      	ldr	r3, [sp, #4]
   12cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cb4:	1c5a      	adds	r2, r3, #1
   12cb6:	4904      	ldr	r1, [pc, #16]	; (12cc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12cb8:	9b01      	ldr	r3, [sp, #4]
   12cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12cbe:	bf00      	nop
   12cc0:	b003      	add	sp, #12
   12cc2:	f85d fb04 	ldr.w	pc, [sp], #4
   12cc6:	bf00      	nop
   12cc8:	1fff9340 	.word	0x1fff9340
   12ccc:	1fff933c 	.word	0x1fff933c

00012cd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   12cd0:	b500      	push	{lr}
   12cd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12cd4:	f7ee fd84 	bl	17e0 <Sys_GetCoreID>
   12cd8:	4603      	mov	r3, r0
   12cda:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   12cdc:	4a0d      	ldr	r2, [pc, #52]	; (12d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12cde:	9b01      	ldr	r3, [sp, #4]
   12ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ce4:	1e5a      	subs	r2, r3, #1
   12ce6:	490b      	ldr	r1, [pc, #44]	; (12d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12ce8:	9b01      	ldr	r3, [sp, #4]
   12cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   12cee:	4a0a      	ldr	r2, [pc, #40]	; (12d18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   12cf0:	9b01      	ldr	r3, [sp, #4]
   12cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cf6:	f003 0301 	and.w	r3, r3, #1
   12cfa:	2b00      	cmp	r3, #0
   12cfc:	d106      	bne.n	12d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   12cfe:	4a05      	ldr	r2, [pc, #20]	; (12d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12d00:	9b01      	ldr	r3, [sp, #4]
   12d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d06:	2b00      	cmp	r3, #0
   12d08:	d100      	bne.n	12d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d0c:	bf00      	nop
   12d0e:	b003      	add	sp, #12
   12d10:	f85d fb04 	ldr.w	pc, [sp], #4
   12d14:	1fff9340 	.word	0x1fff9340
   12d18:	1fff933c 	.word	0x1fff933c

00012d1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   12d1c:	b500      	push	{lr}
   12d1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d20:	f7ee fd5e 	bl	17e0 <Sys_GetCoreID>
   12d24:	4603      	mov	r3, r0
   12d26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   12d28:	4a10      	ldr	r2, [pc, #64]	; (12d6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12d2a:	9b01      	ldr	r3, [sp, #4]
   12d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d30:	2b00      	cmp	r3, #0
   12d32:	d10d      	bne.n	12d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d34:	f7ed fde8 	bl	908 <Adc_schm_read_msr>
   12d38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d3a:	9b00      	ldr	r3, [sp, #0]
   12d3c:	f003 0301 	and.w	r3, r3, #1
   12d40:	2b00      	cmp	r3, #0
   12d42:	d100      	bne.n	12d46 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   12d46:	490a      	ldr	r1, [pc, #40]	; (12d70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   12d48:	9b01      	ldr	r3, [sp, #4]
   12d4a:	9a00      	ldr	r2, [sp, #0]
   12d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   12d50:	4a06      	ldr	r2, [pc, #24]	; (12d6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12d52:	9b01      	ldr	r3, [sp, #4]
   12d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d58:	1c5a      	adds	r2, r3, #1
   12d5a:	4904      	ldr	r1, [pc, #16]	; (12d6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12d5c:	9b01      	ldr	r3, [sp, #4]
   12d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d62:	bf00      	nop
   12d64:	b003      	add	sp, #12
   12d66:	f85d fb04 	ldr.w	pc, [sp], #4
   12d6a:	bf00      	nop
   12d6c:	1fff9348 	.word	0x1fff9348
   12d70:	1fff9344 	.word	0x1fff9344

00012d74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   12d74:	b500      	push	{lr}
   12d76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d78:	f7ee fd32 	bl	17e0 <Sys_GetCoreID>
   12d7c:	4603      	mov	r3, r0
   12d7e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   12d80:	4a0d      	ldr	r2, [pc, #52]	; (12db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   12d82:	9b01      	ldr	r3, [sp, #4]
   12d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d88:	1e5a      	subs	r2, r3, #1
   12d8a:	490b      	ldr	r1, [pc, #44]	; (12db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   12d8c:	9b01      	ldr	r3, [sp, #4]
   12d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   12d92:	4a0a      	ldr	r2, [pc, #40]	; (12dbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   12d94:	9b01      	ldr	r3, [sp, #4]
   12d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d9a:	f003 0301 	and.w	r3, r3, #1
   12d9e:	2b00      	cmp	r3, #0
   12da0:	d106      	bne.n	12db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   12da2:	4a05      	ldr	r2, [pc, #20]	; (12db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   12da4:	9b01      	ldr	r3, [sp, #4]
   12da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12daa:	2b00      	cmp	r3, #0
   12dac:	d100      	bne.n	12db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12dae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12db0:	bf00      	nop
   12db2:	b003      	add	sp, #12
   12db4:	f85d fb04 	ldr.w	pc, [sp], #4
   12db8:	1fff9348 	.word	0x1fff9348
   12dbc:	1fff9344 	.word	0x1fff9344

00012dc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   12dc0:	b500      	push	{lr}
   12dc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12dc4:	f7ee fd0c 	bl	17e0 <Sys_GetCoreID>
   12dc8:	4603      	mov	r3, r0
   12dca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   12dcc:	4a10      	ldr	r2, [pc, #64]	; (12e10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   12dce:	9b01      	ldr	r3, [sp, #4]
   12dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dd4:	2b00      	cmp	r3, #0
   12dd6:	d10d      	bne.n	12df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12dd8:	f7ed fd96 	bl	908 <Adc_schm_read_msr>
   12ddc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12dde:	9b00      	ldr	r3, [sp, #0]
   12de0:	f003 0301 	and.w	r3, r3, #1
   12de4:	2b00      	cmp	r3, #0
   12de6:	d100      	bne.n	12dea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12de8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   12dea:	490a      	ldr	r1, [pc, #40]	; (12e14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   12dec:	9b01      	ldr	r3, [sp, #4]
   12dee:	9a00      	ldr	r2, [sp, #0]
   12df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   12df4:	4a06      	ldr	r2, [pc, #24]	; (12e10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   12df6:	9b01      	ldr	r3, [sp, #4]
   12df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dfc:	1c5a      	adds	r2, r3, #1
   12dfe:	4904      	ldr	r1, [pc, #16]	; (12e10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   12e00:	9b01      	ldr	r3, [sp, #4]
   12e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e06:	bf00      	nop
   12e08:	b003      	add	sp, #12
   12e0a:	f85d fb04 	ldr.w	pc, [sp], #4
   12e0e:	bf00      	nop
   12e10:	1fff9350 	.word	0x1fff9350
   12e14:	1fff934c 	.word	0x1fff934c

00012e18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   12e18:	b500      	push	{lr}
   12e1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e1c:	f7ee fce0 	bl	17e0 <Sys_GetCoreID>
   12e20:	4603      	mov	r3, r0
   12e22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   12e24:	4a0d      	ldr	r2, [pc, #52]	; (12e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   12e26:	9b01      	ldr	r3, [sp, #4]
   12e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e2c:	1e5a      	subs	r2, r3, #1
   12e2e:	490b      	ldr	r1, [pc, #44]	; (12e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   12e30:	9b01      	ldr	r3, [sp, #4]
   12e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   12e36:	4a0a      	ldr	r2, [pc, #40]	; (12e60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   12e38:	9b01      	ldr	r3, [sp, #4]
   12e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e3e:	f003 0301 	and.w	r3, r3, #1
   12e42:	2b00      	cmp	r3, #0
   12e44:	d106      	bne.n	12e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   12e46:	4a05      	ldr	r2, [pc, #20]	; (12e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   12e48:	9b01      	ldr	r3, [sp, #4]
   12e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e4e:	2b00      	cmp	r3, #0
   12e50:	d100      	bne.n	12e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e54:	bf00      	nop
   12e56:	b003      	add	sp, #12
   12e58:	f85d fb04 	ldr.w	pc, [sp], #4
   12e5c:	1fff9350 	.word	0x1fff9350
   12e60:	1fff934c 	.word	0x1fff934c

00012e64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   12e64:	b500      	push	{lr}
   12e66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e68:	f7ee fcba 	bl	17e0 <Sys_GetCoreID>
   12e6c:	4603      	mov	r3, r0
   12e6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   12e70:	4a10      	ldr	r2, [pc, #64]	; (12eb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   12e72:	9b01      	ldr	r3, [sp, #4]
   12e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e78:	2b00      	cmp	r3, #0
   12e7a:	d10d      	bne.n	12e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e7c:	f7ed fd44 	bl	908 <Adc_schm_read_msr>
   12e80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e82:	9b00      	ldr	r3, [sp, #0]
   12e84:	f003 0301 	and.w	r3, r3, #1
   12e88:	2b00      	cmp	r3, #0
   12e8a:	d100      	bne.n	12e8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   12e8e:	490a      	ldr	r1, [pc, #40]	; (12eb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   12e90:	9b01      	ldr	r3, [sp, #4]
   12e92:	9a00      	ldr	r2, [sp, #0]
   12e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   12e98:	4a06      	ldr	r2, [pc, #24]	; (12eb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   12e9a:	9b01      	ldr	r3, [sp, #4]
   12e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ea0:	1c5a      	adds	r2, r3, #1
   12ea2:	4904      	ldr	r1, [pc, #16]	; (12eb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   12ea4:	9b01      	ldr	r3, [sp, #4]
   12ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12eaa:	bf00      	nop
   12eac:	b003      	add	sp, #12
   12eae:	f85d fb04 	ldr.w	pc, [sp], #4
   12eb2:	bf00      	nop
   12eb4:	1fff9358 	.word	0x1fff9358
   12eb8:	1fff9354 	.word	0x1fff9354

00012ebc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   12ebc:	b500      	push	{lr}
   12ebe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ec0:	f7ee fc8e 	bl	17e0 <Sys_GetCoreID>
   12ec4:	4603      	mov	r3, r0
   12ec6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   12ec8:	4a0d      	ldr	r2, [pc, #52]	; (12f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   12eca:	9b01      	ldr	r3, [sp, #4]
   12ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ed0:	1e5a      	subs	r2, r3, #1
   12ed2:	490b      	ldr	r1, [pc, #44]	; (12f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   12ed4:	9b01      	ldr	r3, [sp, #4]
   12ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   12eda:	4a0a      	ldr	r2, [pc, #40]	; (12f04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   12edc:	9b01      	ldr	r3, [sp, #4]
   12ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ee2:	f003 0301 	and.w	r3, r3, #1
   12ee6:	2b00      	cmp	r3, #0
   12ee8:	d106      	bne.n	12ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   12eea:	4a05      	ldr	r2, [pc, #20]	; (12f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   12eec:	9b01      	ldr	r3, [sp, #4]
   12eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ef2:	2b00      	cmp	r3, #0
   12ef4:	d100      	bne.n	12ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ef6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ef8:	bf00      	nop
   12efa:	b003      	add	sp, #12
   12efc:	f85d fb04 	ldr.w	pc, [sp], #4
   12f00:	1fff9358 	.word	0x1fff9358
   12f04:	1fff9354 	.word	0x1fff9354

00012f08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   12f08:	b500      	push	{lr}
   12f0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f0c:	f7ee fc68 	bl	17e0 <Sys_GetCoreID>
   12f10:	4603      	mov	r3, r0
   12f12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   12f14:	4a10      	ldr	r2, [pc, #64]	; (12f58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   12f16:	9b01      	ldr	r3, [sp, #4]
   12f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f1c:	2b00      	cmp	r3, #0
   12f1e:	d10d      	bne.n	12f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f20:	f7ed fcf2 	bl	908 <Adc_schm_read_msr>
   12f24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f26:	9b00      	ldr	r3, [sp, #0]
   12f28:	f003 0301 	and.w	r3, r3, #1
   12f2c:	2b00      	cmp	r3, #0
   12f2e:	d100      	bne.n	12f32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   12f32:	490a      	ldr	r1, [pc, #40]	; (12f5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   12f34:	9b01      	ldr	r3, [sp, #4]
   12f36:	9a00      	ldr	r2, [sp, #0]
   12f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   12f3c:	4a06      	ldr	r2, [pc, #24]	; (12f58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   12f3e:	9b01      	ldr	r3, [sp, #4]
   12f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f44:	1c5a      	adds	r2, r3, #1
   12f46:	4904      	ldr	r1, [pc, #16]	; (12f58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   12f48:	9b01      	ldr	r3, [sp, #4]
   12f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f4e:	bf00      	nop
   12f50:	b003      	add	sp, #12
   12f52:	f85d fb04 	ldr.w	pc, [sp], #4
   12f56:	bf00      	nop
   12f58:	1fff9360 	.word	0x1fff9360
   12f5c:	1fff935c 	.word	0x1fff935c

00012f60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   12f60:	b500      	push	{lr}
   12f62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f64:	f7ee fc3c 	bl	17e0 <Sys_GetCoreID>
   12f68:	4603      	mov	r3, r0
   12f6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   12f6c:	4a0d      	ldr	r2, [pc, #52]	; (12fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   12f6e:	9b01      	ldr	r3, [sp, #4]
   12f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f74:	1e5a      	subs	r2, r3, #1
   12f76:	490b      	ldr	r1, [pc, #44]	; (12fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   12f78:	9b01      	ldr	r3, [sp, #4]
   12f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   12f7e:	4a0a      	ldr	r2, [pc, #40]	; (12fa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   12f80:	9b01      	ldr	r3, [sp, #4]
   12f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f86:	f003 0301 	and.w	r3, r3, #1
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	d106      	bne.n	12f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   12f8e:	4a05      	ldr	r2, [pc, #20]	; (12fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   12f90:	9b01      	ldr	r3, [sp, #4]
   12f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f96:	2b00      	cmp	r3, #0
   12f98:	d100      	bne.n	12f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f9c:	bf00      	nop
   12f9e:	b003      	add	sp, #12
   12fa0:	f85d fb04 	ldr.w	pc, [sp], #4
   12fa4:	1fff9360 	.word	0x1fff9360
   12fa8:	1fff935c 	.word	0x1fff935c

00012fac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   12fac:	b500      	push	{lr}
   12fae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fb0:	f7ee fc16 	bl	17e0 <Sys_GetCoreID>
   12fb4:	4603      	mov	r3, r0
   12fb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   12fb8:	4a10      	ldr	r2, [pc, #64]	; (12ffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   12fba:	9b01      	ldr	r3, [sp, #4]
   12fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fc0:	2b00      	cmp	r3, #0
   12fc2:	d10d      	bne.n	12fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12fc4:	f7ed fca0 	bl	908 <Adc_schm_read_msr>
   12fc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12fca:	9b00      	ldr	r3, [sp, #0]
   12fcc:	f003 0301 	and.w	r3, r3, #1
   12fd0:	2b00      	cmp	r3, #0
   12fd2:	d100      	bne.n	12fd6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12fd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   12fd6:	490a      	ldr	r1, [pc, #40]	; (13000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   12fd8:	9b01      	ldr	r3, [sp, #4]
   12fda:	9a00      	ldr	r2, [sp, #0]
   12fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   12fe0:	4a06      	ldr	r2, [pc, #24]	; (12ffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   12fe2:	9b01      	ldr	r3, [sp, #4]
   12fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fe8:	1c5a      	adds	r2, r3, #1
   12fea:	4904      	ldr	r1, [pc, #16]	; (12ffc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   12fec:	9b01      	ldr	r3, [sp, #4]
   12fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ff2:	bf00      	nop
   12ff4:	b003      	add	sp, #12
   12ff6:	f85d fb04 	ldr.w	pc, [sp], #4
   12ffa:	bf00      	nop
   12ffc:	1fff9368 	.word	0x1fff9368
   13000:	1fff9364 	.word	0x1fff9364

00013004 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   13004:	b500      	push	{lr}
   13006:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13008:	f7ee fbea 	bl	17e0 <Sys_GetCoreID>
   1300c:	4603      	mov	r3, r0
   1300e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   13010:	4a0d      	ldr	r2, [pc, #52]	; (13048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   13012:	9b01      	ldr	r3, [sp, #4]
   13014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13018:	1e5a      	subs	r2, r3, #1
   1301a:	490b      	ldr	r1, [pc, #44]	; (13048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   1301c:	9b01      	ldr	r3, [sp, #4]
   1301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   13022:	4a0a      	ldr	r2, [pc, #40]	; (1304c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   13024:	9b01      	ldr	r3, [sp, #4]
   13026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1302a:	f003 0301 	and.w	r3, r3, #1
   1302e:	2b00      	cmp	r3, #0
   13030:	d106      	bne.n	13040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   13032:	4a05      	ldr	r2, [pc, #20]	; (13048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   13034:	9b01      	ldr	r3, [sp, #4]
   13036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1303a:	2b00      	cmp	r3, #0
   1303c:	d100      	bne.n	13040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1303e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13040:	bf00      	nop
   13042:	b003      	add	sp, #12
   13044:	f85d fb04 	ldr.w	pc, [sp], #4
   13048:	1fff9368 	.word	0x1fff9368
   1304c:	1fff9364 	.word	0x1fff9364

00013050 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   13050:	b500      	push	{lr}
   13052:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13054:	f7ee fbc4 	bl	17e0 <Sys_GetCoreID>
   13058:	4603      	mov	r3, r0
   1305a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   1305c:	4a10      	ldr	r2, [pc, #64]	; (130a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   1305e:	9b01      	ldr	r3, [sp, #4]
   13060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13064:	2b00      	cmp	r3, #0
   13066:	d10d      	bne.n	13084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13068:	f7ed fc4e 	bl	908 <Adc_schm_read_msr>
   1306c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1306e:	9b00      	ldr	r3, [sp, #0]
   13070:	f003 0301 	and.w	r3, r3, #1
   13074:	2b00      	cmp	r3, #0
   13076:	d100      	bne.n	1307a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13078:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   1307a:	490a      	ldr	r1, [pc, #40]	; (130a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   1307c:	9b01      	ldr	r3, [sp, #4]
   1307e:	9a00      	ldr	r2, [sp, #0]
   13080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   13084:	4a06      	ldr	r2, [pc, #24]	; (130a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   13086:	9b01      	ldr	r3, [sp, #4]
   13088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1308c:	1c5a      	adds	r2, r3, #1
   1308e:	4904      	ldr	r1, [pc, #16]	; (130a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   13090:	9b01      	ldr	r3, [sp, #4]
   13092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13096:	bf00      	nop
   13098:	b003      	add	sp, #12
   1309a:	f85d fb04 	ldr.w	pc, [sp], #4
   1309e:	bf00      	nop
   130a0:	1fff9370 	.word	0x1fff9370
   130a4:	1fff936c 	.word	0x1fff936c

000130a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   130a8:	b500      	push	{lr}
   130aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130ac:	f7ee fb98 	bl	17e0 <Sys_GetCoreID>
   130b0:	4603      	mov	r3, r0
   130b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   130b4:	4a0d      	ldr	r2, [pc, #52]	; (130ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   130b6:	9b01      	ldr	r3, [sp, #4]
   130b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130bc:	1e5a      	subs	r2, r3, #1
   130be:	490b      	ldr	r1, [pc, #44]	; (130ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   130c0:	9b01      	ldr	r3, [sp, #4]
   130c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   130c6:	4a0a      	ldr	r2, [pc, #40]	; (130f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   130c8:	9b01      	ldr	r3, [sp, #4]
   130ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130ce:	f003 0301 	and.w	r3, r3, #1
   130d2:	2b00      	cmp	r3, #0
   130d4:	d106      	bne.n	130e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   130d6:	4a05      	ldr	r2, [pc, #20]	; (130ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   130d8:	9b01      	ldr	r3, [sp, #4]
   130da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130de:	2b00      	cmp	r3, #0
   130e0:	d100      	bne.n	130e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   130e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   130e4:	bf00      	nop
   130e6:	b003      	add	sp, #12
   130e8:	f85d fb04 	ldr.w	pc, [sp], #4
   130ec:	1fff9370 	.word	0x1fff9370
   130f0:	1fff936c 	.word	0x1fff936c

000130f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   130f4:	b500      	push	{lr}
   130f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130f8:	f7ee fb72 	bl	17e0 <Sys_GetCoreID>
   130fc:	4603      	mov	r3, r0
   130fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   13100:	4a10      	ldr	r2, [pc, #64]	; (13144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   13102:	9b01      	ldr	r3, [sp, #4]
   13104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13108:	2b00      	cmp	r3, #0
   1310a:	d10d      	bne.n	13128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1310c:	f7ed fbfc 	bl	908 <Adc_schm_read_msr>
   13110:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13112:	9b00      	ldr	r3, [sp, #0]
   13114:	f003 0301 	and.w	r3, r3, #1
   13118:	2b00      	cmp	r3, #0
   1311a:	d100      	bne.n	1311e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1311c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   1311e:	490a      	ldr	r1, [pc, #40]	; (13148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   13120:	9b01      	ldr	r3, [sp, #4]
   13122:	9a00      	ldr	r2, [sp, #0]
   13124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   13128:	4a06      	ldr	r2, [pc, #24]	; (13144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   1312a:	9b01      	ldr	r3, [sp, #4]
   1312c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13130:	1c5a      	adds	r2, r3, #1
   13132:	4904      	ldr	r1, [pc, #16]	; (13144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   13134:	9b01      	ldr	r3, [sp, #4]
   13136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1313a:	bf00      	nop
   1313c:	b003      	add	sp, #12
   1313e:	f85d fb04 	ldr.w	pc, [sp], #4
   13142:	bf00      	nop
   13144:	1fff9378 	.word	0x1fff9378
   13148:	1fff9374 	.word	0x1fff9374

0001314c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   1314c:	b500      	push	{lr}
   1314e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13150:	f7ee fb46 	bl	17e0 <Sys_GetCoreID>
   13154:	4603      	mov	r3, r0
   13156:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   13158:	4a0d      	ldr	r2, [pc, #52]	; (13190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   1315a:	9b01      	ldr	r3, [sp, #4]
   1315c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13160:	1e5a      	subs	r2, r3, #1
   13162:	490b      	ldr	r1, [pc, #44]	; (13190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   13164:	9b01      	ldr	r3, [sp, #4]
   13166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   1316a:	4a0a      	ldr	r2, [pc, #40]	; (13194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   1316c:	9b01      	ldr	r3, [sp, #4]
   1316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13172:	f003 0301 	and.w	r3, r3, #1
   13176:	2b00      	cmp	r3, #0
   13178:	d106      	bne.n	13188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   1317a:	4a05      	ldr	r2, [pc, #20]	; (13190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   1317c:	9b01      	ldr	r3, [sp, #4]
   1317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13182:	2b00      	cmp	r3, #0
   13184:	d100      	bne.n	13188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13186:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13188:	bf00      	nop
   1318a:	b003      	add	sp, #12
   1318c:	f85d fb04 	ldr.w	pc, [sp], #4
   13190:	1fff9378 	.word	0x1fff9378
   13194:	1fff9374 	.word	0x1fff9374

00013198 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   13198:	b500      	push	{lr}
   1319a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1319c:	f7ee fb20 	bl	17e0 <Sys_GetCoreID>
   131a0:	4603      	mov	r3, r0
   131a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   131a4:	4a10      	ldr	r2, [pc, #64]	; (131e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   131a6:	9b01      	ldr	r3, [sp, #4]
   131a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131ac:	2b00      	cmp	r3, #0
   131ae:	d10d      	bne.n	131cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   131b0:	f7ed fbaa 	bl	908 <Adc_schm_read_msr>
   131b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   131b6:	9b00      	ldr	r3, [sp, #0]
   131b8:	f003 0301 	and.w	r3, r3, #1
   131bc:	2b00      	cmp	r3, #0
   131be:	d100      	bne.n	131c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   131c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   131c2:	490a      	ldr	r1, [pc, #40]	; (131ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   131c4:	9b01      	ldr	r3, [sp, #4]
   131c6:	9a00      	ldr	r2, [sp, #0]
   131c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   131cc:	4a06      	ldr	r2, [pc, #24]	; (131e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   131ce:	9b01      	ldr	r3, [sp, #4]
   131d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131d4:	1c5a      	adds	r2, r3, #1
   131d6:	4904      	ldr	r1, [pc, #16]	; (131e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   131d8:	9b01      	ldr	r3, [sp, #4]
   131da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   131de:	bf00      	nop
   131e0:	b003      	add	sp, #12
   131e2:	f85d fb04 	ldr.w	pc, [sp], #4
   131e6:	bf00      	nop
   131e8:	1fff9380 	.word	0x1fff9380
   131ec:	1fff937c 	.word	0x1fff937c

000131f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   131f0:	b500      	push	{lr}
   131f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131f4:	f7ee faf4 	bl	17e0 <Sys_GetCoreID>
   131f8:	4603      	mov	r3, r0
   131fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   131fc:	4a0d      	ldr	r2, [pc, #52]	; (13234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   131fe:	9b01      	ldr	r3, [sp, #4]
   13200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13204:	1e5a      	subs	r2, r3, #1
   13206:	490b      	ldr	r1, [pc, #44]	; (13234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   13208:	9b01      	ldr	r3, [sp, #4]
   1320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   1320e:	4a0a      	ldr	r2, [pc, #40]	; (13238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   13210:	9b01      	ldr	r3, [sp, #4]
   13212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13216:	f003 0301 	and.w	r3, r3, #1
   1321a:	2b00      	cmp	r3, #0
   1321c:	d106      	bne.n	1322c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   1321e:	4a05      	ldr	r2, [pc, #20]	; (13234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   13220:	9b01      	ldr	r3, [sp, #4]
   13222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13226:	2b00      	cmp	r3, #0
   13228:	d100      	bne.n	1322c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1322a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1322c:	bf00      	nop
   1322e:	b003      	add	sp, #12
   13230:	f85d fb04 	ldr.w	pc, [sp], #4
   13234:	1fff9380 	.word	0x1fff9380
   13238:	1fff937c 	.word	0x1fff937c

0001323c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   1323c:	b500      	push	{lr}
   1323e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13240:	f7ee face 	bl	17e0 <Sys_GetCoreID>
   13244:	4603      	mov	r3, r0
   13246:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   13248:	4a10      	ldr	r2, [pc, #64]	; (1328c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   1324a:	9b01      	ldr	r3, [sp, #4]
   1324c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13250:	2b00      	cmp	r3, #0
   13252:	d10d      	bne.n	13270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13254:	f7ed fb58 	bl	908 <Adc_schm_read_msr>
   13258:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1325a:	9b00      	ldr	r3, [sp, #0]
   1325c:	f003 0301 	and.w	r3, r3, #1
   13260:	2b00      	cmp	r3, #0
   13262:	d100      	bne.n	13266 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13264:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   13266:	490a      	ldr	r1, [pc, #40]	; (13290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   13268:	9b01      	ldr	r3, [sp, #4]
   1326a:	9a00      	ldr	r2, [sp, #0]
   1326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   13270:	4a06      	ldr	r2, [pc, #24]	; (1328c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   13272:	9b01      	ldr	r3, [sp, #4]
   13274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13278:	1c5a      	adds	r2, r3, #1
   1327a:	4904      	ldr	r1, [pc, #16]	; (1328c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   1327c:	9b01      	ldr	r3, [sp, #4]
   1327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13282:	bf00      	nop
   13284:	b003      	add	sp, #12
   13286:	f85d fb04 	ldr.w	pc, [sp], #4
   1328a:	bf00      	nop
   1328c:	1fff9388 	.word	0x1fff9388
   13290:	1fff9384 	.word	0x1fff9384

00013294 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   13294:	b500      	push	{lr}
   13296:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13298:	f7ee faa2 	bl	17e0 <Sys_GetCoreID>
   1329c:	4603      	mov	r3, r0
   1329e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   132a0:	4a0d      	ldr	r2, [pc, #52]	; (132d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   132a2:	9b01      	ldr	r3, [sp, #4]
   132a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132a8:	1e5a      	subs	r2, r3, #1
   132aa:	490b      	ldr	r1, [pc, #44]	; (132d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   132ac:	9b01      	ldr	r3, [sp, #4]
   132ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   132b2:	4a0a      	ldr	r2, [pc, #40]	; (132dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   132b4:	9b01      	ldr	r3, [sp, #4]
   132b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ba:	f003 0301 	and.w	r3, r3, #1
   132be:	2b00      	cmp	r3, #0
   132c0:	d106      	bne.n	132d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   132c2:	4a05      	ldr	r2, [pc, #20]	; (132d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   132c4:	9b01      	ldr	r3, [sp, #4]
   132c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ca:	2b00      	cmp	r3, #0
   132cc:	d100      	bne.n	132d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   132ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   132d0:	bf00      	nop
   132d2:	b003      	add	sp, #12
   132d4:	f85d fb04 	ldr.w	pc, [sp], #4
   132d8:	1fff9388 	.word	0x1fff9388
   132dc:	1fff9384 	.word	0x1fff9384

000132e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   132e0:	b500      	push	{lr}
   132e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132e4:	f7ee fa7c 	bl	17e0 <Sys_GetCoreID>
   132e8:	4603      	mov	r3, r0
   132ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   132ec:	4a10      	ldr	r2, [pc, #64]	; (13330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   132ee:	9b01      	ldr	r3, [sp, #4]
   132f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132f4:	2b00      	cmp	r3, #0
   132f6:	d10d      	bne.n	13314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   132f8:	f7ed fb06 	bl	908 <Adc_schm_read_msr>
   132fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   132fe:	9b00      	ldr	r3, [sp, #0]
   13300:	f003 0301 	and.w	r3, r3, #1
   13304:	2b00      	cmp	r3, #0
   13306:	d100      	bne.n	1330a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13308:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   1330a:	490a      	ldr	r1, [pc, #40]	; (13334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   1330c:	9b01      	ldr	r3, [sp, #4]
   1330e:	9a00      	ldr	r2, [sp, #0]
   13310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   13314:	4a06      	ldr	r2, [pc, #24]	; (13330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   13316:	9b01      	ldr	r3, [sp, #4]
   13318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1331c:	1c5a      	adds	r2, r3, #1
   1331e:	4904      	ldr	r1, [pc, #16]	; (13330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   13320:	9b01      	ldr	r3, [sp, #4]
   13322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13326:	bf00      	nop
   13328:	b003      	add	sp, #12
   1332a:	f85d fb04 	ldr.w	pc, [sp], #4
   1332e:	bf00      	nop
   13330:	1fff9390 	.word	0x1fff9390
   13334:	1fff938c 	.word	0x1fff938c

00013338 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   13338:	b500      	push	{lr}
   1333a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1333c:	f7ee fa50 	bl	17e0 <Sys_GetCoreID>
   13340:	4603      	mov	r3, r0
   13342:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   13344:	4a0d      	ldr	r2, [pc, #52]	; (1337c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   13346:	9b01      	ldr	r3, [sp, #4]
   13348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1334c:	1e5a      	subs	r2, r3, #1
   1334e:	490b      	ldr	r1, [pc, #44]	; (1337c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   13350:	9b01      	ldr	r3, [sp, #4]
   13352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   13356:	4a0a      	ldr	r2, [pc, #40]	; (13380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   13358:	9b01      	ldr	r3, [sp, #4]
   1335a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1335e:	f003 0301 	and.w	r3, r3, #1
   13362:	2b00      	cmp	r3, #0
   13364:	d106      	bne.n	13374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   13366:	4a05      	ldr	r2, [pc, #20]	; (1337c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   13368:	9b01      	ldr	r3, [sp, #4]
   1336a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1336e:	2b00      	cmp	r3, #0
   13370:	d100      	bne.n	13374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13372:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13374:	bf00      	nop
   13376:	b003      	add	sp, #12
   13378:	f85d fb04 	ldr.w	pc, [sp], #4
   1337c:	1fff9390 	.word	0x1fff9390
   13380:	1fff938c 	.word	0x1fff938c

00013384 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   13384:	b500      	push	{lr}
   13386:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13388:	f7ee fa2a 	bl	17e0 <Sys_GetCoreID>
   1338c:	4603      	mov	r3, r0
   1338e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   13390:	4a10      	ldr	r2, [pc, #64]	; (133d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   13392:	9b01      	ldr	r3, [sp, #4]
   13394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13398:	2b00      	cmp	r3, #0
   1339a:	d10d      	bne.n	133b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1339c:	f7ed fab4 	bl	908 <Adc_schm_read_msr>
   133a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   133a2:	9b00      	ldr	r3, [sp, #0]
   133a4:	f003 0301 	and.w	r3, r3, #1
   133a8:	2b00      	cmp	r3, #0
   133aa:	d100      	bne.n	133ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   133ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   133ae:	490a      	ldr	r1, [pc, #40]	; (133d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   133b0:	9b01      	ldr	r3, [sp, #4]
   133b2:	9a00      	ldr	r2, [sp, #0]
   133b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   133b8:	4a06      	ldr	r2, [pc, #24]	; (133d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   133ba:	9b01      	ldr	r3, [sp, #4]
   133bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133c0:	1c5a      	adds	r2, r3, #1
   133c2:	4904      	ldr	r1, [pc, #16]	; (133d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   133c4:	9b01      	ldr	r3, [sp, #4]
   133c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   133ca:	bf00      	nop
   133cc:	b003      	add	sp, #12
   133ce:	f85d fb04 	ldr.w	pc, [sp], #4
   133d2:	bf00      	nop
   133d4:	1fff9398 	.word	0x1fff9398
   133d8:	1fff9394 	.word	0x1fff9394

000133dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   133dc:	b500      	push	{lr}
   133de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133e0:	f7ee f9fe 	bl	17e0 <Sys_GetCoreID>
   133e4:	4603      	mov	r3, r0
   133e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   133e8:	4a0d      	ldr	r2, [pc, #52]	; (13420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   133ea:	9b01      	ldr	r3, [sp, #4]
   133ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133f0:	1e5a      	subs	r2, r3, #1
   133f2:	490b      	ldr	r1, [pc, #44]	; (13420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   133f4:	9b01      	ldr	r3, [sp, #4]
   133f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   133fa:	4a0a      	ldr	r2, [pc, #40]	; (13424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   133fc:	9b01      	ldr	r3, [sp, #4]
   133fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13402:	f003 0301 	and.w	r3, r3, #1
   13406:	2b00      	cmp	r3, #0
   13408:	d106      	bne.n	13418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   1340a:	4a05      	ldr	r2, [pc, #20]	; (13420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   1340c:	9b01      	ldr	r3, [sp, #4]
   1340e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13412:	2b00      	cmp	r3, #0
   13414:	d100      	bne.n	13418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13416:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13418:	bf00      	nop
   1341a:	b003      	add	sp, #12
   1341c:	f85d fb04 	ldr.w	pc, [sp], #4
   13420:	1fff9398 	.word	0x1fff9398
   13424:	1fff9394 	.word	0x1fff9394

00013428 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   13428:	b500      	push	{lr}
   1342a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1342c:	f7ee f9d8 	bl	17e0 <Sys_GetCoreID>
   13430:	4603      	mov	r3, r0
   13432:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   13434:	4a10      	ldr	r2, [pc, #64]	; (13478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   13436:	9b01      	ldr	r3, [sp, #4]
   13438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1343c:	2b00      	cmp	r3, #0
   1343e:	d10d      	bne.n	1345c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13440:	f7ed fa62 	bl	908 <Adc_schm_read_msr>
   13444:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13446:	9b00      	ldr	r3, [sp, #0]
   13448:	f003 0301 	and.w	r3, r3, #1
   1344c:	2b00      	cmp	r3, #0
   1344e:	d100      	bne.n	13452 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13450:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   13452:	490a      	ldr	r1, [pc, #40]	; (1347c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   13454:	9b01      	ldr	r3, [sp, #4]
   13456:	9a00      	ldr	r2, [sp, #0]
   13458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   1345c:	4a06      	ldr	r2, [pc, #24]	; (13478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   1345e:	9b01      	ldr	r3, [sp, #4]
   13460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13464:	1c5a      	adds	r2, r3, #1
   13466:	4904      	ldr	r1, [pc, #16]	; (13478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   13468:	9b01      	ldr	r3, [sp, #4]
   1346a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1346e:	bf00      	nop
   13470:	b003      	add	sp, #12
   13472:	f85d fb04 	ldr.w	pc, [sp], #4
   13476:	bf00      	nop
   13478:	1fff93a0 	.word	0x1fff93a0
   1347c:	1fff939c 	.word	0x1fff939c

00013480 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   13480:	b500      	push	{lr}
   13482:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13484:	f7ee f9ac 	bl	17e0 <Sys_GetCoreID>
   13488:	4603      	mov	r3, r0
   1348a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   1348c:	4a0d      	ldr	r2, [pc, #52]	; (134c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   1348e:	9b01      	ldr	r3, [sp, #4]
   13490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13494:	1e5a      	subs	r2, r3, #1
   13496:	490b      	ldr	r1, [pc, #44]	; (134c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   13498:	9b01      	ldr	r3, [sp, #4]
   1349a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   1349e:	4a0a      	ldr	r2, [pc, #40]	; (134c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   134a0:	9b01      	ldr	r3, [sp, #4]
   134a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134a6:	f003 0301 	and.w	r3, r3, #1
   134aa:	2b00      	cmp	r3, #0
   134ac:	d106      	bne.n	134bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   134ae:	4a05      	ldr	r2, [pc, #20]	; (134c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   134b0:	9b01      	ldr	r3, [sp, #4]
   134b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134b6:	2b00      	cmp	r3, #0
   134b8:	d100      	bne.n	134bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   134ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   134bc:	bf00      	nop
   134be:	b003      	add	sp, #12
   134c0:	f85d fb04 	ldr.w	pc, [sp], #4
   134c4:	1fff93a0 	.word	0x1fff93a0
   134c8:	1fff939c 	.word	0x1fff939c

000134cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   134cc:	b500      	push	{lr}
   134ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134d0:	f7ee f986 	bl	17e0 <Sys_GetCoreID>
   134d4:	4603      	mov	r3, r0
   134d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   134d8:	4a10      	ldr	r2, [pc, #64]	; (1351c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   134da:	9b01      	ldr	r3, [sp, #4]
   134dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134e0:	2b00      	cmp	r3, #0
   134e2:	d10d      	bne.n	13500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   134e4:	f7ed fa10 	bl	908 <Adc_schm_read_msr>
   134e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   134ea:	9b00      	ldr	r3, [sp, #0]
   134ec:	f003 0301 	and.w	r3, r3, #1
   134f0:	2b00      	cmp	r3, #0
   134f2:	d100      	bne.n	134f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   134f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   134f6:	490a      	ldr	r1, [pc, #40]	; (13520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   134f8:	9b01      	ldr	r3, [sp, #4]
   134fa:	9a00      	ldr	r2, [sp, #0]
   134fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   13500:	4a06      	ldr	r2, [pc, #24]	; (1351c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   13502:	9b01      	ldr	r3, [sp, #4]
   13504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13508:	1c5a      	adds	r2, r3, #1
   1350a:	4904      	ldr	r1, [pc, #16]	; (1351c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   1350c:	9b01      	ldr	r3, [sp, #4]
   1350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13512:	bf00      	nop
   13514:	b003      	add	sp, #12
   13516:	f85d fb04 	ldr.w	pc, [sp], #4
   1351a:	bf00      	nop
   1351c:	1fff93a8 	.word	0x1fff93a8
   13520:	1fff93a4 	.word	0x1fff93a4

00013524 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   13524:	b500      	push	{lr}
   13526:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13528:	f7ee f95a 	bl	17e0 <Sys_GetCoreID>
   1352c:	4603      	mov	r3, r0
   1352e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   13530:	4a0d      	ldr	r2, [pc, #52]	; (13568 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   13532:	9b01      	ldr	r3, [sp, #4]
   13534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13538:	1e5a      	subs	r2, r3, #1
   1353a:	490b      	ldr	r1, [pc, #44]	; (13568 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   1353c:	9b01      	ldr	r3, [sp, #4]
   1353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   13542:	4a0a      	ldr	r2, [pc, #40]	; (1356c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   13544:	9b01      	ldr	r3, [sp, #4]
   13546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1354a:	f003 0301 	and.w	r3, r3, #1
   1354e:	2b00      	cmp	r3, #0
   13550:	d106      	bne.n	13560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   13552:	4a05      	ldr	r2, [pc, #20]	; (13568 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   13554:	9b01      	ldr	r3, [sp, #4]
   13556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1355a:	2b00      	cmp	r3, #0
   1355c:	d100      	bne.n	13560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1355e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13560:	bf00      	nop
   13562:	b003      	add	sp, #12
   13564:	f85d fb04 	ldr.w	pc, [sp], #4
   13568:	1fff93a8 	.word	0x1fff93a8
   1356c:	1fff93a4 	.word	0x1fff93a4

00013570 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   13570:	b500      	push	{lr}
   13572:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13574:	f7ee f934 	bl	17e0 <Sys_GetCoreID>
   13578:	4603      	mov	r3, r0
   1357a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   1357c:	4a10      	ldr	r2, [pc, #64]	; (135c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   1357e:	9b01      	ldr	r3, [sp, #4]
   13580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13584:	2b00      	cmp	r3, #0
   13586:	d10d      	bne.n	135a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13588:	f7ed f9be 	bl	908 <Adc_schm_read_msr>
   1358c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1358e:	9b00      	ldr	r3, [sp, #0]
   13590:	f003 0301 	and.w	r3, r3, #1
   13594:	2b00      	cmp	r3, #0
   13596:	d100      	bne.n	1359a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13598:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   1359a:	490a      	ldr	r1, [pc, #40]	; (135c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   1359c:	9b01      	ldr	r3, [sp, #4]
   1359e:	9a00      	ldr	r2, [sp, #0]
   135a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   135a4:	4a06      	ldr	r2, [pc, #24]	; (135c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   135a6:	9b01      	ldr	r3, [sp, #4]
   135a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135ac:	1c5a      	adds	r2, r3, #1
   135ae:	4904      	ldr	r1, [pc, #16]	; (135c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   135b0:	9b01      	ldr	r3, [sp, #4]
   135b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   135b6:	bf00      	nop
   135b8:	b003      	add	sp, #12
   135ba:	f85d fb04 	ldr.w	pc, [sp], #4
   135be:	bf00      	nop
   135c0:	1fff93b0 	.word	0x1fff93b0
   135c4:	1fff93ac 	.word	0x1fff93ac

000135c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   135c8:	b500      	push	{lr}
   135ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135cc:	f7ee f908 	bl	17e0 <Sys_GetCoreID>
   135d0:	4603      	mov	r3, r0
   135d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   135d4:	4a0d      	ldr	r2, [pc, #52]	; (1360c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   135d6:	9b01      	ldr	r3, [sp, #4]
   135d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135dc:	1e5a      	subs	r2, r3, #1
   135de:	490b      	ldr	r1, [pc, #44]	; (1360c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   135e0:	9b01      	ldr	r3, [sp, #4]
   135e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   135e6:	4a0a      	ldr	r2, [pc, #40]	; (13610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   135e8:	9b01      	ldr	r3, [sp, #4]
   135ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135ee:	f003 0301 	and.w	r3, r3, #1
   135f2:	2b00      	cmp	r3, #0
   135f4:	d106      	bne.n	13604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   135f6:	4a05      	ldr	r2, [pc, #20]	; (1360c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   135f8:	9b01      	ldr	r3, [sp, #4]
   135fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135fe:	2b00      	cmp	r3, #0
   13600:	d100      	bne.n	13604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13602:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13604:	bf00      	nop
   13606:	b003      	add	sp, #12
   13608:	f85d fb04 	ldr.w	pc, [sp], #4
   1360c:	1fff93b0 	.word	0x1fff93b0
   13610:	1fff93ac 	.word	0x1fff93ac

00013614 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   13614:	b500      	push	{lr}
   13616:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13618:	f7ee f8e2 	bl	17e0 <Sys_GetCoreID>
   1361c:	4603      	mov	r3, r0
   1361e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   13620:	4a10      	ldr	r2, [pc, #64]	; (13664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   13622:	9b01      	ldr	r3, [sp, #4]
   13624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13628:	2b00      	cmp	r3, #0
   1362a:	d10d      	bne.n	13648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1362c:	f7ed f96c 	bl	908 <Adc_schm_read_msr>
   13630:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13632:	9b00      	ldr	r3, [sp, #0]
   13634:	f003 0301 	and.w	r3, r3, #1
   13638:	2b00      	cmp	r3, #0
   1363a:	d100      	bne.n	1363e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1363c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   1363e:	490a      	ldr	r1, [pc, #40]	; (13668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   13640:	9b01      	ldr	r3, [sp, #4]
   13642:	9a00      	ldr	r2, [sp, #0]
   13644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   13648:	4a06      	ldr	r2, [pc, #24]	; (13664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   1364a:	9b01      	ldr	r3, [sp, #4]
   1364c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13650:	1c5a      	adds	r2, r3, #1
   13652:	4904      	ldr	r1, [pc, #16]	; (13664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   13654:	9b01      	ldr	r3, [sp, #4]
   13656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1365a:	bf00      	nop
   1365c:	b003      	add	sp, #12
   1365e:	f85d fb04 	ldr.w	pc, [sp], #4
   13662:	bf00      	nop
   13664:	1fff93b8 	.word	0x1fff93b8
   13668:	1fff93b4 	.word	0x1fff93b4

0001366c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   1366c:	b500      	push	{lr}
   1366e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13670:	f7ee f8b6 	bl	17e0 <Sys_GetCoreID>
   13674:	4603      	mov	r3, r0
   13676:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   13678:	4a0d      	ldr	r2, [pc, #52]	; (136b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1367a:	9b01      	ldr	r3, [sp, #4]
   1367c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13680:	1e5a      	subs	r2, r3, #1
   13682:	490b      	ldr	r1, [pc, #44]	; (136b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   13684:	9b01      	ldr	r3, [sp, #4]
   13686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   1368a:	4a0a      	ldr	r2, [pc, #40]	; (136b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   1368c:	9b01      	ldr	r3, [sp, #4]
   1368e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13692:	f003 0301 	and.w	r3, r3, #1
   13696:	2b00      	cmp	r3, #0
   13698:	d106      	bne.n	136a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   1369a:	4a05      	ldr	r2, [pc, #20]	; (136b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1369c:	9b01      	ldr	r3, [sp, #4]
   1369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136a2:	2b00      	cmp	r3, #0
   136a4:	d100      	bne.n	136a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   136a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   136a8:	bf00      	nop
   136aa:	b003      	add	sp, #12
   136ac:	f85d fb04 	ldr.w	pc, [sp], #4
   136b0:	1fff93b8 	.word	0x1fff93b8
   136b4:	1fff93b4 	.word	0x1fff93b4

000136b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   136b8:	b500      	push	{lr}
   136ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136bc:	f7ee f890 	bl	17e0 <Sys_GetCoreID>
   136c0:	4603      	mov	r3, r0
   136c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   136c4:	4a10      	ldr	r2, [pc, #64]	; (13708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   136c6:	9b01      	ldr	r3, [sp, #4]
   136c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136cc:	2b00      	cmp	r3, #0
   136ce:	d10d      	bne.n	136ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   136d0:	f7ed f91a 	bl	908 <Adc_schm_read_msr>
   136d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   136d6:	9b00      	ldr	r3, [sp, #0]
   136d8:	f003 0301 	and.w	r3, r3, #1
   136dc:	2b00      	cmp	r3, #0
   136de:	d100      	bne.n	136e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   136e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   136e2:	490a      	ldr	r1, [pc, #40]	; (1370c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   136e4:	9b01      	ldr	r3, [sp, #4]
   136e6:	9a00      	ldr	r2, [sp, #0]
   136e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   136ec:	4a06      	ldr	r2, [pc, #24]	; (13708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   136ee:	9b01      	ldr	r3, [sp, #4]
   136f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136f4:	1c5a      	adds	r2, r3, #1
   136f6:	4904      	ldr	r1, [pc, #16]	; (13708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   136f8:	9b01      	ldr	r3, [sp, #4]
   136fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   136fe:	bf00      	nop
   13700:	b003      	add	sp, #12
   13702:	f85d fb04 	ldr.w	pc, [sp], #4
   13706:	bf00      	nop
   13708:	1fff93c0 	.word	0x1fff93c0
   1370c:	1fff93bc 	.word	0x1fff93bc

00013710 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   13710:	b500      	push	{lr}
   13712:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13714:	f7ee f864 	bl	17e0 <Sys_GetCoreID>
   13718:	4603      	mov	r3, r0
   1371a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   1371c:	4a0d      	ldr	r2, [pc, #52]	; (13754 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   1371e:	9b01      	ldr	r3, [sp, #4]
   13720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13724:	1e5a      	subs	r2, r3, #1
   13726:	490b      	ldr	r1, [pc, #44]	; (13754 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   13728:	9b01      	ldr	r3, [sp, #4]
   1372a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   1372e:	4a0a      	ldr	r2, [pc, #40]	; (13758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   13730:	9b01      	ldr	r3, [sp, #4]
   13732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13736:	f003 0301 	and.w	r3, r3, #1
   1373a:	2b00      	cmp	r3, #0
   1373c:	d106      	bne.n	1374c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   1373e:	4a05      	ldr	r2, [pc, #20]	; (13754 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   13740:	9b01      	ldr	r3, [sp, #4]
   13742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13746:	2b00      	cmp	r3, #0
   13748:	d100      	bne.n	1374c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1374a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1374c:	bf00      	nop
   1374e:	b003      	add	sp, #12
   13750:	f85d fb04 	ldr.w	pc, [sp], #4
   13754:	1fff93c0 	.word	0x1fff93c0
   13758:	1fff93bc 	.word	0x1fff93bc

0001375c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   1375c:	b500      	push	{lr}
   1375e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13760:	f7ee f83e 	bl	17e0 <Sys_GetCoreID>
   13764:	4603      	mov	r3, r0
   13766:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   13768:	4a10      	ldr	r2, [pc, #64]	; (137ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1376a:	9b01      	ldr	r3, [sp, #4]
   1376c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13770:	2b00      	cmp	r3, #0
   13772:	d10d      	bne.n	13790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13774:	f7ed f8c8 	bl	908 <Adc_schm_read_msr>
   13778:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1377a:	9b00      	ldr	r3, [sp, #0]
   1377c:	f003 0301 	and.w	r3, r3, #1
   13780:	2b00      	cmp	r3, #0
   13782:	d100      	bne.n	13786 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13784:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   13786:	490a      	ldr	r1, [pc, #40]	; (137b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   13788:	9b01      	ldr	r3, [sp, #4]
   1378a:	9a00      	ldr	r2, [sp, #0]
   1378c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   13790:	4a06      	ldr	r2, [pc, #24]	; (137ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   13792:	9b01      	ldr	r3, [sp, #4]
   13794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13798:	1c5a      	adds	r2, r3, #1
   1379a:	4904      	ldr	r1, [pc, #16]	; (137ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1379c:	9b01      	ldr	r3, [sp, #4]
   1379e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   137a2:	bf00      	nop
   137a4:	b003      	add	sp, #12
   137a6:	f85d fb04 	ldr.w	pc, [sp], #4
   137aa:	bf00      	nop
   137ac:	1fff93c8 	.word	0x1fff93c8
   137b0:	1fff93c4 	.word	0x1fff93c4

000137b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   137b4:	b500      	push	{lr}
   137b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137b8:	f7ee f812 	bl	17e0 <Sys_GetCoreID>
   137bc:	4603      	mov	r3, r0
   137be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   137c0:	4a0d      	ldr	r2, [pc, #52]	; (137f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   137c2:	9b01      	ldr	r3, [sp, #4]
   137c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137c8:	1e5a      	subs	r2, r3, #1
   137ca:	490b      	ldr	r1, [pc, #44]	; (137f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   137cc:	9b01      	ldr	r3, [sp, #4]
   137ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   137d2:	4a0a      	ldr	r2, [pc, #40]	; (137fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   137d4:	9b01      	ldr	r3, [sp, #4]
   137d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137da:	f003 0301 	and.w	r3, r3, #1
   137de:	2b00      	cmp	r3, #0
   137e0:	d106      	bne.n	137f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   137e2:	4a05      	ldr	r2, [pc, #20]	; (137f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   137e4:	9b01      	ldr	r3, [sp, #4]
   137e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137ea:	2b00      	cmp	r3, #0
   137ec:	d100      	bne.n	137f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   137ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   137f0:	bf00      	nop
   137f2:	b003      	add	sp, #12
   137f4:	f85d fb04 	ldr.w	pc, [sp], #4
   137f8:	1fff93c8 	.word	0x1fff93c8
   137fc:	1fff93c4 	.word	0x1fff93c4

00013800 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   13800:	b500      	push	{lr}
   13802:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13804:	f7ed ffec 	bl	17e0 <Sys_GetCoreID>
   13808:	4603      	mov	r3, r0
   1380a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   1380c:	4a10      	ldr	r2, [pc, #64]	; (13850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   1380e:	9b01      	ldr	r3, [sp, #4]
   13810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13814:	2b00      	cmp	r3, #0
   13816:	d10d      	bne.n	13834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13818:	f7ed f876 	bl	908 <Adc_schm_read_msr>
   1381c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1381e:	9b00      	ldr	r3, [sp, #0]
   13820:	f003 0301 	and.w	r3, r3, #1
   13824:	2b00      	cmp	r3, #0
   13826:	d100      	bne.n	1382a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13828:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   1382a:	490a      	ldr	r1, [pc, #40]	; (13854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   1382c:	9b01      	ldr	r3, [sp, #4]
   1382e:	9a00      	ldr	r2, [sp, #0]
   13830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   13834:	4a06      	ldr	r2, [pc, #24]	; (13850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   13836:	9b01      	ldr	r3, [sp, #4]
   13838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1383c:	1c5a      	adds	r2, r3, #1
   1383e:	4904      	ldr	r1, [pc, #16]	; (13850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   13840:	9b01      	ldr	r3, [sp, #4]
   13842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13846:	bf00      	nop
   13848:	b003      	add	sp, #12
   1384a:	f85d fb04 	ldr.w	pc, [sp], #4
   1384e:	bf00      	nop
   13850:	1fff93d0 	.word	0x1fff93d0
   13854:	1fff93cc 	.word	0x1fff93cc

00013858 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   13858:	b500      	push	{lr}
   1385a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1385c:	f7ed ffc0 	bl	17e0 <Sys_GetCoreID>
   13860:	4603      	mov	r3, r0
   13862:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   13864:	4a0d      	ldr	r2, [pc, #52]	; (1389c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   13866:	9b01      	ldr	r3, [sp, #4]
   13868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1386c:	1e5a      	subs	r2, r3, #1
   1386e:	490b      	ldr	r1, [pc, #44]	; (1389c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   13870:	9b01      	ldr	r3, [sp, #4]
   13872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   13876:	4a0a      	ldr	r2, [pc, #40]	; (138a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   13878:	9b01      	ldr	r3, [sp, #4]
   1387a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1387e:	f003 0301 	and.w	r3, r3, #1
   13882:	2b00      	cmp	r3, #0
   13884:	d106      	bne.n	13894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   13886:	4a05      	ldr	r2, [pc, #20]	; (1389c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   13888:	9b01      	ldr	r3, [sp, #4]
   1388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1388e:	2b00      	cmp	r3, #0
   13890:	d100      	bne.n	13894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13892:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13894:	bf00      	nop
   13896:	b003      	add	sp, #12
   13898:	f85d fb04 	ldr.w	pc, [sp], #4
   1389c:	1fff93d0 	.word	0x1fff93d0
   138a0:	1fff93cc 	.word	0x1fff93cc

000138a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   138a4:	b500      	push	{lr}
   138a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138a8:	f7ed ff9a 	bl	17e0 <Sys_GetCoreID>
   138ac:	4603      	mov	r3, r0
   138ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   138b0:	4a10      	ldr	r2, [pc, #64]	; (138f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   138b2:	9b01      	ldr	r3, [sp, #4]
   138b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138b8:	2b00      	cmp	r3, #0
   138ba:	d10d      	bne.n	138d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   138bc:	f7ed f824 	bl	908 <Adc_schm_read_msr>
   138c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   138c2:	9b00      	ldr	r3, [sp, #0]
   138c4:	f003 0301 	and.w	r3, r3, #1
   138c8:	2b00      	cmp	r3, #0
   138ca:	d100      	bne.n	138ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   138cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   138ce:	490a      	ldr	r1, [pc, #40]	; (138f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   138d0:	9b01      	ldr	r3, [sp, #4]
   138d2:	9a00      	ldr	r2, [sp, #0]
   138d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   138d8:	4a06      	ldr	r2, [pc, #24]	; (138f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   138da:	9b01      	ldr	r3, [sp, #4]
   138dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138e0:	1c5a      	adds	r2, r3, #1
   138e2:	4904      	ldr	r1, [pc, #16]	; (138f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   138e4:	9b01      	ldr	r3, [sp, #4]
   138e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   138ea:	bf00      	nop
   138ec:	b003      	add	sp, #12
   138ee:	f85d fb04 	ldr.w	pc, [sp], #4
   138f2:	bf00      	nop
   138f4:	1fff93d8 	.word	0x1fff93d8
   138f8:	1fff93d4 	.word	0x1fff93d4

000138fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   138fc:	b500      	push	{lr}
   138fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13900:	f7ed ff6e 	bl	17e0 <Sys_GetCoreID>
   13904:	4603      	mov	r3, r0
   13906:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   13908:	4a0d      	ldr	r2, [pc, #52]	; (13940 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   1390a:	9b01      	ldr	r3, [sp, #4]
   1390c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13910:	1e5a      	subs	r2, r3, #1
   13912:	490b      	ldr	r1, [pc, #44]	; (13940 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   13914:	9b01      	ldr	r3, [sp, #4]
   13916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   1391a:	4a0a      	ldr	r2, [pc, #40]	; (13944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   1391c:	9b01      	ldr	r3, [sp, #4]
   1391e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13922:	f003 0301 	and.w	r3, r3, #1
   13926:	2b00      	cmp	r3, #0
   13928:	d106      	bne.n	13938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   1392a:	4a05      	ldr	r2, [pc, #20]	; (13940 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   1392c:	9b01      	ldr	r3, [sp, #4]
   1392e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13932:	2b00      	cmp	r3, #0
   13934:	d100      	bne.n	13938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13936:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13938:	bf00      	nop
   1393a:	b003      	add	sp, #12
   1393c:	f85d fb04 	ldr.w	pc, [sp], #4
   13940:	1fff93d8 	.word	0x1fff93d8
   13944:	1fff93d4 	.word	0x1fff93d4

00013948 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   13948:	b500      	push	{lr}
   1394a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1394c:	f7ed ff48 	bl	17e0 <Sys_GetCoreID>
   13950:	4603      	mov	r3, r0
   13952:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   13954:	4a10      	ldr	r2, [pc, #64]	; (13998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   13956:	9b01      	ldr	r3, [sp, #4]
   13958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1395c:	2b00      	cmp	r3, #0
   1395e:	d10d      	bne.n	1397c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13960:	f7ec ffd2 	bl	908 <Adc_schm_read_msr>
   13964:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13966:	9b00      	ldr	r3, [sp, #0]
   13968:	f003 0301 	and.w	r3, r3, #1
   1396c:	2b00      	cmp	r3, #0
   1396e:	d100      	bne.n	13972 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13970:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   13972:	490a      	ldr	r1, [pc, #40]	; (1399c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   13974:	9b01      	ldr	r3, [sp, #4]
   13976:	9a00      	ldr	r2, [sp, #0]
   13978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   1397c:	4a06      	ldr	r2, [pc, #24]	; (13998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1397e:	9b01      	ldr	r3, [sp, #4]
   13980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13984:	1c5a      	adds	r2, r3, #1
   13986:	4904      	ldr	r1, [pc, #16]	; (13998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   13988:	9b01      	ldr	r3, [sp, #4]
   1398a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1398e:	bf00      	nop
   13990:	b003      	add	sp, #12
   13992:	f85d fb04 	ldr.w	pc, [sp], #4
   13996:	bf00      	nop
   13998:	1fff93e0 	.word	0x1fff93e0
   1399c:	1fff93dc 	.word	0x1fff93dc

000139a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   139a0:	b500      	push	{lr}
   139a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139a4:	f7ed ff1c 	bl	17e0 <Sys_GetCoreID>
   139a8:	4603      	mov	r3, r0
   139aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   139ac:	4a0d      	ldr	r2, [pc, #52]	; (139e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   139ae:	9b01      	ldr	r3, [sp, #4]
   139b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139b4:	1e5a      	subs	r2, r3, #1
   139b6:	490b      	ldr	r1, [pc, #44]	; (139e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   139b8:	9b01      	ldr	r3, [sp, #4]
   139ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   139be:	4a0a      	ldr	r2, [pc, #40]	; (139e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   139c0:	9b01      	ldr	r3, [sp, #4]
   139c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139c6:	f003 0301 	and.w	r3, r3, #1
   139ca:	2b00      	cmp	r3, #0
   139cc:	d106      	bne.n	139dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   139ce:	4a05      	ldr	r2, [pc, #20]	; (139e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   139d0:	9b01      	ldr	r3, [sp, #4]
   139d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139d6:	2b00      	cmp	r3, #0
   139d8:	d100      	bne.n	139dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   139da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   139dc:	bf00      	nop
   139de:	b003      	add	sp, #12
   139e0:	f85d fb04 	ldr.w	pc, [sp], #4
   139e4:	1fff93e0 	.word	0x1fff93e0
   139e8:	1fff93dc 	.word	0x1fff93dc

000139ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   139ec:	b500      	push	{lr}
   139ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139f0:	f7ed fef6 	bl	17e0 <Sys_GetCoreID>
   139f4:	4603      	mov	r3, r0
   139f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   139f8:	4a10      	ldr	r2, [pc, #64]	; (13a3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   139fa:	9b01      	ldr	r3, [sp, #4]
   139fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a00:	2b00      	cmp	r3, #0
   13a02:	d10d      	bne.n	13a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a04:	f7ec ff80 	bl	908 <Adc_schm_read_msr>
   13a08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a0a:	9b00      	ldr	r3, [sp, #0]
   13a0c:	f003 0301 	and.w	r3, r3, #1
   13a10:	2b00      	cmp	r3, #0
   13a12:	d100      	bne.n	13a16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   13a16:	490a      	ldr	r1, [pc, #40]	; (13a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   13a18:	9b01      	ldr	r3, [sp, #4]
   13a1a:	9a00      	ldr	r2, [sp, #0]
   13a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   13a20:	4a06      	ldr	r2, [pc, #24]	; (13a3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   13a22:	9b01      	ldr	r3, [sp, #4]
   13a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a28:	1c5a      	adds	r2, r3, #1
   13a2a:	4904      	ldr	r1, [pc, #16]	; (13a3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   13a2c:	9b01      	ldr	r3, [sp, #4]
   13a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a32:	bf00      	nop
   13a34:	b003      	add	sp, #12
   13a36:	f85d fb04 	ldr.w	pc, [sp], #4
   13a3a:	bf00      	nop
   13a3c:	1fff93e8 	.word	0x1fff93e8
   13a40:	1fff93e4 	.word	0x1fff93e4

00013a44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   13a44:	b500      	push	{lr}
   13a46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a48:	f7ed feca 	bl	17e0 <Sys_GetCoreID>
   13a4c:	4603      	mov	r3, r0
   13a4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   13a50:	4a0d      	ldr	r2, [pc, #52]	; (13a88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13a52:	9b01      	ldr	r3, [sp, #4]
   13a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a58:	1e5a      	subs	r2, r3, #1
   13a5a:	490b      	ldr	r1, [pc, #44]	; (13a88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13a5c:	9b01      	ldr	r3, [sp, #4]
   13a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   13a62:	4a0a      	ldr	r2, [pc, #40]	; (13a8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   13a64:	9b01      	ldr	r3, [sp, #4]
   13a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a6a:	f003 0301 	and.w	r3, r3, #1
   13a6e:	2b00      	cmp	r3, #0
   13a70:	d106      	bne.n	13a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   13a72:	4a05      	ldr	r2, [pc, #20]	; (13a88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13a74:	9b01      	ldr	r3, [sp, #4]
   13a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a7a:	2b00      	cmp	r3, #0
   13a7c:	d100      	bne.n	13a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a80:	bf00      	nop
   13a82:	b003      	add	sp, #12
   13a84:	f85d fb04 	ldr.w	pc, [sp], #4
   13a88:	1fff93e8 	.word	0x1fff93e8
   13a8c:	1fff93e4 	.word	0x1fff93e4

00013a90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   13a90:	b500      	push	{lr}
   13a92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a94:	f7ed fea4 	bl	17e0 <Sys_GetCoreID>
   13a98:	4603      	mov	r3, r0
   13a9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   13a9c:	4a10      	ldr	r2, [pc, #64]	; (13ae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13a9e:	9b01      	ldr	r3, [sp, #4]
   13aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aa4:	2b00      	cmp	r3, #0
   13aa6:	d10d      	bne.n	13ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13aa8:	f7ec ff2e 	bl	908 <Adc_schm_read_msr>
   13aac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13aae:	9b00      	ldr	r3, [sp, #0]
   13ab0:	f003 0301 	and.w	r3, r3, #1
   13ab4:	2b00      	cmp	r3, #0
   13ab6:	d100      	bne.n	13aba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ab8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   13aba:	490a      	ldr	r1, [pc, #40]	; (13ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   13abc:	9b01      	ldr	r3, [sp, #4]
   13abe:	9a00      	ldr	r2, [sp, #0]
   13ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   13ac4:	4a06      	ldr	r2, [pc, #24]	; (13ae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13ac6:	9b01      	ldr	r3, [sp, #4]
   13ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13acc:	1c5a      	adds	r2, r3, #1
   13ace:	4904      	ldr	r1, [pc, #16]	; (13ae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13ad0:	9b01      	ldr	r3, [sp, #4]
   13ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ad6:	bf00      	nop
   13ad8:	b003      	add	sp, #12
   13ada:	f85d fb04 	ldr.w	pc, [sp], #4
   13ade:	bf00      	nop
   13ae0:	1fff93f0 	.word	0x1fff93f0
   13ae4:	1fff93ec 	.word	0x1fff93ec

00013ae8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   13ae8:	b500      	push	{lr}
   13aea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13aec:	f7ed fe78 	bl	17e0 <Sys_GetCoreID>
   13af0:	4603      	mov	r3, r0
   13af2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   13af4:	4a0d      	ldr	r2, [pc, #52]	; (13b2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13af6:	9b01      	ldr	r3, [sp, #4]
   13af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13afc:	1e5a      	subs	r2, r3, #1
   13afe:	490b      	ldr	r1, [pc, #44]	; (13b2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13b00:	9b01      	ldr	r3, [sp, #4]
   13b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   13b06:	4a0a      	ldr	r2, [pc, #40]	; (13b30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   13b08:	9b01      	ldr	r3, [sp, #4]
   13b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b0e:	f003 0301 	and.w	r3, r3, #1
   13b12:	2b00      	cmp	r3, #0
   13b14:	d106      	bne.n	13b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   13b16:	4a05      	ldr	r2, [pc, #20]	; (13b2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13b18:	9b01      	ldr	r3, [sp, #4]
   13b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b1e:	2b00      	cmp	r3, #0
   13b20:	d100      	bne.n	13b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b24:	bf00      	nop
   13b26:	b003      	add	sp, #12
   13b28:	f85d fb04 	ldr.w	pc, [sp], #4
   13b2c:	1fff93f0 	.word	0x1fff93f0
   13b30:	1fff93ec 	.word	0x1fff93ec

00013b34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   13b34:	b500      	push	{lr}
   13b36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b38:	f7ed fe52 	bl	17e0 <Sys_GetCoreID>
   13b3c:	4603      	mov	r3, r0
   13b3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   13b40:	4a10      	ldr	r2, [pc, #64]	; (13b84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13b42:	9b01      	ldr	r3, [sp, #4]
   13b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b48:	2b00      	cmp	r3, #0
   13b4a:	d10d      	bne.n	13b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b4c:	f7ec fedc 	bl	908 <Adc_schm_read_msr>
   13b50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b52:	9b00      	ldr	r3, [sp, #0]
   13b54:	f003 0301 	and.w	r3, r3, #1
   13b58:	2b00      	cmp	r3, #0
   13b5a:	d100      	bne.n	13b5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   13b5e:	490a      	ldr	r1, [pc, #40]	; (13b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   13b60:	9b01      	ldr	r3, [sp, #4]
   13b62:	9a00      	ldr	r2, [sp, #0]
   13b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   13b68:	4a06      	ldr	r2, [pc, #24]	; (13b84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13b6a:	9b01      	ldr	r3, [sp, #4]
   13b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b70:	1c5a      	adds	r2, r3, #1
   13b72:	4904      	ldr	r1, [pc, #16]	; (13b84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13b74:	9b01      	ldr	r3, [sp, #4]
   13b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b7a:	bf00      	nop
   13b7c:	b003      	add	sp, #12
   13b7e:	f85d fb04 	ldr.w	pc, [sp], #4
   13b82:	bf00      	nop
   13b84:	1fff93f8 	.word	0x1fff93f8
   13b88:	1fff93f4 	.word	0x1fff93f4

00013b8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   13b8c:	b500      	push	{lr}
   13b8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b90:	f7ed fe26 	bl	17e0 <Sys_GetCoreID>
   13b94:	4603      	mov	r3, r0
   13b96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   13b98:	4a0d      	ldr	r2, [pc, #52]	; (13bd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13b9a:	9b01      	ldr	r3, [sp, #4]
   13b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ba0:	1e5a      	subs	r2, r3, #1
   13ba2:	490b      	ldr	r1, [pc, #44]	; (13bd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13ba4:	9b01      	ldr	r3, [sp, #4]
   13ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   13baa:	4a0a      	ldr	r2, [pc, #40]	; (13bd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   13bac:	9b01      	ldr	r3, [sp, #4]
   13bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bb2:	f003 0301 	and.w	r3, r3, #1
   13bb6:	2b00      	cmp	r3, #0
   13bb8:	d106      	bne.n	13bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   13bba:	4a05      	ldr	r2, [pc, #20]	; (13bd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13bbc:	9b01      	ldr	r3, [sp, #4]
   13bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bc2:	2b00      	cmp	r3, #0
   13bc4:	d100      	bne.n	13bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13bc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13bc8:	bf00      	nop
   13bca:	b003      	add	sp, #12
   13bcc:	f85d fb04 	ldr.w	pc, [sp], #4
   13bd0:	1fff93f8 	.word	0x1fff93f8
   13bd4:	1fff93f4 	.word	0x1fff93f4

00013bd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   13bd8:	b500      	push	{lr}
   13bda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bdc:	f7ed fe00 	bl	17e0 <Sys_GetCoreID>
   13be0:	4603      	mov	r3, r0
   13be2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   13be4:	4a10      	ldr	r2, [pc, #64]	; (13c28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13be6:	9b01      	ldr	r3, [sp, #4]
   13be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bec:	2b00      	cmp	r3, #0
   13bee:	d10d      	bne.n	13c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13bf0:	f7ec fe8a 	bl	908 <Adc_schm_read_msr>
   13bf4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13bf6:	9b00      	ldr	r3, [sp, #0]
   13bf8:	f003 0301 	and.w	r3, r3, #1
   13bfc:	2b00      	cmp	r3, #0
   13bfe:	d100      	bne.n	13c02 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   13c02:	490a      	ldr	r1, [pc, #40]	; (13c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   13c04:	9b01      	ldr	r3, [sp, #4]
   13c06:	9a00      	ldr	r2, [sp, #0]
   13c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   13c0c:	4a06      	ldr	r2, [pc, #24]	; (13c28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13c0e:	9b01      	ldr	r3, [sp, #4]
   13c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c14:	1c5a      	adds	r2, r3, #1
   13c16:	4904      	ldr	r1, [pc, #16]	; (13c28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13c18:	9b01      	ldr	r3, [sp, #4]
   13c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c1e:	bf00      	nop
   13c20:	b003      	add	sp, #12
   13c22:	f85d fb04 	ldr.w	pc, [sp], #4
   13c26:	bf00      	nop
   13c28:	1fff9400 	.word	0x1fff9400
   13c2c:	1fff93fc 	.word	0x1fff93fc

00013c30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   13c30:	b500      	push	{lr}
   13c32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c34:	f7ed fdd4 	bl	17e0 <Sys_GetCoreID>
   13c38:	4603      	mov	r3, r0
   13c3a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   13c3c:	4a0d      	ldr	r2, [pc, #52]	; (13c74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13c3e:	9b01      	ldr	r3, [sp, #4]
   13c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c44:	1e5a      	subs	r2, r3, #1
   13c46:	490b      	ldr	r1, [pc, #44]	; (13c74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13c48:	9b01      	ldr	r3, [sp, #4]
   13c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   13c4e:	4a0a      	ldr	r2, [pc, #40]	; (13c78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   13c50:	9b01      	ldr	r3, [sp, #4]
   13c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c56:	f003 0301 	and.w	r3, r3, #1
   13c5a:	2b00      	cmp	r3, #0
   13c5c:	d106      	bne.n	13c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   13c5e:	4a05      	ldr	r2, [pc, #20]	; (13c74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13c60:	9b01      	ldr	r3, [sp, #4]
   13c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c66:	2b00      	cmp	r3, #0
   13c68:	d100      	bne.n	13c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c6c:	bf00      	nop
   13c6e:	b003      	add	sp, #12
   13c70:	f85d fb04 	ldr.w	pc, [sp], #4
   13c74:	1fff9400 	.word	0x1fff9400
   13c78:	1fff93fc 	.word	0x1fff93fc

00013c7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   13c7c:	b500      	push	{lr}
   13c7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c80:	f7ed fdae 	bl	17e0 <Sys_GetCoreID>
   13c84:	4603      	mov	r3, r0
   13c86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   13c88:	4a10      	ldr	r2, [pc, #64]	; (13ccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13c8a:	9b01      	ldr	r3, [sp, #4]
   13c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c90:	2b00      	cmp	r3, #0
   13c92:	d10d      	bne.n	13cb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c94:	f7ec fe38 	bl	908 <Adc_schm_read_msr>
   13c98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c9a:	9b00      	ldr	r3, [sp, #0]
   13c9c:	f003 0301 	and.w	r3, r3, #1
   13ca0:	2b00      	cmp	r3, #0
   13ca2:	d100      	bne.n	13ca6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ca4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   13ca6:	490a      	ldr	r1, [pc, #40]	; (13cd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   13ca8:	9b01      	ldr	r3, [sp, #4]
   13caa:	9a00      	ldr	r2, [sp, #0]
   13cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   13cb0:	4a06      	ldr	r2, [pc, #24]	; (13ccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13cb2:	9b01      	ldr	r3, [sp, #4]
   13cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cb8:	1c5a      	adds	r2, r3, #1
   13cba:	4904      	ldr	r1, [pc, #16]	; (13ccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13cbc:	9b01      	ldr	r3, [sp, #4]
   13cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13cc2:	bf00      	nop
   13cc4:	b003      	add	sp, #12
   13cc6:	f85d fb04 	ldr.w	pc, [sp], #4
   13cca:	bf00      	nop
   13ccc:	1fff9408 	.word	0x1fff9408
   13cd0:	1fff9404 	.word	0x1fff9404

00013cd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   13cd4:	b500      	push	{lr}
   13cd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cd8:	f7ed fd82 	bl	17e0 <Sys_GetCoreID>
   13cdc:	4603      	mov	r3, r0
   13cde:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   13ce0:	4a0d      	ldr	r2, [pc, #52]	; (13d18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13ce2:	9b01      	ldr	r3, [sp, #4]
   13ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ce8:	1e5a      	subs	r2, r3, #1
   13cea:	490b      	ldr	r1, [pc, #44]	; (13d18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13cec:	9b01      	ldr	r3, [sp, #4]
   13cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   13cf2:	4a0a      	ldr	r2, [pc, #40]	; (13d1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   13cf4:	9b01      	ldr	r3, [sp, #4]
   13cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cfa:	f003 0301 	and.w	r3, r3, #1
   13cfe:	2b00      	cmp	r3, #0
   13d00:	d106      	bne.n	13d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   13d02:	4a05      	ldr	r2, [pc, #20]	; (13d18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13d04:	9b01      	ldr	r3, [sp, #4]
   13d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d0a:	2b00      	cmp	r3, #0
   13d0c:	d100      	bne.n	13d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d10:	bf00      	nop
   13d12:	b003      	add	sp, #12
   13d14:	f85d fb04 	ldr.w	pc, [sp], #4
   13d18:	1fff9408 	.word	0x1fff9408
   13d1c:	1fff9404 	.word	0x1fff9404

00013d20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   13d20:	b500      	push	{lr}
   13d22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d24:	f7ed fd5c 	bl	17e0 <Sys_GetCoreID>
   13d28:	4603      	mov	r3, r0
   13d2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   13d2c:	4a10      	ldr	r2, [pc, #64]	; (13d70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13d2e:	9b01      	ldr	r3, [sp, #4]
   13d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d34:	2b00      	cmp	r3, #0
   13d36:	d10d      	bne.n	13d54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d38:	f7ec fde6 	bl	908 <Adc_schm_read_msr>
   13d3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d3e:	9b00      	ldr	r3, [sp, #0]
   13d40:	f003 0301 	and.w	r3, r3, #1
   13d44:	2b00      	cmp	r3, #0
   13d46:	d100      	bne.n	13d4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   13d4a:	490a      	ldr	r1, [pc, #40]	; (13d74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   13d4c:	9b01      	ldr	r3, [sp, #4]
   13d4e:	9a00      	ldr	r2, [sp, #0]
   13d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   13d54:	4a06      	ldr	r2, [pc, #24]	; (13d70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13d56:	9b01      	ldr	r3, [sp, #4]
   13d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d5c:	1c5a      	adds	r2, r3, #1
   13d5e:	4904      	ldr	r1, [pc, #16]	; (13d70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13d60:	9b01      	ldr	r3, [sp, #4]
   13d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d66:	bf00      	nop
   13d68:	b003      	add	sp, #12
   13d6a:	f85d fb04 	ldr.w	pc, [sp], #4
   13d6e:	bf00      	nop
   13d70:	1fff9410 	.word	0x1fff9410
   13d74:	1fff940c 	.word	0x1fff940c

00013d78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   13d78:	b500      	push	{lr}
   13d7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d7c:	f7ed fd30 	bl	17e0 <Sys_GetCoreID>
   13d80:	4603      	mov	r3, r0
   13d82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   13d84:	4a0d      	ldr	r2, [pc, #52]	; (13dbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   13d86:	9b01      	ldr	r3, [sp, #4]
   13d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d8c:	1e5a      	subs	r2, r3, #1
   13d8e:	490b      	ldr	r1, [pc, #44]	; (13dbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   13d90:	9b01      	ldr	r3, [sp, #4]
   13d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   13d96:	4a0a      	ldr	r2, [pc, #40]	; (13dc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   13d98:	9b01      	ldr	r3, [sp, #4]
   13d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d9e:	f003 0301 	and.w	r3, r3, #1
   13da2:	2b00      	cmp	r3, #0
   13da4:	d106      	bne.n	13db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   13da6:	4a05      	ldr	r2, [pc, #20]	; (13dbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   13da8:	9b01      	ldr	r3, [sp, #4]
   13daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dae:	2b00      	cmp	r3, #0
   13db0:	d100      	bne.n	13db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13db2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13db4:	bf00      	nop
   13db6:	b003      	add	sp, #12
   13db8:	f85d fb04 	ldr.w	pc, [sp], #4
   13dbc:	1fff9410 	.word	0x1fff9410
   13dc0:	1fff940c 	.word	0x1fff940c

00013dc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   13dc4:	b500      	push	{lr}
   13dc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13dc8:	f7ed fd0a 	bl	17e0 <Sys_GetCoreID>
   13dcc:	4603      	mov	r3, r0
   13dce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   13dd0:	4a10      	ldr	r2, [pc, #64]	; (13e14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   13dd2:	9b01      	ldr	r3, [sp, #4]
   13dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dd8:	2b00      	cmp	r3, #0
   13dda:	d10d      	bne.n	13df8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ddc:	f7ec fd94 	bl	908 <Adc_schm_read_msr>
   13de0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13de2:	9b00      	ldr	r3, [sp, #0]
   13de4:	f003 0301 	and.w	r3, r3, #1
   13de8:	2b00      	cmp	r3, #0
   13dea:	d100      	bne.n	13dee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13dec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   13dee:	490a      	ldr	r1, [pc, #40]	; (13e18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   13df0:	9b01      	ldr	r3, [sp, #4]
   13df2:	9a00      	ldr	r2, [sp, #0]
   13df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   13df8:	4a06      	ldr	r2, [pc, #24]	; (13e14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   13dfa:	9b01      	ldr	r3, [sp, #4]
   13dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e00:	1c5a      	adds	r2, r3, #1
   13e02:	4904      	ldr	r1, [pc, #16]	; (13e14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   13e04:	9b01      	ldr	r3, [sp, #4]
   13e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e0a:	bf00      	nop
   13e0c:	b003      	add	sp, #12
   13e0e:	f85d fb04 	ldr.w	pc, [sp], #4
   13e12:	bf00      	nop
   13e14:	1fff9418 	.word	0x1fff9418
   13e18:	1fff9414 	.word	0x1fff9414

00013e1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   13e1c:	b500      	push	{lr}
   13e1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e20:	f7ed fcde 	bl	17e0 <Sys_GetCoreID>
   13e24:	4603      	mov	r3, r0
   13e26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   13e28:	4a0d      	ldr	r2, [pc, #52]	; (13e60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   13e2a:	9b01      	ldr	r3, [sp, #4]
   13e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e30:	1e5a      	subs	r2, r3, #1
   13e32:	490b      	ldr	r1, [pc, #44]	; (13e60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   13e34:	9b01      	ldr	r3, [sp, #4]
   13e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   13e3a:	4a0a      	ldr	r2, [pc, #40]	; (13e64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   13e3c:	9b01      	ldr	r3, [sp, #4]
   13e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e42:	f003 0301 	and.w	r3, r3, #1
   13e46:	2b00      	cmp	r3, #0
   13e48:	d106      	bne.n	13e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   13e4a:	4a05      	ldr	r2, [pc, #20]	; (13e60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   13e4c:	9b01      	ldr	r3, [sp, #4]
   13e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e52:	2b00      	cmp	r3, #0
   13e54:	d100      	bne.n	13e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e58:	bf00      	nop
   13e5a:	b003      	add	sp, #12
   13e5c:	f85d fb04 	ldr.w	pc, [sp], #4
   13e60:	1fff9418 	.word	0x1fff9418
   13e64:	1fff9414 	.word	0x1fff9414

00013e68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   13e68:	b500      	push	{lr}
   13e6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e6c:	f7ed fcb8 	bl	17e0 <Sys_GetCoreID>
   13e70:	4603      	mov	r3, r0
   13e72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   13e74:	4a10      	ldr	r2, [pc, #64]	; (13eb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   13e76:	9b01      	ldr	r3, [sp, #4]
   13e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e7c:	2b00      	cmp	r3, #0
   13e7e:	d10d      	bne.n	13e9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e80:	f7ec fd42 	bl	908 <Adc_schm_read_msr>
   13e84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e86:	9b00      	ldr	r3, [sp, #0]
   13e88:	f003 0301 	and.w	r3, r3, #1
   13e8c:	2b00      	cmp	r3, #0
   13e8e:	d100      	bne.n	13e92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   13e92:	490a      	ldr	r1, [pc, #40]	; (13ebc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   13e94:	9b01      	ldr	r3, [sp, #4]
   13e96:	9a00      	ldr	r2, [sp, #0]
   13e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   13e9c:	4a06      	ldr	r2, [pc, #24]	; (13eb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   13e9e:	9b01      	ldr	r3, [sp, #4]
   13ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ea4:	1c5a      	adds	r2, r3, #1
   13ea6:	4904      	ldr	r1, [pc, #16]	; (13eb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   13ea8:	9b01      	ldr	r3, [sp, #4]
   13eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13eae:	bf00      	nop
   13eb0:	b003      	add	sp, #12
   13eb2:	f85d fb04 	ldr.w	pc, [sp], #4
   13eb6:	bf00      	nop
   13eb8:	1fff9420 	.word	0x1fff9420
   13ebc:	1fff941c 	.word	0x1fff941c

00013ec0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   13ec0:	b500      	push	{lr}
   13ec2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ec4:	f7ed fc8c 	bl	17e0 <Sys_GetCoreID>
   13ec8:	4603      	mov	r3, r0
   13eca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   13ecc:	4a0d      	ldr	r2, [pc, #52]	; (13f04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   13ece:	9b01      	ldr	r3, [sp, #4]
   13ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ed4:	1e5a      	subs	r2, r3, #1
   13ed6:	490b      	ldr	r1, [pc, #44]	; (13f04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   13ed8:	9b01      	ldr	r3, [sp, #4]
   13eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   13ede:	4a0a      	ldr	r2, [pc, #40]	; (13f08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   13ee0:	9b01      	ldr	r3, [sp, #4]
   13ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ee6:	f003 0301 	and.w	r3, r3, #1
   13eea:	2b00      	cmp	r3, #0
   13eec:	d106      	bne.n	13efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   13eee:	4a05      	ldr	r2, [pc, #20]	; (13f04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   13ef0:	9b01      	ldr	r3, [sp, #4]
   13ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ef6:	2b00      	cmp	r3, #0
   13ef8:	d100      	bne.n	13efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13efa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13efc:	bf00      	nop
   13efe:	b003      	add	sp, #12
   13f00:	f85d fb04 	ldr.w	pc, [sp], #4
   13f04:	1fff9420 	.word	0x1fff9420
   13f08:	1fff941c 	.word	0x1fff941c

00013f0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   13f0c:	b500      	push	{lr}
   13f0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f10:	f7ed fc66 	bl	17e0 <Sys_GetCoreID>
   13f14:	4603      	mov	r3, r0
   13f16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   13f18:	4a10      	ldr	r2, [pc, #64]	; (13f5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   13f1a:	9b01      	ldr	r3, [sp, #4]
   13f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f20:	2b00      	cmp	r3, #0
   13f22:	d10d      	bne.n	13f40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f24:	f7ec fcf0 	bl	908 <Adc_schm_read_msr>
   13f28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f2a:	9b00      	ldr	r3, [sp, #0]
   13f2c:	f003 0301 	and.w	r3, r3, #1
   13f30:	2b00      	cmp	r3, #0
   13f32:	d100      	bne.n	13f36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   13f36:	490a      	ldr	r1, [pc, #40]	; (13f60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   13f38:	9b01      	ldr	r3, [sp, #4]
   13f3a:	9a00      	ldr	r2, [sp, #0]
   13f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   13f40:	4a06      	ldr	r2, [pc, #24]	; (13f5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   13f42:	9b01      	ldr	r3, [sp, #4]
   13f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f48:	1c5a      	adds	r2, r3, #1
   13f4a:	4904      	ldr	r1, [pc, #16]	; (13f5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   13f4c:	9b01      	ldr	r3, [sp, #4]
   13f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f52:	bf00      	nop
   13f54:	b003      	add	sp, #12
   13f56:	f85d fb04 	ldr.w	pc, [sp], #4
   13f5a:	bf00      	nop
   13f5c:	1fff9428 	.word	0x1fff9428
   13f60:	1fff9424 	.word	0x1fff9424

00013f64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   13f64:	b500      	push	{lr}
   13f66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f68:	f7ed fc3a 	bl	17e0 <Sys_GetCoreID>
   13f6c:	4603      	mov	r3, r0
   13f6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   13f70:	4a0d      	ldr	r2, [pc, #52]	; (13fa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   13f72:	9b01      	ldr	r3, [sp, #4]
   13f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f78:	1e5a      	subs	r2, r3, #1
   13f7a:	490b      	ldr	r1, [pc, #44]	; (13fa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   13f7c:	9b01      	ldr	r3, [sp, #4]
   13f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   13f82:	4a0a      	ldr	r2, [pc, #40]	; (13fac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   13f84:	9b01      	ldr	r3, [sp, #4]
   13f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f8a:	f003 0301 	and.w	r3, r3, #1
   13f8e:	2b00      	cmp	r3, #0
   13f90:	d106      	bne.n	13fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   13f92:	4a05      	ldr	r2, [pc, #20]	; (13fa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   13f94:	9b01      	ldr	r3, [sp, #4]
   13f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f9a:	2b00      	cmp	r3, #0
   13f9c:	d100      	bne.n	13fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13fa0:	bf00      	nop
   13fa2:	b003      	add	sp, #12
   13fa4:	f85d fb04 	ldr.w	pc, [sp], #4
   13fa8:	1fff9428 	.word	0x1fff9428
   13fac:	1fff9424 	.word	0x1fff9424

00013fb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   13fb0:	b500      	push	{lr}
   13fb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fb4:	f7ed fc14 	bl	17e0 <Sys_GetCoreID>
   13fb8:	4603      	mov	r3, r0
   13fba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   13fbc:	4a10      	ldr	r2, [pc, #64]	; (14000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   13fbe:	9b01      	ldr	r3, [sp, #4]
   13fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fc4:	2b00      	cmp	r3, #0
   13fc6:	d10d      	bne.n	13fe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13fc8:	f7ec fc9e 	bl	908 <Adc_schm_read_msr>
   13fcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13fce:	9b00      	ldr	r3, [sp, #0]
   13fd0:	f003 0301 	and.w	r3, r3, #1
   13fd4:	2b00      	cmp	r3, #0
   13fd6:	d100      	bne.n	13fda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13fd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   13fda:	490a      	ldr	r1, [pc, #40]	; (14004 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   13fdc:	9b01      	ldr	r3, [sp, #4]
   13fde:	9a00      	ldr	r2, [sp, #0]
   13fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   13fe4:	4a06      	ldr	r2, [pc, #24]	; (14000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   13fe6:	9b01      	ldr	r3, [sp, #4]
   13fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fec:	1c5a      	adds	r2, r3, #1
   13fee:	4904      	ldr	r1, [pc, #16]	; (14000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   13ff0:	9b01      	ldr	r3, [sp, #4]
   13ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ff6:	bf00      	nop
   13ff8:	b003      	add	sp, #12
   13ffa:	f85d fb04 	ldr.w	pc, [sp], #4
   13ffe:	bf00      	nop
   14000:	1fff9430 	.word	0x1fff9430
   14004:	1fff942c 	.word	0x1fff942c

00014008 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   14008:	b500      	push	{lr}
   1400a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1400c:	f7ed fbe8 	bl	17e0 <Sys_GetCoreID>
   14010:	4603      	mov	r3, r0
   14012:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   14014:	4a0d      	ldr	r2, [pc, #52]	; (1404c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   14016:	9b01      	ldr	r3, [sp, #4]
   14018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1401c:	1e5a      	subs	r2, r3, #1
   1401e:	490b      	ldr	r1, [pc, #44]	; (1404c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   14020:	9b01      	ldr	r3, [sp, #4]
   14022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   14026:	4a0a      	ldr	r2, [pc, #40]	; (14050 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   14028:	9b01      	ldr	r3, [sp, #4]
   1402a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1402e:	f003 0301 	and.w	r3, r3, #1
   14032:	2b00      	cmp	r3, #0
   14034:	d106      	bne.n	14044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   14036:	4a05      	ldr	r2, [pc, #20]	; (1404c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   14038:	9b01      	ldr	r3, [sp, #4]
   1403a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1403e:	2b00      	cmp	r3, #0
   14040:	d100      	bne.n	14044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14042:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14044:	bf00      	nop
   14046:	b003      	add	sp, #12
   14048:	f85d fb04 	ldr.w	pc, [sp], #4
   1404c:	1fff9430 	.word	0x1fff9430
   14050:	1fff942c 	.word	0x1fff942c

00014054 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   14054:	b500      	push	{lr}
   14056:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14058:	f7ed fbc2 	bl	17e0 <Sys_GetCoreID>
   1405c:	4603      	mov	r3, r0
   1405e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   14060:	4a10      	ldr	r2, [pc, #64]	; (140a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   14062:	9b01      	ldr	r3, [sp, #4]
   14064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14068:	2b00      	cmp	r3, #0
   1406a:	d10d      	bne.n	14088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1406c:	f7ec fc4c 	bl	908 <Adc_schm_read_msr>
   14070:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14072:	9b00      	ldr	r3, [sp, #0]
   14074:	f003 0301 	and.w	r3, r3, #1
   14078:	2b00      	cmp	r3, #0
   1407a:	d100      	bne.n	1407e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1407c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   1407e:	490a      	ldr	r1, [pc, #40]	; (140a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   14080:	9b01      	ldr	r3, [sp, #4]
   14082:	9a00      	ldr	r2, [sp, #0]
   14084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   14088:	4a06      	ldr	r2, [pc, #24]	; (140a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   1408a:	9b01      	ldr	r3, [sp, #4]
   1408c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14090:	1c5a      	adds	r2, r3, #1
   14092:	4904      	ldr	r1, [pc, #16]	; (140a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   14094:	9b01      	ldr	r3, [sp, #4]
   14096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1409a:	bf00      	nop
   1409c:	b003      	add	sp, #12
   1409e:	f85d fb04 	ldr.w	pc, [sp], #4
   140a2:	bf00      	nop
   140a4:	1fff9438 	.word	0x1fff9438
   140a8:	1fff9434 	.word	0x1fff9434

000140ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   140ac:	b500      	push	{lr}
   140ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140b0:	f7ed fb96 	bl	17e0 <Sys_GetCoreID>
   140b4:	4603      	mov	r3, r0
   140b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   140b8:	4a0d      	ldr	r2, [pc, #52]	; (140f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   140ba:	9b01      	ldr	r3, [sp, #4]
   140bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140c0:	1e5a      	subs	r2, r3, #1
   140c2:	490b      	ldr	r1, [pc, #44]	; (140f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   140c4:	9b01      	ldr	r3, [sp, #4]
   140c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   140ca:	4a0a      	ldr	r2, [pc, #40]	; (140f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   140cc:	9b01      	ldr	r3, [sp, #4]
   140ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140d2:	f003 0301 	and.w	r3, r3, #1
   140d6:	2b00      	cmp	r3, #0
   140d8:	d106      	bne.n	140e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   140da:	4a05      	ldr	r2, [pc, #20]	; (140f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   140dc:	9b01      	ldr	r3, [sp, #4]
   140de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140e2:	2b00      	cmp	r3, #0
   140e4:	d100      	bne.n	140e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   140e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   140e8:	bf00      	nop
   140ea:	b003      	add	sp, #12
   140ec:	f85d fb04 	ldr.w	pc, [sp], #4
   140f0:	1fff9438 	.word	0x1fff9438
   140f4:	1fff9434 	.word	0x1fff9434

000140f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   140f8:	b500      	push	{lr}
   140fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140fc:	f7ed fb70 	bl	17e0 <Sys_GetCoreID>
   14100:	4603      	mov	r3, r0
   14102:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   14104:	4a10      	ldr	r2, [pc, #64]	; (14148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   14106:	9b01      	ldr	r3, [sp, #4]
   14108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1410c:	2b00      	cmp	r3, #0
   1410e:	d10d      	bne.n	1412c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14110:	f7ec fbfa 	bl	908 <Adc_schm_read_msr>
   14114:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14116:	9b00      	ldr	r3, [sp, #0]
   14118:	f003 0301 	and.w	r3, r3, #1
   1411c:	2b00      	cmp	r3, #0
   1411e:	d100      	bne.n	14122 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14120:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   14122:	490a      	ldr	r1, [pc, #40]	; (1414c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   14124:	9b01      	ldr	r3, [sp, #4]
   14126:	9a00      	ldr	r2, [sp, #0]
   14128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   1412c:	4a06      	ldr	r2, [pc, #24]	; (14148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   1412e:	9b01      	ldr	r3, [sp, #4]
   14130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14134:	1c5a      	adds	r2, r3, #1
   14136:	4904      	ldr	r1, [pc, #16]	; (14148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   14138:	9b01      	ldr	r3, [sp, #4]
   1413a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1413e:	bf00      	nop
   14140:	b003      	add	sp, #12
   14142:	f85d fb04 	ldr.w	pc, [sp], #4
   14146:	bf00      	nop
   14148:	1fff9440 	.word	0x1fff9440
   1414c:	1fff943c 	.word	0x1fff943c

00014150 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   14150:	b500      	push	{lr}
   14152:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14154:	f7ed fb44 	bl	17e0 <Sys_GetCoreID>
   14158:	4603      	mov	r3, r0
   1415a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   1415c:	4a0d      	ldr	r2, [pc, #52]	; (14194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   1415e:	9b01      	ldr	r3, [sp, #4]
   14160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14164:	1e5a      	subs	r2, r3, #1
   14166:	490b      	ldr	r1, [pc, #44]	; (14194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   14168:	9b01      	ldr	r3, [sp, #4]
   1416a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   1416e:	4a0a      	ldr	r2, [pc, #40]	; (14198 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   14170:	9b01      	ldr	r3, [sp, #4]
   14172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14176:	f003 0301 	and.w	r3, r3, #1
   1417a:	2b00      	cmp	r3, #0
   1417c:	d106      	bne.n	1418c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   1417e:	4a05      	ldr	r2, [pc, #20]	; (14194 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   14180:	9b01      	ldr	r3, [sp, #4]
   14182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14186:	2b00      	cmp	r3, #0
   14188:	d100      	bne.n	1418c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1418a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1418c:	bf00      	nop
   1418e:	b003      	add	sp, #12
   14190:	f85d fb04 	ldr.w	pc, [sp], #4
   14194:	1fff9440 	.word	0x1fff9440
   14198:	1fff943c 	.word	0x1fff943c

0001419c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   1419c:	b500      	push	{lr}
   1419e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141a0:	f7ed fb1e 	bl	17e0 <Sys_GetCoreID>
   141a4:	4603      	mov	r3, r0
   141a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   141a8:	4a10      	ldr	r2, [pc, #64]	; (141ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   141aa:	9b01      	ldr	r3, [sp, #4]
   141ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141b0:	2b00      	cmp	r3, #0
   141b2:	d10d      	bne.n	141d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   141b4:	f7ec fba8 	bl	908 <Adc_schm_read_msr>
   141b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   141ba:	9b00      	ldr	r3, [sp, #0]
   141bc:	f003 0301 	and.w	r3, r3, #1
   141c0:	2b00      	cmp	r3, #0
   141c2:	d100      	bne.n	141c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   141c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   141c6:	490a      	ldr	r1, [pc, #40]	; (141f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   141c8:	9b01      	ldr	r3, [sp, #4]
   141ca:	9a00      	ldr	r2, [sp, #0]
   141cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   141d0:	4a06      	ldr	r2, [pc, #24]	; (141ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   141d2:	9b01      	ldr	r3, [sp, #4]
   141d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141d8:	1c5a      	adds	r2, r3, #1
   141da:	4904      	ldr	r1, [pc, #16]	; (141ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   141dc:	9b01      	ldr	r3, [sp, #4]
   141de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   141e2:	bf00      	nop
   141e4:	b003      	add	sp, #12
   141e6:	f85d fb04 	ldr.w	pc, [sp], #4
   141ea:	bf00      	nop
   141ec:	1fff9448 	.word	0x1fff9448
   141f0:	1fff9444 	.word	0x1fff9444

000141f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   141f4:	b500      	push	{lr}
   141f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141f8:	f7ed faf2 	bl	17e0 <Sys_GetCoreID>
   141fc:	4603      	mov	r3, r0
   141fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   14200:	4a0d      	ldr	r2, [pc, #52]	; (14238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   14202:	9b01      	ldr	r3, [sp, #4]
   14204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14208:	1e5a      	subs	r2, r3, #1
   1420a:	490b      	ldr	r1, [pc, #44]	; (14238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   1420c:	9b01      	ldr	r3, [sp, #4]
   1420e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   14212:	4a0a      	ldr	r2, [pc, #40]	; (1423c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   14214:	9b01      	ldr	r3, [sp, #4]
   14216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1421a:	f003 0301 	and.w	r3, r3, #1
   1421e:	2b00      	cmp	r3, #0
   14220:	d106      	bne.n	14230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   14222:	4a05      	ldr	r2, [pc, #20]	; (14238 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   14224:	9b01      	ldr	r3, [sp, #4]
   14226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1422a:	2b00      	cmp	r3, #0
   1422c:	d100      	bne.n	14230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1422e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14230:	bf00      	nop
   14232:	b003      	add	sp, #12
   14234:	f85d fb04 	ldr.w	pc, [sp], #4
   14238:	1fff9448 	.word	0x1fff9448
   1423c:	1fff9444 	.word	0x1fff9444

00014240 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   14240:	b500      	push	{lr}
   14242:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14244:	f7ed facc 	bl	17e0 <Sys_GetCoreID>
   14248:	4603      	mov	r3, r0
   1424a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   1424c:	4a10      	ldr	r2, [pc, #64]	; (14290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   1424e:	9b01      	ldr	r3, [sp, #4]
   14250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14254:	2b00      	cmp	r3, #0
   14256:	d10d      	bne.n	14274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14258:	f7ec fb56 	bl	908 <Adc_schm_read_msr>
   1425c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1425e:	9b00      	ldr	r3, [sp, #0]
   14260:	f003 0301 	and.w	r3, r3, #1
   14264:	2b00      	cmp	r3, #0
   14266:	d100      	bne.n	1426a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14268:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   1426a:	490a      	ldr	r1, [pc, #40]	; (14294 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   1426c:	9b01      	ldr	r3, [sp, #4]
   1426e:	9a00      	ldr	r2, [sp, #0]
   14270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   14274:	4a06      	ldr	r2, [pc, #24]	; (14290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   14276:	9b01      	ldr	r3, [sp, #4]
   14278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1427c:	1c5a      	adds	r2, r3, #1
   1427e:	4904      	ldr	r1, [pc, #16]	; (14290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   14280:	9b01      	ldr	r3, [sp, #4]
   14282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14286:	bf00      	nop
   14288:	b003      	add	sp, #12
   1428a:	f85d fb04 	ldr.w	pc, [sp], #4
   1428e:	bf00      	nop
   14290:	1fff9450 	.word	0x1fff9450
   14294:	1fff944c 	.word	0x1fff944c

00014298 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   14298:	b500      	push	{lr}
   1429a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1429c:	f7ed faa0 	bl	17e0 <Sys_GetCoreID>
   142a0:	4603      	mov	r3, r0
   142a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   142a4:	4a0d      	ldr	r2, [pc, #52]	; (142dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   142a6:	9b01      	ldr	r3, [sp, #4]
   142a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142ac:	1e5a      	subs	r2, r3, #1
   142ae:	490b      	ldr	r1, [pc, #44]	; (142dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   142b0:	9b01      	ldr	r3, [sp, #4]
   142b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   142b6:	4a0a      	ldr	r2, [pc, #40]	; (142e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   142b8:	9b01      	ldr	r3, [sp, #4]
   142ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142be:	f003 0301 	and.w	r3, r3, #1
   142c2:	2b00      	cmp	r3, #0
   142c4:	d106      	bne.n	142d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   142c6:	4a05      	ldr	r2, [pc, #20]	; (142dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   142c8:	9b01      	ldr	r3, [sp, #4]
   142ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142ce:	2b00      	cmp	r3, #0
   142d0:	d100      	bne.n	142d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   142d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   142d4:	bf00      	nop
   142d6:	b003      	add	sp, #12
   142d8:	f85d fb04 	ldr.w	pc, [sp], #4
   142dc:	1fff9450 	.word	0x1fff9450
   142e0:	1fff944c 	.word	0x1fff944c

000142e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   142e4:	b500      	push	{lr}
   142e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142e8:	f7ed fa7a 	bl	17e0 <Sys_GetCoreID>
   142ec:	4603      	mov	r3, r0
   142ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   142f0:	4a10      	ldr	r2, [pc, #64]	; (14334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   142f2:	9b01      	ldr	r3, [sp, #4]
   142f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142f8:	2b00      	cmp	r3, #0
   142fa:	d10d      	bne.n	14318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   142fc:	f7ec fb04 	bl	908 <Adc_schm_read_msr>
   14300:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14302:	9b00      	ldr	r3, [sp, #0]
   14304:	f003 0301 	and.w	r3, r3, #1
   14308:	2b00      	cmp	r3, #0
   1430a:	d100      	bne.n	1430e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1430c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   1430e:	490a      	ldr	r1, [pc, #40]	; (14338 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   14310:	9b01      	ldr	r3, [sp, #4]
   14312:	9a00      	ldr	r2, [sp, #0]
   14314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   14318:	4a06      	ldr	r2, [pc, #24]	; (14334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   1431a:	9b01      	ldr	r3, [sp, #4]
   1431c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14320:	1c5a      	adds	r2, r3, #1
   14322:	4904      	ldr	r1, [pc, #16]	; (14334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   14324:	9b01      	ldr	r3, [sp, #4]
   14326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1432a:	bf00      	nop
   1432c:	b003      	add	sp, #12
   1432e:	f85d fb04 	ldr.w	pc, [sp], #4
   14332:	bf00      	nop
   14334:	1fff9458 	.word	0x1fff9458
   14338:	1fff9454 	.word	0x1fff9454

0001433c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   1433c:	b500      	push	{lr}
   1433e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14340:	f7ed fa4e 	bl	17e0 <Sys_GetCoreID>
   14344:	4603      	mov	r3, r0
   14346:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   14348:	4a0d      	ldr	r2, [pc, #52]	; (14380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   1434a:	9b01      	ldr	r3, [sp, #4]
   1434c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14350:	1e5a      	subs	r2, r3, #1
   14352:	490b      	ldr	r1, [pc, #44]	; (14380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   14354:	9b01      	ldr	r3, [sp, #4]
   14356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   1435a:	4a0a      	ldr	r2, [pc, #40]	; (14384 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   1435c:	9b01      	ldr	r3, [sp, #4]
   1435e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14362:	f003 0301 	and.w	r3, r3, #1
   14366:	2b00      	cmp	r3, #0
   14368:	d106      	bne.n	14378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   1436a:	4a05      	ldr	r2, [pc, #20]	; (14380 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   1436c:	9b01      	ldr	r3, [sp, #4]
   1436e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14372:	2b00      	cmp	r3, #0
   14374:	d100      	bne.n	14378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14376:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14378:	bf00      	nop
   1437a:	b003      	add	sp, #12
   1437c:	f85d fb04 	ldr.w	pc, [sp], #4
   14380:	1fff9458 	.word	0x1fff9458
   14384:	1fff9454 	.word	0x1fff9454

00014388 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   14388:	b500      	push	{lr}
   1438a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1438c:	f7ed fa28 	bl	17e0 <Sys_GetCoreID>
   14390:	4603      	mov	r3, r0
   14392:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   14394:	4a10      	ldr	r2, [pc, #64]	; (143d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   14396:	9b01      	ldr	r3, [sp, #4]
   14398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1439c:	2b00      	cmp	r3, #0
   1439e:	d10d      	bne.n	143bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   143a0:	f7ec fab2 	bl	908 <Adc_schm_read_msr>
   143a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   143a6:	9b00      	ldr	r3, [sp, #0]
   143a8:	f003 0301 	and.w	r3, r3, #1
   143ac:	2b00      	cmp	r3, #0
   143ae:	d100      	bne.n	143b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   143b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   143b2:	490a      	ldr	r1, [pc, #40]	; (143dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   143b4:	9b01      	ldr	r3, [sp, #4]
   143b6:	9a00      	ldr	r2, [sp, #0]
   143b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   143bc:	4a06      	ldr	r2, [pc, #24]	; (143d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   143be:	9b01      	ldr	r3, [sp, #4]
   143c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143c4:	1c5a      	adds	r2, r3, #1
   143c6:	4904      	ldr	r1, [pc, #16]	; (143d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   143c8:	9b01      	ldr	r3, [sp, #4]
   143ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   143ce:	bf00      	nop
   143d0:	b003      	add	sp, #12
   143d2:	f85d fb04 	ldr.w	pc, [sp], #4
   143d6:	bf00      	nop
   143d8:	1fff9460 	.word	0x1fff9460
   143dc:	1fff945c 	.word	0x1fff945c

000143e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   143e0:	b500      	push	{lr}
   143e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143e4:	f7ed f9fc 	bl	17e0 <Sys_GetCoreID>
   143e8:	4603      	mov	r3, r0
   143ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   143ec:	4a0d      	ldr	r2, [pc, #52]	; (14424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   143ee:	9b01      	ldr	r3, [sp, #4]
   143f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143f4:	1e5a      	subs	r2, r3, #1
   143f6:	490b      	ldr	r1, [pc, #44]	; (14424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   143f8:	9b01      	ldr	r3, [sp, #4]
   143fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   143fe:	4a0a      	ldr	r2, [pc, #40]	; (14428 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   14400:	9b01      	ldr	r3, [sp, #4]
   14402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14406:	f003 0301 	and.w	r3, r3, #1
   1440a:	2b00      	cmp	r3, #0
   1440c:	d106      	bne.n	1441c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   1440e:	4a05      	ldr	r2, [pc, #20]	; (14424 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   14410:	9b01      	ldr	r3, [sp, #4]
   14412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14416:	2b00      	cmp	r3, #0
   14418:	d100      	bne.n	1441c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1441a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1441c:	bf00      	nop
   1441e:	b003      	add	sp, #12
   14420:	f85d fb04 	ldr.w	pc, [sp], #4
   14424:	1fff9460 	.word	0x1fff9460
   14428:	1fff945c 	.word	0x1fff945c

0001442c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   1442c:	b500      	push	{lr}
   1442e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14430:	f7ed f9d6 	bl	17e0 <Sys_GetCoreID>
   14434:	4603      	mov	r3, r0
   14436:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   14438:	4a10      	ldr	r2, [pc, #64]	; (1447c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   1443a:	9b01      	ldr	r3, [sp, #4]
   1443c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14440:	2b00      	cmp	r3, #0
   14442:	d10d      	bne.n	14460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14444:	f7ec fa60 	bl	908 <Adc_schm_read_msr>
   14448:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1444a:	9b00      	ldr	r3, [sp, #0]
   1444c:	f003 0301 	and.w	r3, r3, #1
   14450:	2b00      	cmp	r3, #0
   14452:	d100      	bne.n	14456 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14454:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   14456:	490a      	ldr	r1, [pc, #40]	; (14480 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   14458:	9b01      	ldr	r3, [sp, #4]
   1445a:	9a00      	ldr	r2, [sp, #0]
   1445c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   14460:	4a06      	ldr	r2, [pc, #24]	; (1447c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   14462:	9b01      	ldr	r3, [sp, #4]
   14464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14468:	1c5a      	adds	r2, r3, #1
   1446a:	4904      	ldr	r1, [pc, #16]	; (1447c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   1446c:	9b01      	ldr	r3, [sp, #4]
   1446e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14472:	bf00      	nop
   14474:	b003      	add	sp, #12
   14476:	f85d fb04 	ldr.w	pc, [sp], #4
   1447a:	bf00      	nop
   1447c:	1fff9468 	.word	0x1fff9468
   14480:	1fff9464 	.word	0x1fff9464

00014484 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   14484:	b500      	push	{lr}
   14486:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14488:	f7ed f9aa 	bl	17e0 <Sys_GetCoreID>
   1448c:	4603      	mov	r3, r0
   1448e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   14490:	4a0d      	ldr	r2, [pc, #52]	; (144c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   14492:	9b01      	ldr	r3, [sp, #4]
   14494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14498:	1e5a      	subs	r2, r3, #1
   1449a:	490b      	ldr	r1, [pc, #44]	; (144c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   1449c:	9b01      	ldr	r3, [sp, #4]
   1449e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   144a2:	4a0a      	ldr	r2, [pc, #40]	; (144cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   144a4:	9b01      	ldr	r3, [sp, #4]
   144a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144aa:	f003 0301 	and.w	r3, r3, #1
   144ae:	2b00      	cmp	r3, #0
   144b0:	d106      	bne.n	144c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   144b2:	4a05      	ldr	r2, [pc, #20]	; (144c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   144b4:	9b01      	ldr	r3, [sp, #4]
   144b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144ba:	2b00      	cmp	r3, #0
   144bc:	d100      	bne.n	144c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   144be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   144c0:	bf00      	nop
   144c2:	b003      	add	sp, #12
   144c4:	f85d fb04 	ldr.w	pc, [sp], #4
   144c8:	1fff9468 	.word	0x1fff9468
   144cc:	1fff9464 	.word	0x1fff9464

000144d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   144d0:	b500      	push	{lr}
   144d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144d4:	f7ed f984 	bl	17e0 <Sys_GetCoreID>
   144d8:	4603      	mov	r3, r0
   144da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   144dc:	4a10      	ldr	r2, [pc, #64]	; (14520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   144de:	9b01      	ldr	r3, [sp, #4]
   144e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144e4:	2b00      	cmp	r3, #0
   144e6:	d10d      	bne.n	14504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   144e8:	f7ec fa0e 	bl	908 <Adc_schm_read_msr>
   144ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   144ee:	9b00      	ldr	r3, [sp, #0]
   144f0:	f003 0301 	and.w	r3, r3, #1
   144f4:	2b00      	cmp	r3, #0
   144f6:	d100      	bne.n	144fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   144f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   144fa:	490a      	ldr	r1, [pc, #40]	; (14524 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   144fc:	9b01      	ldr	r3, [sp, #4]
   144fe:	9a00      	ldr	r2, [sp, #0]
   14500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   14504:	4a06      	ldr	r2, [pc, #24]	; (14520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   14506:	9b01      	ldr	r3, [sp, #4]
   14508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1450c:	1c5a      	adds	r2, r3, #1
   1450e:	4904      	ldr	r1, [pc, #16]	; (14520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   14510:	9b01      	ldr	r3, [sp, #4]
   14512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14516:	bf00      	nop
   14518:	b003      	add	sp, #12
   1451a:	f85d fb04 	ldr.w	pc, [sp], #4
   1451e:	bf00      	nop
   14520:	1fff9470 	.word	0x1fff9470
   14524:	1fff946c 	.word	0x1fff946c

00014528 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   14528:	b500      	push	{lr}
   1452a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1452c:	f7ed f958 	bl	17e0 <Sys_GetCoreID>
   14530:	4603      	mov	r3, r0
   14532:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   14534:	4a0d      	ldr	r2, [pc, #52]	; (1456c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   14536:	9b01      	ldr	r3, [sp, #4]
   14538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1453c:	1e5a      	subs	r2, r3, #1
   1453e:	490b      	ldr	r1, [pc, #44]	; (1456c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   14540:	9b01      	ldr	r3, [sp, #4]
   14542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   14546:	4a0a      	ldr	r2, [pc, #40]	; (14570 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   14548:	9b01      	ldr	r3, [sp, #4]
   1454a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1454e:	f003 0301 	and.w	r3, r3, #1
   14552:	2b00      	cmp	r3, #0
   14554:	d106      	bne.n	14564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   14556:	4a05      	ldr	r2, [pc, #20]	; (1456c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   14558:	9b01      	ldr	r3, [sp, #4]
   1455a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1455e:	2b00      	cmp	r3, #0
   14560:	d100      	bne.n	14564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14562:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14564:	bf00      	nop
   14566:	b003      	add	sp, #12
   14568:	f85d fb04 	ldr.w	pc, [sp], #4
   1456c:	1fff9470 	.word	0x1fff9470
   14570:	1fff946c 	.word	0x1fff946c

00014574 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   14574:	b500      	push	{lr}
   14576:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14578:	f7ed f932 	bl	17e0 <Sys_GetCoreID>
   1457c:	4603      	mov	r3, r0
   1457e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   14580:	4a10      	ldr	r2, [pc, #64]	; (145c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   14582:	9b01      	ldr	r3, [sp, #4]
   14584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14588:	2b00      	cmp	r3, #0
   1458a:	d10d      	bne.n	145a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1458c:	f7ec f9bc 	bl	908 <Adc_schm_read_msr>
   14590:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14592:	9b00      	ldr	r3, [sp, #0]
   14594:	f003 0301 	and.w	r3, r3, #1
   14598:	2b00      	cmp	r3, #0
   1459a:	d100      	bne.n	1459e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1459c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   1459e:	490a      	ldr	r1, [pc, #40]	; (145c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   145a0:	9b01      	ldr	r3, [sp, #4]
   145a2:	9a00      	ldr	r2, [sp, #0]
   145a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   145a8:	4a06      	ldr	r2, [pc, #24]	; (145c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   145aa:	9b01      	ldr	r3, [sp, #4]
   145ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145b0:	1c5a      	adds	r2, r3, #1
   145b2:	4904      	ldr	r1, [pc, #16]	; (145c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   145b4:	9b01      	ldr	r3, [sp, #4]
   145b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   145ba:	bf00      	nop
   145bc:	b003      	add	sp, #12
   145be:	f85d fb04 	ldr.w	pc, [sp], #4
   145c2:	bf00      	nop
   145c4:	1fff9478 	.word	0x1fff9478
   145c8:	1fff9474 	.word	0x1fff9474

000145cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   145cc:	b500      	push	{lr}
   145ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145d0:	f7ed f906 	bl	17e0 <Sys_GetCoreID>
   145d4:	4603      	mov	r3, r0
   145d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   145d8:	4a0d      	ldr	r2, [pc, #52]	; (14610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   145da:	9b01      	ldr	r3, [sp, #4]
   145dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145e0:	1e5a      	subs	r2, r3, #1
   145e2:	490b      	ldr	r1, [pc, #44]	; (14610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   145e4:	9b01      	ldr	r3, [sp, #4]
   145e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   145ea:	4a0a      	ldr	r2, [pc, #40]	; (14614 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   145ec:	9b01      	ldr	r3, [sp, #4]
   145ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145f2:	f003 0301 	and.w	r3, r3, #1
   145f6:	2b00      	cmp	r3, #0
   145f8:	d106      	bne.n	14608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   145fa:	4a05      	ldr	r2, [pc, #20]	; (14610 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   145fc:	9b01      	ldr	r3, [sp, #4]
   145fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14602:	2b00      	cmp	r3, #0
   14604:	d100      	bne.n	14608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14606:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14608:	bf00      	nop
   1460a:	b003      	add	sp, #12
   1460c:	f85d fb04 	ldr.w	pc, [sp], #4
   14610:	1fff9478 	.word	0x1fff9478
   14614:	1fff9474 	.word	0x1fff9474

00014618 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   14618:	b500      	push	{lr}
   1461a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1461c:	f7ed f8e0 	bl	17e0 <Sys_GetCoreID>
   14620:	4603      	mov	r3, r0
   14622:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   14624:	4a10      	ldr	r2, [pc, #64]	; (14668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   14626:	9b01      	ldr	r3, [sp, #4]
   14628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1462c:	2b00      	cmp	r3, #0
   1462e:	d10d      	bne.n	1464c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14630:	f7ec f96a 	bl	908 <Adc_schm_read_msr>
   14634:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14636:	9b00      	ldr	r3, [sp, #0]
   14638:	f003 0301 	and.w	r3, r3, #1
   1463c:	2b00      	cmp	r3, #0
   1463e:	d100      	bne.n	14642 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14640:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   14642:	490a      	ldr	r1, [pc, #40]	; (1466c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   14644:	9b01      	ldr	r3, [sp, #4]
   14646:	9a00      	ldr	r2, [sp, #0]
   14648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   1464c:	4a06      	ldr	r2, [pc, #24]	; (14668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   1464e:	9b01      	ldr	r3, [sp, #4]
   14650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14654:	1c5a      	adds	r2, r3, #1
   14656:	4904      	ldr	r1, [pc, #16]	; (14668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   14658:	9b01      	ldr	r3, [sp, #4]
   1465a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1465e:	bf00      	nop
   14660:	b003      	add	sp, #12
   14662:	f85d fb04 	ldr.w	pc, [sp], #4
   14666:	bf00      	nop
   14668:	1fff9480 	.word	0x1fff9480
   1466c:	1fff947c 	.word	0x1fff947c

00014670 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   14670:	b500      	push	{lr}
   14672:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14674:	f7ed f8b4 	bl	17e0 <Sys_GetCoreID>
   14678:	4603      	mov	r3, r0
   1467a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   1467c:	4a0d      	ldr	r2, [pc, #52]	; (146b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   1467e:	9b01      	ldr	r3, [sp, #4]
   14680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14684:	1e5a      	subs	r2, r3, #1
   14686:	490b      	ldr	r1, [pc, #44]	; (146b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   14688:	9b01      	ldr	r3, [sp, #4]
   1468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   1468e:	4a0a      	ldr	r2, [pc, #40]	; (146b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   14690:	9b01      	ldr	r3, [sp, #4]
   14692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14696:	f003 0301 	and.w	r3, r3, #1
   1469a:	2b00      	cmp	r3, #0
   1469c:	d106      	bne.n	146ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   1469e:	4a05      	ldr	r2, [pc, #20]	; (146b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   146a0:	9b01      	ldr	r3, [sp, #4]
   146a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146a6:	2b00      	cmp	r3, #0
   146a8:	d100      	bne.n	146ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   146aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   146ac:	bf00      	nop
   146ae:	b003      	add	sp, #12
   146b0:	f85d fb04 	ldr.w	pc, [sp], #4
   146b4:	1fff9480 	.word	0x1fff9480
   146b8:	1fff947c 	.word	0x1fff947c

000146bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   146bc:	b500      	push	{lr}
   146be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146c0:	f7ed f88e 	bl	17e0 <Sys_GetCoreID>
   146c4:	4603      	mov	r3, r0
   146c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   146c8:	4a10      	ldr	r2, [pc, #64]	; (1470c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   146ca:	9b01      	ldr	r3, [sp, #4]
   146cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146d0:	2b00      	cmp	r3, #0
   146d2:	d10d      	bne.n	146f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   146d4:	f7ec f918 	bl	908 <Adc_schm_read_msr>
   146d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   146da:	9b00      	ldr	r3, [sp, #0]
   146dc:	f003 0301 	and.w	r3, r3, #1
   146e0:	2b00      	cmp	r3, #0
   146e2:	d100      	bne.n	146e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   146e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   146e6:	490a      	ldr	r1, [pc, #40]	; (14710 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   146e8:	9b01      	ldr	r3, [sp, #4]
   146ea:	9a00      	ldr	r2, [sp, #0]
   146ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   146f0:	4a06      	ldr	r2, [pc, #24]	; (1470c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   146f2:	9b01      	ldr	r3, [sp, #4]
   146f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146f8:	1c5a      	adds	r2, r3, #1
   146fa:	4904      	ldr	r1, [pc, #16]	; (1470c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   146fc:	9b01      	ldr	r3, [sp, #4]
   146fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14702:	bf00      	nop
   14704:	b003      	add	sp, #12
   14706:	f85d fb04 	ldr.w	pc, [sp], #4
   1470a:	bf00      	nop
   1470c:	1fff9488 	.word	0x1fff9488
   14710:	1fff9484 	.word	0x1fff9484

00014714 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   14714:	b500      	push	{lr}
   14716:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14718:	f7ed f862 	bl	17e0 <Sys_GetCoreID>
   1471c:	4603      	mov	r3, r0
   1471e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   14720:	4a0d      	ldr	r2, [pc, #52]	; (14758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   14722:	9b01      	ldr	r3, [sp, #4]
   14724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14728:	1e5a      	subs	r2, r3, #1
   1472a:	490b      	ldr	r1, [pc, #44]	; (14758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   1472c:	9b01      	ldr	r3, [sp, #4]
   1472e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   14732:	4a0a      	ldr	r2, [pc, #40]	; (1475c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   14734:	9b01      	ldr	r3, [sp, #4]
   14736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1473a:	f003 0301 	and.w	r3, r3, #1
   1473e:	2b00      	cmp	r3, #0
   14740:	d106      	bne.n	14750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   14742:	4a05      	ldr	r2, [pc, #20]	; (14758 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   14744:	9b01      	ldr	r3, [sp, #4]
   14746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1474a:	2b00      	cmp	r3, #0
   1474c:	d100      	bne.n	14750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1474e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14750:	bf00      	nop
   14752:	b003      	add	sp, #12
   14754:	f85d fb04 	ldr.w	pc, [sp], #4
   14758:	1fff9488 	.word	0x1fff9488
   1475c:	1fff9484 	.word	0x1fff9484

00014760 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   14760:	b500      	push	{lr}
   14762:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14764:	f7ed f83c 	bl	17e0 <Sys_GetCoreID>
   14768:	4603      	mov	r3, r0
   1476a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   1476c:	4a10      	ldr	r2, [pc, #64]	; (147b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1476e:	9b01      	ldr	r3, [sp, #4]
   14770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14774:	2b00      	cmp	r3, #0
   14776:	d10d      	bne.n	14794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14778:	f7ec f8c6 	bl	908 <Adc_schm_read_msr>
   1477c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1477e:	9b00      	ldr	r3, [sp, #0]
   14780:	f003 0301 	and.w	r3, r3, #1
   14784:	2b00      	cmp	r3, #0
   14786:	d100      	bne.n	1478a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14788:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   1478a:	490a      	ldr	r1, [pc, #40]	; (147b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   1478c:	9b01      	ldr	r3, [sp, #4]
   1478e:	9a00      	ldr	r2, [sp, #0]
   14790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   14794:	4a06      	ldr	r2, [pc, #24]	; (147b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   14796:	9b01      	ldr	r3, [sp, #4]
   14798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1479c:	1c5a      	adds	r2, r3, #1
   1479e:	4904      	ldr	r1, [pc, #16]	; (147b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   147a0:	9b01      	ldr	r3, [sp, #4]
   147a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   147a6:	bf00      	nop
   147a8:	b003      	add	sp, #12
   147aa:	f85d fb04 	ldr.w	pc, [sp], #4
   147ae:	bf00      	nop
   147b0:	1fff9490 	.word	0x1fff9490
   147b4:	1fff948c 	.word	0x1fff948c

000147b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   147b8:	b500      	push	{lr}
   147ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147bc:	f7ed f810 	bl	17e0 <Sys_GetCoreID>
   147c0:	4603      	mov	r3, r0
   147c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   147c4:	4a0d      	ldr	r2, [pc, #52]	; (147fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   147c6:	9b01      	ldr	r3, [sp, #4]
   147c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147cc:	1e5a      	subs	r2, r3, #1
   147ce:	490b      	ldr	r1, [pc, #44]	; (147fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   147d0:	9b01      	ldr	r3, [sp, #4]
   147d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   147d6:	4a0a      	ldr	r2, [pc, #40]	; (14800 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   147d8:	9b01      	ldr	r3, [sp, #4]
   147da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147de:	f003 0301 	and.w	r3, r3, #1
   147e2:	2b00      	cmp	r3, #0
   147e4:	d106      	bne.n	147f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   147e6:	4a05      	ldr	r2, [pc, #20]	; (147fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   147e8:	9b01      	ldr	r3, [sp, #4]
   147ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147ee:	2b00      	cmp	r3, #0
   147f0:	d100      	bne.n	147f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   147f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   147f4:	bf00      	nop
   147f6:	b003      	add	sp, #12
   147f8:	f85d fb04 	ldr.w	pc, [sp], #4
   147fc:	1fff9490 	.word	0x1fff9490
   14800:	1fff948c 	.word	0x1fff948c

00014804 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   14804:	b500      	push	{lr}
   14806:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14808:	f7ec ffea 	bl	17e0 <Sys_GetCoreID>
   1480c:	4603      	mov	r3, r0
   1480e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   14810:	4a10      	ldr	r2, [pc, #64]	; (14854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   14812:	9b01      	ldr	r3, [sp, #4]
   14814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14818:	2b00      	cmp	r3, #0
   1481a:	d10d      	bne.n	14838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1481c:	f7ec f874 	bl	908 <Adc_schm_read_msr>
   14820:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14822:	9b00      	ldr	r3, [sp, #0]
   14824:	f003 0301 	and.w	r3, r3, #1
   14828:	2b00      	cmp	r3, #0
   1482a:	d100      	bne.n	1482e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1482c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   1482e:	490a      	ldr	r1, [pc, #40]	; (14858 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   14830:	9b01      	ldr	r3, [sp, #4]
   14832:	9a00      	ldr	r2, [sp, #0]
   14834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   14838:	4a06      	ldr	r2, [pc, #24]	; (14854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   1483a:	9b01      	ldr	r3, [sp, #4]
   1483c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14840:	1c5a      	adds	r2, r3, #1
   14842:	4904      	ldr	r1, [pc, #16]	; (14854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   14844:	9b01      	ldr	r3, [sp, #4]
   14846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1484a:	bf00      	nop
   1484c:	b003      	add	sp, #12
   1484e:	f85d fb04 	ldr.w	pc, [sp], #4
   14852:	bf00      	nop
   14854:	1fff9498 	.word	0x1fff9498
   14858:	1fff9494 	.word	0x1fff9494

0001485c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   1485c:	b500      	push	{lr}
   1485e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14860:	f7ec ffbe 	bl	17e0 <Sys_GetCoreID>
   14864:	4603      	mov	r3, r0
   14866:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   14868:	4a0d      	ldr	r2, [pc, #52]	; (148a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1486a:	9b01      	ldr	r3, [sp, #4]
   1486c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14870:	1e5a      	subs	r2, r3, #1
   14872:	490b      	ldr	r1, [pc, #44]	; (148a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   14874:	9b01      	ldr	r3, [sp, #4]
   14876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   1487a:	4a0a      	ldr	r2, [pc, #40]	; (148a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   1487c:	9b01      	ldr	r3, [sp, #4]
   1487e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14882:	f003 0301 	and.w	r3, r3, #1
   14886:	2b00      	cmp	r3, #0
   14888:	d106      	bne.n	14898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   1488a:	4a05      	ldr	r2, [pc, #20]	; (148a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1488c:	9b01      	ldr	r3, [sp, #4]
   1488e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14892:	2b00      	cmp	r3, #0
   14894:	d100      	bne.n	14898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14896:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14898:	bf00      	nop
   1489a:	b003      	add	sp, #12
   1489c:	f85d fb04 	ldr.w	pc, [sp], #4
   148a0:	1fff9498 	.word	0x1fff9498
   148a4:	1fff9494 	.word	0x1fff9494

000148a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   148a8:	b500      	push	{lr}
   148aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148ac:	f7ec ff98 	bl	17e0 <Sys_GetCoreID>
   148b0:	4603      	mov	r3, r0
   148b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   148b4:	4a10      	ldr	r2, [pc, #64]	; (148f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   148b6:	9b01      	ldr	r3, [sp, #4]
   148b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148bc:	2b00      	cmp	r3, #0
   148be:	d10d      	bne.n	148dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   148c0:	f7ec f822 	bl	908 <Adc_schm_read_msr>
   148c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   148c6:	9b00      	ldr	r3, [sp, #0]
   148c8:	f003 0301 	and.w	r3, r3, #1
   148cc:	2b00      	cmp	r3, #0
   148ce:	d100      	bne.n	148d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   148d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   148d2:	490a      	ldr	r1, [pc, #40]	; (148fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   148d4:	9b01      	ldr	r3, [sp, #4]
   148d6:	9a00      	ldr	r2, [sp, #0]
   148d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   148dc:	4a06      	ldr	r2, [pc, #24]	; (148f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   148de:	9b01      	ldr	r3, [sp, #4]
   148e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148e4:	1c5a      	adds	r2, r3, #1
   148e6:	4904      	ldr	r1, [pc, #16]	; (148f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   148e8:	9b01      	ldr	r3, [sp, #4]
   148ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   148ee:	bf00      	nop
   148f0:	b003      	add	sp, #12
   148f2:	f85d fb04 	ldr.w	pc, [sp], #4
   148f6:	bf00      	nop
   148f8:	1fff94a0 	.word	0x1fff94a0
   148fc:	1fff949c 	.word	0x1fff949c

00014900 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   14900:	b500      	push	{lr}
   14902:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14904:	f7ec ff6c 	bl	17e0 <Sys_GetCoreID>
   14908:	4603      	mov	r3, r0
   1490a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   1490c:	4a0d      	ldr	r2, [pc, #52]	; (14944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   1490e:	9b01      	ldr	r3, [sp, #4]
   14910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14914:	1e5a      	subs	r2, r3, #1
   14916:	490b      	ldr	r1, [pc, #44]	; (14944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   14918:	9b01      	ldr	r3, [sp, #4]
   1491a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   1491e:	4a0a      	ldr	r2, [pc, #40]	; (14948 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   14920:	9b01      	ldr	r3, [sp, #4]
   14922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14926:	f003 0301 	and.w	r3, r3, #1
   1492a:	2b00      	cmp	r3, #0
   1492c:	d106      	bne.n	1493c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   1492e:	4a05      	ldr	r2, [pc, #20]	; (14944 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   14930:	9b01      	ldr	r3, [sp, #4]
   14932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14936:	2b00      	cmp	r3, #0
   14938:	d100      	bne.n	1493c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1493a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1493c:	bf00      	nop
   1493e:	b003      	add	sp, #12
   14940:	f85d fb04 	ldr.w	pc, [sp], #4
   14944:	1fff94a0 	.word	0x1fff94a0
   14948:	1fff949c 	.word	0x1fff949c

0001494c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   1494c:	b500      	push	{lr}
   1494e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14950:	f7ec ff46 	bl	17e0 <Sys_GetCoreID>
   14954:	4603      	mov	r3, r0
   14956:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   14958:	4a10      	ldr	r2, [pc, #64]	; (1499c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1495a:	9b01      	ldr	r3, [sp, #4]
   1495c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14960:	2b00      	cmp	r3, #0
   14962:	d10d      	bne.n	14980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14964:	f7eb ffd0 	bl	908 <Adc_schm_read_msr>
   14968:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1496a:	9b00      	ldr	r3, [sp, #0]
   1496c:	f003 0301 	and.w	r3, r3, #1
   14970:	2b00      	cmp	r3, #0
   14972:	d100      	bne.n	14976 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14974:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   14976:	490a      	ldr	r1, [pc, #40]	; (149a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   14978:	9b01      	ldr	r3, [sp, #4]
   1497a:	9a00      	ldr	r2, [sp, #0]
   1497c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   14980:	4a06      	ldr	r2, [pc, #24]	; (1499c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   14982:	9b01      	ldr	r3, [sp, #4]
   14984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14988:	1c5a      	adds	r2, r3, #1
   1498a:	4904      	ldr	r1, [pc, #16]	; (1499c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1498c:	9b01      	ldr	r3, [sp, #4]
   1498e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14992:	bf00      	nop
   14994:	b003      	add	sp, #12
   14996:	f85d fb04 	ldr.w	pc, [sp], #4
   1499a:	bf00      	nop
   1499c:	1fff94a8 	.word	0x1fff94a8
   149a0:	1fff94a4 	.word	0x1fff94a4

000149a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   149a4:	b500      	push	{lr}
   149a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149a8:	f7ec ff1a 	bl	17e0 <Sys_GetCoreID>
   149ac:	4603      	mov	r3, r0
   149ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   149b0:	4a0d      	ldr	r2, [pc, #52]	; (149e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   149b2:	9b01      	ldr	r3, [sp, #4]
   149b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149b8:	1e5a      	subs	r2, r3, #1
   149ba:	490b      	ldr	r1, [pc, #44]	; (149e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   149bc:	9b01      	ldr	r3, [sp, #4]
   149be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   149c2:	4a0a      	ldr	r2, [pc, #40]	; (149ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   149c4:	9b01      	ldr	r3, [sp, #4]
   149c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149ca:	f003 0301 	and.w	r3, r3, #1
   149ce:	2b00      	cmp	r3, #0
   149d0:	d106      	bne.n	149e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   149d2:	4a05      	ldr	r2, [pc, #20]	; (149e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   149d4:	9b01      	ldr	r3, [sp, #4]
   149d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149da:	2b00      	cmp	r3, #0
   149dc:	d100      	bne.n	149e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   149de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   149e0:	bf00      	nop
   149e2:	b003      	add	sp, #12
   149e4:	f85d fb04 	ldr.w	pc, [sp], #4
   149e8:	1fff94a8 	.word	0x1fff94a8
   149ec:	1fff94a4 	.word	0x1fff94a4

000149f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   149f0:	b500      	push	{lr}
   149f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149f4:	f7ec fef4 	bl	17e0 <Sys_GetCoreID>
   149f8:	4603      	mov	r3, r0
   149fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   149fc:	4a10      	ldr	r2, [pc, #64]	; (14a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   149fe:	9b01      	ldr	r3, [sp, #4]
   14a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a04:	2b00      	cmp	r3, #0
   14a06:	d10d      	bne.n	14a24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a08:	f7eb ff7e 	bl	908 <Adc_schm_read_msr>
   14a0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a0e:	9b00      	ldr	r3, [sp, #0]
   14a10:	f003 0301 	and.w	r3, r3, #1
   14a14:	2b00      	cmp	r3, #0
   14a16:	d100      	bne.n	14a1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   14a1a:	490a      	ldr	r1, [pc, #40]	; (14a44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   14a1c:	9b01      	ldr	r3, [sp, #4]
   14a1e:	9a00      	ldr	r2, [sp, #0]
   14a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   14a24:	4a06      	ldr	r2, [pc, #24]	; (14a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   14a26:	9b01      	ldr	r3, [sp, #4]
   14a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a2c:	1c5a      	adds	r2, r3, #1
   14a2e:	4904      	ldr	r1, [pc, #16]	; (14a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   14a30:	9b01      	ldr	r3, [sp, #4]
   14a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a36:	bf00      	nop
   14a38:	b003      	add	sp, #12
   14a3a:	f85d fb04 	ldr.w	pc, [sp], #4
   14a3e:	bf00      	nop
   14a40:	1fff94b0 	.word	0x1fff94b0
   14a44:	1fff94ac 	.word	0x1fff94ac

00014a48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   14a48:	b500      	push	{lr}
   14a4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a4c:	f7ec fec8 	bl	17e0 <Sys_GetCoreID>
   14a50:	4603      	mov	r3, r0
   14a52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   14a54:	4a0d      	ldr	r2, [pc, #52]	; (14a8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14a56:	9b01      	ldr	r3, [sp, #4]
   14a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a5c:	1e5a      	subs	r2, r3, #1
   14a5e:	490b      	ldr	r1, [pc, #44]	; (14a8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14a60:	9b01      	ldr	r3, [sp, #4]
   14a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   14a66:	4a0a      	ldr	r2, [pc, #40]	; (14a90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   14a68:	9b01      	ldr	r3, [sp, #4]
   14a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a6e:	f003 0301 	and.w	r3, r3, #1
   14a72:	2b00      	cmp	r3, #0
   14a74:	d106      	bne.n	14a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   14a76:	4a05      	ldr	r2, [pc, #20]	; (14a8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14a78:	9b01      	ldr	r3, [sp, #4]
   14a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a7e:	2b00      	cmp	r3, #0
   14a80:	d100      	bne.n	14a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a84:	bf00      	nop
   14a86:	b003      	add	sp, #12
   14a88:	f85d fb04 	ldr.w	pc, [sp], #4
   14a8c:	1fff94b0 	.word	0x1fff94b0
   14a90:	1fff94ac 	.word	0x1fff94ac

00014a94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   14a94:	b500      	push	{lr}
   14a96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a98:	f7ec fea2 	bl	17e0 <Sys_GetCoreID>
   14a9c:	4603      	mov	r3, r0
   14a9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   14aa0:	4a10      	ldr	r2, [pc, #64]	; (14ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14aa2:	9b01      	ldr	r3, [sp, #4]
   14aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aa8:	2b00      	cmp	r3, #0
   14aaa:	d10d      	bne.n	14ac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14aac:	f7eb ff2c 	bl	908 <Adc_schm_read_msr>
   14ab0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ab2:	9b00      	ldr	r3, [sp, #0]
   14ab4:	f003 0301 	and.w	r3, r3, #1
   14ab8:	2b00      	cmp	r3, #0
   14aba:	d100      	bne.n	14abe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14abc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   14abe:	490a      	ldr	r1, [pc, #40]	; (14ae8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   14ac0:	9b01      	ldr	r3, [sp, #4]
   14ac2:	9a00      	ldr	r2, [sp, #0]
   14ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   14ac8:	4a06      	ldr	r2, [pc, #24]	; (14ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14aca:	9b01      	ldr	r3, [sp, #4]
   14acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ad0:	1c5a      	adds	r2, r3, #1
   14ad2:	4904      	ldr	r1, [pc, #16]	; (14ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14ad4:	9b01      	ldr	r3, [sp, #4]
   14ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ada:	bf00      	nop
   14adc:	b003      	add	sp, #12
   14ade:	f85d fb04 	ldr.w	pc, [sp], #4
   14ae2:	bf00      	nop
   14ae4:	1fff94b8 	.word	0x1fff94b8
   14ae8:	1fff94b4 	.word	0x1fff94b4

00014aec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   14aec:	b500      	push	{lr}
   14aee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14af0:	f7ec fe76 	bl	17e0 <Sys_GetCoreID>
   14af4:	4603      	mov	r3, r0
   14af6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   14af8:	4a0d      	ldr	r2, [pc, #52]	; (14b30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14afa:	9b01      	ldr	r3, [sp, #4]
   14afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b00:	1e5a      	subs	r2, r3, #1
   14b02:	490b      	ldr	r1, [pc, #44]	; (14b30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14b04:	9b01      	ldr	r3, [sp, #4]
   14b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   14b0a:	4a0a      	ldr	r2, [pc, #40]	; (14b34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   14b0c:	9b01      	ldr	r3, [sp, #4]
   14b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b12:	f003 0301 	and.w	r3, r3, #1
   14b16:	2b00      	cmp	r3, #0
   14b18:	d106      	bne.n	14b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   14b1a:	4a05      	ldr	r2, [pc, #20]	; (14b30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14b1c:	9b01      	ldr	r3, [sp, #4]
   14b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b22:	2b00      	cmp	r3, #0
   14b24:	d100      	bne.n	14b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b28:	bf00      	nop
   14b2a:	b003      	add	sp, #12
   14b2c:	f85d fb04 	ldr.w	pc, [sp], #4
   14b30:	1fff94b8 	.word	0x1fff94b8
   14b34:	1fff94b4 	.word	0x1fff94b4

00014b38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   14b38:	b500      	push	{lr}
   14b3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b3c:	f7ec fe50 	bl	17e0 <Sys_GetCoreID>
   14b40:	4603      	mov	r3, r0
   14b42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   14b44:	4a10      	ldr	r2, [pc, #64]	; (14b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14b46:	9b01      	ldr	r3, [sp, #4]
   14b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b4c:	2b00      	cmp	r3, #0
   14b4e:	d10d      	bne.n	14b6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b50:	f7eb feda 	bl	908 <Adc_schm_read_msr>
   14b54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b56:	9b00      	ldr	r3, [sp, #0]
   14b58:	f003 0301 	and.w	r3, r3, #1
   14b5c:	2b00      	cmp	r3, #0
   14b5e:	d100      	bne.n	14b62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   14b62:	490a      	ldr	r1, [pc, #40]	; (14b8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   14b64:	9b01      	ldr	r3, [sp, #4]
   14b66:	9a00      	ldr	r2, [sp, #0]
   14b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   14b6c:	4a06      	ldr	r2, [pc, #24]	; (14b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14b6e:	9b01      	ldr	r3, [sp, #4]
   14b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b74:	1c5a      	adds	r2, r3, #1
   14b76:	4904      	ldr	r1, [pc, #16]	; (14b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14b78:	9b01      	ldr	r3, [sp, #4]
   14b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b7e:	bf00      	nop
   14b80:	b003      	add	sp, #12
   14b82:	f85d fb04 	ldr.w	pc, [sp], #4
   14b86:	bf00      	nop
   14b88:	1fff94c0 	.word	0x1fff94c0
   14b8c:	1fff94bc 	.word	0x1fff94bc

00014b90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   14b90:	b500      	push	{lr}
   14b92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b94:	f7ec fe24 	bl	17e0 <Sys_GetCoreID>
   14b98:	4603      	mov	r3, r0
   14b9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   14b9c:	4a0d      	ldr	r2, [pc, #52]	; (14bd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14b9e:	9b01      	ldr	r3, [sp, #4]
   14ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ba4:	1e5a      	subs	r2, r3, #1
   14ba6:	490b      	ldr	r1, [pc, #44]	; (14bd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14ba8:	9b01      	ldr	r3, [sp, #4]
   14baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   14bae:	4a0a      	ldr	r2, [pc, #40]	; (14bd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   14bb0:	9b01      	ldr	r3, [sp, #4]
   14bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bb6:	f003 0301 	and.w	r3, r3, #1
   14bba:	2b00      	cmp	r3, #0
   14bbc:	d106      	bne.n	14bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   14bbe:	4a05      	ldr	r2, [pc, #20]	; (14bd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14bc0:	9b01      	ldr	r3, [sp, #4]
   14bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bc6:	2b00      	cmp	r3, #0
   14bc8:	d100      	bne.n	14bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14bca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14bcc:	bf00      	nop
   14bce:	b003      	add	sp, #12
   14bd0:	f85d fb04 	ldr.w	pc, [sp], #4
   14bd4:	1fff94c0 	.word	0x1fff94c0
   14bd8:	1fff94bc 	.word	0x1fff94bc

00014bdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   14bdc:	b500      	push	{lr}
   14bde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14be0:	f7ec fdfe 	bl	17e0 <Sys_GetCoreID>
   14be4:	4603      	mov	r3, r0
   14be6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   14be8:	4a10      	ldr	r2, [pc, #64]	; (14c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14bea:	9b01      	ldr	r3, [sp, #4]
   14bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bf0:	2b00      	cmp	r3, #0
   14bf2:	d10d      	bne.n	14c10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14bf4:	f7eb fe88 	bl	908 <Adc_schm_read_msr>
   14bf8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14bfa:	9b00      	ldr	r3, [sp, #0]
   14bfc:	f003 0301 	and.w	r3, r3, #1
   14c00:	2b00      	cmp	r3, #0
   14c02:	d100      	bne.n	14c06 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   14c06:	490a      	ldr	r1, [pc, #40]	; (14c30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   14c08:	9b01      	ldr	r3, [sp, #4]
   14c0a:	9a00      	ldr	r2, [sp, #0]
   14c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   14c10:	4a06      	ldr	r2, [pc, #24]	; (14c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14c12:	9b01      	ldr	r3, [sp, #4]
   14c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c18:	1c5a      	adds	r2, r3, #1
   14c1a:	4904      	ldr	r1, [pc, #16]	; (14c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14c1c:	9b01      	ldr	r3, [sp, #4]
   14c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c22:	bf00      	nop
   14c24:	b003      	add	sp, #12
   14c26:	f85d fb04 	ldr.w	pc, [sp], #4
   14c2a:	bf00      	nop
   14c2c:	1fff94c8 	.word	0x1fff94c8
   14c30:	1fff94c4 	.word	0x1fff94c4

00014c34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   14c34:	b500      	push	{lr}
   14c36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c38:	f7ec fdd2 	bl	17e0 <Sys_GetCoreID>
   14c3c:	4603      	mov	r3, r0
   14c3e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   14c40:	4a0d      	ldr	r2, [pc, #52]	; (14c78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14c42:	9b01      	ldr	r3, [sp, #4]
   14c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c48:	1e5a      	subs	r2, r3, #1
   14c4a:	490b      	ldr	r1, [pc, #44]	; (14c78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14c4c:	9b01      	ldr	r3, [sp, #4]
   14c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   14c52:	4a0a      	ldr	r2, [pc, #40]	; (14c7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   14c54:	9b01      	ldr	r3, [sp, #4]
   14c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c5a:	f003 0301 	and.w	r3, r3, #1
   14c5e:	2b00      	cmp	r3, #0
   14c60:	d106      	bne.n	14c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   14c62:	4a05      	ldr	r2, [pc, #20]	; (14c78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14c64:	9b01      	ldr	r3, [sp, #4]
   14c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c6a:	2b00      	cmp	r3, #0
   14c6c:	d100      	bne.n	14c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c70:	bf00      	nop
   14c72:	b003      	add	sp, #12
   14c74:	f85d fb04 	ldr.w	pc, [sp], #4
   14c78:	1fff94c8 	.word	0x1fff94c8
   14c7c:	1fff94c4 	.word	0x1fff94c4

00014c80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   14c80:	b500      	push	{lr}
   14c82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c84:	f7ec fdac 	bl	17e0 <Sys_GetCoreID>
   14c88:	4603      	mov	r3, r0
   14c8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   14c8c:	4a10      	ldr	r2, [pc, #64]	; (14cd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14c8e:	9b01      	ldr	r3, [sp, #4]
   14c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c94:	2b00      	cmp	r3, #0
   14c96:	d10d      	bne.n	14cb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c98:	f7eb fe36 	bl	908 <Adc_schm_read_msr>
   14c9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c9e:	9b00      	ldr	r3, [sp, #0]
   14ca0:	f003 0301 	and.w	r3, r3, #1
   14ca4:	2b00      	cmp	r3, #0
   14ca6:	d100      	bne.n	14caa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ca8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   14caa:	490a      	ldr	r1, [pc, #40]	; (14cd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   14cac:	9b01      	ldr	r3, [sp, #4]
   14cae:	9a00      	ldr	r2, [sp, #0]
   14cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   14cb4:	4a06      	ldr	r2, [pc, #24]	; (14cd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14cb6:	9b01      	ldr	r3, [sp, #4]
   14cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cbc:	1c5a      	adds	r2, r3, #1
   14cbe:	4904      	ldr	r1, [pc, #16]	; (14cd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14cc0:	9b01      	ldr	r3, [sp, #4]
   14cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14cc6:	bf00      	nop
   14cc8:	b003      	add	sp, #12
   14cca:	f85d fb04 	ldr.w	pc, [sp], #4
   14cce:	bf00      	nop
   14cd0:	1fff94d0 	.word	0x1fff94d0
   14cd4:	1fff94cc 	.word	0x1fff94cc

00014cd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   14cd8:	b500      	push	{lr}
   14cda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cdc:	f7ec fd80 	bl	17e0 <Sys_GetCoreID>
   14ce0:	4603      	mov	r3, r0
   14ce2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   14ce4:	4a0d      	ldr	r2, [pc, #52]	; (14d1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14ce6:	9b01      	ldr	r3, [sp, #4]
   14ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cec:	1e5a      	subs	r2, r3, #1
   14cee:	490b      	ldr	r1, [pc, #44]	; (14d1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14cf0:	9b01      	ldr	r3, [sp, #4]
   14cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   14cf6:	4a0a      	ldr	r2, [pc, #40]	; (14d20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   14cf8:	9b01      	ldr	r3, [sp, #4]
   14cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cfe:	f003 0301 	and.w	r3, r3, #1
   14d02:	2b00      	cmp	r3, #0
   14d04:	d106      	bne.n	14d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   14d06:	4a05      	ldr	r2, [pc, #20]	; (14d1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14d08:	9b01      	ldr	r3, [sp, #4]
   14d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d0e:	2b00      	cmp	r3, #0
   14d10:	d100      	bne.n	14d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d14:	bf00      	nop
   14d16:	b003      	add	sp, #12
   14d18:	f85d fb04 	ldr.w	pc, [sp], #4
   14d1c:	1fff94d0 	.word	0x1fff94d0
   14d20:	1fff94cc 	.word	0x1fff94cc

00014d24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   14d24:	b500      	push	{lr}
   14d26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d28:	f7ec fd5a 	bl	17e0 <Sys_GetCoreID>
   14d2c:	4603      	mov	r3, r0
   14d2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   14d30:	4a10      	ldr	r2, [pc, #64]	; (14d74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14d32:	9b01      	ldr	r3, [sp, #4]
   14d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d38:	2b00      	cmp	r3, #0
   14d3a:	d10d      	bne.n	14d58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d3c:	f7eb fde4 	bl	908 <Adc_schm_read_msr>
   14d40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d42:	9b00      	ldr	r3, [sp, #0]
   14d44:	f003 0301 	and.w	r3, r3, #1
   14d48:	2b00      	cmp	r3, #0
   14d4a:	d100      	bne.n	14d4e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   14d4e:	490a      	ldr	r1, [pc, #40]	; (14d78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   14d50:	9b01      	ldr	r3, [sp, #4]
   14d52:	9a00      	ldr	r2, [sp, #0]
   14d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   14d58:	4a06      	ldr	r2, [pc, #24]	; (14d74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14d5a:	9b01      	ldr	r3, [sp, #4]
   14d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d60:	1c5a      	adds	r2, r3, #1
   14d62:	4904      	ldr	r1, [pc, #16]	; (14d74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14d64:	9b01      	ldr	r3, [sp, #4]
   14d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d6a:	bf00      	nop
   14d6c:	b003      	add	sp, #12
   14d6e:	f85d fb04 	ldr.w	pc, [sp], #4
   14d72:	bf00      	nop
   14d74:	1fff94d8 	.word	0x1fff94d8
   14d78:	1fff94d4 	.word	0x1fff94d4

00014d7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   14d7c:	b500      	push	{lr}
   14d7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d80:	f7ec fd2e 	bl	17e0 <Sys_GetCoreID>
   14d84:	4603      	mov	r3, r0
   14d86:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   14d88:	4a0d      	ldr	r2, [pc, #52]	; (14dc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   14d8a:	9b01      	ldr	r3, [sp, #4]
   14d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d90:	1e5a      	subs	r2, r3, #1
   14d92:	490b      	ldr	r1, [pc, #44]	; (14dc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   14d94:	9b01      	ldr	r3, [sp, #4]
   14d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   14d9a:	4a0a      	ldr	r2, [pc, #40]	; (14dc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   14d9c:	9b01      	ldr	r3, [sp, #4]
   14d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14da2:	f003 0301 	and.w	r3, r3, #1
   14da6:	2b00      	cmp	r3, #0
   14da8:	d106      	bne.n	14db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   14daa:	4a05      	ldr	r2, [pc, #20]	; (14dc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   14dac:	9b01      	ldr	r3, [sp, #4]
   14dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14db2:	2b00      	cmp	r3, #0
   14db4:	d100      	bne.n	14db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14db6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14db8:	bf00      	nop
   14dba:	b003      	add	sp, #12
   14dbc:	f85d fb04 	ldr.w	pc, [sp], #4
   14dc0:	1fff94d8 	.word	0x1fff94d8
   14dc4:	1fff94d4 	.word	0x1fff94d4

00014dc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   14dc8:	b500      	push	{lr}
   14dca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dcc:	f7ec fd08 	bl	17e0 <Sys_GetCoreID>
   14dd0:	4603      	mov	r3, r0
   14dd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   14dd4:	4a10      	ldr	r2, [pc, #64]	; (14e18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   14dd6:	9b01      	ldr	r3, [sp, #4]
   14dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ddc:	2b00      	cmp	r3, #0
   14dde:	d10d      	bne.n	14dfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14de0:	f7eb fd92 	bl	908 <Adc_schm_read_msr>
   14de4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14de6:	9b00      	ldr	r3, [sp, #0]
   14de8:	f003 0301 	and.w	r3, r3, #1
   14dec:	2b00      	cmp	r3, #0
   14dee:	d100      	bne.n	14df2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14df0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   14df2:	490a      	ldr	r1, [pc, #40]	; (14e1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   14df4:	9b01      	ldr	r3, [sp, #4]
   14df6:	9a00      	ldr	r2, [sp, #0]
   14df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   14dfc:	4a06      	ldr	r2, [pc, #24]	; (14e18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   14dfe:	9b01      	ldr	r3, [sp, #4]
   14e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e04:	1c5a      	adds	r2, r3, #1
   14e06:	4904      	ldr	r1, [pc, #16]	; (14e18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   14e08:	9b01      	ldr	r3, [sp, #4]
   14e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e0e:	bf00      	nop
   14e10:	b003      	add	sp, #12
   14e12:	f85d fb04 	ldr.w	pc, [sp], #4
   14e16:	bf00      	nop
   14e18:	1fff94e0 	.word	0x1fff94e0
   14e1c:	1fff94dc 	.word	0x1fff94dc

00014e20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   14e20:	b500      	push	{lr}
   14e22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e24:	f7ec fcdc 	bl	17e0 <Sys_GetCoreID>
   14e28:	4603      	mov	r3, r0
   14e2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   14e2c:	4a0d      	ldr	r2, [pc, #52]	; (14e64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   14e2e:	9b01      	ldr	r3, [sp, #4]
   14e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e34:	1e5a      	subs	r2, r3, #1
   14e36:	490b      	ldr	r1, [pc, #44]	; (14e64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   14e38:	9b01      	ldr	r3, [sp, #4]
   14e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   14e3e:	4a0a      	ldr	r2, [pc, #40]	; (14e68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   14e40:	9b01      	ldr	r3, [sp, #4]
   14e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e46:	f003 0301 	and.w	r3, r3, #1
   14e4a:	2b00      	cmp	r3, #0
   14e4c:	d106      	bne.n	14e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   14e4e:	4a05      	ldr	r2, [pc, #20]	; (14e64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   14e50:	9b01      	ldr	r3, [sp, #4]
   14e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e56:	2b00      	cmp	r3, #0
   14e58:	d100      	bne.n	14e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e5c:	bf00      	nop
   14e5e:	b003      	add	sp, #12
   14e60:	f85d fb04 	ldr.w	pc, [sp], #4
   14e64:	1fff94e0 	.word	0x1fff94e0
   14e68:	1fff94dc 	.word	0x1fff94dc

00014e6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   14e6c:	b500      	push	{lr}
   14e6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e70:	f7ec fcb6 	bl	17e0 <Sys_GetCoreID>
   14e74:	4603      	mov	r3, r0
   14e76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   14e78:	4a10      	ldr	r2, [pc, #64]	; (14ebc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   14e7a:	9b01      	ldr	r3, [sp, #4]
   14e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e80:	2b00      	cmp	r3, #0
   14e82:	d10d      	bne.n	14ea0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e84:	f7eb fd40 	bl	908 <Adc_schm_read_msr>
   14e88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e8a:	9b00      	ldr	r3, [sp, #0]
   14e8c:	f003 0301 	and.w	r3, r3, #1
   14e90:	2b00      	cmp	r3, #0
   14e92:	d100      	bne.n	14e96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   14e96:	490a      	ldr	r1, [pc, #40]	; (14ec0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   14e98:	9b01      	ldr	r3, [sp, #4]
   14e9a:	9a00      	ldr	r2, [sp, #0]
   14e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   14ea0:	4a06      	ldr	r2, [pc, #24]	; (14ebc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   14ea2:	9b01      	ldr	r3, [sp, #4]
   14ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ea8:	1c5a      	adds	r2, r3, #1
   14eaa:	4904      	ldr	r1, [pc, #16]	; (14ebc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   14eac:	9b01      	ldr	r3, [sp, #4]
   14eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14eb2:	bf00      	nop
   14eb4:	b003      	add	sp, #12
   14eb6:	f85d fb04 	ldr.w	pc, [sp], #4
   14eba:	bf00      	nop
   14ebc:	1fff94e8 	.word	0x1fff94e8
   14ec0:	1fff94e4 	.word	0x1fff94e4

00014ec4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   14ec4:	b500      	push	{lr}
   14ec6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ec8:	f7ec fc8a 	bl	17e0 <Sys_GetCoreID>
   14ecc:	4603      	mov	r3, r0
   14ece:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   14ed0:	4a0d      	ldr	r2, [pc, #52]	; (14f08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   14ed2:	9b01      	ldr	r3, [sp, #4]
   14ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ed8:	1e5a      	subs	r2, r3, #1
   14eda:	490b      	ldr	r1, [pc, #44]	; (14f08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   14edc:	9b01      	ldr	r3, [sp, #4]
   14ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   14ee2:	4a0a      	ldr	r2, [pc, #40]	; (14f0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   14ee4:	9b01      	ldr	r3, [sp, #4]
   14ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eea:	f003 0301 	and.w	r3, r3, #1
   14eee:	2b00      	cmp	r3, #0
   14ef0:	d106      	bne.n	14f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   14ef2:	4a05      	ldr	r2, [pc, #20]	; (14f08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   14ef4:	9b01      	ldr	r3, [sp, #4]
   14ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14efa:	2b00      	cmp	r3, #0
   14efc:	d100      	bne.n	14f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14efe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f00:	bf00      	nop
   14f02:	b003      	add	sp, #12
   14f04:	f85d fb04 	ldr.w	pc, [sp], #4
   14f08:	1fff94e8 	.word	0x1fff94e8
   14f0c:	1fff94e4 	.word	0x1fff94e4

00014f10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   14f10:	b500      	push	{lr}
   14f12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f14:	f7ec fc64 	bl	17e0 <Sys_GetCoreID>
   14f18:	4603      	mov	r3, r0
   14f1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   14f1c:	4a10      	ldr	r2, [pc, #64]	; (14f60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   14f1e:	9b01      	ldr	r3, [sp, #4]
   14f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f24:	2b00      	cmp	r3, #0
   14f26:	d10d      	bne.n	14f44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f28:	f7eb fcee 	bl	908 <Adc_schm_read_msr>
   14f2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f2e:	9b00      	ldr	r3, [sp, #0]
   14f30:	f003 0301 	and.w	r3, r3, #1
   14f34:	2b00      	cmp	r3, #0
   14f36:	d100      	bne.n	14f3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   14f3a:	490a      	ldr	r1, [pc, #40]	; (14f64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   14f3c:	9b01      	ldr	r3, [sp, #4]
   14f3e:	9a00      	ldr	r2, [sp, #0]
   14f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   14f44:	4a06      	ldr	r2, [pc, #24]	; (14f60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   14f46:	9b01      	ldr	r3, [sp, #4]
   14f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f4c:	1c5a      	adds	r2, r3, #1
   14f4e:	4904      	ldr	r1, [pc, #16]	; (14f60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   14f50:	9b01      	ldr	r3, [sp, #4]
   14f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f56:	bf00      	nop
   14f58:	b003      	add	sp, #12
   14f5a:	f85d fb04 	ldr.w	pc, [sp], #4
   14f5e:	bf00      	nop
   14f60:	1fff94f0 	.word	0x1fff94f0
   14f64:	1fff94ec 	.word	0x1fff94ec

00014f68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   14f68:	b500      	push	{lr}
   14f6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f6c:	f7ec fc38 	bl	17e0 <Sys_GetCoreID>
   14f70:	4603      	mov	r3, r0
   14f72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   14f74:	4a0d      	ldr	r2, [pc, #52]	; (14fac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   14f76:	9b01      	ldr	r3, [sp, #4]
   14f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f7c:	1e5a      	subs	r2, r3, #1
   14f7e:	490b      	ldr	r1, [pc, #44]	; (14fac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   14f80:	9b01      	ldr	r3, [sp, #4]
   14f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   14f86:	4a0a      	ldr	r2, [pc, #40]	; (14fb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   14f88:	9b01      	ldr	r3, [sp, #4]
   14f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f8e:	f003 0301 	and.w	r3, r3, #1
   14f92:	2b00      	cmp	r3, #0
   14f94:	d106      	bne.n	14fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   14f96:	4a05      	ldr	r2, [pc, #20]	; (14fac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   14f98:	9b01      	ldr	r3, [sp, #4]
   14f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f9e:	2b00      	cmp	r3, #0
   14fa0:	d100      	bne.n	14fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14fa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14fa4:	bf00      	nop
   14fa6:	b003      	add	sp, #12
   14fa8:	f85d fb04 	ldr.w	pc, [sp], #4
   14fac:	1fff94f0 	.word	0x1fff94f0
   14fb0:	1fff94ec 	.word	0x1fff94ec

00014fb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   14fb4:	b500      	push	{lr}
   14fb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fb8:	f7ec fc12 	bl	17e0 <Sys_GetCoreID>
   14fbc:	4603      	mov	r3, r0
   14fbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   14fc0:	4a10      	ldr	r2, [pc, #64]	; (15004 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   14fc2:	9b01      	ldr	r3, [sp, #4]
   14fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fc8:	2b00      	cmp	r3, #0
   14fca:	d10d      	bne.n	14fe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14fcc:	f7eb fc9c 	bl	908 <Adc_schm_read_msr>
   14fd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14fd2:	9b00      	ldr	r3, [sp, #0]
   14fd4:	f003 0301 	and.w	r3, r3, #1
   14fd8:	2b00      	cmp	r3, #0
   14fda:	d100      	bne.n	14fde <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14fdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   14fde:	490a      	ldr	r1, [pc, #40]	; (15008 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   14fe0:	9b01      	ldr	r3, [sp, #4]
   14fe2:	9a00      	ldr	r2, [sp, #0]
   14fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   14fe8:	4a06      	ldr	r2, [pc, #24]	; (15004 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   14fea:	9b01      	ldr	r3, [sp, #4]
   14fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ff0:	1c5a      	adds	r2, r3, #1
   14ff2:	4904      	ldr	r1, [pc, #16]	; (15004 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   14ff4:	9b01      	ldr	r3, [sp, #4]
   14ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ffa:	bf00      	nop
   14ffc:	b003      	add	sp, #12
   14ffe:	f85d fb04 	ldr.w	pc, [sp], #4
   15002:	bf00      	nop
   15004:	1fff94f8 	.word	0x1fff94f8
   15008:	1fff94f4 	.word	0x1fff94f4

0001500c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   1500c:	b500      	push	{lr}
   1500e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15010:	f7ec fbe6 	bl	17e0 <Sys_GetCoreID>
   15014:	4603      	mov	r3, r0
   15016:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   15018:	4a0d      	ldr	r2, [pc, #52]	; (15050 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   1501a:	9b01      	ldr	r3, [sp, #4]
   1501c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15020:	1e5a      	subs	r2, r3, #1
   15022:	490b      	ldr	r1, [pc, #44]	; (15050 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   15024:	9b01      	ldr	r3, [sp, #4]
   15026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   1502a:	4a0a      	ldr	r2, [pc, #40]	; (15054 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   1502c:	9b01      	ldr	r3, [sp, #4]
   1502e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15032:	f003 0301 	and.w	r3, r3, #1
   15036:	2b00      	cmp	r3, #0
   15038:	d106      	bne.n	15048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   1503a:	4a05      	ldr	r2, [pc, #20]	; (15050 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   1503c:	9b01      	ldr	r3, [sp, #4]
   1503e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15042:	2b00      	cmp	r3, #0
   15044:	d100      	bne.n	15048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15046:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15048:	bf00      	nop
   1504a:	b003      	add	sp, #12
   1504c:	f85d fb04 	ldr.w	pc, [sp], #4
   15050:	1fff94f8 	.word	0x1fff94f8
   15054:	1fff94f4 	.word	0x1fff94f4

00015058 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   15058:	b500      	push	{lr}
   1505a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1505c:	f7ec fbc0 	bl	17e0 <Sys_GetCoreID>
   15060:	4603      	mov	r3, r0
   15062:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   15064:	4a10      	ldr	r2, [pc, #64]	; (150a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   15066:	9b01      	ldr	r3, [sp, #4]
   15068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1506c:	2b00      	cmp	r3, #0
   1506e:	d10d      	bne.n	1508c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15070:	f7eb fc4a 	bl	908 <Adc_schm_read_msr>
   15074:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15076:	9b00      	ldr	r3, [sp, #0]
   15078:	f003 0301 	and.w	r3, r3, #1
   1507c:	2b00      	cmp	r3, #0
   1507e:	d100      	bne.n	15082 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15080:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   15082:	490a      	ldr	r1, [pc, #40]	; (150ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   15084:	9b01      	ldr	r3, [sp, #4]
   15086:	9a00      	ldr	r2, [sp, #0]
   15088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   1508c:	4a06      	ldr	r2, [pc, #24]	; (150a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   1508e:	9b01      	ldr	r3, [sp, #4]
   15090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15094:	1c5a      	adds	r2, r3, #1
   15096:	4904      	ldr	r1, [pc, #16]	; (150a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   15098:	9b01      	ldr	r3, [sp, #4]
   1509a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1509e:	bf00      	nop
   150a0:	b003      	add	sp, #12
   150a2:	f85d fb04 	ldr.w	pc, [sp], #4
   150a6:	bf00      	nop
   150a8:	1fff9500 	.word	0x1fff9500
   150ac:	1fff94fc 	.word	0x1fff94fc

000150b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   150b0:	b500      	push	{lr}
   150b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150b4:	f7ec fb94 	bl	17e0 <Sys_GetCoreID>
   150b8:	4603      	mov	r3, r0
   150ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   150bc:	4a0d      	ldr	r2, [pc, #52]	; (150f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   150be:	9b01      	ldr	r3, [sp, #4]
   150c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150c4:	1e5a      	subs	r2, r3, #1
   150c6:	490b      	ldr	r1, [pc, #44]	; (150f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   150c8:	9b01      	ldr	r3, [sp, #4]
   150ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   150ce:	4a0a      	ldr	r2, [pc, #40]	; (150f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   150d0:	9b01      	ldr	r3, [sp, #4]
   150d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150d6:	f003 0301 	and.w	r3, r3, #1
   150da:	2b00      	cmp	r3, #0
   150dc:	d106      	bne.n	150ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   150de:	4a05      	ldr	r2, [pc, #20]	; (150f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   150e0:	9b01      	ldr	r3, [sp, #4]
   150e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150e6:	2b00      	cmp	r3, #0
   150e8:	d100      	bne.n	150ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   150ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   150ec:	bf00      	nop
   150ee:	b003      	add	sp, #12
   150f0:	f85d fb04 	ldr.w	pc, [sp], #4
   150f4:	1fff9500 	.word	0x1fff9500
   150f8:	1fff94fc 	.word	0x1fff94fc

000150fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   150fc:	b500      	push	{lr}
   150fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15100:	f7ec fb6e 	bl	17e0 <Sys_GetCoreID>
   15104:	4603      	mov	r3, r0
   15106:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   15108:	4a10      	ldr	r2, [pc, #64]	; (1514c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   1510a:	9b01      	ldr	r3, [sp, #4]
   1510c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15110:	2b00      	cmp	r3, #0
   15112:	d10d      	bne.n	15130 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15114:	f7eb fbf8 	bl	908 <Adc_schm_read_msr>
   15118:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1511a:	9b00      	ldr	r3, [sp, #0]
   1511c:	f003 0301 	and.w	r3, r3, #1
   15120:	2b00      	cmp	r3, #0
   15122:	d100      	bne.n	15126 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15124:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   15126:	490a      	ldr	r1, [pc, #40]	; (15150 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   15128:	9b01      	ldr	r3, [sp, #4]
   1512a:	9a00      	ldr	r2, [sp, #0]
   1512c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   15130:	4a06      	ldr	r2, [pc, #24]	; (1514c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   15132:	9b01      	ldr	r3, [sp, #4]
   15134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15138:	1c5a      	adds	r2, r3, #1
   1513a:	4904      	ldr	r1, [pc, #16]	; (1514c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   1513c:	9b01      	ldr	r3, [sp, #4]
   1513e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15142:	bf00      	nop
   15144:	b003      	add	sp, #12
   15146:	f85d fb04 	ldr.w	pc, [sp], #4
   1514a:	bf00      	nop
   1514c:	1fff9508 	.word	0x1fff9508
   15150:	1fff9504 	.word	0x1fff9504

00015154 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   15154:	b500      	push	{lr}
   15156:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15158:	f7ec fb42 	bl	17e0 <Sys_GetCoreID>
   1515c:	4603      	mov	r3, r0
   1515e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   15160:	4a0d      	ldr	r2, [pc, #52]	; (15198 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   15162:	9b01      	ldr	r3, [sp, #4]
   15164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15168:	1e5a      	subs	r2, r3, #1
   1516a:	490b      	ldr	r1, [pc, #44]	; (15198 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   1516c:	9b01      	ldr	r3, [sp, #4]
   1516e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   15172:	4a0a      	ldr	r2, [pc, #40]	; (1519c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   15174:	9b01      	ldr	r3, [sp, #4]
   15176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1517a:	f003 0301 	and.w	r3, r3, #1
   1517e:	2b00      	cmp	r3, #0
   15180:	d106      	bne.n	15190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   15182:	4a05      	ldr	r2, [pc, #20]	; (15198 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   15184:	9b01      	ldr	r3, [sp, #4]
   15186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1518a:	2b00      	cmp	r3, #0
   1518c:	d100      	bne.n	15190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1518e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15190:	bf00      	nop
   15192:	b003      	add	sp, #12
   15194:	f85d fb04 	ldr.w	pc, [sp], #4
   15198:	1fff9508 	.word	0x1fff9508
   1519c:	1fff9504 	.word	0x1fff9504

000151a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   151a0:	b500      	push	{lr}
   151a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151a4:	f7ec fb1c 	bl	17e0 <Sys_GetCoreID>
   151a8:	4603      	mov	r3, r0
   151aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   151ac:	4a10      	ldr	r2, [pc, #64]	; (151f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   151ae:	9b01      	ldr	r3, [sp, #4]
   151b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151b4:	2b00      	cmp	r3, #0
   151b6:	d10d      	bne.n	151d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   151b8:	f7eb fba6 	bl	908 <Adc_schm_read_msr>
   151bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   151be:	9b00      	ldr	r3, [sp, #0]
   151c0:	f003 0301 	and.w	r3, r3, #1
   151c4:	2b00      	cmp	r3, #0
   151c6:	d100      	bne.n	151ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   151c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   151ca:	490a      	ldr	r1, [pc, #40]	; (151f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   151cc:	9b01      	ldr	r3, [sp, #4]
   151ce:	9a00      	ldr	r2, [sp, #0]
   151d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   151d4:	4a06      	ldr	r2, [pc, #24]	; (151f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   151d6:	9b01      	ldr	r3, [sp, #4]
   151d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151dc:	1c5a      	adds	r2, r3, #1
   151de:	4904      	ldr	r1, [pc, #16]	; (151f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   151e0:	9b01      	ldr	r3, [sp, #4]
   151e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   151e6:	bf00      	nop
   151e8:	b003      	add	sp, #12
   151ea:	f85d fb04 	ldr.w	pc, [sp], #4
   151ee:	bf00      	nop
   151f0:	1fff9510 	.word	0x1fff9510
   151f4:	1fff950c 	.word	0x1fff950c

000151f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   151f8:	b500      	push	{lr}
   151fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151fc:	f7ec faf0 	bl	17e0 <Sys_GetCoreID>
   15200:	4603      	mov	r3, r0
   15202:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   15204:	4a0d      	ldr	r2, [pc, #52]	; (1523c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   15206:	9b01      	ldr	r3, [sp, #4]
   15208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1520c:	1e5a      	subs	r2, r3, #1
   1520e:	490b      	ldr	r1, [pc, #44]	; (1523c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   15210:	9b01      	ldr	r3, [sp, #4]
   15212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   15216:	4a0a      	ldr	r2, [pc, #40]	; (15240 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   15218:	9b01      	ldr	r3, [sp, #4]
   1521a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1521e:	f003 0301 	and.w	r3, r3, #1
   15222:	2b00      	cmp	r3, #0
   15224:	d106      	bne.n	15234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   15226:	4a05      	ldr	r2, [pc, #20]	; (1523c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   15228:	9b01      	ldr	r3, [sp, #4]
   1522a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1522e:	2b00      	cmp	r3, #0
   15230:	d100      	bne.n	15234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15232:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15234:	bf00      	nop
   15236:	b003      	add	sp, #12
   15238:	f85d fb04 	ldr.w	pc, [sp], #4
   1523c:	1fff9510 	.word	0x1fff9510
   15240:	1fff950c 	.word	0x1fff950c

00015244 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   15244:	b500      	push	{lr}
   15246:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15248:	f7ec faca 	bl	17e0 <Sys_GetCoreID>
   1524c:	4603      	mov	r3, r0
   1524e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   15250:	4a10      	ldr	r2, [pc, #64]	; (15294 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   15252:	9b01      	ldr	r3, [sp, #4]
   15254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15258:	2b00      	cmp	r3, #0
   1525a:	d10d      	bne.n	15278 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1525c:	f7eb fb54 	bl	908 <Adc_schm_read_msr>
   15260:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15262:	9b00      	ldr	r3, [sp, #0]
   15264:	f003 0301 	and.w	r3, r3, #1
   15268:	2b00      	cmp	r3, #0
   1526a:	d100      	bne.n	1526e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1526c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   1526e:	490a      	ldr	r1, [pc, #40]	; (15298 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   15270:	9b01      	ldr	r3, [sp, #4]
   15272:	9a00      	ldr	r2, [sp, #0]
   15274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   15278:	4a06      	ldr	r2, [pc, #24]	; (15294 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   1527a:	9b01      	ldr	r3, [sp, #4]
   1527c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15280:	1c5a      	adds	r2, r3, #1
   15282:	4904      	ldr	r1, [pc, #16]	; (15294 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   15284:	9b01      	ldr	r3, [sp, #4]
   15286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1528a:	bf00      	nop
   1528c:	b003      	add	sp, #12
   1528e:	f85d fb04 	ldr.w	pc, [sp], #4
   15292:	bf00      	nop
   15294:	1fff9518 	.word	0x1fff9518
   15298:	1fff9514 	.word	0x1fff9514

0001529c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   1529c:	b500      	push	{lr}
   1529e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152a0:	f7ec fa9e 	bl	17e0 <Sys_GetCoreID>
   152a4:	4603      	mov	r3, r0
   152a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   152a8:	4a0d      	ldr	r2, [pc, #52]	; (152e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   152aa:	9b01      	ldr	r3, [sp, #4]
   152ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152b0:	1e5a      	subs	r2, r3, #1
   152b2:	490b      	ldr	r1, [pc, #44]	; (152e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   152b4:	9b01      	ldr	r3, [sp, #4]
   152b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   152ba:	4a0a      	ldr	r2, [pc, #40]	; (152e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   152bc:	9b01      	ldr	r3, [sp, #4]
   152be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152c2:	f003 0301 	and.w	r3, r3, #1
   152c6:	2b00      	cmp	r3, #0
   152c8:	d106      	bne.n	152d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   152ca:	4a05      	ldr	r2, [pc, #20]	; (152e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   152cc:	9b01      	ldr	r3, [sp, #4]
   152ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152d2:	2b00      	cmp	r3, #0
   152d4:	d100      	bne.n	152d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   152d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   152d8:	bf00      	nop
   152da:	b003      	add	sp, #12
   152dc:	f85d fb04 	ldr.w	pc, [sp], #4
   152e0:	1fff9518 	.word	0x1fff9518
   152e4:	1fff9514 	.word	0x1fff9514

000152e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   152e8:	b500      	push	{lr}
   152ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152ec:	f7ec fa78 	bl	17e0 <Sys_GetCoreID>
   152f0:	4603      	mov	r3, r0
   152f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   152f4:	4a10      	ldr	r2, [pc, #64]	; (15338 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   152f6:	9b01      	ldr	r3, [sp, #4]
   152f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152fc:	2b00      	cmp	r3, #0
   152fe:	d10d      	bne.n	1531c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15300:	f7eb fb02 	bl	908 <Adc_schm_read_msr>
   15304:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15306:	9b00      	ldr	r3, [sp, #0]
   15308:	f003 0301 	and.w	r3, r3, #1
   1530c:	2b00      	cmp	r3, #0
   1530e:	d100      	bne.n	15312 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15310:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   15312:	490a      	ldr	r1, [pc, #40]	; (1533c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   15314:	9b01      	ldr	r3, [sp, #4]
   15316:	9a00      	ldr	r2, [sp, #0]
   15318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   1531c:	4a06      	ldr	r2, [pc, #24]	; (15338 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   1531e:	9b01      	ldr	r3, [sp, #4]
   15320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15324:	1c5a      	adds	r2, r3, #1
   15326:	4904      	ldr	r1, [pc, #16]	; (15338 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   15328:	9b01      	ldr	r3, [sp, #4]
   1532a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1532e:	bf00      	nop
   15330:	b003      	add	sp, #12
   15332:	f85d fb04 	ldr.w	pc, [sp], #4
   15336:	bf00      	nop
   15338:	1fff9520 	.word	0x1fff9520
   1533c:	1fff951c 	.word	0x1fff951c

00015340 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   15340:	b500      	push	{lr}
   15342:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15344:	f7ec fa4c 	bl	17e0 <Sys_GetCoreID>
   15348:	4603      	mov	r3, r0
   1534a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   1534c:	4a0d      	ldr	r2, [pc, #52]	; (15384 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   1534e:	9b01      	ldr	r3, [sp, #4]
   15350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15354:	1e5a      	subs	r2, r3, #1
   15356:	490b      	ldr	r1, [pc, #44]	; (15384 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   15358:	9b01      	ldr	r3, [sp, #4]
   1535a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   1535e:	4a0a      	ldr	r2, [pc, #40]	; (15388 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   15360:	9b01      	ldr	r3, [sp, #4]
   15362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15366:	f003 0301 	and.w	r3, r3, #1
   1536a:	2b00      	cmp	r3, #0
   1536c:	d106      	bne.n	1537c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   1536e:	4a05      	ldr	r2, [pc, #20]	; (15384 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   15370:	9b01      	ldr	r3, [sp, #4]
   15372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15376:	2b00      	cmp	r3, #0
   15378:	d100      	bne.n	1537c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1537a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1537c:	bf00      	nop
   1537e:	b003      	add	sp, #12
   15380:	f85d fb04 	ldr.w	pc, [sp], #4
   15384:	1fff9520 	.word	0x1fff9520
   15388:	1fff951c 	.word	0x1fff951c

0001538c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   1538c:	b500      	push	{lr}
   1538e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15390:	f7ec fa26 	bl	17e0 <Sys_GetCoreID>
   15394:	4603      	mov	r3, r0
   15396:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
   15398:	4a10      	ldr	r2, [pc, #64]	; (153dc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   1539a:	9b01      	ldr	r3, [sp, #4]
   1539c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153a0:	2b00      	cmp	r3, #0
   153a2:	d10d      	bne.n	153c0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   153a4:	f7eb fab9 	bl	91a <Dio_schm_read_msr>
   153a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   153aa:	9b00      	ldr	r3, [sp, #0]
   153ac:	f003 0301 	and.w	r3, r3, #1
   153b0:	2b00      	cmp	r3, #0
   153b2:	d100      	bne.n	153b6 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   153b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   153b6:	490a      	ldr	r1, [pc, #40]	; (153e0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
   153b8:	9b01      	ldr	r3, [sp, #4]
   153ba:	9a00      	ldr	r2, [sp, #0]
   153bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
   153c0:	4a06      	ldr	r2, [pc, #24]	; (153dc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   153c2:	9b01      	ldr	r3, [sp, #4]
   153c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153c8:	1c5a      	adds	r2, r3, #1
   153ca:	4904      	ldr	r1, [pc, #16]	; (153dc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   153cc:	9b01      	ldr	r3, [sp, #4]
   153ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   153d2:	bf00      	nop
   153d4:	b003      	add	sp, #12
   153d6:	f85d fb04 	ldr.w	pc, [sp], #4
   153da:	bf00      	nop
   153dc:	1fff9528 	.word	0x1fff9528
   153e0:	1fff9524 	.word	0x1fff9524

000153e4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   153e4:	b500      	push	{lr}
   153e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153e8:	f7ec f9fa 	bl	17e0 <Sys_GetCoreID>
   153ec:	4603      	mov	r3, r0
   153ee:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
   153f0:	4a0d      	ldr	r2, [pc, #52]	; (15428 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   153f2:	9b01      	ldr	r3, [sp, #4]
   153f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153f8:	1e5a      	subs	r2, r3, #1
   153fa:	490b      	ldr	r1, [pc, #44]	; (15428 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   153fc:	9b01      	ldr	r3, [sp, #4]
   153fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   15402:	4a0a      	ldr	r2, [pc, #40]	; (1542c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
   15404:	9b01      	ldr	r3, [sp, #4]
   15406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1540a:	f003 0301 	and.w	r3, r3, #1
   1540e:	2b00      	cmp	r3, #0
   15410:	d106      	bne.n	15420 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
   15412:	4a05      	ldr	r2, [pc, #20]	; (15428 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   15414:	9b01      	ldr	r3, [sp, #4]
   15416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1541a:	2b00      	cmp	r3, #0
   1541c:	d100      	bne.n	15420 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1541e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15420:	bf00      	nop
   15422:	b003      	add	sp, #12
   15424:	f85d fb04 	ldr.w	pc, [sp], #4
   15428:	1fff9528 	.word	0x1fff9528
   1542c:	1fff9524 	.word	0x1fff9524

00015430 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   15430:	b500      	push	{lr}
   15432:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15434:	f7ec f9d4 	bl	17e0 <Sys_GetCoreID>
   15438:	4603      	mov	r3, r0
   1543a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
   1543c:	4a10      	ldr	r2, [pc, #64]	; (15480 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   1543e:	9b01      	ldr	r3, [sp, #4]
   15440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15444:	2b00      	cmp	r3, #0
   15446:	d10d      	bne.n	15464 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15448:	f7eb fa67 	bl	91a <Dio_schm_read_msr>
   1544c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1544e:	9b00      	ldr	r3, [sp, #0]
   15450:	f003 0301 	and.w	r3, r3, #1
   15454:	2b00      	cmp	r3, #0
   15456:	d100      	bne.n	1545a <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15458:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1545a:	490a      	ldr	r1, [pc, #40]	; (15484 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
   1545c:	9b01      	ldr	r3, [sp, #4]
   1545e:	9a00      	ldr	r2, [sp, #0]
   15460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
   15464:	4a06      	ldr	r2, [pc, #24]	; (15480 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   15466:	9b01      	ldr	r3, [sp, #4]
   15468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1546c:	1c5a      	adds	r2, r3, #1
   1546e:	4904      	ldr	r1, [pc, #16]	; (15480 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   15470:	9b01      	ldr	r3, [sp, #4]
   15472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15476:	bf00      	nop
   15478:	b003      	add	sp, #12
   1547a:	f85d fb04 	ldr.w	pc, [sp], #4
   1547e:	bf00      	nop
   15480:	1fff9530 	.word	0x1fff9530
   15484:	1fff952c 	.word	0x1fff952c

00015488 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   15488:	b500      	push	{lr}
   1548a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1548c:	f7ec f9a8 	bl	17e0 <Sys_GetCoreID>
   15490:	4603      	mov	r3, r0
   15492:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
   15494:	4a0d      	ldr	r2, [pc, #52]	; (154cc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   15496:	9b01      	ldr	r3, [sp, #4]
   15498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1549c:	1e5a      	subs	r2, r3, #1
   1549e:	490b      	ldr	r1, [pc, #44]	; (154cc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   154a0:	9b01      	ldr	r3, [sp, #4]
   154a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   154a6:	4a0a      	ldr	r2, [pc, #40]	; (154d0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
   154a8:	9b01      	ldr	r3, [sp, #4]
   154aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154ae:	f003 0301 	and.w	r3, r3, #1
   154b2:	2b00      	cmp	r3, #0
   154b4:	d106      	bne.n	154c4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
   154b6:	4a05      	ldr	r2, [pc, #20]	; (154cc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   154b8:	9b01      	ldr	r3, [sp, #4]
   154ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154be:	2b00      	cmp	r3, #0
   154c0:	d100      	bne.n	154c4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   154c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   154c4:	bf00      	nop
   154c6:	b003      	add	sp, #12
   154c8:	f85d fb04 	ldr.w	pc, [sp], #4
   154cc:	1fff9530 	.word	0x1fff9530
   154d0:	1fff952c 	.word	0x1fff952c

000154d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   154d4:	b500      	push	{lr}
   154d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154d8:	f7ec f982 	bl	17e0 <Sys_GetCoreID>
   154dc:	4603      	mov	r3, r0
   154de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   154e0:	4a10      	ldr	r2, [pc, #64]	; (15524 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   154e2:	9b01      	ldr	r3, [sp, #4]
   154e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154e8:	2b00      	cmp	r3, #0
   154ea:	d10d      	bne.n	15508 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   154ec:	f7eb fa1e 	bl	92c <Mcu_schm_read_msr>
   154f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   154f2:	9b00      	ldr	r3, [sp, #0]
   154f4:	f003 0301 	and.w	r3, r3, #1
   154f8:	2b00      	cmp	r3, #0
   154fa:	d100      	bne.n	154fe <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   154fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   154fe:	490a      	ldr	r1, [pc, #40]	; (15528 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   15500:	9b01      	ldr	r3, [sp, #4]
   15502:	9a00      	ldr	r2, [sp, #0]
   15504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   15508:	4a06      	ldr	r2, [pc, #24]	; (15524 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   1550a:	9b01      	ldr	r3, [sp, #4]
   1550c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15510:	1c5a      	adds	r2, r3, #1
   15512:	4904      	ldr	r1, [pc, #16]	; (15524 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   15514:	9b01      	ldr	r3, [sp, #4]
   15516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1551a:	bf00      	nop
   1551c:	b003      	add	sp, #12
   1551e:	f85d fb04 	ldr.w	pc, [sp], #4
   15522:	bf00      	nop
   15524:	1fff9538 	.word	0x1fff9538
   15528:	1fff9534 	.word	0x1fff9534

0001552c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   1552c:	b500      	push	{lr}
   1552e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15530:	f7ec f956 	bl	17e0 <Sys_GetCoreID>
   15534:	4603      	mov	r3, r0
   15536:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   15538:	4a0d      	ldr	r2, [pc, #52]	; (15570 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   1553a:	9b01      	ldr	r3, [sp, #4]
   1553c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15540:	1e5a      	subs	r2, r3, #1
   15542:	490b      	ldr	r1, [pc, #44]	; (15570 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   15544:	9b01      	ldr	r3, [sp, #4]
   15546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1554a:	4a0a      	ldr	r2, [pc, #40]	; (15574 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   1554c:	9b01      	ldr	r3, [sp, #4]
   1554e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15552:	f003 0301 	and.w	r3, r3, #1
   15556:	2b00      	cmp	r3, #0
   15558:	d106      	bne.n	15568 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   1555a:	4a05      	ldr	r2, [pc, #20]	; (15570 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   1555c:	9b01      	ldr	r3, [sp, #4]
   1555e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15562:	2b00      	cmp	r3, #0
   15564:	d100      	bne.n	15568 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15566:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15568:	bf00      	nop
   1556a:	b003      	add	sp, #12
   1556c:	f85d fb04 	ldr.w	pc, [sp], #4
   15570:	1fff9538 	.word	0x1fff9538
   15574:	1fff9534 	.word	0x1fff9534

00015578 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   15578:	b500      	push	{lr}
   1557a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1557c:	f7ec f930 	bl	17e0 <Sys_GetCoreID>
   15580:	4603      	mov	r3, r0
   15582:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   15584:	4a10      	ldr	r2, [pc, #64]	; (155c8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   15586:	9b01      	ldr	r3, [sp, #4]
   15588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1558c:	2b00      	cmp	r3, #0
   1558e:	d10d      	bne.n	155ac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15590:	f7eb f9cc 	bl	92c <Mcu_schm_read_msr>
   15594:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15596:	9b00      	ldr	r3, [sp, #0]
   15598:	f003 0301 	and.w	r3, r3, #1
   1559c:	2b00      	cmp	r3, #0
   1559e:	d100      	bne.n	155a2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   155a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   155a2:	490a      	ldr	r1, [pc, #40]	; (155cc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   155a4:	9b01      	ldr	r3, [sp, #4]
   155a6:	9a00      	ldr	r2, [sp, #0]
   155a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   155ac:	4a06      	ldr	r2, [pc, #24]	; (155c8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   155ae:	9b01      	ldr	r3, [sp, #4]
   155b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155b4:	1c5a      	adds	r2, r3, #1
   155b6:	4904      	ldr	r1, [pc, #16]	; (155c8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   155b8:	9b01      	ldr	r3, [sp, #4]
   155ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   155be:	bf00      	nop
   155c0:	b003      	add	sp, #12
   155c2:	f85d fb04 	ldr.w	pc, [sp], #4
   155c6:	bf00      	nop
   155c8:	1fff9540 	.word	0x1fff9540
   155cc:	1fff953c 	.word	0x1fff953c

000155d0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   155d0:	b500      	push	{lr}
   155d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155d4:	f7ec f904 	bl	17e0 <Sys_GetCoreID>
   155d8:	4603      	mov	r3, r0
   155da:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   155dc:	4a0d      	ldr	r2, [pc, #52]	; (15614 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   155de:	9b01      	ldr	r3, [sp, #4]
   155e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155e4:	1e5a      	subs	r2, r3, #1
   155e6:	490b      	ldr	r1, [pc, #44]	; (15614 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   155e8:	9b01      	ldr	r3, [sp, #4]
   155ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   155ee:	4a0a      	ldr	r2, [pc, #40]	; (15618 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   155f0:	9b01      	ldr	r3, [sp, #4]
   155f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155f6:	f003 0301 	and.w	r3, r3, #1
   155fa:	2b00      	cmp	r3, #0
   155fc:	d106      	bne.n	1560c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   155fe:	4a05      	ldr	r2, [pc, #20]	; (15614 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   15600:	9b01      	ldr	r3, [sp, #4]
   15602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15606:	2b00      	cmp	r3, #0
   15608:	d100      	bne.n	1560c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1560a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1560c:	bf00      	nop
   1560e:	b003      	add	sp, #12
   15610:	f85d fb04 	ldr.w	pc, [sp], #4
   15614:	1fff9540 	.word	0x1fff9540
   15618:	1fff953c 	.word	0x1fff953c

0001561c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   1561c:	b500      	push	{lr}
   1561e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15620:	f7ec f8de 	bl	17e0 <Sys_GetCoreID>
   15624:	4603      	mov	r3, r0
   15626:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   15628:	4a10      	ldr	r2, [pc, #64]	; (1566c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   1562a:	9b01      	ldr	r3, [sp, #4]
   1562c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15630:	2b00      	cmp	r3, #0
   15632:	d10d      	bne.n	15650 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15634:	f7eb f97a 	bl	92c <Mcu_schm_read_msr>
   15638:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1563a:	9b00      	ldr	r3, [sp, #0]
   1563c:	f003 0301 	and.w	r3, r3, #1
   15640:	2b00      	cmp	r3, #0
   15642:	d100      	bne.n	15646 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15644:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   15646:	490a      	ldr	r1, [pc, #40]	; (15670 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   15648:	9b01      	ldr	r3, [sp, #4]
   1564a:	9a00      	ldr	r2, [sp, #0]
   1564c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   15650:	4a06      	ldr	r2, [pc, #24]	; (1566c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   15652:	9b01      	ldr	r3, [sp, #4]
   15654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15658:	1c5a      	adds	r2, r3, #1
   1565a:	4904      	ldr	r1, [pc, #16]	; (1566c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   1565c:	9b01      	ldr	r3, [sp, #4]
   1565e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15662:	bf00      	nop
   15664:	b003      	add	sp, #12
   15666:	f85d fb04 	ldr.w	pc, [sp], #4
   1566a:	bf00      	nop
   1566c:	1fff9548 	.word	0x1fff9548
   15670:	1fff9544 	.word	0x1fff9544

00015674 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   15674:	b500      	push	{lr}
   15676:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15678:	f7ec f8b2 	bl	17e0 <Sys_GetCoreID>
   1567c:	4603      	mov	r3, r0
   1567e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   15680:	4a0d      	ldr	r2, [pc, #52]	; (156b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   15682:	9b01      	ldr	r3, [sp, #4]
   15684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15688:	1e5a      	subs	r2, r3, #1
   1568a:	490b      	ldr	r1, [pc, #44]	; (156b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   1568c:	9b01      	ldr	r3, [sp, #4]
   1568e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   15692:	4a0a      	ldr	r2, [pc, #40]	; (156bc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   15694:	9b01      	ldr	r3, [sp, #4]
   15696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1569a:	f003 0301 	and.w	r3, r3, #1
   1569e:	2b00      	cmp	r3, #0
   156a0:	d106      	bne.n	156b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   156a2:	4a05      	ldr	r2, [pc, #20]	; (156b8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   156a4:	9b01      	ldr	r3, [sp, #4]
   156a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156aa:	2b00      	cmp	r3, #0
   156ac:	d100      	bne.n	156b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   156ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   156b0:	bf00      	nop
   156b2:	b003      	add	sp, #12
   156b4:	f85d fb04 	ldr.w	pc, [sp], #4
   156b8:	1fff9548 	.word	0x1fff9548
   156bc:	1fff9544 	.word	0x1fff9544

000156c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   156c0:	b500      	push	{lr}
   156c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156c4:	f7ec f88c 	bl	17e0 <Sys_GetCoreID>
   156c8:	4603      	mov	r3, r0
   156ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   156cc:	4a10      	ldr	r2, [pc, #64]	; (15710 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   156ce:	9b01      	ldr	r3, [sp, #4]
   156d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156d4:	2b00      	cmp	r3, #0
   156d6:	d10d      	bne.n	156f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   156d8:	f7eb f931 	bl	93e <Port_schm_read_msr>
   156dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   156de:	9b00      	ldr	r3, [sp, #0]
   156e0:	f003 0301 	and.w	r3, r3, #1
   156e4:	2b00      	cmp	r3, #0
   156e6:	d100      	bne.n	156ea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   156e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   156ea:	490a      	ldr	r1, [pc, #40]	; (15714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   156ec:	9b01      	ldr	r3, [sp, #4]
   156ee:	9a00      	ldr	r2, [sp, #0]
   156f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   156f4:	4a06      	ldr	r2, [pc, #24]	; (15710 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   156f6:	9b01      	ldr	r3, [sp, #4]
   156f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156fc:	1c5a      	adds	r2, r3, #1
   156fe:	4904      	ldr	r1, [pc, #16]	; (15710 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   15700:	9b01      	ldr	r3, [sp, #4]
   15702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15706:	bf00      	nop
   15708:	b003      	add	sp, #12
   1570a:	f85d fb04 	ldr.w	pc, [sp], #4
   1570e:	bf00      	nop
   15710:	1fff9550 	.word	0x1fff9550
   15714:	1fff954c 	.word	0x1fff954c

00015718 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   15718:	b500      	push	{lr}
   1571a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1571c:	f7ec f860 	bl	17e0 <Sys_GetCoreID>
   15720:	4603      	mov	r3, r0
   15722:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   15724:	4a0d      	ldr	r2, [pc, #52]	; (1575c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   15726:	9b01      	ldr	r3, [sp, #4]
   15728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1572c:	1e5a      	subs	r2, r3, #1
   1572e:	490b      	ldr	r1, [pc, #44]	; (1575c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   15730:	9b01      	ldr	r3, [sp, #4]
   15732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   15736:	4a0a      	ldr	r2, [pc, #40]	; (15760 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   15738:	9b01      	ldr	r3, [sp, #4]
   1573a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1573e:	f003 0301 	and.w	r3, r3, #1
   15742:	2b00      	cmp	r3, #0
   15744:	d106      	bne.n	15754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   15746:	4a05      	ldr	r2, [pc, #20]	; (1575c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   15748:	9b01      	ldr	r3, [sp, #4]
   1574a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1574e:	2b00      	cmp	r3, #0
   15750:	d100      	bne.n	15754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15752:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15754:	bf00      	nop
   15756:	b003      	add	sp, #12
   15758:	f85d fb04 	ldr.w	pc, [sp], #4
   1575c:	1fff9550 	.word	0x1fff9550
   15760:	1fff954c 	.word	0x1fff954c

00015764 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   15764:	b500      	push	{lr}
   15766:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15768:	f7ec f83a 	bl	17e0 <Sys_GetCoreID>
   1576c:	4603      	mov	r3, r0
   1576e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   15770:	4a10      	ldr	r2, [pc, #64]	; (157b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   15772:	9b01      	ldr	r3, [sp, #4]
   15774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15778:	2b00      	cmp	r3, #0
   1577a:	d10d      	bne.n	15798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1577c:	f7eb f8df 	bl	93e <Port_schm_read_msr>
   15780:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15782:	9b00      	ldr	r3, [sp, #0]
   15784:	f003 0301 	and.w	r3, r3, #1
   15788:	2b00      	cmp	r3, #0
   1578a:	d100      	bne.n	1578e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1578c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1578e:	490a      	ldr	r1, [pc, #40]	; (157b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   15790:	9b01      	ldr	r3, [sp, #4]
   15792:	9a00      	ldr	r2, [sp, #0]
   15794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   15798:	4a06      	ldr	r2, [pc, #24]	; (157b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   1579a:	9b01      	ldr	r3, [sp, #4]
   1579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157a0:	1c5a      	adds	r2, r3, #1
   157a2:	4904      	ldr	r1, [pc, #16]	; (157b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   157a4:	9b01      	ldr	r3, [sp, #4]
   157a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   157aa:	bf00      	nop
   157ac:	b003      	add	sp, #12
   157ae:	f85d fb04 	ldr.w	pc, [sp], #4
   157b2:	bf00      	nop
   157b4:	1fff9558 	.word	0x1fff9558
   157b8:	1fff9554 	.word	0x1fff9554

000157bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   157bc:	b500      	push	{lr}
   157be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157c0:	f7ec f80e 	bl	17e0 <Sys_GetCoreID>
   157c4:	4603      	mov	r3, r0
   157c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   157c8:	4a0d      	ldr	r2, [pc, #52]	; (15800 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   157ca:	9b01      	ldr	r3, [sp, #4]
   157cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157d0:	1e5a      	subs	r2, r3, #1
   157d2:	490b      	ldr	r1, [pc, #44]	; (15800 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   157d4:	9b01      	ldr	r3, [sp, #4]
   157d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   157da:	4a0a      	ldr	r2, [pc, #40]	; (15804 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   157dc:	9b01      	ldr	r3, [sp, #4]
   157de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157e2:	f003 0301 	and.w	r3, r3, #1
   157e6:	2b00      	cmp	r3, #0
   157e8:	d106      	bne.n	157f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   157ea:	4a05      	ldr	r2, [pc, #20]	; (15800 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   157ec:	9b01      	ldr	r3, [sp, #4]
   157ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157f2:	2b00      	cmp	r3, #0
   157f4:	d100      	bne.n	157f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   157f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   157f8:	bf00      	nop
   157fa:	b003      	add	sp, #12
   157fc:	f85d fb04 	ldr.w	pc, [sp], #4
   15800:	1fff9558 	.word	0x1fff9558
   15804:	1fff9554 	.word	0x1fff9554

00015808 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   15808:	b500      	push	{lr}
   1580a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1580c:	f7eb ffe8 	bl	17e0 <Sys_GetCoreID>
   15810:	4603      	mov	r3, r0
   15812:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   15814:	4a10      	ldr	r2, [pc, #64]	; (15858 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   15816:	9b01      	ldr	r3, [sp, #4]
   15818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1581c:	2b00      	cmp	r3, #0
   1581e:	d10d      	bne.n	1583c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15820:	f7eb f88d 	bl	93e <Port_schm_read_msr>
   15824:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15826:	9b00      	ldr	r3, [sp, #0]
   15828:	f003 0301 	and.w	r3, r3, #1
   1582c:	2b00      	cmp	r3, #0
   1582e:	d100      	bne.n	15832 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15830:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   15832:	490a      	ldr	r1, [pc, #40]	; (1585c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   15834:	9b01      	ldr	r3, [sp, #4]
   15836:	9a00      	ldr	r2, [sp, #0]
   15838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   1583c:	4a06      	ldr	r2, [pc, #24]	; (15858 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   1583e:	9b01      	ldr	r3, [sp, #4]
   15840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15844:	1c5a      	adds	r2, r3, #1
   15846:	4904      	ldr	r1, [pc, #16]	; (15858 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   15848:	9b01      	ldr	r3, [sp, #4]
   1584a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1584e:	bf00      	nop
   15850:	b003      	add	sp, #12
   15852:	f85d fb04 	ldr.w	pc, [sp], #4
   15856:	bf00      	nop
   15858:	1fff9560 	.word	0x1fff9560
   1585c:	1fff955c 	.word	0x1fff955c

00015860 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   15860:	b500      	push	{lr}
   15862:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15864:	f7eb ffbc 	bl	17e0 <Sys_GetCoreID>
   15868:	4603      	mov	r3, r0
   1586a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   1586c:	4a0d      	ldr	r2, [pc, #52]	; (158a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   1586e:	9b01      	ldr	r3, [sp, #4]
   15870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15874:	1e5a      	subs	r2, r3, #1
   15876:	490b      	ldr	r1, [pc, #44]	; (158a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   15878:	9b01      	ldr	r3, [sp, #4]
   1587a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   1587e:	4a0a      	ldr	r2, [pc, #40]	; (158a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   15880:	9b01      	ldr	r3, [sp, #4]
   15882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15886:	f003 0301 	and.w	r3, r3, #1
   1588a:	2b00      	cmp	r3, #0
   1588c:	d106      	bne.n	1589c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   1588e:	4a05      	ldr	r2, [pc, #20]	; (158a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   15890:	9b01      	ldr	r3, [sp, #4]
   15892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15896:	2b00      	cmp	r3, #0
   15898:	d100      	bne.n	1589c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1589a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1589c:	bf00      	nop
   1589e:	b003      	add	sp, #12
   158a0:	f85d fb04 	ldr.w	pc, [sp], #4
   158a4:	1fff9560 	.word	0x1fff9560
   158a8:	1fff955c 	.word	0x1fff955c

000158ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   158ac:	b500      	push	{lr}
   158ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158b0:	f7eb ff96 	bl	17e0 <Sys_GetCoreID>
   158b4:	4603      	mov	r3, r0
   158b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   158b8:	4a10      	ldr	r2, [pc, #64]	; (158fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   158ba:	9b01      	ldr	r3, [sp, #4]
   158bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158c0:	2b00      	cmp	r3, #0
   158c2:	d10d      	bne.n	158e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   158c4:	f7eb f83b 	bl	93e <Port_schm_read_msr>
   158c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   158ca:	9b00      	ldr	r3, [sp, #0]
   158cc:	f003 0301 	and.w	r3, r3, #1
   158d0:	2b00      	cmp	r3, #0
   158d2:	d100      	bne.n	158d6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   158d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   158d6:	490a      	ldr	r1, [pc, #40]	; (15900 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   158d8:	9b01      	ldr	r3, [sp, #4]
   158da:	9a00      	ldr	r2, [sp, #0]
   158dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   158e0:	4a06      	ldr	r2, [pc, #24]	; (158fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   158e2:	9b01      	ldr	r3, [sp, #4]
   158e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158e8:	1c5a      	adds	r2, r3, #1
   158ea:	4904      	ldr	r1, [pc, #16]	; (158fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   158ec:	9b01      	ldr	r3, [sp, #4]
   158ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   158f2:	bf00      	nop
   158f4:	b003      	add	sp, #12
   158f6:	f85d fb04 	ldr.w	pc, [sp], #4
   158fa:	bf00      	nop
   158fc:	1fff9568 	.word	0x1fff9568
   15900:	1fff9564 	.word	0x1fff9564

00015904 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   15904:	b500      	push	{lr}
   15906:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15908:	f7eb ff6a 	bl	17e0 <Sys_GetCoreID>
   1590c:	4603      	mov	r3, r0
   1590e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   15910:	4a0d      	ldr	r2, [pc, #52]	; (15948 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   15912:	9b01      	ldr	r3, [sp, #4]
   15914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15918:	1e5a      	subs	r2, r3, #1
   1591a:	490b      	ldr	r1, [pc, #44]	; (15948 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   1591c:	9b01      	ldr	r3, [sp, #4]
   1591e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   15922:	4a0a      	ldr	r2, [pc, #40]	; (1594c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   15924:	9b01      	ldr	r3, [sp, #4]
   15926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1592a:	f003 0301 	and.w	r3, r3, #1
   1592e:	2b00      	cmp	r3, #0
   15930:	d106      	bne.n	15940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   15932:	4a05      	ldr	r2, [pc, #20]	; (15948 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   15934:	9b01      	ldr	r3, [sp, #4]
   15936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1593a:	2b00      	cmp	r3, #0
   1593c:	d100      	bne.n	15940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1593e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15940:	bf00      	nop
   15942:	b003      	add	sp, #12
   15944:	f85d fb04 	ldr.w	pc, [sp], #4
   15948:	1fff9568 	.word	0x1fff9568
   1594c:	1fff9564 	.word	0x1fff9564

00015950 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   15950:	b500      	push	{lr}
   15952:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15954:	f7eb ff44 	bl	17e0 <Sys_GetCoreID>
   15958:	4603      	mov	r3, r0
   1595a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   1595c:	4a10      	ldr	r2, [pc, #64]	; (159a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   1595e:	9b01      	ldr	r3, [sp, #4]
   15960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15964:	2b00      	cmp	r3, #0
   15966:	d10d      	bne.n	15984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15968:	f7ea ffe9 	bl	93e <Port_schm_read_msr>
   1596c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1596e:	9b00      	ldr	r3, [sp, #0]
   15970:	f003 0301 	and.w	r3, r3, #1
   15974:	2b00      	cmp	r3, #0
   15976:	d100      	bne.n	1597a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15978:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1597a:	490a      	ldr	r1, [pc, #40]	; (159a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   1597c:	9b01      	ldr	r3, [sp, #4]
   1597e:	9a00      	ldr	r2, [sp, #0]
   15980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   15984:	4a06      	ldr	r2, [pc, #24]	; (159a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   15986:	9b01      	ldr	r3, [sp, #4]
   15988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1598c:	1c5a      	adds	r2, r3, #1
   1598e:	4904      	ldr	r1, [pc, #16]	; (159a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   15990:	9b01      	ldr	r3, [sp, #4]
   15992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15996:	bf00      	nop
   15998:	b003      	add	sp, #12
   1599a:	f85d fb04 	ldr.w	pc, [sp], #4
   1599e:	bf00      	nop
   159a0:	1fff9570 	.word	0x1fff9570
   159a4:	1fff956c 	.word	0x1fff956c

000159a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   159a8:	b500      	push	{lr}
   159aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159ac:	f7eb ff18 	bl	17e0 <Sys_GetCoreID>
   159b0:	4603      	mov	r3, r0
   159b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   159b4:	4a0d      	ldr	r2, [pc, #52]	; (159ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   159b6:	9b01      	ldr	r3, [sp, #4]
   159b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159bc:	1e5a      	subs	r2, r3, #1
   159be:	490b      	ldr	r1, [pc, #44]	; (159ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   159c0:	9b01      	ldr	r3, [sp, #4]
   159c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   159c6:	4a0a      	ldr	r2, [pc, #40]	; (159f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   159c8:	9b01      	ldr	r3, [sp, #4]
   159ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159ce:	f003 0301 	and.w	r3, r3, #1
   159d2:	2b00      	cmp	r3, #0
   159d4:	d106      	bne.n	159e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   159d6:	4a05      	ldr	r2, [pc, #20]	; (159ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   159d8:	9b01      	ldr	r3, [sp, #4]
   159da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159de:	2b00      	cmp	r3, #0
   159e0:	d100      	bne.n	159e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   159e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   159e4:	bf00      	nop
   159e6:	b003      	add	sp, #12
   159e8:	f85d fb04 	ldr.w	pc, [sp], #4
   159ec:	1fff9570 	.word	0x1fff9570
   159f0:	1fff956c 	.word	0x1fff956c

000159f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   159f4:	b500      	push	{lr}
   159f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159f8:	f7eb fef2 	bl	17e0 <Sys_GetCoreID>
   159fc:	4603      	mov	r3, r0
   159fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   15a00:	4a10      	ldr	r2, [pc, #64]	; (15a44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15a02:	9b01      	ldr	r3, [sp, #4]
   15a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a08:	2b00      	cmp	r3, #0
   15a0a:	d10d      	bne.n	15a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a0c:	f7ea ff97 	bl	93e <Port_schm_read_msr>
   15a10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a12:	9b00      	ldr	r3, [sp, #0]
   15a14:	f003 0301 	and.w	r3, r3, #1
   15a18:	2b00      	cmp	r3, #0
   15a1a:	d100      	bne.n	15a1e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   15a1e:	490a      	ldr	r1, [pc, #40]	; (15a48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   15a20:	9b01      	ldr	r3, [sp, #4]
   15a22:	9a00      	ldr	r2, [sp, #0]
   15a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   15a28:	4a06      	ldr	r2, [pc, #24]	; (15a44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15a2a:	9b01      	ldr	r3, [sp, #4]
   15a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a30:	1c5a      	adds	r2, r3, #1
   15a32:	4904      	ldr	r1, [pc, #16]	; (15a44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15a34:	9b01      	ldr	r3, [sp, #4]
   15a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a3a:	bf00      	nop
   15a3c:	b003      	add	sp, #12
   15a3e:	f85d fb04 	ldr.w	pc, [sp], #4
   15a42:	bf00      	nop
   15a44:	1fff9578 	.word	0x1fff9578
   15a48:	1fff9574 	.word	0x1fff9574

00015a4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   15a4c:	b500      	push	{lr}
   15a4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a50:	f7eb fec6 	bl	17e0 <Sys_GetCoreID>
   15a54:	4603      	mov	r3, r0
   15a56:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   15a58:	4a0d      	ldr	r2, [pc, #52]	; (15a90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15a5a:	9b01      	ldr	r3, [sp, #4]
   15a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a60:	1e5a      	subs	r2, r3, #1
   15a62:	490b      	ldr	r1, [pc, #44]	; (15a90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15a64:	9b01      	ldr	r3, [sp, #4]
   15a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   15a6a:	4a0a      	ldr	r2, [pc, #40]	; (15a94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   15a6c:	9b01      	ldr	r3, [sp, #4]
   15a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a72:	f003 0301 	and.w	r3, r3, #1
   15a76:	2b00      	cmp	r3, #0
   15a78:	d106      	bne.n	15a88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   15a7a:	4a05      	ldr	r2, [pc, #20]	; (15a90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15a7c:	9b01      	ldr	r3, [sp, #4]
   15a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a82:	2b00      	cmp	r3, #0
   15a84:	d100      	bne.n	15a88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a88:	bf00      	nop
   15a8a:	b003      	add	sp, #12
   15a8c:	f85d fb04 	ldr.w	pc, [sp], #4
   15a90:	1fff9578 	.word	0x1fff9578
   15a94:	1fff9574 	.word	0x1fff9574

00015a98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15a98:	b500      	push	{lr}
   15a9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a9c:	f7eb fea0 	bl	17e0 <Sys_GetCoreID>
   15aa0:	4603      	mov	r3, r0
   15aa2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   15aa4:	4a10      	ldr	r2, [pc, #64]	; (15ae8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15aa6:	9b01      	ldr	r3, [sp, #4]
   15aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15aac:	2b00      	cmp	r3, #0
   15aae:	d10d      	bne.n	15acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15ab0:	f7ea ff45 	bl	93e <Port_schm_read_msr>
   15ab4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15ab6:	9b00      	ldr	r3, [sp, #0]
   15ab8:	f003 0301 	and.w	r3, r3, #1
   15abc:	2b00      	cmp	r3, #0
   15abe:	d100      	bne.n	15ac2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ac0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   15ac2:	490a      	ldr	r1, [pc, #40]	; (15aec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   15ac4:	9b01      	ldr	r3, [sp, #4]
   15ac6:	9a00      	ldr	r2, [sp, #0]
   15ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   15acc:	4a06      	ldr	r2, [pc, #24]	; (15ae8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15ace:	9b01      	ldr	r3, [sp, #4]
   15ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ad4:	1c5a      	adds	r2, r3, #1
   15ad6:	4904      	ldr	r1, [pc, #16]	; (15ae8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15ad8:	9b01      	ldr	r3, [sp, #4]
   15ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15ade:	bf00      	nop
   15ae0:	b003      	add	sp, #12
   15ae2:	f85d fb04 	ldr.w	pc, [sp], #4
   15ae6:	bf00      	nop
   15ae8:	1fff9580 	.word	0x1fff9580
   15aec:	1fff957c 	.word	0x1fff957c

00015af0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15af0:	b500      	push	{lr}
   15af2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15af4:	f7eb fe74 	bl	17e0 <Sys_GetCoreID>
   15af8:	4603      	mov	r3, r0
   15afa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   15afc:	4a0d      	ldr	r2, [pc, #52]	; (15b34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15afe:	9b01      	ldr	r3, [sp, #4]
   15b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b04:	1e5a      	subs	r2, r3, #1
   15b06:	490b      	ldr	r1, [pc, #44]	; (15b34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15b08:	9b01      	ldr	r3, [sp, #4]
   15b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   15b0e:	4a0a      	ldr	r2, [pc, #40]	; (15b38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   15b10:	9b01      	ldr	r3, [sp, #4]
   15b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b16:	f003 0301 	and.w	r3, r3, #1
   15b1a:	2b00      	cmp	r3, #0
   15b1c:	d106      	bne.n	15b2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   15b1e:	4a05      	ldr	r2, [pc, #20]	; (15b34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15b20:	9b01      	ldr	r3, [sp, #4]
   15b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b26:	2b00      	cmp	r3, #0
   15b28:	d100      	bne.n	15b2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15b2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15b2c:	bf00      	nop
   15b2e:	b003      	add	sp, #12
   15b30:	f85d fb04 	ldr.w	pc, [sp], #4
   15b34:	1fff9580 	.word	0x1fff9580
   15b38:	1fff957c 	.word	0x1fff957c

00015b3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15b3c:	b500      	push	{lr}
   15b3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b40:	f7eb fe4e 	bl	17e0 <Sys_GetCoreID>
   15b44:	4603      	mov	r3, r0
   15b46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   15b48:	4a10      	ldr	r2, [pc, #64]	; (15b8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15b4a:	9b01      	ldr	r3, [sp, #4]
   15b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b50:	2b00      	cmp	r3, #0
   15b52:	d10d      	bne.n	15b70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15b54:	f7ea fef3 	bl	93e <Port_schm_read_msr>
   15b58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15b5a:	9b00      	ldr	r3, [sp, #0]
   15b5c:	f003 0301 	and.w	r3, r3, #1
   15b60:	2b00      	cmp	r3, #0
   15b62:	d100      	bne.n	15b66 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15b64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   15b66:	490a      	ldr	r1, [pc, #40]	; (15b90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   15b68:	9b01      	ldr	r3, [sp, #4]
   15b6a:	9a00      	ldr	r2, [sp, #0]
   15b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   15b70:	4a06      	ldr	r2, [pc, #24]	; (15b8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15b72:	9b01      	ldr	r3, [sp, #4]
   15b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b78:	1c5a      	adds	r2, r3, #1
   15b7a:	4904      	ldr	r1, [pc, #16]	; (15b8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15b7c:	9b01      	ldr	r3, [sp, #4]
   15b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15b82:	bf00      	nop
   15b84:	b003      	add	sp, #12
   15b86:	f85d fb04 	ldr.w	pc, [sp], #4
   15b8a:	bf00      	nop
   15b8c:	1fff9588 	.word	0x1fff9588
   15b90:	1fff9584 	.word	0x1fff9584

00015b94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15b94:	b500      	push	{lr}
   15b96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b98:	f7eb fe22 	bl	17e0 <Sys_GetCoreID>
   15b9c:	4603      	mov	r3, r0
   15b9e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   15ba0:	4a0d      	ldr	r2, [pc, #52]	; (15bd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15ba2:	9b01      	ldr	r3, [sp, #4]
   15ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ba8:	1e5a      	subs	r2, r3, #1
   15baa:	490b      	ldr	r1, [pc, #44]	; (15bd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15bac:	9b01      	ldr	r3, [sp, #4]
   15bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   15bb2:	4a0a      	ldr	r2, [pc, #40]	; (15bdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   15bb4:	9b01      	ldr	r3, [sp, #4]
   15bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bba:	f003 0301 	and.w	r3, r3, #1
   15bbe:	2b00      	cmp	r3, #0
   15bc0:	d106      	bne.n	15bd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   15bc2:	4a05      	ldr	r2, [pc, #20]	; (15bd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15bc4:	9b01      	ldr	r3, [sp, #4]
   15bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bca:	2b00      	cmp	r3, #0
   15bcc:	d100      	bne.n	15bd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15bce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15bd0:	bf00      	nop
   15bd2:	b003      	add	sp, #12
   15bd4:	f85d fb04 	ldr.w	pc, [sp], #4
   15bd8:	1fff9588 	.word	0x1fff9588
   15bdc:	1fff9584 	.word	0x1fff9584

00015be0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15be0:	b500      	push	{lr}
   15be2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15be4:	f7eb fdfc 	bl	17e0 <Sys_GetCoreID>
   15be8:	4603      	mov	r3, r0
   15bea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   15bec:	4a10      	ldr	r2, [pc, #64]	; (15c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15bee:	9b01      	ldr	r3, [sp, #4]
   15bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bf4:	2b00      	cmp	r3, #0
   15bf6:	d10d      	bne.n	15c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15bf8:	f7ea fea1 	bl	93e <Port_schm_read_msr>
   15bfc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15bfe:	9b00      	ldr	r3, [sp, #0]
   15c00:	f003 0301 	and.w	r3, r3, #1
   15c04:	2b00      	cmp	r3, #0
   15c06:	d100      	bne.n	15c0a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15c08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   15c0a:	490a      	ldr	r1, [pc, #40]	; (15c34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   15c0c:	9b01      	ldr	r3, [sp, #4]
   15c0e:	9a00      	ldr	r2, [sp, #0]
   15c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   15c14:	4a06      	ldr	r2, [pc, #24]	; (15c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15c16:	9b01      	ldr	r3, [sp, #4]
   15c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c1c:	1c5a      	adds	r2, r3, #1
   15c1e:	4904      	ldr	r1, [pc, #16]	; (15c30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15c20:	9b01      	ldr	r3, [sp, #4]
   15c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15c26:	bf00      	nop
   15c28:	b003      	add	sp, #12
   15c2a:	f85d fb04 	ldr.w	pc, [sp], #4
   15c2e:	bf00      	nop
   15c30:	1fff9590 	.word	0x1fff9590
   15c34:	1fff958c 	.word	0x1fff958c

00015c38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15c38:	b500      	push	{lr}
   15c3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c3c:	f7eb fdd0 	bl	17e0 <Sys_GetCoreID>
   15c40:	4603      	mov	r3, r0
   15c42:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   15c44:	4a0d      	ldr	r2, [pc, #52]	; (15c7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15c46:	9b01      	ldr	r3, [sp, #4]
   15c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c4c:	1e5a      	subs	r2, r3, #1
   15c4e:	490b      	ldr	r1, [pc, #44]	; (15c7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15c50:	9b01      	ldr	r3, [sp, #4]
   15c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   15c56:	4a0a      	ldr	r2, [pc, #40]	; (15c80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   15c58:	9b01      	ldr	r3, [sp, #4]
   15c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c5e:	f003 0301 	and.w	r3, r3, #1
   15c62:	2b00      	cmp	r3, #0
   15c64:	d106      	bne.n	15c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   15c66:	4a05      	ldr	r2, [pc, #20]	; (15c7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15c68:	9b01      	ldr	r3, [sp, #4]
   15c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c6e:	2b00      	cmp	r3, #0
   15c70:	d100      	bne.n	15c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15c72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15c74:	bf00      	nop
   15c76:	b003      	add	sp, #12
   15c78:	f85d fb04 	ldr.w	pc, [sp], #4
   15c7c:	1fff9590 	.word	0x1fff9590
   15c80:	1fff958c 	.word	0x1fff958c

00015c84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15c84:	b500      	push	{lr}
   15c86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c88:	f7eb fdaa 	bl	17e0 <Sys_GetCoreID>
   15c8c:	4603      	mov	r3, r0
   15c8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   15c90:	4a10      	ldr	r2, [pc, #64]	; (15cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15c92:	9b01      	ldr	r3, [sp, #4]
   15c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c98:	2b00      	cmp	r3, #0
   15c9a:	d10d      	bne.n	15cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15c9c:	f7ea fe4f 	bl	93e <Port_schm_read_msr>
   15ca0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15ca2:	9b00      	ldr	r3, [sp, #0]
   15ca4:	f003 0301 	and.w	r3, r3, #1
   15ca8:	2b00      	cmp	r3, #0
   15caa:	d100      	bne.n	15cae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15cac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   15cae:	490a      	ldr	r1, [pc, #40]	; (15cd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   15cb0:	9b01      	ldr	r3, [sp, #4]
   15cb2:	9a00      	ldr	r2, [sp, #0]
   15cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   15cb8:	4a06      	ldr	r2, [pc, #24]	; (15cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15cba:	9b01      	ldr	r3, [sp, #4]
   15cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cc0:	1c5a      	adds	r2, r3, #1
   15cc2:	4904      	ldr	r1, [pc, #16]	; (15cd4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15cc4:	9b01      	ldr	r3, [sp, #4]
   15cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15cca:	bf00      	nop
   15ccc:	b003      	add	sp, #12
   15cce:	f85d fb04 	ldr.w	pc, [sp], #4
   15cd2:	bf00      	nop
   15cd4:	1fff9598 	.word	0x1fff9598
   15cd8:	1fff9594 	.word	0x1fff9594

00015cdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15cdc:	b500      	push	{lr}
   15cde:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ce0:	f7eb fd7e 	bl	17e0 <Sys_GetCoreID>
   15ce4:	4603      	mov	r3, r0
   15ce6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   15ce8:	4a0d      	ldr	r2, [pc, #52]	; (15d20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15cea:	9b01      	ldr	r3, [sp, #4]
   15cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cf0:	1e5a      	subs	r2, r3, #1
   15cf2:	490b      	ldr	r1, [pc, #44]	; (15d20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15cf4:	9b01      	ldr	r3, [sp, #4]
   15cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   15cfa:	4a0a      	ldr	r2, [pc, #40]	; (15d24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   15cfc:	9b01      	ldr	r3, [sp, #4]
   15cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d02:	f003 0301 	and.w	r3, r3, #1
   15d06:	2b00      	cmp	r3, #0
   15d08:	d106      	bne.n	15d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   15d0a:	4a05      	ldr	r2, [pc, #20]	; (15d20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15d0c:	9b01      	ldr	r3, [sp, #4]
   15d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d12:	2b00      	cmp	r3, #0
   15d14:	d100      	bne.n	15d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15d16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15d18:	bf00      	nop
   15d1a:	b003      	add	sp, #12
   15d1c:	f85d fb04 	ldr.w	pc, [sp], #4
   15d20:	1fff9598 	.word	0x1fff9598
   15d24:	1fff9594 	.word	0x1fff9594

00015d28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15d28:	b500      	push	{lr}
   15d2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d2c:	f7eb fd58 	bl	17e0 <Sys_GetCoreID>
   15d30:	4603      	mov	r3, r0
   15d32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   15d34:	4a10      	ldr	r2, [pc, #64]	; (15d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15d36:	9b01      	ldr	r3, [sp, #4]
   15d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d3c:	2b00      	cmp	r3, #0
   15d3e:	d10d      	bne.n	15d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15d40:	f7ea fdfd 	bl	93e <Port_schm_read_msr>
   15d44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15d46:	9b00      	ldr	r3, [sp, #0]
   15d48:	f003 0301 	and.w	r3, r3, #1
   15d4c:	2b00      	cmp	r3, #0
   15d4e:	d100      	bne.n	15d52 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15d50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   15d52:	490a      	ldr	r1, [pc, #40]	; (15d7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   15d54:	9b01      	ldr	r3, [sp, #4]
   15d56:	9a00      	ldr	r2, [sp, #0]
   15d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   15d5c:	4a06      	ldr	r2, [pc, #24]	; (15d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15d5e:	9b01      	ldr	r3, [sp, #4]
   15d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d64:	1c5a      	adds	r2, r3, #1
   15d66:	4904      	ldr	r1, [pc, #16]	; (15d78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15d68:	9b01      	ldr	r3, [sp, #4]
   15d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15d6e:	bf00      	nop
   15d70:	b003      	add	sp, #12
   15d72:	f85d fb04 	ldr.w	pc, [sp], #4
   15d76:	bf00      	nop
   15d78:	1fff95a0 	.word	0x1fff95a0
   15d7c:	1fff959c 	.word	0x1fff959c

00015d80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15d80:	b500      	push	{lr}
   15d82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d84:	f7eb fd2c 	bl	17e0 <Sys_GetCoreID>
   15d88:	4603      	mov	r3, r0
   15d8a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   15d8c:	4a0d      	ldr	r2, [pc, #52]	; (15dc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15d8e:	9b01      	ldr	r3, [sp, #4]
   15d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d94:	1e5a      	subs	r2, r3, #1
   15d96:	490b      	ldr	r1, [pc, #44]	; (15dc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15d98:	9b01      	ldr	r3, [sp, #4]
   15d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   15d9e:	4a0a      	ldr	r2, [pc, #40]	; (15dc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   15da0:	9b01      	ldr	r3, [sp, #4]
   15da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15da6:	f003 0301 	and.w	r3, r3, #1
   15daa:	2b00      	cmp	r3, #0
   15dac:	d106      	bne.n	15dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   15dae:	4a05      	ldr	r2, [pc, #20]	; (15dc4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15db0:	9b01      	ldr	r3, [sp, #4]
   15db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15db6:	2b00      	cmp	r3, #0
   15db8:	d100      	bne.n	15dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15dba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15dbc:	bf00      	nop
   15dbe:	b003      	add	sp, #12
   15dc0:	f85d fb04 	ldr.w	pc, [sp], #4
   15dc4:	1fff95a0 	.word	0x1fff95a0
   15dc8:	1fff959c 	.word	0x1fff959c

00015dcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15dcc:	b500      	push	{lr}
   15dce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15dd0:	f7eb fd06 	bl	17e0 <Sys_GetCoreID>
   15dd4:	4603      	mov	r3, r0
   15dd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   15dd8:	4a10      	ldr	r2, [pc, #64]	; (15e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15dda:	9b01      	ldr	r3, [sp, #4]
   15ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15de0:	2b00      	cmp	r3, #0
   15de2:	d10d      	bne.n	15e00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15de4:	f7ea fdab 	bl	93e <Port_schm_read_msr>
   15de8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15dea:	9b00      	ldr	r3, [sp, #0]
   15dec:	f003 0301 	and.w	r3, r3, #1
   15df0:	2b00      	cmp	r3, #0
   15df2:	d100      	bne.n	15df6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15df4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   15df6:	490a      	ldr	r1, [pc, #40]	; (15e20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   15df8:	9b01      	ldr	r3, [sp, #4]
   15dfa:	9a00      	ldr	r2, [sp, #0]
   15dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   15e00:	4a06      	ldr	r2, [pc, #24]	; (15e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15e02:	9b01      	ldr	r3, [sp, #4]
   15e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e08:	1c5a      	adds	r2, r3, #1
   15e0a:	4904      	ldr	r1, [pc, #16]	; (15e1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15e0c:	9b01      	ldr	r3, [sp, #4]
   15e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15e12:	bf00      	nop
   15e14:	b003      	add	sp, #12
   15e16:	f85d fb04 	ldr.w	pc, [sp], #4
   15e1a:	bf00      	nop
   15e1c:	1fff95a8 	.word	0x1fff95a8
   15e20:	1fff95a4 	.word	0x1fff95a4

00015e24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15e24:	b500      	push	{lr}
   15e26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e28:	f7eb fcda 	bl	17e0 <Sys_GetCoreID>
   15e2c:	4603      	mov	r3, r0
   15e2e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   15e30:	4a0d      	ldr	r2, [pc, #52]	; (15e68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15e32:	9b01      	ldr	r3, [sp, #4]
   15e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e38:	1e5a      	subs	r2, r3, #1
   15e3a:	490b      	ldr	r1, [pc, #44]	; (15e68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15e3c:	9b01      	ldr	r3, [sp, #4]
   15e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   15e42:	4a0a      	ldr	r2, [pc, #40]	; (15e6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   15e44:	9b01      	ldr	r3, [sp, #4]
   15e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e4a:	f003 0301 	and.w	r3, r3, #1
   15e4e:	2b00      	cmp	r3, #0
   15e50:	d106      	bne.n	15e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   15e52:	4a05      	ldr	r2, [pc, #20]	; (15e68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15e54:	9b01      	ldr	r3, [sp, #4]
   15e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e5a:	2b00      	cmp	r3, #0
   15e5c:	d100      	bne.n	15e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15e5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15e60:	bf00      	nop
   15e62:	b003      	add	sp, #12
   15e64:	f85d fb04 	ldr.w	pc, [sp], #4
   15e68:	1fff95a8 	.word	0x1fff95a8
   15e6c:	1fff95a4 	.word	0x1fff95a4

00015e70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15e70:	b500      	push	{lr}
   15e72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e74:	f7eb fcb4 	bl	17e0 <Sys_GetCoreID>
   15e78:	4603      	mov	r3, r0
   15e7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   15e7c:	4a10      	ldr	r2, [pc, #64]	; (15ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15e7e:	9b01      	ldr	r3, [sp, #4]
   15e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e84:	2b00      	cmp	r3, #0
   15e86:	d10d      	bne.n	15ea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15e88:	f7ea fd59 	bl	93e <Port_schm_read_msr>
   15e8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15e8e:	9b00      	ldr	r3, [sp, #0]
   15e90:	f003 0301 	and.w	r3, r3, #1
   15e94:	2b00      	cmp	r3, #0
   15e96:	d100      	bne.n	15e9a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15e98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   15e9a:	490a      	ldr	r1, [pc, #40]	; (15ec4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   15e9c:	9b01      	ldr	r3, [sp, #4]
   15e9e:	9a00      	ldr	r2, [sp, #0]
   15ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   15ea4:	4a06      	ldr	r2, [pc, #24]	; (15ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15ea6:	9b01      	ldr	r3, [sp, #4]
   15ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15eac:	1c5a      	adds	r2, r3, #1
   15eae:	4904      	ldr	r1, [pc, #16]	; (15ec0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15eb0:	9b01      	ldr	r3, [sp, #4]
   15eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15eb6:	bf00      	nop
   15eb8:	b003      	add	sp, #12
   15eba:	f85d fb04 	ldr.w	pc, [sp], #4
   15ebe:	bf00      	nop
   15ec0:	1fff95b0 	.word	0x1fff95b0
   15ec4:	1fff95ac 	.word	0x1fff95ac

00015ec8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15ec8:	b500      	push	{lr}
   15eca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ecc:	f7eb fc88 	bl	17e0 <Sys_GetCoreID>
   15ed0:	4603      	mov	r3, r0
   15ed2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   15ed4:	4a0d      	ldr	r2, [pc, #52]	; (15f0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15ed6:	9b01      	ldr	r3, [sp, #4]
   15ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15edc:	1e5a      	subs	r2, r3, #1
   15ede:	490b      	ldr	r1, [pc, #44]	; (15f0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15ee0:	9b01      	ldr	r3, [sp, #4]
   15ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   15ee6:	4a0a      	ldr	r2, [pc, #40]	; (15f10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   15ee8:	9b01      	ldr	r3, [sp, #4]
   15eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15eee:	f003 0301 	and.w	r3, r3, #1
   15ef2:	2b00      	cmp	r3, #0
   15ef4:	d106      	bne.n	15f04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   15ef6:	4a05      	ldr	r2, [pc, #20]	; (15f0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15ef8:	9b01      	ldr	r3, [sp, #4]
   15efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15efe:	2b00      	cmp	r3, #0
   15f00:	d100      	bne.n	15f04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15f02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15f04:	bf00      	nop
   15f06:	b003      	add	sp, #12
   15f08:	f85d fb04 	ldr.w	pc, [sp], #4
   15f0c:	1fff95b0 	.word	0x1fff95b0
   15f10:	1fff95ac 	.word	0x1fff95ac

00015f14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15f14:	b500      	push	{lr}
   15f16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f18:	f7eb fc62 	bl	17e0 <Sys_GetCoreID>
   15f1c:	4603      	mov	r3, r0
   15f1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   15f20:	4a10      	ldr	r2, [pc, #64]	; (15f64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15f22:	9b01      	ldr	r3, [sp, #4]
   15f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f28:	2b00      	cmp	r3, #0
   15f2a:	d10d      	bne.n	15f48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15f2c:	f7ea fd07 	bl	93e <Port_schm_read_msr>
   15f30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15f32:	9b00      	ldr	r3, [sp, #0]
   15f34:	f003 0301 	and.w	r3, r3, #1
   15f38:	2b00      	cmp	r3, #0
   15f3a:	d100      	bne.n	15f3e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15f3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   15f3e:	490a      	ldr	r1, [pc, #40]	; (15f68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   15f40:	9b01      	ldr	r3, [sp, #4]
   15f42:	9a00      	ldr	r2, [sp, #0]
   15f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   15f48:	4a06      	ldr	r2, [pc, #24]	; (15f64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15f4a:	9b01      	ldr	r3, [sp, #4]
   15f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f50:	1c5a      	adds	r2, r3, #1
   15f52:	4904      	ldr	r1, [pc, #16]	; (15f64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   15f54:	9b01      	ldr	r3, [sp, #4]
   15f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15f5a:	bf00      	nop
   15f5c:	b003      	add	sp, #12
   15f5e:	f85d fb04 	ldr.w	pc, [sp], #4
   15f62:	bf00      	nop
   15f64:	1fff95b8 	.word	0x1fff95b8
   15f68:	1fff95b4 	.word	0x1fff95b4

00015f6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15f6c:	b500      	push	{lr}
   15f6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f70:	f7eb fc36 	bl	17e0 <Sys_GetCoreID>
   15f74:	4603      	mov	r3, r0
   15f76:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   15f78:	4a0d      	ldr	r2, [pc, #52]	; (15fb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15f7a:	9b01      	ldr	r3, [sp, #4]
   15f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f80:	1e5a      	subs	r2, r3, #1
   15f82:	490b      	ldr	r1, [pc, #44]	; (15fb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15f84:	9b01      	ldr	r3, [sp, #4]
   15f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   15f8a:	4a0a      	ldr	r2, [pc, #40]	; (15fb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   15f8c:	9b01      	ldr	r3, [sp, #4]
   15f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f92:	f003 0301 	and.w	r3, r3, #1
   15f96:	2b00      	cmp	r3, #0
   15f98:	d106      	bne.n	15fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   15f9a:	4a05      	ldr	r2, [pc, #20]	; (15fb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   15f9c:	9b01      	ldr	r3, [sp, #4]
   15f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fa2:	2b00      	cmp	r3, #0
   15fa4:	d100      	bne.n	15fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15fa6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15fa8:	bf00      	nop
   15faa:	b003      	add	sp, #12
   15fac:	f85d fb04 	ldr.w	pc, [sp], #4
   15fb0:	1fff95b8 	.word	0x1fff95b8
   15fb4:	1fff95b4 	.word	0x1fff95b4

00015fb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   15fb8:	b500      	push	{lr}
   15fba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15fbc:	f7eb fc10 	bl	17e0 <Sys_GetCoreID>
   15fc0:	4603      	mov	r3, r0
   15fc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   15fc4:	4a10      	ldr	r2, [pc, #64]	; (16008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   15fc6:	9b01      	ldr	r3, [sp, #4]
   15fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fcc:	2b00      	cmp	r3, #0
   15fce:	d10d      	bne.n	15fec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15fd0:	f7ea fcb5 	bl	93e <Port_schm_read_msr>
   15fd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15fd6:	9b00      	ldr	r3, [sp, #0]
   15fd8:	f003 0301 	and.w	r3, r3, #1
   15fdc:	2b00      	cmp	r3, #0
   15fde:	d100      	bne.n	15fe2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15fe0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   15fe2:	490a      	ldr	r1, [pc, #40]	; (1600c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   15fe4:	9b01      	ldr	r3, [sp, #4]
   15fe6:	9a00      	ldr	r2, [sp, #0]
   15fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   15fec:	4a06      	ldr	r2, [pc, #24]	; (16008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   15fee:	9b01      	ldr	r3, [sp, #4]
   15ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ff4:	1c5a      	adds	r2, r3, #1
   15ff6:	4904      	ldr	r1, [pc, #16]	; (16008 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   15ff8:	9b01      	ldr	r3, [sp, #4]
   15ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15ffe:	bf00      	nop
   16000:	b003      	add	sp, #12
   16002:	f85d fb04 	ldr.w	pc, [sp], #4
   16006:	bf00      	nop
   16008:	1fff95c0 	.word	0x1fff95c0
   1600c:	1fff95bc 	.word	0x1fff95bc

00016010 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   16010:	b500      	push	{lr}
   16012:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16014:	f7eb fbe4 	bl	17e0 <Sys_GetCoreID>
   16018:	4603      	mov	r3, r0
   1601a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   1601c:	4a0d      	ldr	r2, [pc, #52]	; (16054 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   1601e:	9b01      	ldr	r3, [sp, #4]
   16020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16024:	1e5a      	subs	r2, r3, #1
   16026:	490b      	ldr	r1, [pc, #44]	; (16054 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   16028:	9b01      	ldr	r3, [sp, #4]
   1602a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1602e:	4a0a      	ldr	r2, [pc, #40]	; (16058 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   16030:	9b01      	ldr	r3, [sp, #4]
   16032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16036:	f003 0301 	and.w	r3, r3, #1
   1603a:	2b00      	cmp	r3, #0
   1603c:	d106      	bne.n	1604c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   1603e:	4a05      	ldr	r2, [pc, #20]	; (16054 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   16040:	9b01      	ldr	r3, [sp, #4]
   16042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16046:	2b00      	cmp	r3, #0
   16048:	d100      	bne.n	1604c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1604a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1604c:	bf00      	nop
   1604e:	b003      	add	sp, #12
   16050:	f85d fb04 	ldr.w	pc, [sp], #4
   16054:	1fff95c0 	.word	0x1fff95c0
   16058:	1fff95bc 	.word	0x1fff95bc

0001605c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   1605c:	b500      	push	{lr}
   1605e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16060:	f7eb fbbe 	bl	17e0 <Sys_GetCoreID>
   16064:	4603      	mov	r3, r0
   16066:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   16068:	4a10      	ldr	r2, [pc, #64]	; (160ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1606a:	9b01      	ldr	r3, [sp, #4]
   1606c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16070:	2b00      	cmp	r3, #0
   16072:	d10d      	bne.n	16090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16074:	f7ea fc63 	bl	93e <Port_schm_read_msr>
   16078:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1607a:	9b00      	ldr	r3, [sp, #0]
   1607c:	f003 0301 	and.w	r3, r3, #1
   16080:	2b00      	cmp	r3, #0
   16082:	d100      	bne.n	16086 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16084:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   16086:	490a      	ldr	r1, [pc, #40]	; (160b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   16088:	9b01      	ldr	r3, [sp, #4]
   1608a:	9a00      	ldr	r2, [sp, #0]
   1608c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   16090:	4a06      	ldr	r2, [pc, #24]	; (160ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   16092:	9b01      	ldr	r3, [sp, #4]
   16094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16098:	1c5a      	adds	r2, r3, #1
   1609a:	4904      	ldr	r1, [pc, #16]	; (160ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1609c:	9b01      	ldr	r3, [sp, #4]
   1609e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   160a2:	bf00      	nop
   160a4:	b003      	add	sp, #12
   160a6:	f85d fb04 	ldr.w	pc, [sp], #4
   160aa:	bf00      	nop
   160ac:	1fff95c8 	.word	0x1fff95c8
   160b0:	1fff95c4 	.word	0x1fff95c4

000160b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   160b4:	b500      	push	{lr}
   160b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160b8:	f7eb fb92 	bl	17e0 <Sys_GetCoreID>
   160bc:	4603      	mov	r3, r0
   160be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   160c0:	4a0d      	ldr	r2, [pc, #52]	; (160f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   160c2:	9b01      	ldr	r3, [sp, #4]
   160c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160c8:	1e5a      	subs	r2, r3, #1
   160ca:	490b      	ldr	r1, [pc, #44]	; (160f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   160cc:	9b01      	ldr	r3, [sp, #4]
   160ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   160d2:	4a0a      	ldr	r2, [pc, #40]	; (160fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   160d4:	9b01      	ldr	r3, [sp, #4]
   160d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160da:	f003 0301 	and.w	r3, r3, #1
   160de:	2b00      	cmp	r3, #0
   160e0:	d106      	bne.n	160f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   160e2:	4a05      	ldr	r2, [pc, #20]	; (160f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   160e4:	9b01      	ldr	r3, [sp, #4]
   160e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160ea:	2b00      	cmp	r3, #0
   160ec:	d100      	bne.n	160f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   160ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   160f0:	bf00      	nop
   160f2:	b003      	add	sp, #12
   160f4:	f85d fb04 	ldr.w	pc, [sp], #4
   160f8:	1fff95c8 	.word	0x1fff95c8
   160fc:	1fff95c4 	.word	0x1fff95c4

00016100 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   16100:	b500      	push	{lr}
   16102:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16104:	f7eb fb6c 	bl	17e0 <Sys_GetCoreID>
   16108:	4603      	mov	r3, r0
   1610a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   1610c:	4a10      	ldr	r2, [pc, #64]	; (16150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   1610e:	9b01      	ldr	r3, [sp, #4]
   16110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16114:	2b00      	cmp	r3, #0
   16116:	d10d      	bne.n	16134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16118:	f7ea fc11 	bl	93e <Port_schm_read_msr>
   1611c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1611e:	9b00      	ldr	r3, [sp, #0]
   16120:	f003 0301 	and.w	r3, r3, #1
   16124:	2b00      	cmp	r3, #0
   16126:	d100      	bne.n	1612a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16128:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1612a:	490a      	ldr	r1, [pc, #40]	; (16154 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   1612c:	9b01      	ldr	r3, [sp, #4]
   1612e:	9a00      	ldr	r2, [sp, #0]
   16130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   16134:	4a06      	ldr	r2, [pc, #24]	; (16150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   16136:	9b01      	ldr	r3, [sp, #4]
   16138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1613c:	1c5a      	adds	r2, r3, #1
   1613e:	4904      	ldr	r1, [pc, #16]	; (16150 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   16140:	9b01      	ldr	r3, [sp, #4]
   16142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16146:	bf00      	nop
   16148:	b003      	add	sp, #12
   1614a:	f85d fb04 	ldr.w	pc, [sp], #4
   1614e:	bf00      	nop
   16150:	1fff95d0 	.word	0x1fff95d0
   16154:	1fff95cc 	.word	0x1fff95cc

00016158 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   16158:	b500      	push	{lr}
   1615a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1615c:	f7eb fb40 	bl	17e0 <Sys_GetCoreID>
   16160:	4603      	mov	r3, r0
   16162:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   16164:	4a0d      	ldr	r2, [pc, #52]	; (1619c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   16166:	9b01      	ldr	r3, [sp, #4]
   16168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1616c:	1e5a      	subs	r2, r3, #1
   1616e:	490b      	ldr	r1, [pc, #44]	; (1619c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   16170:	9b01      	ldr	r3, [sp, #4]
   16172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   16176:	4a0a      	ldr	r2, [pc, #40]	; (161a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   16178:	9b01      	ldr	r3, [sp, #4]
   1617a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1617e:	f003 0301 	and.w	r3, r3, #1
   16182:	2b00      	cmp	r3, #0
   16184:	d106      	bne.n	16194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   16186:	4a05      	ldr	r2, [pc, #20]	; (1619c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   16188:	9b01      	ldr	r3, [sp, #4]
   1618a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1618e:	2b00      	cmp	r3, #0
   16190:	d100      	bne.n	16194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16192:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16194:	bf00      	nop
   16196:	b003      	add	sp, #12
   16198:	f85d fb04 	ldr.w	pc, [sp], #4
   1619c:	1fff95d0 	.word	0x1fff95d0
   161a0:	1fff95cc 	.word	0x1fff95cc

000161a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   161a4:	b500      	push	{lr}
   161a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161a8:	f7eb fb1a 	bl	17e0 <Sys_GetCoreID>
   161ac:	4603      	mov	r3, r0
   161ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   161b0:	4a10      	ldr	r2, [pc, #64]	; (161f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   161b2:	9b01      	ldr	r3, [sp, #4]
   161b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161b8:	2b00      	cmp	r3, #0
   161ba:	d10d      	bne.n	161d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   161bc:	f7ea fbbf 	bl	93e <Port_schm_read_msr>
   161c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   161c2:	9b00      	ldr	r3, [sp, #0]
   161c4:	f003 0301 	and.w	r3, r3, #1
   161c8:	2b00      	cmp	r3, #0
   161ca:	d100      	bne.n	161ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   161cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   161ce:	490a      	ldr	r1, [pc, #40]	; (161f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   161d0:	9b01      	ldr	r3, [sp, #4]
   161d2:	9a00      	ldr	r2, [sp, #0]
   161d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   161d8:	4a06      	ldr	r2, [pc, #24]	; (161f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   161da:	9b01      	ldr	r3, [sp, #4]
   161dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161e0:	1c5a      	adds	r2, r3, #1
   161e2:	4904      	ldr	r1, [pc, #16]	; (161f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   161e4:	9b01      	ldr	r3, [sp, #4]
   161e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   161ea:	bf00      	nop
   161ec:	b003      	add	sp, #12
   161ee:	f85d fb04 	ldr.w	pc, [sp], #4
   161f2:	bf00      	nop
   161f4:	1fff95d8 	.word	0x1fff95d8
   161f8:	1fff95d4 	.word	0x1fff95d4

000161fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   161fc:	b500      	push	{lr}
   161fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16200:	f7eb faee 	bl	17e0 <Sys_GetCoreID>
   16204:	4603      	mov	r3, r0
   16206:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   16208:	4a0d      	ldr	r2, [pc, #52]	; (16240 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1620a:	9b01      	ldr	r3, [sp, #4]
   1620c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16210:	1e5a      	subs	r2, r3, #1
   16212:	490b      	ldr	r1, [pc, #44]	; (16240 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   16214:	9b01      	ldr	r3, [sp, #4]
   16216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1621a:	4a0a      	ldr	r2, [pc, #40]	; (16244 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   1621c:	9b01      	ldr	r3, [sp, #4]
   1621e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16222:	f003 0301 	and.w	r3, r3, #1
   16226:	2b00      	cmp	r3, #0
   16228:	d106      	bne.n	16238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   1622a:	4a05      	ldr	r2, [pc, #20]	; (16240 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1622c:	9b01      	ldr	r3, [sp, #4]
   1622e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16232:	2b00      	cmp	r3, #0
   16234:	d100      	bne.n	16238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16236:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16238:	bf00      	nop
   1623a:	b003      	add	sp, #12
   1623c:	f85d fb04 	ldr.w	pc, [sp], #4
   16240:	1fff95d8 	.word	0x1fff95d8
   16244:	1fff95d4 	.word	0x1fff95d4

00016248 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   16248:	b500      	push	{lr}
   1624a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1624c:	f7eb fac8 	bl	17e0 <Sys_GetCoreID>
   16250:	4603      	mov	r3, r0
   16252:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   16254:	4a10      	ldr	r2, [pc, #64]	; (16298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   16256:	9b01      	ldr	r3, [sp, #4]
   16258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1625c:	2b00      	cmp	r3, #0
   1625e:	d10d      	bne.n	1627c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16260:	f7ea fb6d 	bl	93e <Port_schm_read_msr>
   16264:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16266:	9b00      	ldr	r3, [sp, #0]
   16268:	f003 0301 	and.w	r3, r3, #1
   1626c:	2b00      	cmp	r3, #0
   1626e:	d100      	bne.n	16272 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16270:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   16272:	490a      	ldr	r1, [pc, #40]	; (1629c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   16274:	9b01      	ldr	r3, [sp, #4]
   16276:	9a00      	ldr	r2, [sp, #0]
   16278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   1627c:	4a06      	ldr	r2, [pc, #24]	; (16298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   1627e:	9b01      	ldr	r3, [sp, #4]
   16280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16284:	1c5a      	adds	r2, r3, #1
   16286:	4904      	ldr	r1, [pc, #16]	; (16298 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   16288:	9b01      	ldr	r3, [sp, #4]
   1628a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1628e:	bf00      	nop
   16290:	b003      	add	sp, #12
   16292:	f85d fb04 	ldr.w	pc, [sp], #4
   16296:	bf00      	nop
   16298:	1fff95e0 	.word	0x1fff95e0
   1629c:	1fff95dc 	.word	0x1fff95dc

000162a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   162a0:	b500      	push	{lr}
   162a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162a4:	f7eb fa9c 	bl	17e0 <Sys_GetCoreID>
   162a8:	4603      	mov	r3, r0
   162aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   162ac:	4a0d      	ldr	r2, [pc, #52]	; (162e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   162ae:	9b01      	ldr	r3, [sp, #4]
   162b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162b4:	1e5a      	subs	r2, r3, #1
   162b6:	490b      	ldr	r1, [pc, #44]	; (162e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   162b8:	9b01      	ldr	r3, [sp, #4]
   162ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   162be:	4a0a      	ldr	r2, [pc, #40]	; (162e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   162c0:	9b01      	ldr	r3, [sp, #4]
   162c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162c6:	f003 0301 	and.w	r3, r3, #1
   162ca:	2b00      	cmp	r3, #0
   162cc:	d106      	bne.n	162dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   162ce:	4a05      	ldr	r2, [pc, #20]	; (162e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   162d0:	9b01      	ldr	r3, [sp, #4]
   162d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162d6:	2b00      	cmp	r3, #0
   162d8:	d100      	bne.n	162dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   162da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   162dc:	bf00      	nop
   162de:	b003      	add	sp, #12
   162e0:	f85d fb04 	ldr.w	pc, [sp], #4
   162e4:	1fff95e0 	.word	0x1fff95e0
   162e8:	1fff95dc 	.word	0x1fff95dc

000162ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   162ec:	b500      	push	{lr}
   162ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162f0:	f7eb fa76 	bl	17e0 <Sys_GetCoreID>
   162f4:	4603      	mov	r3, r0
   162f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   162f8:	4a10      	ldr	r2, [pc, #64]	; (1633c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   162fa:	9b01      	ldr	r3, [sp, #4]
   162fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16300:	2b00      	cmp	r3, #0
   16302:	d10d      	bne.n	16320 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16304:	f7ea fb1b 	bl	93e <Port_schm_read_msr>
   16308:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1630a:	9b00      	ldr	r3, [sp, #0]
   1630c:	f003 0301 	and.w	r3, r3, #1
   16310:	2b00      	cmp	r3, #0
   16312:	d100      	bne.n	16316 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16314:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   16316:	490a      	ldr	r1, [pc, #40]	; (16340 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   16318:	9b01      	ldr	r3, [sp, #4]
   1631a:	9a00      	ldr	r2, [sp, #0]
   1631c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   16320:	4a06      	ldr	r2, [pc, #24]	; (1633c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   16322:	9b01      	ldr	r3, [sp, #4]
   16324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16328:	1c5a      	adds	r2, r3, #1
   1632a:	4904      	ldr	r1, [pc, #16]	; (1633c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1632c:	9b01      	ldr	r3, [sp, #4]
   1632e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16332:	bf00      	nop
   16334:	b003      	add	sp, #12
   16336:	f85d fb04 	ldr.w	pc, [sp], #4
   1633a:	bf00      	nop
   1633c:	1fff95e8 	.word	0x1fff95e8
   16340:	1fff95e4 	.word	0x1fff95e4

00016344 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   16344:	b500      	push	{lr}
   16346:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16348:	f7eb fa4a 	bl	17e0 <Sys_GetCoreID>
   1634c:	4603      	mov	r3, r0
   1634e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   16350:	4a0d      	ldr	r2, [pc, #52]	; (16388 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   16352:	9b01      	ldr	r3, [sp, #4]
   16354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16358:	1e5a      	subs	r2, r3, #1
   1635a:	490b      	ldr	r1, [pc, #44]	; (16388 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   1635c:	9b01      	ldr	r3, [sp, #4]
   1635e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   16362:	4a0a      	ldr	r2, [pc, #40]	; (1638c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   16364:	9b01      	ldr	r3, [sp, #4]
   16366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1636a:	f003 0301 	and.w	r3, r3, #1
   1636e:	2b00      	cmp	r3, #0
   16370:	d106      	bne.n	16380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   16372:	4a05      	ldr	r2, [pc, #20]	; (16388 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   16374:	9b01      	ldr	r3, [sp, #4]
   16376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1637a:	2b00      	cmp	r3, #0
   1637c:	d100      	bne.n	16380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1637e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16380:	bf00      	nop
   16382:	b003      	add	sp, #12
   16384:	f85d fb04 	ldr.w	pc, [sp], #4
   16388:	1fff95e8 	.word	0x1fff95e8
   1638c:	1fff95e4 	.word	0x1fff95e4

00016390 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   16390:	b500      	push	{lr}
   16392:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16394:	f7eb fa24 	bl	17e0 <Sys_GetCoreID>
   16398:	4603      	mov	r3, r0
   1639a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   1639c:	4a10      	ldr	r2, [pc, #64]	; (163e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1639e:	9b01      	ldr	r3, [sp, #4]
   163a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163a4:	2b00      	cmp	r3, #0
   163a6:	d10d      	bne.n	163c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   163a8:	f7ea fac9 	bl	93e <Port_schm_read_msr>
   163ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   163ae:	9b00      	ldr	r3, [sp, #0]
   163b0:	f003 0301 	and.w	r3, r3, #1
   163b4:	2b00      	cmp	r3, #0
   163b6:	d100      	bne.n	163ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   163b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   163ba:	490a      	ldr	r1, [pc, #40]	; (163e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   163bc:	9b01      	ldr	r3, [sp, #4]
   163be:	9a00      	ldr	r2, [sp, #0]
   163c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   163c4:	4a06      	ldr	r2, [pc, #24]	; (163e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   163c6:	9b01      	ldr	r3, [sp, #4]
   163c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163cc:	1c5a      	adds	r2, r3, #1
   163ce:	4904      	ldr	r1, [pc, #16]	; (163e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   163d0:	9b01      	ldr	r3, [sp, #4]
   163d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   163d6:	bf00      	nop
   163d8:	b003      	add	sp, #12
   163da:	f85d fb04 	ldr.w	pc, [sp], #4
   163de:	bf00      	nop
   163e0:	1fff95f0 	.word	0x1fff95f0
   163e4:	1fff95ec 	.word	0x1fff95ec

000163e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   163e8:	b500      	push	{lr}
   163ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   163ec:	f7eb f9f8 	bl	17e0 <Sys_GetCoreID>
   163f0:	4603      	mov	r3, r0
   163f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   163f4:	4a0d      	ldr	r2, [pc, #52]	; (1642c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   163f6:	9b01      	ldr	r3, [sp, #4]
   163f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163fc:	1e5a      	subs	r2, r3, #1
   163fe:	490b      	ldr	r1, [pc, #44]	; (1642c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   16400:	9b01      	ldr	r3, [sp, #4]
   16402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   16406:	4a0a      	ldr	r2, [pc, #40]	; (16430 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   16408:	9b01      	ldr	r3, [sp, #4]
   1640a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1640e:	f003 0301 	and.w	r3, r3, #1
   16412:	2b00      	cmp	r3, #0
   16414:	d106      	bne.n	16424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   16416:	4a05      	ldr	r2, [pc, #20]	; (1642c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   16418:	9b01      	ldr	r3, [sp, #4]
   1641a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1641e:	2b00      	cmp	r3, #0
   16420:	d100      	bne.n	16424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16422:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16424:	bf00      	nop
   16426:	b003      	add	sp, #12
   16428:	f85d fb04 	ldr.w	pc, [sp], #4
   1642c:	1fff95f0 	.word	0x1fff95f0
   16430:	1fff95ec 	.word	0x1fff95ec

00016434 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   16434:	b500      	push	{lr}
   16436:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16438:	f7eb f9d2 	bl	17e0 <Sys_GetCoreID>
   1643c:	4603      	mov	r3, r0
   1643e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   16440:	4a10      	ldr	r2, [pc, #64]	; (16484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   16442:	9b01      	ldr	r3, [sp, #4]
   16444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16448:	2b00      	cmp	r3, #0
   1644a:	d10d      	bne.n	16468 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1644c:	f7ea fa77 	bl	93e <Port_schm_read_msr>
   16450:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16452:	9b00      	ldr	r3, [sp, #0]
   16454:	f003 0301 	and.w	r3, r3, #1
   16458:	2b00      	cmp	r3, #0
   1645a:	d100      	bne.n	1645e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1645c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   1645e:	490a      	ldr	r1, [pc, #40]	; (16488 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   16460:	9b01      	ldr	r3, [sp, #4]
   16462:	9a00      	ldr	r2, [sp, #0]
   16464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   16468:	4a06      	ldr	r2, [pc, #24]	; (16484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   1646a:	9b01      	ldr	r3, [sp, #4]
   1646c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16470:	1c5a      	adds	r2, r3, #1
   16472:	4904      	ldr	r1, [pc, #16]	; (16484 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   16474:	9b01      	ldr	r3, [sp, #4]
   16476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1647a:	bf00      	nop
   1647c:	b003      	add	sp, #12
   1647e:	f85d fb04 	ldr.w	pc, [sp], #4
   16482:	bf00      	nop
   16484:	1fff95f8 	.word	0x1fff95f8
   16488:	1fff95f4 	.word	0x1fff95f4

0001648c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   1648c:	b500      	push	{lr}
   1648e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16490:	f7eb f9a6 	bl	17e0 <Sys_GetCoreID>
   16494:	4603      	mov	r3, r0
   16496:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   16498:	4a0d      	ldr	r2, [pc, #52]	; (164d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1649a:	9b01      	ldr	r3, [sp, #4]
   1649c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164a0:	1e5a      	subs	r2, r3, #1
   164a2:	490b      	ldr	r1, [pc, #44]	; (164d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   164a4:	9b01      	ldr	r3, [sp, #4]
   164a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   164aa:	4a0a      	ldr	r2, [pc, #40]	; (164d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   164ac:	9b01      	ldr	r3, [sp, #4]
   164ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164b2:	f003 0301 	and.w	r3, r3, #1
   164b6:	2b00      	cmp	r3, #0
   164b8:	d106      	bne.n	164c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   164ba:	4a05      	ldr	r2, [pc, #20]	; (164d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   164bc:	9b01      	ldr	r3, [sp, #4]
   164be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164c2:	2b00      	cmp	r3, #0
   164c4:	d100      	bne.n	164c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   164c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   164c8:	bf00      	nop
   164ca:	b003      	add	sp, #12
   164cc:	f85d fb04 	ldr.w	pc, [sp], #4
   164d0:	1fff95f8 	.word	0x1fff95f8
   164d4:	1fff95f4 	.word	0x1fff95f4

000164d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   164d8:	b500      	push	{lr}
   164da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   164dc:	f7eb f980 	bl	17e0 <Sys_GetCoreID>
   164e0:	4603      	mov	r3, r0
   164e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   164e4:	4a10      	ldr	r2, [pc, #64]	; (16528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   164e6:	9b01      	ldr	r3, [sp, #4]
   164e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164ec:	2b00      	cmp	r3, #0
   164ee:	d10d      	bne.n	1650c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   164f0:	f7ea fa25 	bl	93e <Port_schm_read_msr>
   164f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   164f6:	9b00      	ldr	r3, [sp, #0]
   164f8:	f003 0301 	and.w	r3, r3, #1
   164fc:	2b00      	cmp	r3, #0
   164fe:	d100      	bne.n	16502 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16500:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   16502:	490a      	ldr	r1, [pc, #40]	; (1652c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   16504:	9b01      	ldr	r3, [sp, #4]
   16506:	9a00      	ldr	r2, [sp, #0]
   16508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   1650c:	4a06      	ldr	r2, [pc, #24]	; (16528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   1650e:	9b01      	ldr	r3, [sp, #4]
   16510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16514:	1c5a      	adds	r2, r3, #1
   16516:	4904      	ldr	r1, [pc, #16]	; (16528 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   16518:	9b01      	ldr	r3, [sp, #4]
   1651a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1651e:	bf00      	nop
   16520:	b003      	add	sp, #12
   16522:	f85d fb04 	ldr.w	pc, [sp], #4
   16526:	bf00      	nop
   16528:	1fff9600 	.word	0x1fff9600
   1652c:	1fff95fc 	.word	0x1fff95fc

00016530 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   16530:	b500      	push	{lr}
   16532:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16534:	f7eb f954 	bl	17e0 <Sys_GetCoreID>
   16538:	4603      	mov	r3, r0
   1653a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   1653c:	4a0d      	ldr	r2, [pc, #52]	; (16574 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   1653e:	9b01      	ldr	r3, [sp, #4]
   16540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16544:	1e5a      	subs	r2, r3, #1
   16546:	490b      	ldr	r1, [pc, #44]	; (16574 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   16548:	9b01      	ldr	r3, [sp, #4]
   1654a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   1654e:	4a0a      	ldr	r2, [pc, #40]	; (16578 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   16550:	9b01      	ldr	r3, [sp, #4]
   16552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16556:	f003 0301 	and.w	r3, r3, #1
   1655a:	2b00      	cmp	r3, #0
   1655c:	d106      	bne.n	1656c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   1655e:	4a05      	ldr	r2, [pc, #20]	; (16574 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   16560:	9b01      	ldr	r3, [sp, #4]
   16562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16566:	2b00      	cmp	r3, #0
   16568:	d100      	bne.n	1656c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1656a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1656c:	bf00      	nop
   1656e:	b003      	add	sp, #12
   16570:	f85d fb04 	ldr.w	pc, [sp], #4
   16574:	1fff9600 	.word	0x1fff9600
   16578:	1fff95fc 	.word	0x1fff95fc

0001657c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   1657c:	b500      	push	{lr}
   1657e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16580:	f7eb f92e 	bl	17e0 <Sys_GetCoreID>
   16584:	4603      	mov	r3, r0
   16586:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   16588:	4a10      	ldr	r2, [pc, #64]	; (165cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1658a:	9b01      	ldr	r3, [sp, #4]
   1658c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16590:	2b00      	cmp	r3, #0
   16592:	d10d      	bne.n	165b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16594:	f7ea f9d3 	bl	93e <Port_schm_read_msr>
   16598:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1659a:	9b00      	ldr	r3, [sp, #0]
   1659c:	f003 0301 	and.w	r3, r3, #1
   165a0:	2b00      	cmp	r3, #0
   165a2:	d100      	bne.n	165a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   165a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   165a6:	490a      	ldr	r1, [pc, #40]	; (165d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   165a8:	9b01      	ldr	r3, [sp, #4]
   165aa:	9a00      	ldr	r2, [sp, #0]
   165ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   165b0:	4a06      	ldr	r2, [pc, #24]	; (165cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   165b2:	9b01      	ldr	r3, [sp, #4]
   165b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165b8:	1c5a      	adds	r2, r3, #1
   165ba:	4904      	ldr	r1, [pc, #16]	; (165cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   165bc:	9b01      	ldr	r3, [sp, #4]
   165be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   165c2:	bf00      	nop
   165c4:	b003      	add	sp, #12
   165c6:	f85d fb04 	ldr.w	pc, [sp], #4
   165ca:	bf00      	nop
   165cc:	1fff9608 	.word	0x1fff9608
   165d0:	1fff9604 	.word	0x1fff9604

000165d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   165d4:	b500      	push	{lr}
   165d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   165d8:	f7eb f902 	bl	17e0 <Sys_GetCoreID>
   165dc:	4603      	mov	r3, r0
   165de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   165e0:	4a0d      	ldr	r2, [pc, #52]	; (16618 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   165e2:	9b01      	ldr	r3, [sp, #4]
   165e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165e8:	1e5a      	subs	r2, r3, #1
   165ea:	490b      	ldr	r1, [pc, #44]	; (16618 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   165ec:	9b01      	ldr	r3, [sp, #4]
   165ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   165f2:	4a0a      	ldr	r2, [pc, #40]	; (1661c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   165f4:	9b01      	ldr	r3, [sp, #4]
   165f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165fa:	f003 0301 	and.w	r3, r3, #1
   165fe:	2b00      	cmp	r3, #0
   16600:	d106      	bne.n	16610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   16602:	4a05      	ldr	r2, [pc, #20]	; (16618 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   16604:	9b01      	ldr	r3, [sp, #4]
   16606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1660a:	2b00      	cmp	r3, #0
   1660c:	d100      	bne.n	16610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1660e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16610:	bf00      	nop
   16612:	b003      	add	sp, #12
   16614:	f85d fb04 	ldr.w	pc, [sp], #4
   16618:	1fff9608 	.word	0x1fff9608
   1661c:	1fff9604 	.word	0x1fff9604

00016620 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   16620:	b500      	push	{lr}
   16622:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16624:	f7eb f8dc 	bl	17e0 <Sys_GetCoreID>
   16628:	4603      	mov	r3, r0
   1662a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   1662c:	4a10      	ldr	r2, [pc, #64]	; (16670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   1662e:	9b01      	ldr	r3, [sp, #4]
   16630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16634:	2b00      	cmp	r3, #0
   16636:	d10d      	bne.n	16654 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16638:	f7ea f981 	bl	93e <Port_schm_read_msr>
   1663c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1663e:	9b00      	ldr	r3, [sp, #0]
   16640:	f003 0301 	and.w	r3, r3, #1
   16644:	2b00      	cmp	r3, #0
   16646:	d100      	bne.n	1664a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16648:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   1664a:	490a      	ldr	r1, [pc, #40]	; (16674 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   1664c:	9b01      	ldr	r3, [sp, #4]
   1664e:	9a00      	ldr	r2, [sp, #0]
   16650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   16654:	4a06      	ldr	r2, [pc, #24]	; (16670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   16656:	9b01      	ldr	r3, [sp, #4]
   16658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1665c:	1c5a      	adds	r2, r3, #1
   1665e:	4904      	ldr	r1, [pc, #16]	; (16670 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   16660:	9b01      	ldr	r3, [sp, #4]
   16662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16666:	bf00      	nop
   16668:	b003      	add	sp, #12
   1666a:	f85d fb04 	ldr.w	pc, [sp], #4
   1666e:	bf00      	nop
   16670:	1fff9610 	.word	0x1fff9610
   16674:	1fff960c 	.word	0x1fff960c

00016678 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   16678:	b500      	push	{lr}
   1667a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1667c:	f7eb f8b0 	bl	17e0 <Sys_GetCoreID>
   16680:	4603      	mov	r3, r0
   16682:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   16684:	4a0d      	ldr	r2, [pc, #52]	; (166bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   16686:	9b01      	ldr	r3, [sp, #4]
   16688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1668c:	1e5a      	subs	r2, r3, #1
   1668e:	490b      	ldr	r1, [pc, #44]	; (166bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   16690:	9b01      	ldr	r3, [sp, #4]
   16692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   16696:	4a0a      	ldr	r2, [pc, #40]	; (166c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   16698:	9b01      	ldr	r3, [sp, #4]
   1669a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1669e:	f003 0301 	and.w	r3, r3, #1
   166a2:	2b00      	cmp	r3, #0
   166a4:	d106      	bne.n	166b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   166a6:	4a05      	ldr	r2, [pc, #20]	; (166bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   166a8:	9b01      	ldr	r3, [sp, #4]
   166aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166ae:	2b00      	cmp	r3, #0
   166b0:	d100      	bne.n	166b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   166b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   166b4:	bf00      	nop
   166b6:	b003      	add	sp, #12
   166b8:	f85d fb04 	ldr.w	pc, [sp], #4
   166bc:	1fff9610 	.word	0x1fff9610
   166c0:	1fff960c 	.word	0x1fff960c

000166c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   166c4:	b500      	push	{lr}
   166c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   166c8:	f7eb f88a 	bl	17e0 <Sys_GetCoreID>
   166cc:	4603      	mov	r3, r0
   166ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   166d0:	4a10      	ldr	r2, [pc, #64]	; (16714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   166d2:	9b01      	ldr	r3, [sp, #4]
   166d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166d8:	2b00      	cmp	r3, #0
   166da:	d10d      	bne.n	166f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   166dc:	f7ea f92f 	bl	93e <Port_schm_read_msr>
   166e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   166e2:	9b00      	ldr	r3, [sp, #0]
   166e4:	f003 0301 	and.w	r3, r3, #1
   166e8:	2b00      	cmp	r3, #0
   166ea:	d100      	bne.n	166ee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   166ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   166ee:	490a      	ldr	r1, [pc, #40]	; (16718 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   166f0:	9b01      	ldr	r3, [sp, #4]
   166f2:	9a00      	ldr	r2, [sp, #0]
   166f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   166f8:	4a06      	ldr	r2, [pc, #24]	; (16714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   166fa:	9b01      	ldr	r3, [sp, #4]
   166fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16700:	1c5a      	adds	r2, r3, #1
   16702:	4904      	ldr	r1, [pc, #16]	; (16714 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   16704:	9b01      	ldr	r3, [sp, #4]
   16706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1670a:	bf00      	nop
   1670c:	b003      	add	sp, #12
   1670e:	f85d fb04 	ldr.w	pc, [sp], #4
   16712:	bf00      	nop
   16714:	1fff9618 	.word	0x1fff9618
   16718:	1fff9614 	.word	0x1fff9614

0001671c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   1671c:	b500      	push	{lr}
   1671e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16720:	f7eb f85e 	bl	17e0 <Sys_GetCoreID>
   16724:	4603      	mov	r3, r0
   16726:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   16728:	4a0d      	ldr	r2, [pc, #52]	; (16760 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   1672a:	9b01      	ldr	r3, [sp, #4]
   1672c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16730:	1e5a      	subs	r2, r3, #1
   16732:	490b      	ldr	r1, [pc, #44]	; (16760 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   16734:	9b01      	ldr	r3, [sp, #4]
   16736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   1673a:	4a0a      	ldr	r2, [pc, #40]	; (16764 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   1673c:	9b01      	ldr	r3, [sp, #4]
   1673e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16742:	f003 0301 	and.w	r3, r3, #1
   16746:	2b00      	cmp	r3, #0
   16748:	d106      	bne.n	16758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   1674a:	4a05      	ldr	r2, [pc, #20]	; (16760 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   1674c:	9b01      	ldr	r3, [sp, #4]
   1674e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16752:	2b00      	cmp	r3, #0
   16754:	d100      	bne.n	16758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16756:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16758:	bf00      	nop
   1675a:	b003      	add	sp, #12
   1675c:	f85d fb04 	ldr.w	pc, [sp], #4
   16760:	1fff9618 	.word	0x1fff9618
   16764:	1fff9614 	.word	0x1fff9614

00016768 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   16768:	b500      	push	{lr}
   1676a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1676c:	f7eb f838 	bl	17e0 <Sys_GetCoreID>
   16770:	4603      	mov	r3, r0
   16772:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   16774:	4a10      	ldr	r2, [pc, #64]	; (167b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   16776:	9b01      	ldr	r3, [sp, #4]
   16778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1677c:	2b00      	cmp	r3, #0
   1677e:	d10d      	bne.n	1679c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16780:	f7ea f8dd 	bl	93e <Port_schm_read_msr>
   16784:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16786:	9b00      	ldr	r3, [sp, #0]
   16788:	f003 0301 	and.w	r3, r3, #1
   1678c:	2b00      	cmp	r3, #0
   1678e:	d100      	bne.n	16792 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16790:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   16792:	490a      	ldr	r1, [pc, #40]	; (167bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   16794:	9b01      	ldr	r3, [sp, #4]
   16796:	9a00      	ldr	r2, [sp, #0]
   16798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   1679c:	4a06      	ldr	r2, [pc, #24]	; (167b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   1679e:	9b01      	ldr	r3, [sp, #4]
   167a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167a4:	1c5a      	adds	r2, r3, #1
   167a6:	4904      	ldr	r1, [pc, #16]	; (167b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   167a8:	9b01      	ldr	r3, [sp, #4]
   167aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   167ae:	bf00      	nop
   167b0:	b003      	add	sp, #12
   167b2:	f85d fb04 	ldr.w	pc, [sp], #4
   167b6:	bf00      	nop
   167b8:	1fff9620 	.word	0x1fff9620
   167bc:	1fff961c 	.word	0x1fff961c

000167c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   167c0:	b500      	push	{lr}
   167c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167c4:	f7eb f80c 	bl	17e0 <Sys_GetCoreID>
   167c8:	4603      	mov	r3, r0
   167ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   167cc:	4a0d      	ldr	r2, [pc, #52]	; (16804 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   167ce:	9b01      	ldr	r3, [sp, #4]
   167d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167d4:	1e5a      	subs	r2, r3, #1
   167d6:	490b      	ldr	r1, [pc, #44]	; (16804 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   167d8:	9b01      	ldr	r3, [sp, #4]
   167da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   167de:	4a0a      	ldr	r2, [pc, #40]	; (16808 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   167e0:	9b01      	ldr	r3, [sp, #4]
   167e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167e6:	f003 0301 	and.w	r3, r3, #1
   167ea:	2b00      	cmp	r3, #0
   167ec:	d106      	bne.n	167fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   167ee:	4a05      	ldr	r2, [pc, #20]	; (16804 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   167f0:	9b01      	ldr	r3, [sp, #4]
   167f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167f6:	2b00      	cmp	r3, #0
   167f8:	d100      	bne.n	167fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   167fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   167fc:	bf00      	nop
   167fe:	b003      	add	sp, #12
   16800:	f85d fb04 	ldr.w	pc, [sp], #4
   16804:	1fff9620 	.word	0x1fff9620
   16808:	1fff961c 	.word	0x1fff961c

0001680c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   1680c:	b500      	push	{lr}
   1680e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16810:	f7ea ffe6 	bl	17e0 <Sys_GetCoreID>
   16814:	4603      	mov	r3, r0
   16816:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   16818:	4a10      	ldr	r2, [pc, #64]	; (1685c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   1681a:	9b01      	ldr	r3, [sp, #4]
   1681c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16820:	2b00      	cmp	r3, #0
   16822:	d10d      	bne.n	16840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16824:	f7ea f88b 	bl	93e <Port_schm_read_msr>
   16828:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1682a:	9b00      	ldr	r3, [sp, #0]
   1682c:	f003 0301 	and.w	r3, r3, #1
   16830:	2b00      	cmp	r3, #0
   16832:	d100      	bne.n	16836 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16834:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   16836:	490a      	ldr	r1, [pc, #40]	; (16860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   16838:	9b01      	ldr	r3, [sp, #4]
   1683a:	9a00      	ldr	r2, [sp, #0]
   1683c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   16840:	4a06      	ldr	r2, [pc, #24]	; (1685c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   16842:	9b01      	ldr	r3, [sp, #4]
   16844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16848:	1c5a      	adds	r2, r3, #1
   1684a:	4904      	ldr	r1, [pc, #16]	; (1685c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   1684c:	9b01      	ldr	r3, [sp, #4]
   1684e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16852:	bf00      	nop
   16854:	b003      	add	sp, #12
   16856:	f85d fb04 	ldr.w	pc, [sp], #4
   1685a:	bf00      	nop
   1685c:	1fff9628 	.word	0x1fff9628
   16860:	1fff9624 	.word	0x1fff9624

00016864 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   16864:	b500      	push	{lr}
   16866:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16868:	f7ea ffba 	bl	17e0 <Sys_GetCoreID>
   1686c:	4603      	mov	r3, r0
   1686e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   16870:	4a0d      	ldr	r2, [pc, #52]	; (168a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   16872:	9b01      	ldr	r3, [sp, #4]
   16874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16878:	1e5a      	subs	r2, r3, #1
   1687a:	490b      	ldr	r1, [pc, #44]	; (168a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1687c:	9b01      	ldr	r3, [sp, #4]
   1687e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   16882:	4a0a      	ldr	r2, [pc, #40]	; (168ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   16884:	9b01      	ldr	r3, [sp, #4]
   16886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1688a:	f003 0301 	and.w	r3, r3, #1
   1688e:	2b00      	cmp	r3, #0
   16890:	d106      	bne.n	168a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   16892:	4a05      	ldr	r2, [pc, #20]	; (168a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   16894:	9b01      	ldr	r3, [sp, #4]
   16896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1689a:	2b00      	cmp	r3, #0
   1689c:	d100      	bne.n	168a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1689e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   168a0:	bf00      	nop
   168a2:	b003      	add	sp, #12
   168a4:	f85d fb04 	ldr.w	pc, [sp], #4
   168a8:	1fff9628 	.word	0x1fff9628
   168ac:	1fff9624 	.word	0x1fff9624

000168b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   168b0:	b500      	push	{lr}
   168b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168b4:	f7ea ff94 	bl	17e0 <Sys_GetCoreID>
   168b8:	4603      	mov	r3, r0
   168ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId])
   168bc:	4a10      	ldr	r2, [pc, #64]	; (16900 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   168be:	9b01      	ldr	r3, [sp, #4]
   168c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168c4:	2b00      	cmp	r3, #0
   168c6:	d10d      	bne.n	168e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   168c8:	f7ea f842 	bl	950 <Pwm_schm_read_msr>
   168cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   168ce:	9b00      	ldr	r3, [sp, #0]
   168d0:	f003 0301 	and.w	r3, r3, #1
   168d4:	2b00      	cmp	r3, #0
   168d6:	d100      	bne.n	168da <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   168d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   168da:	490a      	ldr	r1, [pc, #40]	; (16904 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
   168dc:	9b01      	ldr	r3, [sp, #4]
   168de:	9a00      	ldr	r2, [sp, #0]
   168e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]++;
   168e4:	4a06      	ldr	r2, [pc, #24]	; (16900 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   168e6:	9b01      	ldr	r3, [sp, #4]
   168e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168ec:	1c5a      	adds	r2, r3, #1
   168ee:	4904      	ldr	r1, [pc, #16]	; (16900 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   168f0:	9b01      	ldr	r3, [sp, #4]
   168f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   168f6:	bf00      	nop
   168f8:	b003      	add	sp, #12
   168fa:	f85d fb04 	ldr.w	pc, [sp], #4
   168fe:	bf00      	nop
   16900:	1fff9630 	.word	0x1fff9630
   16904:	1fff962c 	.word	0x1fff962c

00016908 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   16908:	b500      	push	{lr}
   1690a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1690c:	f7ea ff68 	bl	17e0 <Sys_GetCoreID>
   16910:	4603      	mov	r3, r0
   16912:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]--;
   16914:	4a0d      	ldr	r2, [pc, #52]	; (1694c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   16916:	9b01      	ldr	r3, [sp, #4]
   16918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1691c:	1e5a      	subs	r2, r3, #1
   1691e:	490b      	ldr	r1, [pc, #44]	; (1694c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   16920:	9b01      	ldr	r3, [sp, #4]
   16922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   16926:	4a0a      	ldr	r2, [pc, #40]	; (16950 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
   16928:	9b01      	ldr	r3, [sp, #4]
   1692a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1692e:	f003 0301 	and.w	r3, r3, #1
   16932:	2b00      	cmp	r3, #0
   16934:	d106      	bne.n	16944 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
   16936:	4a05      	ldr	r2, [pc, #20]	; (1694c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   16938:	9b01      	ldr	r3, [sp, #4]
   1693a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1693e:	2b00      	cmp	r3, #0
   16940:	d100      	bne.n	16944 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16942:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16944:	bf00      	nop
   16946:	b003      	add	sp, #12
   16948:	f85d fb04 	ldr.w	pc, [sp], #4
   1694c:	1fff9630 	.word	0x1fff9630
   16950:	1fff962c 	.word	0x1fff962c

00016954 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   16954:	b500      	push	{lr}
   16956:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16958:	f7ea ff42 	bl	17e0 <Sys_GetCoreID>
   1695c:	4603      	mov	r3, r0
   1695e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId])
   16960:	4a10      	ldr	r2, [pc, #64]	; (169a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   16962:	9b01      	ldr	r3, [sp, #4]
   16964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16968:	2b00      	cmp	r3, #0
   1696a:	d10d      	bne.n	16988 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1696c:	f7e9 fff0 	bl	950 <Pwm_schm_read_msr>
   16970:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16972:	9b00      	ldr	r3, [sp, #0]
   16974:	f003 0301 	and.w	r3, r3, #1
   16978:	2b00      	cmp	r3, #0
   1697a:	d100      	bne.n	1697e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1697c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1697e:	490a      	ldr	r1, [pc, #40]	; (169a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
   16980:	9b01      	ldr	r3, [sp, #4]
   16982:	9a00      	ldr	r2, [sp, #0]
   16984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]++;
   16988:	4a06      	ldr	r2, [pc, #24]	; (169a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   1698a:	9b01      	ldr	r3, [sp, #4]
   1698c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16990:	1c5a      	adds	r2, r3, #1
   16992:	4904      	ldr	r1, [pc, #16]	; (169a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   16994:	9b01      	ldr	r3, [sp, #4]
   16996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1699a:	bf00      	nop
   1699c:	b003      	add	sp, #12
   1699e:	f85d fb04 	ldr.w	pc, [sp], #4
   169a2:	bf00      	nop
   169a4:	1fff9638 	.word	0x1fff9638
   169a8:	1fff9634 	.word	0x1fff9634

000169ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   169ac:	b500      	push	{lr}
   169ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   169b0:	f7ea ff16 	bl	17e0 <Sys_GetCoreID>
   169b4:	4603      	mov	r3, r0
   169b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]--;
   169b8:	4a0d      	ldr	r2, [pc, #52]	; (169f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   169ba:	9b01      	ldr	r3, [sp, #4]
   169bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169c0:	1e5a      	subs	r2, r3, #1
   169c2:	490b      	ldr	r1, [pc, #44]	; (169f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   169c4:	9b01      	ldr	r3, [sp, #4]
   169c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   169ca:	4a0a      	ldr	r2, [pc, #40]	; (169f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
   169cc:	9b01      	ldr	r3, [sp, #4]
   169ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169d2:	f003 0301 	and.w	r3, r3, #1
   169d6:	2b00      	cmp	r3, #0
   169d8:	d106      	bne.n	169e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
   169da:	4a05      	ldr	r2, [pc, #20]	; (169f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   169dc:	9b01      	ldr	r3, [sp, #4]
   169de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169e2:	2b00      	cmp	r3, #0
   169e4:	d100      	bne.n	169e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   169e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   169e8:	bf00      	nop
   169ea:	b003      	add	sp, #12
   169ec:	f85d fb04 	ldr.w	pc, [sp], #4
   169f0:	1fff9638 	.word	0x1fff9638
   169f4:	1fff9634 	.word	0x1fff9634

000169f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   169f8:	b500      	push	{lr}
   169fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   169fc:	f7ea fef0 	bl	17e0 <Sys_GetCoreID>
   16a00:	4603      	mov	r3, r0
   16a02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId])
   16a04:	4a10      	ldr	r2, [pc, #64]	; (16a48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16a06:	9b01      	ldr	r3, [sp, #4]
   16a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a0c:	2b00      	cmp	r3, #0
   16a0e:	d10d      	bne.n	16a2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16a10:	f7e9 ff9e 	bl	950 <Pwm_schm_read_msr>
   16a14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16a16:	9b00      	ldr	r3, [sp, #0]
   16a18:	f003 0301 	and.w	r3, r3, #1
   16a1c:	2b00      	cmp	r3, #0
   16a1e:	d100      	bne.n	16a22 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16a20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   16a22:	490a      	ldr	r1, [pc, #40]	; (16a4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
   16a24:	9b01      	ldr	r3, [sp, #4]
   16a26:	9a00      	ldr	r2, [sp, #0]
   16a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]++;
   16a2c:	4a06      	ldr	r2, [pc, #24]	; (16a48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16a2e:	9b01      	ldr	r3, [sp, #4]
   16a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a34:	1c5a      	adds	r2, r3, #1
   16a36:	4904      	ldr	r1, [pc, #16]	; (16a48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16a38:	9b01      	ldr	r3, [sp, #4]
   16a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16a3e:	bf00      	nop
   16a40:	b003      	add	sp, #12
   16a42:	f85d fb04 	ldr.w	pc, [sp], #4
   16a46:	bf00      	nop
   16a48:	1fff9640 	.word	0x1fff9640
   16a4c:	1fff963c 	.word	0x1fff963c

00016a50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   16a50:	b500      	push	{lr}
   16a52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16a54:	f7ea fec4 	bl	17e0 <Sys_GetCoreID>
   16a58:	4603      	mov	r3, r0
   16a5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]--;
   16a5c:	4a0d      	ldr	r2, [pc, #52]	; (16a94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16a5e:	9b01      	ldr	r3, [sp, #4]
   16a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a64:	1e5a      	subs	r2, r3, #1
   16a66:	490b      	ldr	r1, [pc, #44]	; (16a94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16a68:	9b01      	ldr	r3, [sp, #4]
   16a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   16a6e:	4a0a      	ldr	r2, [pc, #40]	; (16a98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
   16a70:	9b01      	ldr	r3, [sp, #4]
   16a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a76:	f003 0301 	and.w	r3, r3, #1
   16a7a:	2b00      	cmp	r3, #0
   16a7c:	d106      	bne.n	16a8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
   16a7e:	4a05      	ldr	r2, [pc, #20]	; (16a94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16a80:	9b01      	ldr	r3, [sp, #4]
   16a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a86:	2b00      	cmp	r3, #0
   16a88:	d100      	bne.n	16a8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16a8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16a8c:	bf00      	nop
   16a8e:	b003      	add	sp, #12
   16a90:	f85d fb04 	ldr.w	pc, [sp], #4
   16a94:	1fff9640 	.word	0x1fff9640
   16a98:	1fff963c 	.word	0x1fff963c

00016a9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   16a9c:	b500      	push	{lr}
   16a9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16aa0:	f7ea fe9e 	bl	17e0 <Sys_GetCoreID>
   16aa4:	4603      	mov	r3, r0
   16aa6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId])
   16aa8:	4a10      	ldr	r2, [pc, #64]	; (16aec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16aaa:	9b01      	ldr	r3, [sp, #4]
   16aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ab0:	2b00      	cmp	r3, #0
   16ab2:	d10d      	bne.n	16ad0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16ab4:	f7e9 ff4c 	bl	950 <Pwm_schm_read_msr>
   16ab8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16aba:	9b00      	ldr	r3, [sp, #0]
   16abc:	f003 0301 	and.w	r3, r3, #1
   16ac0:	2b00      	cmp	r3, #0
   16ac2:	d100      	bne.n	16ac6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16ac4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   16ac6:	490a      	ldr	r1, [pc, #40]	; (16af0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
   16ac8:	9b01      	ldr	r3, [sp, #4]
   16aca:	9a00      	ldr	r2, [sp, #0]
   16acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]++;
   16ad0:	4a06      	ldr	r2, [pc, #24]	; (16aec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16ad2:	9b01      	ldr	r3, [sp, #4]
   16ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ad8:	1c5a      	adds	r2, r3, #1
   16ada:	4904      	ldr	r1, [pc, #16]	; (16aec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16adc:	9b01      	ldr	r3, [sp, #4]
   16ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16ae2:	bf00      	nop
   16ae4:	b003      	add	sp, #12
   16ae6:	f85d fb04 	ldr.w	pc, [sp], #4
   16aea:	bf00      	nop
   16aec:	1fff9648 	.word	0x1fff9648
   16af0:	1fff9644 	.word	0x1fff9644

00016af4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   16af4:	b500      	push	{lr}
   16af6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16af8:	f7ea fe72 	bl	17e0 <Sys_GetCoreID>
   16afc:	4603      	mov	r3, r0
   16afe:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]--;
   16b00:	4a0d      	ldr	r2, [pc, #52]	; (16b38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16b02:	9b01      	ldr	r3, [sp, #4]
   16b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b08:	1e5a      	subs	r2, r3, #1
   16b0a:	490b      	ldr	r1, [pc, #44]	; (16b38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16b0c:	9b01      	ldr	r3, [sp, #4]
   16b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   16b12:	4a0a      	ldr	r2, [pc, #40]	; (16b3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
   16b14:	9b01      	ldr	r3, [sp, #4]
   16b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b1a:	f003 0301 	and.w	r3, r3, #1
   16b1e:	2b00      	cmp	r3, #0
   16b20:	d106      	bne.n	16b30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
   16b22:	4a05      	ldr	r2, [pc, #20]	; (16b38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16b24:	9b01      	ldr	r3, [sp, #4]
   16b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b2a:	2b00      	cmp	r3, #0
   16b2c:	d100      	bne.n	16b30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16b2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16b30:	bf00      	nop
   16b32:	b003      	add	sp, #12
   16b34:	f85d fb04 	ldr.w	pc, [sp], #4
   16b38:	1fff9648 	.word	0x1fff9648
   16b3c:	1fff9644 	.word	0x1fff9644

00016b40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   16b40:	b500      	push	{lr}
   16b42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16b44:	f7ea fe4c 	bl	17e0 <Sys_GetCoreID>
   16b48:	4603      	mov	r3, r0
   16b4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId])
   16b4c:	4a10      	ldr	r2, [pc, #64]	; (16b90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16b4e:	9b01      	ldr	r3, [sp, #4]
   16b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b54:	2b00      	cmp	r3, #0
   16b56:	d10d      	bne.n	16b74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16b58:	f7e9 fefa 	bl	950 <Pwm_schm_read_msr>
   16b5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16b5e:	9b00      	ldr	r3, [sp, #0]
   16b60:	f003 0301 	and.w	r3, r3, #1
   16b64:	2b00      	cmp	r3, #0
   16b66:	d100      	bne.n	16b6a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16b68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   16b6a:	490a      	ldr	r1, [pc, #40]	; (16b94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
   16b6c:	9b01      	ldr	r3, [sp, #4]
   16b6e:	9a00      	ldr	r2, [sp, #0]
   16b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]++;
   16b74:	4a06      	ldr	r2, [pc, #24]	; (16b90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16b76:	9b01      	ldr	r3, [sp, #4]
   16b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b7c:	1c5a      	adds	r2, r3, #1
   16b7e:	4904      	ldr	r1, [pc, #16]	; (16b90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16b80:	9b01      	ldr	r3, [sp, #4]
   16b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16b86:	bf00      	nop
   16b88:	b003      	add	sp, #12
   16b8a:	f85d fb04 	ldr.w	pc, [sp], #4
   16b8e:	bf00      	nop
   16b90:	1fff9650 	.word	0x1fff9650
   16b94:	1fff964c 	.word	0x1fff964c

00016b98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   16b98:	b500      	push	{lr}
   16b9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16b9c:	f7ea fe20 	bl	17e0 <Sys_GetCoreID>
   16ba0:	4603      	mov	r3, r0
   16ba2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]--;
   16ba4:	4a0d      	ldr	r2, [pc, #52]	; (16bdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16ba6:	9b01      	ldr	r3, [sp, #4]
   16ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16bac:	1e5a      	subs	r2, r3, #1
   16bae:	490b      	ldr	r1, [pc, #44]	; (16bdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16bb0:	9b01      	ldr	r3, [sp, #4]
   16bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   16bb6:	4a0a      	ldr	r2, [pc, #40]	; (16be0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
   16bb8:	9b01      	ldr	r3, [sp, #4]
   16bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16bbe:	f003 0301 	and.w	r3, r3, #1
   16bc2:	2b00      	cmp	r3, #0
   16bc4:	d106      	bne.n	16bd4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
   16bc6:	4a05      	ldr	r2, [pc, #20]	; (16bdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16bc8:	9b01      	ldr	r3, [sp, #4]
   16bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16bce:	2b00      	cmp	r3, #0
   16bd0:	d100      	bne.n	16bd4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16bd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16bd4:	bf00      	nop
   16bd6:	b003      	add	sp, #12
   16bd8:	f85d fb04 	ldr.w	pc, [sp], #4
   16bdc:	1fff9650 	.word	0x1fff9650
   16be0:	1fff964c 	.word	0x1fff964c

00016be4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   16be4:	b500      	push	{lr}
   16be6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16be8:	f7ea fdfa 	bl	17e0 <Sys_GetCoreID>
   16bec:	4603      	mov	r3, r0
   16bee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId])
   16bf0:	4a10      	ldr	r2, [pc, #64]	; (16c34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16bf2:	9b01      	ldr	r3, [sp, #4]
   16bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16bf8:	2b00      	cmp	r3, #0
   16bfa:	d10d      	bne.n	16c18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16bfc:	f7e9 fea8 	bl	950 <Pwm_schm_read_msr>
   16c00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16c02:	9b00      	ldr	r3, [sp, #0]
   16c04:	f003 0301 	and.w	r3, r3, #1
   16c08:	2b00      	cmp	r3, #0
   16c0a:	d100      	bne.n	16c0e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16c0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   16c0e:	490a      	ldr	r1, [pc, #40]	; (16c38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
   16c10:	9b01      	ldr	r3, [sp, #4]
   16c12:	9a00      	ldr	r2, [sp, #0]
   16c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]++;
   16c18:	4a06      	ldr	r2, [pc, #24]	; (16c34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16c1a:	9b01      	ldr	r3, [sp, #4]
   16c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c20:	1c5a      	adds	r2, r3, #1
   16c22:	4904      	ldr	r1, [pc, #16]	; (16c34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16c24:	9b01      	ldr	r3, [sp, #4]
   16c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16c2a:	bf00      	nop
   16c2c:	b003      	add	sp, #12
   16c2e:	f85d fb04 	ldr.w	pc, [sp], #4
   16c32:	bf00      	nop
   16c34:	1fff9658 	.word	0x1fff9658
   16c38:	1fff9654 	.word	0x1fff9654

00016c3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   16c3c:	b500      	push	{lr}
   16c3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16c40:	f7ea fdce 	bl	17e0 <Sys_GetCoreID>
   16c44:	4603      	mov	r3, r0
   16c46:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]--;
   16c48:	4a0d      	ldr	r2, [pc, #52]	; (16c80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16c4a:	9b01      	ldr	r3, [sp, #4]
   16c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c50:	1e5a      	subs	r2, r3, #1
   16c52:	490b      	ldr	r1, [pc, #44]	; (16c80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16c54:	9b01      	ldr	r3, [sp, #4]
   16c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   16c5a:	4a0a      	ldr	r2, [pc, #40]	; (16c84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
   16c5c:	9b01      	ldr	r3, [sp, #4]
   16c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c62:	f003 0301 	and.w	r3, r3, #1
   16c66:	2b00      	cmp	r3, #0
   16c68:	d106      	bne.n	16c78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
   16c6a:	4a05      	ldr	r2, [pc, #20]	; (16c80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16c6c:	9b01      	ldr	r3, [sp, #4]
   16c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c72:	2b00      	cmp	r3, #0
   16c74:	d100      	bne.n	16c78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16c76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16c78:	bf00      	nop
   16c7a:	b003      	add	sp, #12
   16c7c:	f85d fb04 	ldr.w	pc, [sp], #4
   16c80:	1fff9658 	.word	0x1fff9658
   16c84:	1fff9654 	.word	0x1fff9654

00016c88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   16c88:	b500      	push	{lr}
   16c8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16c8c:	f7ea fda8 	bl	17e0 <Sys_GetCoreID>
   16c90:	4603      	mov	r3, r0
   16c92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId])
   16c94:	4a10      	ldr	r2, [pc, #64]	; (16cd8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16c96:	9b01      	ldr	r3, [sp, #4]
   16c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c9c:	2b00      	cmp	r3, #0
   16c9e:	d10d      	bne.n	16cbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16ca0:	f7e9 fe56 	bl	950 <Pwm_schm_read_msr>
   16ca4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16ca6:	9b00      	ldr	r3, [sp, #0]
   16ca8:	f003 0301 	and.w	r3, r3, #1
   16cac:	2b00      	cmp	r3, #0
   16cae:	d100      	bne.n	16cb2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16cb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   16cb2:	490a      	ldr	r1, [pc, #40]	; (16cdc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
   16cb4:	9b01      	ldr	r3, [sp, #4]
   16cb6:	9a00      	ldr	r2, [sp, #0]
   16cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]++;
   16cbc:	4a06      	ldr	r2, [pc, #24]	; (16cd8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16cbe:	9b01      	ldr	r3, [sp, #4]
   16cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16cc4:	1c5a      	adds	r2, r3, #1
   16cc6:	4904      	ldr	r1, [pc, #16]	; (16cd8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16cc8:	9b01      	ldr	r3, [sp, #4]
   16cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16cce:	bf00      	nop
   16cd0:	b003      	add	sp, #12
   16cd2:	f85d fb04 	ldr.w	pc, [sp], #4
   16cd6:	bf00      	nop
   16cd8:	1fff9660 	.word	0x1fff9660
   16cdc:	1fff965c 	.word	0x1fff965c

00016ce0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   16ce0:	b500      	push	{lr}
   16ce2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16ce4:	f7ea fd7c 	bl	17e0 <Sys_GetCoreID>
   16ce8:	4603      	mov	r3, r0
   16cea:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]--;
   16cec:	4a0d      	ldr	r2, [pc, #52]	; (16d24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16cee:	9b01      	ldr	r3, [sp, #4]
   16cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16cf4:	1e5a      	subs	r2, r3, #1
   16cf6:	490b      	ldr	r1, [pc, #44]	; (16d24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16cf8:	9b01      	ldr	r3, [sp, #4]
   16cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   16cfe:	4a0a      	ldr	r2, [pc, #40]	; (16d28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
   16d00:	9b01      	ldr	r3, [sp, #4]
   16d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d06:	f003 0301 	and.w	r3, r3, #1
   16d0a:	2b00      	cmp	r3, #0
   16d0c:	d106      	bne.n	16d1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
   16d0e:	4a05      	ldr	r2, [pc, #20]	; (16d24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16d10:	9b01      	ldr	r3, [sp, #4]
   16d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d16:	2b00      	cmp	r3, #0
   16d18:	d100      	bne.n	16d1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16d1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16d1c:	bf00      	nop
   16d1e:	b003      	add	sp, #12
   16d20:	f85d fb04 	ldr.w	pc, [sp], #4
   16d24:	1fff9660 	.word	0x1fff9660
   16d28:	1fff965c 	.word	0x1fff965c

00016d2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   16d2c:	b500      	push	{lr}
   16d2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d30:	f7ea fd56 	bl	17e0 <Sys_GetCoreID>
   16d34:	4603      	mov	r3, r0
   16d36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId])
   16d38:	4a10      	ldr	r2, [pc, #64]	; (16d7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16d3a:	9b01      	ldr	r3, [sp, #4]
   16d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d40:	2b00      	cmp	r3, #0
   16d42:	d10d      	bne.n	16d60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16d44:	f7e9 fe04 	bl	950 <Pwm_schm_read_msr>
   16d48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16d4a:	9b00      	ldr	r3, [sp, #0]
   16d4c:	f003 0301 	and.w	r3, r3, #1
   16d50:	2b00      	cmp	r3, #0
   16d52:	d100      	bne.n	16d56 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16d54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   16d56:	490a      	ldr	r1, [pc, #40]	; (16d80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
   16d58:	9b01      	ldr	r3, [sp, #4]
   16d5a:	9a00      	ldr	r2, [sp, #0]
   16d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]++;
   16d60:	4a06      	ldr	r2, [pc, #24]	; (16d7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16d62:	9b01      	ldr	r3, [sp, #4]
   16d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d68:	1c5a      	adds	r2, r3, #1
   16d6a:	4904      	ldr	r1, [pc, #16]	; (16d7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16d6c:	9b01      	ldr	r3, [sp, #4]
   16d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16d72:	bf00      	nop
   16d74:	b003      	add	sp, #12
   16d76:	f85d fb04 	ldr.w	pc, [sp], #4
   16d7a:	bf00      	nop
   16d7c:	1fff9668 	.word	0x1fff9668
   16d80:	1fff9664 	.word	0x1fff9664

00016d84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   16d84:	b500      	push	{lr}
   16d86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d88:	f7ea fd2a 	bl	17e0 <Sys_GetCoreID>
   16d8c:	4603      	mov	r3, r0
   16d8e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]--;
   16d90:	4a0d      	ldr	r2, [pc, #52]	; (16dc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   16d92:	9b01      	ldr	r3, [sp, #4]
   16d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d98:	1e5a      	subs	r2, r3, #1
   16d9a:	490b      	ldr	r1, [pc, #44]	; (16dc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   16d9c:	9b01      	ldr	r3, [sp, #4]
   16d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   16da2:	4a0a      	ldr	r2, [pc, #40]	; (16dcc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
   16da4:	9b01      	ldr	r3, [sp, #4]
   16da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16daa:	f003 0301 	and.w	r3, r3, #1
   16dae:	2b00      	cmp	r3, #0
   16db0:	d106      	bne.n	16dc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
   16db2:	4a05      	ldr	r2, [pc, #20]	; (16dc8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   16db4:	9b01      	ldr	r3, [sp, #4]
   16db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16dba:	2b00      	cmp	r3, #0
   16dbc:	d100      	bne.n	16dc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16dbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16dc0:	bf00      	nop
   16dc2:	b003      	add	sp, #12
   16dc4:	f85d fb04 	ldr.w	pc, [sp], #4
   16dc8:	1fff9668 	.word	0x1fff9668
   16dcc:	1fff9664 	.word	0x1fff9664

00016dd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   16dd0:	b500      	push	{lr}
   16dd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16dd4:	f7ea fd04 	bl	17e0 <Sys_GetCoreID>
   16dd8:	4603      	mov	r3, r0
   16dda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId])
   16ddc:	4a10      	ldr	r2, [pc, #64]	; (16e20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   16dde:	9b01      	ldr	r3, [sp, #4]
   16de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16de4:	2b00      	cmp	r3, #0
   16de6:	d10d      	bne.n	16e04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16de8:	f7e9 fdb2 	bl	950 <Pwm_schm_read_msr>
   16dec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16dee:	9b00      	ldr	r3, [sp, #0]
   16df0:	f003 0301 	and.w	r3, r3, #1
   16df4:	2b00      	cmp	r3, #0
   16df6:	d100      	bne.n	16dfa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16df8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   16dfa:	490a      	ldr	r1, [pc, #40]	; (16e24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
   16dfc:	9b01      	ldr	r3, [sp, #4]
   16dfe:	9a00      	ldr	r2, [sp, #0]
   16e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]++;
   16e04:	4a06      	ldr	r2, [pc, #24]	; (16e20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   16e06:	9b01      	ldr	r3, [sp, #4]
   16e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e0c:	1c5a      	adds	r2, r3, #1
   16e0e:	4904      	ldr	r1, [pc, #16]	; (16e20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   16e10:	9b01      	ldr	r3, [sp, #4]
   16e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16e16:	bf00      	nop
   16e18:	b003      	add	sp, #12
   16e1a:	f85d fb04 	ldr.w	pc, [sp], #4
   16e1e:	bf00      	nop
   16e20:	1fff9670 	.word	0x1fff9670
   16e24:	1fff966c 	.word	0x1fff966c

00016e28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   16e28:	b500      	push	{lr}
   16e2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e2c:	f7ea fcd8 	bl	17e0 <Sys_GetCoreID>
   16e30:	4603      	mov	r3, r0
   16e32:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]--;
   16e34:	4a0d      	ldr	r2, [pc, #52]	; (16e6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   16e36:	9b01      	ldr	r3, [sp, #4]
   16e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e3c:	1e5a      	subs	r2, r3, #1
   16e3e:	490b      	ldr	r1, [pc, #44]	; (16e6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   16e40:	9b01      	ldr	r3, [sp, #4]
   16e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   16e46:	4a0a      	ldr	r2, [pc, #40]	; (16e70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
   16e48:	9b01      	ldr	r3, [sp, #4]
   16e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e4e:	f003 0301 	and.w	r3, r3, #1
   16e52:	2b00      	cmp	r3, #0
   16e54:	d106      	bne.n	16e64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
   16e56:	4a05      	ldr	r2, [pc, #20]	; (16e6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   16e58:	9b01      	ldr	r3, [sp, #4]
   16e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e5e:	2b00      	cmp	r3, #0
   16e60:	d100      	bne.n	16e64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16e62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16e64:	bf00      	nop
   16e66:	b003      	add	sp, #12
   16e68:	f85d fb04 	ldr.w	pc, [sp], #4
   16e6c:	1fff9670 	.word	0x1fff9670
   16e70:	1fff966c 	.word	0x1fff966c

00016e74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   16e74:	b500      	push	{lr}
   16e76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e78:	f7ea fcb2 	bl	17e0 <Sys_GetCoreID>
   16e7c:	4603      	mov	r3, r0
   16e7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId])
   16e80:	4a10      	ldr	r2, [pc, #64]	; (16ec4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   16e82:	9b01      	ldr	r3, [sp, #4]
   16e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e88:	2b00      	cmp	r3, #0
   16e8a:	d10d      	bne.n	16ea8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16e8c:	f7e9 fd60 	bl	950 <Pwm_schm_read_msr>
   16e90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16e92:	9b00      	ldr	r3, [sp, #0]
   16e94:	f003 0301 	and.w	r3, r3, #1
   16e98:	2b00      	cmp	r3, #0
   16e9a:	d100      	bne.n	16e9e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16e9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   16e9e:	490a      	ldr	r1, [pc, #40]	; (16ec8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
   16ea0:	9b01      	ldr	r3, [sp, #4]
   16ea2:	9a00      	ldr	r2, [sp, #0]
   16ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]++;
   16ea8:	4a06      	ldr	r2, [pc, #24]	; (16ec4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   16eaa:	9b01      	ldr	r3, [sp, #4]
   16eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16eb0:	1c5a      	adds	r2, r3, #1
   16eb2:	4904      	ldr	r1, [pc, #16]	; (16ec4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   16eb4:	9b01      	ldr	r3, [sp, #4]
   16eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16eba:	bf00      	nop
   16ebc:	b003      	add	sp, #12
   16ebe:	f85d fb04 	ldr.w	pc, [sp], #4
   16ec2:	bf00      	nop
   16ec4:	1fff9678 	.word	0x1fff9678
   16ec8:	1fff9674 	.word	0x1fff9674

00016ecc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   16ecc:	b500      	push	{lr}
   16ece:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16ed0:	f7ea fc86 	bl	17e0 <Sys_GetCoreID>
   16ed4:	4603      	mov	r3, r0
   16ed6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]--;
   16ed8:	4a0d      	ldr	r2, [pc, #52]	; (16f10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   16eda:	9b01      	ldr	r3, [sp, #4]
   16edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ee0:	1e5a      	subs	r2, r3, #1
   16ee2:	490b      	ldr	r1, [pc, #44]	; (16f10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   16ee4:	9b01      	ldr	r3, [sp, #4]
   16ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   16eea:	4a0a      	ldr	r2, [pc, #40]	; (16f14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
   16eec:	9b01      	ldr	r3, [sp, #4]
   16eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ef2:	f003 0301 	and.w	r3, r3, #1
   16ef6:	2b00      	cmp	r3, #0
   16ef8:	d106      	bne.n	16f08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
   16efa:	4a05      	ldr	r2, [pc, #20]	; (16f10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   16efc:	9b01      	ldr	r3, [sp, #4]
   16efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f02:	2b00      	cmp	r3, #0
   16f04:	d100      	bne.n	16f08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16f06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16f08:	bf00      	nop
   16f0a:	b003      	add	sp, #12
   16f0c:	f85d fb04 	ldr.w	pc, [sp], #4
   16f10:	1fff9678 	.word	0x1fff9678
   16f14:	1fff9674 	.word	0x1fff9674

00016f18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   16f18:	b500      	push	{lr}
   16f1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16f1c:	f7ea fc60 	bl	17e0 <Sys_GetCoreID>
   16f20:	4603      	mov	r3, r0
   16f22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId])
   16f24:	4a10      	ldr	r2, [pc, #64]	; (16f68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   16f26:	9b01      	ldr	r3, [sp, #4]
   16f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f2c:	2b00      	cmp	r3, #0
   16f2e:	d10d      	bne.n	16f4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16f30:	f7e9 fd0e 	bl	950 <Pwm_schm_read_msr>
   16f34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16f36:	9b00      	ldr	r3, [sp, #0]
   16f38:	f003 0301 	and.w	r3, r3, #1
   16f3c:	2b00      	cmp	r3, #0
   16f3e:	d100      	bne.n	16f42 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16f40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   16f42:	490a      	ldr	r1, [pc, #40]	; (16f6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
   16f44:	9b01      	ldr	r3, [sp, #4]
   16f46:	9a00      	ldr	r2, [sp, #0]
   16f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]++;
   16f4c:	4a06      	ldr	r2, [pc, #24]	; (16f68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   16f4e:	9b01      	ldr	r3, [sp, #4]
   16f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f54:	1c5a      	adds	r2, r3, #1
   16f56:	4904      	ldr	r1, [pc, #16]	; (16f68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   16f58:	9b01      	ldr	r3, [sp, #4]
   16f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16f5e:	bf00      	nop
   16f60:	b003      	add	sp, #12
   16f62:	f85d fb04 	ldr.w	pc, [sp], #4
   16f66:	bf00      	nop
   16f68:	1fff9680 	.word	0x1fff9680
   16f6c:	1fff967c 	.word	0x1fff967c

00016f70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   16f70:	b500      	push	{lr}
   16f72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16f74:	f7ea fc34 	bl	17e0 <Sys_GetCoreID>
   16f78:	4603      	mov	r3, r0
   16f7a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]--;
   16f7c:	4a0d      	ldr	r2, [pc, #52]	; (16fb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   16f7e:	9b01      	ldr	r3, [sp, #4]
   16f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f84:	1e5a      	subs	r2, r3, #1
   16f86:	490b      	ldr	r1, [pc, #44]	; (16fb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   16f88:	9b01      	ldr	r3, [sp, #4]
   16f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   16f8e:	4a0a      	ldr	r2, [pc, #40]	; (16fb8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
   16f90:	9b01      	ldr	r3, [sp, #4]
   16f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f96:	f003 0301 	and.w	r3, r3, #1
   16f9a:	2b00      	cmp	r3, #0
   16f9c:	d106      	bne.n	16fac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
   16f9e:	4a05      	ldr	r2, [pc, #20]	; (16fb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   16fa0:	9b01      	ldr	r3, [sp, #4]
   16fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16fa6:	2b00      	cmp	r3, #0
   16fa8:	d100      	bne.n	16fac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16faa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16fac:	bf00      	nop
   16fae:	b003      	add	sp, #12
   16fb0:	f85d fb04 	ldr.w	pc, [sp], #4
   16fb4:	1fff9680 	.word	0x1fff9680
   16fb8:	1fff967c 	.word	0x1fff967c

00016fbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   16fbc:	b500      	push	{lr}
   16fbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16fc0:	f7ea fc0e 	bl	17e0 <Sys_GetCoreID>
   16fc4:	4603      	mov	r3, r0
   16fc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId])
   16fc8:	4a10      	ldr	r2, [pc, #64]	; (1700c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   16fca:	9b01      	ldr	r3, [sp, #4]
   16fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16fd0:	2b00      	cmp	r3, #0
   16fd2:	d10d      	bne.n	16ff0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16fd4:	f7e9 fcbc 	bl	950 <Pwm_schm_read_msr>
   16fd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16fda:	9b00      	ldr	r3, [sp, #0]
   16fdc:	f003 0301 	and.w	r3, r3, #1
   16fe0:	2b00      	cmp	r3, #0
   16fe2:	d100      	bne.n	16fe6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16fe4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   16fe6:	490a      	ldr	r1, [pc, #40]	; (17010 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
   16fe8:	9b01      	ldr	r3, [sp, #4]
   16fea:	9a00      	ldr	r2, [sp, #0]
   16fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]++;
   16ff0:	4a06      	ldr	r2, [pc, #24]	; (1700c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   16ff2:	9b01      	ldr	r3, [sp, #4]
   16ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ff8:	1c5a      	adds	r2, r3, #1
   16ffa:	4904      	ldr	r1, [pc, #16]	; (1700c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   16ffc:	9b01      	ldr	r3, [sp, #4]
   16ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17002:	bf00      	nop
   17004:	b003      	add	sp, #12
   17006:	f85d fb04 	ldr.w	pc, [sp], #4
   1700a:	bf00      	nop
   1700c:	1fff9688 	.word	0x1fff9688
   17010:	1fff9684 	.word	0x1fff9684

00017014 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   17014:	b500      	push	{lr}
   17016:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17018:	f7ea fbe2 	bl	17e0 <Sys_GetCoreID>
   1701c:	4603      	mov	r3, r0
   1701e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]--;
   17020:	4a0d      	ldr	r2, [pc, #52]	; (17058 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   17022:	9b01      	ldr	r3, [sp, #4]
   17024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17028:	1e5a      	subs	r2, r3, #1
   1702a:	490b      	ldr	r1, [pc, #44]	; (17058 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   1702c:	9b01      	ldr	r3, [sp, #4]
   1702e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   17032:	4a0a      	ldr	r2, [pc, #40]	; (1705c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
   17034:	9b01      	ldr	r3, [sp, #4]
   17036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1703a:	f003 0301 	and.w	r3, r3, #1
   1703e:	2b00      	cmp	r3, #0
   17040:	d106      	bne.n	17050 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
   17042:	4a05      	ldr	r2, [pc, #20]	; (17058 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   17044:	9b01      	ldr	r3, [sp, #4]
   17046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1704a:	2b00      	cmp	r3, #0
   1704c:	d100      	bne.n	17050 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1704e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17050:	bf00      	nop
   17052:	b003      	add	sp, #12
   17054:	f85d fb04 	ldr.w	pc, [sp], #4
   17058:	1fff9688 	.word	0x1fff9688
   1705c:	1fff9684 	.word	0x1fff9684

00017060 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   17060:	b500      	push	{lr}
   17062:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17064:	f7ea fbbc 	bl	17e0 <Sys_GetCoreID>
   17068:	4603      	mov	r3, r0
   1706a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId])
   1706c:	4a10      	ldr	r2, [pc, #64]	; (170b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   1706e:	9b01      	ldr	r3, [sp, #4]
   17070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17074:	2b00      	cmp	r3, #0
   17076:	d10d      	bne.n	17094 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17078:	f7e9 fc6a 	bl	950 <Pwm_schm_read_msr>
   1707c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1707e:	9b00      	ldr	r3, [sp, #0]
   17080:	f003 0301 	and.w	r3, r3, #1
   17084:	2b00      	cmp	r3, #0
   17086:	d100      	bne.n	1708a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17088:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1708a:	490a      	ldr	r1, [pc, #40]	; (170b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
   1708c:	9b01      	ldr	r3, [sp, #4]
   1708e:	9a00      	ldr	r2, [sp, #0]
   17090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]++;
   17094:	4a06      	ldr	r2, [pc, #24]	; (170b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   17096:	9b01      	ldr	r3, [sp, #4]
   17098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1709c:	1c5a      	adds	r2, r3, #1
   1709e:	4904      	ldr	r1, [pc, #16]	; (170b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   170a0:	9b01      	ldr	r3, [sp, #4]
   170a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   170a6:	bf00      	nop
   170a8:	b003      	add	sp, #12
   170aa:	f85d fb04 	ldr.w	pc, [sp], #4
   170ae:	bf00      	nop
   170b0:	1fff9690 	.word	0x1fff9690
   170b4:	1fff968c 	.word	0x1fff968c

000170b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   170b8:	b500      	push	{lr}
   170ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   170bc:	f7ea fb90 	bl	17e0 <Sys_GetCoreID>
   170c0:	4603      	mov	r3, r0
   170c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]--;
   170c4:	4a0d      	ldr	r2, [pc, #52]	; (170fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   170c6:	9b01      	ldr	r3, [sp, #4]
   170c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170cc:	1e5a      	subs	r2, r3, #1
   170ce:	490b      	ldr	r1, [pc, #44]	; (170fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   170d0:	9b01      	ldr	r3, [sp, #4]
   170d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   170d6:	4a0a      	ldr	r2, [pc, #40]	; (17100 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
   170d8:	9b01      	ldr	r3, [sp, #4]
   170da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170de:	f003 0301 	and.w	r3, r3, #1
   170e2:	2b00      	cmp	r3, #0
   170e4:	d106      	bne.n	170f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
   170e6:	4a05      	ldr	r2, [pc, #20]	; (170fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   170e8:	9b01      	ldr	r3, [sp, #4]
   170ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170ee:	2b00      	cmp	r3, #0
   170f0:	d100      	bne.n	170f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   170f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   170f4:	bf00      	nop
   170f6:	b003      	add	sp, #12
   170f8:	f85d fb04 	ldr.w	pc, [sp], #4
   170fc:	1fff9690 	.word	0x1fff9690
   17100:	1fff968c 	.word	0x1fff968c

00017104 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   17104:	b500      	push	{lr}
   17106:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17108:	f7ea fb6a 	bl	17e0 <Sys_GetCoreID>
   1710c:	4603      	mov	r3, r0
   1710e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId])
   17110:	4a10      	ldr	r2, [pc, #64]	; (17154 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   17112:	9b01      	ldr	r3, [sp, #4]
   17114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17118:	2b00      	cmp	r3, #0
   1711a:	d10d      	bne.n	17138 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1711c:	f7e9 fc18 	bl	950 <Pwm_schm_read_msr>
   17120:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17122:	9b00      	ldr	r3, [sp, #0]
   17124:	f003 0301 	and.w	r3, r3, #1
   17128:	2b00      	cmp	r3, #0
   1712a:	d100      	bne.n	1712e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1712c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1712e:	490a      	ldr	r1, [pc, #40]	; (17158 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
   17130:	9b01      	ldr	r3, [sp, #4]
   17132:	9a00      	ldr	r2, [sp, #0]
   17134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]++;
   17138:	4a06      	ldr	r2, [pc, #24]	; (17154 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   1713a:	9b01      	ldr	r3, [sp, #4]
   1713c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17140:	1c5a      	adds	r2, r3, #1
   17142:	4904      	ldr	r1, [pc, #16]	; (17154 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   17144:	9b01      	ldr	r3, [sp, #4]
   17146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1714a:	bf00      	nop
   1714c:	b003      	add	sp, #12
   1714e:	f85d fb04 	ldr.w	pc, [sp], #4
   17152:	bf00      	nop
   17154:	1fff9698 	.word	0x1fff9698
   17158:	1fff9694 	.word	0x1fff9694

0001715c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   1715c:	b500      	push	{lr}
   1715e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17160:	f7ea fb3e 	bl	17e0 <Sys_GetCoreID>
   17164:	4603      	mov	r3, r0
   17166:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]--;
   17168:	4a0d      	ldr	r2, [pc, #52]	; (171a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   1716a:	9b01      	ldr	r3, [sp, #4]
   1716c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17170:	1e5a      	subs	r2, r3, #1
   17172:	490b      	ldr	r1, [pc, #44]	; (171a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   17174:	9b01      	ldr	r3, [sp, #4]
   17176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1717a:	4a0a      	ldr	r2, [pc, #40]	; (171a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
   1717c:	9b01      	ldr	r3, [sp, #4]
   1717e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17182:	f003 0301 	and.w	r3, r3, #1
   17186:	2b00      	cmp	r3, #0
   17188:	d106      	bne.n	17198 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
   1718a:	4a05      	ldr	r2, [pc, #20]	; (171a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   1718c:	9b01      	ldr	r3, [sp, #4]
   1718e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17192:	2b00      	cmp	r3, #0
   17194:	d100      	bne.n	17198 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17196:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17198:	bf00      	nop
   1719a:	b003      	add	sp, #12
   1719c:	f85d fb04 	ldr.w	pc, [sp], #4
   171a0:	1fff9698 	.word	0x1fff9698
   171a4:	1fff9694 	.word	0x1fff9694

000171a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   171a8:	b500      	push	{lr}
   171aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   171ac:	f7ea fb18 	bl	17e0 <Sys_GetCoreID>
   171b0:	4603      	mov	r3, r0
   171b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId])
   171b4:	4a10      	ldr	r2, [pc, #64]	; (171f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   171b6:	9b01      	ldr	r3, [sp, #4]
   171b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171bc:	2b00      	cmp	r3, #0
   171be:	d10d      	bne.n	171dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   171c0:	f7e9 fbc6 	bl	950 <Pwm_schm_read_msr>
   171c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   171c6:	9b00      	ldr	r3, [sp, #0]
   171c8:	f003 0301 	and.w	r3, r3, #1
   171cc:	2b00      	cmp	r3, #0
   171ce:	d100      	bne.n	171d2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   171d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   171d2:	490a      	ldr	r1, [pc, #40]	; (171fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
   171d4:	9b01      	ldr	r3, [sp, #4]
   171d6:	9a00      	ldr	r2, [sp, #0]
   171d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]++;
   171dc:	4a06      	ldr	r2, [pc, #24]	; (171f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   171de:	9b01      	ldr	r3, [sp, #4]
   171e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171e4:	1c5a      	adds	r2, r3, #1
   171e6:	4904      	ldr	r1, [pc, #16]	; (171f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   171e8:	9b01      	ldr	r3, [sp, #4]
   171ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   171ee:	bf00      	nop
   171f0:	b003      	add	sp, #12
   171f2:	f85d fb04 	ldr.w	pc, [sp], #4
   171f6:	bf00      	nop
   171f8:	1fff96a0 	.word	0x1fff96a0
   171fc:	1fff969c 	.word	0x1fff969c

00017200 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   17200:	b500      	push	{lr}
   17202:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17204:	f7ea faec 	bl	17e0 <Sys_GetCoreID>
   17208:	4603      	mov	r3, r0
   1720a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]--;
   1720c:	4a0d      	ldr	r2, [pc, #52]	; (17244 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   1720e:	9b01      	ldr	r3, [sp, #4]
   17210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17214:	1e5a      	subs	r2, r3, #1
   17216:	490b      	ldr	r1, [pc, #44]	; (17244 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   17218:	9b01      	ldr	r3, [sp, #4]
   1721a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1721e:	4a0a      	ldr	r2, [pc, #40]	; (17248 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
   17220:	9b01      	ldr	r3, [sp, #4]
   17222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17226:	f003 0301 	and.w	r3, r3, #1
   1722a:	2b00      	cmp	r3, #0
   1722c:	d106      	bne.n	1723c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
   1722e:	4a05      	ldr	r2, [pc, #20]	; (17244 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   17230:	9b01      	ldr	r3, [sp, #4]
   17232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17236:	2b00      	cmp	r3, #0
   17238:	d100      	bne.n	1723c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1723a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1723c:	bf00      	nop
   1723e:	b003      	add	sp, #12
   17240:	f85d fb04 	ldr.w	pc, [sp], #4
   17244:	1fff96a0 	.word	0x1fff96a0
   17248:	1fff969c 	.word	0x1fff969c

0001724c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   1724c:	b500      	push	{lr}
   1724e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17250:	f7ea fac6 	bl	17e0 <Sys_GetCoreID>
   17254:	4603      	mov	r3, r0
   17256:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId])
   17258:	4a10      	ldr	r2, [pc, #64]	; (1729c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   1725a:	9b01      	ldr	r3, [sp, #4]
   1725c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17260:	2b00      	cmp	r3, #0
   17262:	d10d      	bne.n	17280 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17264:	f7e9 fb74 	bl	950 <Pwm_schm_read_msr>
   17268:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1726a:	9b00      	ldr	r3, [sp, #0]
   1726c:	f003 0301 	and.w	r3, r3, #1
   17270:	2b00      	cmp	r3, #0
   17272:	d100      	bne.n	17276 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17274:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   17276:	490a      	ldr	r1, [pc, #40]	; (172a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
   17278:	9b01      	ldr	r3, [sp, #4]
   1727a:	9a00      	ldr	r2, [sp, #0]
   1727c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]++;
   17280:	4a06      	ldr	r2, [pc, #24]	; (1729c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   17282:	9b01      	ldr	r3, [sp, #4]
   17284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17288:	1c5a      	adds	r2, r3, #1
   1728a:	4904      	ldr	r1, [pc, #16]	; (1729c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   1728c:	9b01      	ldr	r3, [sp, #4]
   1728e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17292:	bf00      	nop
   17294:	b003      	add	sp, #12
   17296:	f85d fb04 	ldr.w	pc, [sp], #4
   1729a:	bf00      	nop
   1729c:	1fff96a8 	.word	0x1fff96a8
   172a0:	1fff96a4 	.word	0x1fff96a4

000172a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   172a4:	b500      	push	{lr}
   172a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   172a8:	f7ea fa9a 	bl	17e0 <Sys_GetCoreID>
   172ac:	4603      	mov	r3, r0
   172ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]--;
   172b0:	4a0d      	ldr	r2, [pc, #52]	; (172e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   172b2:	9b01      	ldr	r3, [sp, #4]
   172b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172b8:	1e5a      	subs	r2, r3, #1
   172ba:	490b      	ldr	r1, [pc, #44]	; (172e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   172bc:	9b01      	ldr	r3, [sp, #4]
   172be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   172c2:	4a0a      	ldr	r2, [pc, #40]	; (172ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
   172c4:	9b01      	ldr	r3, [sp, #4]
   172c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172ca:	f003 0301 	and.w	r3, r3, #1
   172ce:	2b00      	cmp	r3, #0
   172d0:	d106      	bne.n	172e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
   172d2:	4a05      	ldr	r2, [pc, #20]	; (172e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   172d4:	9b01      	ldr	r3, [sp, #4]
   172d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172da:	2b00      	cmp	r3, #0
   172dc:	d100      	bne.n	172e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   172de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   172e0:	bf00      	nop
   172e2:	b003      	add	sp, #12
   172e4:	f85d fb04 	ldr.w	pc, [sp], #4
   172e8:	1fff96a8 	.word	0x1fff96a8
   172ec:	1fff96a4 	.word	0x1fff96a4

000172f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   172f0:	b500      	push	{lr}
   172f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   172f4:	f7ea fa74 	bl	17e0 <Sys_GetCoreID>
   172f8:	4603      	mov	r3, r0
   172fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId])
   172fc:	4a10      	ldr	r2, [pc, #64]	; (17340 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   172fe:	9b01      	ldr	r3, [sp, #4]
   17300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17304:	2b00      	cmp	r3, #0
   17306:	d10d      	bne.n	17324 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17308:	f7e9 fb22 	bl	950 <Pwm_schm_read_msr>
   1730c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1730e:	9b00      	ldr	r3, [sp, #0]
   17310:	f003 0301 	and.w	r3, r3, #1
   17314:	2b00      	cmp	r3, #0
   17316:	d100      	bne.n	1731a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17318:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1731a:	490a      	ldr	r1, [pc, #40]	; (17344 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
   1731c:	9b01      	ldr	r3, [sp, #4]
   1731e:	9a00      	ldr	r2, [sp, #0]
   17320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]++;
   17324:	4a06      	ldr	r2, [pc, #24]	; (17340 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   17326:	9b01      	ldr	r3, [sp, #4]
   17328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1732c:	1c5a      	adds	r2, r3, #1
   1732e:	4904      	ldr	r1, [pc, #16]	; (17340 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   17330:	9b01      	ldr	r3, [sp, #4]
   17332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17336:	bf00      	nop
   17338:	b003      	add	sp, #12
   1733a:	f85d fb04 	ldr.w	pc, [sp], #4
   1733e:	bf00      	nop
   17340:	1fff96b0 	.word	0x1fff96b0
   17344:	1fff96ac 	.word	0x1fff96ac

00017348 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   17348:	b500      	push	{lr}
   1734a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1734c:	f7ea fa48 	bl	17e0 <Sys_GetCoreID>
   17350:	4603      	mov	r3, r0
   17352:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]--;
   17354:	4a0d      	ldr	r2, [pc, #52]	; (1738c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   17356:	9b01      	ldr	r3, [sp, #4]
   17358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1735c:	1e5a      	subs	r2, r3, #1
   1735e:	490b      	ldr	r1, [pc, #44]	; (1738c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   17360:	9b01      	ldr	r3, [sp, #4]
   17362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   17366:	4a0a      	ldr	r2, [pc, #40]	; (17390 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
   17368:	9b01      	ldr	r3, [sp, #4]
   1736a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1736e:	f003 0301 	and.w	r3, r3, #1
   17372:	2b00      	cmp	r3, #0
   17374:	d106      	bne.n	17384 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
   17376:	4a05      	ldr	r2, [pc, #20]	; (1738c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   17378:	9b01      	ldr	r3, [sp, #4]
   1737a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1737e:	2b00      	cmp	r3, #0
   17380:	d100      	bne.n	17384 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17382:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17384:	bf00      	nop
   17386:	b003      	add	sp, #12
   17388:	f85d fb04 	ldr.w	pc, [sp], #4
   1738c:	1fff96b0 	.word	0x1fff96b0
   17390:	1fff96ac 	.word	0x1fff96ac

00017394 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   17394:	b500      	push	{lr}
   17396:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17398:	f7ea fa22 	bl	17e0 <Sys_GetCoreID>
   1739c:	4603      	mov	r3, r0
   1739e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId])
   173a0:	4a10      	ldr	r2, [pc, #64]	; (173e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   173a2:	9b01      	ldr	r3, [sp, #4]
   173a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173a8:	2b00      	cmp	r3, #0
   173aa:	d10d      	bne.n	173c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   173ac:	f7e9 fad0 	bl	950 <Pwm_schm_read_msr>
   173b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   173b2:	9b00      	ldr	r3, [sp, #0]
   173b4:	f003 0301 	and.w	r3, r3, #1
   173b8:	2b00      	cmp	r3, #0
   173ba:	d100      	bne.n	173be <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   173bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   173be:	490a      	ldr	r1, [pc, #40]	; (173e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
   173c0:	9b01      	ldr	r3, [sp, #4]
   173c2:	9a00      	ldr	r2, [sp, #0]
   173c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]++;
   173c8:	4a06      	ldr	r2, [pc, #24]	; (173e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   173ca:	9b01      	ldr	r3, [sp, #4]
   173cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173d0:	1c5a      	adds	r2, r3, #1
   173d2:	4904      	ldr	r1, [pc, #16]	; (173e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   173d4:	9b01      	ldr	r3, [sp, #4]
   173d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   173da:	bf00      	nop
   173dc:	b003      	add	sp, #12
   173de:	f85d fb04 	ldr.w	pc, [sp], #4
   173e2:	bf00      	nop
   173e4:	1fff96b8 	.word	0x1fff96b8
   173e8:	1fff96b4 	.word	0x1fff96b4

000173ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   173ec:	b500      	push	{lr}
   173ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   173f0:	f7ea f9f6 	bl	17e0 <Sys_GetCoreID>
   173f4:	4603      	mov	r3, r0
   173f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]--;
   173f8:	4a0d      	ldr	r2, [pc, #52]	; (17430 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   173fa:	9b01      	ldr	r3, [sp, #4]
   173fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17400:	1e5a      	subs	r2, r3, #1
   17402:	490b      	ldr	r1, [pc, #44]	; (17430 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   17404:	9b01      	ldr	r3, [sp, #4]
   17406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1740a:	4a0a      	ldr	r2, [pc, #40]	; (17434 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
   1740c:	9b01      	ldr	r3, [sp, #4]
   1740e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17412:	f003 0301 	and.w	r3, r3, #1
   17416:	2b00      	cmp	r3, #0
   17418:	d106      	bne.n	17428 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
   1741a:	4a05      	ldr	r2, [pc, #20]	; (17430 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   1741c:	9b01      	ldr	r3, [sp, #4]
   1741e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17422:	2b00      	cmp	r3, #0
   17424:	d100      	bne.n	17428 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17426:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17428:	bf00      	nop
   1742a:	b003      	add	sp, #12
   1742c:	f85d fb04 	ldr.w	pc, [sp], #4
   17430:	1fff96b8 	.word	0x1fff96b8
   17434:	1fff96b4 	.word	0x1fff96b4

00017438 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   17438:	b500      	push	{lr}
   1743a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1743c:	f7ea f9d0 	bl	17e0 <Sys_GetCoreID>
   17440:	4603      	mov	r3, r0
   17442:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId])
   17444:	4a10      	ldr	r2, [pc, #64]	; (17488 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   17446:	9b01      	ldr	r3, [sp, #4]
   17448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1744c:	2b00      	cmp	r3, #0
   1744e:	d10d      	bne.n	1746c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17450:	f7e9 fa7e 	bl	950 <Pwm_schm_read_msr>
   17454:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17456:	9b00      	ldr	r3, [sp, #0]
   17458:	f003 0301 	and.w	r3, r3, #1
   1745c:	2b00      	cmp	r3, #0
   1745e:	d100      	bne.n	17462 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17460:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   17462:	490a      	ldr	r1, [pc, #40]	; (1748c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
   17464:	9b01      	ldr	r3, [sp, #4]
   17466:	9a00      	ldr	r2, [sp, #0]
   17468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]++;
   1746c:	4a06      	ldr	r2, [pc, #24]	; (17488 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   1746e:	9b01      	ldr	r3, [sp, #4]
   17470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17474:	1c5a      	adds	r2, r3, #1
   17476:	4904      	ldr	r1, [pc, #16]	; (17488 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   17478:	9b01      	ldr	r3, [sp, #4]
   1747a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1747e:	bf00      	nop
   17480:	b003      	add	sp, #12
   17482:	f85d fb04 	ldr.w	pc, [sp], #4
   17486:	bf00      	nop
   17488:	1fff96c0 	.word	0x1fff96c0
   1748c:	1fff96bc 	.word	0x1fff96bc

00017490 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   17490:	b500      	push	{lr}
   17492:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17494:	f7ea f9a4 	bl	17e0 <Sys_GetCoreID>
   17498:	4603      	mov	r3, r0
   1749a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]--;
   1749c:	4a0d      	ldr	r2, [pc, #52]	; (174d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   1749e:	9b01      	ldr	r3, [sp, #4]
   174a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174a4:	1e5a      	subs	r2, r3, #1
   174a6:	490b      	ldr	r1, [pc, #44]	; (174d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   174a8:	9b01      	ldr	r3, [sp, #4]
   174aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   174ae:	4a0a      	ldr	r2, [pc, #40]	; (174d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
   174b0:	9b01      	ldr	r3, [sp, #4]
   174b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174b6:	f003 0301 	and.w	r3, r3, #1
   174ba:	2b00      	cmp	r3, #0
   174bc:	d106      	bne.n	174cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
   174be:	4a05      	ldr	r2, [pc, #20]	; (174d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   174c0:	9b01      	ldr	r3, [sp, #4]
   174c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174c6:	2b00      	cmp	r3, #0
   174c8:	d100      	bne.n	174cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   174ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   174cc:	bf00      	nop
   174ce:	b003      	add	sp, #12
   174d0:	f85d fb04 	ldr.w	pc, [sp], #4
   174d4:	1fff96c0 	.word	0x1fff96c0
   174d8:	1fff96bc 	.word	0x1fff96bc

000174dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   174dc:	b500      	push	{lr}
   174de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   174e0:	f7ea f97e 	bl	17e0 <Sys_GetCoreID>
   174e4:	4603      	mov	r3, r0
   174e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId])
   174e8:	4a10      	ldr	r2, [pc, #64]	; (1752c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   174ea:	9b01      	ldr	r3, [sp, #4]
   174ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174f0:	2b00      	cmp	r3, #0
   174f2:	d10d      	bne.n	17510 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   174f4:	f7e9 fa2c 	bl	950 <Pwm_schm_read_msr>
   174f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   174fa:	9b00      	ldr	r3, [sp, #0]
   174fc:	f003 0301 	and.w	r3, r3, #1
   17500:	2b00      	cmp	r3, #0
   17502:	d100      	bne.n	17506 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17504:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   17506:	490a      	ldr	r1, [pc, #40]	; (17530 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
   17508:	9b01      	ldr	r3, [sp, #4]
   1750a:	9a00      	ldr	r2, [sp, #0]
   1750c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]++;
   17510:	4a06      	ldr	r2, [pc, #24]	; (1752c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   17512:	9b01      	ldr	r3, [sp, #4]
   17514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17518:	1c5a      	adds	r2, r3, #1
   1751a:	4904      	ldr	r1, [pc, #16]	; (1752c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   1751c:	9b01      	ldr	r3, [sp, #4]
   1751e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17522:	bf00      	nop
   17524:	b003      	add	sp, #12
   17526:	f85d fb04 	ldr.w	pc, [sp], #4
   1752a:	bf00      	nop
   1752c:	1fff96c8 	.word	0x1fff96c8
   17530:	1fff96c4 	.word	0x1fff96c4

00017534 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   17534:	b500      	push	{lr}
   17536:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17538:	f7ea f952 	bl	17e0 <Sys_GetCoreID>
   1753c:	4603      	mov	r3, r0
   1753e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]--;
   17540:	4a0d      	ldr	r2, [pc, #52]	; (17578 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   17542:	9b01      	ldr	r3, [sp, #4]
   17544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17548:	1e5a      	subs	r2, r3, #1
   1754a:	490b      	ldr	r1, [pc, #44]	; (17578 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   1754c:	9b01      	ldr	r3, [sp, #4]
   1754e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   17552:	4a0a      	ldr	r2, [pc, #40]	; (1757c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
   17554:	9b01      	ldr	r3, [sp, #4]
   17556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1755a:	f003 0301 	and.w	r3, r3, #1
   1755e:	2b00      	cmp	r3, #0
   17560:	d106      	bne.n	17570 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
   17562:	4a05      	ldr	r2, [pc, #20]	; (17578 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   17564:	9b01      	ldr	r3, [sp, #4]
   17566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1756a:	2b00      	cmp	r3, #0
   1756c:	d100      	bne.n	17570 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1756e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17570:	bf00      	nop
   17572:	b003      	add	sp, #12
   17574:	f85d fb04 	ldr.w	pc, [sp], #4
   17578:	1fff96c8 	.word	0x1fff96c8
   1757c:	1fff96c4 	.word	0x1fff96c4

00017580 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   17580:	b500      	push	{lr}
   17582:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17584:	f7ea f92c 	bl	17e0 <Sys_GetCoreID>
   17588:	4603      	mov	r3, r0
   1758a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId])
   1758c:	4a10      	ldr	r2, [pc, #64]	; (175d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   1758e:	9b01      	ldr	r3, [sp, #4]
   17590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17594:	2b00      	cmp	r3, #0
   17596:	d10d      	bne.n	175b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17598:	f7e9 f9da 	bl	950 <Pwm_schm_read_msr>
   1759c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1759e:	9b00      	ldr	r3, [sp, #0]
   175a0:	f003 0301 	and.w	r3, r3, #1
   175a4:	2b00      	cmp	r3, #0
   175a6:	d100      	bne.n	175aa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   175a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   175aa:	490a      	ldr	r1, [pc, #40]	; (175d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
   175ac:	9b01      	ldr	r3, [sp, #4]
   175ae:	9a00      	ldr	r2, [sp, #0]
   175b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]++;
   175b4:	4a06      	ldr	r2, [pc, #24]	; (175d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   175b6:	9b01      	ldr	r3, [sp, #4]
   175b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175bc:	1c5a      	adds	r2, r3, #1
   175be:	4904      	ldr	r1, [pc, #16]	; (175d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   175c0:	9b01      	ldr	r3, [sp, #4]
   175c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   175c6:	bf00      	nop
   175c8:	b003      	add	sp, #12
   175ca:	f85d fb04 	ldr.w	pc, [sp], #4
   175ce:	bf00      	nop
   175d0:	1fff96d0 	.word	0x1fff96d0
   175d4:	1fff96cc 	.word	0x1fff96cc

000175d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   175d8:	b500      	push	{lr}
   175da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   175dc:	f7ea f900 	bl	17e0 <Sys_GetCoreID>
   175e0:	4603      	mov	r3, r0
   175e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]--;
   175e4:	4a0d      	ldr	r2, [pc, #52]	; (1761c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   175e6:	9b01      	ldr	r3, [sp, #4]
   175e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175ec:	1e5a      	subs	r2, r3, #1
   175ee:	490b      	ldr	r1, [pc, #44]	; (1761c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   175f0:	9b01      	ldr	r3, [sp, #4]
   175f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   175f6:	4a0a      	ldr	r2, [pc, #40]	; (17620 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
   175f8:	9b01      	ldr	r3, [sp, #4]
   175fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175fe:	f003 0301 	and.w	r3, r3, #1
   17602:	2b00      	cmp	r3, #0
   17604:	d106      	bne.n	17614 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
   17606:	4a05      	ldr	r2, [pc, #20]	; (1761c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   17608:	9b01      	ldr	r3, [sp, #4]
   1760a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1760e:	2b00      	cmp	r3, #0
   17610:	d100      	bne.n	17614 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17612:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17614:	bf00      	nop
   17616:	b003      	add	sp, #12
   17618:	f85d fb04 	ldr.w	pc, [sp], #4
   1761c:	1fff96d0 	.word	0x1fff96d0
   17620:	1fff96cc 	.word	0x1fff96cc

00017624 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   17624:	b500      	push	{lr}
   17626:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17628:	f7ea f8da 	bl	17e0 <Sys_GetCoreID>
   1762c:	4603      	mov	r3, r0
   1762e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId])
   17630:	4a10      	ldr	r2, [pc, #64]	; (17674 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   17632:	9b01      	ldr	r3, [sp, #4]
   17634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17638:	2b00      	cmp	r3, #0
   1763a:	d10d      	bne.n	17658 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1763c:	f7e9 f988 	bl	950 <Pwm_schm_read_msr>
   17640:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17642:	9b00      	ldr	r3, [sp, #0]
   17644:	f003 0301 	and.w	r3, r3, #1
   17648:	2b00      	cmp	r3, #0
   1764a:	d100      	bne.n	1764e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1764c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   1764e:	490a      	ldr	r1, [pc, #40]	; (17678 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
   17650:	9b01      	ldr	r3, [sp, #4]
   17652:	9a00      	ldr	r2, [sp, #0]
   17654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]++;
   17658:	4a06      	ldr	r2, [pc, #24]	; (17674 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   1765a:	9b01      	ldr	r3, [sp, #4]
   1765c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17660:	1c5a      	adds	r2, r3, #1
   17662:	4904      	ldr	r1, [pc, #16]	; (17674 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   17664:	9b01      	ldr	r3, [sp, #4]
   17666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1766a:	bf00      	nop
   1766c:	b003      	add	sp, #12
   1766e:	f85d fb04 	ldr.w	pc, [sp], #4
   17672:	bf00      	nop
   17674:	1fff96d8 	.word	0x1fff96d8
   17678:	1fff96d4 	.word	0x1fff96d4

0001767c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   1767c:	b500      	push	{lr}
   1767e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17680:	f7ea f8ae 	bl	17e0 <Sys_GetCoreID>
   17684:	4603      	mov	r3, r0
   17686:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]--;
   17688:	4a0d      	ldr	r2, [pc, #52]	; (176c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   1768a:	9b01      	ldr	r3, [sp, #4]
   1768c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17690:	1e5a      	subs	r2, r3, #1
   17692:	490b      	ldr	r1, [pc, #44]	; (176c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   17694:	9b01      	ldr	r3, [sp, #4]
   17696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1769a:	4a0a      	ldr	r2, [pc, #40]	; (176c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
   1769c:	9b01      	ldr	r3, [sp, #4]
   1769e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176a2:	f003 0301 	and.w	r3, r3, #1
   176a6:	2b00      	cmp	r3, #0
   176a8:	d106      	bne.n	176b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
   176aa:	4a05      	ldr	r2, [pc, #20]	; (176c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   176ac:	9b01      	ldr	r3, [sp, #4]
   176ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176b2:	2b00      	cmp	r3, #0
   176b4:	d100      	bne.n	176b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   176b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   176b8:	bf00      	nop
   176ba:	b003      	add	sp, #12
   176bc:	f85d fb04 	ldr.w	pc, [sp], #4
   176c0:	1fff96d8 	.word	0x1fff96d8
   176c4:	1fff96d4 	.word	0x1fff96d4

000176c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   176c8:	b500      	push	{lr}
   176ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   176cc:	f7ea f888 	bl	17e0 <Sys_GetCoreID>
   176d0:	4603      	mov	r3, r0
   176d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId])
   176d4:	4a10      	ldr	r2, [pc, #64]	; (17718 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   176d6:	9b01      	ldr	r3, [sp, #4]
   176d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176dc:	2b00      	cmp	r3, #0
   176de:	d10d      	bne.n	176fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   176e0:	f7e9 f936 	bl	950 <Pwm_schm_read_msr>
   176e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   176e6:	9b00      	ldr	r3, [sp, #0]
   176e8:	f003 0301 	and.w	r3, r3, #1
   176ec:	2b00      	cmp	r3, #0
   176ee:	d100      	bne.n	176f2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   176f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   176f2:	490a      	ldr	r1, [pc, #40]	; (1771c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
   176f4:	9b01      	ldr	r3, [sp, #4]
   176f6:	9a00      	ldr	r2, [sp, #0]
   176f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]++;
   176fc:	4a06      	ldr	r2, [pc, #24]	; (17718 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   176fe:	9b01      	ldr	r3, [sp, #4]
   17700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17704:	1c5a      	adds	r2, r3, #1
   17706:	4904      	ldr	r1, [pc, #16]	; (17718 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   17708:	9b01      	ldr	r3, [sp, #4]
   1770a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1770e:	bf00      	nop
   17710:	b003      	add	sp, #12
   17712:	f85d fb04 	ldr.w	pc, [sp], #4
   17716:	bf00      	nop
   17718:	1fff96e0 	.word	0x1fff96e0
   1771c:	1fff96dc 	.word	0x1fff96dc

00017720 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   17720:	b500      	push	{lr}
   17722:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17724:	f7ea f85c 	bl	17e0 <Sys_GetCoreID>
   17728:	4603      	mov	r3, r0
   1772a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]--;
   1772c:	4a0d      	ldr	r2, [pc, #52]	; (17764 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   1772e:	9b01      	ldr	r3, [sp, #4]
   17730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17734:	1e5a      	subs	r2, r3, #1
   17736:	490b      	ldr	r1, [pc, #44]	; (17764 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   17738:	9b01      	ldr	r3, [sp, #4]
   1773a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   1773e:	4a0a      	ldr	r2, [pc, #40]	; (17768 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
   17740:	9b01      	ldr	r3, [sp, #4]
   17742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17746:	f003 0301 	and.w	r3, r3, #1
   1774a:	2b00      	cmp	r3, #0
   1774c:	d106      	bne.n	1775c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
   1774e:	4a05      	ldr	r2, [pc, #20]	; (17764 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   17750:	9b01      	ldr	r3, [sp, #4]
   17752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17756:	2b00      	cmp	r3, #0
   17758:	d100      	bne.n	1775c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1775a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1775c:	bf00      	nop
   1775e:	b003      	add	sp, #12
   17760:	f85d fb04 	ldr.w	pc, [sp], #4
   17764:	1fff96e0 	.word	0x1fff96e0
   17768:	1fff96dc 	.word	0x1fff96dc

0001776c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   1776c:	b500      	push	{lr}
   1776e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17770:	f7ea f836 	bl	17e0 <Sys_GetCoreID>
   17774:	4603      	mov	r3, r0
   17776:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId])
   17778:	4a10      	ldr	r2, [pc, #64]	; (177bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   1777a:	9b01      	ldr	r3, [sp, #4]
   1777c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17780:	2b00      	cmp	r3, #0
   17782:	d10d      	bne.n	177a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17784:	f7e9 f8e4 	bl	950 <Pwm_schm_read_msr>
   17788:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1778a:	9b00      	ldr	r3, [sp, #0]
   1778c:	f003 0301 	and.w	r3, r3, #1
   17790:	2b00      	cmp	r3, #0
   17792:	d100      	bne.n	17796 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17794:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   17796:	490a      	ldr	r1, [pc, #40]	; (177c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
   17798:	9b01      	ldr	r3, [sp, #4]
   1779a:	9a00      	ldr	r2, [sp, #0]
   1779c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]++;
   177a0:	4a06      	ldr	r2, [pc, #24]	; (177bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   177a2:	9b01      	ldr	r3, [sp, #4]
   177a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177a8:	1c5a      	adds	r2, r3, #1
   177aa:	4904      	ldr	r1, [pc, #16]	; (177bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   177ac:	9b01      	ldr	r3, [sp, #4]
   177ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   177b2:	bf00      	nop
   177b4:	b003      	add	sp, #12
   177b6:	f85d fb04 	ldr.w	pc, [sp], #4
   177ba:	bf00      	nop
   177bc:	1fff96e8 	.word	0x1fff96e8
   177c0:	1fff96e4 	.word	0x1fff96e4

000177c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   177c4:	b500      	push	{lr}
   177c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   177c8:	f7ea f80a 	bl	17e0 <Sys_GetCoreID>
   177cc:	4603      	mov	r3, r0
   177ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]--;
   177d0:	4a0d      	ldr	r2, [pc, #52]	; (17808 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   177d2:	9b01      	ldr	r3, [sp, #4]
   177d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177d8:	1e5a      	subs	r2, r3, #1
   177da:	490b      	ldr	r1, [pc, #44]	; (17808 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   177dc:	9b01      	ldr	r3, [sp, #4]
   177de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   177e2:	4a0a      	ldr	r2, [pc, #40]	; (1780c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
   177e4:	9b01      	ldr	r3, [sp, #4]
   177e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177ea:	f003 0301 	and.w	r3, r3, #1
   177ee:	2b00      	cmp	r3, #0
   177f0:	d106      	bne.n	17800 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
   177f2:	4a05      	ldr	r2, [pc, #20]	; (17808 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   177f4:	9b01      	ldr	r3, [sp, #4]
   177f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177fa:	2b00      	cmp	r3, #0
   177fc:	d100      	bne.n	17800 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   177fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17800:	bf00      	nop
   17802:	b003      	add	sp, #12
   17804:	f85d fb04 	ldr.w	pc, [sp], #4
   17808:	1fff96e8 	.word	0x1fff96e8
   1780c:	1fff96e4 	.word	0x1fff96e4

00017810 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   17810:	b500      	push	{lr}
   17812:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17814:	f7e9 ffe4 	bl	17e0 <Sys_GetCoreID>
   17818:	4603      	mov	r3, r0
   1781a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId])
   1781c:	4a10      	ldr	r2, [pc, #64]	; (17860 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   1781e:	9b01      	ldr	r3, [sp, #4]
   17820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17824:	2b00      	cmp	r3, #0
   17826:	d10d      	bne.n	17844 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17828:	f7e9 f892 	bl	950 <Pwm_schm_read_msr>
   1782c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1782e:	9b00      	ldr	r3, [sp, #0]
   17830:	f003 0301 	and.w	r3, r3, #1
   17834:	2b00      	cmp	r3, #0
   17836:	d100      	bne.n	1783a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17838:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   1783a:	490a      	ldr	r1, [pc, #40]	; (17864 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
   1783c:	9b01      	ldr	r3, [sp, #4]
   1783e:	9a00      	ldr	r2, [sp, #0]
   17840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]++;
   17844:	4a06      	ldr	r2, [pc, #24]	; (17860 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   17846:	9b01      	ldr	r3, [sp, #4]
   17848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1784c:	1c5a      	adds	r2, r3, #1
   1784e:	4904      	ldr	r1, [pc, #16]	; (17860 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   17850:	9b01      	ldr	r3, [sp, #4]
   17852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17856:	bf00      	nop
   17858:	b003      	add	sp, #12
   1785a:	f85d fb04 	ldr.w	pc, [sp], #4
   1785e:	bf00      	nop
   17860:	1fff96f0 	.word	0x1fff96f0
   17864:	1fff96ec 	.word	0x1fff96ec

00017868 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   17868:	b500      	push	{lr}
   1786a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1786c:	f7e9 ffb8 	bl	17e0 <Sys_GetCoreID>
   17870:	4603      	mov	r3, r0
   17872:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]--;
   17874:	4a0d      	ldr	r2, [pc, #52]	; (178ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   17876:	9b01      	ldr	r3, [sp, #4]
   17878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1787c:	1e5a      	subs	r2, r3, #1
   1787e:	490b      	ldr	r1, [pc, #44]	; (178ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   17880:	9b01      	ldr	r3, [sp, #4]
   17882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   17886:	4a0a      	ldr	r2, [pc, #40]	; (178b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
   17888:	9b01      	ldr	r3, [sp, #4]
   1788a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1788e:	f003 0301 	and.w	r3, r3, #1
   17892:	2b00      	cmp	r3, #0
   17894:	d106      	bne.n	178a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
   17896:	4a05      	ldr	r2, [pc, #20]	; (178ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   17898:	9b01      	ldr	r3, [sp, #4]
   1789a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1789e:	2b00      	cmp	r3, #0
   178a0:	d100      	bne.n	178a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   178a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   178a4:	bf00      	nop
   178a6:	b003      	add	sp, #12
   178a8:	f85d fb04 	ldr.w	pc, [sp], #4
   178ac:	1fff96f0 	.word	0x1fff96f0
   178b0:	1fff96ec 	.word	0x1fff96ec

000178b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   178b4:	b500      	push	{lr}
   178b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   178b8:	f7e9 ff92 	bl	17e0 <Sys_GetCoreID>
   178bc:	4603      	mov	r3, r0
   178be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId])
   178c0:	4a10      	ldr	r2, [pc, #64]	; (17904 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   178c2:	9b01      	ldr	r3, [sp, #4]
   178c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   178c8:	2b00      	cmp	r3, #0
   178ca:	d10d      	bne.n	178e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   178cc:	f7e9 f840 	bl	950 <Pwm_schm_read_msr>
   178d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   178d2:	9b00      	ldr	r3, [sp, #0]
   178d4:	f003 0301 	and.w	r3, r3, #1
   178d8:	2b00      	cmp	r3, #0
   178da:	d100      	bne.n	178de <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   178dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   178de:	490a      	ldr	r1, [pc, #40]	; (17908 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
   178e0:	9b01      	ldr	r3, [sp, #4]
   178e2:	9a00      	ldr	r2, [sp, #0]
   178e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]++;
   178e8:	4a06      	ldr	r2, [pc, #24]	; (17904 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   178ea:	9b01      	ldr	r3, [sp, #4]
   178ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   178f0:	1c5a      	adds	r2, r3, #1
   178f2:	4904      	ldr	r1, [pc, #16]	; (17904 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   178f4:	9b01      	ldr	r3, [sp, #4]
   178f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   178fa:	bf00      	nop
   178fc:	b003      	add	sp, #12
   178fe:	f85d fb04 	ldr.w	pc, [sp], #4
   17902:	bf00      	nop
   17904:	1fff96f8 	.word	0x1fff96f8
   17908:	1fff96f4 	.word	0x1fff96f4

0001790c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   1790c:	b500      	push	{lr}
   1790e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17910:	f7e9 ff66 	bl	17e0 <Sys_GetCoreID>
   17914:	4603      	mov	r3, r0
   17916:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]--;
   17918:	4a0d      	ldr	r2, [pc, #52]	; (17950 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   1791a:	9b01      	ldr	r3, [sp, #4]
   1791c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17920:	1e5a      	subs	r2, r3, #1
   17922:	490b      	ldr	r1, [pc, #44]	; (17950 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   17924:	9b01      	ldr	r3, [sp, #4]
   17926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   1792a:	4a0a      	ldr	r2, [pc, #40]	; (17954 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
   1792c:	9b01      	ldr	r3, [sp, #4]
   1792e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17932:	f003 0301 	and.w	r3, r3, #1
   17936:	2b00      	cmp	r3, #0
   17938:	d106      	bne.n	17948 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
   1793a:	4a05      	ldr	r2, [pc, #20]	; (17950 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   1793c:	9b01      	ldr	r3, [sp, #4]
   1793e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17942:	2b00      	cmp	r3, #0
   17944:	d100      	bne.n	17948 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17946:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17948:	bf00      	nop
   1794a:	b003      	add	sp, #12
   1794c:	f85d fb04 	ldr.w	pc, [sp], #4
   17950:	1fff96f8 	.word	0x1fff96f8
   17954:	1fff96f4 	.word	0x1fff96f4

00017958 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   17958:	b500      	push	{lr}
   1795a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1795c:	f7e9 ff40 	bl	17e0 <Sys_GetCoreID>
   17960:	4603      	mov	r3, r0
   17962:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId])
   17964:	4a10      	ldr	r2, [pc, #64]	; (179a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   17966:	9b01      	ldr	r3, [sp, #4]
   17968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1796c:	2b00      	cmp	r3, #0
   1796e:	d10d      	bne.n	1798c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17970:	f7e8 ffee 	bl	950 <Pwm_schm_read_msr>
   17974:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17976:	9b00      	ldr	r3, [sp, #0]
   17978:	f003 0301 	and.w	r3, r3, #1
   1797c:	2b00      	cmp	r3, #0
   1797e:	d100      	bne.n	17982 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17980:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   17982:	490a      	ldr	r1, [pc, #40]	; (179ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
   17984:	9b01      	ldr	r3, [sp, #4]
   17986:	9a00      	ldr	r2, [sp, #0]
   17988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]++;
   1798c:	4a06      	ldr	r2, [pc, #24]	; (179a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   1798e:	9b01      	ldr	r3, [sp, #4]
   17990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17994:	1c5a      	adds	r2, r3, #1
   17996:	4904      	ldr	r1, [pc, #16]	; (179a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   17998:	9b01      	ldr	r3, [sp, #4]
   1799a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1799e:	bf00      	nop
   179a0:	b003      	add	sp, #12
   179a2:	f85d fb04 	ldr.w	pc, [sp], #4
   179a6:	bf00      	nop
   179a8:	1fff9700 	.word	0x1fff9700
   179ac:	1fff96fc 	.word	0x1fff96fc

000179b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   179b0:	b500      	push	{lr}
   179b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   179b4:	f7e9 ff14 	bl	17e0 <Sys_GetCoreID>
   179b8:	4603      	mov	r3, r0
   179ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]--;
   179bc:	4a0d      	ldr	r2, [pc, #52]	; (179f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   179be:	9b01      	ldr	r3, [sp, #4]
   179c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179c4:	1e5a      	subs	r2, r3, #1
   179c6:	490b      	ldr	r1, [pc, #44]	; (179f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   179c8:	9b01      	ldr	r3, [sp, #4]
   179ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   179ce:	4a0a      	ldr	r2, [pc, #40]	; (179f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
   179d0:	9b01      	ldr	r3, [sp, #4]
   179d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179d6:	f003 0301 	and.w	r3, r3, #1
   179da:	2b00      	cmp	r3, #0
   179dc:	d106      	bne.n	179ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
   179de:	4a05      	ldr	r2, [pc, #20]	; (179f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   179e0:	9b01      	ldr	r3, [sp, #4]
   179e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179e6:	2b00      	cmp	r3, #0
   179e8:	d100      	bne.n	179ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   179ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   179ec:	bf00      	nop
   179ee:	b003      	add	sp, #12
   179f0:	f85d fb04 	ldr.w	pc, [sp], #4
   179f4:	1fff9700 	.word	0x1fff9700
   179f8:	1fff96fc 	.word	0x1fff96fc

000179fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   179fc:	b500      	push	{lr}
   179fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17a00:	f7e9 feee 	bl	17e0 <Sys_GetCoreID>
   17a04:	4603      	mov	r3, r0
   17a06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId])
   17a08:	4a10      	ldr	r2, [pc, #64]	; (17a4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17a0a:	9b01      	ldr	r3, [sp, #4]
   17a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a10:	2b00      	cmp	r3, #0
   17a12:	d10d      	bne.n	17a30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17a14:	f7e8 ff9c 	bl	950 <Pwm_schm_read_msr>
   17a18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17a1a:	9b00      	ldr	r3, [sp, #0]
   17a1c:	f003 0301 	and.w	r3, r3, #1
   17a20:	2b00      	cmp	r3, #0
   17a22:	d100      	bne.n	17a26 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17a24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   17a26:	490a      	ldr	r1, [pc, #40]	; (17a50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
   17a28:	9b01      	ldr	r3, [sp, #4]
   17a2a:	9a00      	ldr	r2, [sp, #0]
   17a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]++;
   17a30:	4a06      	ldr	r2, [pc, #24]	; (17a4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17a32:	9b01      	ldr	r3, [sp, #4]
   17a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a38:	1c5a      	adds	r2, r3, #1
   17a3a:	4904      	ldr	r1, [pc, #16]	; (17a4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17a3c:	9b01      	ldr	r3, [sp, #4]
   17a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17a42:	bf00      	nop
   17a44:	b003      	add	sp, #12
   17a46:	f85d fb04 	ldr.w	pc, [sp], #4
   17a4a:	bf00      	nop
   17a4c:	1fff9708 	.word	0x1fff9708
   17a50:	1fff9704 	.word	0x1fff9704

00017a54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   17a54:	b500      	push	{lr}
   17a56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17a58:	f7e9 fec2 	bl	17e0 <Sys_GetCoreID>
   17a5c:	4603      	mov	r3, r0
   17a5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]--;
   17a60:	4a0d      	ldr	r2, [pc, #52]	; (17a98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17a62:	9b01      	ldr	r3, [sp, #4]
   17a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a68:	1e5a      	subs	r2, r3, #1
   17a6a:	490b      	ldr	r1, [pc, #44]	; (17a98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17a6c:	9b01      	ldr	r3, [sp, #4]
   17a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   17a72:	4a0a      	ldr	r2, [pc, #40]	; (17a9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
   17a74:	9b01      	ldr	r3, [sp, #4]
   17a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a7a:	f003 0301 	and.w	r3, r3, #1
   17a7e:	2b00      	cmp	r3, #0
   17a80:	d106      	bne.n	17a90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
   17a82:	4a05      	ldr	r2, [pc, #20]	; (17a98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17a84:	9b01      	ldr	r3, [sp, #4]
   17a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a8a:	2b00      	cmp	r3, #0
   17a8c:	d100      	bne.n	17a90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17a8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17a90:	bf00      	nop
   17a92:	b003      	add	sp, #12
   17a94:	f85d fb04 	ldr.w	pc, [sp], #4
   17a98:	1fff9708 	.word	0x1fff9708
   17a9c:	1fff9704 	.word	0x1fff9704

00017aa0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   17aa0:	b500      	push	{lr}
   17aa2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17aa4:	f7e9 fe9c 	bl	17e0 <Sys_GetCoreID>
   17aa8:	4603      	mov	r3, r0
   17aaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId])
   17aac:	4a10      	ldr	r2, [pc, #64]	; (17af0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17aae:	9b01      	ldr	r3, [sp, #4]
   17ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ab4:	2b00      	cmp	r3, #0
   17ab6:	d10d      	bne.n	17ad4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17ab8:	f7e8 ff4a 	bl	950 <Pwm_schm_read_msr>
   17abc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17abe:	9b00      	ldr	r3, [sp, #0]
   17ac0:	f003 0301 	and.w	r3, r3, #1
   17ac4:	2b00      	cmp	r3, #0
   17ac6:	d100      	bne.n	17aca <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17ac8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   17aca:	490a      	ldr	r1, [pc, #40]	; (17af4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
   17acc:	9b01      	ldr	r3, [sp, #4]
   17ace:	9a00      	ldr	r2, [sp, #0]
   17ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]++;
   17ad4:	4a06      	ldr	r2, [pc, #24]	; (17af0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17ad6:	9b01      	ldr	r3, [sp, #4]
   17ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17adc:	1c5a      	adds	r2, r3, #1
   17ade:	4904      	ldr	r1, [pc, #16]	; (17af0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17ae0:	9b01      	ldr	r3, [sp, #4]
   17ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17ae6:	bf00      	nop
   17ae8:	b003      	add	sp, #12
   17aea:	f85d fb04 	ldr.w	pc, [sp], #4
   17aee:	bf00      	nop
   17af0:	1fff9710 	.word	0x1fff9710
   17af4:	1fff970c 	.word	0x1fff970c

00017af8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   17af8:	b500      	push	{lr}
   17afa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17afc:	f7e9 fe70 	bl	17e0 <Sys_GetCoreID>
   17b00:	4603      	mov	r3, r0
   17b02:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]--;
   17b04:	4a0d      	ldr	r2, [pc, #52]	; (17b3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17b06:	9b01      	ldr	r3, [sp, #4]
   17b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b0c:	1e5a      	subs	r2, r3, #1
   17b0e:	490b      	ldr	r1, [pc, #44]	; (17b3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17b10:	9b01      	ldr	r3, [sp, #4]
   17b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   17b16:	4a0a      	ldr	r2, [pc, #40]	; (17b40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
   17b18:	9b01      	ldr	r3, [sp, #4]
   17b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b1e:	f003 0301 	and.w	r3, r3, #1
   17b22:	2b00      	cmp	r3, #0
   17b24:	d106      	bne.n	17b34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
   17b26:	4a05      	ldr	r2, [pc, #20]	; (17b3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17b28:	9b01      	ldr	r3, [sp, #4]
   17b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b2e:	2b00      	cmp	r3, #0
   17b30:	d100      	bne.n	17b34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17b32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17b34:	bf00      	nop
   17b36:	b003      	add	sp, #12
   17b38:	f85d fb04 	ldr.w	pc, [sp], #4
   17b3c:	1fff9710 	.word	0x1fff9710
   17b40:	1fff970c 	.word	0x1fff970c

00017b44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   17b44:	b500      	push	{lr}
   17b46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17b48:	f7e9 fe4a 	bl	17e0 <Sys_GetCoreID>
   17b4c:	4603      	mov	r3, r0
   17b4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId])
   17b50:	4a10      	ldr	r2, [pc, #64]	; (17b94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17b52:	9b01      	ldr	r3, [sp, #4]
   17b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b58:	2b00      	cmp	r3, #0
   17b5a:	d10d      	bne.n	17b78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17b5c:	f7e8 fef8 	bl	950 <Pwm_schm_read_msr>
   17b60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17b62:	9b00      	ldr	r3, [sp, #0]
   17b64:	f003 0301 	and.w	r3, r3, #1
   17b68:	2b00      	cmp	r3, #0
   17b6a:	d100      	bne.n	17b6e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17b6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   17b6e:	490a      	ldr	r1, [pc, #40]	; (17b98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
   17b70:	9b01      	ldr	r3, [sp, #4]
   17b72:	9a00      	ldr	r2, [sp, #0]
   17b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]++;
   17b78:	4a06      	ldr	r2, [pc, #24]	; (17b94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17b7a:	9b01      	ldr	r3, [sp, #4]
   17b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b80:	1c5a      	adds	r2, r3, #1
   17b82:	4904      	ldr	r1, [pc, #16]	; (17b94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17b84:	9b01      	ldr	r3, [sp, #4]
   17b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17b8a:	bf00      	nop
   17b8c:	b003      	add	sp, #12
   17b8e:	f85d fb04 	ldr.w	pc, [sp], #4
   17b92:	bf00      	nop
   17b94:	1fff9718 	.word	0x1fff9718
   17b98:	1fff9714 	.word	0x1fff9714

00017b9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   17b9c:	b500      	push	{lr}
   17b9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17ba0:	f7e9 fe1e 	bl	17e0 <Sys_GetCoreID>
   17ba4:	4603      	mov	r3, r0
   17ba6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]--;
   17ba8:	4a0d      	ldr	r2, [pc, #52]	; (17be0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17baa:	9b01      	ldr	r3, [sp, #4]
   17bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17bb0:	1e5a      	subs	r2, r3, #1
   17bb2:	490b      	ldr	r1, [pc, #44]	; (17be0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17bb4:	9b01      	ldr	r3, [sp, #4]
   17bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   17bba:	4a0a      	ldr	r2, [pc, #40]	; (17be4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
   17bbc:	9b01      	ldr	r3, [sp, #4]
   17bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17bc2:	f003 0301 	and.w	r3, r3, #1
   17bc6:	2b00      	cmp	r3, #0
   17bc8:	d106      	bne.n	17bd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
   17bca:	4a05      	ldr	r2, [pc, #20]	; (17be0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17bcc:	9b01      	ldr	r3, [sp, #4]
   17bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17bd2:	2b00      	cmp	r3, #0
   17bd4:	d100      	bne.n	17bd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17bd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17bd8:	bf00      	nop
   17bda:	b003      	add	sp, #12
   17bdc:	f85d fb04 	ldr.w	pc, [sp], #4
   17be0:	1fff9718 	.word	0x1fff9718
   17be4:	1fff9714 	.word	0x1fff9714

00017be8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   17be8:	b500      	push	{lr}
   17bea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17bec:	f7e9 fdf8 	bl	17e0 <Sys_GetCoreID>
   17bf0:	4603      	mov	r3, r0
   17bf2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId])
   17bf4:	4a10      	ldr	r2, [pc, #64]	; (17c38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17bf6:	9b01      	ldr	r3, [sp, #4]
   17bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17bfc:	2b00      	cmp	r3, #0
   17bfe:	d10d      	bne.n	17c1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17c00:	f7e8 fea6 	bl	950 <Pwm_schm_read_msr>
   17c04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17c06:	9b00      	ldr	r3, [sp, #0]
   17c08:	f003 0301 	and.w	r3, r3, #1
   17c0c:	2b00      	cmp	r3, #0
   17c0e:	d100      	bne.n	17c12 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17c10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   17c12:	490a      	ldr	r1, [pc, #40]	; (17c3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
   17c14:	9b01      	ldr	r3, [sp, #4]
   17c16:	9a00      	ldr	r2, [sp, #0]
   17c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]++;
   17c1c:	4a06      	ldr	r2, [pc, #24]	; (17c38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17c1e:	9b01      	ldr	r3, [sp, #4]
   17c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c24:	1c5a      	adds	r2, r3, #1
   17c26:	4904      	ldr	r1, [pc, #16]	; (17c38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17c28:	9b01      	ldr	r3, [sp, #4]
   17c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17c2e:	bf00      	nop
   17c30:	b003      	add	sp, #12
   17c32:	f85d fb04 	ldr.w	pc, [sp], #4
   17c36:	bf00      	nop
   17c38:	1fff9720 	.word	0x1fff9720
   17c3c:	1fff971c 	.word	0x1fff971c

00017c40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   17c40:	b500      	push	{lr}
   17c42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17c44:	f7e9 fdcc 	bl	17e0 <Sys_GetCoreID>
   17c48:	4603      	mov	r3, r0
   17c4a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]--;
   17c4c:	4a0d      	ldr	r2, [pc, #52]	; (17c84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17c4e:	9b01      	ldr	r3, [sp, #4]
   17c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c54:	1e5a      	subs	r2, r3, #1
   17c56:	490b      	ldr	r1, [pc, #44]	; (17c84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17c58:	9b01      	ldr	r3, [sp, #4]
   17c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   17c5e:	4a0a      	ldr	r2, [pc, #40]	; (17c88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
   17c60:	9b01      	ldr	r3, [sp, #4]
   17c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c66:	f003 0301 	and.w	r3, r3, #1
   17c6a:	2b00      	cmp	r3, #0
   17c6c:	d106      	bne.n	17c7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
   17c6e:	4a05      	ldr	r2, [pc, #20]	; (17c84 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17c70:	9b01      	ldr	r3, [sp, #4]
   17c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c76:	2b00      	cmp	r3, #0
   17c78:	d100      	bne.n	17c7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17c7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17c7c:	bf00      	nop
   17c7e:	b003      	add	sp, #12
   17c80:	f85d fb04 	ldr.w	pc, [sp], #4
   17c84:	1fff9720 	.word	0x1fff9720
   17c88:	1fff971c 	.word	0x1fff971c

00017c8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   17c8c:	b500      	push	{lr}
   17c8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17c90:	f7e9 fda6 	bl	17e0 <Sys_GetCoreID>
   17c94:	4603      	mov	r3, r0
   17c96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId])
   17c98:	4a10      	ldr	r2, [pc, #64]	; (17cdc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17c9a:	9b01      	ldr	r3, [sp, #4]
   17c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ca0:	2b00      	cmp	r3, #0
   17ca2:	d10d      	bne.n	17cc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17ca4:	f7e8 fe54 	bl	950 <Pwm_schm_read_msr>
   17ca8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17caa:	9b00      	ldr	r3, [sp, #0]
   17cac:	f003 0301 	and.w	r3, r3, #1
   17cb0:	2b00      	cmp	r3, #0
   17cb2:	d100      	bne.n	17cb6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17cb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   17cb6:	490a      	ldr	r1, [pc, #40]	; (17ce0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
   17cb8:	9b01      	ldr	r3, [sp, #4]
   17cba:	9a00      	ldr	r2, [sp, #0]
   17cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]++;
   17cc0:	4a06      	ldr	r2, [pc, #24]	; (17cdc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17cc2:	9b01      	ldr	r3, [sp, #4]
   17cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17cc8:	1c5a      	adds	r2, r3, #1
   17cca:	4904      	ldr	r1, [pc, #16]	; (17cdc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17ccc:	9b01      	ldr	r3, [sp, #4]
   17cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17cd2:	bf00      	nop
   17cd4:	b003      	add	sp, #12
   17cd6:	f85d fb04 	ldr.w	pc, [sp], #4
   17cda:	bf00      	nop
   17cdc:	1fff9728 	.word	0x1fff9728
   17ce0:	1fff9724 	.word	0x1fff9724

00017ce4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   17ce4:	b500      	push	{lr}
   17ce6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17ce8:	f7e9 fd7a 	bl	17e0 <Sys_GetCoreID>
   17cec:	4603      	mov	r3, r0
   17cee:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]--;
   17cf0:	4a0d      	ldr	r2, [pc, #52]	; (17d28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17cf2:	9b01      	ldr	r3, [sp, #4]
   17cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17cf8:	1e5a      	subs	r2, r3, #1
   17cfa:	490b      	ldr	r1, [pc, #44]	; (17d28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17cfc:	9b01      	ldr	r3, [sp, #4]
   17cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   17d02:	4a0a      	ldr	r2, [pc, #40]	; (17d2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
   17d04:	9b01      	ldr	r3, [sp, #4]
   17d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d0a:	f003 0301 	and.w	r3, r3, #1
   17d0e:	2b00      	cmp	r3, #0
   17d10:	d106      	bne.n	17d20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
   17d12:	4a05      	ldr	r2, [pc, #20]	; (17d28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17d14:	9b01      	ldr	r3, [sp, #4]
   17d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d1a:	2b00      	cmp	r3, #0
   17d1c:	d100      	bne.n	17d20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17d1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17d20:	bf00      	nop
   17d22:	b003      	add	sp, #12
   17d24:	f85d fb04 	ldr.w	pc, [sp], #4
   17d28:	1fff9728 	.word	0x1fff9728
   17d2c:	1fff9724 	.word	0x1fff9724

00017d30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   17d30:	b500      	push	{lr}
   17d32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17d34:	f7e9 fd54 	bl	17e0 <Sys_GetCoreID>
   17d38:	4603      	mov	r3, r0
   17d3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId])
   17d3c:	4a10      	ldr	r2, [pc, #64]	; (17d80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17d3e:	9b01      	ldr	r3, [sp, #4]
   17d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d44:	2b00      	cmp	r3, #0
   17d46:	d10d      	bne.n	17d64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17d48:	f7e8 fe02 	bl	950 <Pwm_schm_read_msr>
   17d4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17d4e:	9b00      	ldr	r3, [sp, #0]
   17d50:	f003 0301 	and.w	r3, r3, #1
   17d54:	2b00      	cmp	r3, #0
   17d56:	d100      	bne.n	17d5a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17d58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   17d5a:	490a      	ldr	r1, [pc, #40]	; (17d84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
   17d5c:	9b01      	ldr	r3, [sp, #4]
   17d5e:	9a00      	ldr	r2, [sp, #0]
   17d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]++;
   17d64:	4a06      	ldr	r2, [pc, #24]	; (17d80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17d66:	9b01      	ldr	r3, [sp, #4]
   17d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d6c:	1c5a      	adds	r2, r3, #1
   17d6e:	4904      	ldr	r1, [pc, #16]	; (17d80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17d70:	9b01      	ldr	r3, [sp, #4]
   17d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17d76:	bf00      	nop
   17d78:	b003      	add	sp, #12
   17d7a:	f85d fb04 	ldr.w	pc, [sp], #4
   17d7e:	bf00      	nop
   17d80:	1fff9730 	.word	0x1fff9730
   17d84:	1fff972c 	.word	0x1fff972c

00017d88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   17d88:	b500      	push	{lr}
   17d8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17d8c:	f7e9 fd28 	bl	17e0 <Sys_GetCoreID>
   17d90:	4603      	mov	r3, r0
   17d92:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]--;
   17d94:	4a0d      	ldr	r2, [pc, #52]	; (17dcc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   17d96:	9b01      	ldr	r3, [sp, #4]
   17d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d9c:	1e5a      	subs	r2, r3, #1
   17d9e:	490b      	ldr	r1, [pc, #44]	; (17dcc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   17da0:	9b01      	ldr	r3, [sp, #4]
   17da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   17da6:	4a0a      	ldr	r2, [pc, #40]	; (17dd0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
   17da8:	9b01      	ldr	r3, [sp, #4]
   17daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17dae:	f003 0301 	and.w	r3, r3, #1
   17db2:	2b00      	cmp	r3, #0
   17db4:	d106      	bne.n	17dc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
   17db6:	4a05      	ldr	r2, [pc, #20]	; (17dcc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   17db8:	9b01      	ldr	r3, [sp, #4]
   17dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17dbe:	2b00      	cmp	r3, #0
   17dc0:	d100      	bne.n	17dc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17dc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17dc4:	bf00      	nop
   17dc6:	b003      	add	sp, #12
   17dc8:	f85d fb04 	ldr.w	pc, [sp], #4
   17dcc:	1fff9730 	.word	0x1fff9730
   17dd0:	1fff972c 	.word	0x1fff972c

00017dd4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   17dd4:	b500      	push	{lr}
   17dd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17dd8:	f7e9 fd02 	bl	17e0 <Sys_GetCoreID>
   17ddc:	4603      	mov	r3, r0
   17dde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId])
   17de0:	4a10      	ldr	r2, [pc, #64]	; (17e24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   17de2:	9b01      	ldr	r3, [sp, #4]
   17de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17de8:	2b00      	cmp	r3, #0
   17dea:	d10d      	bne.n	17e08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17dec:	f7e8 fdb0 	bl	950 <Pwm_schm_read_msr>
   17df0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17df2:	9b00      	ldr	r3, [sp, #0]
   17df4:	f003 0301 	and.w	r3, r3, #1
   17df8:	2b00      	cmp	r3, #0
   17dfa:	d100      	bne.n	17dfe <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17dfc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   17dfe:	490a      	ldr	r1, [pc, #40]	; (17e28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
   17e00:	9b01      	ldr	r3, [sp, #4]
   17e02:	9a00      	ldr	r2, [sp, #0]
   17e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]++;
   17e08:	4a06      	ldr	r2, [pc, #24]	; (17e24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   17e0a:	9b01      	ldr	r3, [sp, #4]
   17e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e10:	1c5a      	adds	r2, r3, #1
   17e12:	4904      	ldr	r1, [pc, #16]	; (17e24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   17e14:	9b01      	ldr	r3, [sp, #4]
   17e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17e1a:	bf00      	nop
   17e1c:	b003      	add	sp, #12
   17e1e:	f85d fb04 	ldr.w	pc, [sp], #4
   17e22:	bf00      	nop
   17e24:	1fff9738 	.word	0x1fff9738
   17e28:	1fff9734 	.word	0x1fff9734

00017e2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   17e2c:	b500      	push	{lr}
   17e2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17e30:	f7e9 fcd6 	bl	17e0 <Sys_GetCoreID>
   17e34:	4603      	mov	r3, r0
   17e36:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]--;
   17e38:	4a0d      	ldr	r2, [pc, #52]	; (17e70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   17e3a:	9b01      	ldr	r3, [sp, #4]
   17e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e40:	1e5a      	subs	r2, r3, #1
   17e42:	490b      	ldr	r1, [pc, #44]	; (17e70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   17e44:	9b01      	ldr	r3, [sp, #4]
   17e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   17e4a:	4a0a      	ldr	r2, [pc, #40]	; (17e74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
   17e4c:	9b01      	ldr	r3, [sp, #4]
   17e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e52:	f003 0301 	and.w	r3, r3, #1
   17e56:	2b00      	cmp	r3, #0
   17e58:	d106      	bne.n	17e68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
   17e5a:	4a05      	ldr	r2, [pc, #20]	; (17e70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   17e5c:	9b01      	ldr	r3, [sp, #4]
   17e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e62:	2b00      	cmp	r3, #0
   17e64:	d100      	bne.n	17e68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17e66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17e68:	bf00      	nop
   17e6a:	b003      	add	sp, #12
   17e6c:	f85d fb04 	ldr.w	pc, [sp], #4
   17e70:	1fff9738 	.word	0x1fff9738
   17e74:	1fff9734 	.word	0x1fff9734

00017e78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   17e78:	b500      	push	{lr}
   17e7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17e7c:	f7e9 fcb0 	bl	17e0 <Sys_GetCoreID>
   17e80:	4603      	mov	r3, r0
   17e82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId])
   17e84:	4a10      	ldr	r2, [pc, #64]	; (17ec8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   17e86:	9b01      	ldr	r3, [sp, #4]
   17e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e8c:	2b00      	cmp	r3, #0
   17e8e:	d10d      	bne.n	17eac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17e90:	f7e8 fd5e 	bl	950 <Pwm_schm_read_msr>
   17e94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17e96:	9b00      	ldr	r3, [sp, #0]
   17e98:	f003 0301 	and.w	r3, r3, #1
   17e9c:	2b00      	cmp	r3, #0
   17e9e:	d100      	bne.n	17ea2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17ea0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   17ea2:	490a      	ldr	r1, [pc, #40]	; (17ecc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
   17ea4:	9b01      	ldr	r3, [sp, #4]
   17ea6:	9a00      	ldr	r2, [sp, #0]
   17ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]++;
   17eac:	4a06      	ldr	r2, [pc, #24]	; (17ec8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   17eae:	9b01      	ldr	r3, [sp, #4]
   17eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17eb4:	1c5a      	adds	r2, r3, #1
   17eb6:	4904      	ldr	r1, [pc, #16]	; (17ec8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   17eb8:	9b01      	ldr	r3, [sp, #4]
   17eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17ebe:	bf00      	nop
   17ec0:	b003      	add	sp, #12
   17ec2:	f85d fb04 	ldr.w	pc, [sp], #4
   17ec6:	bf00      	nop
   17ec8:	1fff9740 	.word	0x1fff9740
   17ecc:	1fff973c 	.word	0x1fff973c

00017ed0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   17ed0:	b500      	push	{lr}
   17ed2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17ed4:	f7e9 fc84 	bl	17e0 <Sys_GetCoreID>
   17ed8:	4603      	mov	r3, r0
   17eda:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]--;
   17edc:	4a0d      	ldr	r2, [pc, #52]	; (17f14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   17ede:	9b01      	ldr	r3, [sp, #4]
   17ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ee4:	1e5a      	subs	r2, r3, #1
   17ee6:	490b      	ldr	r1, [pc, #44]	; (17f14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   17ee8:	9b01      	ldr	r3, [sp, #4]
   17eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   17eee:	4a0a      	ldr	r2, [pc, #40]	; (17f18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
   17ef0:	9b01      	ldr	r3, [sp, #4]
   17ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ef6:	f003 0301 	and.w	r3, r3, #1
   17efa:	2b00      	cmp	r3, #0
   17efc:	d106      	bne.n	17f0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
   17efe:	4a05      	ldr	r2, [pc, #20]	; (17f14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   17f00:	9b01      	ldr	r3, [sp, #4]
   17f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f06:	2b00      	cmp	r3, #0
   17f08:	d100      	bne.n	17f0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17f0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17f0c:	bf00      	nop
   17f0e:	b003      	add	sp, #12
   17f10:	f85d fb04 	ldr.w	pc, [sp], #4
   17f14:	1fff9740 	.word	0x1fff9740
   17f18:	1fff973c 	.word	0x1fff973c

00017f1c <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   17f1c:	bf00      	nop
   17f1e:	4770      	bx	lr

00017f20 <Det_GetModuleName>:
 * @brief This function gets the string name corresponding to a module Id.
 * 
 * @param[in] ModuleId Module Id where error was detected.
 * @return StringPtr Pointer to string module name.
 */
char* Det_GetModuleName( uint16 ModuleId ) {
   17f20:	b082      	sub	sp, #8
   17f22:	4603      	mov	r3, r0
   17f24:	f8ad 3006 	strh.w	r3, [sp, #6]
    switch ( ModuleId ) {
   17f28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   17f2c:	2b7c      	cmp	r3, #124	; 0x7c
   17f2e:	dc37      	bgt.n	17fa0 <Det_GetModuleName+0x80>
   17f30:	2b65      	cmp	r3, #101	; 0x65
   17f32:	db50      	blt.n	17fd6 <Det_GetModuleName+0xb6>
   17f34:	3b65      	subs	r3, #101	; 0x65
   17f36:	2b17      	cmp	r3, #23
   17f38:	d84d      	bhi.n	17fd6 <Det_GetModuleName+0xb6>
   17f3a:	a201      	add	r2, pc, #4	; (adr r2, 17f40 <Det_GetModuleName+0x20>)
   17f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17f40:	00017fa7 	.word	0x00017fa7
   17f44:	00017fd7 	.word	0x00017fd7
   17f48:	00017fd7 	.word	0x00017fd7
   17f4c:	00017fd7 	.word	0x00017fd7
   17f50:	00017fd7 	.word	0x00017fd7
   17f54:	00017fd7 	.word	0x00017fd7
   17f58:	00017fd7 	.word	0x00017fd7
   17f5c:	00017fd7 	.word	0x00017fd7
   17f60:	00017fd7 	.word	0x00017fd7
   17f64:	00017fd7 	.word	0x00017fd7
   17f68:	00017fd7 	.word	0x00017fd7
   17f6c:	00017fd7 	.word	0x00017fd7
   17f70:	00017fd7 	.word	0x00017fd7
   17f74:	00017fd7 	.word	0x00017fd7
   17f78:	00017fd7 	.word	0x00017fd7
   17f7c:	00017fd7 	.word	0x00017fd7
   17f80:	00017fd7 	.word	0x00017fd7
   17f84:	00017fd7 	.word	0x00017fd7
   17f88:	00017fd7 	.word	0x00017fd7
   17f8c:	00017fbf 	.word	0x00017fbf
   17f90:	00017fc7 	.word	0x00017fc7
   17f94:	00017fd7 	.word	0x00017fd7
   17f98:	00017fcf 	.word	0x00017fcf
   17f9c:	00017fb7 	.word	0x00017fb7
   17fa0:	2bff      	cmp	r3, #255	; 0xff
   17fa2:	d004      	beq.n	17fae <Det_GetModuleName+0x8e>
        case PORT_MODULE_ID: ErrorString_Ptr[0] = "Port module"; break;
        case DIO_MODULE_ID: ErrorString_Ptr[0] = "Dio module"; break;
        case PWM_MODULE_ID: ErrorString_Ptr[0] = "Pwm module"; break;
        case ADC_MODULE_ID: ErrorString_Ptr[0] = "Adc module"; break;

        default: break;    //Module ID is not used in aplication.
   17fa4:	e017      	b.n	17fd6 <Det_GetModuleName+0xb6>
        case MCU_MODULE_ID: ErrorString_Ptr[0] = "Mcu module"; break;
   17fa6:	4b0f      	ldr	r3, [pc, #60]	; (17fe4 <Det_GetModuleName+0xc4>)
   17fa8:	4a0f      	ldr	r2, [pc, #60]	; (17fe8 <Det_GetModuleName+0xc8>)
   17faa:	601a      	str	r2, [r3, #0]
   17fac:	e014      	b.n	17fd8 <Det_GetModuleName+0xb8>
        case CDD_PLATFORM_MODULE_ID: ErrorString_Ptr[0] = "Platform module"; break;
   17fae:	4b0d      	ldr	r3, [pc, #52]	; (17fe4 <Det_GetModuleName+0xc4>)
   17fb0:	4a0e      	ldr	r2, [pc, #56]	; (17fec <Det_GetModuleName+0xcc>)
   17fb2:	601a      	str	r2, [r3, #0]
   17fb4:	e010      	b.n	17fd8 <Det_GetModuleName+0xb8>
        case PORT_MODULE_ID: ErrorString_Ptr[0] = "Port module"; break;
   17fb6:	4b0b      	ldr	r3, [pc, #44]	; (17fe4 <Det_GetModuleName+0xc4>)
   17fb8:	4a0d      	ldr	r2, [pc, #52]	; (17ff0 <Det_GetModuleName+0xd0>)
   17fba:	601a      	str	r2, [r3, #0]
   17fbc:	e00c      	b.n	17fd8 <Det_GetModuleName+0xb8>
        case DIO_MODULE_ID: ErrorString_Ptr[0] = "Dio module"; break;
   17fbe:	4b09      	ldr	r3, [pc, #36]	; (17fe4 <Det_GetModuleName+0xc4>)
   17fc0:	4a0c      	ldr	r2, [pc, #48]	; (17ff4 <Det_GetModuleName+0xd4>)
   17fc2:	601a      	str	r2, [r3, #0]
   17fc4:	e008      	b.n	17fd8 <Det_GetModuleName+0xb8>
        case PWM_MODULE_ID: ErrorString_Ptr[0] = "Pwm module"; break;
   17fc6:	4b07      	ldr	r3, [pc, #28]	; (17fe4 <Det_GetModuleName+0xc4>)
   17fc8:	4a0b      	ldr	r2, [pc, #44]	; (17ff8 <Det_GetModuleName+0xd8>)
   17fca:	601a      	str	r2, [r3, #0]
   17fcc:	e004      	b.n	17fd8 <Det_GetModuleName+0xb8>
        case ADC_MODULE_ID: ErrorString_Ptr[0] = "Adc module"; break;
   17fce:	4b05      	ldr	r3, [pc, #20]	; (17fe4 <Det_GetModuleName+0xc4>)
   17fd0:	4a0a      	ldr	r2, [pc, #40]	; (17ffc <Det_GetModuleName+0xdc>)
   17fd2:	601a      	str	r2, [r3, #0]
   17fd4:	e000      	b.n	17fd8 <Det_GetModuleName+0xb8>
        default: break;    //Module ID is not used in aplication.
   17fd6:	bf00      	nop
    }

    return ErrorString_Ptr[0];
   17fd8:	4b02      	ldr	r3, [pc, #8]	; (17fe4 <Det_GetModuleName+0xc4>)
   17fda:	681b      	ldr	r3, [r3, #0]
}
   17fdc:	4618      	mov	r0, r3
   17fde:	b002      	add	sp, #8
   17fe0:	4770      	bx	lr
   17fe2:	bf00      	nop
   17fe4:	1fff9768 	.word	0x1fff9768
   17fe8:	000189e4 	.word	0x000189e4
   17fec:	000189f0 	.word	0x000189f0
   17ff0:	00018a00 	.word	0x00018a00
   17ff4:	00018a0c 	.word	0x00018a0c
   17ff8:	00018a18 	.word	0x00018a18
   17ffc:	00018a24 	.word	0x00018a24

00018000 <Det_GetApiName>:
 * 
 * @param[in] ModuleId Module Id where error was detected. 
 * @param[in] ApiId Api Id where error was detected 
 * @return StringPtr Pointer to string Api name.
 */
char* Det_GetApiName( uint16 ModuleId, uint8 ApiId ) {
   18000:	b082      	sub	sp, #8
   18002:	4603      	mov	r3, r0
   18004:	460a      	mov	r2, r1
   18006:	f8ad 3006 	strh.w	r3, [sp, #6]
   1800a:	4613      	mov	r3, r2
   1800c:	f88d 3005 	strb.w	r3, [sp, #5]

    switch ( ModuleId ) {
   18010:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18014:	2b7c      	cmp	r3, #124	; 0x7c
   18016:	dc39      	bgt.n	1808c <Det_GetApiName+0x8c>
   18018:	2b65      	cmp	r3, #101	; 0x65
   1801a:	f2c0 8203 	blt.w	18424 <Det_GetApiName+0x424>
   1801e:	3b65      	subs	r3, #101	; 0x65
   18020:	2b17      	cmp	r3, #23
   18022:	f200 81ff 	bhi.w	18424 <Det_GetApiName+0x424>
   18026:	a201      	add	r2, pc, #4	; (adr r2, 1802c <Det_GetApiName+0x2c>)
   18028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1802c:	00018093 	.word	0x00018093
   18030:	00018425 	.word	0x00018425
   18034:	00018425 	.word	0x00018425
   18038:	00018425 	.word	0x00018425
   1803c:	00018425 	.word	0x00018425
   18040:	00018425 	.word	0x00018425
   18044:	00018425 	.word	0x00018425
   18048:	00018425 	.word	0x00018425
   1804c:	00018425 	.word	0x00018425
   18050:	00018425 	.word	0x00018425
   18054:	00018425 	.word	0x00018425
   18058:	00018425 	.word	0x00018425
   1805c:	00018425 	.word	0x00018425
   18060:	00018425 	.word	0x00018425
   18064:	00018425 	.word	0x00018425
   18068:	00018425 	.word	0x00018425
   1806c:	00018425 	.word	0x00018425
   18070:	00018425 	.word	0x00018425
   18074:	00018425 	.word	0x00018425
   18078:	0001818d 	.word	0x0001818d
   1807c:	0001822d 	.word	0x0001822d
   18080:	00018425 	.word	0x00018425
   18084:	00018295 	.word	0x00018295
   18088:	0001813d 	.word	0x0001813d
   1808c:	2bff      	cmp	r3, #255	; 0xff
   1808e:	d02d      	beq.n	180ec <Det_GetApiName+0xec>
                default: break; //Api doesnt report det error or is not used.
            }
        break;

        default: //Module ID is not used in aplication.
        break;
   18090:	e1c8      	b.n	18424 <Det_GetApiName+0x424>
            switch( ApiId ) {   //4 Apis that report det errors.
   18092:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18096:	2b09      	cmp	r3, #9
   18098:	d826      	bhi.n	180e8 <Det_GetApiName+0xe8>
   1809a:	a201      	add	r2, pc, #4	; (adr r2, 180a0 <Det_GetApiName+0xa0>)
   1809c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   180a0:	000180c9 	.word	0x000180c9
   180a4:	000180e9 	.word	0x000180e9
   180a8:	000180d1 	.word	0x000180d1
   180ac:	000180e9 	.word	0x000180e9
   180b0:	000180e9 	.word	0x000180e9
   180b4:	000180e9 	.word	0x000180e9
   180b8:	000180e9 	.word	0x000180e9
   180bc:	000180e9 	.word	0x000180e9
   180c0:	000180d9 	.word	0x000180d9
   180c4:	000180e1 	.word	0x000180e1
                case MCU_INIT_ID: ErrorString_Ptr[1] = "Mcu_Init()"; break;
   180c8:	4bac      	ldr	r3, [pc, #688]	; (1837c <Det_GetApiName+0x37c>)
   180ca:	4aad      	ldr	r2, [pc, #692]	; (18380 <Det_GetApiName+0x380>)
   180cc:	605a      	str	r2, [r3, #4]
   180ce:	e00c      	b.n	180ea <Det_GetApiName+0xea>
                case MCU_INITCLOCK_ID: ErrorString_Ptr[1] = "Mcu_InitClock()"; break;
   180d0:	4baa      	ldr	r3, [pc, #680]	; (1837c <Det_GetApiName+0x37c>)
   180d2:	4aac      	ldr	r2, [pc, #688]	; (18384 <Det_GetApiName+0x384>)
   180d4:	605a      	str	r2, [r3, #4]
   180d6:	e008      	b.n	180ea <Det_GetApiName+0xea>
                case MCU_SETMODE_ID: ErrorString_Ptr[1] = "Mcu_SetMode()"; break;
   180d8:	4ba8      	ldr	r3, [pc, #672]	; (1837c <Det_GetApiName+0x37c>)
   180da:	4aab      	ldr	r2, [pc, #684]	; (18388 <Det_GetApiName+0x388>)
   180dc:	605a      	str	r2, [r3, #4]
   180de:	e004      	b.n	180ea <Det_GetApiName+0xea>
                case MCU_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Mcu_GetVersionInfo()"; break;
   180e0:	4ba6      	ldr	r3, [pc, #664]	; (1837c <Det_GetApiName+0x37c>)
   180e2:	4aaa      	ldr	r2, [pc, #680]	; (1838c <Det_GetApiName+0x38c>)
   180e4:	605a      	str	r2, [r3, #4]
   180e6:	e000      	b.n	180ea <Det_GetApiName+0xea>
                default: break; //Api doesnt report det error or is not used.
   180e8:	bf00      	nop
        break;
   180ea:	e19c      	b.n	18426 <Det_GetApiName+0x426>
            switch ( ApiId ) {  //5 Apis that report det errors.
   180ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
   180f0:	3b20      	subs	r3, #32
   180f2:	2b04      	cmp	r3, #4
   180f4:	d820      	bhi.n	18138 <Det_GetApiName+0x138>
   180f6:	a201      	add	r2, pc, #4	; (adr r2, 180fc <Det_GetApiName+0xfc>)
   180f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   180fc:	00018111 	.word	0x00018111
   18100:	00018119 	.word	0x00018119
   18104:	00018121 	.word	0x00018121
   18108:	00018129 	.word	0x00018129
   1810c:	00018131 	.word	0x00018131
                case PLATFORM_INIT_ID: ErrorString_Ptr[1] = "Platform_Init()"; break;
   18110:	4b9a      	ldr	r3, [pc, #616]	; (1837c <Det_GetApiName+0x37c>)
   18112:	4a9f      	ldr	r2, [pc, #636]	; (18390 <Det_GetApiName+0x390>)
   18114:	605a      	str	r2, [r3, #4]
   18116:	e010      	b.n	1813a <Det_GetApiName+0x13a>
                case PLATFORM_SET_IRQ_ID: ErrorString_Ptr[1] = "Platform_SetIrq()"; break;
   18118:	4b98      	ldr	r3, [pc, #608]	; (1837c <Det_GetApiName+0x37c>)
   1811a:	4a9e      	ldr	r2, [pc, #632]	; (18394 <Det_GetApiName+0x394>)
   1811c:	605a      	str	r2, [r3, #4]
   1811e:	e00c      	b.n	1813a <Det_GetApiName+0x13a>
                case PLATFORM_SET_IRQ_PRIO_ID: ErrorString_Ptr[1] = "Platform_SetIrqPriority()"; break;
   18120:	4b96      	ldr	r3, [pc, #600]	; (1837c <Det_GetApiName+0x37c>)
   18122:	4a9d      	ldr	r2, [pc, #628]	; (18398 <Det_GetApiName+0x398>)
   18124:	605a      	str	r2, [r3, #4]
   18126:	e008      	b.n	1813a <Det_GetApiName+0x13a>
                case PLATFORM_GET_IRQ_PRIO_ID: ErrorString_Ptr[1] = "Platform_GetIrqPriority()"; break;
   18128:	4b94      	ldr	r3, [pc, #592]	; (1837c <Det_GetApiName+0x37c>)
   1812a:	4a9c      	ldr	r2, [pc, #624]	; (1839c <Det_GetApiName+0x39c>)
   1812c:	605a      	str	r2, [r3, #4]
   1812e:	e004      	b.n	1813a <Det_GetApiName+0x13a>
                case PLATFORM_INSTALL_HANDLER_ID: ErrorString_Ptr[1] = "Platform_InstallIrqHandler()"; break;
   18130:	4b92      	ldr	r3, [pc, #584]	; (1837c <Det_GetApiName+0x37c>)
   18132:	4a9b      	ldr	r2, [pc, #620]	; (183a0 <Det_GetApiName+0x3a0>)
   18134:	605a      	str	r2, [r3, #4]
   18136:	e000      	b.n	1813a <Det_GetApiName+0x13a>
                default: break; //Api doesnt report det error or is not used.
   18138:	bf00      	nop
        break;
   1813a:	e174      	b.n	18426 <Det_GetApiName+0x426>
            switch ( ApiId ) {  //5 Apis that report det errors.
   1813c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18140:	2b04      	cmp	r3, #4
   18142:	d821      	bhi.n	18188 <Det_GetApiName+0x188>
   18144:	a201      	add	r2, pc, #4	; (adr r2, 1814c <Det_GetApiName+0x14c>)
   18146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1814a:	bf00      	nop
   1814c:	00018161 	.word	0x00018161
   18150:	00018169 	.word	0x00018169
   18154:	00018179 	.word	0x00018179
   18158:	00018181 	.word	0x00018181
   1815c:	00018171 	.word	0x00018171
                case PORT_INIT_ID: ErrorString_Ptr[1] = "Port_Init()"; break;
   18160:	4b86      	ldr	r3, [pc, #536]	; (1837c <Det_GetApiName+0x37c>)
   18162:	4a90      	ldr	r2, [pc, #576]	; (183a4 <Det_GetApiName+0x3a4>)
   18164:	605a      	str	r2, [r3, #4]
   18166:	e010      	b.n	1818a <Det_GetApiName+0x18a>
                case PORT_SETPINDIRECTION_ID: ErrorString_Ptr[1] = "Port_SetPinDirection()"; break;
   18168:	4b84      	ldr	r3, [pc, #528]	; (1837c <Det_GetApiName+0x37c>)
   1816a:	4a8f      	ldr	r2, [pc, #572]	; (183a8 <Det_GetApiName+0x3a8>)
   1816c:	605a      	str	r2, [r3, #4]
   1816e:	e00c      	b.n	1818a <Det_GetApiName+0x18a>
                case PORT_SETPINMODE_ID: ErrorString_Ptr[1] = "Port_SetPinMode()"; break;
   18170:	4b82      	ldr	r3, [pc, #520]	; (1837c <Det_GetApiName+0x37c>)
   18172:	4a8e      	ldr	r2, [pc, #568]	; (183ac <Det_GetApiName+0x3ac>)
   18174:	605a      	str	r2, [r3, #4]
   18176:	e008      	b.n	1818a <Det_GetApiName+0x18a>
                case PORT_REFRESHPINDIRECTION_ID: ErrorString_Ptr[1] = "Port_RefreshPortDirection()"; break;
   18178:	4b80      	ldr	r3, [pc, #512]	; (1837c <Det_GetApiName+0x37c>)
   1817a:	4a8d      	ldr	r2, [pc, #564]	; (183b0 <Det_GetApiName+0x3b0>)
   1817c:	605a      	str	r2, [r3, #4]
   1817e:	e004      	b.n	1818a <Det_GetApiName+0x18a>
                case PORT_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Port_GetVersionInfo()"; break;
   18180:	4b7e      	ldr	r3, [pc, #504]	; (1837c <Det_GetApiName+0x37c>)
   18182:	4a8c      	ldr	r2, [pc, #560]	; (183b4 <Det_GetApiName+0x3b4>)
   18184:	605a      	str	r2, [r3, #4]
   18186:	e000      	b.n	1818a <Det_GetApiName+0x18a>
                default: break; //Api doesnt report det error or is not used.
   18188:	bf00      	nop
        break;
   1818a:	e14c      	b.n	18426 <Det_GetApiName+0x426>
            switch ( ApiId ) {  //8 Apis that report det errors.
   1818c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18190:	2b12      	cmp	r3, #18
   18192:	d849      	bhi.n	18228 <Det_GetApiName+0x228>
   18194:	a201      	add	r2, pc, #4	; (adr r2, 1819c <Det_GetApiName+0x19c>)
   18196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1819a:	bf00      	nop
   1819c:	000181f1 	.word	0x000181f1
   181a0:	000181e9 	.word	0x000181e9
   181a4:	00018211 	.word	0x00018211
   181a8:	00018219 	.word	0x00018219
   181ac:	00018209 	.word	0x00018209
   181b0:	00018201 	.word	0x00018201
   181b4:	00018229 	.word	0x00018229
   181b8:	00018229 	.word	0x00018229
   181bc:	00018229 	.word	0x00018229
   181c0:	00018229 	.word	0x00018229
   181c4:	00018229 	.word	0x00018229
   181c8:	00018229 	.word	0x00018229
   181cc:	00018229 	.word	0x00018229
   181d0:	00018229 	.word	0x00018229
   181d4:	00018229 	.word	0x00018229
   181d8:	00018229 	.word	0x00018229
   181dc:	00018229 	.word	0x00018229
   181e0:	000181f9 	.word	0x000181f9
   181e4:	00018221 	.word	0x00018221
                case DIO_WRITECHANNEL_ID: ErrorString_Ptr[1] = "Dio_WriteChannel()"; break;
   181e8:	4b64      	ldr	r3, [pc, #400]	; (1837c <Det_GetApiName+0x37c>)
   181ea:	4a73      	ldr	r2, [pc, #460]	; (183b8 <Det_GetApiName+0x3b8>)
   181ec:	605a      	str	r2, [r3, #4]
   181ee:	e01c      	b.n	1822a <Det_GetApiName+0x22a>
                case DIO_READCHANNEL_ID: ErrorString_Ptr[1] = "Dio_ReadChannel()"; break;
   181f0:	4b62      	ldr	r3, [pc, #392]	; (1837c <Det_GetApiName+0x37c>)
   181f2:	4a72      	ldr	r2, [pc, #456]	; (183bc <Det_GetApiName+0x3bc>)
   181f4:	605a      	str	r2, [r3, #4]
   181f6:	e018      	b.n	1822a <Det_GetApiName+0x22a>
                case DIO_FLIPCHANNEL_ID: ErrorString_Ptr[1] = "Dio_FlipChannel()"; break;
   181f8:	4b60      	ldr	r3, [pc, #384]	; (1837c <Det_GetApiName+0x37c>)
   181fa:	4a71      	ldr	r2, [pc, #452]	; (183c0 <Det_GetApiName+0x3c0>)
   181fc:	605a      	str	r2, [r3, #4]
   181fe:	e014      	b.n	1822a <Det_GetApiName+0x22a>
                case DIO_WRITECHANNELGROUP_ID: ErrorString_Ptr[1] = "Dio_WriteChannelGroup()"; break;
   18200:	4b5e      	ldr	r3, [pc, #376]	; (1837c <Det_GetApiName+0x37c>)
   18202:	4a70      	ldr	r2, [pc, #448]	; (183c4 <Det_GetApiName+0x3c4>)
   18204:	605a      	str	r2, [r3, #4]
   18206:	e010      	b.n	1822a <Det_GetApiName+0x22a>
                case DIO_READCHANNELGROUP_ID: ErrorString_Ptr[1] = "Dio_ReadChannelGroup()"; break;
   18208:	4b5c      	ldr	r3, [pc, #368]	; (1837c <Det_GetApiName+0x37c>)
   1820a:	4a6f      	ldr	r2, [pc, #444]	; (183c8 <Det_GetApiName+0x3c8>)
   1820c:	605a      	str	r2, [r3, #4]
   1820e:	e00c      	b.n	1822a <Det_GetApiName+0x22a>
                case DIO_READPORT_ID: ErrorString_Ptr[1] = "Dio_ReadPort()"; break;
   18210:	4b5a      	ldr	r3, [pc, #360]	; (1837c <Det_GetApiName+0x37c>)
   18212:	4a6e      	ldr	r2, [pc, #440]	; (183cc <Det_GetApiName+0x3cc>)
   18214:	605a      	str	r2, [r3, #4]
   18216:	e008      	b.n	1822a <Det_GetApiName+0x22a>
                case DIO_WRITEPORT_ID: ErrorString_Ptr[1] = "Dio_WritePort()"; break;
   18218:	4b58      	ldr	r3, [pc, #352]	; (1837c <Det_GetApiName+0x37c>)
   1821a:	4a6d      	ldr	r2, [pc, #436]	; (183d0 <Det_GetApiName+0x3d0>)
   1821c:	605a      	str	r2, [r3, #4]
   1821e:	e004      	b.n	1822a <Det_GetApiName+0x22a>
                case DIO_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Dio_GetVersionInfo()"; break;
   18220:	4b56      	ldr	r3, [pc, #344]	; (1837c <Det_GetApiName+0x37c>)
   18222:	4a6c      	ldr	r2, [pc, #432]	; (183d4 <Det_GetApiName+0x3d4>)
   18224:	605a      	str	r2, [r3, #4]
   18226:	e000      	b.n	1822a <Det_GetApiName+0x22a>
                default: break; //Api doesnt report det error or is not used.
   18228:	bf00      	nop
        break;
   1822a:	e0fc      	b.n	18426 <Det_GetApiName+0x426>
            switch ( ApiId ) {  //6 Apis that report det errors.
   1822c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18230:	2b08      	cmp	r3, #8
   18232:	d82d      	bhi.n	18290 <Det_GetApiName+0x290>
   18234:	a201      	add	r2, pc, #4	; (adr r2, 1823c <Det_GetApiName+0x23c>)
   18236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1823a:	bf00      	nop
   1823c:	00018261 	.word	0x00018261
   18240:	00018269 	.word	0x00018269
   18244:	00018271 	.word	0x00018271
   18248:	00018279 	.word	0x00018279
   1824c:	00018281 	.word	0x00018281
   18250:	00018291 	.word	0x00018291
   18254:	00018291 	.word	0x00018291
   18258:	00018291 	.word	0x00018291
   1825c:	00018289 	.word	0x00018289
                case PWM_INIT_ID: ErrorString_Ptr[1] = "Pwm_Init()"; break;
   18260:	4b46      	ldr	r3, [pc, #280]	; (1837c <Det_GetApiName+0x37c>)
   18262:	4a5d      	ldr	r2, [pc, #372]	; (183d8 <Det_GetApiName+0x3d8>)
   18264:	605a      	str	r2, [r3, #4]
   18266:	e014      	b.n	18292 <Det_GetApiName+0x292>
                case PWM_DEINIT_ID: ErrorString_Ptr[1] = "Pwm_DeInit()"; break;
   18268:	4b44      	ldr	r3, [pc, #272]	; (1837c <Det_GetApiName+0x37c>)
   1826a:	4a5c      	ldr	r2, [pc, #368]	; (183dc <Det_GetApiName+0x3dc>)
   1826c:	605a      	str	r2, [r3, #4]
   1826e:	e010      	b.n	18292 <Det_GetApiName+0x292>
                case PWM_SETDUTYCYCLE_ID: ErrorString_Ptr[1] = "Pwm_SetDutyCycle()"; break;
   18270:	4b42      	ldr	r3, [pc, #264]	; (1837c <Det_GetApiName+0x37c>)
   18272:	4a5b      	ldr	r2, [pc, #364]	; (183e0 <Det_GetApiName+0x3e0>)
   18274:	605a      	str	r2, [r3, #4]
   18276:	e00c      	b.n	18292 <Det_GetApiName+0x292>
                case PWM_SETPERIODANDDUTY_ID: ErrorString_Ptr[1] = "Pwm_SetPeriodAndDuty()"; break;
   18278:	4b40      	ldr	r3, [pc, #256]	; (1837c <Det_GetApiName+0x37c>)
   1827a:	4a5a      	ldr	r2, [pc, #360]	; (183e4 <Det_GetApiName+0x3e4>)
   1827c:	605a      	str	r2, [r3, #4]
   1827e:	e008      	b.n	18292 <Det_GetApiName+0x292>
                case PWM_SETOUTPUTTOIDLE_ID: ErrorString_Ptr[1] = "Pwm_SetOutputToIdle()"; break;
   18280:	4b3e      	ldr	r3, [pc, #248]	; (1837c <Det_GetApiName+0x37c>)
   18282:	4a59      	ldr	r2, [pc, #356]	; (183e8 <Det_GetApiName+0x3e8>)
   18284:	605a      	str	r2, [r3, #4]
   18286:	e004      	b.n	18292 <Det_GetApiName+0x292>
                case PWM_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Pwm_GetVersionInfo()"; break;
   18288:	4b3c      	ldr	r3, [pc, #240]	; (1837c <Det_GetApiName+0x37c>)
   1828a:	4a58      	ldr	r2, [pc, #352]	; (183ec <Det_GetApiName+0x3ec>)
   1828c:	605a      	str	r2, [r3, #4]
   1828e:	e000      	b.n	18292 <Det_GetApiName+0x292>
                default: break; //Api doesnt report det error or is not used.
   18290:	bf00      	nop
        break;
   18292:	e0c8      	b.n	18426 <Det_GetApiName+0x426>
            switch ( ApiId ) {  //9 Apis that report det errors.
   18294:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18298:	2b29      	cmp	r3, #41	; 0x29
   1829a:	f200 80c1 	bhi.w	18420 <Det_GetApiName+0x420>
   1829e:	a201      	add	r2, pc, #4	; (adr r2, 182a4 <Det_GetApiName+0x2a4>)
   182a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   182a4:	0001834d 	.word	0x0001834d
   182a8:	00018355 	.word	0x00018355
   182ac:	0001835d 	.word	0x0001835d
   182b0:	00018365 	.word	0x00018365
   182b4:	0001836d 	.word	0x0001836d
   182b8:	00018421 	.word	0x00018421
   182bc:	00018421 	.word	0x00018421
   182c0:	00018421 	.word	0x00018421
   182c4:	00018421 	.word	0x00018421
   182c8:	00018375 	.word	0x00018375
   182cc:	00018419 	.word	0x00018419
   182d0:	00018421 	.word	0x00018421
   182d4:	00018411 	.word	0x00018411
   182d8:	00018421 	.word	0x00018421
   182dc:	00018421 	.word	0x00018421
   182e0:	00018421 	.word	0x00018421
   182e4:	00018421 	.word	0x00018421
   182e8:	00018421 	.word	0x00018421
   182ec:	00018421 	.word	0x00018421
   182f0:	00018421 	.word	0x00018421
   182f4:	00018421 	.word	0x00018421
   182f8:	00018421 	.word	0x00018421
   182fc:	00018421 	.word	0x00018421
   18300:	00018421 	.word	0x00018421
   18304:	00018421 	.word	0x00018421
   18308:	00018421 	.word	0x00018421
   1830c:	00018421 	.word	0x00018421
   18310:	00018421 	.word	0x00018421
   18314:	00018421 	.word	0x00018421
   18318:	00018421 	.word	0x00018421
   1831c:	00018421 	.word	0x00018421
   18320:	00018421 	.word	0x00018421
   18324:	00018421 	.word	0x00018421
   18328:	00018421 	.word	0x00018421
   1832c:	00018421 	.word	0x00018421
   18330:	00018421 	.word	0x00018421
   18334:	00018421 	.word	0x00018421
   18338:	00018421 	.word	0x00018421
   1833c:	00018421 	.word	0x00018421
   18340:	00018421 	.word	0x00018421
   18344:	00018421 	.word	0x00018421
   18348:	00018409 	.word	0x00018409
                case ADC_INIT_ID: ErrorString_Ptr[1] = "Adc_Init()"; break;
   1834c:	4b0b      	ldr	r3, [pc, #44]	; (1837c <Det_GetApiName+0x37c>)
   1834e:	4a28      	ldr	r2, [pc, #160]	; (183f0 <Det_GetApiName+0x3f0>)
   18350:	605a      	str	r2, [r3, #4]
   18352:	e066      	b.n	18422 <Det_GetApiName+0x422>
                case ADC_DEINIT_ID: ErrorString_Ptr[1] = "Adc_DeInit()"; break;
   18354:	4b09      	ldr	r3, [pc, #36]	; (1837c <Det_GetApiName+0x37c>)
   18356:	4a27      	ldr	r2, [pc, #156]	; (183f4 <Det_GetApiName+0x3f4>)
   18358:	605a      	str	r2, [r3, #4]
   1835a:	e062      	b.n	18422 <Det_GetApiName+0x422>
                case ADC_STARTGROUPCONVERSION_ID: ErrorString_Ptr[1] = "Adc_StartGroupConversion()"; break;
   1835c:	4b07      	ldr	r3, [pc, #28]	; (1837c <Det_GetApiName+0x37c>)
   1835e:	4a26      	ldr	r2, [pc, #152]	; (183f8 <Det_GetApiName+0x3f8>)
   18360:	605a      	str	r2, [r3, #4]
   18362:	e05e      	b.n	18422 <Det_GetApiName+0x422>
                case ADC_STOPGROUPCONVERSION_ID: ErrorString_Ptr[1] = "Adc_StopGroupConversion()"; break;
   18364:	4b05      	ldr	r3, [pc, #20]	; (1837c <Det_GetApiName+0x37c>)
   18366:	4a25      	ldr	r2, [pc, #148]	; (183fc <Det_GetApiName+0x3fc>)
   18368:	605a      	str	r2, [r3, #4]
   1836a:	e05a      	b.n	18422 <Det_GetApiName+0x422>
                case ADC_VALUEREADGROUP_ID: ErrorString_Ptr[1] = "Adc_ReadGroup()"; break;
   1836c:	4b03      	ldr	r3, [pc, #12]	; (1837c <Det_GetApiName+0x37c>)
   1836e:	4a24      	ldr	r2, [pc, #144]	; (18400 <Det_GetApiName+0x400>)
   18370:	605a      	str	r2, [r3, #4]
   18372:	e056      	b.n	18422 <Det_GetApiName+0x422>
                case ADC_GETGROUPSTATUS_ID: ErrorString_Ptr[1] = "Adc_GetGroupStatus()"; break;
   18374:	4b01      	ldr	r3, [pc, #4]	; (1837c <Det_GetApiName+0x37c>)
   18376:	4a23      	ldr	r2, [pc, #140]	; (18404 <Det_GetApiName+0x404>)
   18378:	605a      	str	r2, [r3, #4]
   1837a:	e052      	b.n	18422 <Det_GetApiName+0x422>
   1837c:	1fff9768 	.word	0x1fff9768
   18380:	00018a30 	.word	0x00018a30
   18384:	00018a3c 	.word	0x00018a3c
   18388:	00018a4c 	.word	0x00018a4c
   1838c:	00018a5c 	.word	0x00018a5c
   18390:	00018a74 	.word	0x00018a74
   18394:	00018a84 	.word	0x00018a84
   18398:	00018a98 	.word	0x00018a98
   1839c:	00018ab4 	.word	0x00018ab4
   183a0:	00018ad0 	.word	0x00018ad0
   183a4:	00018af0 	.word	0x00018af0
   183a8:	00018afc 	.word	0x00018afc
   183ac:	00018b14 	.word	0x00018b14
   183b0:	00018b28 	.word	0x00018b28
   183b4:	00018b44 	.word	0x00018b44
   183b8:	00018b5c 	.word	0x00018b5c
   183bc:	00018b70 	.word	0x00018b70
   183c0:	00018b84 	.word	0x00018b84
   183c4:	00018b98 	.word	0x00018b98
   183c8:	00018bb0 	.word	0x00018bb0
   183cc:	00018bc8 	.word	0x00018bc8
   183d0:	00018bd8 	.word	0x00018bd8
   183d4:	00018be8 	.word	0x00018be8
   183d8:	00018c00 	.word	0x00018c00
   183dc:	00018c0c 	.word	0x00018c0c
   183e0:	00018c1c 	.word	0x00018c1c
   183e4:	00018c30 	.word	0x00018c30
   183e8:	00018c48 	.word	0x00018c48
   183ec:	00018c60 	.word	0x00018c60
   183f0:	00018c78 	.word	0x00018c78
   183f4:	00018c84 	.word	0x00018c84
   183f8:	00018c94 	.word	0x00018c94
   183fc:	00018cb0 	.word	0x00018cb0
   18400:	00018ccc 	.word	0x00018ccc
   18404:	00018cdc 	.word	0x00018cdc
                case ADC_CALIBRATE_ID: ErrorString_Ptr[1] = "Adc_Calibrate()"; break;
   18408:	4b09      	ldr	r3, [pc, #36]	; (18430 <Det_GetApiName+0x430>)
   1840a:	4a0a      	ldr	r2, [pc, #40]	; (18434 <Det_GetApiName+0x434>)
   1840c:	605a      	str	r2, [r3, #4]
   1840e:	e008      	b.n	18422 <Det_GetApiName+0x422>
                case ADC_SETUPRESULTBUFFER_ID: ErrorString_Ptr[1] = "Adc_SetupResultBuffer()"; break;
   18410:	4b07      	ldr	r3, [pc, #28]	; (18430 <Det_GetApiName+0x430>)
   18412:	4a09      	ldr	r2, [pc, #36]	; (18438 <Det_GetApiName+0x438>)
   18414:	605a      	str	r2, [r3, #4]
   18416:	e004      	b.n	18422 <Det_GetApiName+0x422>
                case ADC_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Adc_GetVersionInfo()"; break;
   18418:	4b05      	ldr	r3, [pc, #20]	; (18430 <Det_GetApiName+0x430>)
   1841a:	4a08      	ldr	r2, [pc, #32]	; (1843c <Det_GetApiName+0x43c>)
   1841c:	605a      	str	r2, [r3, #4]
   1841e:	e000      	b.n	18422 <Det_GetApiName+0x422>
                default: break; //Api doesnt report det error or is not used.
   18420:	bf00      	nop
        break;
   18422:	e000      	b.n	18426 <Det_GetApiName+0x426>
        break;
   18424:	bf00      	nop
    }

    return ErrorString_Ptr[1];
   18426:	4b02      	ldr	r3, [pc, #8]	; (18430 <Det_GetApiName+0x430>)
   18428:	685b      	ldr	r3, [r3, #4]
}
   1842a:	4618      	mov	r0, r3
   1842c:	b002      	add	sp, #8
   1842e:	4770      	bx	lr
   18430:	1fff9768 	.word	0x1fff9768
   18434:	00018cf4 	.word	0x00018cf4
   18438:	00018d04 	.word	0x00018d04
   1843c:	00018d1c 	.word	0x00018d1c

00018440 <Det_GetErrorMeaning>:
 * 
 * @param[in] ModuleId Module Id where error was detected.
 * @param[in] ErrorId Error Id reported. 
 * @return StringPtr Pointer to string Error meaning.
 */
char* Det_GetErrorMeaning( uint16 ModuleId, uint8 ErrorId ) {
   18440:	b082      	sub	sp, #8
   18442:	4603      	mov	r3, r0
   18444:	460a      	mov	r2, r1
   18446:	f8ad 3006 	strh.w	r3, [sp, #6]
   1844a:	4613      	mov	r3, r2
   1844c:	f88d 3005 	strb.w	r3, [sp, #5]

    switch( ModuleId ) {
   18450:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18454:	2b7c      	cmp	r3, #124	; 0x7c
   18456:	dc39      	bgt.n	184cc <Det_GetErrorMeaning+0x8c>
   18458:	2b65      	cmp	r3, #101	; 0x65
   1845a:	f2c0 81db 	blt.w	18814 <Det_GetErrorMeaning+0x3d4>
   1845e:	3b65      	subs	r3, #101	; 0x65
   18460:	2b17      	cmp	r3, #23
   18462:	f200 81d7 	bhi.w	18814 <Det_GetErrorMeaning+0x3d4>
   18466:	a201      	add	r2, pc, #4	; (adr r2, 1846c <Det_GetErrorMeaning+0x2c>)
   18468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1846c:	000184d3 	.word	0x000184d3
   18470:	00018815 	.word	0x00018815
   18474:	00018815 	.word	0x00018815
   18478:	00018815 	.word	0x00018815
   1847c:	00018815 	.word	0x00018815
   18480:	00018815 	.word	0x00018815
   18484:	00018815 	.word	0x00018815
   18488:	00018815 	.word	0x00018815
   1848c:	00018815 	.word	0x00018815
   18490:	00018815 	.word	0x00018815
   18494:	00018815 	.word	0x00018815
   18498:	00018815 	.word	0x00018815
   1849c:	00018815 	.word	0x00018815
   184a0:	00018815 	.word	0x00018815
   184a4:	00018815 	.word	0x00018815
   184a8:	00018815 	.word	0x00018815
   184ac:	00018815 	.word	0x00018815
   184b0:	00018815 	.word	0x00018815
   184b4:	00018815 	.word	0x00018815
   184b8:	000185e7 	.word	0x000185e7
   184bc:	0001869b 	.word	0x0001869b
   184c0:	00018815 	.word	0x00018815
   184c4:	000186f9 	.word	0x000186f9
   184c8:	0001856f 	.word	0x0001856f
   184cc:	2bff      	cmp	r3, #255	; 0xff
   184ce:	d035      	beq.n	1853c <Det_GetErrorMeaning+0xfc>
                default: break; //Error ID not registered.
            }
        break;

        default:    //Module Id is no used in aplication.
        break;
   184d0:	e1a0      	b.n	18814 <Det_GetErrorMeaning+0x3d4>
            switch ( ErrorId ) {
   184d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   184d6:	3b0b      	subs	r3, #11
   184d8:	2b08      	cmp	r3, #8
   184da:	d82d      	bhi.n	18538 <Det_GetErrorMeaning+0xf8>
   184dc:	a201      	add	r2, pc, #4	; (adr r2, 184e4 <Det_GetErrorMeaning+0xa4>)
   184de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   184e2:	bf00      	nop
   184e4:	00018511 	.word	0x00018511
   184e8:	00018519 	.word	0x00018519
   184ec:	00018539 	.word	0x00018539
   184f0:	00018539 	.word	0x00018539
   184f4:	00018529 	.word	0x00018529
   184f8:	00018521 	.word	0x00018521
   184fc:	00018509 	.word	0x00018509
   18500:	00018539 	.word	0x00018539
   18504:	00018531 	.word	0x00018531
                case MCU_E_INIT_FAILED: ErrorString_Ptr[2] = "Invalid conf pointer"; break;
   18508:	4ba8      	ldr	r3, [pc, #672]	; (187ac <Det_GetErrorMeaning+0x36c>)
   1850a:	4aa9      	ldr	r2, [pc, #676]	; (187b0 <Det_GetErrorMeaning+0x370>)
   1850c:	609a      	str	r2, [r3, #8]
   1850e:	e014      	b.n	1853a <Det_GetErrorMeaning+0xfa>
                case MCU_E_PARAM_CLOCK: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   18510:	4ba6      	ldr	r3, [pc, #664]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18512:	4aa8      	ldr	r2, [pc, #672]	; (187b4 <Det_GetErrorMeaning+0x374>)
   18514:	609a      	str	r2, [r3, #8]
   18516:	e010      	b.n	1853a <Det_GetErrorMeaning+0xfa>
                case MCU_E_PARAM_MODE: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   18518:	4ba4      	ldr	r3, [pc, #656]	; (187ac <Det_GetErrorMeaning+0x36c>)
   1851a:	4aa6      	ldr	r2, [pc, #664]	; (187b4 <Det_GetErrorMeaning+0x374>)
   1851c:	609a      	str	r2, [r3, #8]
   1851e:	e00c      	b.n	1853a <Det_GetErrorMeaning+0xfa>
                case MCU_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   18520:	4ba2      	ldr	r3, [pc, #648]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18522:	4aa4      	ldr	r2, [pc, #656]	; (187b4 <Det_GetErrorMeaning+0x374>)
   18524:	609a      	str	r2, [r3, #8]
   18526:	e008      	b.n	1853a <Det_GetErrorMeaning+0xfa>
                case MCU_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   18528:	4ba0      	ldr	r3, [pc, #640]	; (187ac <Det_GetErrorMeaning+0x36c>)
   1852a:	4aa3      	ldr	r2, [pc, #652]	; (187b8 <Det_GetErrorMeaning+0x378>)
   1852c:	609a      	str	r2, [r3, #8]
   1852e:	e004      	b.n	1853a <Det_GetErrorMeaning+0xfa>
                case MCU_E_ALREADY_INITIALIZED: ErrorString_Ptr[2] = "Driver already initialized"; break;
   18530:	4b9e      	ldr	r3, [pc, #632]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18532:	4aa2      	ldr	r2, [pc, #648]	; (187bc <Det_GetErrorMeaning+0x37c>)
   18534:	609a      	str	r2, [r3, #8]
   18536:	e000      	b.n	1853a <Det_GetErrorMeaning+0xfa>
                default: break; //Error ID not registered.
   18538:	bf00      	nop
        break;
   1853a:	e16c      	b.n	18816 <Det_GetErrorMeaning+0x3d6>
            switch ( ErrorId ) {
   1853c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18540:	2b04      	cmp	r3, #4
   18542:	d00a      	beq.n	1855a <Det_GetErrorMeaning+0x11a>
   18544:	2b04      	cmp	r3, #4
   18546:	dc10      	bgt.n	1856a <Det_GetErrorMeaning+0x12a>
   18548:	2b01      	cmp	r3, #1
   1854a:	d002      	beq.n	18552 <Det_GetErrorMeaning+0x112>
   1854c:	2b02      	cmp	r3, #2
   1854e:	d008      	beq.n	18562 <Det_GetErrorMeaning+0x122>
                default: break; //Error ID not registered.
   18550:	e00b      	b.n	1856a <Det_GetErrorMeaning+0x12a>
                case PLATFORM_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid pointer"; break;
   18552:	4b96      	ldr	r3, [pc, #600]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18554:	4a9a      	ldr	r2, [pc, #616]	; (187c0 <Det_GetErrorMeaning+0x380>)
   18556:	609a      	str	r2, [r3, #8]
   18558:	e008      	b.n	1856c <Det_GetErrorMeaning+0x12c>
                case PLATFORM_E_PARAM_CONFIG: ErrorString_Ptr[2] = "Call from wrong mapped partition"; break;
   1855a:	4b94      	ldr	r3, [pc, #592]	; (187ac <Det_GetErrorMeaning+0x36c>)
   1855c:	4a99      	ldr	r2, [pc, #612]	; (187c4 <Det_GetErrorMeaning+0x384>)
   1855e:	609a      	str	r2, [r3, #8]
   18560:	e004      	b.n	1856c <Det_GetErrorMeaning+0x12c>
                case PLATFORM_E_PARAM_OUT_OF_RANGE: ErrorString_Ptr[2] = "Parameter out of range"; break;
   18562:	4b92      	ldr	r3, [pc, #584]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18564:	4a98      	ldr	r2, [pc, #608]	; (187c8 <Det_GetErrorMeaning+0x388>)
   18566:	609a      	str	r2, [r3, #8]
   18568:	e000      	b.n	1856c <Det_GetErrorMeaning+0x12c>
                default: break; //Error ID not registered.
   1856a:	bf00      	nop
        break;
   1856c:	e153      	b.n	18816 <Det_GetErrorMeaning+0x3d6>
            switch ( ErrorId ) {
   1856e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18572:	2b10      	cmp	r3, #16
   18574:	dc16      	bgt.n	185a4 <Det_GetErrorMeaning+0x164>
   18576:	2b0a      	cmp	r3, #10
   18578:	db33      	blt.n	185e2 <Det_GetErrorMeaning+0x1a2>
   1857a:	3b0a      	subs	r3, #10
   1857c:	2b06      	cmp	r3, #6
   1857e:	d830      	bhi.n	185e2 <Det_GetErrorMeaning+0x1a2>
   18580:	a201      	add	r2, pc, #4	; (adr r2, 18588 <Det_GetErrorMeaning+0x148>)
   18582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18586:	bf00      	nop
   18588:	000185ab 	.word	0x000185ab
   1858c:	000185e3 	.word	0x000185e3
   18590:	000185bb 	.word	0x000185bb
   18594:	000185cb 	.word	0x000185cb
   18598:	000185b3 	.word	0x000185b3
   1859c:	000185d3 	.word	0x000185d3
   185a0:	000185db 	.word	0x000185db
   185a4:	2bf0      	cmp	r3, #240	; 0xf0
   185a6:	d00c      	beq.n	185c2 <Det_GetErrorMeaning+0x182>
                default: break; //Error ID not registered.
   185a8:	e01b      	b.n	185e2 <Det_GetErrorMeaning+0x1a2>
                case PORT_E_PARAM_PIN: ErrorString_Ptr[2] = "Invalid Port Pin ID"; break;
   185aa:	4b80      	ldr	r3, [pc, #512]	; (187ac <Det_GetErrorMeaning+0x36c>)
   185ac:	4a87      	ldr	r2, [pc, #540]	; (187cc <Det_GetErrorMeaning+0x38c>)
   185ae:	609a      	str	r2, [r3, #8]
   185b0:	e018      	b.n	185e4 <Det_GetErrorMeaning+0x1a4>
                case PORT_E_MODE_UNCHANGEABLE: ErrorString_Ptr[2] = "Port pin mode is unchangeable"; break;
   185b2:	4b7e      	ldr	r3, [pc, #504]	; (187ac <Det_GetErrorMeaning+0x36c>)
   185b4:	4a86      	ldr	r2, [pc, #536]	; (187d0 <Det_GetErrorMeaning+0x390>)
   185b6:	609a      	str	r2, [r3, #8]
   185b8:	e014      	b.n	185e4 <Det_GetErrorMeaning+0x1a4>
                case PORT_E_INIT_FAILED: ErrorString_Ptr[2] = "Invalid conf pointer"; break;
   185ba:	4b7c      	ldr	r3, [pc, #496]	; (187ac <Det_GetErrorMeaning+0x36c>)
   185bc:	4a7c      	ldr	r2, [pc, #496]	; (187b0 <Det_GetErrorMeaning+0x370>)
   185be:	609a      	str	r2, [r3, #8]
   185c0:	e010      	b.n	185e4 <Det_GetErrorMeaning+0x1a4>
                case PORT_E_PARAM_CONFIG: ErrorString_Ptr[2] = "Invalid conf pointer"; break;
   185c2:	4b7a      	ldr	r3, [pc, #488]	; (187ac <Det_GetErrorMeaning+0x36c>)
   185c4:	4a7a      	ldr	r2, [pc, #488]	; (187b0 <Det_GetErrorMeaning+0x370>)
   185c6:	609a      	str	r2, [r3, #8]
   185c8:	e00c      	b.n	185e4 <Det_GetErrorMeaning+0x1a4>
                case PORT_E_PARAM_INVALID_MODE: ErrorString_Ptr[2] = "Invalid port pin mode"; break;
   185ca:	4b78      	ldr	r3, [pc, #480]	; (187ac <Det_GetErrorMeaning+0x36c>)
   185cc:	4a81      	ldr	r2, [pc, #516]	; (187d4 <Det_GetErrorMeaning+0x394>)
   185ce:	609a      	str	r2, [r3, #8]
   185d0:	e008      	b.n	185e4 <Det_GetErrorMeaning+0x1a4>
                case PORT_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   185d2:	4b76      	ldr	r3, [pc, #472]	; (187ac <Det_GetErrorMeaning+0x36c>)
   185d4:	4a78      	ldr	r2, [pc, #480]	; (187b8 <Det_GetErrorMeaning+0x378>)
   185d6:	609a      	str	r2, [r3, #8]
   185d8:	e004      	b.n	185e4 <Det_GetErrorMeaning+0x1a4>
                case PORT_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   185da:	4b74      	ldr	r3, [pc, #464]	; (187ac <Det_GetErrorMeaning+0x36c>)
   185dc:	4a75      	ldr	r2, [pc, #468]	; (187b4 <Det_GetErrorMeaning+0x374>)
   185de:	609a      	str	r2, [r3, #8]
   185e0:	e000      	b.n	185e4 <Det_GetErrorMeaning+0x1a4>
                default: break; //Error ID not registered.
   185e2:	bf00      	nop
        break;
   185e4:	e117      	b.n	18816 <Det_GetErrorMeaning+0x3d6>
            switch ( ErrorId ) {
   185e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   185ea:	2b21      	cmp	r3, #33	; 0x21
   185ec:	dc38      	bgt.n	18660 <Det_GetErrorMeaning+0x220>
   185ee:	2b0a      	cmp	r3, #10
   185f0:	db51      	blt.n	18696 <Det_GetErrorMeaning+0x256>
   185f2:	3b0a      	subs	r3, #10
   185f4:	2b17      	cmp	r3, #23
   185f6:	d84e      	bhi.n	18696 <Det_GetErrorMeaning+0x256>
   185f8:	a201      	add	r2, pc, #4	; (adr r2, 18600 <Det_GetErrorMeaning+0x1c0>)
   185fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   185fe:	bf00      	nop
   18600:	00018677 	.word	0x00018677
   18604:	00018697 	.word	0x00018697
   18608:	00018697 	.word	0x00018697
   1860c:	00018697 	.word	0x00018697
   18610:	00018697 	.word	0x00018697
   18614:	00018697 	.word	0x00018697
   18618:	00018697 	.word	0x00018697
   1861c:	00018697 	.word	0x00018697
   18620:	00018697 	.word	0x00018697
   18624:	00018697 	.word	0x00018697
   18628:	0001867f 	.word	0x0001867f
   1862c:	00018697 	.word	0x00018697
   18630:	00018697 	.word	0x00018697
   18634:	00018697 	.word	0x00018697
   18638:	00018697 	.word	0x00018697
   1863c:	00018697 	.word	0x00018697
   18640:	00018697 	.word	0x00018697
   18644:	00018697 	.word	0x00018697
   18648:	00018697 	.word	0x00018697
   1864c:	00018697 	.word	0x00018697
   18650:	00018697 	.word	0x00018697
   18654:	00018687 	.word	0x00018687
   18658:	0001866f 	.word	0x0001866f
   1865c:	00018667 	.word	0x00018667
   18660:	2bf0      	cmp	r3, #240	; 0xf0
   18662:	d014      	beq.n	1868e <Det_GetErrorMeaning+0x24e>
                default: break; //Error ID not registered.
   18664:	e017      	b.n	18696 <Det_GetErrorMeaning+0x256>
                case DIO_E_PARAM_LEVEL: ErrorString_Ptr[2] = "Invalid dio channel level"; break;
   18666:	4b51      	ldr	r3, [pc, #324]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18668:	4a5b      	ldr	r2, [pc, #364]	; (187d8 <Det_GetErrorMeaning+0x398>)
   1866a:	609a      	str	r2, [r3, #8]
   1866c:	e014      	b.n	18698 <Det_GetErrorMeaning+0x258>
                case DIO_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   1866e:	4b4f      	ldr	r3, [pc, #316]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18670:	4a50      	ldr	r2, [pc, #320]	; (187b4 <Det_GetErrorMeaning+0x374>)
   18672:	609a      	str	r2, [r3, #8]
   18674:	e010      	b.n	18698 <Det_GetErrorMeaning+0x258>
                case DIO_E_PARAM_INVALID_CHANNEL_ID: ErrorString_Ptr[2] = "Invalid dio channel id"; break;
   18676:	4b4d      	ldr	r3, [pc, #308]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18678:	4a58      	ldr	r2, [pc, #352]	; (187dc <Det_GetErrorMeaning+0x39c>)
   1867a:	609a      	str	r2, [r3, #8]
   1867c:	e00c      	b.n	18698 <Det_GetErrorMeaning+0x258>
                case DIO_E_PARAM_INVALID_PORT_ID: ErrorString_Ptr[2] = "Invalid port id"; break;
   1867e:	4b4b      	ldr	r3, [pc, #300]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18680:	4a57      	ldr	r2, [pc, #348]	; (187e0 <Det_GetErrorMeaning+0x3a0>)
   18682:	609a      	str	r2, [r3, #8]
   18684:	e008      	b.n	18698 <Det_GetErrorMeaning+0x258>
                case DIO_E_PARAM_INVALID_GROUP_ID: ErrorString_Ptr[2] = "Invalid channel group id"; break;
   18686:	4b49      	ldr	r3, [pc, #292]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18688:	4a56      	ldr	r2, [pc, #344]	; (187e4 <Det_GetErrorMeaning+0x3a4>)
   1868a:	609a      	str	r2, [r3, #8]
   1868c:	e004      	b.n	18698 <Det_GetErrorMeaning+0x258>
                case DIO_E_PARAM_CONFIG: ErrorString_Ptr[2] = "Invalid config parameter"; break;
   1868e:	4b47      	ldr	r3, [pc, #284]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18690:	4a55      	ldr	r2, [pc, #340]	; (187e8 <Det_GetErrorMeaning+0x3a8>)
   18692:	609a      	str	r2, [r3, #8]
   18694:	e000      	b.n	18698 <Det_GetErrorMeaning+0x258>
                default: break; //Error ID not registered.
   18696:	bf00      	nop
        break;        
   18698:	e0bd      	b.n	18816 <Det_GetErrorMeaning+0x3d6>
            switch ( ErrorId ) {
   1869a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1869e:	3b10      	subs	r3, #16
   186a0:	2b05      	cmp	r3, #5
   186a2:	d827      	bhi.n	186f4 <Det_GetErrorMeaning+0x2b4>
   186a4:	a201      	add	r2, pc, #4	; (adr r2, 186ac <Det_GetErrorMeaning+0x26c>)
   186a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   186aa:	bf00      	nop
   186ac:	000186c5 	.word	0x000186c5
   186b0:	000186cd 	.word	0x000186cd
   186b4:	000186dd 	.word	0x000186dd
   186b8:	000186e5 	.word	0x000186e5
   186bc:	000186d5 	.word	0x000186d5
   186c0:	000186ed 	.word	0x000186ed
                case PWM_E_INIT_FAILED: ErrorString_Ptr[2] = "Invalid config pointer"; break;
   186c4:	4b39      	ldr	r3, [pc, #228]	; (187ac <Det_GetErrorMeaning+0x36c>)
   186c6:	4a49      	ldr	r2, [pc, #292]	; (187ec <Det_GetErrorMeaning+0x3ac>)
   186c8:	609a      	str	r2, [r3, #8]
   186ca:	e014      	b.n	186f6 <Det_GetErrorMeaning+0x2b6>
                case PWM_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   186cc:	4b37      	ldr	r3, [pc, #220]	; (187ac <Det_GetErrorMeaning+0x36c>)
   186ce:	4a3a      	ldr	r2, [pc, #232]	; (187b8 <Det_GetErrorMeaning+0x378>)
   186d0:	609a      	str	r2, [r3, #8]
   186d2:	e010      	b.n	186f6 <Det_GetErrorMeaning+0x2b6>
                case PWM_E_ALREADY_INITIALIZED: ErrorString_Ptr[2] = "Driver already initialized"; break;
   186d4:	4b35      	ldr	r3, [pc, #212]	; (187ac <Det_GetErrorMeaning+0x36c>)
   186d6:	4a39      	ldr	r2, [pc, #228]	; (187bc <Det_GetErrorMeaning+0x37c>)
   186d8:	609a      	str	r2, [r3, #8]
   186da:	e00c      	b.n	186f6 <Det_GetErrorMeaning+0x2b6>
                case PWM_E_PARAM_CHANNEL: ErrorString_Ptr[2] = "Invalid pwm channel"; break;
   186dc:	4b33      	ldr	r3, [pc, #204]	; (187ac <Det_GetErrorMeaning+0x36c>)
   186de:	4a44      	ldr	r2, [pc, #272]	; (187f0 <Det_GetErrorMeaning+0x3b0>)
   186e0:	609a      	str	r2, [r3, #8]
   186e2:	e008      	b.n	186f6 <Det_GetErrorMeaning+0x2b6>
                case PWM_E_PERIOD_UNCHANGEABLE: ErrorString_Ptr[2] = "Pwm channel period is unchangeable"; break;
   186e4:	4b31      	ldr	r3, [pc, #196]	; (187ac <Det_GetErrorMeaning+0x36c>)
   186e6:	4a43      	ldr	r2, [pc, #268]	; (187f4 <Det_GetErrorMeaning+0x3b4>)
   186e8:	609a      	str	r2, [r3, #8]
   186ea:	e004      	b.n	186f6 <Det_GetErrorMeaning+0x2b6>
                case PWM_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   186ec:	4b2f      	ldr	r3, [pc, #188]	; (187ac <Det_GetErrorMeaning+0x36c>)
   186ee:	4a31      	ldr	r2, [pc, #196]	; (187b4 <Det_GetErrorMeaning+0x374>)
   186f0:	609a      	str	r2, [r3, #8]
   186f2:	e000      	b.n	186f6 <Det_GetErrorMeaning+0x2b6>
                default: break; //Error ID not registered.
   186f4:	bf00      	nop
        break;
   186f6:	e08e      	b.n	18816 <Det_GetErrorMeaning+0x3d6>
            switch ( ErrorId ) {
   186f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   186fc:	3b0a      	subs	r3, #10
   186fe:	2b21      	cmp	r3, #33	; 0x21
   18700:	f200 8086 	bhi.w	18810 <Det_GetErrorMeaning+0x3d0>
   18704:	a201      	add	r2, pc, #4	; (adr r2, 1870c <Det_GetErrorMeaning+0x2cc>)
   18706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1870a:	bf00      	nop
   1870c:	00018795 	.word	0x00018795
   18710:	00018811 	.word	0x00018811
   18714:	00018811 	.word	0x00018811
   18718:	0001879d 	.word	0x0001879d
   1871c:	00018811 	.word	0x00018811
   18720:	00018811 	.word	0x00018811
   18724:	00018811 	.word	0x00018811
   18728:	00018811 	.word	0x00018811
   1872c:	00018811 	.word	0x00018811
   18730:	00018811 	.word	0x00018811
   18734:	000187a5 	.word	0x000187a5
   18738:	000187f9 	.word	0x000187f9
   1873c:	00018811 	.word	0x00018811
   18740:	00018811 	.word	0x00018811
   18744:	00018811 	.word	0x00018811
   18748:	00018801 	.word	0x00018801
   1874c:	00018811 	.word	0x00018811
   18750:	00018811 	.word	0x00018811
   18754:	00018811 	.word	0x00018811
   18758:	00018811 	.word	0x00018811
   1875c:	00018811 	.word	0x00018811
   18760:	00018811 	.word	0x00018811
   18764:	00018811 	.word	0x00018811
   18768:	00018811 	.word	0x00018811
   1876c:	00018811 	.word	0x00018811
   18770:	00018811 	.word	0x00018811
   18774:	00018811 	.word	0x00018811
   18778:	00018811 	.word	0x00018811
   1877c:	00018811 	.word	0x00018811
   18780:	00018811 	.word	0x00018811
   18784:	00018811 	.word	0x00018811
   18788:	00018811 	.word	0x00018811
   1878c:	00018811 	.word	0x00018811
   18790:	00018809 	.word	0x00018809
                case ADC_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   18794:	4b05      	ldr	r3, [pc, #20]	; (187ac <Det_GetErrorMeaning+0x36c>)
   18796:	4a08      	ldr	r2, [pc, #32]	; (187b8 <Det_GetErrorMeaning+0x378>)
   18798:	609a      	str	r2, [r3, #8]
   1879a:	e03a      	b.n	18812 <Det_GetErrorMeaning+0x3d2>
                case ADC_E_ALREADY_INITIALIZED: ErrorString_Ptr[2] = "Driver already initialized"; break;
   1879c:	4b03      	ldr	r3, [pc, #12]	; (187ac <Det_GetErrorMeaning+0x36c>)
   1879e:	4a07      	ldr	r2, [pc, #28]	; (187bc <Det_GetErrorMeaning+0x37c>)
   187a0:	609a      	str	r2, [r3, #8]
   187a2:	e036      	b.n	18812 <Det_GetErrorMeaning+0x3d2>
                case ADC_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid pointer"; break;
   187a4:	4b01      	ldr	r3, [pc, #4]	; (187ac <Det_GetErrorMeaning+0x36c>)
   187a6:	4a06      	ldr	r2, [pc, #24]	; (187c0 <Det_GetErrorMeaning+0x380>)
   187a8:	609a      	str	r2, [r3, #8]
   187aa:	e032      	b.n	18812 <Det_GetErrorMeaning+0x3d2>
   187ac:	1fff9768 	.word	0x1fff9768
   187b0:	00018d34 	.word	0x00018d34
   187b4:	00018d4c 	.word	0x00018d4c
   187b8:	00018d64 	.word	0x00018d64
   187bc:	00018d7c 	.word	0x00018d7c
   187c0:	00018d98 	.word	0x00018d98
   187c4:	00018da8 	.word	0x00018da8
   187c8:	00018dcc 	.word	0x00018dcc
   187cc:	00018de4 	.word	0x00018de4
   187d0:	00018df8 	.word	0x00018df8
   187d4:	00018e18 	.word	0x00018e18
   187d8:	00018e30 	.word	0x00018e30
   187dc:	00018e4c 	.word	0x00018e4c
   187e0:	00018e64 	.word	0x00018e64
   187e4:	00018e74 	.word	0x00018e74
   187e8:	00018e90 	.word	0x00018e90
   187ec:	00018eac 	.word	0x00018eac
   187f0:	00018ec4 	.word	0x00018ec4
   187f4:	00018ed8 	.word	0x00018ed8
                case ADC_E_PARAM_GROUP: ErrorString_Ptr[2] = "Invalid adc group"; break;
   187f8:	4b09      	ldr	r3, [pc, #36]	; (18820 <Det_GetErrorMeaning+0x3e0>)
   187fa:	4a0a      	ldr	r2, [pc, #40]	; (18824 <Det_GetErrorMeaning+0x3e4>)
   187fc:	609a      	str	r2, [r3, #8]
   187fe:	e008      	b.n	18812 <Det_GetErrorMeaning+0x3d2>
                case ADC_E_BUFFER_UNINIT: ErrorString_Ptr[2] = "Buffer pointer not initialized"; break;
   18800:	4b07      	ldr	r3, [pc, #28]	; (18820 <Det_GetErrorMeaning+0x3e0>)
   18802:	4a09      	ldr	r2, [pc, #36]	; (18828 <Det_GetErrorMeaning+0x3e8>)
   18804:	609a      	str	r2, [r3, #8]
   18806:	e004      	b.n	18812 <Det_GetErrorMeaning+0x3d2>
                case ADC_E_TIMEOUT: ErrorString_Ptr[2] = "Calibration operation timed out"; break;
   18808:	4b05      	ldr	r3, [pc, #20]	; (18820 <Det_GetErrorMeaning+0x3e0>)
   1880a:	4a08      	ldr	r2, [pc, #32]	; (1882c <Det_GetErrorMeaning+0x3ec>)
   1880c:	609a      	str	r2, [r3, #8]
   1880e:	e000      	b.n	18812 <Det_GetErrorMeaning+0x3d2>
                default: break; //Error ID not registered.
   18810:	bf00      	nop
        break;
   18812:	e000      	b.n	18816 <Det_GetErrorMeaning+0x3d6>
        break;
   18814:	bf00      	nop
    }

    return ErrorString_Ptr[2];
   18816:	4b02      	ldr	r3, [pc, #8]	; (18820 <Det_GetErrorMeaning+0x3e0>)
   18818:	689b      	ldr	r3, [r3, #8]
}
   1881a:	4618      	mov	r0, r3
   1881c:	b002      	add	sp, #8
   1881e:	4770      	bx	lr
   18820:	1fff9768 	.word	0x1fff9768
   18824:	00018efc 	.word	0x00018efc
   18828:	00018f10 	.word	0x00018f10
   1882c:	00018f30 	.word	0x00018f30

00018830 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   18830:	b510      	push	{r4, lr}
   18832:	b088      	sub	sp, #32
   18834:	4604      	mov	r4, r0
   18836:	4608      	mov	r0, r1
   18838:	4611      	mov	r1, r2
   1883a:	461a      	mov	r2, r3
   1883c:	4623      	mov	r3, r4
   1883e:	f8ad 300e 	strh.w	r3, [sp, #14]
   18842:	4603      	mov	r3, r0
   18844:	f88d 300d 	strb.w	r3, [sp, #13]
   18848:	460b      	mov	r3, r1
   1884a:	f88d 300c 	strb.w	r3, [sp, #12]
   1884e:	4613      	mov	r3, r2
   18850:	f88d 300b 	strb.w	r3, [sp, #11]
    //local data.
    char* Strings_error[3]; //Pointer to strings for the error message.

    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18854:	f7e8 ffc4 	bl	17e0 <Sys_GetCoreID>
   18858:	4603      	mov	r3, r0
   1885a:	9307      	str	r3, [sp, #28]

    Det_ModuleId[u32CoreId] = ModuleId;
   1885c:	4921      	ldr	r1, [pc, #132]	; (188e4 <Det_ReportError+0xb4>)
   1885e:	9b07      	ldr	r3, [sp, #28]
   18860:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   18864:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   18868:	4a1f      	ldr	r2, [pc, #124]	; (188e8 <Det_ReportError+0xb8>)
   1886a:	9b07      	ldr	r3, [sp, #28]
   1886c:	4413      	add	r3, r2
   1886e:	f89d 200d 	ldrb.w	r2, [sp, #13]
   18872:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   18874:	4a1d      	ldr	r2, [pc, #116]	; (188ec <Det_ReportError+0xbc>)
   18876:	9b07      	ldr	r3, [sp, #28]
   18878:	4413      	add	r3, r2
   1887a:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1887e:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   18880:	4a1b      	ldr	r2, [pc, #108]	; (188f0 <Det_ReportError+0xc0>)
   18882:	9b07      	ldr	r3, [sp, #28]
   18884:	4413      	add	r3, r2
   18886:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1888a:	701a      	strb	r2, [r3, #0]

    //Obtaining strings for error message.
    Strings_error[0] = Det_GetModuleName( ModuleId );
   1888c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   18890:	4618      	mov	r0, r3
   18892:	f7ff fb45 	bl	17f20 <Det_GetModuleName>
   18896:	4603      	mov	r3, r0
   18898:	9304      	str	r3, [sp, #16]
    Strings_error[1] = Det_GetApiName( ModuleId, ApiId );
   1889a:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1889e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   188a2:	4611      	mov	r1, r2
   188a4:	4618      	mov	r0, r3
   188a6:	f7ff fbab 	bl	18000 <Det_GetApiName>
   188aa:	4603      	mov	r3, r0
   188ac:	9305      	str	r3, [sp, #20]
    Strings_error[2] = Det_GetErrorMeaning( ModuleId, ErrorId );
   188ae:	f89d 200b 	ldrb.w	r2, [sp, #11]
   188b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   188b6:	4611      	mov	r1, r2
   188b8:	4618      	mov	r0, r3
   188ba:	f7ff fdc1 	bl	18440 <Det_GetErrorMeaning>
   188be:	4603      	mov	r3, r0
   188c0:	9306      	str	r3, [sp, #24]

    SEGGER_RTT_printf( 0, "Error: Error in %s in function %s with the instance %d, %s\n", 
   188c2:	9904      	ldr	r1, [sp, #16]
   188c4:	9805      	ldr	r0, [sp, #20]
   188c6:	f89d 300d 	ldrb.w	r3, [sp, #13]
   188ca:	9a06      	ldr	r2, [sp, #24]
   188cc:	9201      	str	r2, [sp, #4]
   188ce:	9300      	str	r3, [sp, #0]
   188d0:	4603      	mov	r3, r0
   188d2:	460a      	mov	r2, r1
   188d4:	4907      	ldr	r1, [pc, #28]	; (188f4 <Det_ReportError+0xc4>)
   188d6:	2000      	movs	r0, #0
   188d8:	f7e9 fc88 	bl	21ec <SEGGER_RTT_printf>
    Strings_error[0], Strings_error[1], InstanceId, Strings_error[2] );

    return E_OK;
   188dc:	2300      	movs	r3, #0
}
   188de:	4618      	mov	r0, r3
   188e0:	b008      	add	sp, #32
   188e2:	bd10      	pop	{r4, pc}
   188e4:	1fff9778 	.word	0x1fff9778
   188e8:	1fff9744 	.word	0x1fff9744
   188ec:	1fff9748 	.word	0x1fff9748
   188f0:	1fff974c 	.word	0x1fff974c
   188f4:	00018f50 	.word	0x00018f50

000188f8 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   188f8:	b510      	push	{r4, lr}
   188fa:	b084      	sub	sp, #16
   188fc:	4604      	mov	r4, r0
   188fe:	4608      	mov	r0, r1
   18900:	4611      	mov	r1, r2
   18902:	461a      	mov	r2, r3
   18904:	4623      	mov	r3, r4
   18906:	f8ad 3006 	strh.w	r3, [sp, #6]
   1890a:	4603      	mov	r3, r0
   1890c:	f88d 3005 	strb.w	r3, [sp, #5]
   18910:	460b      	mov	r3, r1
   18912:	f88d 3004 	strb.w	r3, [sp, #4]
   18916:	4613      	mov	r3, r2
   18918:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1891c:	f7e8 ff60 	bl	17e0 <Sys_GetCoreID>
   18920:	4603      	mov	r3, r0
   18922:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   18924:	490d      	ldr	r1, [pc, #52]	; (1895c <Det_ReportRuntimeError+0x64>)
   18926:	9b03      	ldr	r3, [sp, #12]
   18928:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1892c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   18930:	4a0b      	ldr	r2, [pc, #44]	; (18960 <Det_ReportRuntimeError+0x68>)
   18932:	9b03      	ldr	r3, [sp, #12]
   18934:	4413      	add	r3, r2
   18936:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1893a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   1893c:	4a09      	ldr	r2, [pc, #36]	; (18964 <Det_ReportRuntimeError+0x6c>)
   1893e:	9b03      	ldr	r3, [sp, #12]
   18940:	4413      	add	r3, r2
   18942:	f89d 2004 	ldrb.w	r2, [sp, #4]
   18946:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   18948:	4a07      	ldr	r2, [pc, #28]	; (18968 <Det_ReportRuntimeError+0x70>)
   1894a:	9b03      	ldr	r3, [sp, #12]
   1894c:	4413      	add	r3, r2
   1894e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   18952:	701a      	strb	r2, [r3, #0]

    return E_OK;
   18954:	2300      	movs	r3, #0
}
   18956:	4618      	mov	r0, r3
   18958:	b004      	add	sp, #16
   1895a:	bd10      	pop	{r4, pc}
   1895c:	1fff977c 	.word	0x1fff977c
   18960:	1fff9750 	.word	0x1fff9750
   18964:	1fff9754 	.word	0x1fff9754
   18968:	1fff9758 	.word	0x1fff9758

0001896c <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   1896c:	b510      	push	{r4, lr}
   1896e:	b084      	sub	sp, #16
   18970:	4604      	mov	r4, r0
   18972:	4608      	mov	r0, r1
   18974:	4611      	mov	r1, r2
   18976:	461a      	mov	r2, r3
   18978:	4623      	mov	r3, r4
   1897a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1897e:	4603      	mov	r3, r0
   18980:	f88d 3005 	strb.w	r3, [sp, #5]
   18984:	460b      	mov	r3, r1
   18986:	f88d 3004 	strb.w	r3, [sp, #4]
   1898a:	4613      	mov	r3, r2
   1898c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18990:	f7e8 ff26 	bl	17e0 <Sys_GetCoreID>
   18994:	4603      	mov	r3, r0
   18996:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   18998:	490d      	ldr	r1, [pc, #52]	; (189d0 <Det_ReportTransientFault+0x64>)
   1899a:	9b03      	ldr	r3, [sp, #12]
   1899c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   189a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   189a4:	4a0b      	ldr	r2, [pc, #44]	; (189d4 <Det_ReportTransientFault+0x68>)
   189a6:	9b03      	ldr	r3, [sp, #12]
   189a8:	4413      	add	r3, r2
   189aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
   189ae:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   189b0:	4a09      	ldr	r2, [pc, #36]	; (189d8 <Det_ReportTransientFault+0x6c>)
   189b2:	9b03      	ldr	r3, [sp, #12]
   189b4:	4413      	add	r3, r2
   189b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
   189ba:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   189bc:	4a07      	ldr	r2, [pc, #28]	; (189dc <Det_ReportTransientFault+0x70>)
   189be:	9b03      	ldr	r3, [sp, #12]
   189c0:	4413      	add	r3, r2
   189c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
   189c6:	701a      	strb	r2, [r3, #0]

    return E_OK;
   189c8:	2300      	movs	r3, #0
}
   189ca:	4618      	mov	r0, r3
   189cc:	b004      	add	sp, #16
   189ce:	bd10      	pop	{r4, pc}
   189d0:	1fff9774 	.word	0x1fff9774
   189d4:	1fff975c 	.word	0x1fff975c
   189d8:	1fff9760 	.word	0x1fff9760
   189dc:	1fff9764 	.word	0x1fff9764

000189e0 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   189e0:	bf00      	nop
   189e2:	4770      	bx	lr

000189e4 <Fls_ACEraseRomEnd>:
   189e4:	2075634d 	.word	0x2075634d
   189e8:	75646f6d 	.word	0x75646f6d
   189ec:	0000656c 	.word	0x0000656c
   189f0:	74616c50 	.word	0x74616c50
   189f4:	6d726f66 	.word	0x6d726f66
   189f8:	646f6d20 	.word	0x646f6d20
   189fc:	00656c75 	.word	0x00656c75
   18a00:	74726f50 	.word	0x74726f50
   18a04:	646f6d20 	.word	0x646f6d20
   18a08:	00656c75 	.word	0x00656c75
   18a0c:	206f6944 	.word	0x206f6944
   18a10:	75646f6d 	.word	0x75646f6d
   18a14:	0000656c 	.word	0x0000656c
   18a18:	206d7750 	.word	0x206d7750
   18a1c:	75646f6d 	.word	0x75646f6d
   18a20:	0000656c 	.word	0x0000656c
   18a24:	20636441 	.word	0x20636441
   18a28:	75646f6d 	.word	0x75646f6d
   18a2c:	0000656c 	.word	0x0000656c
   18a30:	5f75634d 	.word	0x5f75634d
   18a34:	74696e49 	.word	0x74696e49
   18a38:	00002928 	.word	0x00002928
   18a3c:	5f75634d 	.word	0x5f75634d
   18a40:	74696e49 	.word	0x74696e49
   18a44:	636f6c43 	.word	0x636f6c43
   18a48:	0029286b 	.word	0x0029286b
   18a4c:	5f75634d 	.word	0x5f75634d
   18a50:	4d746553 	.word	0x4d746553
   18a54:	2865646f 	.word	0x2865646f
   18a58:	00000029 	.word	0x00000029
   18a5c:	5f75634d 	.word	0x5f75634d
   18a60:	56746547 	.word	0x56746547
   18a64:	69737265 	.word	0x69737265
   18a68:	6e496e6f 	.word	0x6e496e6f
   18a6c:	29286f66 	.word	0x29286f66
   18a70:	00000000 	.word	0x00000000
   18a74:	74616c50 	.word	0x74616c50
   18a78:	6d726f66 	.word	0x6d726f66
   18a7c:	696e495f 	.word	0x696e495f
   18a80:	00292874 	.word	0x00292874
   18a84:	74616c50 	.word	0x74616c50
   18a88:	6d726f66 	.word	0x6d726f66
   18a8c:	7465535f 	.word	0x7465535f
   18a90:	28717249 	.word	0x28717249
   18a94:	00000029 	.word	0x00000029
   18a98:	74616c50 	.word	0x74616c50
   18a9c:	6d726f66 	.word	0x6d726f66
   18aa0:	7465535f 	.word	0x7465535f
   18aa4:	50717249 	.word	0x50717249
   18aa8:	726f6972 	.word	0x726f6972
   18aac:	28797469 	.word	0x28797469
   18ab0:	00000029 	.word	0x00000029
   18ab4:	74616c50 	.word	0x74616c50
   18ab8:	6d726f66 	.word	0x6d726f66
   18abc:	7465475f 	.word	0x7465475f
   18ac0:	50717249 	.word	0x50717249
   18ac4:	726f6972 	.word	0x726f6972
   18ac8:	28797469 	.word	0x28797469
   18acc:	00000029 	.word	0x00000029
   18ad0:	74616c50 	.word	0x74616c50
   18ad4:	6d726f66 	.word	0x6d726f66
   18ad8:	736e495f 	.word	0x736e495f
   18adc:	6c6c6174 	.word	0x6c6c6174
   18ae0:	48717249 	.word	0x48717249
   18ae4:	6c646e61 	.word	0x6c646e61
   18ae8:	29287265 	.word	0x29287265
   18aec:	00000000 	.word	0x00000000
   18af0:	74726f50 	.word	0x74726f50
   18af4:	696e495f 	.word	0x696e495f
   18af8:	00292874 	.word	0x00292874
   18afc:	74726f50 	.word	0x74726f50
   18b00:	7465535f 	.word	0x7465535f
   18b04:	446e6950 	.word	0x446e6950
   18b08:	63657269 	.word	0x63657269
   18b0c:	6e6f6974 	.word	0x6e6f6974
   18b10:	00002928 	.word	0x00002928
   18b14:	74726f50 	.word	0x74726f50
   18b18:	7465535f 	.word	0x7465535f
   18b1c:	4d6e6950 	.word	0x4d6e6950
   18b20:	2865646f 	.word	0x2865646f
   18b24:	00000029 	.word	0x00000029
   18b28:	74726f50 	.word	0x74726f50
   18b2c:	6665525f 	.word	0x6665525f
   18b30:	68736572 	.word	0x68736572
   18b34:	74726f50 	.word	0x74726f50
   18b38:	65726944 	.word	0x65726944
   18b3c:	6f697463 	.word	0x6f697463
   18b40:	0029286e 	.word	0x0029286e
   18b44:	74726f50 	.word	0x74726f50
   18b48:	7465475f 	.word	0x7465475f
   18b4c:	73726556 	.word	0x73726556
   18b50:	496e6f69 	.word	0x496e6f69
   18b54:	286f666e 	.word	0x286f666e
   18b58:	00000029 	.word	0x00000029
   18b5c:	5f6f6944 	.word	0x5f6f6944
   18b60:	74697257 	.word	0x74697257
   18b64:	61684365 	.word	0x61684365
   18b68:	6c656e6e 	.word	0x6c656e6e
   18b6c:	00002928 	.word	0x00002928
   18b70:	5f6f6944 	.word	0x5f6f6944
   18b74:	64616552 	.word	0x64616552
   18b78:	6e616843 	.word	0x6e616843
   18b7c:	286c656e 	.word	0x286c656e
   18b80:	00000029 	.word	0x00000029
   18b84:	5f6f6944 	.word	0x5f6f6944
   18b88:	70696c46 	.word	0x70696c46
   18b8c:	6e616843 	.word	0x6e616843
   18b90:	286c656e 	.word	0x286c656e
   18b94:	00000029 	.word	0x00000029
   18b98:	5f6f6944 	.word	0x5f6f6944
   18b9c:	74697257 	.word	0x74697257
   18ba0:	61684365 	.word	0x61684365
   18ba4:	6c656e6e 	.word	0x6c656e6e
   18ba8:	756f7247 	.word	0x756f7247
   18bac:	00292870 	.word	0x00292870
   18bb0:	5f6f6944 	.word	0x5f6f6944
   18bb4:	64616552 	.word	0x64616552
   18bb8:	6e616843 	.word	0x6e616843
   18bbc:	476c656e 	.word	0x476c656e
   18bc0:	70756f72 	.word	0x70756f72
   18bc4:	00002928 	.word	0x00002928
   18bc8:	5f6f6944 	.word	0x5f6f6944
   18bcc:	64616552 	.word	0x64616552
   18bd0:	74726f50 	.word	0x74726f50
   18bd4:	00002928 	.word	0x00002928
   18bd8:	5f6f6944 	.word	0x5f6f6944
   18bdc:	74697257 	.word	0x74697257
   18be0:	726f5065 	.word	0x726f5065
   18be4:	00292874 	.word	0x00292874
   18be8:	5f6f6944 	.word	0x5f6f6944
   18bec:	56746547 	.word	0x56746547
   18bf0:	69737265 	.word	0x69737265
   18bf4:	6e496e6f 	.word	0x6e496e6f
   18bf8:	29286f66 	.word	0x29286f66
   18bfc:	00000000 	.word	0x00000000
   18c00:	5f6d7750 	.word	0x5f6d7750
   18c04:	74696e49 	.word	0x74696e49
   18c08:	00002928 	.word	0x00002928
   18c0c:	5f6d7750 	.word	0x5f6d7750
   18c10:	6e496544 	.word	0x6e496544
   18c14:	29287469 	.word	0x29287469
   18c18:	00000000 	.word	0x00000000
   18c1c:	5f6d7750 	.word	0x5f6d7750
   18c20:	44746553 	.word	0x44746553
   18c24:	43797475 	.word	0x43797475
   18c28:	656c6379 	.word	0x656c6379
   18c2c:	00002928 	.word	0x00002928
   18c30:	5f6d7750 	.word	0x5f6d7750
   18c34:	50746553 	.word	0x50746553
   18c38:	6f697265 	.word	0x6f697265
   18c3c:	646e4164 	.word	0x646e4164
   18c40:	79747544 	.word	0x79747544
   18c44:	00002928 	.word	0x00002928
   18c48:	5f6d7750 	.word	0x5f6d7750
   18c4c:	4f746553 	.word	0x4f746553
   18c50:	75707475 	.word	0x75707475
   18c54:	496f5474 	.word	0x496f5474
   18c58:	28656c64 	.word	0x28656c64
   18c5c:	00000029 	.word	0x00000029
   18c60:	5f6d7750 	.word	0x5f6d7750
   18c64:	56746547 	.word	0x56746547
   18c68:	69737265 	.word	0x69737265
   18c6c:	6e496e6f 	.word	0x6e496e6f
   18c70:	29286f66 	.word	0x29286f66
   18c74:	00000000 	.word	0x00000000
   18c78:	5f636441 	.word	0x5f636441
   18c7c:	74696e49 	.word	0x74696e49
   18c80:	00002928 	.word	0x00002928
   18c84:	5f636441 	.word	0x5f636441
   18c88:	6e496544 	.word	0x6e496544
   18c8c:	29287469 	.word	0x29287469
   18c90:	00000000 	.word	0x00000000
   18c94:	5f636441 	.word	0x5f636441
   18c98:	72617453 	.word	0x72617453
   18c9c:	6f724774 	.word	0x6f724774
   18ca0:	6f437075 	.word	0x6f437075
   18ca4:	7265766e 	.word	0x7265766e
   18ca8:	6e6f6973 	.word	0x6e6f6973
   18cac:	00002928 	.word	0x00002928
   18cb0:	5f636441 	.word	0x5f636441
   18cb4:	706f7453 	.word	0x706f7453
   18cb8:	756f7247 	.word	0x756f7247
   18cbc:	6e6f4370 	.word	0x6e6f4370
   18cc0:	73726576 	.word	0x73726576
   18cc4:	286e6f69 	.word	0x286e6f69
   18cc8:	00000029 	.word	0x00000029
   18ccc:	5f636441 	.word	0x5f636441
   18cd0:	64616552 	.word	0x64616552
   18cd4:	756f7247 	.word	0x756f7247
   18cd8:	00292870 	.word	0x00292870
   18cdc:	5f636441 	.word	0x5f636441
   18ce0:	47746547 	.word	0x47746547
   18ce4:	70756f72 	.word	0x70756f72
   18ce8:	74617453 	.word	0x74617453
   18cec:	29287375 	.word	0x29287375
   18cf0:	00000000 	.word	0x00000000
   18cf4:	5f636441 	.word	0x5f636441
   18cf8:	696c6143 	.word	0x696c6143
   18cfc:	74617262 	.word	0x74617262
   18d00:	00292865 	.word	0x00292865
   18d04:	5f636441 	.word	0x5f636441
   18d08:	75746553 	.word	0x75746553
   18d0c:	73655270 	.word	0x73655270
   18d10:	42746c75 	.word	0x42746c75
   18d14:	65666675 	.word	0x65666675
   18d18:	00292872 	.word	0x00292872
   18d1c:	5f636441 	.word	0x5f636441
   18d20:	56746547 	.word	0x56746547
   18d24:	69737265 	.word	0x69737265
   18d28:	6e496e6f 	.word	0x6e496e6f
   18d2c:	29286f66 	.word	0x29286f66
   18d30:	00000000 	.word	0x00000000
   18d34:	61766e49 	.word	0x61766e49
   18d38:	2064696c 	.word	0x2064696c
   18d3c:	666e6f63 	.word	0x666e6f63
   18d40:	696f7020 	.word	0x696f7020
   18d44:	7265746e 	.word	0x7265746e
   18d48:	00000000 	.word	0x00000000
   18d4c:	61766e49 	.word	0x61766e49
   18d50:	2064696c 	.word	0x2064696c
   18d54:	75706e69 	.word	0x75706e69
   18d58:	61702074 	.word	0x61702074
   18d5c:	656d6172 	.word	0x656d6172
   18d60:	00726574 	.word	0x00726574
   18d64:	76697244 	.word	0x76697244
   18d68:	75207265 	.word	0x75207265
   18d6c:	696e696e 	.word	0x696e696e
   18d70:	6c616974 	.word	0x6c616974
   18d74:	64657a69 	.word	0x64657a69
   18d78:	00000000 	.word	0x00000000
   18d7c:	76697244 	.word	0x76697244
   18d80:	61207265 	.word	0x61207265
   18d84:	6165726c 	.word	0x6165726c
   18d88:	69207964 	.word	0x69207964
   18d8c:	6974696e 	.word	0x6974696e
   18d90:	7a696c61 	.word	0x7a696c61
   18d94:	00006465 	.word	0x00006465
   18d98:	61766e49 	.word	0x61766e49
   18d9c:	2064696c 	.word	0x2064696c
   18da0:	6e696f70 	.word	0x6e696f70
   18da4:	00726574 	.word	0x00726574
   18da8:	6c6c6143 	.word	0x6c6c6143
   18dac:	6f726620 	.word	0x6f726620
   18db0:	7277206d 	.word	0x7277206d
   18db4:	20676e6f 	.word	0x20676e6f
   18db8:	7070616d 	.word	0x7070616d
   18dbc:	70206465 	.word	0x70206465
   18dc0:	69747261 	.word	0x69747261
   18dc4:	6e6f6974 	.word	0x6e6f6974
   18dc8:	00000000 	.word	0x00000000
   18dcc:	61726150 	.word	0x61726150
   18dd0:	6574656d 	.word	0x6574656d
   18dd4:	756f2072 	.word	0x756f2072
   18dd8:	666f2074 	.word	0x666f2074
   18ddc:	6e617220 	.word	0x6e617220
   18de0:	00006567 	.word	0x00006567
   18de4:	61766e49 	.word	0x61766e49
   18de8:	2064696c 	.word	0x2064696c
   18dec:	74726f50 	.word	0x74726f50
   18df0:	6e695020 	.word	0x6e695020
   18df4:	00444920 	.word	0x00444920
   18df8:	74726f50 	.word	0x74726f50
   18dfc:	6e697020 	.word	0x6e697020
   18e00:	646f6d20 	.word	0x646f6d20
   18e04:	73692065 	.word	0x73692065
   18e08:	636e7520 	.word	0x636e7520
   18e0c:	676e6168 	.word	0x676e6168
   18e10:	6c626165 	.word	0x6c626165
   18e14:	00000065 	.word	0x00000065
   18e18:	61766e49 	.word	0x61766e49
   18e1c:	2064696c 	.word	0x2064696c
   18e20:	74726f70 	.word	0x74726f70
   18e24:	6e697020 	.word	0x6e697020
   18e28:	646f6d20 	.word	0x646f6d20
   18e2c:	00000065 	.word	0x00000065
   18e30:	61766e49 	.word	0x61766e49
   18e34:	2064696c 	.word	0x2064696c
   18e38:	206f6964 	.word	0x206f6964
   18e3c:	6e616863 	.word	0x6e616863
   18e40:	206c656e 	.word	0x206c656e
   18e44:	6576656c 	.word	0x6576656c
   18e48:	0000006c 	.word	0x0000006c
   18e4c:	61766e49 	.word	0x61766e49
   18e50:	2064696c 	.word	0x2064696c
   18e54:	206f6964 	.word	0x206f6964
   18e58:	6e616863 	.word	0x6e616863
   18e5c:	206c656e 	.word	0x206c656e
   18e60:	00006469 	.word	0x00006469
   18e64:	61766e49 	.word	0x61766e49
   18e68:	2064696c 	.word	0x2064696c
   18e6c:	74726f70 	.word	0x74726f70
   18e70:	00646920 	.word	0x00646920
   18e74:	61766e49 	.word	0x61766e49
   18e78:	2064696c 	.word	0x2064696c
   18e7c:	6e616863 	.word	0x6e616863
   18e80:	206c656e 	.word	0x206c656e
   18e84:	756f7267 	.word	0x756f7267
   18e88:	64692070 	.word	0x64692070
   18e8c:	00000000 	.word	0x00000000
   18e90:	61766e49 	.word	0x61766e49
   18e94:	2064696c 	.word	0x2064696c
   18e98:	666e6f63 	.word	0x666e6f63
   18e9c:	70206769 	.word	0x70206769
   18ea0:	6d617261 	.word	0x6d617261
   18ea4:	72657465 	.word	0x72657465
   18ea8:	00000000 	.word	0x00000000
   18eac:	61766e49 	.word	0x61766e49
   18eb0:	2064696c 	.word	0x2064696c
   18eb4:	666e6f63 	.word	0x666e6f63
   18eb8:	70206769 	.word	0x70206769
   18ebc:	746e696f 	.word	0x746e696f
   18ec0:	00007265 	.word	0x00007265
   18ec4:	61766e49 	.word	0x61766e49
   18ec8:	2064696c 	.word	0x2064696c
   18ecc:	206d7770 	.word	0x206d7770
   18ed0:	6e616863 	.word	0x6e616863
   18ed4:	006c656e 	.word	0x006c656e
   18ed8:	206d7750 	.word	0x206d7750
   18edc:	6e616863 	.word	0x6e616863
   18ee0:	206c656e 	.word	0x206c656e
   18ee4:	69726570 	.word	0x69726570
   18ee8:	6920646f 	.word	0x6920646f
   18eec:	6e752073 	.word	0x6e752073
   18ef0:	6e616863 	.word	0x6e616863
   18ef4:	62616567 	.word	0x62616567
   18ef8:	0000656c 	.word	0x0000656c
   18efc:	61766e49 	.word	0x61766e49
   18f00:	2064696c 	.word	0x2064696c
   18f04:	20636461 	.word	0x20636461
   18f08:	756f7267 	.word	0x756f7267
   18f0c:	00000070 	.word	0x00000070
   18f10:	66667542 	.word	0x66667542
   18f14:	70207265 	.word	0x70207265
   18f18:	746e696f 	.word	0x746e696f
   18f1c:	6e207265 	.word	0x6e207265
   18f20:	6920746f 	.word	0x6920746f
   18f24:	6974696e 	.word	0x6974696e
   18f28:	7a696c61 	.word	0x7a696c61
   18f2c:	00006465 	.word	0x00006465
   18f30:	696c6143 	.word	0x696c6143
   18f34:	74617262 	.word	0x74617262
   18f38:	206e6f69 	.word	0x206e6f69
   18f3c:	7265706f 	.word	0x7265706f
   18f40:	6f697461 	.word	0x6f697461
   18f44:	6974206e 	.word	0x6974206e
   18f48:	2064656d 	.word	0x2064656d
   18f4c:	0074756f 	.word	0x0074756f
   18f50:	6f727245 	.word	0x6f727245
   18f54:	45203a72 	.word	0x45203a72
   18f58:	726f7272 	.word	0x726f7272
   18f5c:	206e6920 	.word	0x206e6920
   18f60:	69207325 	.word	0x69207325
   18f64:	7566206e 	.word	0x7566206e
   18f68:	6974636e 	.word	0x6974636e
   18f6c:	25206e6f 	.word	0x25206e6f
   18f70:	69772073 	.word	0x69772073
   18f74:	74206874 	.word	0x74206874
   18f78:	69206568 	.word	0x69206568
   18f7c:	6174736e 	.word	0x6174736e
   18f80:	2065636e 	.word	0x2065636e
   18f84:	202c6425 	.word	0x202c6425
   18f88:	000a7325 	.word	0x000a7325
   18f8c:	20746f50 	.word	0x20746f50
   18f90:	65722031 	.word	0x65722031
   18f94:	74736973 	.word	0x74736973
   18f98:	65636e61 	.word	0x65636e61
   18f9c:	6c617620 	.word	0x6c617620
   18fa0:	69206575 	.word	0x69206575
   18fa4:	686f206e 	.word	0x686f206e
   18fa8:	203a736d 	.word	0x203a736d
   18fac:	000a6425 	.word	0x000a6425
   18fb0:	20746f50 	.word	0x20746f50
   18fb4:	65722032 	.word	0x65722032
   18fb8:	74736973 	.word	0x74736973
   18fbc:	65636e61 	.word	0x65636e61
   18fc0:	6c617620 	.word	0x6c617620
   18fc4:	69206575 	.word	0x69206575
   18fc8:	686f206e 	.word	0x686f206e
   18fcc:	203a736d 	.word	0x203a736d
   18fd0:	000a6425 	.word	0x000a6425
   18fd4:	20746f50 	.word	0x20746f50
   18fd8:	65722031 	.word	0x65722031
   18fdc:	74736973 	.word	0x74736973
   18fe0:	65636e61 	.word	0x65636e61
   18fe4:	6c617620 	.word	0x6c617620
   18fe8:	69206575 	.word	0x69206575
   18fec:	686f206e 	.word	0x686f206e
   18ff0:	203a736d 	.word	0x203a736d
   18ff4:	202c6425 	.word	0x202c6425
   18ff8:	20746f50 	.word	0x20746f50
   18ffc:	65722032 	.word	0x65722032
   19000:	74736973 	.word	0x74736973
   19004:	65636e61 	.word	0x65636e61
   19008:	6c617620 	.word	0x6c617620
   1900c:	69206575 	.word	0x69206575
   19010:	686f206e 	.word	0x686f206e
   19014:	203a736d 	.word	0x203a736d
   19018:	000a6425 	.word	0x000a6425
   1901c:	6d726554 	.word	0x6d726554
   19020:	6c616e69 	.word	0x6c616e69
   19024:	00000000 	.word	0x00000000
   19028:	4c554e28 	.word	0x4c554e28
   1902c:	0000294c 	.word	0x0000294c

00019030 <Clock_Ip_au8DividerCallbackIndex>:
   19030:	0e0d0c00 06030201 0a070409 000b0805     ................

00019040 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00019050 <Clock_Ip_au8XoscCallbackIndex>:
   19050:	00000100 00000000 00000000 00000000     ................

00019060 <Clock_Ip_au8IrcoscCallbackIndex>:
   19060:	03020100 00000004 00000000 00000000     ................

00019070 <Clock_Ip_au8GateCallbackIndex>:
   19070:	06010200 01040301 00000500 00000000     ................

00019080 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00019090 <Clock_Ip_au8PllCallbackIndex>:
   19090:	00000100 00000000 00000000 00000000     ................

000190a0 <Clock_Ip_au8SelectorCallbackIndex>:
   190a0:	0a090800 03020109 07060504 00000000     ................

000190b0 <Clock_Ip_au8PcfsCallbackIndex>:
	...

000190c0 <Clock_Ip_au8CmuCallbackIndex>:
	...

000190d0 <Clock_Ip_au8ClockFeatures>:
	...
   190e0:	01000000 00000000 00000000 00000002     ................
   190f0:	00000000 00000300 00000000 00040000     ................
   19100:	00000000 05000000 00000000 00000000     ................
   19110:	00000006 00000000 00000100 00000000     ................
   19120:	00010000 00000000 04000000 00000000     ................
   19130:	00000000 00000005 00000001 00000401     ................
   19140:	00000200 00050100 00030000 04020000     ................
   19150:	04000000 02000000 00000005 00000005     ................
   19160:	00000403 00000600 00050300 00070000     ................
   19170:	05000000 00000000 00000000 00000006     ................
	...
   191b0:	00050000 00000000 06000000 00000100     ................
   191c0:	00000000 00030007 00000000 00000000     ................
   191d0:	00000000 00060000 00000000 07000000     ................
   191e0:	00000100 00000000 00030008 00000000     ................
	...
   191f8:	00090000 00000000 0a000000 00000100     ................
   19208:	00000000 0003000b 00000000 00000000     ................
   19218:	00000000 000c0000 00000000 0d000000     ................
   19228:	00000100 00000000 0003000e 00000000     ................
   19238:	00000800 00000000 00090000 00000000     ................
   19248:	0a000000 00000000 00000000 0000000b     ................
   19258:	00000000 00000b01 00000000 000b0200     ................
   19268:	00000000 0b030000 00000000 00000000     ................
	...
   19280:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   19290:	01000000 00000000 00000000 00000007     ................
   192a0:	00007300 00000700 00320000 00090000     .s........2.....
   192b0:	02000000 07000000 00000000 00000021     ............!...
   192c0:	00000009 00000400 00000900 00030000     ................
   192d0:	00070000 61000000 07000000 00000000     .......a........
   192e0:	00000024 00000007 00002500 00000700     $........%......
   192f0:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   19300:	00000000 00000020 38000004 00003800     .... ......8.8..
   19310:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   19320:	04000000 00260000 00000026 66000004     ......&.&......f
   19330:	00006600 00000400 00370037 00040000     .f......7.7.....
   19340:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   19350:	2e000004 00002e00 00000200 00404040     ............@@@.
   19360:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   19370:	0000006b 6c000004 00006c00 00000900     k......l.l......
   19380:	00010000 00090000 00000000 07000000     ................
   19390:	00000000 00000036 00000007 00003100     ....6........1..
   193a0:	00000700 00490000 00070000 4a000000     ......I........J
   193b0:	07000000 00000000 0000004b 00000007     ........K.......
   193c0:	00004c00 00000700 004d0000 00070000     .L........M.....
   193d0:	3d000000 03000000 00000000 00000000     ...=............

000193e0 <Clock_Ip_au16SelectorEntryHardwareValue>:
   193e0:	01010a03 01010001 04040002 02000603     ................
   193f0:	00010810 02020100 00000000 00000007     ................
   19400:	00000009 00000000 00000c0e 00000000     ................
	...

00019438 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   19438:	00020000 00000300 00000601 00000000     ................
	...

00019468 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   19468:	00000700 00000000 02020000 01010303     ................
   19478:	03020606 00000000 00000000 00000000     ................
	...

00019498 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   19498:	00000001 00000000 02020000 01010303     ................
   194a8:	03020606 00000000 00000000 00000000     ................
	...

000194c8 <Clock_Ip_au8DividerValueHardwareValue>:
   194c8:	00020100 00000003 00000004 00000000     ................
   194d8:	00000005 00000000 00000000 00000000     ................
   194e8:	00000006 00000000 00000000 00000000     ................
	...
   19508:	00000007                                ....

0001950c <Clock_Ip_apxScgPeriphAsyncDivs>:
   1950c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0001951c <Clock_Ip_aeSourceTypeClockName>:
   1951c:	00000000 00000001 00000001 00000001     ................
   1952c:	00000001 00000001 00000001 00000001     ................
   1953c:	00000002 00000003 00000001 00000001     ................
   1954c:	00000001 00000001 00000002 00000002     ................
   1955c:	00000003 00000003 00000001 00000001     ................
   1956c:	00000004 00000004 00000004 00000004     ................
	...

000195d8 <Clock_Ip_aeHwPllName>:
   195d8:	00000009                                ....

000195dc <Clock_Ip_aeHwDfsName>:
   195dc:	00000057                                W...

000195e0 <Clock_Ip_axDividerCallbacks>:
   195e0:	00003a71 00003a7b 00003a95 00003aaf     q:..{:...:...:..
   195f0:	00003ac9 00003ae3 00003afd 00003b17     .:...:...:...;..
   19600:	00003b31 00003b4b 00003b65 00003b7f     1;..K;..e;...;..
   19610:	00003b99 00003bb3 00003bcd              .;...;...;..

0001961c <Clock_Ip_axDividerTriggerCallbacks>:
   1961c:	00003f41 00003f41                       A?..A?..

00019624 <Clock_Ip_axExtOscCallbacks>:
   19624:	00003f4d 00003f4d 00003f4d 00003f57     M?..M?..M?..W?..
   19634:	00003f4d 00003f61 00003f7b 00003f95     M?..a?..{?...?..
   19644:	00004019 0000402d                       .@..-@..

0001964c <Clock_Ip_axFracDivCallbacks>:
   1964c:	000041ed 000041ed 000041f7              .A...A...A..

00019658 <Clock_Ip_axGateCallbacks>:
   19658:	00004211 0000421b 0000431b 00004335     .B...B...C..5C..
   19668:	000042cb 000042e5 0000427b 00004295     .B...B..{B...B..
   19678:	0000422b 00004245 0000436b 00004385     +B..EB..kC...C..
   19688:	000043bb 000043d5                       .C...C..

00019690 <Clock_Ip_axIntOscCallbacks>:
   19690:	00004581 00004581 0000458b 00004595     .E...E...E...E..
   196a0:	000045af 000045c9 000045dd 000045f7     .E...E...E...E..
   196b0:	00004611 00004625 0000463f 00004659     .F..%F..?F..YF..
   196c0:	00004701 0000471b 00004735              .G...G..5G..

000196cc <Clock_Ip_axCmuCallbacks>:
   196cc:	00004cd1 00004cdb 00004ce7 00004cd1     .L...L...L...L..

000196dc <Clock_Ip_axPllCallbacks>:
   196dc:	00004cf1 00004cf1 00004cfb 00004cf1     .L...L...L...L..
   196ec:	00004d07 00004d11 00004d2b 00004d45     .M...M..+M..EM..
   196fc:	00004de9 00004dd5                       .M...M..

00019704 <Clock_Ip_axPcfsCallbacks>:
   19704:	00004f45                                EO..

00019708 <Clock_Ip_axSelectorCallbacks>:
   19708:	00004f51 00004f51 00004f5b 00004f75     QO..QO..[O..uO..
   19718:	00004f51 00004f8f 00004fa9 00004fc3     QO...O...O...O..
   19728:	00004fdd 00004ff7 00005011 0000502b     .O...O...P..+P..
   19738:	00005045 0000505f 00005079 00005093     EP.._P..yP...P..
   19748:	000050ad 000050c7 000050e1 000050fb     .P...P...P...P..
   19758:	00005115 0000512f                       .Q../Q..

00019760 <ClockSource>:
   19760:	00000000 00000008 00000002 00000005     ................
	...
   19778:	00000009                                ....

0001977c <ResetReasonArray>:
   1977c:	00000000 00000001 00000002 00000003     ................
   1978c:	00000004 00000005 00000006 00000007     ................
   1979c:	00000008 00000009 0000000a 0000000b     ................
   197ac:	0000000c 0000000d 0000000e              ............

000197b8 <Port_au32PortCiPortBaseAddr>:
   197b8:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   197c8:	4004d000                                ...@

000197cc <Port_au32PortCiGpioBaseAddr>:
   197cc:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   197dc:	400ff100                                ...@

000197e0 <Adc_Ip_apxBase>:
   197e0:	4003b000 40027000                       ...@.p.@

000197e8 <Pdb_Adc_Ip_apxBase>:
   197e8:	40036000 40031000                       .`.@...@

000197f0 <Ftm_Pwm_Ip_aFtmBase>:
   197f0:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

00019800 <Queue_Config>:
   19800:	00000002 00000001 1fff8b70              ........p...

0001980c <Task_Config>:
   1980c:	00000032 00000001 00000da1 00000064     2...........d...
   1981c:	00000001 00000dad                       ........

00019824 <Timer_Config>:
   19824:	00000064 00000000 00000fb9              d...........

00019830 <Scheduler_Config>:
   19830:	0000000a 00000002 0001980c 00000001     ................
   19840:	00019824 00000001 00019800              $...........

0001984c <ButtonsCfg>:
   1984c:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
   1985c:	0000000c 0000012c                       ....,...

00019864 <LedsCfg>:
   19864:	00010048 00010049 0001004a              H...I...J...

00019870 <AdcIpChansConfig_0>:
   19870:	00000000 00000005 00000000 00000001     ................
   19880:	00000008 00000000                       ........

00019888 <AdcIpChansConfig_1>:
   19888:	00000000 0000000f 00000000 00000001     ................
   19898:	00000008 00000000                       ........

000198a0 <AdcIpConfig_0>:
   198a0:	00000000 00000003 00000000 0000000c     ................
   198b0:	00000000 00000001 00000001 00000000     ................
	...
   198c8:	00ff0000 00000000 00000000 00019870     ............p...
   198d8:	0000c9d9                                ....

000198dc <AdcIpConfig_1>:
   198dc:	00000000 00000003 00000000 0000000c     ................
   198ec:	00000000 00000001 00000001 00000000     ................
	...
   19904:	00ff0000 00000000 00000000 00019888     ................
   19914:	0000c9fb                                ....

00019918 <AdcIpwCfg>:
   19918:	000198a0 000198dc 0001a178 0001a198     ........x.......
   19928:	01010100 00010001 00020002 0101ffff     ................
   19938:	00000100                                ....

0001993c <AdcIpwGroupConfig_0>:
   1993c:	00000001 00000000 000000c8 00010000     ................
   1994c:	00000000                                ....

00019950 <AdcIpwGroupConfig_1>:
   19950:	00000001 00000000 000000c8 00010000     ................
   19960:	00000000                                ....

00019964 <Adc_Group0_Assignment_0>:
   19964:	00010000                                ....

00019968 <Adc_Group1_Assignment_1>:
   19968:	00010000                                ....

0001996c <Adc_GroupsCfg>:
	...
   19988:	00000001 00019964 00080002 00000005     ....d...........
   19998:	00000000 0001993c 00010001 00000000     ....<...........
	...
   199bc:	00000001 00019968 000f0002 00000008     ....h...........
   199cc:	00000000 00019950                       ....P...

000199d4 <Adc_au16GroupIdToIndexMap>:
   199d4:	00010000                                ....

000199d8 <Adc_Partition_Assignment>:
   199d8:	00000000                                ....

000199dc <Adc_Config>:
   199dc:	00019918 0001996c 00000002 000199d4     ....l...........
   199ec:	00000000 000199d8 00000001              ............

000199f8 <Mcu_aClockConfigPB>:
	...
   19a00:	14000002 0400000e 01000020 00000002     ........ .......
   19a10:	01000001 00000001 00000005 00000001     ................
   19a20:	00000000 00000057 00000000 00000000     ....W...........
	...
   19a38:	00000057 00000000 00000057 00000000     W.......W.......
	...
   19a60:	00000019 00000005 0000001a 00000002     ................
   19a70:	0000001b 00000005 0000002a 00000002     ........*.......
   19a80:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   19a90:	00000041 00000000 00000042 00000000     A.......B.......
   19aa0:	00000031 0000000b 00000045 00000000     1.......E.......
   19ab0:	00000046 00000000 00000047 00000000     F.......G.......
   19ac0:	00000044 00000000 00000030 0000000b     D.......0.......
   19ad0:	0000003d 00000000 00000043 00000000     =.......C.......
   19ae0:	00000049 00000000 0000004a 00000000     I.......J.......
   19af0:	0000004b 00000000 00000048 00000000     K.......H.......
   19b00:	00000057 00000057 00000057 00000057     W...W...W...W...
   19b10:	00000057 00000057 00000057 00000057     W...W...W...W...
   19b20:	00000057 00000057 00000057 00000057     W...W...W...W...
   19b30:	00000057 00000057 00000057 00000057     W...W...W...W...
   19b40:	0000000a 00000001 00000000 0000000b     ................
   19b50:	00000001 00000000 0000000c 00000001     ................
   19b60:	00000000 0000000d 00000002 00000000     ................
   19b70:	0000001d 00000001 00000000 0000001e     ................
   19b80:	00000002 00000000 0000001f 00000001     ................
   19b90:	00000000 00000021 00000001 00000000     ....!...........
   19ba0:	00000022 00000002 00000000 00000023     "...........#...
   19bb0:	00000001 00000000 00000025 00000002     ........%.......
   19bc0:	00000000 00000026 00000004 00000000     ....&...........
   19bd0:	00000027 00000002 00000000 00000048     '...........H...
   19be0:	00000001 00000001 00000057 00000000     ........W.......
   19bf0:	00000000 00000057 00000000 00000000     ....W...........
   19c00:	00000057 00000000 00000000 00000057     W...........W...
	...
   19c18:	00000057 00000000 00000000 00000057     W...........W...
	...
   19c30:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   19c4c:	00000014 00007d00 00000015 00007d00     .....}.......}..
   19c5c:	00000016 00007d00 00000017 00008000     .....}..........
   19c6c:	00000030 00000001 00000031 00000001     0.......1.......
   19c7c:	00000033 00000000 00000034 00000000     3.......4.......
   19c8c:	00000036 00000000 00000039 00000000     6.......9.......
   19c9c:	0000003a 00000000 0000003b 00000000     :.......;.......
   19cac:	0000003c 00000000 0000003d 00000000     <.......=.......
   19cbc:	0000003e 00000000 0000003f 00000000     >.......?.......
   19ccc:	00000040 00000001 00000041 00000000     @.......A.......
   19cdc:	00000042 00000000 00000043 00000000     B.......C.......
   19cec:	00000044 00000000 00000045 00000000     D.......E.......
   19cfc:	00000046 00000000 00000047 00000000     F.......G.......
   19d0c:	00000048 00000000 00000049 00000000     H.......I.......
   19d1c:	0000004a 00000000 0000004b 00000000     J.......K.......
   19d2c:	0000004e 00000001 0000004f 00000001     N.......O.......
   19d3c:	00000050 00000001 00000051 00000001     P.......Q.......
   19d4c:	00000052 00000001 00000053 00000001     R.......S.......
   19d5c:	00000054 00000001 00000055 00000000     T.......U.......
   19d6c:	00000057 00000000 00000057 00000000     W.......W.......
   19d7c:	00000057 00000000 00000057 00000000     W.......W.......
   19d8c:	00000057 00000000 00000057 00000000     W.......W.......
   19d9c:	00000057 00000000 00000057 00000000     W.......W.......
   19dac:	00000057 00000000 00000057 00000000     W.......W.......
   19dbc:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00019df0 <Dio_au32ChannelToPartitionMap>:
   19df0:	00000001 00000001 00000001 00000001     ................
   19e00:	00000001 00000001 00000001 00000001     ................
   19e10:	00000001 00000001 00000001 00000001     ................
   19e20:	00000001 00000001 00000001 00000001     ................
   19e30:	00000001 00000001 00000001 00000001     ................
   19e40:	00000001 00000001 00000001 00000001     ................
   19e50:	00000001 00000001 00000001 00000001     ................
   19e60:	00000001 00000001 00000001 00000001     ................
   19e70:	00000001 00000001 00000001 00000001     ................
   19e80:	00000001 00000001 00000001 00000001     ................
   19e90:	00000001 00000001 00000001 00000001     ................
   19ea0:	00000001 00000001 00000001 00000001     ................
   19eb0:	00000001 00000001 00000001 00000001     ................
   19ec0:	00000001 00000001 00000001 00000001     ................
   19ed0:	00000001 00000001 00000001 00000001     ................
   19ee0:	00000001 00000001 00000001 00000001     ................
   19ef0:	00000001 00000001 00000001 00000001     ................
   19f00:	00000001 00000001 00000001 00000001     ................
   19f10:	00000001 00000001 00000001 00000001     ................
   19f20:	00000001 00000001 00000001 00000001     ................
   19f30:	00000001 00000001 00000001 00000001     ................
   19f40:	00000001 00000001 00000001 00000001     ................
   19f50:	00000001 00000001 00000001 00000001     ................
   19f60:	00000001 00000001 00000001 00000001     ................
   19f70:	00000001 00000001 00000001 00000001     ................
   19f80:	00000001 00000001 00000001 00000001     ................
   19f90:	00000001 00000001 00000001 00000001     ................
   19fa0:	00000001 00000001 00000001 00000001     ................
   19fb0:	00000001 00000001 00000001 00000001     ................
   19fc0:	00000001 00000001 00000001 00000001     ................
   19fd0:	00000001 00000001 00000001 00000001     ................
   19fe0:	00000001 00000001 00000001 00000001     ................
   19ff0:	00000001 00000001 00000001 00000001     ................
   1a000:	00000001 00000001 00000001 00000001     ................
   1a010:	00000001 00000001 00000001 00000001     ................
   1a020:	00000001 00000001 00000001 00000001     ................
   1a030:	00000001                                ....

0001a034 <Dio_au32PortToPartitionMap>:
   1a034:	00000001 00000001 00000001 00000001     ................
   1a044:	00000001                                ....

0001a048 <Dio_aAvailablePinsForWrite>:
   1a048:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1a058:	0001ffff                                ....

0001a05c <Dio_aAvailablePinsForRead>:
   1a05c:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1a06c:	0001ffff                                ....

0001a070 <Dio_Config>:
	...
   1a078:	00019df0 0001a034                       ....4...

0001a080 <Ftm_Pwm_Ip_SyncCfg1>:
	...
   1a09c:	00000003 00000003                       ........

0001a0a4 <Ftm_Pwm_Ip_InstCfg1>:
   1a0a4:	00000003 00000000 00000000 00000000     ................
	...
   1a0d8:	000014d5 00000001 00000000 00000000     ................
   1a0e8:	00000000 0001a080                       ........

0001a0f0 <Ftm_Pwm_Ip_I1_Ch7>:
   1a0f0:	00000007 0000000a 00000000 00000000     ................
   1a100:	00000000 00000001 00000000 00000000     ................
	...

0001a118 <Ftm_Pwm_Ip_I1_ChArray>:
   1a118:	0001a0f0                                ....

0001a11c <Ftm_Pwm_Ip_UserCfg1>:
   1a11c:	0001a0a4 0001a118 00000001 00000000     ................
   1a12c:	00000000                                ....

0001a130 <aIrqConfiguration>:
   1a130:	00000027 00000001 0000b31d 00000028     '...........(...
   1a140:	00000001 0000b32d                       ....-...

0001a148 <intCtrlConfig>:
   1a148:	00000002 0001a130                       ....0...

0001a150 <Mcu_Config>:
   1a150:	0000005a 00000000 00000001 00000001     Z...............
   1a160:	0001a63c 000199f8 0001a648              <.......H...

0001a16c <OsIf_xPredefinedConfig>:
   1a16c:	00000000 02dc6c00                       .....l..

0001a174 <OsIf_apxPredefinedConfig>:
   1a174:	0001a16c                                l...

0001a178 <PdbAdcIpConfig_0>:
	...
   1a184:	0000000f ffff0000 00000000 00000000     ................
   1a194:	00000000                                ....

0001a198 <PdbAdcIpConfig_1>:
	...
   1a1a4:	0000000f ffff0000 00000000 00000000     ................
   1a1b4:	00000000                                ....

0001a1b8 <Platform_uConfiguration>:
   1a1b8:	0001a1c0                                ....

0001a1bc <Platform_Config>:
   1a1bc:	0001a1b8                                ....

0001a1c0 <ipwConfig>:
   1a1c0:	0001a148 00000000                       H.......

0001a1c8 <Port_au16PinDescription>:
   1a1c8:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1a1d8:	0001ffff 0003ffff 0003ffff 0003ffff     ................
   1a1e8:	0003ffff 0001ffff 0003ffcf 0003ffff     ................
   1a1f8:	0003ffff 0003fcff 0001dfef 0003f36f     ............o...
   1a208:	0003fe3f 0003f3ff 00026e3f 0001bebf     ?.......?n......
   1a218:	0002cf9f 0000302f 000030cc 000183ef     ..../0...0......
   1a228:	0001ec7c 00000b1f 00000023 00000010     |.......#.......
   1a238:	0001010c 00000033 000072cf 0000003c     ....3....r..<...
   1a248:	0000cff3 00001b2f 00018c7f 00000433     ..../.......3...
   1a258:	00000000 00000030 0000600b 00018c38     ....0....`..8...

0001a268 <g_pin_mux_InitConfigArr>:
   1a268:	4004b000 400ff080 00000008 00000002     ...@...@........
   1a278:	00000001 00000002 00000000 00000000     ................
	...
   1a290:	4004b000 400ff080 00000009 00000002     ...@...@........
   1a2a0:	00000001 00000002 00000000 00000000     ................
	...
   1a2b8:	4004b000 400ff080 0000000a 00000002     ...@...@........
   1a2c8:	00000001 00000002 00000000 00000000     ................
	...
   1a2e0:	4004b000 400ff080 0000000b 00000002     ...@...@........
   1a2f0:	00000001 00000002 00000000 00000000     ................
	...
   1a308:	4004b000 400ff080 0000000d 00000002     ...@...@........
   1a318:	00000001 00000002 00000000 00000000     ................
	...
   1a330:	4004b000 400ff080 0000000e 00000002     ...@...@........
   1a340:	00000001 00000002 00000000 00000000     ................
	...
   1a358:	4004d000 400ff100 0000000c 00000002     ...@...@........
   1a368:	00000001 00000001 00000000 00000000     ................
	...
   1a380:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   1a390:	00000001 00000001 00000000 00000000     ................
	...
   1a3a8:	40049000 400ff000 0000000c 00000002     ...@...@........
   1a3b8:	00000001 00000001 00000000 00000000     ................
	...
   1a3d0:	40049000 00000000 0000000d 00000002     ...@............
   1a3e0:	00000002 00000002 00000000 00000000     ................
	...
   1a3f8:	4004a000 00000000 00000001 00000002     ...@............
   1a408:	00000000 00000001 00000000 00000000     ................
	...
   1a420:	4004a000 00000000 0000000d 00000002     ...@............
   1a430:	00000000 00000001 00000000 00000000     ................
	...

0001a448 <au8Port_PartitionList>:
   1a448:	00000001                                ....

0001a44c <au32Port_PinToPartitionMap>:
   1a44c:	00000001 00000001 00000001 00000001     ................
   1a45c:	00000001 00000001 00000001 00000001     ................
   1a46c:	00000001 00000001 00000001 00000001     ................

0001a47c <Port_au16NoUnUsedPadsArrayDefault>:
   1a47c:	00010000 00030002 00070006 00090008     ................
   1a48c:	000e000b 0010000f 00200011 00230022     .......... .".#.
   1a49c:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   1a4ac:	002e002c 0030002f 00400031 00420041     ,.../.0.1.@.A.B.
   1a4bc:	00460043 004c0047 0050004f 00600051     C.F.G.L.O.P.Q.`.
   1a4cc:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   1a4dc:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   1a4ec:	00810080 00830082 00850084 00870086     ................
   1a4fc:	00890088 008b008a 008e008d 0090008f     ................

0001a50c <Port_UnUsedPin>:
   1a50c:	00000000 00000001 00000000              ............

0001a518 <Port_aPinConfigDefault>:
   1a518:	00000048 00000100 00000000 00000002     H...............
   1a528:	00010001 00000049 00000100 00000000     ....I...........
   1a538:	00000002 00010101 0000004a 00000100     ........J.......
   1a548:	00000000 00000002 00010101 0000008c     ................
   1a558:	00000100 00000000 00000001 00010101     ................
   1a568:	0000004b 00000100 00000000 00000002     K...............
   1a578:	00010101 0000004d 00000100 00000000     ....M...........
   1a588:	00000002 00010101 0000004e 00000100     ........N.......
   1a598:	00000000 00000002 00010101 00000071     ............q...
   1a5a8:	00000100 00000000 00000001 00010101     ................
   1a5b8:	0000000c 00000100 00000000 00000001     ................
   1a5c8:	00010101 00000021 00000000 00000002     ....!...........
   1a5d8:	00000000 00010000 0000002d 00000000     ........-.......
   1a5e8:	00000002 00000000 00010000 0000000d     ................
   1a5f8:	00000200 00000000 00000002 00010000     ................

0001a608 <Port_Config>:
   1a608:	0048000c 0001a47c 0001a50c 0001a518     ..H.|...........
	...
   1a620:	0001a44c 0001a448 0001a268              L...H...h...

0001a62c <Power_Ip_RCM_ConfigPB>:
	...

0001a634 <Power_Ip_PMC_ConfigPB>:
   1a634:	00000000                                ....

0001a638 <Power_Ip_SMC_ConfigPB>:
   1a638:	00000000                                ....

0001a63c <Power_Ip_aModeConfigPB>:
	...

0001a648 <Power_Ip_HwIPsConfigPB>:
   1a648:	0001a62c 0001a634 0001a638              ,...4...8...

0001a654 <Pwm_Channels_PB>:
	...
   1a65c:	00000001 0001a0f0 00000001 00000001     ................

0001a66c <Pwm_Instances_PB>:
   1a66c:	00000001 00000001 0001a11c              ............

0001a678 <Pwm_Config>:
   1a678:	00000001 0001a654 00000001 0001a66c     ....T.......l...

0001a688 <_aInitStr.0>:
   1a688:	00000000 54540000 45522052 53454747     ......TTR REGGES
   1a698:	00000000                                ....

0001a69c <_aV2C.0>:
   1a69c:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0001a6ac <__INIT_TABLE>:
   1a6ac:	00000002 	.word	0x00000002
   1a6b0:	1fff8b10 	.word	0x1fff8b10
   1a6b4:	0001a6d4 	.word	0x0001a6d4
   1a6b8:	0001a730 	.word	0x0001a730
   1a6bc:	1fff8800 	.word	0x1fff8800
   1a6c0:	00000000 	.word	0x00000000
   1a6c4:	00000310 	.word	0x00000310

0001a6c8 <__ZERO_TABLE>:
   1a6c8:	00000001 	.word	0x00000001
   1a6cc:	1fff8b70 	.word	0x1fff8b70
   1a6d0:	1fff9cb0 	.word	0x1fff9cb0
