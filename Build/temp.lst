
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	0000177f 	.word	0x0000177f
  10:	00001781 	.word	0x00001781
  14:	00001783 	.word	0x00001783
  18:	00001785 	.word	0x00001785
	...
  2c:	00001787 	.word	0x00001787
  30:	00001789 	.word	0x00001789
  34:	00000000 	.word	0x00000000
  38:	0000178b 	.word	0x0000178b
  3c:	0000178d 	.word	0x0000178d
  40:	0000178f 	.word	0x0000178f
  44:	0000178f 	.word	0x0000178f
  48:	0000178f 	.word	0x0000178f
  4c:	0000178f 	.word	0x0000178f
  50:	0000178f 	.word	0x0000178f
  54:	0000178f 	.word	0x0000178f
  58:	0000178f 	.word	0x0000178f
  5c:	0000178f 	.word	0x0000178f
  60:	0000178f 	.word	0x0000178f
  64:	0000178f 	.word	0x0000178f
  68:	0000178f 	.word	0x0000178f
  6c:	0000178f 	.word	0x0000178f
  70:	0000178f 	.word	0x0000178f
  74:	0000178f 	.word	0x0000178f
  78:	0000178f 	.word	0x0000178f
  7c:	0000178f 	.word	0x0000178f
  80:	0000178f 	.word	0x0000178f
  84:	0000178f 	.word	0x0000178f
  88:	0000178f 	.word	0x0000178f
  8c:	0000178f 	.word	0x0000178f
  90:	0000178f 	.word	0x0000178f
  94:	0000178f 	.word	0x0000178f
  98:	0000178f 	.word	0x0000178f
  9c:	0000178f 	.word	0x0000178f
  a0:	0000178f 	.word	0x0000178f
  a4:	0000178f 	.word	0x0000178f
  a8:	0000178f 	.word	0x0000178f
  ac:	0000178f 	.word	0x0000178f
  b0:	0000178f 	.word	0x0000178f
  b4:	0000178f 	.word	0x0000178f
  b8:	0000178f 	.word	0x0000178f
  bc:	0000178f 	.word	0x0000178f
  c0:	0000178f 	.word	0x0000178f
  c4:	0000178f 	.word	0x0000178f
  c8:	0000178f 	.word	0x0000178f
  cc:	0000178f 	.word	0x0000178f
  d0:	0000178f 	.word	0x0000178f
  d4:	0000178f 	.word	0x0000178f
  d8:	0000178f 	.word	0x0000178f
  dc:	0000178f 	.word	0x0000178f
  e0:	0000178f 	.word	0x0000178f
  e4:	0000178f 	.word	0x0000178f
  e8:	0000178f 	.word	0x0000178f
  ec:	0000178f 	.word	0x0000178f
  f0:	0000178f 	.word	0x0000178f
  f4:	0000178f 	.word	0x0000178f
  f8:	0000178f 	.word	0x0000178f
  fc:	0000178f 	.word	0x0000178f
 100:	0000178f 	.word	0x0000178f
 104:	0000178f 	.word	0x0000178f
 108:	0000178f 	.word	0x0000178f
 10c:	0000178f 	.word	0x0000178f
 110:	0000178f 	.word	0x0000178f
 114:	0000178f 	.word	0x0000178f
 118:	0000178f 	.word	0x0000178f
 11c:	0000178f 	.word	0x0000178f
 120:	0000178f 	.word	0x0000178f
 124:	0000178f 	.word	0x0000178f
 128:	0000178f 	.word	0x0000178f
 12c:	0000178f 	.word	0x0000178f
 130:	0000178f 	.word	0x0000178f
 134:	0000178f 	.word	0x0000178f
 138:	0000178f 	.word	0x0000178f
 13c:	0000178f 	.word	0x0000178f
 140:	0000178f 	.word	0x0000178f
 144:	0000178f 	.word	0x0000178f
 148:	0000178f 	.word	0x0000178f
 14c:	0000178f 	.word	0x0000178f
 150:	0000178f 	.word	0x0000178f
 154:	0000178f 	.word	0x0000178f
 158:	0000178f 	.word	0x0000178f
 15c:	0000178f 	.word	0x0000178f
 160:	0000178f 	.word	0x0000178f
 164:	0000178f 	.word	0x0000178f
 168:	0000178f 	.word	0x0000178f
 16c:	0000178f 	.word	0x0000178f
 170:	0000178f 	.word	0x0000178f
 174:	0000178f 	.word	0x0000178f
 178:	0000178f 	.word	0x0000178f
 17c:	0000178f 	.word	0x0000178f
 180:	0000178f 	.word	0x0000178f
 184:	0000178f 	.word	0x0000178f
 188:	0000178f 	.word	0x0000178f
 18c:	0000178f 	.word	0x0000178f
 190:	0000178f 	.word	0x0000178f
 194:	0000178f 	.word	0x0000178f
 198:	0000178f 	.word	0x0000178f
 19c:	0000178f 	.word	0x0000178f
 1a0:	0000178f 	.word	0x0000178f
 1a4:	0000178f 	.word	0x0000178f
 1a8:	0000178f 	.word	0x0000178f
 1ac:	0000178f 	.word	0x0000178f
 1b0:	0000178f 	.word	0x0000178f
 1b4:	0000178f 	.word	0x0000178f
 1b8:	0000178f 	.word	0x0000178f
 1bc:	0000178f 	.word	0x0000178f
 1c0:	0000178f 	.word	0x0000178f
 1c4:	0000178f 	.word	0x0000178f
 1c8:	0000178f 	.word	0x0000178f
 1cc:	0000178f 	.word	0x0000178f
 1d0:	0000178f 	.word	0x0000178f
 1d4:	0000178f 	.word	0x0000178f
 1d8:	0000178f 	.word	0x0000178f
 1dc:	0000178f 	.word	0x0000178f
 1e0:	0000178f 	.word	0x0000178f
 1e4:	0000178f 	.word	0x0000178f
 1e8:	0000178f 	.word	0x0000178f
 1ec:	0000178f 	.word	0x0000178f
 1f0:	0000178f 	.word	0x0000178f
 1f4:	0000178f 	.word	0x0000178f
 1f8:	0000178f 	.word	0x0000178f
 1fc:	0000178f 	.word	0x0000178f
 200:	0000178f 	.word	0x0000178f
 204:	0000178f 	.word	0x0000178f
 208:	0000178f 	.word	0x0000178f
 20c:	0000178f 	.word	0x0000178f
 210:	0000178f 	.word	0x0000178f
 214:	0000178f 	.word	0x0000178f
 218:	0000178f 	.word	0x0000178f
 21c:	0000178f 	.word	0x0000178f
 220:	0000178f 	.word	0x0000178f
 224:	0000178f 	.word	0x0000178f
 228:	0000178f 	.word	0x0000178f
 22c:	0000178f 	.word	0x0000178f
 230:	0000178f 	.word	0x0000178f
 234:	0000178f 	.word	0x0000178f
 238:	0000178f 	.word	0x0000178f
 23c:	0000178f 	.word	0x0000178f
 240:	0000178f 	.word	0x0000178f
 244:	0000178f 	.word	0x0000178f
 248:	0000178f 	.word	0x0000178f
 24c:	0000178f 	.word	0x0000178f
 250:	0000178f 	.word	0x0000178f
 254:	0000178f 	.word	0x0000178f
 258:	0000178f 	.word	0x0000178f
 25c:	0000178f 	.word	0x0000178f
 260:	0000178f 	.word	0x0000178f
 264:	0000178f 	.word	0x0000178f
 268:	0000178f 	.word	0x0000178f
 26c:	0000178f 	.word	0x0000178f
 270:	0000178f 	.word	0x0000178f
 274:	0000178f 	.word	0x0000178f
 278:	0000178f 	.word	0x0000178f
 27c:	0000178f 	.word	0x0000178f
 280:	0000178f 	.word	0x0000178f
 284:	0000178f 	.word	0x0000178f
 288:	0000178f 	.word	0x0000178f
 28c:	0000178f 	.word	0x0000178f
 290:	0000178f 	.word	0x0000178f
 294:	0000178f 	.word	0x0000178f
 298:	0000178f 	.word	0x0000178f
 29c:	0000178f 	.word	0x0000178f
 2a0:	0000178f 	.word	0x0000178f
 2a4:	0000178f 	.word	0x0000178f
 2a8:	0000178f 	.word	0x0000178f
 2ac:	0000178f 	.word	0x0000178f
 2b0:	0000178f 	.word	0x0000178f
 2b4:	0000178f 	.word	0x0000178f
 2b8:	0000178f 	.word	0x0000178f
 2bc:	0000178f 	.word	0x0000178f
 2c0:	0000178f 	.word	0x0000178f
 2c4:	0000178f 	.word	0x0000178f
 2c8:	0000178f 	.word	0x0000178f
 2cc:	0000178f 	.word	0x0000178f
 2d0:	0000178f 	.word	0x0000178f
 2d4:	0000178f 	.word	0x0000178f
 2d8:	0000178f 	.word	0x0000178f
 2dc:	0000178f 	.word	0x0000178f
 2e0:	0000178f 	.word	0x0000178f
 2e4:	0000178f 	.word	0x0000178f
 2e8:	0000178f 	.word	0x0000178f
 2ec:	0000178f 	.word	0x0000178f
 2f0:	0000178f 	.word	0x0000178f
 2f4:	0000178f 	.word	0x0000178f
 2f8:	0000178f 	.word	0x0000178f
 2fc:	0000178f 	.word	0x0000178f
 300:	0000178f 	.word	0x0000178f
 304:	0000178f 	.word	0x0000178f
 308:	0000178f 	.word	0x0000178f
 30c:	0000178f 	.word	0x0000178f

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f001 f8b3 	bl	15ec <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 f972 	bl	1774 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff97c8 	.word	0x1fff97c8

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f001 f8bd 	bl	1718 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();    //MCU configuration.
     8b2:	f001 fc89 	bl	21c8 <EcuM_Init>
    HwIoAb_Init();  //Initializing IO hardware abstractions.
     8b6:	f001 fcad 	bl	2214 <HwIoAb_Init>
    SEGGER_RTT_Init();  //Initializing RTT library.
     8ba:	f001 f8fb 	bl	1ab4 <SEGGER_RTT_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure for scheduler.
     8be:	4803      	ldr	r0, [pc, #12]	; (8cc <main+0x1c>)
     8c0:	f000 f8d0 	bl	a64 <Scheduler_Init>
   
    while( 1u ) {
        Scheduler_MainFunction();
     8c4:	f000 f98c 	bl	be0 <Scheduler_MainFunction>
     8c8:	e7fc      	b.n	8c4 <main+0x14>
     8ca:	bf00      	nop
     8cc:	1fff975c 	.word	0x1fff975c

000008d0 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     8d0:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8d2:	f3ef 8310 	mrs	r3, PRIMASK
     8d6:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8d8:	4623      	mov	r3, r4
}
     8da:	4618      	mov	r0, r3
     8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
     8e0:	4770      	bx	lr

000008e2 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     8e2:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8e4:	f3ef 8310 	mrs	r3, PRIMASK
     8e8:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8ea:	4623      	mov	r3, r4
}
     8ec:	4618      	mov	r0, r3
     8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
     8f2:	4770      	bx	lr

000008f4 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     8f4:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8f6:	f3ef 8310 	mrs	r3, PRIMASK
     8fa:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8fc:	4623      	mov	r3, r4
}
     8fe:	4618      	mov	r0, r3
     900:	f85d 4b04 	ldr.w	r4, [sp], #4
     904:	4770      	bx	lr

00000906 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     906:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     908:	f3ef 8310 	mrs	r3, PRIMASK
     90c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     90e:	4623      	mov	r3, r4
}
     910:	4618      	mov	r0, r3
     912:	f85d 4b04 	ldr.w	r4, [sp], #4
     916:	4770      	bx	lr

00000918 <Pwm_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Pwm_schm_read_msr(void)
{
     918:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     91a:	f3ef 8310 	mrs	r3, PRIMASK
     91e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     920:	4623      	mov	r3, r4
}
     922:	4618      	mov	r0, r3
     924:	f85d 4b04 	ldr.w	r4, [sp], #4
     928:	4770      	bx	lr

0000092a <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     92a:	b082      	sub	sp, #8
     92c:	9001      	str	r0, [sp, #4]
     92e:	460b      	mov	r3, r1
     930:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     934:	9b01      	ldr	r3, [sp, #4]
     936:	681b      	ldr	r3, [r3, #0]
     938:	f89d 2003 	ldrb.w	r2, [sp, #3]
     93c:	2101      	movs	r1, #1
     93e:	fa01 f202 	lsl.w	r2, r1, r2
     942:	431a      	orrs	r2, r3
     944:	9b01      	ldr	r3, [sp, #4]
     946:	601a      	str	r2, [r3, #0]
}
     948:	bf00      	nop
     94a:	b002      	add	sp, #8
     94c:	4770      	bx	lr

0000094e <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     94e:	b082      	sub	sp, #8
     950:	9001      	str	r0, [sp, #4]
     952:	460b      	mov	r3, r1
     954:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     958:	9b01      	ldr	r3, [sp, #4]
     95a:	681b      	ldr	r3, [r3, #0]
     95c:	f89d 2003 	ldrb.w	r2, [sp, #3]
     960:	2101      	movs	r1, #1
     962:	fa01 f202 	lsl.w	r2, r1, r2
     966:	43d2      	mvns	r2, r2
     968:	401a      	ands	r2, r3
     96a:	9b01      	ldr	r3, [sp, #4]
     96c:	601a      	str	r2, [r3, #0]
}
     96e:	bf00      	nop
     970:	b002      	add	sp, #8
     972:	4770      	bx	lr

00000974 <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     974:	b084      	sub	sp, #16
     976:	9001      	str	r0, [sp, #4]
     978:	460b      	mov	r3, r1
     97a:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     97e:	2300      	movs	r3, #0
     980:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     984:	f89d 3003 	ldrb.w	r3, [sp, #3]
     988:	2201      	movs	r2, #1
     98a:	fa02 f303 	lsl.w	r3, r2, r3
     98e:	461a      	mov	r2, r3
     990:	9b01      	ldr	r3, [sp, #4]
     992:	4013      	ands	r3, r2
     994:	2b00      	cmp	r3, #0
     996:	bf14      	ite	ne
     998:	2301      	movne	r3, #1
     99a:	2300      	moveq	r3, #0
     99c:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     9a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     9a4:	4618      	mov	r0, r3
     9a6:	b004      	add	sp, #16
     9a8:	4770      	bx	lr

000009aa <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     9aa:	b082      	sub	sp, #8
     9ac:	9001      	str	r0, [sp, #4]
     9ae:	460b      	mov	r3, r1
     9b0:	f88d 3003 	strb.w	r3, [sp, #3]
     9b4:	4613      	mov	r3, r2
     9b6:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     9ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
     9be:	2b00      	cmp	r3, #0
     9c0:	d00a      	beq.n	9d8 <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     9c2:	9b01      	ldr	r3, [sp, #4]
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9ca:	2101      	movs	r1, #1
     9cc:	fa01 f202 	lsl.w	r2, r1, r2
     9d0:	431a      	orrs	r2, r3
     9d2:	9b01      	ldr	r3, [sp, #4]
     9d4:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     9d6:	e00a      	b.n	9ee <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     9d8:	9b01      	ldr	r3, [sp, #4]
     9da:	681b      	ldr	r3, [r3, #0]
     9dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9e0:	2101      	movs	r1, #1
     9e2:	fa01 f202 	lsl.w	r2, r1, r2
     9e6:	43d2      	mvns	r2, r2
     9e8:	401a      	ands	r2, r3
     9ea:	9b01      	ldr	r3, [sp, #4]
     9ec:	601a      	str	r2, [r3, #0]
}
     9ee:	bf00      	nop
     9f0:	b002      	add	sp, #8
     9f2:	4770      	bx	lr

000009f4 <Scheduler_InitQueue>:
/**
 * @brief This function initialices the queue buffer control members.
 * 
 * @param SchedulerPtr Ptr to control struct instance, it allows the init of the members.
 */
void Scheduler_InitQueue( Scheduler_CtrlType *SchedulerPtr ) {
     9f4:	b500      	push	{lr}
     9f6:	b085      	sub	sp, #20
     9f8:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
     9fa:	2300      	movs	r3, #0
     9fc:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a00:	2300      	movs	r3, #0
     a02:	f88d 300f 	strb.w	r3, [sp, #15]
     a06:	e023      	b.n	a50 <Scheduler_InitQueue+0x5c>
        SchedulerPtr->QueueHeads[i] = 0;
     a08:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a0c:	9b01      	ldr	r3, [sp, #4]
     a0e:	3208      	adds	r2, #8
     a10:	2100      	movs	r1, #0
     a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->QueueTails[i] = 0;
     a16:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a1a:	9a01      	ldr	r2, [sp, #4]
     a1c:	3308      	adds	r3, #8
     a1e:	009b      	lsls	r3, r3, #2
     a20:	4413      	add	r3, r2
     a22:	2200      	movs	r2, #0
     a24:	605a      	str	r2, [r3, #4]
        Bfx_ClrBit_u32u8( &SchedulerPtr->QueueFulls, i );
     a26:	9b01      	ldr	r3, [sp, #4]
     a28:	332c      	adds	r3, #44	; 0x2c
     a2a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a2e:	4611      	mov	r1, r2
     a30:	4618      	mov	r0, r3
     a32:	f7ff ff8c 	bl	94e <Bfx_ClrBit_u32u8>
        Bfx_SetBit_u32u8( &SchedulerPtr->QueueEmpties, i );
     a36:	9b01      	ldr	r3, [sp, #4]
     a38:	3328      	adds	r3, #40	; 0x28
     a3a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a3e:	4611      	mov	r1, r2
     a40:	4618      	mov	r0, r3
     a42:	f7ff ff72 	bl	92a <Bfx_SetBit_u32u8>
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a46:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a4a:	3301      	adds	r3, #1
     a4c:	f88d 300f 	strb.w	r3, [sp, #15]
     a50:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a54:	2b00      	cmp	r3, #0
     a56:	d0d7      	beq.n	a08 <Scheduler_InitQueue+0x14>
    }
}
     a58:	bf00      	nop
     a5a:	bf00      	nop
     a5c:	b005      	add	sp, #20
     a5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000a64 <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     a64:	b500      	push	{lr}
     a66:	b085      	sub	sp, #20
     a68:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = TRUE;
     a6a:	2301      	movs	r3, #1
     a6c:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 i = 0;
     a70:	2300      	movs	r3, #0
     a72:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing tasks related parameters.
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     a76:	2300      	movs	r3, #0
     a78:	f88d 300f 	strb.w	r3, [sp, #15]
     a7c:	e033      	b.n	ae6 <Scheduler_Init+0x82>
        SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     a7e:	4b44      	ldr	r3, [pc, #272]	; (b90 <Scheduler_Init+0x12c>)
     a80:	681b      	ldr	r3, [r3, #0]
     a82:	6899      	ldr	r1, [r3, #8]
     a84:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a88:	4613      	mov	r3, r2
     a8a:	005b      	lsls	r3, r3, #1
     a8c:	4413      	add	r3, r2
     a8e:	009b      	lsls	r3, r3, #2
     a90:	440b      	add	r3, r1
     a92:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a96:	6819      	ldr	r1, [r3, #0]
     a98:	9b01      	ldr	r3, [sp, #4]
     a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     a9e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     aa2:	9b01      	ldr	r3, [sp, #4]
     aa4:	3202      	adds	r2, #2
     aa6:	2100      	movs	r1, #0
     aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     aac:	9b01      	ldr	r3, [sp, #4]
     aae:	f103 0018 	add.w	r0, r3, #24
     ab2:	4b37      	ldr	r3, [pc, #220]	; (b90 <Scheduler_Init+0x12c>)
     ab4:	681b      	ldr	r3, [r3, #0]
     ab6:	6899      	ldr	r1, [r3, #8]
     ab8:	f89d 200f 	ldrb.w	r2, [sp, #15]
     abc:	4613      	mov	r3, r2
     abe:	005b      	lsls	r3, r3, #1
     ac0:	4413      	add	r3, r2
     ac2:	009b      	lsls	r3, r3, #2
     ac4:	440b      	add	r3, r1
     ac6:	791b      	ldrb	r3, [r3, #4]
     ac8:	2b00      	cmp	r3, #0
     aca:	bf14      	ite	ne
     acc:	2301      	movne	r3, #1
     ace:	2300      	moveq	r3, #0
     ad0:	b2da      	uxtb	r2, r3
     ad2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ad6:	4619      	mov	r1, r3
     ad8:	f7ff ff67 	bl	9aa <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     adc:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ae0:	3301      	adds	r3, #1
     ae2:	f88d 300f 	strb.w	r3, [sp, #15]
     ae6:	f89d 300f 	ldrb.w	r3, [sp, #15]
     aea:	2b01      	cmp	r3, #1
     aec:	d9c7      	bls.n	a7e <Scheduler_Init+0x1a>
    }

    //Initializing timers related parameters.
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     aee:	2300      	movs	r3, #0
     af0:	f88d 300f 	strb.w	r3, [sp, #15]
     af4:	e03f      	b.n	b76 <Scheduler_Init+0x112>
        SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     af6:	4b26      	ldr	r3, [pc, #152]	; (b90 <Scheduler_Init+0x12c>)
     af8:	681b      	ldr	r3, [r3, #0]
     afa:	6919      	ldr	r1, [r3, #16]
     afc:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b00:	4613      	mov	r3, r2
     b02:	005b      	lsls	r3, r3, #1
     b04:	4413      	add	r3, r2
     b06:	009b      	lsls	r3, r3, #2
     b08:	440b      	add	r3, r1
     b0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b0e:	6819      	ldr	r1, [r3, #0]
     b10:	9b01      	ldr	r3, [sp, #4]
     b12:	3204      	adds	r2, #4
     b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     b18:	4b1d      	ldr	r3, [pc, #116]	; (b90 <Scheduler_Init+0x12c>)
     b1a:	681b      	ldr	r3, [r3, #0]
     b1c:	6919      	ldr	r1, [r3, #16]
     b1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b22:	4613      	mov	r3, r2
     b24:	005b      	lsls	r3, r3, #1
     b26:	4413      	add	r3, r2
     b28:	009b      	lsls	r3, r3, #2
     b2a:	18ca      	adds	r2, r1, r3
     b2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b30:	6812      	ldr	r2, [r2, #0]
     b32:	9901      	ldr	r1, [sp, #4]
     b34:	3304      	adds	r3, #4
     b36:	009b      	lsls	r3, r3, #2
     b38:	440b      	add	r3, r1
     b3a:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     b3c:	9b01      	ldr	r3, [sp, #4]
     b3e:	f103 001c 	add.w	r0, r3, #28
     b42:	4b13      	ldr	r3, [pc, #76]	; (b90 <Scheduler_Init+0x12c>)
     b44:	681b      	ldr	r3, [r3, #0]
     b46:	6919      	ldr	r1, [r3, #16]
     b48:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b4c:	4613      	mov	r3, r2
     b4e:	005b      	lsls	r3, r3, #1
     b50:	4413      	add	r3, r2
     b52:	009b      	lsls	r3, r3, #2
     b54:	440b      	add	r3, r1
     b56:	791b      	ldrb	r3, [r3, #4]
     b58:	2b00      	cmp	r3, #0
     b5a:	bf14      	ite	ne
     b5c:	2301      	movne	r3, #1
     b5e:	2300      	moveq	r3, #0
     b60:	b2da      	uxtb	r2, r3
     b62:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b66:	4619      	mov	r1, r3
     b68:	f7ff ff1f 	bl	9aa <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     b6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b70:	3301      	adds	r3, #1
     b72:	f88d 300f 	strb.w	r3, [sp, #15]
     b76:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d0bb      	beq.n	af6 <Scheduler_Init+0x92>
    } 

    Scheduler_InitQueue( SchedulerPtr ); //Initializing queues related parameters.   
     b7e:	9801      	ldr	r0, [sp, #4]
     b80:	f7ff ff38 	bl	9f4 <Scheduler_InitQueue>

    return status;
     b84:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     b88:	4618      	mov	r0, r3
     b8a:	b005      	add	sp, #20
     b8c:	f85d fb04 	ldr.w	pc, [sp], #4
     b90:	1fff8b4c 	.word	0x1fff8b4c

00000b94 <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     b94:	b084      	sub	sp, #16
     b96:	4603      	mov	r3, r0
     b98:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     b9c:	2300      	movs	r3, #0
     b9e:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ba4:	2b00      	cmp	r3, #0
     ba6:	d011      	beq.n	bcc <Scheduler_GetTimer+0x38>
     ba8:	4b0b      	ldr	r3, [pc, #44]	; (bd8 <Scheduler_GetTimer+0x44>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	7b1b      	ldrb	r3, [r3, #12]
     bae:	f89d 2007 	ldrb.w	r2, [sp, #7]
     bb2:	429a      	cmp	r2, r3
     bb4:	d80a      	bhi.n	bcc <Scheduler_GetTimer+0x38>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ];
     bb6:	4b09      	ldr	r3, [pc, #36]	; (bdc <Scheduler_GetTimer+0x48>)
     bb8:	681a      	ldr	r2, [r3, #0]
     bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bbe:	3b01      	subs	r3, #1
     bc0:	3304      	adds	r3, #4
     bc2:	009b      	lsls	r3, r3, #2
     bc4:	4413      	add	r3, r2
     bc6:	685b      	ldr	r3, [r3, #4]
     bc8:	9303      	str	r3, [sp, #12]
     bca:	e001      	b.n	bd0 <Scheduler_GetTimer+0x3c>
    }

    else {
        counter_value = FALSE;  //invalid ID.
     bcc:	2300      	movs	r3, #0
     bce:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     bd0:	9b03      	ldr	r3, [sp, #12]
}
     bd2:	4618      	mov	r0, r3
     bd4:	b004      	add	sp, #16
     bd6:	4770      	bx	lr
     bd8:	1fff8b4c 	.word	0x1fff8b4c
     bdc:	1fff8b50 	.word	0x1fff8b50

00000be0 <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     be0:	b500      	push	{lr}
     be2:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     be4:	4b5e      	ldr	r3, [pc, #376]	; (d60 <Scheduler_MainFunction+0x180>)
     be6:	681b      	ldr	r3, [r3, #0]
     be8:	681b      	ldr	r3, [r3, #0]
     bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     bee:	fb02 f303 	mul.w	r3, r2, r3
     bf2:	2101      	movs	r1, #1
     bf4:	4618      	mov	r0, r3
     bf6:	f001 fe13 	bl	2820 <OsIf_MicrosToTicks>
     bfa:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     bfc:	2001      	movs	r0, #1
     bfe:	f001 fdc3 	bl	2788 <OsIf_GetCounter>
     c02:	4603      	mov	r3, r0
     c04:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     c06:	2300      	movs	r3, #0
     c08:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     c0a:	2300      	movs	r3, #0
     c0c:	f88d 300b 	strb.w	r3, [sp, #11]

    while( 1 ) {    //tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     c10:	466b      	mov	r3, sp
     c12:	2101      	movs	r1, #1
     c14:	4618      	mov	r0, r3
     c16:	f001 fdd0 	bl	27ba <OsIf_GetElapsed>
     c1a:	4602      	mov	r2, r0
     c1c:	9b03      	ldr	r3, [sp, #12]
     c1e:	4413      	add	r3, r2
     c20:	9303      	str	r3, [sp, #12]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
     c22:	9a03      	ldr	r2, [sp, #12]
     c24:	9b01      	ldr	r3, [sp, #4]
     c26:	429a      	cmp	r2, r3
     c28:	d3f2      	bcc.n	c10 <Scheduler_MainFunction+0x30>
            
            //Executing timers
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     c2a:	2300      	movs	r3, #0
     c2c:	f88d 300b 	strb.w	r3, [sp, #11]
     c30:	e03a      	b.n	ca8 <Scheduler_MainFunction+0xc8>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     c32:	4b4c      	ldr	r3, [pc, #304]	; (d64 <Scheduler_MainFunction+0x184>)
     c34:	681b      	ldr	r3, [r3, #0]
     c36:	69db      	ldr	r3, [r3, #28]
     c38:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c3c:	4611      	mov	r1, r2
     c3e:	4618      	mov	r0, r3
     c40:	f7ff fe98 	bl	974 <Bfx_GetBit_u32u8_u8>
     c44:	4603      	mov	r3, r0
     c46:	2b00      	cmp	r3, #0
     c48:	d029      	beq.n	c9e <Scheduler_MainFunction+0xbe>
                    SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     c4a:	4b46      	ldr	r3, [pc, #280]	; (d64 <Scheduler_MainFunction+0x184>)
     c4c:	681a      	ldr	r2, [r3, #0]
     c4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c52:	3304      	adds	r3, #4
     c54:	009b      	lsls	r3, r3, #2
     c56:	4413      	add	r3, r2
     c58:	6858      	ldr	r0, [r3, #4]
     c5a:	4b41      	ldr	r3, [pc, #260]	; (d60 <Scheduler_MainFunction+0x180>)
     c5c:	681b      	ldr	r3, [r3, #0]
     c5e:	681a      	ldr	r2, [r3, #0]
     c60:	4b40      	ldr	r3, [pc, #256]	; (d64 <Scheduler_MainFunction+0x184>)
     c62:	6819      	ldr	r1, [r3, #0]
     c64:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c68:	1a82      	subs	r2, r0, r2
     c6a:	3304      	adds	r3, #4
     c6c:	009b      	lsls	r3, r3, #2
     c6e:	440b      	add	r3, r1
     c70:	605a      	str	r2, [r3, #4]
                    
                    //Verifying execution of callback i
                    if ( Scheduler_GetTimer( i + 1 ) == 0 ) {   //timeout achieved.
     c72:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c76:	3301      	adds	r3, #1
     c78:	b2db      	uxtb	r3, r3
     c7a:	4618      	mov	r0, r3
     c7c:	f7ff ff8a 	bl	b94 <Scheduler_GetTimer>
     c80:	4603      	mov	r3, r0
     c82:	2b00      	cmp	r3, #0
     c84:	d10b      	bne.n	c9e <Scheduler_MainFunction+0xbe>
                        SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     c86:	4b36      	ldr	r3, [pc, #216]	; (d60 <Scheduler_MainFunction+0x180>)
     c88:	681b      	ldr	r3, [r3, #0]
     c8a:	6919      	ldr	r1, [r3, #16]
     c8c:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c90:	4613      	mov	r3, r2
     c92:	005b      	lsls	r3, r3, #1
     c94:	4413      	add	r3, r2
     c96:	009b      	lsls	r3, r3, #2
     c98:	440b      	add	r3, r1
     c9a:	689b      	ldr	r3, [r3, #8]
     c9c:	4798      	blx	r3
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     c9e:	f89d 300b 	ldrb.w	r3, [sp, #11]
     ca2:	3301      	adds	r3, #1
     ca4:	f88d 300b 	strb.w	r3, [sp, #11]
     ca8:	4b2d      	ldr	r3, [pc, #180]	; (d60 <Scheduler_MainFunction+0x180>)
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	7b1b      	ldrb	r3, [r3, #12]
     cae:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cb2:	429a      	cmp	r2, r3
     cb4:	d3bd      	bcc.n	c32 <Scheduler_MainFunction+0x52>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     cb6:	2300      	movs	r3, #0
     cb8:	f88d 300b 	strb.w	r3, [sp, #11]
     cbc:	e045      	b.n	d4a <Scheduler_MainFunction+0x16a>
                //Verifying execution of task i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     cbe:	4b29      	ldr	r3, [pc, #164]	; (d64 <Scheduler_MainFunction+0x184>)
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	699b      	ldr	r3, [r3, #24]
     cc4:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cc8:	4611      	mov	r1, r2
     cca:	4618      	mov	r0, r3
     ccc:	f7ff fe52 	bl	974 <Bfx_GetBit_u32u8_u8>
     cd0:	4603      	mov	r3, r0
     cd2:	2b00      	cmp	r3, #0
     cd4:	d034      	beq.n	d40 <Scheduler_MainFunction+0x160>
                    SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     cd6:	4b23      	ldr	r3, [pc, #140]	; (d64 <Scheduler_MainFunction+0x184>)
     cd8:	681b      	ldr	r3, [r3, #0]
     cda:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cde:	3202      	adds	r2, #2
     ce0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     ce4:	4b1e      	ldr	r3, [pc, #120]	; (d60 <Scheduler_MainFunction+0x180>)
     ce6:	681b      	ldr	r3, [r3, #0]
     ce8:	6819      	ldr	r1, [r3, #0]
     cea:	4b1e      	ldr	r3, [pc, #120]	; (d64 <Scheduler_MainFunction+0x184>)
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cf2:	4401      	add	r1, r0
     cf4:	3202      	adds	r2, #2
     cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                    //Verifying the execution of callback i.
                    if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     cfa:	4b1a      	ldr	r3, [pc, #104]	; (d64 <Scheduler_MainFunction+0x184>)
     cfc:	681b      	ldr	r3, [r3, #0]
     cfe:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d02:	3202      	adds	r2, #2
     d04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     d08:	4b16      	ldr	r3, [pc, #88]	; (d64 <Scheduler_MainFunction+0x184>)
     d0a:	681b      	ldr	r3, [r3, #0]
     d0c:	f89d 100b 	ldrb.w	r1, [sp, #11]
     d10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     d14:	429a      	cmp	r2, r3
     d16:	d313      	bcc.n	d40 <Scheduler_MainFunction+0x160>
                        SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     d18:	4b11      	ldr	r3, [pc, #68]	; (d60 <Scheduler_MainFunction+0x180>)
     d1a:	681b      	ldr	r3, [r3, #0]
     d1c:	6899      	ldr	r1, [r3, #8]
     d1e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d22:	4613      	mov	r3, r2
     d24:	005b      	lsls	r3, r3, #1
     d26:	4413      	add	r3, r2
     d28:	009b      	lsls	r3, r3, #2
     d2a:	440b      	add	r3, r1
     d2c:	689b      	ldr	r3, [r3, #8]
     d2e:	4798      	blx	r3
                        SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     d30:	4b0c      	ldr	r3, [pc, #48]	; (d64 <Scheduler_MainFunction+0x184>)
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d38:	3202      	adds	r2, #2
     d3a:	2100      	movs	r1, #0
     d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     d40:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d44:	3301      	adds	r3, #1
     d46:	f88d 300b 	strb.w	r3, [sp, #11]
     d4a:	4b05      	ldr	r3, [pc, #20]	; (d60 <Scheduler_MainFunction+0x180>)
     d4c:	681b      	ldr	r3, [r3, #0]
     d4e:	791b      	ldrb	r3, [r3, #4]
     d50:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d54:	429a      	cmp	r2, r3
     d56:	d3b2      	bcc.n	cbe <Scheduler_MainFunction+0xde>
                    }
                }
            }

            elapsed_time = 0;   //Reset time follow up for tick.
     d58:	2300      	movs	r3, #0
     d5a:	9303      	str	r3, [sp, #12]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     d5c:	e758      	b.n	c10 <Scheduler_MainFunction+0x30>
     d5e:	bf00      	nop
     d60:	1fff8b4c 	.word	0x1fff8b4c
     d64:	1fff8b50 	.word	0x1fff8b50

00000d68 <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     d68:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     d6a:	f000 f967 	bl	103c <HwIoAb_Buttons_MainFunction>
}
     d6e:	bf00      	nop
     d70:	bd08      	pop	{r3, pc}
	...

00000d74 <Task2_callback>:
 * @note Button 1, Single click toggle only led0 (PTC8), double click prints ohms value of pot 1 main, hold click tone 1 for buzzer, release stops buzzer.
 * @note Button 2, Single click toggle only led1 (PTC9), double click prints ohms value of pot 2 main, hold click tone 2 for buzzer, release stops buzzer.
 * @note Button 3, Single click toggle only led2 (PTC10), double click prints ohms values of pot1 and pot 2 alter , hold click tone 3 for buzzer, release stops buzzer.
 * @note The tone of the buzzer is always the last activated.
 */
void Task2_callback( void ) {
     d74:	b500      	push	{lr}
     d76:	b083      	sub	sp, #12
    //local data.
    static boolean flags[3] = { TRUE, TRUE, TRUE }; //Flags for executing buzzer tones.
    uint8 i = 0;
     d78:	2300      	movs	r3, #0
     d7a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 actual_event = 0; //Actual event of button.
     d7e:	2300      	movs	r3, #0
     d80:	f88d 3006 	strb.w	r3, [sp, #6]


    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     d84:	2300      	movs	r3, #0
     d86:	f88d 3007 	strb.w	r3, [sp, #7]
     d8a:	e0e0      	b.n	f4e <Task2_callback+0x1da>
        actual_event =  HwIoAb_Buttons_GetEvent( i + 1 );   //Obtaining event of actual button.
     d8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d90:	3301      	adds	r3, #1
     d92:	b2db      	uxtb	r3, r3
     d94:	4618      	mov	r0, r3
     d96:	f000 f927 	bl	fe8 <HwIoAb_Buttons_GetEvent>
     d9a:	4603      	mov	r3, r0
     d9c:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( actual_event != HWIOAB_BTN_EVENT_IDLE ) {  //A click was detected.
     da0:	f89d 3006 	ldrb.w	r3, [sp, #6]
     da4:	2b00      	cmp	r3, #0
     da6:	f000 80ca 	beq.w	f3e <Task2_callback+0x1ca>
            switch ( i ) {    
     daa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dae:	2b02      	cmp	r3, #2
     db0:	f000 8084 	beq.w	ebc <Task2_callback+0x148>
     db4:	2b02      	cmp	r3, #2
     db6:	f300 80c4 	bgt.w	f42 <Task2_callback+0x1ce>
     dba:	2b00      	cmp	r3, #0
     dbc:	d002      	beq.n	dc4 <Task2_callback+0x50>
     dbe:	2b01      	cmp	r3, #1
     dc0:	d03e      	beq.n	e40 <Task2_callback+0xcc>
                            break;
                        }
                break;

                default:    //Invalid button.
                break;
     dc2:	e0be      	b.n	f42 <Task2_callback+0x1ce>
                    switch ( actual_event ) {
     dc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
     dc8:	3b01      	subs	r3, #1
     dca:	2b03      	cmp	r3, #3
     dcc:	d834      	bhi.n	e38 <Task2_callback+0xc4>
     dce:	a201      	add	r2, pc, #4	; (adr r2, dd4 <Task2_callback+0x60>)
     dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     dd4:	00000de5 	.word	0x00000de5
     dd8:	00000ded 	.word	0x00000ded
     ddc:	00000e0b 	.word	0x00000e0b
     de0:	00000e29 	.word	0x00000e29
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     de4:	2000      	movs	r0, #0
     de6:	f000 fac1 	bl	136c <HwIoAb_Leds_TurnToggle>
                        break;
     dea:	e028      	b.n	e3e <Task2_callback+0xca>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     dec:	4b5e      	ldr	r3, [pc, #376]	; (f68 <Task2_callback+0x1f4>)
     dee:	681b      	ldr	r3, [r3, #0]
     df0:	330a      	adds	r3, #10
     df2:	4618      	mov	r0, r3
     df4:	f000 fafe 	bl	13f4 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     df8:	4b5b      	ldr	r3, [pc, #364]	; (f68 <Task2_callback+0x1f4>)
     dfa:	681b      	ldr	r3, [r3, #0]
     dfc:	895b      	ldrh	r3, [r3, #10]
     dfe:	461a      	mov	r2, r3
     e00:	495a      	ldr	r1, [pc, #360]	; (f6c <Task2_callback+0x1f8>)
     e02:	2000      	movs	r0, #0
     e04:	f001 f9be 	bl	2184 <SEGGER_RTT_printf>
                        break;
     e08:	e019      	b.n	e3e <Task2_callback+0xca>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     e0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e0e:	4a58      	ldr	r2, [pc, #352]	; (f70 <Task2_callback+0x1fc>)
     e10:	5cd3      	ldrb	r3, [r2, r3]
     e12:	2b00      	cmp	r3, #0
     e14:	d012      	beq.n	e3c <Task2_callback+0xc8>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_1 );
     e16:	2000      	movs	r0, #0
     e18:	f000 fbb5 	bl	1586 <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     e1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e20:	4a53      	ldr	r2, [pc, #332]	; (f70 <Task2_callback+0x1fc>)
     e22:	2100      	movs	r1, #0
     e24:	54d1      	strb	r1, [r2, r3]
                        break;
     e26:	e009      	b.n	e3c <Task2_callback+0xc8>
                            HwIoAb_Buzzer_Stop();
     e28:	f000 fbda 	bl	15e0 <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     e2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e30:	4a4f      	ldr	r2, [pc, #316]	; (f70 <Task2_callback+0x1fc>)
     e32:	2101      	movs	r1, #1
     e34:	54d1      	strb	r1, [r2, r3]
                        break;
     e36:	e002      	b.n	e3e <Task2_callback+0xca>
                        break;
     e38:	bf00      	nop
     e3a:	e083      	b.n	f44 <Task2_callback+0x1d0>
                        break;
     e3c:	bf00      	nop
                break;
     e3e:	e081      	b.n	f44 <Task2_callback+0x1d0>
                    switch ( actual_event ) {
     e40:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e44:	3b01      	subs	r3, #1
     e46:	2b03      	cmp	r3, #3
     e48:	d834      	bhi.n	eb4 <Task2_callback+0x140>
     e4a:	a201      	add	r2, pc, #4	; (adr r2, e50 <Task2_callback+0xdc>)
     e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e50:	00000e61 	.word	0x00000e61
     e54:	00000e69 	.word	0x00000e69
     e58:	00000e87 	.word	0x00000e87
     e5c:	00000ea5 	.word	0x00000ea5
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     e60:	2001      	movs	r0, #1
     e62:	f000 fa83 	bl	136c <HwIoAb_Leds_TurnToggle>
                        break;
     e66:	e028      	b.n	eba <Task2_callback+0x146>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     e68:	4b3f      	ldr	r3, [pc, #252]	; (f68 <Task2_callback+0x1f4>)
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	330a      	adds	r3, #10
     e6e:	4618      	mov	r0, r3
     e70:	f000 fac0 	bl	13f4 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 2 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     e74:	4b3c      	ldr	r3, [pc, #240]	; (f68 <Task2_callback+0x1f4>)
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	899b      	ldrh	r3, [r3, #12]
     e7a:	461a      	mov	r2, r3
     e7c:	493d      	ldr	r1, [pc, #244]	; (f74 <Task2_callback+0x200>)
     e7e:	2000      	movs	r0, #0
     e80:	f001 f980 	bl	2184 <SEGGER_RTT_printf>
                        break;
     e84:	e019      	b.n	eba <Task2_callback+0x146>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     e86:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e8a:	4a39      	ldr	r2, [pc, #228]	; (f70 <Task2_callback+0x1fc>)
     e8c:	5cd3      	ldrb	r3, [r2, r3]
     e8e:	2b00      	cmp	r3, #0
     e90:	d012      	beq.n	eb8 <Task2_callback+0x144>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_2 );
     e92:	2001      	movs	r0, #1
     e94:	f000 fb77 	bl	1586 <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     e98:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e9c:	4a34      	ldr	r2, [pc, #208]	; (f70 <Task2_callback+0x1fc>)
     e9e:	2100      	movs	r1, #0
     ea0:	54d1      	strb	r1, [r2, r3]
                        break;
     ea2:	e009      	b.n	eb8 <Task2_callback+0x144>
                            HwIoAb_Buzzer_Stop();
     ea4:	f000 fb9c 	bl	15e0 <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     ea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eac:	4a30      	ldr	r2, [pc, #192]	; (f70 <Task2_callback+0x1fc>)
     eae:	2101      	movs	r1, #1
     eb0:	54d1      	strb	r1, [r2, r3]
                        break;
     eb2:	e002      	b.n	eba <Task2_callback+0x146>
                        break;
     eb4:	bf00      	nop
     eb6:	e045      	b.n	f44 <Task2_callback+0x1d0>
                        break;
     eb8:	bf00      	nop
                break;
     eba:	e043      	b.n	f44 <Task2_callback+0x1d0>
                        switch ( actual_event ) {
     ebc:	f89d 3006 	ldrb.w	r3, [sp, #6]
     ec0:	3b01      	subs	r3, #1
     ec2:	2b03      	cmp	r3, #3
     ec4:	d837      	bhi.n	f36 <Task2_callback+0x1c2>
     ec6:	a201      	add	r2, pc, #4	; (adr r2, ecc <Task2_callback+0x158>)
     ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ecc:	00000edd 	.word	0x00000edd
     ed0:	00000ee5 	.word	0x00000ee5
     ed4:	00000f09 	.word	0x00000f09
     ed8:	00000f27 	.word	0x00000f27
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     edc:	2002      	movs	r0, #2
     ede:	f000 fa45 	bl	136c <HwIoAb_Leds_TurnToggle>
                            break;
     ee2:	e02b      	b.n	f3c <Task2_callback+0x1c8>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_RESULTS );
     ee4:	4b20      	ldr	r3, [pc, #128]	; (f68 <Task2_callback+0x1f4>)
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	330e      	adds	r3, #14
     eea:	4618      	mov	r0, r3
     eec:	f000 fae4 	bl	14b8 <HwIoAb_Pots_GetAltValue>
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     ef0:	4b1d      	ldr	r3, [pc, #116]	; (f68 <Task2_callback+0x1f4>)
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	89db      	ldrh	r3, [r3, #14]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     ef6:	461a      	mov	r2, r3
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     ef8:	4b1b      	ldr	r3, [pc, #108]	; (f68 <Task2_callback+0x1f4>)
     efa:	681b      	ldr	r3, [r3, #0]
     efc:	8a1b      	ldrh	r3, [r3, #16]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     efe:	491e      	ldr	r1, [pc, #120]	; (f78 <Task2_callback+0x204>)
     f00:	2000      	movs	r0, #0
     f02:	f001 f93f 	bl	2184 <SEGGER_RTT_printf>
                            break;
     f06:	e019      	b.n	f3c <Task2_callback+0x1c8>
                                if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     f08:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f0c:	4a18      	ldr	r2, [pc, #96]	; (f70 <Task2_callback+0x1fc>)
     f0e:	5cd3      	ldrb	r3, [r2, r3]
     f10:	2b00      	cmp	r3, #0
     f12:	d012      	beq.n	f3a <Task2_callback+0x1c6>
                                    HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_3 );
     f14:	2002      	movs	r0, #2
     f16:	f000 fb36 	bl	1586 <HwIoAb_Buzzer_Beep>
                                    flags[i] = FALSE;
     f1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f1e:	4a14      	ldr	r2, [pc, #80]	; (f70 <Task2_callback+0x1fc>)
     f20:	2100      	movs	r1, #0
     f22:	54d1      	strb	r1, [r2, r3]
                            break;
     f24:	e009      	b.n	f3a <Task2_callback+0x1c6>
                                HwIoAb_Buzzer_Stop();
     f26:	f000 fb5b 	bl	15e0 <HwIoAb_Buzzer_Stop>
                                flags[i] = TRUE;
     f2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f2e:	4a10      	ldr	r2, [pc, #64]	; (f70 <Task2_callback+0x1fc>)
     f30:	2101      	movs	r1, #1
     f32:	54d1      	strb	r1, [r2, r3]
                            break;
     f34:	e002      	b.n	f3c <Task2_callback+0x1c8>
                            break;
     f36:	bf00      	nop
     f38:	e004      	b.n	f44 <Task2_callback+0x1d0>
                            break;
     f3a:	bf00      	nop
                break;
     f3c:	e002      	b.n	f44 <Task2_callback+0x1d0>
            }
        }
     f3e:	bf00      	nop
     f40:	e000      	b.n	f44 <Task2_callback+0x1d0>
                break;
     f42:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     f44:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f48:	3301      	adds	r3, #1
     f4a:	f88d 3007 	strb.w	r3, [sp, #7]
     f4e:	4b0b      	ldr	r3, [pc, #44]	; (f7c <Task2_callback+0x208>)
     f50:	681b      	ldr	r3, [r3, #0]
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	f89d 2007 	ldrb.w	r2, [sp, #7]
     f58:	429a      	cmp	r2, r3
     f5a:	f4ff af17 	bcc.w	d8c <Task2_callback+0x18>
    }
}
     f5e:	bf00      	nop
     f60:	bf00      	nop
     f62:	b003      	add	sp, #12
     f64:	f85d fb04 	ldr.w	pc, [sp], #4
     f68:	1fff8b60 	.word	0x1fff8b60
     f6c:	00015c28 	.word	0x00015c28
     f70:	1fff8b54 	.word	0x1fff8b54
     f74:	00015c4c 	.word	0x00015c4c
     f78:	00015c70 	.word	0x00015c70
     f7c:	1fff8b58 	.word	0x1fff8b58

00000f80 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 */
void Timer1_callback( void ) {
}
     f80:	bf00      	nop
     f82:	4770      	bx	lr

00000f84 <HwIoAb_Buttons_Init>:
 * @brief This function initialices the control structure for the double click state machine. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 * 
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config *Buttons_Config ) {
     f84:	b084      	sub	sp, #16
     f86:	9001      	str	r0, [sp, #4]
    //local data 
    uint8 i = 0;
     f88:	2300      	movs	r3, #0
     f8a:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     f8e:	4b15      	ldr	r3, [pc, #84]	; (fe4 <HwIoAb_Buttons_Init+0x60>)
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	2203      	movs	r2, #3
     f94:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     f96:	4b13      	ldr	r3, [pc, #76]	; (fe4 <HwIoAb_Buttons_Init+0x60>)
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	9a01      	ldr	r2, [sp, #4]
     f9c:	605a      	str	r2, [r3, #4]

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     f9e:	2300      	movs	r3, #0
     fa0:	f88d 300f 	strb.w	r3, [sp, #15]
     fa4:	e012      	b.n	fcc <HwIoAb_Buttons_Init+0x48>
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     fa6:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <HwIoAb_Buttons_Init+0x60>)
     fa8:	681a      	ldr	r2, [r3, #0]
     faa:	f89d 300f 	ldrb.w	r3, [sp, #15]
     fae:	4413      	add	r3, r2
     fb0:	2200      	movs	r2, #0
     fb2:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     fb4:	4b0b      	ldr	r3, [pc, #44]	; (fe4 <HwIoAb_Buttons_Init+0x60>)
     fb6:	681a      	ldr	r2, [r3, #0]
     fb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     fbc:	4413      	add	r3, r2
     fbe:	2200      	movs	r2, #0
     fc0:	72da      	strb	r2, [r3, #11]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     fc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     fc6:	3301      	adds	r3, #1
     fc8:	f88d 300f 	strb.w	r3, [sp, #15]
     fcc:	4b05      	ldr	r3, [pc, #20]	; (fe4 <HwIoAb_Buttons_Init+0x60>)
     fce:	681b      	ldr	r3, [r3, #0]
     fd0:	781b      	ldrb	r3, [r3, #0]
     fd2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     fd6:	429a      	cmp	r2, r3
     fd8:	d3e5      	bcc.n	fa6 <HwIoAb_Buttons_Init+0x22>
    }
}
     fda:	bf00      	nop
     fdc:	bf00      	nop
     fde:	b004      	add	sp, #16
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop
     fe4:	1fff8b58 	.word	0x1fff8b58

00000fe8 <HwIoAb_Buttons_GetEvent>:
 * @param Button Button ID. 
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button ) {
     fe8:	b084      	sub	sp, #16
     fea:	4603      	mov	r3, r0
     fec:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    uint8 event = 0;
     ff0:	2300      	movs	r3, #0
     ff2:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if ID is valid
    if ( ( Button != 0 ) && ( Button <= ButtonsControl_Ptr->Buttons ) ) {
     ff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d017      	beq.n	102e <HwIoAb_Buttons_GetEvent+0x46>
     ffe:	4b0e      	ldr	r3, [pc, #56]	; (1038 <HwIoAb_Buttons_GetEvent+0x50>)
    1000:	681b      	ldr	r3, [r3, #0]
    1002:	781b      	ldrb	r3, [r3, #0]
    1004:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1008:	429a      	cmp	r2, r3
    100a:	d810      	bhi.n	102e <HwIoAb_Buttons_GetEvent+0x46>
        event = ButtonsControl_Ptr->Events[ Button - 1 ]; //Obtaining last event.
    100c:	4b0a      	ldr	r3, [pc, #40]	; (1038 <HwIoAb_Buttons_GetEvent+0x50>)
    100e:	681a      	ldr	r2, [r3, #0]
    1010:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1014:	3b01      	subs	r3, #1
    1016:	4413      	add	r3, r2
    1018:	7adb      	ldrb	r3, [r3, #11]
    101a:	f88d 300f 	strb.w	r3, [sp, #15]
        ButtonsControl_Ptr->Events[ Button - 1 ] = HWIOAB_BTN_EVENT_IDLE;   //Clearing event of button.
    101e:	4b06      	ldr	r3, [pc, #24]	; (1038 <HwIoAb_Buttons_GetEvent+0x50>)
    1020:	681a      	ldr	r2, [r3, #0]
    1022:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1026:	3b01      	subs	r3, #1
    1028:	4413      	add	r3, r2
    102a:	2200      	movs	r2, #0
    102c:	72da      	strb	r2, [r3, #11]
    }

    return event;
    102e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1032:	4618      	mov	r0, r3
    1034:	b004      	add	sp, #16
    1036:	4770      	bx	lr
    1038:	1fff8b58 	.word	0x1fff8b58

0000103c <HwIoAb_Buttons_MainFunction>:
 * @note This function is called every HWIOAB_BUTTONS_PERIOD.
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void ) {
    103c:	b500      	push	{lr}
    103e:	b083      	sub	sp, #12
    //local data
    static boolean count_flags[ HWIOAB_BUTTONS_MAX ] = { FALSE, FALSE, FALSE };
    static uint32 count[ HWIOAB_BUTTONS_MAX ] = { 0, 0, 0 };
    uint8 i = 0;
    1040:	2300      	movs	r3, #0
    1042:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean active = FALSE;
    1046:	2300      	movs	r3, #0
    1048:	f88d 3006 	strb.w	r3, [sp, #6]
    
    //Counting in every function call
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
    104c:	2300      	movs	r3, #0
    104e:	f88d 3007 	strb.w	r3, [sp, #7]
    1052:	e029      	b.n	10a8 <HwIoAb_Buttons_MainFunction+0x6c>
        if ( count_flags[i] == TRUE ) {
    1054:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1058:	4ab9      	ldr	r2, [pc, #740]	; (1340 <__BSS_SRAM_SIZE+0x220>)
    105a:	5cd3      	ldrb	r3, [r2, r3]
    105c:	2b00      	cmp	r3, #0
    105e:	d01e      	beq.n	109e <HwIoAb_Buttons_MainFunction+0x62>
            count[i] += HWIOAB_BUTTONS_PERIOD;
    1060:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1064:	4ab7      	ldr	r2, [pc, #732]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    1066:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    106a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    106e:	3232      	adds	r2, #50	; 0x32
    1070:	49b4      	ldr	r1, [pc, #720]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    1072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {   //Once reaching timeout count stops.
    1076:	f89d 3007 	ldrb.w	r3, [sp, #7]
    107a:	4ab2      	ldr	r2, [pc, #712]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    107c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1080:	4bb1      	ldr	r3, [pc, #708]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	6859      	ldr	r1, [r3, #4]
    1086:	f89d 3007 	ldrb.w	r3, [sp, #7]
    108a:	00db      	lsls	r3, r3, #3
    108c:	440b      	add	r3, r1
    108e:	685b      	ldr	r3, [r3, #4]
    1090:	429a      	cmp	r2, r3
    1092:	d104      	bne.n	109e <HwIoAb_Buttons_MainFunction+0x62>
                count_flags[i] = FALSE;
    1094:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1098:	4aa9      	ldr	r2, [pc, #676]	; (1340 <__BSS_SRAM_SIZE+0x220>)
    109a:	2100      	movs	r1, #0
    109c:	54d1      	strb	r1, [r2, r3]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
    109e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10a2:	3301      	adds	r3, #1
    10a4:	f88d 3007 	strb.w	r3, [sp, #7]
    10a8:	4ba7      	ldr	r3, [pc, #668]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    10aa:	681b      	ldr	r3, [r3, #0]
    10ac:	781b      	ldrb	r3, [r3, #0]
    10ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
    10b2:	429a      	cmp	r2, r3
    10b4:	d3ce      	bcc.n	1054 <HwIoAb_Buttons_MainFunction+0x18>
            }
        }
    }

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    10b6:	2300      	movs	r3, #0
    10b8:	f88d 3007 	strb.w	r3, [sp, #7]
    10bc:	e132      	b.n	1324 <__BSS_SRAM_SIZE+0x204>
        
        //Defining the active value according to the active status.
        if ( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active == HWIOAB_BTN_ACTIVE_HIGH ) {  //Pull down.
    10be:	4ba2      	ldr	r3, [pc, #648]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    10c0:	681b      	ldr	r3, [r3, #0]
    10c2:	685a      	ldr	r2, [r3, #4]
    10c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10c8:	00db      	lsls	r3, r3, #3
    10ca:	4413      	add	r3, r2
    10cc:	789b      	ldrb	r3, [r3, #2]
    10ce:	2b01      	cmp	r3, #1
    10d0:	d103      	bne.n	10da <HwIoAb_Buttons_MainFunction+0x9e>
            active = STD_HIGH;
    10d2:	2301      	movs	r3, #1
    10d4:	f88d 3006 	strb.w	r3, [sp, #6]
    10d8:	e002      	b.n	10e0 <HwIoAb_Buttons_MainFunction+0xa4>
        }

        else {  //Pull up.
            active = STD_LOW;
    10da:	2300      	movs	r3, #0
    10dc:	f88d 3006 	strb.w	r3, [sp, #6]
        }
        
        switch( ButtonsControl_Ptr->States[i] ) {
    10e0:	4b99      	ldr	r3, [pc, #612]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    10e2:	681a      	ldr	r2, [r3, #0]
    10e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10e8:	4413      	add	r3, r2
    10ea:	7a1b      	ldrb	r3, [r3, #8]
    10ec:	2b04      	cmp	r3, #4
    10ee:	f200 8109 	bhi.w	1304 <__BSS_SRAM_SIZE+0x1e4>
    10f2:	a201      	add	r2, pc, #4	; (adr r2, 10f8 <HwIoAb_Buttons_MainFunction+0xbc>)
    10f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    10f8:	0000110d 	.word	0x0000110d
    10fc:	00001157 	.word	0x00001157
    1100:	0000123f 	.word	0x0000123f
    1104:	000012b1 	.word	0x000012b1
    1108:	000011bd 	.word	0x000011bd
            case HWIOAB_BTN_STATE_IDLE :
                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    110c:	4b8e      	ldr	r3, [pc, #568]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	685a      	ldr	r2, [r3, #4]
    1112:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1116:	00db      	lsls	r3, r3, #3
    1118:	4413      	add	r3, r2
    111a:	881b      	ldrh	r3, [r3, #0]
    111c:	4618      	mov	r0, r3
    111e:	f006 f9d5 	bl	74cc <Dio_ReadChannel>
    1122:	4603      	mov	r3, r0
    1124:	461a      	mov	r2, r3
    1126:	f89d 3006 	ldrb.w	r3, [sp, #6]
    112a:	429a      	cmp	r2, r3
    112c:	f040 80ec 	bne.w	1308 <__BSS_SRAM_SIZE+0x1e8>
                    count_flags[i] = TRUE;  //Starting count.
    1130:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1134:	4a82      	ldr	r2, [pc, #520]	; (1340 <__BSS_SRAM_SIZE+0x220>)
    1136:	2101      	movs	r1, #1
    1138:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    113a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    113e:	4a81      	ldr	r2, [pc, #516]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    1140:	2100      	movs	r1, #0
    1142:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_PRESS;
    1146:	4b80      	ldr	r3, [pc, #512]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1148:	681a      	ldr	r2, [r3, #0]
    114a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    114e:	4413      	add	r3, r2
    1150:	2201      	movs	r2, #1
    1152:	721a      	strb	r2, [r3, #8]
                }
            break;
    1154:	e0d8      	b.n	1308 <__BSS_SRAM_SIZE+0x1e8>
        
            case HWIOAB_BTN_STATE_SINGLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    1156:	f89d 3007 	ldrb.w	r3, [sp, #7]
    115a:	4a7a      	ldr	r2, [pc, #488]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    115c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1160:	4b79      	ldr	r3, [pc, #484]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1162:	681b      	ldr	r3, [r3, #0]
    1164:	6859      	ldr	r1, [r3, #4]
    1166:	f89d 3007 	ldrb.w	r3, [sp, #7]
    116a:	00db      	lsls	r3, r3, #3
    116c:	440b      	add	r3, r1
    116e:	685b      	ldr	r3, [r3, #4]
    1170:	429a      	cmp	r2, r3
    1172:	d106      	bne.n	1182 <__BSS_SRAM_SIZE+0x62>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    1174:	4b74      	ldr	r3, [pc, #464]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1176:	681a      	ldr	r2, [r3, #0]
    1178:	f89d 3007 	ldrb.w	r3, [sp, #7]
    117c:	4413      	add	r3, r2
    117e:	2203      	movs	r2, #3
    1180:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    1182:	4b71      	ldr	r3, [pc, #452]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1184:	681b      	ldr	r3, [r3, #0]
    1186:	685a      	ldr	r2, [r3, #4]
    1188:	f89d 3007 	ldrb.w	r3, [sp, #7]
    118c:	00db      	lsls	r3, r3, #3
    118e:	4413      	add	r3, r2
    1190:	881b      	ldrh	r3, [r3, #0]
    1192:	4618      	mov	r0, r3
    1194:	f006 f99a 	bl	74cc <Dio_ReadChannel>
    1198:	4603      	mov	r3, r0
    119a:	461a      	mov	r2, r3
    119c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    11a0:	f083 0301 	eor.w	r3, r3, #1
    11a4:	b2db      	uxtb	r3, r3
    11a6:	429a      	cmp	r2, r3
    11a8:	f040 80b0 	bne.w	130c <__BSS_SRAM_SIZE+0x1ec>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
    11ac:	4b66      	ldr	r3, [pc, #408]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    11ae:	681a      	ldr	r2, [r3, #0]
    11b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11b4:	4413      	add	r3, r2
    11b6:	2204      	movs	r2, #4
    11b8:	721a      	strb	r2, [r3, #8]
                }
            break;
    11ba:	e0a7      	b.n	130c <__BSS_SRAM_SIZE+0x1ec>
        
            case HWIOAB_BTN_STATE_RELEASE :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) { //Single click
    11bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11c0:	4a60      	ldr	r2, [pc, #384]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    11c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    11c6:	4b60      	ldr	r3, [pc, #384]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    11c8:	681b      	ldr	r3, [r3, #0]
    11ca:	6859      	ldr	r1, [r3, #4]
    11cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11d0:	00db      	lsls	r3, r3, #3
    11d2:	440b      	add	r3, r1
    11d4:	685b      	ldr	r3, [r3, #4]
    11d6:	429a      	cmp	r2, r3
    11d8:	d10d      	bne.n	11f6 <__BSS_SRAM_SIZE+0xd6>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
    11da:	4b5b      	ldr	r3, [pc, #364]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    11dc:	681a      	ldr	r2, [r3, #0]
    11de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11e2:	4413      	add	r3, r2
    11e4:	2201      	movs	r2, #1
    11e6:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    11e8:	4b57      	ldr	r3, [pc, #348]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    11ea:	681a      	ldr	r2, [r3, #0]
    11ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11f0:	4413      	add	r3, r2
    11f2:	2200      	movs	r2, #0
    11f4:	721a      	strb	r2, [r3, #8]
                }

                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    11f6:	4b54      	ldr	r3, [pc, #336]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    11f8:	681b      	ldr	r3, [r3, #0]
    11fa:	685a      	ldr	r2, [r3, #4]
    11fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1200:	00db      	lsls	r3, r3, #3
    1202:	4413      	add	r3, r2
    1204:	881b      	ldrh	r3, [r3, #0]
    1206:	4618      	mov	r0, r3
    1208:	f006 f960 	bl	74cc <Dio_ReadChannel>
    120c:	4603      	mov	r3, r0
    120e:	461a      	mov	r2, r3
    1210:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1214:	429a      	cmp	r2, r3
    1216:	d17b      	bne.n	1310 <__BSS_SRAM_SIZE+0x1f0>
                    count_flags[i] = TRUE;  //Starting count.
    1218:	f89d 3007 	ldrb.w	r3, [sp, #7]
    121c:	4a48      	ldr	r2, [pc, #288]	; (1340 <__BSS_SRAM_SIZE+0x220>)
    121e:	2101      	movs	r1, #1
    1220:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    1222:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1226:	4a47      	ldr	r2, [pc, #284]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    1228:	2100      	movs	r1, #0
    122a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_PRESS;
    122e:	4b46      	ldr	r3, [pc, #280]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1230:	681a      	ldr	r2, [r3, #0]
    1232:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1236:	4413      	add	r3, r2
    1238:	2202      	movs	r2, #2
    123a:	721a      	strb	r2, [r3, #8]
                }
            break;
    123c:	e068      	b.n	1310 <__BSS_SRAM_SIZE+0x1f0>
        
            case HWIOAB_BTN_STATE_DOUBLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    123e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1242:	4a40      	ldr	r2, [pc, #256]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    1244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1248:	4b3f      	ldr	r3, [pc, #252]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	6859      	ldr	r1, [r3, #4]
    124e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1252:	00db      	lsls	r3, r3, #3
    1254:	440b      	add	r3, r1
    1256:	685b      	ldr	r3, [r3, #4]
    1258:	429a      	cmp	r2, r3
    125a:	d106      	bne.n	126a <__BSS_SRAM_SIZE+0x14a>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    125c:	4b3a      	ldr	r3, [pc, #232]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    125e:	681a      	ldr	r2, [r3, #0]
    1260:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1264:	4413      	add	r3, r2
    1266:	2203      	movs	r2, #3
    1268:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {  //Double click.
    126a:	4b37      	ldr	r3, [pc, #220]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    126c:	681b      	ldr	r3, [r3, #0]
    126e:	685a      	ldr	r2, [r3, #4]
    1270:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1274:	00db      	lsls	r3, r3, #3
    1276:	4413      	add	r3, r2
    1278:	881b      	ldrh	r3, [r3, #0]
    127a:	4618      	mov	r0, r3
    127c:	f006 f926 	bl	74cc <Dio_ReadChannel>
    1280:	4603      	mov	r3, r0
    1282:	461a      	mov	r2, r3
    1284:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1288:	f083 0301 	eor.w	r3, r3, #1
    128c:	b2db      	uxtb	r3, r3
    128e:	429a      	cmp	r2, r3
    1290:	d140      	bne.n	1314 <__BSS_SRAM_SIZE+0x1f4>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
    1292:	4b2d      	ldr	r3, [pc, #180]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1294:	681a      	ldr	r2, [r3, #0]
    1296:	f89d 3007 	ldrb.w	r3, [sp, #7]
    129a:	4413      	add	r3, r2
    129c:	2202      	movs	r2, #2
    129e:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    12a0:	4b29      	ldr	r3, [pc, #164]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    12a2:	681a      	ldr	r2, [r3, #0]
    12a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12a8:	4413      	add	r3, r2
    12aa:	2200      	movs	r2, #0
    12ac:	721a      	strb	r2, [r3, #8]
                }
            break;
    12ae:	e031      	b.n	1314 <__BSS_SRAM_SIZE+0x1f4>
        
            case HWIOAB_BTN_STATE_HOLD_PRESS :  //Hold click.
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
    12b0:	4b25      	ldr	r3, [pc, #148]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    12b2:	681a      	ldr	r2, [r3, #0]
    12b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12b8:	4413      	add	r3, r2
    12ba:	2203      	movs	r2, #3
    12bc:	72da      	strb	r2, [r3, #11]
                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    12be:	4b22      	ldr	r3, [pc, #136]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    12c0:	681b      	ldr	r3, [r3, #0]
    12c2:	685a      	ldr	r2, [r3, #4]
    12c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12c8:	00db      	lsls	r3, r3, #3
    12ca:	4413      	add	r3, r2
    12cc:	881b      	ldrh	r3, [r3, #0]
    12ce:	4618      	mov	r0, r3
    12d0:	f006 f8fc 	bl	74cc <Dio_ReadChannel>
    12d4:	4603      	mov	r3, r0
    12d6:	461a      	mov	r2, r3
    12d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    12dc:	f083 0301 	eor.w	r3, r3, #1
    12e0:	b2db      	uxtb	r3, r3
    12e2:	429a      	cmp	r2, r3
    12e4:	d118      	bne.n	1318 <__BSS_SRAM_SIZE+0x1f8>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
    12e6:	4b18      	ldr	r3, [pc, #96]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    12e8:	681a      	ldr	r2, [r3, #0]
    12ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12ee:	4413      	add	r3, r2
    12f0:	2204      	movs	r2, #4
    12f2:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    12f4:	4b14      	ldr	r3, [pc, #80]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    12f6:	681a      	ldr	r2, [r3, #0]
    12f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12fc:	4413      	add	r3, r2
    12fe:	2200      	movs	r2, #0
    1300:	721a      	strb	r2, [r3, #8]
                }
            break;
    1302:	e009      	b.n	1318 <__BSS_SRAM_SIZE+0x1f8>
        
            default :
            break;
    1304:	bf00      	nop
    1306:	e008      	b.n	131a <__BSS_SRAM_SIZE+0x1fa>
            break;
    1308:	bf00      	nop
    130a:	e006      	b.n	131a <__BSS_SRAM_SIZE+0x1fa>
            break;
    130c:	bf00      	nop
    130e:	e004      	b.n	131a <__BSS_SRAM_SIZE+0x1fa>
            break;
    1310:	bf00      	nop
    1312:	e002      	b.n	131a <__BSS_SRAM_SIZE+0x1fa>
            break;
    1314:	bf00      	nop
    1316:	e000      	b.n	131a <__BSS_SRAM_SIZE+0x1fa>
            break;
    1318:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    131a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    131e:	3301      	adds	r3, #1
    1320:	f88d 3007 	strb.w	r3, [sp, #7]
    1324:	4b08      	ldr	r3, [pc, #32]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1326:	681b      	ldr	r3, [r3, #0]
    1328:	781b      	ldrb	r3, [r3, #0]
    132a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    132e:	429a      	cmp	r2, r3
    1330:	f4ff aec5 	bcc.w	10be <HwIoAb_Buttons_MainFunction+0x82>
        }
    }
}
    1334:	bf00      	nop
    1336:	bf00      	nop
    1338:	b003      	add	sp, #12
    133a:	f85d fb04 	ldr.w	pc, [sp], #4
    133e:	bf00      	nop
    1340:	1fff978c 	.word	0x1fff978c
    1344:	1fff9790 	.word	0x1fff9790
    1348:	1fff8b58 	.word	0x1fff8b58

0000134c <HwIoAb_Leds_Init>:
/**
 * @brief This function initialices the control structure for the leds.
 * 
 * @param [in] Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config *Leds_Config ) {
    134c:	b082      	sub	sp, #8
    134e:	9001      	str	r0, [sp, #4]
    //Initializing members.
    LedsControl_Ptr->Leds = HWIOAB_LEDS;
    1350:	4b05      	ldr	r3, [pc, #20]	; (1368 <HwIoAb_Leds_Init+0x1c>)
    1352:	681b      	ldr	r3, [r3, #0]
    1354:	2203      	movs	r2, #3
    1356:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    1358:	4b03      	ldr	r3, [pc, #12]	; (1368 <HwIoAb_Leds_Init+0x1c>)
    135a:	681b      	ldr	r3, [r3, #0]
    135c:	9a01      	ldr	r2, [sp, #4]
    135e:	605a      	str	r2, [r3, #4]
}
    1360:	bf00      	nop
    1362:	b002      	add	sp, #8
    1364:	4770      	bx	lr
    1366:	bf00      	nop
    1368:	1fff8b5c 	.word	0x1fff8b5c

0000136c <HwIoAb_Leds_TurnToggle>:
 * 
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) {
    136c:	b500      	push	{lr}
    136e:	b083      	sub	sp, #12
    1370:	4603      	mov	r3, r0
    1372:	f88d 3007 	strb.w	r3, [sp, #7]
    //Verifying if the ID is valid.
    if ( Led <= LedsControl_Ptr->Leds - 1 ) {   //Valid ID.
    1376:	4b0b      	ldr	r3, [pc, #44]	; (13a4 <HwIoAb_Leds_TurnToggle+0x38>)
    1378:	681b      	ldr	r3, [r3, #0]
    137a:	781b      	ldrb	r3, [r3, #0]
    137c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1380:	429a      	cmp	r2, r3
    1382:	d20a      	bcs.n	139a <HwIoAb_Leds_TurnToggle+0x2e>
        Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    1384:	4b07      	ldr	r3, [pc, #28]	; (13a4 <HwIoAb_Leds_TurnToggle+0x38>)
    1386:	681b      	ldr	r3, [r3, #0]
    1388:	685a      	ldr	r2, [r3, #4]
    138a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    138e:	009b      	lsls	r3, r3, #2
    1390:	4413      	add	r3, r2
    1392:	881b      	ldrh	r3, [r3, #0]
    1394:	4618      	mov	r0, r3
    1396:	f006 f8c4 	bl	7522 <Dio_FlipChannel>
    }
}
    139a:	bf00      	nop
    139c:	b003      	add	sp, #12
    139e:	f85d fb04 	ldr.w	pc, [sp], #4
    13a2:	bf00      	nop
    13a4:	1fff8b5c 	.word	0x1fff8b5c

000013a8 <HwIoAb_Pots_Init>:
 * 
 * It calibrates both ADC modules and initialices the raw results arrays for the conversions.
 * 
 * @param Pots_Config Pointer to configuration structure instance, in this case is not use. 
 */
void HwIoAb_Pots_Init( const HwIoAb_Pots_Config *Pots_Config ) {
    13a8:	b500      	push	{lr}
    13aa:	b085      	sub	sp, #20
    13ac:	9001      	str	r0, [sp, #4]
    //local data.
    Adc_CalibrationStatusType Calib_Status_ADC0;
    Adc_CalibrationStatusType Calib_Status_ADC1;

    //Calibrating ADC modules.
    Adc_Calibrate( Adc0, &Calib_Status_ADC0 );
    13ae:	ab03      	add	r3, sp, #12
    13b0:	4619      	mov	r1, r3
    13b2:	2000      	movs	r0, #0
    13b4:	f007 fc48 	bl	8c48 <Adc_Calibrate>
    Adc_Calibrate( Adc1, &Calib_Status_ADC1 );
    13b8:	ab02      	add	r3, sp, #8
    13ba:	4619      	mov	r1, r3
    13bc:	2001      	movs	r0, #1
    13be:	f007 fc43 	bl	8c48 <Adc_Calibrate>

    //Initializing raw results array.
    Adc_SetupResultBuffer( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS );
    13c2:	4b0b      	ldr	r3, [pc, #44]	; (13f0 <HwIoAb_Pots_Init+0x48>)
    13c4:	681b      	ldr	r3, [r3, #0]
    13c6:	3302      	adds	r3, #2
    13c8:	4619      	mov	r1, r3
    13ca:	2000      	movs	r0, #0
    13cc:	f007 f9de 	bl	878c <Adc_SetupResultBuffer>
    Adc_SetupResultBuffer( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS );
    13d0:	4b07      	ldr	r3, [pc, #28]	; (13f0 <HwIoAb_Pots_Init+0x48>)
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	3306      	adds	r3, #6
    13d6:	4619      	mov	r1, r3
    13d8:	2001      	movs	r0, #1
    13da:	f007 f9d7 	bl	878c <Adc_SetupResultBuffer>

    PotsControl_Ptr->Pots = HWIOAB_POTS;
    13de:	4b04      	ldr	r3, [pc, #16]	; (13f0 <HwIoAb_Pots_Init+0x48>)
    13e0:	681b      	ldr	r3, [r3, #0]
    13e2:	2202      	movs	r2, #2
    13e4:	701a      	strb	r2, [r3, #0]
}
    13e6:	bf00      	nop
    13e8:	b005      	add	sp, #20
    13ea:	f85d fb04 	ldr.w	pc, [sp], #4
    13ee:	bf00      	nop
    13f0:	1fff8b60 	.word	0x1fff8b60

000013f4 <HwIoAb_Pots_GetValue>:
 * @param Pots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetValue( uint16 *Pots ) {
    13f4:	b500      	push	{lr}
    13f6:	b085      	sub	sp, #20
    13f8:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    13fa:	2300      	movs	r3, #0
    13fc:	f88d 300f 	strb.w	r3, [sp, #15]

    Adc_StartGroupConversion( Adc0Group_0 );    //Triggering group conversion.
    1400:	2000      	movs	r0, #0
    1402:	f007 fa5d 	bl	88c0 <Adc_StartGroupConversion>
    while( Adc_GetGroupStatus( Adc0Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    1406:	bf00      	nop
    1408:	2000      	movs	r0, #0
    140a:	f007 fb36 	bl	8a7a <Adc_GetGroupStatus>
    140e:	4603      	mov	r3, r0
    1410:	2b01      	cmp	r3, #1
    1412:	d0f9      	beq.n	1408 <HwIoAb_Pots_GetValue+0x14>
    Adc_ReadGroup( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    1414:	4b25      	ldr	r3, [pc, #148]	; (14ac <HwIoAb_Pots_GetValue+0xb8>)
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	3302      	adds	r3, #2
    141a:	4619      	mov	r1, r3
    141c:	2000      	movs	r0, #0
    141e:	f007 fae7 	bl	89f0 <Adc_ReadGroup>

    //Calculating resistance of each Pot.
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    1422:	2300      	movs	r3, #0
    1424:	f88d 300f 	strb.w	r3, [sp, #15]
    1428:	e034      	b.n	1494 <HwIoAb_Pots_GetValue+0xa0>
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
        ( ( float ) PotsControl_Ptr->Raw_results_main[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    142a:	4b20      	ldr	r3, [pc, #128]	; (14ac <HwIoAb_Pots_GetValue+0xb8>)
    142c:	681a      	ldr	r2, [r3, #0]
    142e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1432:	005b      	lsls	r3, r3, #1
    1434:	4413      	add	r3, r2
    1436:	885b      	ldrh	r3, [r3, #2]
    1438:	ee07 3a90 	vmov	s15, r3
    143c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1440:	eddf 6a1b 	vldr	s13, [pc, #108]	; 14b0 <HwIoAb_Pots_GetValue+0xbc>
    1444:	eec7 7a26 	vdiv.f32	s15, s14, s13
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    1448:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 14b4 <HwIoAb_Pots_GetValue+0xc0>
    144c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1450:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1454:	005b      	lsls	r3, r3, #1
    1456:	9a01      	ldr	r2, [sp, #4]
    1458:	4413      	add	r3, r2
    145a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    145e:	ee17 2a90 	vmov	r2, s15
    1462:	b292      	uxth	r2, r2
    1464:	801a      	strh	r2, [r3, #0]

        if ( Pots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    1466:	f89d 300f 	ldrb.w	r3, [sp, #15]
    146a:	005b      	lsls	r3, r3, #1
    146c:	9a01      	ldr	r2, [sp, #4]
    146e:	4413      	add	r3, r2
    1470:	881b      	ldrh	r3, [r3, #0]
    1472:	f242 7210 	movw	r2, #10000	; 0x2710
    1476:	4293      	cmp	r3, r2
    1478:	d907      	bls.n	148a <HwIoAb_Pots_GetValue+0x96>
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    147a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    147e:	005b      	lsls	r3, r3, #1
    1480:	9a01      	ldr	r2, [sp, #4]
    1482:	4413      	add	r3, r2
    1484:	f242 7210 	movw	r2, #10000	; 0x2710
    1488:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    148a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    148e:	3301      	adds	r3, #1
    1490:	f88d 300f 	strb.w	r3, [sp, #15]
    1494:	4b05      	ldr	r3, [pc, #20]	; (14ac <HwIoAb_Pots_GetValue+0xb8>)
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	781b      	ldrb	r3, [r3, #0]
    149a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    149e:	429a      	cmp	r2, r3
    14a0:	d3c3      	bcc.n	142a <HwIoAb_Pots_GetValue+0x36>
        }
    }
}
    14a2:	bf00      	nop
    14a4:	bf00      	nop
    14a6:	b005      	add	sp, #20
    14a8:	f85d fb04 	ldr.w	pc, [sp], #4
    14ac:	1fff8b60 	.word	0x1fff8b60
    14b0:	45310000 	.word	0x45310000
    14b4:	461c4000 	.word	0x461c4000

000014b8 <HwIoAb_Pots_GetAltValue>:
 * @param AltPots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples.
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetAltValue( uint16 *AltPots ) {
    14b8:	b500      	push	{lr}
    14ba:	b085      	sub	sp, #20
    14bc:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    14be:	2300      	movs	r3, #0
    14c0:	f88d 300f 	strb.w	r3, [sp, #15]

    Adc_StartGroupConversion( Adc1Group_0 );    //Triggering group conversion.
    14c4:	2001      	movs	r0, #1
    14c6:	f007 f9fb 	bl	88c0 <Adc_StartGroupConversion>
    while( Adc_GetGroupStatus( Adc1Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    14ca:	bf00      	nop
    14cc:	2001      	movs	r0, #1
    14ce:	f007 fad4 	bl	8a7a <Adc_GetGroupStatus>
    14d2:	4603      	mov	r3, r0
    14d4:	2b01      	cmp	r3, #1
    14d6:	d0f9      	beq.n	14cc <HwIoAb_Pots_GetAltValue+0x14>
    Adc_ReadGroup( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    14d8:	4b25      	ldr	r3, [pc, #148]	; (1570 <HwIoAb_Pots_GetAltValue+0xb8>)
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	3306      	adds	r3, #6
    14de:	4619      	mov	r1, r3
    14e0:	2001      	movs	r0, #1
    14e2:	f007 fa85 	bl	89f0 <Adc_ReadGroup>

    //Calculating resistance of each Pot.
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    14e6:	2300      	movs	r3, #0
    14e8:	f88d 300f 	strb.w	r3, [sp, #15]
    14ec:	e034      	b.n	1558 <HwIoAb_Pots_GetAltValue+0xa0>
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
        ( ( float ) PotsControl_Ptr->Raw_results_alter[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    14ee:	4b20      	ldr	r3, [pc, #128]	; (1570 <HwIoAb_Pots_GetAltValue+0xb8>)
    14f0:	681a      	ldr	r2, [r3, #0]
    14f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14f6:	005b      	lsls	r3, r3, #1
    14f8:	4413      	add	r3, r2
    14fa:	88db      	ldrh	r3, [r3, #6]
    14fc:	ee07 3a90 	vmov	s15, r3
    1500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1504:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1574 <HwIoAb_Pots_GetAltValue+0xbc>
    1508:	eec7 7a26 	vdiv.f32	s15, s14, s13
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
    150c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 1578 <HwIoAb_Pots_GetAltValue+0xc0>
    1510:	ee67 7a87 	vmul.f32	s15, s15, s14
    1514:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1518:	005b      	lsls	r3, r3, #1
    151a:	9a01      	ldr	r2, [sp, #4]
    151c:	4413      	add	r3, r2
    151e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1522:	ee17 2a90 	vmov	r2, s15
    1526:	b292      	uxth	r2, r2
    1528:	801a      	strh	r2, [r3, #0]

        if ( AltPots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    152a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    152e:	005b      	lsls	r3, r3, #1
    1530:	9a01      	ldr	r2, [sp, #4]
    1532:	4413      	add	r3, r2
    1534:	881b      	ldrh	r3, [r3, #0]
    1536:	f242 7210 	movw	r2, #10000	; 0x2710
    153a:	4293      	cmp	r3, r2
    153c:	d907      	bls.n	154e <HwIoAb_Pots_GetAltValue+0x96>
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    153e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1542:	005b      	lsls	r3, r3, #1
    1544:	9a01      	ldr	r2, [sp, #4]
    1546:	4413      	add	r3, r2
    1548:	f242 7210 	movw	r2, #10000	; 0x2710
    154c:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    154e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1552:	3301      	adds	r3, #1
    1554:	f88d 300f 	strb.w	r3, [sp, #15]
    1558:	4b05      	ldr	r3, [pc, #20]	; (1570 <HwIoAb_Pots_GetAltValue+0xb8>)
    155a:	681b      	ldr	r3, [r3, #0]
    155c:	781b      	ldrb	r3, [r3, #0]
    155e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1562:	429a      	cmp	r2, r3
    1564:	d3c3      	bcc.n	14ee <HwIoAb_Pots_GetAltValue+0x36>
        }
    }
    1566:	bf00      	nop
    1568:	bf00      	nop
    156a:	b005      	add	sp, #20
    156c:	f85d fb04 	ldr.w	pc, [sp], #4
    1570:	1fff8b60 	.word	0x1fff8b60
    1574:	45310000 	.word	0x45310000
    1578:	461c4000 	.word	0x461c4000

0000157c <HwIoAb_Buzzer_Init>:
 * It does the configurations neccesary for using the buzzer.
 * In this case no configurations are needeed.
 * 
 * @param Buzzer_Config Pointer to config structure instance, in this case is not use.
 */
void HwIoAb_Buzzer_Init( const HwIoAb_Buzzer_Config *Buzzer_Config ) {
    157c:	b082      	sub	sp, #8
    157e:	9001      	str	r0, [sp, #4]

}
    1580:	bf00      	nop
    1582:	b002      	add	sp, #8
    1584:	4770      	bx	lr

00001586 <HwIoAb_Buzzer_Beep>:
/**
 * @brief This function beeps the buzzer according to the tone given.
 * 
 * @param Tone Tone of interest.
 */
void HwIoAb_Buzzer_Beep( uint8 Tone ) {
    1586:	b500      	push	{lr}
    1588:	b083      	sub	sp, #12
    158a:	4603      	mov	r3, r0
    158c:	f88d 3007 	strb.w	r3, [sp, #7]
    switch ( Tone ) {
    1590:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1594:	2b02      	cmp	r3, #2
    1596:	d016      	beq.n	15c6 <HwIoAb_Buzzer_Beep+0x40>
    1598:	2b02      	cmp	r3, #2
    159a:	dc1c      	bgt.n	15d6 <HwIoAb_Buzzer_Beep+0x50>
    159c:	2b00      	cmp	r3, #0
    159e:	d002      	beq.n	15a6 <HwIoAb_Buzzer_Beep+0x20>
    15a0:	2b01      	cmp	r3, #1
    15a2:	d008      	beq.n	15b6 <HwIoAb_Buzzer_Beep+0x30>
        break;
        case HWIOAB_BUZZER_TONE_3:  //Setting frequency to 5Khz and 25% duty cycle.
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_25_DUTY_CYCLE );
        break;
        default:    //Invalid tone.
        break;
    15a4:	e017      	b.n	15d6 <HwIoAb_Buzzer_Beep+0x50>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_1, HWIOAB_BUZZER_25_DUTY_CYCLE );
    15a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    15aa:	f241 41d5 	movw	r1, #5333	; 0x14d5
    15ae:	2000      	movs	r0, #0
    15b0:	f00d fb38 	bl	ec24 <Pwm_SetPeriodAndDuty>
        break;
    15b4:	e010      	b.n	15d8 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_2, HWIOAB_BUZZER_25_DUTY_CYCLE );
    15b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    15ba:	f640 216a 	movw	r1, #2666	; 0xa6a
    15be:	2000      	movs	r0, #0
    15c0:	f00d fb30 	bl	ec24 <Pwm_SetPeriodAndDuty>
        break;
    15c4:	e008      	b.n	15d8 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_25_DUTY_CYCLE );
    15c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    15ca:	f44f 61c8 	mov.w	r1, #1600	; 0x640
    15ce:	2000      	movs	r0, #0
    15d0:	f00d fb28 	bl	ec24 <Pwm_SetPeriodAndDuty>
        break;
    15d4:	e000      	b.n	15d8 <HwIoAb_Buzzer_Beep+0x52>
        break;
    15d6:	bf00      	nop
    }
}
    15d8:	bf00      	nop
    15da:	b003      	add	sp, #12
    15dc:	f85d fb04 	ldr.w	pc, [sp], #4

000015e0 <HwIoAb_Buzzer_Stop>:

/**
 * @brief This function stops the beep of the buzzer.
 * 
 */
void HwIoAb_Buzzer_Stop( void ) {
    15e0:	b508      	push	{r3, lr}
    Pwm_SetOutputToIdle( HWIOAB_BUZZER_CH );    //Stopping buzzer.
    15e2:	2000      	movs	r0, #0
    15e4:	f00d fb54 	bl	ec90 <Pwm_SetOutputToIdle>
}
    15e8:	bf00      	nop
    15ea:	bd08      	pop	{r3, pc}

000015ec <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    15ec:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    15ee:	2300      	movs	r3, #0
    15f0:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    15f2:	2300      	movs	r3, #0
    15f4:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    15f6:	2300      	movs	r3, #0
    15f8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    15fa:	2300      	movs	r3, #0
    15fc:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    15fe:	4b44      	ldr	r3, [pc, #272]	; (1710 <init_data_bss+0x124>)
    1600:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    1602:	4b44      	ldr	r3, [pc, #272]	; (1714 <init_data_bss+0x128>)
    1604:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    1606:	9b05      	ldr	r3, [sp, #20]
    1608:	681b      	ldr	r3, [r3, #0]
    160a:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    160c:	9b05      	ldr	r3, [sp, #20]
    160e:	3304      	adds	r3, #4
    1610:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    1612:	9b05      	ldr	r3, [sp, #20]
    1614:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    1616:	2300      	movs	r3, #0
    1618:	9309      	str	r3, [sp, #36]	; 0x24
    161a:	e03d      	b.n	1698 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    161c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    161e:	4613      	mov	r3, r2
    1620:	005b      	lsls	r3, r3, #1
    1622:	4413      	add	r3, r2
    1624:	009b      	lsls	r3, r3, #2
    1626:	461a      	mov	r2, r3
    1628:	9b03      	ldr	r3, [sp, #12]
    162a:	4413      	add	r3, r2
    162c:	685b      	ldr	r3, [r3, #4]
    162e:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    1630:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1632:	4613      	mov	r3, r2
    1634:	005b      	lsls	r3, r3, #1
    1636:	4413      	add	r3, r2
    1638:	009b      	lsls	r3, r3, #2
    163a:	461a      	mov	r2, r3
    163c:	9b03      	ldr	r3, [sp, #12]
    163e:	4413      	add	r3, r2
    1640:	681b      	ldr	r3, [r3, #0]
    1642:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    1644:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1646:	4613      	mov	r3, r2
    1648:	005b      	lsls	r3, r3, #1
    164a:	4413      	add	r3, r2
    164c:	009b      	lsls	r3, r3, #2
    164e:	461a      	mov	r2, r3
    1650:	9b03      	ldr	r3, [sp, #12]
    1652:	4413      	add	r3, r2
    1654:	689b      	ldr	r3, [r3, #8]
    1656:	4619      	mov	r1, r3
    1658:	9a09      	ldr	r2, [sp, #36]	; 0x24
    165a:	4613      	mov	r3, r2
    165c:	005b      	lsls	r3, r3, #1
    165e:	4413      	add	r3, r2
    1660:	009b      	lsls	r3, r3, #2
    1662:	461a      	mov	r2, r3
    1664:	9b03      	ldr	r3, [sp, #12]
    1666:	4413      	add	r3, r2
    1668:	685b      	ldr	r3, [r3, #4]
    166a:	1acb      	subs	r3, r1, r3
    166c:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    166e:	2300      	movs	r3, #0
    1670:	9308      	str	r3, [sp, #32]
    1672:	e00a      	b.n	168a <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1674:	9a00      	ldr	r2, [sp, #0]
    1676:	9b08      	ldr	r3, [sp, #32]
    1678:	441a      	add	r2, r3
    167a:	9901      	ldr	r1, [sp, #4]
    167c:	9b08      	ldr	r3, [sp, #32]
    167e:	440b      	add	r3, r1
    1680:	7812      	ldrb	r2, [r2, #0]
    1682:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1684:	9b08      	ldr	r3, [sp, #32]
    1686:	3301      	adds	r3, #1
    1688:	9308      	str	r3, [sp, #32]
    168a:	9a08      	ldr	r2, [sp, #32]
    168c:	9b06      	ldr	r3, [sp, #24]
    168e:	429a      	cmp	r2, r3
    1690:	d3f0      	bcc.n	1674 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    1692:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1694:	3301      	adds	r3, #1
    1696:	9309      	str	r3, [sp, #36]	; 0x24
    1698:	9a09      	ldr	r2, [sp, #36]	; 0x24
    169a:	9b07      	ldr	r3, [sp, #28]
    169c:	429a      	cmp	r2, r3
    169e:	d3bd      	bcc.n	161c <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    16a0:	9b04      	ldr	r3, [sp, #16]
    16a2:	681b      	ldr	r3, [r3, #0]
    16a4:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    16a6:	9b04      	ldr	r3, [sp, #16]
    16a8:	3304      	adds	r3, #4
    16aa:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    16ac:	9b04      	ldr	r3, [sp, #16]
    16ae:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    16b0:	2300      	movs	r3, #0
    16b2:	9309      	str	r3, [sp, #36]	; 0x24
    16b4:	e024      	b.n	1700 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    16b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16b8:	00db      	lsls	r3, r3, #3
    16ba:	9a02      	ldr	r2, [sp, #8]
    16bc:	4413      	add	r3, r2
    16be:	681b      	ldr	r3, [r3, #0]
    16c0:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    16c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16c4:	00db      	lsls	r3, r3, #3
    16c6:	9a02      	ldr	r2, [sp, #8]
    16c8:	4413      	add	r3, r2
    16ca:	685b      	ldr	r3, [r3, #4]
    16cc:	4619      	mov	r1, r3
    16ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16d0:	00db      	lsls	r3, r3, #3
    16d2:	9a02      	ldr	r2, [sp, #8]
    16d4:	4413      	add	r3, r2
    16d6:	681b      	ldr	r3, [r3, #0]
    16d8:	1acb      	subs	r3, r1, r3
    16da:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    16dc:	2300      	movs	r3, #0
    16de:	9308      	str	r3, [sp, #32]
    16e0:	e007      	b.n	16f2 <init_data_bss+0x106>
        {
            ram[j] = 0U;
    16e2:	9a01      	ldr	r2, [sp, #4]
    16e4:	9b08      	ldr	r3, [sp, #32]
    16e6:	4413      	add	r3, r2
    16e8:	2200      	movs	r2, #0
    16ea:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    16ec:	9b08      	ldr	r3, [sp, #32]
    16ee:	3301      	adds	r3, #1
    16f0:	9308      	str	r3, [sp, #32]
    16f2:	9a08      	ldr	r2, [sp, #32]
    16f4:	9b06      	ldr	r3, [sp, #24]
    16f6:	429a      	cmp	r2, r3
    16f8:	d3f3      	bcc.n	16e2 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    16fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16fc:	3301      	adds	r3, #1
    16fe:	9309      	str	r3, [sp, #36]	; 0x24
    1700:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1702:	9b07      	ldr	r3, [sp, #28]
    1704:	429a      	cmp	r2, r3
    1706:	d3d6      	bcc.n	16b6 <init_data_bss+0xca>
        }
    }
}
    1708:	bf00      	nop
    170a:	bf00      	nop
    170c:	b00a      	add	sp, #40	; 0x28
    170e:	4770      	bx	lr
    1710:	00017018 	.word	0x00017018
    1714:	00017034 	.word	0x00017034

00001718 <sys_m4_cache_init>:
{
    1718:	b084      	sub	sp, #16
    171a:	4603      	mov	r3, r0
    171c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1720:	2300      	movs	r3, #0
    1722:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    1726:	f89d 3007 	ldrb.w	r3, [sp, #7]
    172a:	2b00      	cmp	r3, #0
    172c:	d118      	bne.n	1760 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    172e:	4b10      	ldr	r3, [pc, #64]	; (1770 <sys_m4_cache_init+0x58>)
    1730:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1734:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    1736:	4b0e      	ldr	r3, [pc, #56]	; (1770 <sys_m4_cache_init+0x58>)
    1738:	681b      	ldr	r3, [r3, #0]
    173a:	4a0d      	ldr	r2, [pc, #52]	; (1770 <sys_m4_cache_init+0x58>)
    173c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1740:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    1742:	bf00      	nop
    1744:	4b0a      	ldr	r3, [pc, #40]	; (1770 <sys_m4_cache_init+0x58>)
    1746:	681b      	ldr	r3, [r3, #0]
    1748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    174c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1750:	d0f8      	beq.n	1744 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    1752:	4b07      	ldr	r3, [pc, #28]	; (1770 <sys_m4_cache_init+0x58>)
    1754:	681b      	ldr	r3, [r3, #0]
    1756:	4a06      	ldr	r2, [pc, #24]	; (1770 <sys_m4_cache_init+0x58>)
    1758:	f043 0301 	orr.w	r3, r3, #1
    175c:	6013      	str	r3, [r2, #0]
    175e:	e002      	b.n	1766 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    1760:	2301      	movs	r3, #1
    1762:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    1766:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    176a:	4618      	mov	r0, r3
    176c:	b004      	add	sp, #16
    176e:	4770      	bx	lr
    1770:	e0082000 	.word	0xe0082000

00001774 <startup_go_to_user_mode>:
}
    1774:	bf00      	nop
    1776:	4770      	bx	lr

00001778 <Sys_GetCoreID>:
    return 0U;
    1778:	2300      	movs	r3, #0
}
    177a:	4618      	mov	r0, r3
    177c:	4770      	bx	lr

0000177e <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    177e:	e7fe      	b.n	177e <HardFault_Handler>

00001780 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    1780:	e7fe      	b.n	1780 <MemManage_Handler>

00001782 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    1782:	e7fe      	b.n	1782 <BusFault_Handler>

00001784 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1784:	e7fe      	b.n	1784 <UsageFault_Handler>

00001786 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    1786:	e7fe      	b.n	1786 <SVC_Handler>

00001788 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    1788:	e7fe      	b.n	1788 <DebugMon_Handler>

0000178a <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    178a:	e7fe      	b.n	178a <PendSV_Handler>

0000178c <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    178c:	e7fe      	b.n	178c <SysTick_Handler>

0000178e <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    178e:	e7fe      	b.n	178e <undefined_handler>

00001790 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    1790:	b500      	push	{lr}
    1792:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    1794:	4b26      	ldr	r3, [pc, #152]	; (1830 <_DoInit+0xa0>)
    1796:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    1798:	22a8      	movs	r2, #168	; 0xa8
    179a:	2100      	movs	r1, #0
    179c:	9800      	ldr	r0, [sp, #0]
    179e:	f000 fd5b 	bl	2258 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    17a2:	9b00      	ldr	r3, [sp, #0]
    17a4:	2203      	movs	r2, #3
    17a6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    17a8:	9b00      	ldr	r3, [sp, #0]
    17aa:	2203      	movs	r2, #3
    17ac:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    17ae:	9b00      	ldr	r3, [sp, #0]
    17b0:	4a20      	ldr	r2, [pc, #128]	; (1834 <_DoInit+0xa4>)
    17b2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    17b4:	9b00      	ldr	r3, [sp, #0]
    17b6:	4a20      	ldr	r2, [pc, #128]	; (1838 <_DoInit+0xa8>)
    17b8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    17ba:	9b00      	ldr	r3, [sp, #0]
    17bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    17c0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    17c2:	9b00      	ldr	r3, [sp, #0]
    17c4:	2200      	movs	r2, #0
    17c6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    17c8:	9b00      	ldr	r3, [sp, #0]
    17ca:	2200      	movs	r2, #0
    17cc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    17ce:	9b00      	ldr	r3, [sp, #0]
    17d0:	2200      	movs	r2, #0
    17d2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    17d4:	9b00      	ldr	r3, [sp, #0]
    17d6:	4a17      	ldr	r2, [pc, #92]	; (1834 <_DoInit+0xa4>)
    17d8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    17da:	9b00      	ldr	r3, [sp, #0]
    17dc:	4a17      	ldr	r2, [pc, #92]	; (183c <_DoInit+0xac>)
    17de:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    17e0:	9b00      	ldr	r3, [sp, #0]
    17e2:	2210      	movs	r2, #16
    17e4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    17e6:	9b00      	ldr	r3, [sp, #0]
    17e8:	2200      	movs	r2, #0
    17ea:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    17ec:	9b00      	ldr	r3, [sp, #0]
    17ee:	2200      	movs	r2, #0
    17f0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    17f2:	9b00      	ldr	r3, [sp, #0]
    17f4:	2200      	movs	r2, #0
    17f6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    17f8:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    17fc:	2300      	movs	r3, #0
    17fe:	9301      	str	r3, [sp, #4]
    1800:	e00c      	b.n	181c <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    1802:	9b01      	ldr	r3, [sp, #4]
    1804:	f1c3 030f 	rsb	r3, r3, #15
    1808:	4a0d      	ldr	r2, [pc, #52]	; (1840 <_DoInit+0xb0>)
    180a:	5cd1      	ldrb	r1, [r2, r3]
    180c:	9a00      	ldr	r2, [sp, #0]
    180e:	9b01      	ldr	r3, [sp, #4]
    1810:	4413      	add	r3, r2
    1812:	460a      	mov	r2, r1
    1814:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1816:	9b01      	ldr	r3, [sp, #4]
    1818:	3301      	adds	r3, #1
    181a:	9301      	str	r3, [sp, #4]
    181c:	9b01      	ldr	r3, [sp, #4]
    181e:	2b0f      	cmp	r3, #15
    1820:	d9ef      	bls.n	1802 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1822:	f3bf 8f5f 	dmb	sy
}
    1826:	bf00      	nop
    1828:	b003      	add	sp, #12
    182a:	f85d fb04 	ldr.w	pc, [sp], #4
    182e:	bf00      	nop
    1830:	1fff97cc 	.word	0x1fff97cc
    1834:	00015cb8 	.word	0x00015cb8
    1838:	1fff9874 	.word	0x1fff9874
    183c:	1fff9c74 	.word	0x1fff9c74
    1840:	00016ff4 	.word	0x00016ff4

00001844 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1844:	b500      	push	{lr}
    1846:	b08b      	sub	sp, #44	; 0x2c
    1848:	9003      	str	r0, [sp, #12]
    184a:	9102      	str	r1, [sp, #8]
    184c:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    184e:	2300      	movs	r3, #0
    1850:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    1852:	9b03      	ldr	r3, [sp, #12]
    1854:	68db      	ldr	r3, [r3, #12]
    1856:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1858:	9b03      	ldr	r3, [sp, #12]
    185a:	691b      	ldr	r3, [r3, #16]
    185c:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    185e:	9a06      	ldr	r2, [sp, #24]
    1860:	9b07      	ldr	r3, [sp, #28]
    1862:	429a      	cmp	r2, r3
    1864:	d905      	bls.n	1872 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    1866:	9a06      	ldr	r2, [sp, #24]
    1868:	9b07      	ldr	r3, [sp, #28]
    186a:	1ad3      	subs	r3, r2, r3
    186c:	3b01      	subs	r3, #1
    186e:	9309      	str	r3, [sp, #36]	; 0x24
    1870:	e007      	b.n	1882 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1872:	9b03      	ldr	r3, [sp, #12]
    1874:	689a      	ldr	r2, [r3, #8]
    1876:	9906      	ldr	r1, [sp, #24]
    1878:	9b07      	ldr	r3, [sp, #28]
    187a:	1acb      	subs	r3, r1, r3
    187c:	4413      	add	r3, r2
    187e:	3b01      	subs	r3, #1
    1880:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    1882:	9b03      	ldr	r3, [sp, #12]
    1884:	689a      	ldr	r2, [r3, #8]
    1886:	9b07      	ldr	r3, [sp, #28]
    1888:	1ad3      	subs	r3, r2, r3
    188a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    188c:	4293      	cmp	r3, r2
    188e:	bf28      	it	cs
    1890:	4613      	movcs	r3, r2
    1892:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1894:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1896:	9b01      	ldr	r3, [sp, #4]
    1898:	4293      	cmp	r3, r2
    189a:	bf28      	it	cs
    189c:	4613      	movcs	r3, r2
    189e:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    18a0:	9b03      	ldr	r3, [sp, #12]
    18a2:	685a      	ldr	r2, [r3, #4]
    18a4:	9b07      	ldr	r3, [sp, #28]
    18a6:	4413      	add	r3, r2
    18a8:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    18aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    18ac:	9902      	ldr	r1, [sp, #8]
    18ae:	9805      	ldr	r0, [sp, #20]
    18b0:	f000 fcc4 	bl	223c <memcpy>
    NumBytesWritten += NumBytesToWrite;
    18b4:	9a08      	ldr	r2, [sp, #32]
    18b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18b8:	4413      	add	r3, r2
    18ba:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    18bc:	9a02      	ldr	r2, [sp, #8]
    18be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18c0:	4413      	add	r3, r2
    18c2:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    18c4:	9a01      	ldr	r2, [sp, #4]
    18c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18c8:	1ad3      	subs	r3, r2, r3
    18ca:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    18cc:	9a07      	ldr	r2, [sp, #28]
    18ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18d0:	4413      	add	r3, r2
    18d2:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    18d4:	9b03      	ldr	r3, [sp, #12]
    18d6:	689b      	ldr	r3, [r3, #8]
    18d8:	9a07      	ldr	r2, [sp, #28]
    18da:	429a      	cmp	r2, r3
    18dc:	d101      	bne.n	18e2 <_WriteBlocking+0x9e>
      WrOff = 0u;
    18de:	2300      	movs	r3, #0
    18e0:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    18e2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    18e6:	9b03      	ldr	r3, [sp, #12]
    18e8:	9a07      	ldr	r2, [sp, #28]
    18ea:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    18ec:	9b01      	ldr	r3, [sp, #4]
    18ee:	2b00      	cmp	r3, #0
    18f0:	d1b2      	bne.n	1858 <_WriteBlocking+0x14>
  return NumBytesWritten;
    18f2:	9b08      	ldr	r3, [sp, #32]
}
    18f4:	4618      	mov	r0, r3
    18f6:	b00b      	add	sp, #44	; 0x2c
    18f8:	f85d fb04 	ldr.w	pc, [sp], #4

000018fc <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    18fc:	b500      	push	{lr}
    18fe:	b089      	sub	sp, #36	; 0x24
    1900:	9003      	str	r0, [sp, #12]
    1902:	9102      	str	r1, [sp, #8]
    1904:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    1906:	9b03      	ldr	r3, [sp, #12]
    1908:	68db      	ldr	r3, [r3, #12]
    190a:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    190c:	9b03      	ldr	r3, [sp, #12]
    190e:	689a      	ldr	r2, [r3, #8]
    1910:	9b07      	ldr	r3, [sp, #28]
    1912:	1ad3      	subs	r3, r2, r3
    1914:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    1916:	9a06      	ldr	r2, [sp, #24]
    1918:	9b01      	ldr	r3, [sp, #4]
    191a:	429a      	cmp	r2, r3
    191c:	d911      	bls.n	1942 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    191e:	9b03      	ldr	r3, [sp, #12]
    1920:	685a      	ldr	r2, [r3, #4]
    1922:	9b07      	ldr	r3, [sp, #28]
    1924:	4413      	add	r3, r2
    1926:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    1928:	9a01      	ldr	r2, [sp, #4]
    192a:	9902      	ldr	r1, [sp, #8]
    192c:	9804      	ldr	r0, [sp, #16]
    192e:	f000 fc85 	bl	223c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1932:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    1936:	9a07      	ldr	r2, [sp, #28]
    1938:	9b01      	ldr	r3, [sp, #4]
    193a:	441a      	add	r2, r3
    193c:	9b03      	ldr	r3, [sp, #12]
    193e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    1940:	e01f      	b.n	1982 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    1942:	9b06      	ldr	r3, [sp, #24]
    1944:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1946:	9b03      	ldr	r3, [sp, #12]
    1948:	685a      	ldr	r2, [r3, #4]
    194a:	9b07      	ldr	r3, [sp, #28]
    194c:	4413      	add	r3, r2
    194e:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    1950:	9a05      	ldr	r2, [sp, #20]
    1952:	9902      	ldr	r1, [sp, #8]
    1954:	9804      	ldr	r0, [sp, #16]
    1956:	f000 fc71 	bl	223c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    195a:	9a01      	ldr	r2, [sp, #4]
    195c:	9b06      	ldr	r3, [sp, #24]
    195e:	1ad3      	subs	r3, r2, r3
    1960:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    1962:	9b03      	ldr	r3, [sp, #12]
    1964:	685b      	ldr	r3, [r3, #4]
    1966:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1968:	9a02      	ldr	r2, [sp, #8]
    196a:	9b06      	ldr	r3, [sp, #24]
    196c:	4413      	add	r3, r2
    196e:	9a05      	ldr	r2, [sp, #20]
    1970:	4619      	mov	r1, r3
    1972:	9804      	ldr	r0, [sp, #16]
    1974:	f000 fc62 	bl	223c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1978:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    197c:	9b03      	ldr	r3, [sp, #12]
    197e:	9a05      	ldr	r2, [sp, #20]
    1980:	60da      	str	r2, [r3, #12]
}
    1982:	bf00      	nop
    1984:	b009      	add	sp, #36	; 0x24
    1986:	f85d fb04 	ldr.w	pc, [sp], #4

0000198a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    198a:	b086      	sub	sp, #24
    198c:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    198e:	9b01      	ldr	r3, [sp, #4]
    1990:	691b      	ldr	r3, [r3, #16]
    1992:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    1994:	9b01      	ldr	r3, [sp, #4]
    1996:	68db      	ldr	r3, [r3, #12]
    1998:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    199a:	9a04      	ldr	r2, [sp, #16]
    199c:	9b03      	ldr	r3, [sp, #12]
    199e:	429a      	cmp	r2, r3
    19a0:	d808      	bhi.n	19b4 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    19a2:	9b01      	ldr	r3, [sp, #4]
    19a4:	689a      	ldr	r2, [r3, #8]
    19a6:	9b03      	ldr	r3, [sp, #12]
    19a8:	1ad2      	subs	r2, r2, r3
    19aa:	9b04      	ldr	r3, [sp, #16]
    19ac:	4413      	add	r3, r2
    19ae:	3b01      	subs	r3, #1
    19b0:	9305      	str	r3, [sp, #20]
    19b2:	e004      	b.n	19be <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    19b4:	9a04      	ldr	r2, [sp, #16]
    19b6:	9b03      	ldr	r3, [sp, #12]
    19b8:	1ad3      	subs	r3, r2, r3
    19ba:	3b01      	subs	r3, #1
    19bc:	9305      	str	r3, [sp, #20]
  }
  return r;
    19be:	9b05      	ldr	r3, [sp, #20]
}
    19c0:	4618      	mov	r0, r3
    19c2:	b006      	add	sp, #24
    19c4:	4770      	bx	lr
	...

000019c8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    19c8:	b500      	push	{lr}
    19ca:	b089      	sub	sp, #36	; 0x24
    19cc:	9003      	str	r0, [sp, #12]
    19ce:	9102      	str	r1, [sp, #8]
    19d0:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    19d2:	9b02      	ldr	r3, [sp, #8]
    19d4:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    19d6:	9b03      	ldr	r3, [sp, #12]
    19d8:	1c5a      	adds	r2, r3, #1
    19da:	4613      	mov	r3, r2
    19dc:	005b      	lsls	r3, r3, #1
    19de:	4413      	add	r3, r2
    19e0:	00db      	lsls	r3, r3, #3
    19e2:	4a20      	ldr	r2, [pc, #128]	; (1a64 <SEGGER_RTT_WriteNoLock+0x9c>)
    19e4:	4413      	add	r3, r2
    19e6:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    19e8:	9b05      	ldr	r3, [sp, #20]
    19ea:	695b      	ldr	r3, [r3, #20]
    19ec:	2b02      	cmp	r3, #2
    19ee:	d029      	beq.n	1a44 <SEGGER_RTT_WriteNoLock+0x7c>
    19f0:	2b02      	cmp	r3, #2
    19f2:	d82e      	bhi.n	1a52 <SEGGER_RTT_WriteNoLock+0x8a>
    19f4:	2b00      	cmp	r3, #0
    19f6:	d002      	beq.n	19fe <SEGGER_RTT_WriteNoLock+0x36>
    19f8:	2b01      	cmp	r3, #1
    19fa:	d013      	beq.n	1a24 <SEGGER_RTT_WriteNoLock+0x5c>
    19fc:	e029      	b.n	1a52 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    19fe:	9805      	ldr	r0, [sp, #20]
    1a00:	f7ff ffc3 	bl	198a <_GetAvailWriteSpace>
    1a04:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    1a06:	9a04      	ldr	r2, [sp, #16]
    1a08:	9b01      	ldr	r3, [sp, #4]
    1a0a:	429a      	cmp	r2, r3
    1a0c:	d202      	bcs.n	1a14 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1a0e:	2300      	movs	r3, #0
    1a10:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    1a12:	e021      	b.n	1a58 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    1a14:	9b01      	ldr	r3, [sp, #4]
    1a16:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1a18:	9a01      	ldr	r2, [sp, #4]
    1a1a:	9906      	ldr	r1, [sp, #24]
    1a1c:	9805      	ldr	r0, [sp, #20]
    1a1e:	f7ff ff6d 	bl	18fc <_WriteNoCheck>
    break;
    1a22:	e019      	b.n	1a58 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1a24:	9805      	ldr	r0, [sp, #20]
    1a26:	f7ff ffb0 	bl	198a <_GetAvailWriteSpace>
    1a2a:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1a2c:	9a01      	ldr	r2, [sp, #4]
    1a2e:	9b04      	ldr	r3, [sp, #16]
    1a30:	4293      	cmp	r3, r2
    1a32:	bf28      	it	cs
    1a34:	4613      	movcs	r3, r2
    1a36:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    1a38:	9a07      	ldr	r2, [sp, #28]
    1a3a:	9906      	ldr	r1, [sp, #24]
    1a3c:	9805      	ldr	r0, [sp, #20]
    1a3e:	f7ff ff5d 	bl	18fc <_WriteNoCheck>
    break;
    1a42:	e009      	b.n	1a58 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1a44:	9a01      	ldr	r2, [sp, #4]
    1a46:	9906      	ldr	r1, [sp, #24]
    1a48:	9805      	ldr	r0, [sp, #20]
    1a4a:	f7ff fefb 	bl	1844 <_WriteBlocking>
    1a4e:	9007      	str	r0, [sp, #28]
    break;
    1a50:	e002      	b.n	1a58 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    1a52:	2300      	movs	r3, #0
    1a54:	9307      	str	r3, [sp, #28]
    break;
    1a56:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1a58:	9b07      	ldr	r3, [sp, #28]
}
    1a5a:	4618      	mov	r0, r3
    1a5c:	b009      	add	sp, #36	; 0x24
    1a5e:	f85d fb04 	ldr.w	pc, [sp], #4
    1a62:	bf00      	nop
    1a64:	1fff97cc 	.word	0x1fff97cc

00001a68 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1a68:	b500      	push	{lr}
    1a6a:	b089      	sub	sp, #36	; 0x24
    1a6c:	9003      	str	r0, [sp, #12]
    1a6e:	9102      	str	r1, [sp, #8]
    1a70:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    1a72:	4b0f      	ldr	r3, [pc, #60]	; (1ab0 <SEGGER_RTT_Write+0x48>)
    1a74:	9307      	str	r3, [sp, #28]
    1a76:	9b07      	ldr	r3, [sp, #28]
    1a78:	781b      	ldrb	r3, [r3, #0]
    1a7a:	b2db      	uxtb	r3, r3
    1a7c:	2b53      	cmp	r3, #83	; 0x53
    1a7e:	d001      	beq.n	1a84 <SEGGER_RTT_Write+0x1c>
    1a80:	f7ff fe86 	bl	1790 <_DoInit>
  SEGGER_RTT_LOCK();
    1a84:	f3ef 8311 	mrs	r3, BASEPRI
    1a88:	f04f 0120 	mov.w	r1, #32
    1a8c:	f381 8811 	msr	BASEPRI, r1
    1a90:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1a92:	9a01      	ldr	r2, [sp, #4]
    1a94:	9902      	ldr	r1, [sp, #8]
    1a96:	9803      	ldr	r0, [sp, #12]
    1a98:	f7ff ff96 	bl	19c8 <SEGGER_RTT_WriteNoLock>
    1a9c:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1a9e:	9b06      	ldr	r3, [sp, #24]
    1aa0:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1aa4:	9b05      	ldr	r3, [sp, #20]
}
    1aa6:	4618      	mov	r0, r3
    1aa8:	b009      	add	sp, #36	; 0x24
    1aaa:	f85d fb04 	ldr.w	pc, [sp], #4
    1aae:	bf00      	nop
    1ab0:	1fff97cc 	.word	0x1fff97cc

00001ab4 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1ab4:	b508      	push	{r3, lr}
  _DoInit();
    1ab6:	f7ff fe6b 	bl	1790 <_DoInit>
}
    1aba:	bf00      	nop
    1abc:	bd08      	pop	{r3, pc}

00001abe <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1abe:	b500      	push	{lr}
    1ac0:	b085      	sub	sp, #20
    1ac2:	9001      	str	r0, [sp, #4]
    1ac4:	460b      	mov	r3, r1
    1ac6:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1aca:	9b01      	ldr	r3, [sp, #4]
    1acc:	689b      	ldr	r3, [r3, #8]
    1ace:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1ad0:	9b03      	ldr	r3, [sp, #12]
    1ad2:	1c5a      	adds	r2, r3, #1
    1ad4:	9b01      	ldr	r3, [sp, #4]
    1ad6:	685b      	ldr	r3, [r3, #4]
    1ad8:	429a      	cmp	r2, r3
    1ada:	d80f      	bhi.n	1afc <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1adc:	9b01      	ldr	r3, [sp, #4]
    1ade:	681a      	ldr	r2, [r3, #0]
    1ae0:	9b03      	ldr	r3, [sp, #12]
    1ae2:	4413      	add	r3, r2
    1ae4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1ae8:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1aea:	9b03      	ldr	r3, [sp, #12]
    1aec:	1c5a      	adds	r2, r3, #1
    1aee:	9b01      	ldr	r3, [sp, #4]
    1af0:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    1af2:	9b01      	ldr	r3, [sp, #4]
    1af4:	68db      	ldr	r3, [r3, #12]
    1af6:	1c5a      	adds	r2, r3, #1
    1af8:	9b01      	ldr	r3, [sp, #4]
    1afa:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1afc:	9b01      	ldr	r3, [sp, #4]
    1afe:	689a      	ldr	r2, [r3, #8]
    1b00:	9b01      	ldr	r3, [sp, #4]
    1b02:	685b      	ldr	r3, [r3, #4]
    1b04:	429a      	cmp	r2, r3
    1b06:	d115      	bne.n	1b34 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1b08:	9b01      	ldr	r3, [sp, #4]
    1b0a:	6918      	ldr	r0, [r3, #16]
    1b0c:	9b01      	ldr	r3, [sp, #4]
    1b0e:	6819      	ldr	r1, [r3, #0]
    1b10:	9b01      	ldr	r3, [sp, #4]
    1b12:	689b      	ldr	r3, [r3, #8]
    1b14:	461a      	mov	r2, r3
    1b16:	f7ff ffa7 	bl	1a68 <SEGGER_RTT_Write>
    1b1a:	4602      	mov	r2, r0
    1b1c:	9b01      	ldr	r3, [sp, #4]
    1b1e:	689b      	ldr	r3, [r3, #8]
    1b20:	429a      	cmp	r2, r3
    1b22:	d004      	beq.n	1b2e <_StoreChar+0x70>
      p->ReturnValue = -1;
    1b24:	9b01      	ldr	r3, [sp, #4]
    1b26:	f04f 32ff 	mov.w	r2, #4294967295
    1b2a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1b2c:	e002      	b.n	1b34 <_StoreChar+0x76>
      p->Cnt = 0u;
    1b2e:	9b01      	ldr	r3, [sp, #4]
    1b30:	2200      	movs	r2, #0
    1b32:	609a      	str	r2, [r3, #8]
}
    1b34:	bf00      	nop
    1b36:	b005      	add	sp, #20
    1b38:	f85d fb04 	ldr.w	pc, [sp], #4

00001b3c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1b3c:	b500      	push	{lr}
    1b3e:	b08b      	sub	sp, #44	; 0x2c
    1b40:	9003      	str	r0, [sp, #12]
    1b42:	9102      	str	r1, [sp, #8]
    1b44:	9201      	str	r2, [sp, #4]
    1b46:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1b48:	9b02      	ldr	r3, [sp, #8]
    1b4a:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1b4c:	2301      	movs	r3, #1
    1b4e:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1b50:	2301      	movs	r3, #1
    1b52:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1b54:	e007      	b.n	1b66 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    1b56:	9a08      	ldr	r2, [sp, #32]
    1b58:	9b01      	ldr	r3, [sp, #4]
    1b5a:	fbb2 f3f3 	udiv	r3, r2, r3
    1b5e:	9308      	str	r3, [sp, #32]
    Width++;
    1b60:	9b07      	ldr	r3, [sp, #28]
    1b62:	3301      	adds	r3, #1
    1b64:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1b66:	9a08      	ldr	r2, [sp, #32]
    1b68:	9b01      	ldr	r3, [sp, #4]
    1b6a:	429a      	cmp	r2, r3
    1b6c:	d2f3      	bcs.n	1b56 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1b6e:	9a00      	ldr	r2, [sp, #0]
    1b70:	9b07      	ldr	r3, [sp, #28]
    1b72:	429a      	cmp	r2, r3
    1b74:	d901      	bls.n	1b7a <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1b76:	9b00      	ldr	r3, [sp, #0]
    1b78:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b7c:	f003 0301 	and.w	r3, r3, #1
    1b80:	2b00      	cmp	r3, #0
    1b82:	d128      	bne.n	1bd6 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1b86:	2b00      	cmp	r3, #0
    1b88:	d025      	beq.n	1bd6 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b8c:	f003 0302 	and.w	r3, r3, #2
    1b90:	2b00      	cmp	r3, #0
    1b92:	d006      	beq.n	1ba2 <_PrintUnsigned+0x66>
    1b94:	9b00      	ldr	r3, [sp, #0]
    1b96:	2b00      	cmp	r3, #0
    1b98:	d103      	bne.n	1ba2 <_PrintUnsigned+0x66>
        c = '0';
    1b9a:	2330      	movs	r3, #48	; 0x30
    1b9c:	f88d 301b 	strb.w	r3, [sp, #27]
    1ba0:	e002      	b.n	1ba8 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1ba2:	2320      	movs	r3, #32
    1ba4:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1ba8:	e00c      	b.n	1bc4 <_PrintUnsigned+0x88>
        FieldWidth--;
    1baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1bac:	3b01      	subs	r3, #1
    1bae:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1bb0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1bb4:	4619      	mov	r1, r3
    1bb6:	9803      	ldr	r0, [sp, #12]
    1bb8:	f7ff ff81 	bl	1abe <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1bbc:	9b03      	ldr	r3, [sp, #12]
    1bbe:	68db      	ldr	r3, [r3, #12]
    1bc0:	2b00      	cmp	r3, #0
    1bc2:	db07      	blt.n	1bd4 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d005      	beq.n	1bd6 <_PrintUnsigned+0x9a>
    1bca:	9a07      	ldr	r2, [sp, #28]
    1bcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1bce:	429a      	cmp	r2, r3
    1bd0:	d3eb      	bcc.n	1baa <_PrintUnsigned+0x6e>
    1bd2:	e000      	b.n	1bd6 <_PrintUnsigned+0x9a>
          break;
    1bd4:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1bd6:	9b03      	ldr	r3, [sp, #12]
    1bd8:	68db      	ldr	r3, [r3, #12]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	db55      	blt.n	1c8a <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1bde:	9b00      	ldr	r3, [sp, #0]
    1be0:	2b01      	cmp	r3, #1
    1be2:	d903      	bls.n	1bec <_PrintUnsigned+0xb0>
        NumDigits--;
    1be4:	9b00      	ldr	r3, [sp, #0]
    1be6:	3b01      	subs	r3, #1
    1be8:	9300      	str	r3, [sp, #0]
    1bea:	e009      	b.n	1c00 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1bec:	9a02      	ldr	r2, [sp, #8]
    1bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1bf0:	fbb2 f3f3 	udiv	r3, r2, r3
    1bf4:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1bf6:	9a05      	ldr	r2, [sp, #20]
    1bf8:	9b01      	ldr	r3, [sp, #4]
    1bfa:	429a      	cmp	r2, r3
    1bfc:	d200      	bcs.n	1c00 <_PrintUnsigned+0xc4>
          break;
    1bfe:	e005      	b.n	1c0c <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c02:	9a01      	ldr	r2, [sp, #4]
    1c04:	fb02 f303 	mul.w	r3, r2, r3
    1c08:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1c0a:	e7e8      	b.n	1bde <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1c0c:	9a02      	ldr	r2, [sp, #8]
    1c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c10:	fbb2 f3f3 	udiv	r3, r2, r3
    1c14:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1c16:	9b05      	ldr	r3, [sp, #20]
    1c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1c1a:	fb02 f303 	mul.w	r3, r2, r3
    1c1e:	9a02      	ldr	r2, [sp, #8]
    1c20:	1ad3      	subs	r3, r2, r3
    1c22:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1c24:	4a1b      	ldr	r2, [pc, #108]	; (1c94 <_PrintUnsigned+0x158>)
    1c26:	9b05      	ldr	r3, [sp, #20]
    1c28:	4413      	add	r3, r2
    1c2a:	781b      	ldrb	r3, [r3, #0]
    1c2c:	4619      	mov	r1, r3
    1c2e:	9803      	ldr	r0, [sp, #12]
    1c30:	f7ff ff45 	bl	1abe <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1c34:	9b03      	ldr	r3, [sp, #12]
    1c36:	68db      	ldr	r3, [r3, #12]
    1c38:	2b00      	cmp	r3, #0
    1c3a:	db08      	blt.n	1c4e <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1c3e:	9b01      	ldr	r3, [sp, #4]
    1c40:	fbb2 f3f3 	udiv	r3, r2, r3
    1c44:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d1df      	bne.n	1c0c <_PrintUnsigned+0xd0>
    1c4c:	e000      	b.n	1c50 <_PrintUnsigned+0x114>
        break;
    1c4e:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c52:	f003 0301 	and.w	r3, r3, #1
    1c56:	2b00      	cmp	r3, #0
    1c58:	d017      	beq.n	1c8a <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d014      	beq.n	1c8a <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c60:	e00a      	b.n	1c78 <_PrintUnsigned+0x13c>
          FieldWidth--;
    1c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c64:	3b01      	subs	r3, #1
    1c66:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1c68:	2120      	movs	r1, #32
    1c6a:	9803      	ldr	r0, [sp, #12]
    1c6c:	f7ff ff27 	bl	1abe <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1c70:	9b03      	ldr	r3, [sp, #12]
    1c72:	68db      	ldr	r3, [r3, #12]
    1c74:	2b00      	cmp	r3, #0
    1c76:	db07      	blt.n	1c88 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d005      	beq.n	1c8a <_PrintUnsigned+0x14e>
    1c7e:	9a07      	ldr	r2, [sp, #28]
    1c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c82:	429a      	cmp	r2, r3
    1c84:	d3ed      	bcc.n	1c62 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1c86:	e000      	b.n	1c8a <_PrintUnsigned+0x14e>
            break;
    1c88:	bf00      	nop
}
    1c8a:	bf00      	nop
    1c8c:	b00b      	add	sp, #44	; 0x2c
    1c8e:	f85d fb04 	ldr.w	pc, [sp], #4
    1c92:	bf00      	nop
    1c94:	00017008 	.word	0x00017008

00001c98 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1c98:	b500      	push	{lr}
    1c9a:	b089      	sub	sp, #36	; 0x24
    1c9c:	9005      	str	r0, [sp, #20]
    1c9e:	9104      	str	r1, [sp, #16]
    1ca0:	9203      	str	r2, [sp, #12]
    1ca2:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1ca4:	9b04      	ldr	r3, [sp, #16]
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	bfb8      	it	lt
    1caa:	425b      	neglt	r3, r3
    1cac:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1cae:	2301      	movs	r3, #1
    1cb0:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1cb2:	e007      	b.n	1cc4 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1cb4:	9b03      	ldr	r3, [sp, #12]
    1cb6:	9a06      	ldr	r2, [sp, #24]
    1cb8:	fb92 f3f3 	sdiv	r3, r2, r3
    1cbc:	9306      	str	r3, [sp, #24]
    Width++;
    1cbe:	9b07      	ldr	r3, [sp, #28]
    1cc0:	3301      	adds	r3, #1
    1cc2:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1cc4:	9b03      	ldr	r3, [sp, #12]
    1cc6:	9a06      	ldr	r2, [sp, #24]
    1cc8:	429a      	cmp	r2, r3
    1cca:	daf3      	bge.n	1cb4 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1ccc:	9a02      	ldr	r2, [sp, #8]
    1cce:	9b07      	ldr	r3, [sp, #28]
    1cd0:	429a      	cmp	r2, r3
    1cd2:	d901      	bls.n	1cd8 <_PrintInt+0x40>
    Width = NumDigits;
    1cd4:	9b02      	ldr	r3, [sp, #8]
    1cd6:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d00a      	beq.n	1cf4 <_PrintInt+0x5c>
    1cde:	9b04      	ldr	r3, [sp, #16]
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	db04      	blt.n	1cee <_PrintInt+0x56>
    1ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ce6:	f003 0304 	and.w	r3, r3, #4
    1cea:	2b00      	cmp	r3, #0
    1cec:	d002      	beq.n	1cf4 <_PrintInt+0x5c>
    FieldWidth--;
    1cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1cf0:	3b01      	subs	r3, #1
    1cf2:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1cf6:	f003 0302 	and.w	r3, r3, #2
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d002      	beq.n	1d04 <_PrintInt+0x6c>
    1cfe:	9b02      	ldr	r3, [sp, #8]
    1d00:	2b00      	cmp	r3, #0
    1d02:	d01c      	beq.n	1d3e <_PrintInt+0xa6>
    1d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d06:	f003 0301 	and.w	r3, r3, #1
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d117      	bne.n	1d3e <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d10:	2b00      	cmp	r3, #0
    1d12:	d014      	beq.n	1d3e <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d14:	e00a      	b.n	1d2c <_PrintInt+0x94>
        FieldWidth--;
    1d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d18:	3b01      	subs	r3, #1
    1d1a:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1d1c:	2120      	movs	r1, #32
    1d1e:	9805      	ldr	r0, [sp, #20]
    1d20:	f7ff fecd 	bl	1abe <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1d24:	9b05      	ldr	r3, [sp, #20]
    1d26:	68db      	ldr	r3, [r3, #12]
    1d28:	2b00      	cmp	r3, #0
    1d2a:	db07      	blt.n	1d3c <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d005      	beq.n	1d3e <_PrintInt+0xa6>
    1d32:	9a07      	ldr	r2, [sp, #28]
    1d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d36:	429a      	cmp	r2, r3
    1d38:	d3ed      	bcc.n	1d16 <_PrintInt+0x7e>
    1d3a:	e000      	b.n	1d3e <_PrintInt+0xa6>
          break;
    1d3c:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1d3e:	9b05      	ldr	r3, [sp, #20]
    1d40:	68db      	ldr	r3, [r3, #12]
    1d42:	2b00      	cmp	r3, #0
    1d44:	db4a      	blt.n	1ddc <_PrintInt+0x144>
    if (v < 0) {
    1d46:	9b04      	ldr	r3, [sp, #16]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	da07      	bge.n	1d5c <_PrintInt+0xc4>
      v = -v;
    1d4c:	9b04      	ldr	r3, [sp, #16]
    1d4e:	425b      	negs	r3, r3
    1d50:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1d52:	212d      	movs	r1, #45	; 0x2d
    1d54:	9805      	ldr	r0, [sp, #20]
    1d56:	f7ff feb2 	bl	1abe <_StoreChar>
    1d5a:	e008      	b.n	1d6e <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d5e:	f003 0304 	and.w	r3, r3, #4
    1d62:	2b00      	cmp	r3, #0
    1d64:	d003      	beq.n	1d6e <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1d66:	212b      	movs	r1, #43	; 0x2b
    1d68:	9805      	ldr	r0, [sp, #20]
    1d6a:	f7ff fea8 	bl	1abe <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1d6e:	9b05      	ldr	r3, [sp, #20]
    1d70:	68db      	ldr	r3, [r3, #12]
    1d72:	2b00      	cmp	r3, #0
    1d74:	db32      	blt.n	1ddc <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d78:	f003 0302 	and.w	r3, r3, #2
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d01f      	beq.n	1dc0 <_PrintInt+0x128>
    1d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d82:	f003 0301 	and.w	r3, r3, #1
    1d86:	2b00      	cmp	r3, #0
    1d88:	d11a      	bne.n	1dc0 <_PrintInt+0x128>
    1d8a:	9b02      	ldr	r3, [sp, #8]
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d117      	bne.n	1dc0 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d92:	2b00      	cmp	r3, #0
    1d94:	d014      	beq.n	1dc0 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d96:	e00a      	b.n	1dae <_PrintInt+0x116>
            FieldWidth--;
    1d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d9a:	3b01      	subs	r3, #1
    1d9c:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1d9e:	2130      	movs	r1, #48	; 0x30
    1da0:	9805      	ldr	r0, [sp, #20]
    1da2:	f7ff fe8c 	bl	1abe <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1da6:	9b05      	ldr	r3, [sp, #20]
    1da8:	68db      	ldr	r3, [r3, #12]
    1daa:	2b00      	cmp	r3, #0
    1dac:	db07      	blt.n	1dbe <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1db0:	2b00      	cmp	r3, #0
    1db2:	d005      	beq.n	1dc0 <_PrintInt+0x128>
    1db4:	9a07      	ldr	r2, [sp, #28]
    1db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1db8:	429a      	cmp	r2, r3
    1dba:	d3ed      	bcc.n	1d98 <_PrintInt+0x100>
    1dbc:	e000      	b.n	1dc0 <_PrintInt+0x128>
              break;
    1dbe:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1dc0:	9b05      	ldr	r3, [sp, #20]
    1dc2:	68db      	ldr	r3, [r3, #12]
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	db09      	blt.n	1ddc <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1dc8:	9904      	ldr	r1, [sp, #16]
    1dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dcc:	9301      	str	r3, [sp, #4]
    1dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dd0:	9300      	str	r3, [sp, #0]
    1dd2:	9b02      	ldr	r3, [sp, #8]
    1dd4:	9a03      	ldr	r2, [sp, #12]
    1dd6:	9805      	ldr	r0, [sp, #20]
    1dd8:	f7ff feb0 	bl	1b3c <_PrintUnsigned>
      }
    }
  }
}
    1ddc:	bf00      	nop
    1dde:	b009      	add	sp, #36	; 0x24
    1de0:	f85d fb04 	ldr.w	pc, [sp], #4

00001de4 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1de4:	b500      	push	{lr}
    1de6:	b0a3      	sub	sp, #140	; 0x8c
    1de8:	9005      	str	r0, [sp, #20]
    1dea:	9104      	str	r1, [sp, #16]
    1dec:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1dee:	ab06      	add	r3, sp, #24
    1df0:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1df2:	2340      	movs	r3, #64	; 0x40
    1df4:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1df6:	2300      	movs	r3, #0
    1df8:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1dfa:	9b05      	ldr	r3, [sp, #20]
    1dfc:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1dfe:	2300      	movs	r3, #0
    1e00:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1e02:	9b04      	ldr	r3, [sp, #16]
    1e04:	781b      	ldrb	r3, [r3, #0]
    1e06:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1e0a:	9b04      	ldr	r3, [sp, #16]
    1e0c:	3301      	adds	r3, #1
    1e0e:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1e10:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1e14:	2b00      	cmp	r3, #0
    1e16:	f000 819c 	beq.w	2152 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1e1a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1e1e:	2b25      	cmp	r3, #37	; 0x25
    1e20:	f040 818b 	bne.w	213a <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1e24:	2300      	movs	r3, #0
    1e26:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1e28:	2301      	movs	r3, #1
    1e2a:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1e2c:	9b04      	ldr	r3, [sp, #16]
    1e2e:	781b      	ldrb	r3, [r3, #0]
    1e30:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1e34:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1e38:	3b23      	subs	r3, #35	; 0x23
    1e3a:	2b0d      	cmp	r3, #13
    1e3c:	d83e      	bhi.n	1ebc <SEGGER_RTT_vprintf+0xd8>
    1e3e:	a201      	add	r2, pc, #4	; (adr r2, 1e44 <SEGGER_RTT_vprintf+0x60>)
    1e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1e44:	00001ead 	.word	0x00001ead
    1e48:	00001ebd 	.word	0x00001ebd
    1e4c:	00001ebd 	.word	0x00001ebd
    1e50:	00001ebd 	.word	0x00001ebd
    1e54:	00001ebd 	.word	0x00001ebd
    1e58:	00001ebd 	.word	0x00001ebd
    1e5c:	00001ebd 	.word	0x00001ebd
    1e60:	00001ebd 	.word	0x00001ebd
    1e64:	00001e9d 	.word	0x00001e9d
    1e68:	00001ebd 	.word	0x00001ebd
    1e6c:	00001e7d 	.word	0x00001e7d
    1e70:	00001ebd 	.word	0x00001ebd
    1e74:	00001ebd 	.word	0x00001ebd
    1e78:	00001e8d 	.word	0x00001e8d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1e7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1e7e:	f043 0301 	orr.w	r3, r3, #1
    1e82:	931e      	str	r3, [sp, #120]	; 0x78
    1e84:	9b04      	ldr	r3, [sp, #16]
    1e86:	3301      	adds	r3, #1
    1e88:	9304      	str	r3, [sp, #16]
    1e8a:	e01a      	b.n	1ec2 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1e8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1e8e:	f043 0302 	orr.w	r3, r3, #2
    1e92:	931e      	str	r3, [sp, #120]	; 0x78
    1e94:	9b04      	ldr	r3, [sp, #16]
    1e96:	3301      	adds	r3, #1
    1e98:	9304      	str	r3, [sp, #16]
    1e9a:	e012      	b.n	1ec2 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1e9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1e9e:	f043 0304 	orr.w	r3, r3, #4
    1ea2:	931e      	str	r3, [sp, #120]	; 0x78
    1ea4:	9b04      	ldr	r3, [sp, #16]
    1ea6:	3301      	adds	r3, #1
    1ea8:	9304      	str	r3, [sp, #16]
    1eaa:	e00a      	b.n	1ec2 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1eac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1eae:	f043 0308 	orr.w	r3, r3, #8
    1eb2:	931e      	str	r3, [sp, #120]	; 0x78
    1eb4:	9b04      	ldr	r3, [sp, #16]
    1eb6:	3301      	adds	r3, #1
    1eb8:	9304      	str	r3, [sp, #16]
    1eba:	e002      	b.n	1ec2 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1ebc:	2300      	movs	r3, #0
    1ebe:	9320      	str	r3, [sp, #128]	; 0x80
    1ec0:	bf00      	nop
        }
      } while (v);
    1ec2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d1b1      	bne.n	1e2c <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1ec8:	2300      	movs	r3, #0
    1eca:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1ecc:	9b04      	ldr	r3, [sp, #16]
    1ece:	781b      	ldrb	r3, [r3, #0]
    1ed0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1ed4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1ed8:	2b2f      	cmp	r3, #47	; 0x2f
    1eda:	d912      	bls.n	1f02 <SEGGER_RTT_vprintf+0x11e>
    1edc:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1ee0:	2b39      	cmp	r3, #57	; 0x39
    1ee2:	d80e      	bhi.n	1f02 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1ee4:	9b04      	ldr	r3, [sp, #16]
    1ee6:	3301      	adds	r3, #1
    1ee8:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1eea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1eec:	4613      	mov	r3, r2
    1eee:	009b      	lsls	r3, r3, #2
    1ef0:	4413      	add	r3, r2
    1ef2:	005b      	lsls	r3, r3, #1
    1ef4:	461a      	mov	r2, r3
    1ef6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1efa:	4413      	add	r3, r2
    1efc:	3b30      	subs	r3, #48	; 0x30
    1efe:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1f00:	e7e4      	b.n	1ecc <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1f02:	2300      	movs	r3, #0
    1f04:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1f06:	9b04      	ldr	r3, [sp, #16]
    1f08:	781b      	ldrb	r3, [r3, #0]
    1f0a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1f0e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f12:	2b2e      	cmp	r3, #46	; 0x2e
    1f14:	d11d      	bne.n	1f52 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1f16:	9b04      	ldr	r3, [sp, #16]
    1f18:	3301      	adds	r3, #1
    1f1a:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1f1c:	9b04      	ldr	r3, [sp, #16]
    1f1e:	781b      	ldrb	r3, [r3, #0]
    1f20:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1f24:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f28:	2b2f      	cmp	r3, #47	; 0x2f
    1f2a:	d912      	bls.n	1f52 <SEGGER_RTT_vprintf+0x16e>
    1f2c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f30:	2b39      	cmp	r3, #57	; 0x39
    1f32:	d80e      	bhi.n	1f52 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1f34:	9b04      	ldr	r3, [sp, #16]
    1f36:	3301      	adds	r3, #1
    1f38:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1f3a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1f3c:	4613      	mov	r3, r2
    1f3e:	009b      	lsls	r3, r3, #2
    1f40:	4413      	add	r3, r2
    1f42:	005b      	lsls	r3, r3, #1
    1f44:	461a      	mov	r2, r3
    1f46:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f4a:	4413      	add	r3, r2
    1f4c:	3b30      	subs	r3, #48	; 0x30
    1f4e:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1f50:	e7e4      	b.n	1f1c <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1f52:	9b04      	ldr	r3, [sp, #16]
    1f54:	781b      	ldrb	r3, [r3, #0]
    1f56:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1f5a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f5e:	2b6c      	cmp	r3, #108	; 0x6c
    1f60:	d003      	beq.n	1f6a <SEGGER_RTT_vprintf+0x186>
    1f62:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f66:	2b68      	cmp	r3, #104	; 0x68
    1f68:	d107      	bne.n	1f7a <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1f6a:	9b04      	ldr	r3, [sp, #16]
    1f6c:	3301      	adds	r3, #1
    1f6e:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1f70:	9b04      	ldr	r3, [sp, #16]
    1f72:	781b      	ldrb	r3, [r3, #0]
    1f74:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1f78:	e7ef      	b.n	1f5a <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1f7a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f7e:	2b25      	cmp	r3, #37	; 0x25
    1f80:	f000 80d0 	beq.w	2124 <SEGGER_RTT_vprintf+0x340>
    1f84:	2b25      	cmp	r3, #37	; 0x25
    1f86:	f2c0 80d3 	blt.w	2130 <SEGGER_RTT_vprintf+0x34c>
    1f8a:	2b78      	cmp	r3, #120	; 0x78
    1f8c:	f300 80d0 	bgt.w	2130 <SEGGER_RTT_vprintf+0x34c>
    1f90:	2b58      	cmp	r3, #88	; 0x58
    1f92:	f2c0 80cd 	blt.w	2130 <SEGGER_RTT_vprintf+0x34c>
    1f96:	3b58      	subs	r3, #88	; 0x58
    1f98:	2b20      	cmp	r3, #32
    1f9a:	f200 80c9 	bhi.w	2130 <SEGGER_RTT_vprintf+0x34c>
    1f9e:	a201      	add	r2, pc, #4	; (adr r2, 1fa4 <SEGGER_RTT_vprintf+0x1c0>)
    1fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1fa4:	00002095 	.word	0x00002095
    1fa8:	00002131 	.word	0x00002131
    1fac:	00002131 	.word	0x00002131
    1fb0:	00002131 	.word	0x00002131
    1fb4:	00002131 	.word	0x00002131
    1fb8:	00002131 	.word	0x00002131
    1fbc:	00002131 	.word	0x00002131
    1fc0:	00002131 	.word	0x00002131
    1fc4:	00002131 	.word	0x00002131
    1fc8:	00002131 	.word	0x00002131
    1fcc:	00002131 	.word	0x00002131
    1fd0:	00002029 	.word	0x00002029
    1fd4:	0000204d 	.word	0x0000204d
    1fd8:	00002131 	.word	0x00002131
    1fdc:	00002131 	.word	0x00002131
    1fe0:	00002131 	.word	0x00002131
    1fe4:	00002131 	.word	0x00002131
    1fe8:	00002131 	.word	0x00002131
    1fec:	00002131 	.word	0x00002131
    1ff0:	00002131 	.word	0x00002131
    1ff4:	00002131 	.word	0x00002131
    1ff8:	00002131 	.word	0x00002131
    1ffc:	00002131 	.word	0x00002131
    2000:	00002131 	.word	0x00002131
    2004:	00002101 	.word	0x00002101
    2008:	00002131 	.word	0x00002131
    200c:	00002131 	.word	0x00002131
    2010:	000020b9 	.word	0x000020b9
    2014:	00002131 	.word	0x00002131
    2018:	00002071 	.word	0x00002071
    201c:	00002131 	.word	0x00002131
    2020:	00002131 	.word	0x00002131
    2024:	00002095 	.word	0x00002095
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    2028:	9b03      	ldr	r3, [sp, #12]
    202a:	681b      	ldr	r3, [r3, #0]
    202c:	1d19      	adds	r1, r3, #4
    202e:	9a03      	ldr	r2, [sp, #12]
    2030:	6011      	str	r1, [r2, #0]
    2032:	681b      	ldr	r3, [r3, #0]
    2034:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    2036:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2038:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    203c:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    2040:	ab16      	add	r3, sp, #88	; 0x58
    2042:	4611      	mov	r1, r2
    2044:	4618      	mov	r0, r3
    2046:	f7ff fd3a 	bl	1abe <_StoreChar>
        break;
    204a:	e072      	b.n	2132 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    204c:	9b03      	ldr	r3, [sp, #12]
    204e:	681b      	ldr	r3, [r3, #0]
    2050:	1d19      	adds	r1, r3, #4
    2052:	9a03      	ldr	r2, [sp, #12]
    2054:	6011      	str	r1, [r2, #0]
    2056:	681b      	ldr	r3, [r3, #0]
    2058:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    205a:	a816      	add	r0, sp, #88	; 0x58
    205c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    205e:	9301      	str	r3, [sp, #4]
    2060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2062:	9300      	str	r3, [sp, #0]
    2064:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2066:	220a      	movs	r2, #10
    2068:	9920      	ldr	r1, [sp, #128]	; 0x80
    206a:	f7ff fe15 	bl	1c98 <_PrintInt>
        break;
    206e:	e060      	b.n	2132 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    2070:	9b03      	ldr	r3, [sp, #12]
    2072:	681b      	ldr	r3, [r3, #0]
    2074:	1d19      	adds	r1, r3, #4
    2076:	9a03      	ldr	r2, [sp, #12]
    2078:	6011      	str	r1, [r2, #0]
    207a:	681b      	ldr	r3, [r3, #0]
    207c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    207e:	9920      	ldr	r1, [sp, #128]	; 0x80
    2080:	a816      	add	r0, sp, #88	; 0x58
    2082:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2084:	9301      	str	r3, [sp, #4]
    2086:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2088:	9300      	str	r3, [sp, #0]
    208a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    208c:	220a      	movs	r2, #10
    208e:	f7ff fd55 	bl	1b3c <_PrintUnsigned>
        break;
    2092:	e04e      	b.n	2132 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    2094:	9b03      	ldr	r3, [sp, #12]
    2096:	681b      	ldr	r3, [r3, #0]
    2098:	1d19      	adds	r1, r3, #4
    209a:	9a03      	ldr	r2, [sp, #12]
    209c:	6011      	str	r1, [r2, #0]
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    20a2:	9920      	ldr	r1, [sp, #128]	; 0x80
    20a4:	a816      	add	r0, sp, #88	; 0x58
    20a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    20a8:	9301      	str	r3, [sp, #4]
    20aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    20ac:	9300      	str	r3, [sp, #0]
    20ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    20b0:	2210      	movs	r2, #16
    20b2:	f7ff fd43 	bl	1b3c <_PrintUnsigned>
        break;
    20b6:	e03c      	b.n	2132 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    20b8:	9b03      	ldr	r3, [sp, #12]
    20ba:	681b      	ldr	r3, [r3, #0]
    20bc:	1d19      	adds	r1, r3, #4
    20be:	9a03      	ldr	r2, [sp, #12]
    20c0:	6011      	str	r1, [r2, #0]
    20c2:	681b      	ldr	r3, [r3, #0]
    20c4:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    20c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    20c8:	2b00      	cmp	r3, #0
    20ca:	d101      	bne.n	20d0 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    20cc:	4b2c      	ldr	r3, [pc, #176]	; (2180 <SEGGER_RTT_vprintf+0x39c>)
    20ce:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    20d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    20d2:	781b      	ldrb	r3, [r3, #0]
    20d4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    20d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    20da:	3301      	adds	r3, #1
    20dc:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    20de:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    20e2:	2b00      	cmp	r3, #0
    20e4:	d00a      	beq.n	20fc <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    20e6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    20ea:	ab16      	add	r3, sp, #88	; 0x58
    20ec:	4611      	mov	r1, r2
    20ee:	4618      	mov	r0, r3
    20f0:	f7ff fce5 	bl	1abe <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    20f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    20f6:	2b00      	cmp	r3, #0
    20f8:	daea      	bge.n	20d0 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    20fa:	e01a      	b.n	2132 <SEGGER_RTT_vprintf+0x34e>
              break;
    20fc:	bf00      	nop
        break;
    20fe:	e018      	b.n	2132 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    2100:	9b03      	ldr	r3, [sp, #12]
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	1d19      	adds	r1, r3, #4
    2106:	9a03      	ldr	r2, [sp, #12]
    2108:	6011      	str	r1, [r2, #0]
    210a:	681b      	ldr	r3, [r3, #0]
    210c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    210e:	9920      	ldr	r1, [sp, #128]	; 0x80
    2110:	a816      	add	r0, sp, #88	; 0x58
    2112:	2300      	movs	r3, #0
    2114:	9301      	str	r3, [sp, #4]
    2116:	2308      	movs	r3, #8
    2118:	9300      	str	r3, [sp, #0]
    211a:	2308      	movs	r3, #8
    211c:	2210      	movs	r2, #16
    211e:	f7ff fd0d 	bl	1b3c <_PrintUnsigned>
        break;
    2122:	e006      	b.n	2132 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    2124:	ab16      	add	r3, sp, #88	; 0x58
    2126:	2125      	movs	r1, #37	; 0x25
    2128:	4618      	mov	r0, r3
    212a:	f7ff fcc8 	bl	1abe <_StoreChar>
        break;
    212e:	e000      	b.n	2132 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    2130:	bf00      	nop
      }
      sFormat++;
    2132:	9b04      	ldr	r3, [sp, #16]
    2134:	3301      	adds	r3, #1
    2136:	9304      	str	r3, [sp, #16]
    2138:	e006      	b.n	2148 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    213a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    213e:	ab16      	add	r3, sp, #88	; 0x58
    2140:	4611      	mov	r1, r2
    2142:	4618      	mov	r0, r3
    2144:	f7ff fcbb 	bl	1abe <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    2148:	9b19      	ldr	r3, [sp, #100]	; 0x64
    214a:	2b00      	cmp	r3, #0
    214c:	f6bf ae59 	bge.w	1e02 <SEGGER_RTT_vprintf+0x1e>
    2150:	e000      	b.n	2154 <SEGGER_RTT_vprintf+0x370>
      break;
    2152:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    2154:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2156:	2b00      	cmp	r3, #0
    2158:	dd0c      	ble.n	2174 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    215a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    215c:	2b00      	cmp	r3, #0
    215e:	d005      	beq.n	216c <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    2160:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2162:	ab06      	add	r3, sp, #24
    2164:	4619      	mov	r1, r3
    2166:	9805      	ldr	r0, [sp, #20]
    2168:	f7ff fc7e 	bl	1a68 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    216c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    216e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2170:	4413      	add	r3, r2
    2172:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    2174:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    2176:	4618      	mov	r0, r3
    2178:	b023      	add	sp, #140	; 0x8c
    217a:	f85d fb04 	ldr.w	pc, [sp], #4
    217e:	bf00      	nop
    2180:	00015cc4 	.word	0x00015cc4

00002184 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    2184:	b40e      	push	{r1, r2, r3}
    2186:	b500      	push	{lr}
    2188:	b084      	sub	sp, #16
    218a:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    218c:	ab06      	add	r3, sp, #24
    218e:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    2190:	ab02      	add	r3, sp, #8
    2192:	461a      	mov	r2, r3
    2194:	9905      	ldr	r1, [sp, #20]
    2196:	9801      	ldr	r0, [sp, #4]
    2198:	f7ff fe24 	bl	1de4 <SEGGER_RTT_vprintf>
    219c:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    219e:	9b03      	ldr	r3, [sp, #12]
}
    21a0:	4618      	mov	r0, r3
    21a2:	b004      	add	sp, #16
    21a4:	f85d eb04 	ldr.w	lr, [sp], #4
    21a8:	b003      	add	sp, #12
    21aa:	4770      	bx	lr

000021ac <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    21ac:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    21ae:	4805      	ldr	r0, [pc, #20]	; (21c4 <MCU_clocks+0x18>)
    21b0:	f004 f876 	bl	62a0 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    21b4:	2000      	movs	r0, #0
    21b6:	f004 f8eb 	bl	6390 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    21ba:	2000      	movs	r0, #0
    21bc:	f004 f8c4 	bl	6348 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    21c0:	bf00      	nop
    21c2:	bd08      	pop	{r3, pc}
    21c4:	00016b5c 	.word	0x00016b5c

000021c8 <EcuM_Init>:
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    21c8:	b508      	push	{r3, lr}
    MCU_clocks();
    21ca:	f7ff ffef 	bl	21ac <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    21ce:	2000      	movs	r0, #0
    21d0:	f000 fad1 	bl	2776 <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    21d4:	2000      	movs	r0, #0
    21d6:	f000 f9cb 	bl	2570 <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    21da:	480a      	ldr	r0, [pc, #40]	; (2204 <EcuM_Init+0x3c>)
    21dc:	f004 fc62 	bl	6aa4 <Port_Init>
    Adc_Init( &Adc_Config );    //Init Adc driver and configuration.
    21e0:	4809      	ldr	r0, [pc, #36]	; (2208 <EcuM_Init+0x40>)
    21e2:	f006 fa85 	bl	86f0 <Adc_Init>
    Pwm_Init( &Pwm_Config );    //Init Pwm driver and configuration.
    21e6:	4809      	ldr	r0, [pc, #36]	; (220c <EcuM_Init+0x44>)
    21e8:	f00c fbca 	bl	e980 <Pwm_Init>
    
    //Configuring interleave for PTB1 and PTB13.
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 1, PORT_MUX_ADC_INTERLEAVE );
    21ec:	2208      	movs	r2, #8
    21ee:	2101      	movs	r1, #1
    21f0:	4807      	ldr	r0, [pc, #28]	; (2210 <EcuM_Init+0x48>)
    21f2:	f004 fe2b 	bl	6e4c <Port_Ci_Port_Ip_SetMuxModeSel>
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
    21f6:	2208      	movs	r2, #8
    21f8:	210d      	movs	r1, #13
    21fa:	4805      	ldr	r0, [pc, #20]	; (2210 <EcuM_Init+0x48>)
    21fc:	f004 fe26 	bl	6e4c <Port_Ci_Port_Ip_SetMuxModeSel>
}
    2200:	bf00      	nop
    2202:	bd08      	pop	{r3, pc}
    2204:	00016f74 	.word	0x00016f74
    2208:	00016678 	.word	0x00016678
    220c:	00016fe4 	.word	0x00016fe4
    2210:	4004a000 	.word	0x4004a000

00002214 <HwIoAb_Init>:

/**
 * @brief This function initialices the hardware io abstractions.
 * 
 */
void HwIoAb_Init( void ) {
    2214:	b508      	push	{r3, lr}
    HwIoAb_Buttons_Init( ButtonsCfg );  //Buttons init.
    2216:	4807      	ldr	r0, [pc, #28]	; (2234 <HwIoAb_Init+0x20>)
    2218:	f7fe feb4 	bl	f84 <HwIoAb_Buttons_Init>
    HwIoAb_Leds_Init( LedsCfg );    //Leds init.
    221c:	4806      	ldr	r0, [pc, #24]	; (2238 <HwIoAb_Init+0x24>)
    221e:	f7ff f895 	bl	134c <HwIoAb_Leds_Init>
    HwIoAb_Pots_Init( NULL_PTR );   //Pots init.
    2222:	2000      	movs	r0, #0
    2224:	f7ff f8c0 	bl	13a8 <HwIoAb_Pots_Init>
    HwIoAb_Buzzer_Init( NULL_PTR ); //Buzzer init.
    2228:	2000      	movs	r0, #0
    222a:	f7ff f9a7 	bl	157c <HwIoAb_Buzzer_Init>
    222e:	bf00      	nop
    2230:	bd08      	pop	{r3, pc}
    2232:	bf00      	nop
    2234:	000164e8 	.word	0x000164e8
    2238:	00016500 	.word	0x00016500

0000223c <memcpy>:
    223c:	440a      	add	r2, r1
    223e:	4291      	cmp	r1, r2
    2240:	f100 33ff 	add.w	r3, r0, #4294967295
    2244:	d100      	bne.n	2248 <memcpy+0xc>
    2246:	4770      	bx	lr
    2248:	b510      	push	{r4, lr}
    224a:	f811 4b01 	ldrb.w	r4, [r1], #1
    224e:	f803 4f01 	strb.w	r4, [r3, #1]!
    2252:	4291      	cmp	r1, r2
    2254:	d1f9      	bne.n	224a <memcpy+0xe>
    2256:	bd10      	pop	{r4, pc}

00002258 <memset>:
    2258:	4402      	add	r2, r0
    225a:	4603      	mov	r3, r0
    225c:	4293      	cmp	r3, r2
    225e:	d100      	bne.n	2262 <memset+0xa>
    2260:	4770      	bx	lr
    2262:	f803 1b01 	strb.w	r1, [r3], #1
    2266:	e7f9      	b.n	225c <memset+0x4>

00002268 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    2268:	b086      	sub	sp, #24
    226a:	9003      	str	r0, [sp, #12]
    226c:	9102      	str	r1, [sp, #8]
    226e:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    2270:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2274:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    2278:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    227a:	9b01      	ldr	r3, [sp, #4]
    227c:	2b00      	cmp	r3, #0
    227e:	d007      	beq.n	2290 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    2280:	9b03      	ldr	r3, [sp, #12]
    2282:	3310      	adds	r3, #16
    2284:	009b      	lsls	r3, r3, #2
    2286:	9a05      	ldr	r2, [sp, #20]
    2288:	4413      	add	r3, r2
    228a:	681a      	ldr	r2, [r3, #0]
    228c:	9b01      	ldr	r3, [sp, #4]
    228e:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    2290:	9b03      	ldr	r3, [sp, #12]
    2292:	3310      	adds	r3, #16
    2294:	009b      	lsls	r3, r3, #2
    2296:	9a05      	ldr	r2, [sp, #20]
    2298:	4413      	add	r3, r2
    229a:	9a02      	ldr	r2, [sp, #8]
    229c:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    229e:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    22a2:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    22a6:	bf00      	nop
    22a8:	b006      	add	sp, #24
    22aa:	4770      	bx	lr

000022ac <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    22ac:	b082      	sub	sp, #8
    22ae:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    22b0:	9b01      	ldr	r3, [sp, #4]
    22b2:	f003 021f 	and.w	r2, r3, #31
    22b6:	4905      	ldr	r1, [pc, #20]	; (22cc <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    22b8:	9b01      	ldr	r3, [sp, #4]
    22ba:	095b      	lsrs	r3, r3, #5
    22bc:	2001      	movs	r0, #1
    22be:	fa00 f202 	lsl.w	r2, r0, r2
    22c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    22c6:	bf00      	nop
    22c8:	b002      	add	sp, #8
    22ca:	4770      	bx	lr
    22cc:	e000e100 	.word	0xe000e100

000022d0 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    22d0:	b082      	sub	sp, #8
    22d2:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    22d4:	9b01      	ldr	r3, [sp, #4]
    22d6:	f003 021f 	and.w	r2, r3, #31
    22da:	4906      	ldr	r1, [pc, #24]	; (22f4 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    22dc:	9b01      	ldr	r3, [sp, #4]
    22de:	095b      	lsrs	r3, r3, #5
    22e0:	2001      	movs	r0, #1
    22e2:	fa00 f202 	lsl.w	r2, r0, r2
    22e6:	3320      	adds	r3, #32
    22e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    22ec:	bf00      	nop
    22ee:	b002      	add	sp, #8
    22f0:	4770      	bx	lr
    22f2:	bf00      	nop
    22f4:	e000e100 	.word	0xe000e100

000022f8 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    22f8:	b084      	sub	sp, #16
    22fa:	9001      	str	r0, [sp, #4]
    22fc:	460b      	mov	r3, r1
    22fe:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    2302:	2304      	movs	r3, #4
    2304:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    2308:	f89d 2003 	ldrb.w	r2, [sp, #3]
    230c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2310:	fa02 f103 	lsl.w	r1, r2, r3
    2314:	4a04      	ldr	r2, [pc, #16]	; (2328 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    2316:	9b01      	ldr	r3, [sp, #4]
    2318:	b2c9      	uxtb	r1, r1
    231a:	4413      	add	r3, r2
    231c:	460a      	mov	r2, r1
    231e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    2322:	bf00      	nop
    2324:	b004      	add	sp, #16
    2326:	4770      	bx	lr
    2328:	e000e100 	.word	0xe000e100

0000232c <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    232c:	b084      	sub	sp, #16
    232e:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    2330:	2304      	movs	r3, #4
    2332:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    2336:	4a09      	ldr	r2, [pc, #36]	; (235c <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    2338:	9b01      	ldr	r3, [sp, #4]
    233a:	4413      	add	r3, r2
    233c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    2340:	b2db      	uxtb	r3, r3
    2342:	461a      	mov	r2, r3
    2344:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2348:	fa42 f303 	asr.w	r3, r2, r3
    234c:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    2350:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    2354:	4618      	mov	r0, r3
    2356:	b004      	add	sp, #16
    2358:	4770      	bx	lr
    235a:	bf00      	nop
    235c:	e000e100 	.word	0xe000e100

00002360 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    2360:	b082      	sub	sp, #8
    2362:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    2364:	9b01      	ldr	r3, [sp, #4]
    2366:	f003 021f 	and.w	r2, r3, #31
    236a:	4906      	ldr	r1, [pc, #24]	; (2384 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    236c:	9b01      	ldr	r3, [sp, #4]
    236e:	095b      	lsrs	r3, r3, #5
    2370:	2001      	movs	r0, #1
    2372:	fa00 f202 	lsl.w	r2, r0, r2
    2376:	3360      	adds	r3, #96	; 0x60
    2378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    237c:	bf00      	nop
    237e:	b002      	add	sp, #8
    2380:	4770      	bx	lr
    2382:	bf00      	nop
    2384:	e000e100 	.word	0xe000e100

00002388 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2388:	b500      	push	{lr}
    238a:	b085      	sub	sp, #20
    238c:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    238e:	2300      	movs	r3, #0
    2390:	9303      	str	r3, [sp, #12]
    2392:	e05d      	b.n	2450 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2394:	9b01      	ldr	r3, [sp, #4]
    2396:	6859      	ldr	r1, [r3, #4]
    2398:	9a03      	ldr	r2, [sp, #12]
    239a:	4613      	mov	r3, r2
    239c:	005b      	lsls	r3, r3, #1
    239e:	4413      	add	r3, r2
    23a0:	009b      	lsls	r3, r3, #2
    23a2:	440b      	add	r3, r1
    23a4:	681b      	ldr	r3, [r3, #0]
    23a6:	4618      	mov	r0, r3
    23a8:	f000 f899 	bl	24de <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    23ac:	9b01      	ldr	r3, [sp, #4]
    23ae:	6859      	ldr	r1, [r3, #4]
    23b0:	9a03      	ldr	r2, [sp, #12]
    23b2:	4613      	mov	r3, r2
    23b4:	005b      	lsls	r3, r3, #1
    23b6:	4413      	add	r3, r2
    23b8:	009b      	lsls	r3, r3, #2
    23ba:	440b      	add	r3, r1
    23bc:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    23be:	9b01      	ldr	r3, [sp, #4]
    23c0:	6859      	ldr	r1, [r3, #4]
    23c2:	9a03      	ldr	r2, [sp, #12]
    23c4:	4613      	mov	r3, r2
    23c6:	005b      	lsls	r3, r3, #1
    23c8:	4413      	add	r3, r2
    23ca:	009b      	lsls	r3, r3, #2
    23cc:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    23ce:	795b      	ldrb	r3, [r3, #5]
    23d0:	4619      	mov	r1, r3
    23d2:	f000 f869 	bl	24a8 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    23d6:	9b01      	ldr	r3, [sp, #4]
    23d8:	6859      	ldr	r1, [r3, #4]
    23da:	9a03      	ldr	r2, [sp, #12]
    23dc:	4613      	mov	r3, r2
    23de:	005b      	lsls	r3, r3, #1
    23e0:	4413      	add	r3, r2
    23e2:	009b      	lsls	r3, r3, #2
    23e4:	440b      	add	r3, r1
    23e6:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    23e8:	9b01      	ldr	r3, [sp, #4]
    23ea:	6859      	ldr	r1, [r3, #4]
    23ec:	9a03      	ldr	r2, [sp, #12]
    23ee:	4613      	mov	r3, r2
    23f0:	005b      	lsls	r3, r3, #1
    23f2:	4413      	add	r3, r2
    23f4:	009b      	lsls	r3, r3, #2
    23f6:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    23f8:	689b      	ldr	r3, [r3, #8]
    23fa:	2200      	movs	r2, #0
    23fc:	4619      	mov	r1, r3
    23fe:	f000 f831 	bl	2464 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    2402:	9b01      	ldr	r3, [sp, #4]
    2404:	6859      	ldr	r1, [r3, #4]
    2406:	9a03      	ldr	r2, [sp, #12]
    2408:	4613      	mov	r3, r2
    240a:	005b      	lsls	r3, r3, #1
    240c:	4413      	add	r3, r2
    240e:	009b      	lsls	r3, r3, #2
    2410:	440b      	add	r3, r1
    2412:	791b      	ldrb	r3, [r3, #4]
    2414:	2b00      	cmp	r3, #0
    2416:	d00c      	beq.n	2432 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2418:	9b01      	ldr	r3, [sp, #4]
    241a:	6859      	ldr	r1, [r3, #4]
    241c:	9a03      	ldr	r2, [sp, #12]
    241e:	4613      	mov	r3, r2
    2420:	005b      	lsls	r3, r3, #1
    2422:	4413      	add	r3, r2
    2424:	009b      	lsls	r3, r3, #2
    2426:	440b      	add	r3, r1
    2428:	681b      	ldr	r3, [r3, #0]
    242a:	4618      	mov	r0, r3
    242c:	f000 f828 	bl	2480 <IntCtrl_Ip_EnableIrq>
    2430:	e00b      	b.n	244a <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2432:	9b01      	ldr	r3, [sp, #4]
    2434:	6859      	ldr	r1, [r3, #4]
    2436:	9a03      	ldr	r2, [sp, #12]
    2438:	4613      	mov	r3, r2
    243a:	005b      	lsls	r3, r3, #1
    243c:	4413      	add	r3, r2
    243e:	009b      	lsls	r3, r3, #2
    2440:	440b      	add	r3, r1
    2442:	681b      	ldr	r3, [r3, #0]
    2444:	4618      	mov	r0, r3
    2446:	f000 f825 	bl	2494 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    244a:	9b03      	ldr	r3, [sp, #12]
    244c:	3301      	adds	r3, #1
    244e:	9303      	str	r3, [sp, #12]
    2450:	9b01      	ldr	r3, [sp, #4]
    2452:	681b      	ldr	r3, [r3, #0]
    2454:	9a03      	ldr	r2, [sp, #12]
    2456:	429a      	cmp	r2, r3
    2458:	d39c      	bcc.n	2394 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    245a:	2300      	movs	r3, #0
}
    245c:	4618      	mov	r0, r3
    245e:	b005      	add	sp, #20
    2460:	f85d fb04 	ldr.w	pc, [sp], #4

00002464 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    2464:	b500      	push	{lr}
    2466:	b085      	sub	sp, #20
    2468:	9003      	str	r0, [sp, #12]
    246a:	9102      	str	r1, [sp, #8]
    246c:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    246e:	9a01      	ldr	r2, [sp, #4]
    2470:	9902      	ldr	r1, [sp, #8]
    2472:	9803      	ldr	r0, [sp, #12]
    2474:	f7ff fef8 	bl	2268 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    2478:	bf00      	nop
    247a:	b005      	add	sp, #20
    247c:	f85d fb04 	ldr.w	pc, [sp], #4

00002480 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    2480:	b500      	push	{lr}
    2482:	b083      	sub	sp, #12
    2484:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    2486:	9801      	ldr	r0, [sp, #4]
    2488:	f7ff ff10 	bl	22ac <IntCtrl_Ip_EnableIrqPrivileged>
}
    248c:	bf00      	nop
    248e:	b003      	add	sp, #12
    2490:	f85d fb04 	ldr.w	pc, [sp], #4

00002494 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    2494:	b500      	push	{lr}
    2496:	b083      	sub	sp, #12
    2498:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    249a:	9801      	ldr	r0, [sp, #4]
    249c:	f7ff ff18 	bl	22d0 <IntCtrl_Ip_DisableIrqPrivileged>
}
    24a0:	bf00      	nop
    24a2:	b003      	add	sp, #12
    24a4:	f85d fb04 	ldr.w	pc, [sp], #4

000024a8 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    24a8:	b500      	push	{lr}
    24aa:	b083      	sub	sp, #12
    24ac:	9001      	str	r0, [sp, #4]
    24ae:	460b      	mov	r3, r1
    24b0:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    24b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24b8:	4619      	mov	r1, r3
    24ba:	9801      	ldr	r0, [sp, #4]
    24bc:	f7ff ff1c 	bl	22f8 <IntCtrl_Ip_SetPriorityPrivileged>
}
    24c0:	bf00      	nop
    24c2:	b003      	add	sp, #12
    24c4:	f85d fb04 	ldr.w	pc, [sp], #4

000024c8 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    24c8:	b500      	push	{lr}
    24ca:	b083      	sub	sp, #12
    24cc:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    24ce:	9801      	ldr	r0, [sp, #4]
    24d0:	f7ff ff2c 	bl	232c <IntCtrl_Ip_GetPriorityPrivileged>
    24d4:	4603      	mov	r3, r0
}
    24d6:	4618      	mov	r0, r3
    24d8:	b003      	add	sp, #12
    24da:	f85d fb04 	ldr.w	pc, [sp], #4

000024de <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    24de:	b500      	push	{lr}
    24e0:	b083      	sub	sp, #12
    24e2:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    24e4:	9801      	ldr	r0, [sp, #4]
    24e6:	f7ff ff3b 	bl	2360 <IntCtrl_Ip_ClearPendingPrivileged>
}
    24ea:	bf00      	nop
    24ec:	b003      	add	sp, #12
    24ee:	f85d fb04 	ldr.w	pc, [sp], #4
    24f2:	bf00      	nop

000024f4 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    24f4:	b500      	push	{lr}
    24f6:	b083      	sub	sp, #12
    24f8:	9001      	str	r0, [sp, #4]
    24fa:	460b      	mov	r3, r1
    24fc:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    2500:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2504:	2b00      	cmp	r3, #0
    2506:	d003      	beq.n	2510 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    2508:	9801      	ldr	r0, [sp, #4]
    250a:	f7ff ffb9 	bl	2480 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    250e:	e002      	b.n	2516 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    2510:	9801      	ldr	r0, [sp, #4]
    2512:	f7ff ffbf 	bl	2494 <IntCtrl_Ip_DisableIrq>
}
    2516:	bf00      	nop
    2518:	b003      	add	sp, #12
    251a:	f85d fb04 	ldr.w	pc, [sp], #4

0000251e <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    251e:	b500      	push	{lr}
    2520:	b083      	sub	sp, #12
    2522:	9001      	str	r0, [sp, #4]
    2524:	460b      	mov	r3, r1
    2526:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    252a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    252e:	4619      	mov	r1, r3
    2530:	9801      	ldr	r0, [sp, #4]
    2532:	f7ff ffb9 	bl	24a8 <IntCtrl_Ip_SetPriority>
}
    2536:	bf00      	nop
    2538:	b003      	add	sp, #12
    253a:	f85d fb04 	ldr.w	pc, [sp], #4

0000253e <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    253e:	b500      	push	{lr}
    2540:	b083      	sub	sp, #12
    2542:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    2544:	9801      	ldr	r0, [sp, #4]
    2546:	f7ff ffbf 	bl	24c8 <IntCtrl_Ip_GetPriority>
    254a:	4603      	mov	r3, r0
}
    254c:	4618      	mov	r0, r3
    254e:	b003      	add	sp, #12
    2550:	f85d fb04 	ldr.w	pc, [sp], #4

00002554 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    2554:	b500      	push	{lr}
    2556:	b085      	sub	sp, #20
    2558:	9003      	str	r0, [sp, #12]
    255a:	9102      	str	r1, [sp, #8]
    255c:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    255e:	9a01      	ldr	r2, [sp, #4]
    2560:	9902      	ldr	r1, [sp, #8]
    2562:	9803      	ldr	r0, [sp, #12]
    2564:	f7ff ff7e 	bl	2464 <IntCtrl_Ip_InstallHandler>
}
    2568:	bf00      	nop
    256a:	b005      	add	sp, #20
    256c:	f85d fb04 	ldr.w	pc, [sp], #4

00002570 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    2570:	b500      	push	{lr}
    2572:	b085      	sub	sp, #20
    2574:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    2576:	2300      	movs	r3, #0
    2578:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    257c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2580:	4a05      	ldr	r2, [pc, #20]	; (2598 <Platform_Init+0x28>)
    2582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2586:	681b      	ldr	r3, [r3, #0]
    2588:	4618      	mov	r0, r3
    258a:	f000 f8c7 	bl	271c <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    258e:	bf00      	nop
    2590:	b005      	add	sp, #20
    2592:	f85d fb04 	ldr.w	pc, [sp], #4
    2596:	bf00      	nop
    2598:	00016bc8 	.word	0x00016bc8

0000259c <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    259c:	b500      	push	{lr}
    259e:	b085      	sub	sp, #20
    25a0:	9001      	str	r0, [sp, #4]
    25a2:	460b      	mov	r3, r1
    25a4:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    25a8:	2300      	movs	r3, #0
    25aa:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    25ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25b2:	4619      	mov	r1, r3
    25b4:	9801      	ldr	r0, [sp, #4]
    25b6:	f7ff ff9d 	bl	24f4 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    25ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    25be:	4618      	mov	r0, r3
    25c0:	b005      	add	sp, #20
    25c2:	f85d fb04 	ldr.w	pc, [sp], #4

000025c6 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    25c6:	b500      	push	{lr}
    25c8:	b085      	sub	sp, #20
    25ca:	9001      	str	r0, [sp, #4]
    25cc:	460b      	mov	r3, r1
    25ce:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    25d2:	2300      	movs	r3, #0
    25d4:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    25d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25dc:	4619      	mov	r1, r3
    25de:	9801      	ldr	r0, [sp, #4]
    25e0:	f7ff ff9d 	bl	251e <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    25e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    25e8:	4618      	mov	r0, r3
    25ea:	b005      	add	sp, #20
    25ec:	f85d fb04 	ldr.w	pc, [sp], #4

000025f0 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    25f0:	b500      	push	{lr}
    25f2:	b085      	sub	sp, #20
    25f4:	9001      	str	r0, [sp, #4]
    25f6:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    25f8:	2300      	movs	r3, #0
    25fa:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    25fe:	9801      	ldr	r0, [sp, #4]
    2600:	f7ff ff9d 	bl	253e <Platform_Ipw_GetIrqPriority>
    2604:	4603      	mov	r3, r0
    2606:	461a      	mov	r2, r3
    2608:	9b00      	ldr	r3, [sp, #0]
    260a:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    260c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2610:	4618      	mov	r0, r3
    2612:	b005      	add	sp, #20
    2614:	f85d fb04 	ldr.w	pc, [sp], #4

00002618 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    2618:	b500      	push	{lr}
    261a:	b087      	sub	sp, #28
    261c:	9003      	str	r0, [sp, #12]
    261e:	9102      	str	r1, [sp, #8]
    2620:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2622:	2300      	movs	r3, #0
    2624:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2628:	9a01      	ldr	r2, [sp, #4]
    262a:	9902      	ldr	r1, [sp, #8]
    262c:	9803      	ldr	r0, [sp, #12]
    262e:	f7ff ff91 	bl	2554 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    2632:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2636:	4618      	mov	r0, r3
    2638:	b007      	add	sp, #28
    263a:	f85d fb04 	ldr.w	pc, [sp], #4
    263e:	bf00      	nop

00002640 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2640:	b500      	push	{lr}
    2642:	b085      	sub	sp, #20
    2644:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2646:	2300      	movs	r3, #0
    2648:	9303      	str	r3, [sp, #12]
    264a:	e05d      	b.n	2708 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    264c:	9b01      	ldr	r3, [sp, #4]
    264e:	6859      	ldr	r1, [r3, #4]
    2650:	9a03      	ldr	r2, [sp, #12]
    2652:	4613      	mov	r3, r2
    2654:	005b      	lsls	r3, r3, #1
    2656:	4413      	add	r3, r2
    2658:	009b      	lsls	r3, r3, #2
    265a:	440b      	add	r3, r1
    265c:	681b      	ldr	r3, [r3, #0]
    265e:	4618      	mov	r0, r3
    2660:	f7ff ff3d 	bl	24de <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2664:	9b01      	ldr	r3, [sp, #4]
    2666:	6859      	ldr	r1, [r3, #4]
    2668:	9a03      	ldr	r2, [sp, #12]
    266a:	4613      	mov	r3, r2
    266c:	005b      	lsls	r3, r3, #1
    266e:	4413      	add	r3, r2
    2670:	009b      	lsls	r3, r3, #2
    2672:	440b      	add	r3, r1
    2674:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    2676:	9b01      	ldr	r3, [sp, #4]
    2678:	6859      	ldr	r1, [r3, #4]
    267a:	9a03      	ldr	r2, [sp, #12]
    267c:	4613      	mov	r3, r2
    267e:	005b      	lsls	r3, r3, #1
    2680:	4413      	add	r3, r2
    2682:	009b      	lsls	r3, r3, #2
    2684:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2686:	795b      	ldrb	r3, [r3, #5]
    2688:	4619      	mov	r1, r3
    268a:	f7ff ff0d 	bl	24a8 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    268e:	9b01      	ldr	r3, [sp, #4]
    2690:	6859      	ldr	r1, [r3, #4]
    2692:	9a03      	ldr	r2, [sp, #12]
    2694:	4613      	mov	r3, r2
    2696:	005b      	lsls	r3, r3, #1
    2698:	4413      	add	r3, r2
    269a:	009b      	lsls	r3, r3, #2
    269c:	440b      	add	r3, r1
    269e:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    26a0:	9b01      	ldr	r3, [sp, #4]
    26a2:	6859      	ldr	r1, [r3, #4]
    26a4:	9a03      	ldr	r2, [sp, #12]
    26a6:	4613      	mov	r3, r2
    26a8:	005b      	lsls	r3, r3, #1
    26aa:	4413      	add	r3, r2
    26ac:	009b      	lsls	r3, r3, #2
    26ae:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    26b0:	689b      	ldr	r3, [r3, #8]
    26b2:	2200      	movs	r2, #0
    26b4:	4619      	mov	r1, r3
    26b6:	f7ff fed5 	bl	2464 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    26ba:	9b01      	ldr	r3, [sp, #4]
    26bc:	6859      	ldr	r1, [r3, #4]
    26be:	9a03      	ldr	r2, [sp, #12]
    26c0:	4613      	mov	r3, r2
    26c2:	005b      	lsls	r3, r3, #1
    26c4:	4413      	add	r3, r2
    26c6:	009b      	lsls	r3, r3, #2
    26c8:	440b      	add	r3, r1
    26ca:	791b      	ldrb	r3, [r3, #4]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d00c      	beq.n	26ea <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    26d0:	9b01      	ldr	r3, [sp, #4]
    26d2:	6859      	ldr	r1, [r3, #4]
    26d4:	9a03      	ldr	r2, [sp, #12]
    26d6:	4613      	mov	r3, r2
    26d8:	005b      	lsls	r3, r3, #1
    26da:	4413      	add	r3, r2
    26dc:	009b      	lsls	r3, r3, #2
    26de:	440b      	add	r3, r1
    26e0:	681b      	ldr	r3, [r3, #0]
    26e2:	4618      	mov	r0, r3
    26e4:	f7ff fecc 	bl	2480 <IntCtrl_Ip_EnableIrq>
    26e8:	e00b      	b.n	2702 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    26ea:	9b01      	ldr	r3, [sp, #4]
    26ec:	6859      	ldr	r1, [r3, #4]
    26ee:	9a03      	ldr	r2, [sp, #12]
    26f0:	4613      	mov	r3, r2
    26f2:	005b      	lsls	r3, r3, #1
    26f4:	4413      	add	r3, r2
    26f6:	009b      	lsls	r3, r3, #2
    26f8:	440b      	add	r3, r1
    26fa:	681b      	ldr	r3, [r3, #0]
    26fc:	4618      	mov	r0, r3
    26fe:	f7ff fec9 	bl	2494 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2702:	9b03      	ldr	r3, [sp, #12]
    2704:	3301      	adds	r3, #1
    2706:	9303      	str	r3, [sp, #12]
    2708:	9b01      	ldr	r3, [sp, #4]
    270a:	681b      	ldr	r3, [r3, #0]
    270c:	9a03      	ldr	r2, [sp, #12]
    270e:	429a      	cmp	r2, r3
    2710:	d39c      	bcc.n	264c <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    2712:	2300      	movs	r3, #0
}
    2714:	4618      	mov	r0, r3
    2716:	b005      	add	sp, #20
    2718:	f85d fb04 	ldr.w	pc, [sp], #4

0000271c <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    271c:	b500      	push	{lr}
    271e:	b085      	sub	sp, #20
    2720:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    2722:	2300      	movs	r3, #0
    2724:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    2728:	9b01      	ldr	r3, [sp, #4]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d007      	beq.n	2740 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    2730:	9b01      	ldr	r3, [sp, #4]
    2732:	681b      	ldr	r3, [r3, #0]
    2734:	4618      	mov	r0, r3
    2736:	f7ff ff83 	bl	2640 <Platform_Ipw_InitIntCtrl>
    273a:	4603      	mov	r3, r0
    273c:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    2740:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2744:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    2746:	bf00      	nop
    2748:	b005      	add	sp, #20
    274a:	f85d fb04 	ldr.w	pc, [sp], #4

0000274e <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    274e:	2300      	movs	r3, #0
}
    2750:	4618      	mov	r0, r3
    2752:	4770      	bx	lr

00002754 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    2754:	b082      	sub	sp, #8
    2756:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    2758:	2301      	movs	r3, #1
}
    275a:	4618      	mov	r0, r3
    275c:	b002      	add	sp, #8
    275e:	4770      	bx	lr

00002760 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    2760:	b082      	sub	sp, #8
    2762:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    2764:	bf00      	nop
    2766:	b002      	add	sp, #8
    2768:	4770      	bx	lr

0000276a <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    276a:	b082      	sub	sp, #8
    276c:	9001      	str	r0, [sp, #4]
    return Micros;
    276e:	9b01      	ldr	r3, [sp, #4]
}
    2770:	4618      	mov	r0, r3
    2772:	b002      	add	sp, #8
    2774:	4770      	bx	lr

00002776 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    2776:	b500      	push	{lr}
    2778:	b083      	sub	sp, #12
    277a:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    277c:	f000 f86c 	bl	2858 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    2780:	bf00      	nop
    2782:	b003      	add	sp, #12
    2784:	f85d fb04 	ldr.w	pc, [sp], #4

00002788 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    2788:	b500      	push	{lr}
    278a:	b085      	sub	sp, #20
    278c:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    278e:	2300      	movs	r3, #0
    2790:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2792:	9b01      	ldr	r3, [sp, #4]
    2794:	2b00      	cmp	r3, #0
    2796:	d003      	beq.n	27a0 <OsIf_GetCounter+0x18>
    2798:	9b01      	ldr	r3, [sp, #4]
    279a:	2b01      	cmp	r3, #1
    279c:	d004      	beq.n	27a8 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    279e:	e007      	b.n	27b0 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    27a0:	f7ff ffd5 	bl	274e <OsIf_Timer_Dummy_GetCounter>
    27a4:	9003      	str	r0, [sp, #12]
            break;
    27a6:	e003      	b.n	27b0 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    27a8:	f000 f872 	bl	2890 <OsIf_Timer_System_GetCounter>
    27ac:	9003      	str	r0, [sp, #12]
            break;
    27ae:	bf00      	nop
    }

    return Value;
    27b0:	9b03      	ldr	r3, [sp, #12]
}
    27b2:	4618      	mov	r0, r3
    27b4:	b005      	add	sp, #20
    27b6:	f85d fb04 	ldr.w	pc, [sp], #4

000027ba <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    27ba:	b500      	push	{lr}
    27bc:	b085      	sub	sp, #20
    27be:	9001      	str	r0, [sp, #4]
    27c0:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    27c2:	2300      	movs	r3, #0
    27c4:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    27c6:	9b00      	ldr	r3, [sp, #0]
    27c8:	2b00      	cmp	r3, #0
    27ca:	d003      	beq.n	27d4 <OsIf_GetElapsed+0x1a>
    27cc:	9b00      	ldr	r3, [sp, #0]
    27ce:	2b01      	cmp	r3, #1
    27d0:	d005      	beq.n	27de <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    27d2:	e009      	b.n	27e8 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    27d4:	9801      	ldr	r0, [sp, #4]
    27d6:	f7ff ffbd 	bl	2754 <OsIf_Timer_Dummy_GetElapsed>
    27da:	9003      	str	r0, [sp, #12]
            break;
    27dc:	e004      	b.n	27e8 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    27de:	9801      	ldr	r0, [sp, #4]
    27e0:	f000 f864 	bl	28ac <OsIf_Timer_System_GetElapsed>
    27e4:	9003      	str	r0, [sp, #12]
            break;
    27e6:	bf00      	nop
    }

    return Value;
    27e8:	9b03      	ldr	r3, [sp, #12]
}
    27ea:	4618      	mov	r0, r3
    27ec:	b005      	add	sp, #20
    27ee:	f85d fb04 	ldr.w	pc, [sp], #4

000027f2 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    27f2:	b500      	push	{lr}
    27f4:	b083      	sub	sp, #12
    27f6:	9001      	str	r0, [sp, #4]
    27f8:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    27fa:	9b00      	ldr	r3, [sp, #0]
    27fc:	2b00      	cmp	r3, #0
    27fe:	d003      	beq.n	2808 <OsIf_SetTimerFrequency+0x16>
    2800:	9b00      	ldr	r3, [sp, #0]
    2802:	2b01      	cmp	r3, #1
    2804:	d004      	beq.n	2810 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2806:	e007      	b.n	2818 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    2808:	9801      	ldr	r0, [sp, #4]
    280a:	f7ff ffa9 	bl	2760 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    280e:	e003      	b.n	2818 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    2810:	9801      	ldr	r0, [sp, #4]
    2812:	f000 f85b 	bl	28cc <OsIf_Timer_System_SetTimerFrequency>
            break;
    2816:	bf00      	nop
    }
}
    2818:	bf00      	nop
    281a:	b003      	add	sp, #12
    281c:	f85d fb04 	ldr.w	pc, [sp], #4

00002820 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2820:	b500      	push	{lr}
    2822:	b085      	sub	sp, #20
    2824:	9001      	str	r0, [sp, #4]
    2826:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2828:	2300      	movs	r3, #0
    282a:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    282c:	9b00      	ldr	r3, [sp, #0]
    282e:	2b00      	cmp	r3, #0
    2830:	d003      	beq.n	283a <OsIf_MicrosToTicks+0x1a>
    2832:	9b00      	ldr	r3, [sp, #0]
    2834:	2b01      	cmp	r3, #1
    2836:	d005      	beq.n	2844 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2838:	e009      	b.n	284e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    283a:	9801      	ldr	r0, [sp, #4]
    283c:	f7ff ff95 	bl	276a <OsIf_Timer_Dummy_MicrosToTicks>
    2840:	9003      	str	r0, [sp, #12]
            break;
    2842:	e004      	b.n	284e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    2844:	9801      	ldr	r0, [sp, #4]
    2846:	f000 f84f 	bl	28e8 <OsIf_Timer_System_MicrosToTicks>
    284a:	9003      	str	r0, [sp, #12]
            break;
    284c:	bf00      	nop
    }

    return Value;
    284e:	9b03      	ldr	r3, [sp, #12]
}
    2850:	4618      	mov	r0, r3
    2852:	b005      	add	sp, #20
    2854:	f85d fb04 	ldr.w	pc, [sp], #4

00002858 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    2858:	b500      	push	{lr}
    285a:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    285c:	2300      	movs	r3, #0
    285e:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    2860:	4a09      	ldr	r2, [pc, #36]	; (2888 <OsIf_Timer_System_Init+0x30>)
    2862:	9b01      	ldr	r3, [sp, #4]
    2864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2868:	685a      	ldr	r2, [r3, #4]
    286a:	4908      	ldr	r1, [pc, #32]	; (288c <OsIf_Timer_System_Init+0x34>)
    286c:	9b01      	ldr	r3, [sp, #4]
    286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    2872:	4a06      	ldr	r2, [pc, #24]	; (288c <OsIf_Timer_System_Init+0x34>)
    2874:	9b01      	ldr	r3, [sp, #4]
    2876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    287a:	4618      	mov	r0, r3
    287c:	f000 f868 	bl	2950 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    2880:	bf00      	nop
    2882:	b003      	add	sp, #12
    2884:	f85d fb04 	ldr.w	pc, [sp], #4
    2888:	00016b80 	.word	0x00016b80
    288c:	1fff8b74 	.word	0x1fff8b74

00002890 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    2890:	b500      	push	{lr}
    2892:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    2894:	2300      	movs	r3, #0
    2896:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2898:	2300      	movs	r3, #0
    289a:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    289c:	f000 f86c 	bl	2978 <OsIf_Timer_System_Internal_GetCounter>
    28a0:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    28a2:	9b01      	ldr	r3, [sp, #4]
}
    28a4:	4618      	mov	r0, r3
    28a6:	b003      	add	sp, #12
    28a8:	f85d fb04 	ldr.w	pc, [sp], #4

000028ac <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    28ac:	b500      	push	{lr}
    28ae:	b085      	sub	sp, #20
    28b0:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    28b2:	2300      	movs	r3, #0
    28b4:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    28b6:	2300      	movs	r3, #0
    28b8:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    28ba:	9801      	ldr	r0, [sp, #4]
    28bc:	f000 f864 	bl	2988 <OsIf_Timer_System_Internal_GetElapsed>
    28c0:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    28c2:	9b03      	ldr	r3, [sp, #12]
}
    28c4:	4618      	mov	r0, r3
    28c6:	b005      	add	sp, #20
    28c8:	f85d fb04 	ldr.w	pc, [sp], #4

000028cc <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    28cc:	b084      	sub	sp, #16
    28ce:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    28d0:	2300      	movs	r3, #0
    28d2:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    28d4:	4903      	ldr	r1, [pc, #12]	; (28e4 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    28d6:	9b03      	ldr	r3, [sp, #12]
    28d8:	9a01      	ldr	r2, [sp, #4]
    28da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    28de:	bf00      	nop
    28e0:	b004      	add	sp, #16
    28e2:	4770      	bx	lr
    28e4:	1fff8b74 	.word	0x1fff8b74

000028e8 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    28e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ea:	b087      	sub	sp, #28
    28ec:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    28ee:	2100      	movs	r1, #0
    28f0:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    28f2:	2100      	movs	r1, #0
    28f4:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    28f6:	9901      	ldr	r1, [sp, #4]
    28f8:	2000      	movs	r0, #0
    28fa:	460e      	mov	r6, r1
    28fc:	4607      	mov	r7, r0
    28fe:	4812      	ldr	r0, [pc, #72]	; (2948 <OsIf_Timer_System_MicrosToTicks+0x60>)
    2900:	9904      	ldr	r1, [sp, #16]
    2902:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2906:	2000      	movs	r0, #0
    2908:	460c      	mov	r4, r1
    290a:	4605      	mov	r5, r0
    290c:	fb04 f007 	mul.w	r0, r4, r7
    2910:	fb06 f105 	mul.w	r1, r6, r5
    2914:	4401      	add	r1, r0
    2916:	fba6 2304 	umull	r2, r3, r6, r4
    291a:	4419      	add	r1, r3
    291c:	460b      	mov	r3, r1
    291e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2922:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    2926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    292a:	4a08      	ldr	r2, [pc, #32]	; (294c <OsIf_Timer_System_MicrosToTicks+0x64>)
    292c:	f04f 0300 	mov.w	r3, #0
    2930:	f7fd fe38 	bl	5a4 <__aeabi_uldivmod>
    2934:	4602      	mov	r2, r0
    2936:	460b      	mov	r3, r1
    2938:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    293c:	9b02      	ldr	r3, [sp, #8]
    293e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2940:	9b05      	ldr	r3, [sp, #20]
}
    2942:	4618      	mov	r0, r3
    2944:	b007      	add	sp, #28
    2946:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2948:	1fff8b74 	.word	0x1fff8b74
    294c:	000f4240 	.word	0x000f4240

00002950 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    2950:	b082      	sub	sp, #8
    2952:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    2954:	4b07      	ldr	r3, [pc, #28]	; (2974 <OsIf_Timer_System_Internal_Init+0x24>)
    2956:	2200      	movs	r2, #0
    2958:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    295a:	4b06      	ldr	r3, [pc, #24]	; (2974 <OsIf_Timer_System_Internal_Init+0x24>)
    295c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2960:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    2962:	4b04      	ldr	r3, [pc, #16]	; (2974 <OsIf_Timer_System_Internal_Init+0x24>)
    2964:	2200      	movs	r2, #0
    2966:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    2968:	4b02      	ldr	r3, [pc, #8]	; (2974 <OsIf_Timer_System_Internal_Init+0x24>)
    296a:	2205      	movs	r2, #5
    296c:	601a      	str	r2, [r3, #0]
}
    296e:	bf00      	nop
    2970:	b002      	add	sp, #8
    2972:	4770      	bx	lr
    2974:	e000e010 	.word	0xe000e010

00002978 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    2978:	4b02      	ldr	r3, [pc, #8]	; (2984 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    297a:	689b      	ldr	r3, [r3, #8]
    297c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    2980:	4618      	mov	r0, r3
    2982:	4770      	bx	lr
    2984:	e000e010 	.word	0xe000e010

00002988 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    2988:	b084      	sub	sp, #16
    298a:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    298c:	4b10      	ldr	r3, [pc, #64]	; (29d0 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    298e:	689b      	ldr	r3, [r3, #8]
    2990:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2994:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    2996:	2300      	movs	r3, #0
    2998:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    299a:	9b01      	ldr	r3, [sp, #4]
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	9a02      	ldr	r2, [sp, #8]
    29a0:	429a      	cmp	r2, r3
    29a2:	d909      	bls.n	29b8 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    29a4:	9b01      	ldr	r3, [sp, #4]
    29a6:	681a      	ldr	r2, [r3, #0]
    29a8:	9b02      	ldr	r3, [sp, #8]
    29aa:	1ad3      	subs	r3, r2, r3
    29ac:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    29b0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    29b4:	9303      	str	r3, [sp, #12]
    29b6:	e004      	b.n	29c2 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    29b8:	9b01      	ldr	r3, [sp, #4]
    29ba:	681a      	ldr	r2, [r3, #0]
    29bc:	9b02      	ldr	r3, [sp, #8]
    29be:	1ad3      	subs	r3, r2, r3
    29c0:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    29c2:	9b01      	ldr	r3, [sp, #4]
    29c4:	9a02      	ldr	r2, [sp, #8]
    29c6:	601a      	str	r2, [r3, #0]

    return dif;
    29c8:	9b03      	ldr	r3, [sp, #12]
}
    29ca:	4618      	mov	r0, r3
    29cc:	b004      	add	sp, #16
    29ce:	4770      	bx	lr
    29d0:	e000e010 	.word	0xe000e010

000029d4 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    29d4:	b082      	sub	sp, #8
    29d6:	9001      	str	r0, [sp, #4]
    29d8:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    29da:	bf00      	nop
    29dc:	b002      	add	sp, #8
    29de:	4770      	bx	lr

000029e0 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    29e0:	b500      	push	{lr}
    29e2:	b085      	sub	sp, #20
    29e4:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    29e6:	4b24      	ldr	r3, [pc, #144]	; (2a78 <Clock_Ip_UpdateDriverContext+0x98>)
    29e8:	2201      	movs	r2, #1
    29ea:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    29ec:	4b23      	ldr	r3, [pc, #140]	; (2a7c <Clock_Ip_UpdateDriverContext+0x9c>)
    29ee:	681b      	ldr	r3, [r3, #0]
    29f0:	2102      	movs	r1, #2
    29f2:	4618      	mov	r0, r3
    29f4:	f003 fc32 	bl	625c <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    29f8:	2300      	movs	r3, #0
    29fa:	f88d 300f 	strb.w	r3, [sp, #15]
    29fe:	e015      	b.n	2a2c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2a00:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a04:	9a01      	ldr	r2, [sp, #4]
    2a06:	334a      	adds	r3, #74	; 0x4a
    2a08:	00db      	lsls	r3, r3, #3
    2a0a:	4413      	add	r3, r2
    2a0c:	6858      	ldr	r0, [r3, #4]
    2a0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a12:	9a01      	ldr	r2, [sp, #4]
    2a14:	334a      	adds	r3, #74	; 0x4a
    2a16:	00db      	lsls	r3, r3, #3
    2a18:	4413      	add	r3, r2
    2a1a:	689b      	ldr	r3, [r3, #8]
    2a1c:	4619      	mov	r1, r3
    2a1e:	f001 fadc 	bl	3fda <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2a22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a26:	3301      	adds	r3, #1
    2a28:	f88d 300f 	strb.w	r3, [sp, #15]
    2a2c:	9b01      	ldr	r3, [sp, #4]
    2a2e:	7bdb      	ldrb	r3, [r3, #15]
    2a30:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a34:	429a      	cmp	r2, r3
    2a36:	d3e3      	bcc.n	2a00 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2a38:	f000 f824 	bl	2a84 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2a3c:	2301      	movs	r3, #1
    2a3e:	f88d 300f 	strb.w	r3, [sp, #15]
    2a42:	e00e      	b.n	2a62 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2a44:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a48:	9b01      	ldr	r3, [sp, #4]
    2a4a:	327e      	adds	r2, #126	; 0x7e
    2a4c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2a50:	490b      	ldr	r1, [pc, #44]	; (2a80 <Clock_Ip_UpdateDriverContext+0xa0>)
    2a52:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a56:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2a58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a5c:	3301      	adds	r3, #1
    2a5e:	f88d 300f 	strb.w	r3, [sp, #15]
    2a62:	9b01      	ldr	r3, [sp, #4]
    2a64:	7cdb      	ldrb	r3, [r3, #19]
    2a66:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a6a:	429a      	cmp	r2, r3
    2a6c:	d3ea      	bcc.n	2a44 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2a6e:	bf00      	nop
    2a70:	bf00      	nop
    2a72:	b005      	add	sp, #20
    2a74:	f85d fb04 	ldr.w	pc, [sp], #4
    2a78:	1fff8b10 	.word	0x1fff8b10
    2a7c:	1fff8b78 	.word	0x1fff8b78
    2a80:	1fff8b84 	.word	0x1fff8b84

00002a84 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    2a84:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    2a86:	4b23      	ldr	r3, [pc, #140]	; (2b14 <Clock_Ip_CallEmptyCallbacks+0x90>)
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	f083 0301 	eor.w	r3, r3, #1
    2a8e:	b2db      	uxtb	r3, r3
    2a90:	2b00      	cmp	r3, #0
    2a92:	d03d      	beq.n	2b10 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2a94:	4b1f      	ldr	r3, [pc, #124]	; (2b14 <Clock_Ip_CallEmptyCallbacks+0x90>)
    2a96:	2201      	movs	r2, #1
    2a98:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2a9a:	4b1f      	ldr	r3, [pc, #124]	; (2b18 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2a9c:	685b      	ldr	r3, [r3, #4]
    2a9e:	2100      	movs	r1, #0
    2aa0:	2000      	movs	r0, #0
    2aa2:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2aa4:	4b1c      	ldr	r3, [pc, #112]	; (2b18 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2aa6:	689b      	ldr	r3, [r3, #8]
    2aa8:	2057      	movs	r0, #87	; 0x57
    2aaa:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2aac:	4b1b      	ldr	r3, [pc, #108]	; (2b1c <Clock_Ip_CallEmptyCallbacks+0x98>)
    2aae:	681b      	ldr	r3, [r3, #0]
    2ab0:	2000      	movs	r0, #0
    2ab2:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2ab4:	4b1a      	ldr	r3, [pc, #104]	; (2b20 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    2ab6:	681b      	ldr	r3, [r3, #0]
    2ab8:	2000      	movs	r0, #0
    2aba:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2abc:	4b19      	ldr	r3, [pc, #100]	; (2b24 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2abe:	681b      	ldr	r3, [r3, #0]
    2ac0:	2000      	movs	r0, #0
    2ac2:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2ac4:	4b18      	ldr	r3, [pc, #96]	; (2b28 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2ac6:	685b      	ldr	r3, [r3, #4]
    2ac8:	2000      	movs	r0, #0
    2aca:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2acc:	4b16      	ldr	r3, [pc, #88]	; (2b28 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2ace:	689b      	ldr	r3, [r3, #8]
    2ad0:	2057      	movs	r0, #87	; 0x57
    2ad2:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2ad4:	4b15      	ldr	r3, [pc, #84]	; (2b2c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2ad6:	681b      	ldr	r3, [r3, #0]
    2ad8:	2000      	movs	r0, #0
    2ada:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2adc:	4b13      	ldr	r3, [pc, #76]	; (2b2c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2ade:	685b      	ldr	r3, [r3, #4]
    2ae0:	2100      	movs	r1, #0
    2ae2:	2057      	movs	r0, #87	; 0x57
    2ae4:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2ae6:	4b12      	ldr	r3, [pc, #72]	; (2b30 <Clock_Ip_CallEmptyCallbacks+0xac>)
    2ae8:	681b      	ldr	r3, [r3, #0]
    2aea:	2000      	movs	r0, #0
    2aec:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2aee:	4b11      	ldr	r3, [pc, #68]	; (2b34 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2af0:	685b      	ldr	r3, [r3, #4]
    2af2:	2000      	movs	r0, #0
    2af4:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2af6:	4b0f      	ldr	r3, [pc, #60]	; (2b34 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2af8:	689b      	ldr	r3, [r3, #8]
    2afa:	2057      	movs	r0, #87	; 0x57
    2afc:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2afe:	4b0e      	ldr	r3, [pc, #56]	; (2b38 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2b00:	685b      	ldr	r3, [r3, #4]
    2b02:	2000      	movs	r0, #0
    2b04:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2b06:	4b0d      	ldr	r3, [pc, #52]	; (2b3c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2b08:	681b      	ldr	r3, [r3, #0]
    2b0a:	2100      	movs	r1, #0
    2b0c:	2000      	movs	r0, #0
    2b0e:	4798      	blx	r3
    }
}
    2b10:	bf00      	nop
    2b12:	bd08      	pop	{r3, pc}
    2b14:	1fff8b7c 	.word	0x1fff8b7c
    2b18:	00016368 	.word	0x00016368
    2b1c:	0001627c 	.word	0x0001627c
    2b20:	000162b8 	.word	0x000162b8
    2b24:	000162c0 	.word	0x000162c0
    2b28:	000162e8 	.word	0x000162e8
    2b2c:	000162f4 	.word	0x000162f4
    2b30:	0001632c 	.word	0x0001632c
    2b34:	00016378 	.word	0x00016378
    2b38:	000163a4 	.word	0x000163a4
    2b3c:	000163a0 	.word	0x000163a0

00002b40 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2b40:	b500      	push	{lr}
    2b42:	b085      	sub	sp, #20
    2b44:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2b46:	9b01      	ldr	r3, [sp, #4]
    2b48:	7adb      	ldrb	r3, [r3, #11]
    2b4a:	9303      	str	r3, [sp, #12]
    2b4c:	e01f      	b.n	2b8e <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2b4e:	9b03      	ldr	r3, [sp, #12]
    2b50:	1e5a      	subs	r2, r3, #1
    2b52:	9b01      	ldr	r3, [sp, #4]
    2b54:	320d      	adds	r2, #13
    2b56:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2b5a:	495a      	ldr	r1, [pc, #360]	; (2cc4 <Clock_Ip_ResetClockConfiguration+0x184>)
    2b5c:	4613      	mov	r3, r2
    2b5e:	00db      	lsls	r3, r3, #3
    2b60:	4413      	add	r3, r2
    2b62:	440b      	add	r3, r1
    2b64:	3301      	adds	r3, #1
    2b66:	781b      	ldrb	r3, [r3, #0]
    2b68:	461a      	mov	r2, r3
    2b6a:	4b57      	ldr	r3, [pc, #348]	; (2cc8 <Clock_Ip_ResetClockConfiguration+0x188>)
    2b6c:	5c9b      	ldrb	r3, [r3, r2]
    2b6e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2b70:	4a56      	ldr	r2, [pc, #344]	; (2ccc <Clock_Ip_ResetClockConfiguration+0x18c>)
    2b72:	9b02      	ldr	r3, [sp, #8]
    2b74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2b78:	9a03      	ldr	r2, [sp, #12]
    2b7a:	3a01      	subs	r2, #1
    2b7c:	320d      	adds	r2, #13
    2b7e:	00d2      	lsls	r2, r2, #3
    2b80:	9901      	ldr	r1, [sp, #4]
    2b82:	440a      	add	r2, r1
    2b84:	4610      	mov	r0, r2
    2b86:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2b88:	9b03      	ldr	r3, [sp, #12]
    2b8a:	3b01      	subs	r3, #1
    2b8c:	9303      	str	r3, [sp, #12]
    2b8e:	9b03      	ldr	r3, [sp, #12]
    2b90:	2b00      	cmp	r3, #0
    2b92:	d1dc      	bne.n	2b4e <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2b94:	9b01      	ldr	r3, [sp, #4]
    2b96:	7b9b      	ldrb	r3, [r3, #14]
    2b98:	9303      	str	r3, [sp, #12]
    2b9a:	e026      	b.n	2bea <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2b9c:	9b03      	ldr	r3, [sp, #12]
    2b9e:	3b01      	subs	r3, #1
    2ba0:	9a01      	ldr	r2, [sp, #4]
    2ba2:	3324      	adds	r3, #36	; 0x24
    2ba4:	011b      	lsls	r3, r3, #4
    2ba6:	4413      	add	r3, r2
    2ba8:	3304      	adds	r3, #4
    2baa:	681a      	ldr	r2, [r3, #0]
    2bac:	4945      	ldr	r1, [pc, #276]	; (2cc4 <Clock_Ip_ResetClockConfiguration+0x184>)
    2bae:	4613      	mov	r3, r2
    2bb0:	00db      	lsls	r3, r3, #3
    2bb2:	4413      	add	r3, r2
    2bb4:	440b      	add	r3, r1
    2bb6:	3301      	adds	r3, #1
    2bb8:	781b      	ldrb	r3, [r3, #0]
    2bba:	461a      	mov	r2, r3
    2bbc:	4b44      	ldr	r3, [pc, #272]	; (2cd0 <Clock_Ip_ResetClockConfiguration+0x190>)
    2bbe:	5c9b      	ldrb	r3, [r3, r2]
    2bc0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2bc2:	4944      	ldr	r1, [pc, #272]	; (2cd4 <Clock_Ip_ResetClockConfiguration+0x194>)
    2bc4:	9a02      	ldr	r2, [sp, #8]
    2bc6:	4613      	mov	r3, r2
    2bc8:	005b      	lsls	r3, r3, #1
    2bca:	4413      	add	r3, r2
    2bcc:	009b      	lsls	r3, r3, #2
    2bce:	440b      	add	r3, r1
    2bd0:	681b      	ldr	r3, [r3, #0]
    2bd2:	9a03      	ldr	r2, [sp, #12]
    2bd4:	3a01      	subs	r2, #1
    2bd6:	3224      	adds	r2, #36	; 0x24
    2bd8:	0112      	lsls	r2, r2, #4
    2bda:	9901      	ldr	r1, [sp, #4]
    2bdc:	440a      	add	r2, r1
    2bde:	3204      	adds	r2, #4
    2be0:	4610      	mov	r0, r2
    2be2:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2be4:	9b03      	ldr	r3, [sp, #12]
    2be6:	3b01      	subs	r3, #1
    2be8:	9303      	str	r3, [sp, #12]
    2bea:	9b03      	ldr	r3, [sp, #12]
    2bec:	2b00      	cmp	r3, #0
    2bee:	d1d5      	bne.n	2b9c <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2bf0:	9b01      	ldr	r3, [sp, #4]
    2bf2:	7a9b      	ldrb	r3, [r3, #10]
    2bf4:	9303      	str	r3, [sp, #12]
    2bf6:	e02a      	b.n	2c4e <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2bf8:	9b03      	ldr	r3, [sp, #12]
    2bfa:	1e5a      	subs	r2, r3, #1
    2bfc:	9901      	ldr	r1, [sp, #4]
    2bfe:	4613      	mov	r3, r2
    2c00:	009b      	lsls	r3, r3, #2
    2c02:	4413      	add	r3, r2
    2c04:	00db      	lsls	r3, r3, #3
    2c06:	440b      	add	r3, r1
    2c08:	3340      	adds	r3, #64	; 0x40
    2c0a:	681a      	ldr	r2, [r3, #0]
    2c0c:	492d      	ldr	r1, [pc, #180]	; (2cc4 <Clock_Ip_ResetClockConfiguration+0x184>)
    2c0e:	4613      	mov	r3, r2
    2c10:	00db      	lsls	r3, r3, #3
    2c12:	4413      	add	r3, r2
    2c14:	440b      	add	r3, r1
    2c16:	3301      	adds	r3, #1
    2c18:	781b      	ldrb	r3, [r3, #0]
    2c1a:	461a      	mov	r2, r3
    2c1c:	4b2e      	ldr	r3, [pc, #184]	; (2cd8 <Clock_Ip_ResetClockConfiguration+0x198>)
    2c1e:	5c9b      	ldrb	r3, [r3, r2]
    2c20:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2c22:	492e      	ldr	r1, [pc, #184]	; (2cdc <Clock_Ip_ResetClockConfiguration+0x19c>)
    2c24:	9a02      	ldr	r2, [sp, #8]
    2c26:	4613      	mov	r3, r2
    2c28:	009b      	lsls	r3, r3, #2
    2c2a:	4413      	add	r3, r2
    2c2c:	009b      	lsls	r3, r3, #2
    2c2e:	440b      	add	r3, r1
    2c30:	6819      	ldr	r1, [r3, #0]
    2c32:	9b03      	ldr	r3, [sp, #12]
    2c34:	1e5a      	subs	r2, r3, #1
    2c36:	4613      	mov	r3, r2
    2c38:	009b      	lsls	r3, r3, #2
    2c3a:	4413      	add	r3, r2
    2c3c:	00db      	lsls	r3, r3, #3
    2c3e:	3340      	adds	r3, #64	; 0x40
    2c40:	9a01      	ldr	r2, [sp, #4]
    2c42:	4413      	add	r3, r2
    2c44:	4618      	mov	r0, r3
    2c46:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2c48:	9b03      	ldr	r3, [sp, #12]
    2c4a:	3b01      	subs	r3, #1
    2c4c:	9303      	str	r3, [sp, #12]
    2c4e:	9b03      	ldr	r3, [sp, #12]
    2c50:	2b00      	cmp	r3, #0
    2c52:	d1d1      	bne.n	2bf8 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2c54:	9b01      	ldr	r3, [sp, #4]
    2c56:	7a5b      	ldrb	r3, [r3, #9]
    2c58:	9303      	str	r3, [sp, #12]
    2c5a:	e02b      	b.n	2cb4 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2c5c:	9b03      	ldr	r3, [sp, #12]
    2c5e:	1e5a      	subs	r2, r3, #1
    2c60:	9901      	ldr	r1, [sp, #4]
    2c62:	4613      	mov	r3, r2
    2c64:	009b      	lsls	r3, r3, #2
    2c66:	4413      	add	r3, r2
    2c68:	009b      	lsls	r3, r3, #2
    2c6a:	440b      	add	r3, r1
    2c6c:	332c      	adds	r3, #44	; 0x2c
    2c6e:	681a      	ldr	r2, [r3, #0]
    2c70:	4914      	ldr	r1, [pc, #80]	; (2cc4 <Clock_Ip_ResetClockConfiguration+0x184>)
    2c72:	4613      	mov	r3, r2
    2c74:	00db      	lsls	r3, r3, #3
    2c76:	4413      	add	r3, r2
    2c78:	440b      	add	r3, r1
    2c7a:	3301      	adds	r3, #1
    2c7c:	781b      	ldrb	r3, [r3, #0]
    2c7e:	461a      	mov	r2, r3
    2c80:	4b17      	ldr	r3, [pc, #92]	; (2ce0 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2c82:	5c9b      	ldrb	r3, [r3, r2]
    2c84:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    2c86:	4917      	ldr	r1, [pc, #92]	; (2ce4 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2c88:	9a02      	ldr	r2, [sp, #8]
    2c8a:	4613      	mov	r3, r2
    2c8c:	009b      	lsls	r3, r3, #2
    2c8e:	4413      	add	r3, r2
    2c90:	009b      	lsls	r3, r3, #2
    2c92:	440b      	add	r3, r1
    2c94:	6819      	ldr	r1, [r3, #0]
    2c96:	9b03      	ldr	r3, [sp, #12]
    2c98:	1e5a      	subs	r2, r3, #1
    2c9a:	4613      	mov	r3, r2
    2c9c:	009b      	lsls	r3, r3, #2
    2c9e:	4413      	add	r3, r2
    2ca0:	009b      	lsls	r3, r3, #2
    2ca2:	3328      	adds	r3, #40	; 0x28
    2ca4:	9a01      	ldr	r2, [sp, #4]
    2ca6:	4413      	add	r3, r2
    2ca8:	3304      	adds	r3, #4
    2caa:	4618      	mov	r0, r3
    2cac:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2cae:	9b03      	ldr	r3, [sp, #12]
    2cb0:	3b01      	subs	r3, #1
    2cb2:	9303      	str	r3, [sp, #12]
    2cb4:	9b03      	ldr	r3, [sp, #12]
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d1d0      	bne.n	2c5c <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    2cba:	bf00      	nop
    2cbc:	bf00      	nop
    2cbe:	b005      	add	sp, #20
    2cc0:	f85d fb04 	ldr.w	pc, [sp], #4
    2cc4:	00015d6c 	.word	0x00015d6c
    2cc8:	00015d3c 	.word	0x00015d3c
    2ccc:	000163a4 	.word	0x000163a4
    2cd0:	00015d1c 	.word	0x00015d1c
    2cd4:	000162e8 	.word	0x000162e8
    2cd8:	00015d2c 	.word	0x00015d2c
    2cdc:	00016378 	.word	0x00016378
    2ce0:	00015cec 	.word	0x00015cec
    2ce4:	000162c0 	.word	0x000162c0

00002ce8 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2ce8:	b500      	push	{lr}
    2cea:	b085      	sub	sp, #20
    2cec:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2cee:	2301      	movs	r3, #1
    2cf0:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2cf2:	9801      	ldr	r0, [sp, #4]
    2cf4:	f000 f818 	bl	2d28 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2cf8:	4b0a      	ldr	r3, [pc, #40]	; (2d24 <Clock_Ip_Init+0x3c>)
    2cfa:	781b      	ldrb	r3, [r3, #0]
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	d00a      	beq.n	2d16 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2d00:	f000 fb74 	bl	33ec <Clock_Ip_GetPllStatus>
    2d04:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2d06:	9b02      	ldr	r3, [sp, #8]
    2d08:	2b00      	cmp	r3, #0
    2d0a:	d106      	bne.n	2d1a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2d0c:	f000 fbf2 	bl	34f4 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2d10:	2300      	movs	r3, #0
    2d12:	9303      	str	r3, [sp, #12]
    2d14:	e001      	b.n	2d1a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2d16:	2300      	movs	r3, #0
    2d18:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2d1a:	9b03      	ldr	r3, [sp, #12]
}
    2d1c:	4618      	mov	r0, r3
    2d1e:	b005      	add	sp, #20
    2d20:	f85d fb04 	ldr.w	pc, [sp], #4
    2d24:	1fff8b80 	.word	0x1fff8b80

00002d28 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2d28:	b510      	push	{r4, lr}
    2d2a:	b084      	sub	sp, #16
    2d2c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2d2e:	4a9f      	ldr	r2, [pc, #636]	; (2fac <Clock_Ip_InitClock+0x284>)
    2d30:	9b01      	ldr	r3, [sp, #4]
    2d32:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2d34:	2101      	movs	r1, #1
    2d36:	9801      	ldr	r0, [sp, #4]
    2d38:	f003 fa90 	bl	625c <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2d3c:	4b9b      	ldr	r3, [pc, #620]	; (2fac <Clock_Ip_InitClock+0x284>)
    2d3e:	681b      	ldr	r3, [r3, #0]
    2d40:	2b00      	cmp	r3, #0
    2d42:	d030      	beq.n	2da6 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2d44:	2300      	movs	r3, #0
    2d46:	9303      	str	r3, [sp, #12]
    2d48:	e027      	b.n	2d9a <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2d4a:	9901      	ldr	r1, [sp, #4]
    2d4c:	9a03      	ldr	r2, [sp, #12]
    2d4e:	4613      	mov	r3, r2
    2d50:	009b      	lsls	r3, r3, #2
    2d52:	4413      	add	r3, r2
    2d54:	009b      	lsls	r3, r3, #2
    2d56:	440b      	add	r3, r1
    2d58:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d5c:	681a      	ldr	r2, [r3, #0]
    2d5e:	4994      	ldr	r1, [pc, #592]	; (2fb0 <Clock_Ip_InitClock+0x288>)
    2d60:	4613      	mov	r3, r2
    2d62:	00db      	lsls	r3, r3, #3
    2d64:	4413      	add	r3, r2
    2d66:	440b      	add	r3, r1
    2d68:	3301      	adds	r3, #1
    2d6a:	781b      	ldrb	r3, [r3, #0]
    2d6c:	461a      	mov	r2, r3
    2d6e:	4b91      	ldr	r3, [pc, #580]	; (2fb4 <Clock_Ip_InitClock+0x28c>)
    2d70:	5c9b      	ldrb	r3, [r3, r2]
    2d72:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2d74:	4a90      	ldr	r2, [pc, #576]	; (2fb8 <Clock_Ip_InitClock+0x290>)
    2d76:	9b02      	ldr	r3, [sp, #8]
    2d78:	011b      	lsls	r3, r3, #4
    2d7a:	4413      	add	r3, r2
    2d7c:	6819      	ldr	r1, [r3, #0]
    2d7e:	9a03      	ldr	r2, [sp, #12]
    2d80:	4613      	mov	r3, r2
    2d82:	009b      	lsls	r3, r3, #2
    2d84:	4413      	add	r3, r2
    2d86:	009b      	lsls	r3, r3, #2
    2d88:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d8c:	9a01      	ldr	r2, [sp, #4]
    2d8e:	4413      	add	r3, r2
    2d90:	4618      	mov	r0, r3
    2d92:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2d94:	9b03      	ldr	r3, [sp, #12]
    2d96:	3301      	adds	r3, #1
    2d98:	9303      	str	r3, [sp, #12]
    2d9a:	9b01      	ldr	r3, [sp, #4]
    2d9c:	7c9b      	ldrb	r3, [r3, #18]
    2d9e:	461a      	mov	r2, r3
    2da0:	9b03      	ldr	r3, [sp, #12]
    2da2:	4293      	cmp	r3, r2
    2da4:	d3d1      	bcc.n	2d4a <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2da6:	9801      	ldr	r0, [sp, #4]
    2da8:	f7ff feca 	bl	2b40 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2dac:	2300      	movs	r3, #0
    2dae:	9303      	str	r3, [sp, #12]
    2db0:	e029      	b.n	2e06 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2db2:	9901      	ldr	r1, [sp, #4]
    2db4:	9a03      	ldr	r2, [sp, #12]
    2db6:	4613      	mov	r3, r2
    2db8:	005b      	lsls	r3, r3, #1
    2dba:	4413      	add	r3, r2
    2dbc:	009b      	lsls	r3, r3, #2
    2dbe:	440b      	add	r3, r1
    2dc0:	3314      	adds	r3, #20
    2dc2:	681a      	ldr	r2, [r3, #0]
    2dc4:	497a      	ldr	r1, [pc, #488]	; (2fb0 <Clock_Ip_InitClock+0x288>)
    2dc6:	4613      	mov	r3, r2
    2dc8:	00db      	lsls	r3, r3, #3
    2dca:	4413      	add	r3, r2
    2dcc:	440b      	add	r3, r1
    2dce:	3301      	adds	r3, #1
    2dd0:	781b      	ldrb	r3, [r3, #0]
    2dd2:	461a      	mov	r2, r3
    2dd4:	4b79      	ldr	r3, [pc, #484]	; (2fbc <Clock_Ip_InitClock+0x294>)
    2dd6:	5c9b      	ldrb	r3, [r3, r2]
    2dd8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2dda:	4979      	ldr	r1, [pc, #484]	; (2fc0 <Clock_Ip_InitClock+0x298>)
    2ddc:	9a02      	ldr	r2, [sp, #8]
    2dde:	4613      	mov	r3, r2
    2de0:	005b      	lsls	r3, r3, #1
    2de2:	4413      	add	r3, r2
    2de4:	009b      	lsls	r3, r3, #2
    2de6:	440b      	add	r3, r1
    2de8:	6819      	ldr	r1, [r3, #0]
    2dea:	9a03      	ldr	r2, [sp, #12]
    2dec:	4613      	mov	r3, r2
    2dee:	005b      	lsls	r3, r3, #1
    2df0:	4413      	add	r3, r2
    2df2:	009b      	lsls	r3, r3, #2
    2df4:	3310      	adds	r3, #16
    2df6:	9a01      	ldr	r2, [sp, #4]
    2df8:	4413      	add	r3, r2
    2dfa:	3304      	adds	r3, #4
    2dfc:	4618      	mov	r0, r3
    2dfe:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2e00:	9b03      	ldr	r3, [sp, #12]
    2e02:	3301      	adds	r3, #1
    2e04:	9303      	str	r3, [sp, #12]
    2e06:	9b01      	ldr	r3, [sp, #4]
    2e08:	7a1b      	ldrb	r3, [r3, #8]
    2e0a:	461a      	mov	r2, r3
    2e0c:	9b03      	ldr	r3, [sp, #12]
    2e0e:	4293      	cmp	r3, r2
    2e10:	d3cf      	bcc.n	2db2 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2e12:	2300      	movs	r3, #0
    2e14:	9303      	str	r3, [sp, #12]
    2e16:	e02a      	b.n	2e6e <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2e18:	9901      	ldr	r1, [sp, #4]
    2e1a:	9a03      	ldr	r2, [sp, #12]
    2e1c:	4613      	mov	r3, r2
    2e1e:	009b      	lsls	r3, r3, #2
    2e20:	4413      	add	r3, r2
    2e22:	009b      	lsls	r3, r3, #2
    2e24:	440b      	add	r3, r1
    2e26:	332c      	adds	r3, #44	; 0x2c
    2e28:	681a      	ldr	r2, [r3, #0]
    2e2a:	4961      	ldr	r1, [pc, #388]	; (2fb0 <Clock_Ip_InitClock+0x288>)
    2e2c:	4613      	mov	r3, r2
    2e2e:	00db      	lsls	r3, r3, #3
    2e30:	4413      	add	r3, r2
    2e32:	440b      	add	r3, r1
    2e34:	3301      	adds	r3, #1
    2e36:	781b      	ldrb	r3, [r3, #0]
    2e38:	461a      	mov	r2, r3
    2e3a:	4b62      	ldr	r3, [pc, #392]	; (2fc4 <Clock_Ip_InitClock+0x29c>)
    2e3c:	5c9b      	ldrb	r3, [r3, r2]
    2e3e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2e40:	4961      	ldr	r1, [pc, #388]	; (2fc8 <Clock_Ip_InitClock+0x2a0>)
    2e42:	9a02      	ldr	r2, [sp, #8]
    2e44:	4613      	mov	r3, r2
    2e46:	009b      	lsls	r3, r3, #2
    2e48:	4413      	add	r3, r2
    2e4a:	009b      	lsls	r3, r3, #2
    2e4c:	440b      	add	r3, r1
    2e4e:	3304      	adds	r3, #4
    2e50:	6819      	ldr	r1, [r3, #0]
    2e52:	9a03      	ldr	r2, [sp, #12]
    2e54:	4613      	mov	r3, r2
    2e56:	009b      	lsls	r3, r3, #2
    2e58:	4413      	add	r3, r2
    2e5a:	009b      	lsls	r3, r3, #2
    2e5c:	3328      	adds	r3, #40	; 0x28
    2e5e:	9a01      	ldr	r2, [sp, #4]
    2e60:	4413      	add	r3, r2
    2e62:	3304      	adds	r3, #4
    2e64:	4618      	mov	r0, r3
    2e66:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2e68:	9b03      	ldr	r3, [sp, #12]
    2e6a:	3301      	adds	r3, #1
    2e6c:	9303      	str	r3, [sp, #12]
    2e6e:	9b01      	ldr	r3, [sp, #4]
    2e70:	7a5b      	ldrb	r3, [r3, #9]
    2e72:	461a      	mov	r2, r3
    2e74:	9b03      	ldr	r3, [sp, #12]
    2e76:	4293      	cmp	r3, r2
    2e78:	d3ce      	bcc.n	2e18 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    2e7a:	9801      	ldr	r0, [sp, #4]
    2e7c:	f7ff fdb0 	bl	29e0 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2e80:	2300      	movs	r3, #0
    2e82:	9303      	str	r3, [sp, #12]
    2e84:	e028      	b.n	2ed8 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    2e86:	9901      	ldr	r1, [sp, #4]
    2e88:	9a03      	ldr	r2, [sp, #12]
    2e8a:	4613      	mov	r3, r2
    2e8c:	009b      	lsls	r3, r3, #2
    2e8e:	4413      	add	r3, r2
    2e90:	009b      	lsls	r3, r3, #2
    2e92:	440b      	add	r3, r1
    2e94:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2e98:	681a      	ldr	r2, [r3, #0]
    2e9a:	4945      	ldr	r1, [pc, #276]	; (2fb0 <Clock_Ip_InitClock+0x288>)
    2e9c:	4613      	mov	r3, r2
    2e9e:	00db      	lsls	r3, r3, #3
    2ea0:	4413      	add	r3, r2
    2ea2:	440b      	add	r3, r1
    2ea4:	3301      	adds	r3, #1
    2ea6:	781b      	ldrb	r3, [r3, #0]
    2ea8:	461a      	mov	r2, r3
    2eaa:	4b48      	ldr	r3, [pc, #288]	; (2fcc <Clock_Ip_InitClock+0x2a4>)
    2eac:	5c9b      	ldrb	r3, [r3, r2]
    2eae:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2eb0:	4a47      	ldr	r2, [pc, #284]	; (2fd0 <Clock_Ip_InitClock+0x2a8>)
    2eb2:	9b02      	ldr	r3, [sp, #8]
    2eb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2eb8:	9a03      	ldr	r2, [sp, #12]
    2eba:	4613      	mov	r3, r2
    2ebc:	009b      	lsls	r3, r3, #2
    2ebe:	4413      	add	r3, r2
    2ec0:	009b      	lsls	r3, r3, #2
    2ec2:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2ec6:	9a01      	ldr	r2, [sp, #4]
    2ec8:	4413      	add	r3, r2
    2eca:	3304      	adds	r3, #4
    2ecc:	9903      	ldr	r1, [sp, #12]
    2ece:	4618      	mov	r0, r3
    2ed0:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2ed2:	9b03      	ldr	r3, [sp, #12]
    2ed4:	3301      	adds	r3, #1
    2ed6:	9303      	str	r3, [sp, #12]
    2ed8:	9b01      	ldr	r3, [sp, #4]
    2eda:	7c5b      	ldrb	r3, [r3, #17]
    2edc:	461a      	mov	r2, r3
    2ede:	9b03      	ldr	r3, [sp, #12]
    2ee0:	4293      	cmp	r3, r2
    2ee2:	d3d0      	bcc.n	2e86 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2ee4:	2300      	movs	r3, #0
    2ee6:	9303      	str	r3, [sp, #12]
    2ee8:	e026      	b.n	2f38 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2eea:	9901      	ldr	r1, [sp, #4]
    2eec:	9a03      	ldr	r2, [sp, #12]
    2eee:	4613      	mov	r3, r2
    2ef0:	005b      	lsls	r3, r3, #1
    2ef2:	4413      	add	r3, r2
    2ef4:	009b      	lsls	r3, r3, #2
    2ef6:	440b      	add	r3, r1
    2ef8:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2efc:	681a      	ldr	r2, [r3, #0]
    2efe:	492c      	ldr	r1, [pc, #176]	; (2fb0 <Clock_Ip_InitClock+0x288>)
    2f00:	4613      	mov	r3, r2
    2f02:	00db      	lsls	r3, r3, #3
    2f04:	4413      	add	r3, r2
    2f06:	440b      	add	r3, r1
    2f08:	3301      	adds	r3, #1
    2f0a:	781b      	ldrb	r3, [r3, #0]
    2f0c:	461a      	mov	r2, r3
    2f0e:	4b31      	ldr	r3, [pc, #196]	; (2fd4 <Clock_Ip_InitClock+0x2ac>)
    2f10:	5c9b      	ldrb	r3, [r3, r2]
    2f12:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2f14:	4a30      	ldr	r2, [pc, #192]	; (2fd8 <Clock_Ip_InitClock+0x2b0>)
    2f16:	9b02      	ldr	r3, [sp, #8]
    2f18:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2f1c:	9a03      	ldr	r2, [sp, #12]
    2f1e:	4613      	mov	r3, r2
    2f20:	005b      	lsls	r3, r3, #1
    2f22:	4413      	add	r3, r2
    2f24:	009b      	lsls	r3, r3, #2
    2f26:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2f2a:	9a01      	ldr	r2, [sp, #4]
    2f2c:	4413      	add	r3, r2
    2f2e:	4618      	mov	r0, r3
    2f30:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2f32:	9b03      	ldr	r3, [sp, #12]
    2f34:	3301      	adds	r3, #1
    2f36:	9303      	str	r3, [sp, #12]
    2f38:	9b01      	ldr	r3, [sp, #4]
    2f3a:	7b5b      	ldrb	r3, [r3, #13]
    2f3c:	461a      	mov	r2, r3
    2f3e:	9b03      	ldr	r3, [sp, #12]
    2f40:	4293      	cmp	r3, r2
    2f42:	d3d2      	bcc.n	2eea <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2f44:	2300      	movs	r3, #0
    2f46:	9303      	str	r3, [sp, #12]
    2f48:	e026      	b.n	2f98 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2f4a:	9901      	ldr	r1, [sp, #4]
    2f4c:	9a03      	ldr	r2, [sp, #12]
    2f4e:	4613      	mov	r3, r2
    2f50:	005b      	lsls	r3, r3, #1
    2f52:	4413      	add	r3, r2
    2f54:	009b      	lsls	r3, r3, #2
    2f56:	440b      	add	r3, r1
    2f58:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2f5c:	681a      	ldr	r2, [r3, #0]
    2f5e:	4914      	ldr	r1, [pc, #80]	; (2fb0 <Clock_Ip_InitClock+0x288>)
    2f60:	4613      	mov	r3, r2
    2f62:	00db      	lsls	r3, r3, #3
    2f64:	4413      	add	r3, r2
    2f66:	440b      	add	r3, r1
    2f68:	3301      	adds	r3, #1
    2f6a:	781b      	ldrb	r3, [r3, #0]
    2f6c:	461a      	mov	r2, r3
    2f6e:	4b1b      	ldr	r3, [pc, #108]	; (2fdc <Clock_Ip_InitClock+0x2b4>)
    2f70:	5c9b      	ldrb	r3, [r3, r2]
    2f72:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2f74:	4a1a      	ldr	r2, [pc, #104]	; (2fe0 <Clock_Ip_InitClock+0x2b8>)
    2f76:	9b02      	ldr	r3, [sp, #8]
    2f78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2f7c:	9a03      	ldr	r2, [sp, #12]
    2f7e:	4613      	mov	r3, r2
    2f80:	005b      	lsls	r3, r3, #1
    2f82:	4413      	add	r3, r2
    2f84:	009b      	lsls	r3, r3, #2
    2f86:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2f8a:	9a01      	ldr	r2, [sp, #4]
    2f8c:	4413      	add	r3, r2
    2f8e:	4618      	mov	r0, r3
    2f90:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2f92:	9b03      	ldr	r3, [sp, #12]
    2f94:	3301      	adds	r3, #1
    2f96:	9303      	str	r3, [sp, #12]
    2f98:	9b01      	ldr	r3, [sp, #4]
    2f9a:	7b1b      	ldrb	r3, [r3, #12]
    2f9c:	461a      	mov	r2, r3
    2f9e:	9b03      	ldr	r3, [sp, #12]
    2fa0:	4293      	cmp	r3, r2
    2fa2:	d3d2      	bcc.n	2f4a <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2fa4:	2300      	movs	r3, #0
    2fa6:	9303      	str	r3, [sp, #12]
    2fa8:	e044      	b.n	3034 <Clock_Ip_InitClock+0x30c>
    2faa:	bf00      	nop
    2fac:	1fff8b78 	.word	0x1fff8b78
    2fb0:	00015d6c 	.word	0x00015d6c
    2fb4:	00015d5c 	.word	0x00015d5c
    2fb8:	00016368 	.word	0x00016368
    2fbc:	00015cfc 	.word	0x00015cfc
    2fc0:	0001632c 	.word	0x0001632c
    2fc4:	00015cec 	.word	0x00015cec
    2fc8:	000162c0 	.word	0x000162c0
    2fcc:	00015d4c 	.word	0x00015d4c
    2fd0:	000163a0 	.word	0x000163a0
    2fd4:	00015cdc 	.word	0x00015cdc
    2fd8:	000162b8 	.word	0x000162b8
    2fdc:	00015ccc 	.word	0x00015ccc
    2fe0:	0001627c 	.word	0x0001627c
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2fe4:	9901      	ldr	r1, [sp, #4]
    2fe6:	9a03      	ldr	r2, [sp, #12]
    2fe8:	4613      	mov	r3, r2
    2fea:	005b      	lsls	r3, r3, #1
    2fec:	4413      	add	r3, r2
    2fee:	009b      	lsls	r3, r3, #2
    2ff0:	440b      	add	r3, r1
    2ff2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2ff6:	681a      	ldr	r2, [r3, #0]
    2ff8:	49ac      	ldr	r1, [pc, #688]	; (32ac <Clock_Ip_InitClock+0x584>)
    2ffa:	4613      	mov	r3, r2
    2ffc:	00db      	lsls	r3, r3, #3
    2ffe:	4413      	add	r3, r2
    3000:	440b      	add	r3, r1
    3002:	3301      	adds	r3, #1
    3004:	781b      	ldrb	r3, [r3, #0]
    3006:	461a      	mov	r2, r3
    3008:	4ba9      	ldr	r3, [pc, #676]	; (32b0 <Clock_Ip_InitClock+0x588>)
    300a:	5c9b      	ldrb	r3, [r3, r2]
    300c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    300e:	4aa9      	ldr	r2, [pc, #676]	; (32b4 <Clock_Ip_InitClock+0x58c>)
    3010:	9b02      	ldr	r3, [sp, #8]
    3012:	00db      	lsls	r3, r3, #3
    3014:	4413      	add	r3, r2
    3016:	6859      	ldr	r1, [r3, #4]
    3018:	9a03      	ldr	r2, [sp, #12]
    301a:	4613      	mov	r3, r2
    301c:	005b      	lsls	r3, r3, #1
    301e:	4413      	add	r3, r2
    3020:	009b      	lsls	r3, r3, #2
    3022:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3026:	9a01      	ldr	r2, [sp, #4]
    3028:	4413      	add	r3, r2
    302a:	4618      	mov	r0, r3
    302c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    302e:	9b03      	ldr	r3, [sp, #12]
    3030:	3301      	adds	r3, #1
    3032:	9303      	str	r3, [sp, #12]
    3034:	9b01      	ldr	r3, [sp, #4]
    3036:	7b5b      	ldrb	r3, [r3, #13]
    3038:	461a      	mov	r2, r3
    303a:	9b03      	ldr	r3, [sp, #12]
    303c:	4293      	cmp	r3, r2
    303e:	d3d1      	bcc.n	2fe4 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    3040:	2300      	movs	r3, #0
    3042:	9303      	str	r3, [sp, #12]
    3044:	e029      	b.n	309a <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    3046:	9901      	ldr	r1, [sp, #4]
    3048:	9a03      	ldr	r2, [sp, #12]
    304a:	4613      	mov	r3, r2
    304c:	009b      	lsls	r3, r3, #2
    304e:	4413      	add	r3, r2
    3050:	00db      	lsls	r3, r3, #3
    3052:	440b      	add	r3, r1
    3054:	3340      	adds	r3, #64	; 0x40
    3056:	681a      	ldr	r2, [r3, #0]
    3058:	4994      	ldr	r1, [pc, #592]	; (32ac <Clock_Ip_InitClock+0x584>)
    305a:	4613      	mov	r3, r2
    305c:	00db      	lsls	r3, r3, #3
    305e:	4413      	add	r3, r2
    3060:	440b      	add	r3, r1
    3062:	3301      	adds	r3, #1
    3064:	781b      	ldrb	r3, [r3, #0]
    3066:	461a      	mov	r2, r3
    3068:	4b93      	ldr	r3, [pc, #588]	; (32b8 <Clock_Ip_InitClock+0x590>)
    306a:	5c9b      	ldrb	r3, [r3, r2]
    306c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    306e:	4993      	ldr	r1, [pc, #588]	; (32bc <Clock_Ip_InitClock+0x594>)
    3070:	9a02      	ldr	r2, [sp, #8]
    3072:	4613      	mov	r3, r2
    3074:	009b      	lsls	r3, r3, #2
    3076:	4413      	add	r3, r2
    3078:	009b      	lsls	r3, r3, #2
    307a:	440b      	add	r3, r1
    307c:	3304      	adds	r3, #4
    307e:	6819      	ldr	r1, [r3, #0]
    3080:	9a03      	ldr	r2, [sp, #12]
    3082:	4613      	mov	r3, r2
    3084:	009b      	lsls	r3, r3, #2
    3086:	4413      	add	r3, r2
    3088:	00db      	lsls	r3, r3, #3
    308a:	3340      	adds	r3, #64	; 0x40
    308c:	9a01      	ldr	r2, [sp, #4]
    308e:	4413      	add	r3, r2
    3090:	4618      	mov	r0, r3
    3092:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    3094:	9b03      	ldr	r3, [sp, #12]
    3096:	3301      	adds	r3, #1
    3098:	9303      	str	r3, [sp, #12]
    309a:	9b01      	ldr	r3, [sp, #4]
    309c:	7a9b      	ldrb	r3, [r3, #10]
    309e:	461a      	mov	r2, r3
    30a0:	9b03      	ldr	r3, [sp, #12]
    30a2:	4293      	cmp	r3, r2
    30a4:	d3cf      	bcc.n	3046 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    30a6:	2300      	movs	r3, #0
    30a8:	9303      	str	r3, [sp, #12]
    30aa:	e029      	b.n	3100 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    30ac:	9901      	ldr	r1, [sp, #4]
    30ae:	9a03      	ldr	r2, [sp, #12]
    30b0:	4613      	mov	r3, r2
    30b2:	009b      	lsls	r3, r3, #2
    30b4:	4413      	add	r3, r2
    30b6:	009b      	lsls	r3, r3, #2
    30b8:	440b      	add	r3, r1
    30ba:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    30be:	681a      	ldr	r2, [r3, #0]
    30c0:	497a      	ldr	r1, [pc, #488]	; (32ac <Clock_Ip_InitClock+0x584>)
    30c2:	4613      	mov	r3, r2
    30c4:	00db      	lsls	r3, r3, #3
    30c6:	4413      	add	r3, r2
    30c8:	440b      	add	r3, r1
    30ca:	3301      	adds	r3, #1
    30cc:	781b      	ldrb	r3, [r3, #0]
    30ce:	461a      	mov	r2, r3
    30d0:	4b7b      	ldr	r3, [pc, #492]	; (32c0 <Clock_Ip_InitClock+0x598>)
    30d2:	5c9b      	ldrb	r3, [r3, r2]
    30d4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    30d6:	4a7b      	ldr	r2, [pc, #492]	; (32c4 <Clock_Ip_InitClock+0x59c>)
    30d8:	9b02      	ldr	r3, [sp, #8]
    30da:	011b      	lsls	r3, r3, #4
    30dc:	4413      	add	r3, r2
    30de:	3304      	adds	r3, #4
    30e0:	681c      	ldr	r4, [r3, #0]
    30e2:	9a03      	ldr	r2, [sp, #12]
    30e4:	4613      	mov	r3, r2
    30e6:	009b      	lsls	r3, r3, #2
    30e8:	4413      	add	r3, r2
    30ea:	009b      	lsls	r3, r3, #2
    30ec:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    30f0:	9a01      	ldr	r2, [sp, #4]
    30f2:	4413      	add	r3, r2
    30f4:	9903      	ldr	r1, [sp, #12]
    30f6:	4618      	mov	r0, r3
    30f8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    30fa:	9b03      	ldr	r3, [sp, #12]
    30fc:	3301      	adds	r3, #1
    30fe:	9303      	str	r3, [sp, #12]
    3100:	9b01      	ldr	r3, [sp, #4]
    3102:	7c9b      	ldrb	r3, [r3, #18]
    3104:	461a      	mov	r2, r3
    3106:	9b03      	ldr	r3, [sp, #12]
    3108:	4293      	cmp	r3, r2
    310a:	d3cf      	bcc.n	30ac <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    310c:	2300      	movs	r3, #0
    310e:	9303      	str	r3, [sp, #12]
    3110:	e02a      	b.n	3168 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    3112:	9901      	ldr	r1, [sp, #4]
    3114:	9a03      	ldr	r2, [sp, #12]
    3116:	4613      	mov	r3, r2
    3118:	009b      	lsls	r3, r3, #2
    311a:	4413      	add	r3, r2
    311c:	009b      	lsls	r3, r3, #2
    311e:	440b      	add	r3, r1
    3120:	332c      	adds	r3, #44	; 0x2c
    3122:	681a      	ldr	r2, [r3, #0]
    3124:	4961      	ldr	r1, [pc, #388]	; (32ac <Clock_Ip_InitClock+0x584>)
    3126:	4613      	mov	r3, r2
    3128:	00db      	lsls	r3, r3, #3
    312a:	4413      	add	r3, r2
    312c:	440b      	add	r3, r1
    312e:	3301      	adds	r3, #1
    3130:	781b      	ldrb	r3, [r3, #0]
    3132:	461a      	mov	r2, r3
    3134:	4b64      	ldr	r3, [pc, #400]	; (32c8 <Clock_Ip_InitClock+0x5a0>)
    3136:	5c9b      	ldrb	r3, [r3, r2]
    3138:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    313a:	4964      	ldr	r1, [pc, #400]	; (32cc <Clock_Ip_InitClock+0x5a4>)
    313c:	9a02      	ldr	r2, [sp, #8]
    313e:	4613      	mov	r3, r2
    3140:	009b      	lsls	r3, r3, #2
    3142:	4413      	add	r3, r2
    3144:	009b      	lsls	r3, r3, #2
    3146:	440b      	add	r3, r1
    3148:	3308      	adds	r3, #8
    314a:	6819      	ldr	r1, [r3, #0]
    314c:	9a03      	ldr	r2, [sp, #12]
    314e:	4613      	mov	r3, r2
    3150:	009b      	lsls	r3, r3, #2
    3152:	4413      	add	r3, r2
    3154:	009b      	lsls	r3, r3, #2
    3156:	3328      	adds	r3, #40	; 0x28
    3158:	9a01      	ldr	r2, [sp, #4]
    315a:	4413      	add	r3, r2
    315c:	3304      	adds	r3, #4
    315e:	4618      	mov	r0, r3
    3160:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    3162:	9b03      	ldr	r3, [sp, #12]
    3164:	3301      	adds	r3, #1
    3166:	9303      	str	r3, [sp, #12]
    3168:	9b01      	ldr	r3, [sp, #4]
    316a:	7a5b      	ldrb	r3, [r3, #9]
    316c:	461a      	mov	r2, r3
    316e:	9b03      	ldr	r3, [sp, #12]
    3170:	4293      	cmp	r3, r2
    3172:	d3ce      	bcc.n	3112 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    3174:	2300      	movs	r3, #0
    3176:	9303      	str	r3, [sp, #12]
    3178:	e029      	b.n	31ce <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    317a:	9901      	ldr	r1, [sp, #4]
    317c:	9a03      	ldr	r2, [sp, #12]
    317e:	4613      	mov	r3, r2
    3180:	009b      	lsls	r3, r3, #2
    3182:	4413      	add	r3, r2
    3184:	00db      	lsls	r3, r3, #3
    3186:	440b      	add	r3, r1
    3188:	3340      	adds	r3, #64	; 0x40
    318a:	681a      	ldr	r2, [r3, #0]
    318c:	4947      	ldr	r1, [pc, #284]	; (32ac <Clock_Ip_InitClock+0x584>)
    318e:	4613      	mov	r3, r2
    3190:	00db      	lsls	r3, r3, #3
    3192:	4413      	add	r3, r2
    3194:	440b      	add	r3, r1
    3196:	3301      	adds	r3, #1
    3198:	781b      	ldrb	r3, [r3, #0]
    319a:	461a      	mov	r2, r3
    319c:	4b46      	ldr	r3, [pc, #280]	; (32b8 <Clock_Ip_InitClock+0x590>)
    319e:	5c9b      	ldrb	r3, [r3, r2]
    31a0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    31a2:	4946      	ldr	r1, [pc, #280]	; (32bc <Clock_Ip_InitClock+0x594>)
    31a4:	9a02      	ldr	r2, [sp, #8]
    31a6:	4613      	mov	r3, r2
    31a8:	009b      	lsls	r3, r3, #2
    31aa:	4413      	add	r3, r2
    31ac:	009b      	lsls	r3, r3, #2
    31ae:	440b      	add	r3, r1
    31b0:	330c      	adds	r3, #12
    31b2:	6819      	ldr	r1, [r3, #0]
    31b4:	9a03      	ldr	r2, [sp, #12]
    31b6:	4613      	mov	r3, r2
    31b8:	009b      	lsls	r3, r3, #2
    31ba:	4413      	add	r3, r2
    31bc:	00db      	lsls	r3, r3, #3
    31be:	3340      	adds	r3, #64	; 0x40
    31c0:	9a01      	ldr	r2, [sp, #4]
    31c2:	4413      	add	r3, r2
    31c4:	4618      	mov	r0, r3
    31c6:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    31c8:	9b03      	ldr	r3, [sp, #12]
    31ca:	3301      	adds	r3, #1
    31cc:	9303      	str	r3, [sp, #12]
    31ce:	9b01      	ldr	r3, [sp, #4]
    31d0:	7a9b      	ldrb	r3, [r3, #10]
    31d2:	461a      	mov	r2, r3
    31d4:	9b03      	ldr	r3, [sp, #12]
    31d6:	4293      	cmp	r3, r2
    31d8:	d3cf      	bcc.n	317a <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    31da:	2300      	movs	r3, #0
    31dc:	9303      	str	r3, [sp, #12]
    31de:	e025      	b.n	322c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    31e0:	9a01      	ldr	r2, [sp, #4]
    31e2:	9b03      	ldr	r3, [sp, #12]
    31e4:	3324      	adds	r3, #36	; 0x24
    31e6:	011b      	lsls	r3, r3, #4
    31e8:	4413      	add	r3, r2
    31ea:	3304      	adds	r3, #4
    31ec:	681a      	ldr	r2, [r3, #0]
    31ee:	492f      	ldr	r1, [pc, #188]	; (32ac <Clock_Ip_InitClock+0x584>)
    31f0:	4613      	mov	r3, r2
    31f2:	00db      	lsls	r3, r3, #3
    31f4:	4413      	add	r3, r2
    31f6:	440b      	add	r3, r1
    31f8:	3301      	adds	r3, #1
    31fa:	781b      	ldrb	r3, [r3, #0]
    31fc:	461a      	mov	r2, r3
    31fe:	4b34      	ldr	r3, [pc, #208]	; (32d0 <Clock_Ip_InitClock+0x5a8>)
    3200:	5c9b      	ldrb	r3, [r3, r2]
    3202:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    3204:	4933      	ldr	r1, [pc, #204]	; (32d4 <Clock_Ip_InitClock+0x5ac>)
    3206:	9a02      	ldr	r2, [sp, #8]
    3208:	4613      	mov	r3, r2
    320a:	005b      	lsls	r3, r3, #1
    320c:	4413      	add	r3, r2
    320e:	009b      	lsls	r3, r3, #2
    3210:	440b      	add	r3, r1
    3212:	3304      	adds	r3, #4
    3214:	681b      	ldr	r3, [r3, #0]
    3216:	9a03      	ldr	r2, [sp, #12]
    3218:	3224      	adds	r2, #36	; 0x24
    321a:	0112      	lsls	r2, r2, #4
    321c:	9901      	ldr	r1, [sp, #4]
    321e:	440a      	add	r2, r1
    3220:	3204      	adds	r2, #4
    3222:	4610      	mov	r0, r2
    3224:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    3226:	9b03      	ldr	r3, [sp, #12]
    3228:	3301      	adds	r3, #1
    322a:	9303      	str	r3, [sp, #12]
    322c:	9b01      	ldr	r3, [sp, #4]
    322e:	7b9b      	ldrb	r3, [r3, #14]
    3230:	461a      	mov	r2, r3
    3232:	9b03      	ldr	r3, [sp, #12]
    3234:	4293      	cmp	r3, r2
    3236:	d3d3      	bcc.n	31e0 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    3238:	4b27      	ldr	r3, [pc, #156]	; (32d8 <Clock_Ip_InitClock+0x5b0>)
    323a:	2200      	movs	r2, #0
    323c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    323e:	4b26      	ldr	r3, [pc, #152]	; (32d8 <Clock_Ip_InitClock+0x5b0>)
    3240:	2200      	movs	r2, #0
    3242:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    3244:	4b24      	ldr	r3, [pc, #144]	; (32d8 <Clock_Ip_InitClock+0x5b0>)
    3246:	2201      	movs	r2, #1
    3248:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    324a:	4b23      	ldr	r3, [pc, #140]	; (32d8 <Clock_Ip_InitClock+0x5b0>)
    324c:	2200      	movs	r2, #0
    324e:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    3250:	f000 fa9c 	bl	378c <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    3254:	2300      	movs	r3, #0
    3256:	9303      	str	r3, [sp, #12]
    3258:	e04c      	b.n	32f4 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    325a:	9a01      	ldr	r2, [sp, #4]
    325c:	9b03      	ldr	r3, [sp, #12]
    325e:	330d      	adds	r3, #13
    3260:	00db      	lsls	r3, r3, #3
    3262:	4413      	add	r3, r2
    3264:	685b      	ldr	r3, [r3, #4]
    3266:	4a1d      	ldr	r2, [pc, #116]	; (32dc <Clock_Ip_InitClock+0x5b4>)
    3268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    326c:	2b03      	cmp	r3, #3
    326e:	d03b      	beq.n	32e8 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3270:	9b01      	ldr	r3, [sp, #4]
    3272:	9a03      	ldr	r2, [sp, #12]
    3274:	320d      	adds	r2, #13
    3276:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    327a:	490c      	ldr	r1, [pc, #48]	; (32ac <Clock_Ip_InitClock+0x584>)
    327c:	4613      	mov	r3, r2
    327e:	00db      	lsls	r3, r3, #3
    3280:	4413      	add	r3, r2
    3282:	440b      	add	r3, r1
    3284:	3301      	adds	r3, #1
    3286:	781b      	ldrb	r3, [r3, #0]
    3288:	461a      	mov	r2, r3
    328a:	4b15      	ldr	r3, [pc, #84]	; (32e0 <Clock_Ip_InitClock+0x5b8>)
    328c:	5c9b      	ldrb	r3, [r3, r2]
    328e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    3290:	4a14      	ldr	r2, [pc, #80]	; (32e4 <Clock_Ip_InitClock+0x5bc>)
    3292:	9b02      	ldr	r3, [sp, #8]
    3294:	00db      	lsls	r3, r3, #3
    3296:	4413      	add	r3, r2
    3298:	685b      	ldr	r3, [r3, #4]
    329a:	9a03      	ldr	r2, [sp, #12]
    329c:	320d      	adds	r2, #13
    329e:	00d2      	lsls	r2, r2, #3
    32a0:	9901      	ldr	r1, [sp, #4]
    32a2:	440a      	add	r2, r1
    32a4:	4610      	mov	r0, r2
    32a6:	4798      	blx	r3
    32a8:	e021      	b.n	32ee <Clock_Ip_InitClock+0x5c6>
    32aa:	bf00      	nop
    32ac:	00015d6c 	.word	0x00015d6c
    32b0:	00015cdc 	.word	0x00015cdc
    32b4:	000162b8 	.word	0x000162b8
    32b8:	00015d2c 	.word	0x00015d2c
    32bc:	00016378 	.word	0x00016378
    32c0:	00015d5c 	.word	0x00015d5c
    32c4:	00016368 	.word	0x00016368
    32c8:	00015cec 	.word	0x00015cec
    32cc:	000162c0 	.word	0x000162c0
    32d0:	00015d1c 	.word	0x00015d1c
    32d4:	000162e8 	.word	0x000162e8
    32d8:	1fff8b80 	.word	0x1fff8b80
    32dc:	000161b8 	.word	0x000161b8
    32e0:	00015d3c 	.word	0x00015d3c
    32e4:	000163a4 	.word	0x000163a4
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    32e8:	4b3a      	ldr	r3, [pc, #232]	; (33d4 <Clock_Ip_InitClock+0x6ac>)
    32ea:	2201      	movs	r2, #1
    32ec:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    32ee:	9b03      	ldr	r3, [sp, #12]
    32f0:	3301      	adds	r3, #1
    32f2:	9303      	str	r3, [sp, #12]
    32f4:	9b01      	ldr	r3, [sp, #4]
    32f6:	7adb      	ldrb	r3, [r3, #11]
    32f8:	461a      	mov	r2, r3
    32fa:	9b03      	ldr	r3, [sp, #12]
    32fc:	4293      	cmp	r3, r2
    32fe:	d3ac      	bcc.n	325a <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    3300:	4b34      	ldr	r3, [pc, #208]	; (33d4 <Clock_Ip_InitClock+0x6ac>)
    3302:	781b      	ldrb	r3, [r3, #0]
    3304:	f083 0301 	eor.w	r3, r3, #1
    3308:	b2db      	uxtb	r3, r3
    330a:	2b00      	cmp	r3, #0
    330c:	d05e      	beq.n	33cc <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    330e:	2300      	movs	r3, #0
    3310:	9303      	str	r3, [sp, #12]
    3312:	e01f      	b.n	3354 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    3314:	9a01      	ldr	r2, [sp, #4]
    3316:	9b03      	ldr	r3, [sp, #12]
    3318:	334e      	adds	r3, #78	; 0x4e
    331a:	00db      	lsls	r3, r3, #3
    331c:	4413      	add	r3, r2
    331e:	685a      	ldr	r2, [r3, #4]
    3320:	492d      	ldr	r1, [pc, #180]	; (33d8 <Clock_Ip_InitClock+0x6b0>)
    3322:	4613      	mov	r3, r2
    3324:	00db      	lsls	r3, r3, #3
    3326:	4413      	add	r3, r2
    3328:	440b      	add	r3, r1
    332a:	3301      	adds	r3, #1
    332c:	781b      	ldrb	r3, [r3, #0]
    332e:	461a      	mov	r2, r3
    3330:	4b2a      	ldr	r3, [pc, #168]	; (33dc <Clock_Ip_InitClock+0x6b4>)
    3332:	5c9b      	ldrb	r3, [r3, r2]
    3334:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    3336:	4a2a      	ldr	r2, [pc, #168]	; (33e0 <Clock_Ip_InitClock+0x6b8>)
    3338:	9b02      	ldr	r3, [sp, #8]
    333a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    333e:	9a03      	ldr	r2, [sp, #12]
    3340:	324e      	adds	r2, #78	; 0x4e
    3342:	00d2      	lsls	r2, r2, #3
    3344:	9901      	ldr	r1, [sp, #4]
    3346:	440a      	add	r2, r1
    3348:	3204      	adds	r2, #4
    334a:	4610      	mov	r0, r2
    334c:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    334e:	9b03      	ldr	r3, [sp, #12]
    3350:	3301      	adds	r3, #1
    3352:	9303      	str	r3, [sp, #12]
    3354:	9b01      	ldr	r3, [sp, #4]
    3356:	7c1b      	ldrb	r3, [r3, #16]
    3358:	461a      	mov	r2, r3
    335a:	9b03      	ldr	r3, [sp, #12]
    335c:	4293      	cmp	r3, r2
    335e:	d3d9      	bcc.n	3314 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    3360:	2300      	movs	r3, #0
    3362:	9303      	str	r3, [sp, #12]
    3364:	e028      	b.n	33b8 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    3366:	9901      	ldr	r1, [sp, #4]
    3368:	9a03      	ldr	r2, [sp, #12]
    336a:	4613      	mov	r3, r2
    336c:	009b      	lsls	r3, r3, #2
    336e:	4413      	add	r3, r2
    3370:	009b      	lsls	r3, r3, #2
    3372:	440b      	add	r3, r1
    3374:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3378:	681a      	ldr	r2, [r3, #0]
    337a:	4917      	ldr	r1, [pc, #92]	; (33d8 <Clock_Ip_InitClock+0x6b0>)
    337c:	4613      	mov	r3, r2
    337e:	00db      	lsls	r3, r3, #3
    3380:	4413      	add	r3, r2
    3382:	440b      	add	r3, r1
    3384:	3301      	adds	r3, #1
    3386:	781b      	ldrb	r3, [r3, #0]
    3388:	461a      	mov	r2, r3
    338a:	4b16      	ldr	r3, [pc, #88]	; (33e4 <Clock_Ip_InitClock+0x6bc>)
    338c:	5c9b      	ldrb	r3, [r3, r2]
    338e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    3390:	4a15      	ldr	r2, [pc, #84]	; (33e8 <Clock_Ip_InitClock+0x6c0>)
    3392:	9b02      	ldr	r3, [sp, #8]
    3394:	011b      	lsls	r3, r3, #4
    3396:	4413      	add	r3, r2
    3398:	330c      	adds	r3, #12
    339a:	6819      	ldr	r1, [r3, #0]
    339c:	9a03      	ldr	r2, [sp, #12]
    339e:	4613      	mov	r3, r2
    33a0:	009b      	lsls	r3, r3, #2
    33a2:	4413      	add	r3, r2
    33a4:	009b      	lsls	r3, r3, #2
    33a6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    33aa:	9a01      	ldr	r2, [sp, #4]
    33ac:	4413      	add	r3, r2
    33ae:	4618      	mov	r0, r3
    33b0:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    33b2:	9b03      	ldr	r3, [sp, #12]
    33b4:	3301      	adds	r3, #1
    33b6:	9303      	str	r3, [sp, #12]
    33b8:	9b01      	ldr	r3, [sp, #4]
    33ba:	7c9b      	ldrb	r3, [r3, #18]
    33bc:	461a      	mov	r2, r3
    33be:	9b03      	ldr	r3, [sp, #12]
    33c0:	4293      	cmp	r3, r2
    33c2:	d3d0      	bcc.n	3366 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    33c4:	2104      	movs	r1, #4
    33c6:	9801      	ldr	r0, [sp, #4]
    33c8:	f002 ff48 	bl	625c <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    33cc:	bf00      	nop
    33ce:	b004      	add	sp, #16
    33d0:	bd10      	pop	{r4, pc}
    33d2:	bf00      	nop
    33d4:	1fff8b80 	.word	0x1fff8b80
    33d8:	00015d6c 	.word	0x00015d6c
    33dc:	00015d0c 	.word	0x00015d0c
    33e0:	000162f4 	.word	0x000162f4
    33e4:	00015d5c 	.word	0x00015d5c
    33e8:	00016368 	.word	0x00016368

000033ec <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    33ec:	b500      	push	{lr}
    33ee:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    33f0:	2302      	movs	r3, #2
    33f2:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    33f4:	2300      	movs	r3, #0
    33f6:	9304      	str	r3, [sp, #16]
    33f8:	e02c      	b.n	3454 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    33fa:	4a36      	ldr	r2, [pc, #216]	; (34d4 <Clock_Ip_GetPllStatus+0xe8>)
    33fc:	9b04      	ldr	r3, [sp, #16]
    33fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3402:	4935      	ldr	r1, [pc, #212]	; (34d8 <Clock_Ip_GetPllStatus+0xec>)
    3404:	4613      	mov	r3, r2
    3406:	00db      	lsls	r3, r3, #3
    3408:	4413      	add	r3, r2
    340a:	440b      	add	r3, r1
    340c:	3301      	adds	r3, #1
    340e:	781b      	ldrb	r3, [r3, #0]
    3410:	461a      	mov	r2, r3
    3412:	4b32      	ldr	r3, [pc, #200]	; (34dc <Clock_Ip_GetPllStatus+0xf0>)
    3414:	5c9b      	ldrb	r3, [r3, r2]
    3416:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    3418:	4931      	ldr	r1, [pc, #196]	; (34e0 <Clock_Ip_GetPllStatus+0xf4>)
    341a:	9a03      	ldr	r2, [sp, #12]
    341c:	4613      	mov	r3, r2
    341e:	009b      	lsls	r3, r3, #2
    3420:	4413      	add	r3, r2
    3422:	009b      	lsls	r3, r3, #2
    3424:	440b      	add	r3, r1
    3426:	3308      	adds	r3, #8
    3428:	681b      	ldr	r3, [r3, #0]
    342a:	492a      	ldr	r1, [pc, #168]	; (34d4 <Clock_Ip_GetPllStatus+0xe8>)
    342c:	9a04      	ldr	r2, [sp, #16]
    342e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    3432:	4610      	mov	r0, r2
    3434:	4798      	blx	r3
    3436:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    3438:	9b02      	ldr	r3, [sp, #8]
    343a:	2b01      	cmp	r3, #1
    343c:	d102      	bne.n	3444 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    343e:	2301      	movs	r3, #1
    3440:	9305      	str	r3, [sp, #20]
            break;
    3442:	e00d      	b.n	3460 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    3444:	9b02      	ldr	r3, [sp, #8]
    3446:	2b02      	cmp	r3, #2
    3448:	d101      	bne.n	344e <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    344a:	2300      	movs	r3, #0
    344c:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    344e:	9b04      	ldr	r3, [sp, #16]
    3450:	3301      	adds	r3, #1
    3452:	9304      	str	r3, [sp, #16]
    3454:	4b23      	ldr	r3, [pc, #140]	; (34e4 <Clock_Ip_GetPllStatus+0xf8>)
    3456:	789b      	ldrb	r3, [r3, #2]
    3458:	461a      	mov	r2, r3
    345a:	9b04      	ldr	r3, [sp, #16]
    345c:	4293      	cmp	r3, r2
    345e:	d3cc      	bcc.n	33fa <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    3460:	9b05      	ldr	r3, [sp, #20]
    3462:	2b00      	cmp	r3, #0
    3464:	d130      	bne.n	34c8 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    3466:	2300      	movs	r3, #0
    3468:	9304      	str	r3, [sp, #16]
    346a:	e027      	b.n	34bc <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    346c:	4a1e      	ldr	r2, [pc, #120]	; (34e8 <Clock_Ip_GetPllStatus+0xfc>)
    346e:	9b04      	ldr	r3, [sp, #16]
    3470:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3474:	4918      	ldr	r1, [pc, #96]	; (34d8 <Clock_Ip_GetPllStatus+0xec>)
    3476:	4613      	mov	r3, r2
    3478:	00db      	lsls	r3, r3, #3
    347a:	4413      	add	r3, r2
    347c:	440b      	add	r3, r1
    347e:	3301      	adds	r3, #1
    3480:	781b      	ldrb	r3, [r3, #0]
    3482:	461a      	mov	r2, r3
    3484:	4b19      	ldr	r3, [pc, #100]	; (34ec <Clock_Ip_GetPllStatus+0x100>)
    3486:	5c9b      	ldrb	r3, [r3, r2]
    3488:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    348a:	4919      	ldr	r1, [pc, #100]	; (34f0 <Clock_Ip_GetPllStatus+0x104>)
    348c:	9a03      	ldr	r2, [sp, #12]
    348e:	4613      	mov	r3, r2
    3490:	005b      	lsls	r3, r3, #1
    3492:	4413      	add	r3, r2
    3494:	009b      	lsls	r3, r3, #2
    3496:	440b      	add	r3, r1
    3498:	3308      	adds	r3, #8
    349a:	681b      	ldr	r3, [r3, #0]
    349c:	4912      	ldr	r1, [pc, #72]	; (34e8 <Clock_Ip_GetPllStatus+0xfc>)
    349e:	9a04      	ldr	r2, [sp, #16]
    34a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    34a4:	4610      	mov	r0, r2
    34a6:	4798      	blx	r3
    34a8:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    34aa:	9b01      	ldr	r3, [sp, #4]
    34ac:	2b01      	cmp	r3, #1
    34ae:	d102      	bne.n	34b6 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    34b0:	2301      	movs	r3, #1
    34b2:	9305      	str	r3, [sp, #20]
                break;
    34b4:	e008      	b.n	34c8 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    34b6:	9b04      	ldr	r3, [sp, #16]
    34b8:	3301      	adds	r3, #1
    34ba:	9304      	str	r3, [sp, #16]
    34bc:	4b09      	ldr	r3, [pc, #36]	; (34e4 <Clock_Ip_GetPllStatus+0xf8>)
    34be:	78db      	ldrb	r3, [r3, #3]
    34c0:	461a      	mov	r2, r3
    34c2:	9b04      	ldr	r3, [sp, #16]
    34c4:	4293      	cmp	r3, r2
    34c6:	d3d1      	bcc.n	346c <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    34c8:	9b05      	ldr	r3, [sp, #20]
}
    34ca:	4618      	mov	r0, r3
    34cc:	b007      	add	sp, #28
    34ce:	f85d fb04 	ldr.w	pc, [sp], #4
    34d2:	bf00      	nop
    34d4:	00016274 	.word	0x00016274
    34d8:	00015d6c 	.word	0x00015d6c
    34dc:	00015d2c 	.word	0x00015d2c
    34e0:	00016378 	.word	0x00016378
    34e4:	1fff8b80 	.word	0x1fff8b80
    34e8:	00016278 	.word	0x00016278
    34ec:	00015d1c 	.word	0x00015d1c
    34f0:	000162e8 	.word	0x000162e8

000034f4 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    34f4:	b500      	push	{lr}
    34f6:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    34f8:	4b55      	ldr	r3, [pc, #340]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    34fa:	681b      	ldr	r3, [r3, #0]
    34fc:	2b00      	cmp	r3, #0
    34fe:	f000 80a2 	beq.w	3646 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    3502:	2300      	movs	r3, #0
    3504:	9301      	str	r3, [sp, #4]
    3506:	e02c      	b.n	3562 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    3508:	4b51      	ldr	r3, [pc, #324]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    350a:	681a      	ldr	r2, [r3, #0]
    350c:	9b01      	ldr	r3, [sp, #4]
    350e:	330d      	adds	r3, #13
    3510:	00db      	lsls	r3, r3, #3
    3512:	4413      	add	r3, r2
    3514:	685b      	ldr	r3, [r3, #4]
    3516:	4a4f      	ldr	r2, [pc, #316]	; (3654 <Clock_Ip_DistributePll+0x160>)
    3518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    351c:	2b03      	cmp	r3, #3
    351e:	d11d      	bne.n	355c <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3520:	4b4b      	ldr	r3, [pc, #300]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    3522:	681b      	ldr	r3, [r3, #0]
    3524:	9a01      	ldr	r2, [sp, #4]
    3526:	320d      	adds	r2, #13
    3528:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    352c:	494a      	ldr	r1, [pc, #296]	; (3658 <Clock_Ip_DistributePll+0x164>)
    352e:	4613      	mov	r3, r2
    3530:	00db      	lsls	r3, r3, #3
    3532:	4413      	add	r3, r2
    3534:	440b      	add	r3, r1
    3536:	3301      	adds	r3, #1
    3538:	781b      	ldrb	r3, [r3, #0]
    353a:	461a      	mov	r2, r3
    353c:	4b47      	ldr	r3, [pc, #284]	; (365c <Clock_Ip_DistributePll+0x168>)
    353e:	5c9b      	ldrb	r3, [r3, r2]
    3540:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    3542:	4a47      	ldr	r2, [pc, #284]	; (3660 <Clock_Ip_DistributePll+0x16c>)
    3544:	9b00      	ldr	r3, [sp, #0]
    3546:	00db      	lsls	r3, r3, #3
    3548:	4413      	add	r3, r2
    354a:	685b      	ldr	r3, [r3, #4]
    354c:	4a40      	ldr	r2, [pc, #256]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    354e:	6811      	ldr	r1, [r2, #0]
    3550:	9a01      	ldr	r2, [sp, #4]
    3552:	320d      	adds	r2, #13
    3554:	00d2      	lsls	r2, r2, #3
    3556:	440a      	add	r2, r1
    3558:	4610      	mov	r0, r2
    355a:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    355c:	9b01      	ldr	r3, [sp, #4]
    355e:	3301      	adds	r3, #1
    3560:	9301      	str	r3, [sp, #4]
    3562:	4b3b      	ldr	r3, [pc, #236]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    3564:	681b      	ldr	r3, [r3, #0]
    3566:	7adb      	ldrb	r3, [r3, #11]
    3568:	461a      	mov	r2, r3
    356a:	9b01      	ldr	r3, [sp, #4]
    356c:	4293      	cmp	r3, r2
    356e:	d3cb      	bcc.n	3508 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    3570:	4b3c      	ldr	r3, [pc, #240]	; (3664 <Clock_Ip_DistributePll+0x170>)
    3572:	781b      	ldrb	r3, [r3, #0]
    3574:	2b00      	cmp	r3, #0
    3576:	d066      	beq.n	3646 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3578:	2300      	movs	r3, #0
    357a:	9301      	str	r3, [sp, #4]
    357c:	e021      	b.n	35c2 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    357e:	4b34      	ldr	r3, [pc, #208]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    3580:	681a      	ldr	r2, [r3, #0]
    3582:	9b01      	ldr	r3, [sp, #4]
    3584:	334e      	adds	r3, #78	; 0x4e
    3586:	00db      	lsls	r3, r3, #3
    3588:	4413      	add	r3, r2
    358a:	685a      	ldr	r2, [r3, #4]
    358c:	4932      	ldr	r1, [pc, #200]	; (3658 <Clock_Ip_DistributePll+0x164>)
    358e:	4613      	mov	r3, r2
    3590:	00db      	lsls	r3, r3, #3
    3592:	4413      	add	r3, r2
    3594:	440b      	add	r3, r1
    3596:	3301      	adds	r3, #1
    3598:	781b      	ldrb	r3, [r3, #0]
    359a:	461a      	mov	r2, r3
    359c:	4b32      	ldr	r3, [pc, #200]	; (3668 <Clock_Ip_DistributePll+0x174>)
    359e:	5c9b      	ldrb	r3, [r3, r2]
    35a0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    35a2:	4a32      	ldr	r2, [pc, #200]	; (366c <Clock_Ip_DistributePll+0x178>)
    35a4:	9b00      	ldr	r3, [sp, #0]
    35a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    35aa:	4a29      	ldr	r2, [pc, #164]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    35ac:	6811      	ldr	r1, [r2, #0]
    35ae:	9a01      	ldr	r2, [sp, #4]
    35b0:	324e      	adds	r2, #78	; 0x4e
    35b2:	00d2      	lsls	r2, r2, #3
    35b4:	440a      	add	r2, r1
    35b6:	3204      	adds	r2, #4
    35b8:	4610      	mov	r0, r2
    35ba:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    35bc:	9b01      	ldr	r3, [sp, #4]
    35be:	3301      	adds	r3, #1
    35c0:	9301      	str	r3, [sp, #4]
    35c2:	4b23      	ldr	r3, [pc, #140]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    35c4:	681b      	ldr	r3, [r3, #0]
    35c6:	7c1b      	ldrb	r3, [r3, #16]
    35c8:	461a      	mov	r2, r3
    35ca:	9b01      	ldr	r3, [sp, #4]
    35cc:	4293      	cmp	r3, r2
    35ce:	d3d6      	bcc.n	357e <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    35d0:	2300      	movs	r3, #0
    35d2:	9301      	str	r3, [sp, #4]
    35d4:	e02a      	b.n	362c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    35d6:	4b1e      	ldr	r3, [pc, #120]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    35d8:	6819      	ldr	r1, [r3, #0]
    35da:	9a01      	ldr	r2, [sp, #4]
    35dc:	4613      	mov	r3, r2
    35de:	009b      	lsls	r3, r3, #2
    35e0:	4413      	add	r3, r2
    35e2:	009b      	lsls	r3, r3, #2
    35e4:	440b      	add	r3, r1
    35e6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    35ea:	681a      	ldr	r2, [r3, #0]
    35ec:	491a      	ldr	r1, [pc, #104]	; (3658 <Clock_Ip_DistributePll+0x164>)
    35ee:	4613      	mov	r3, r2
    35f0:	00db      	lsls	r3, r3, #3
    35f2:	4413      	add	r3, r2
    35f4:	440b      	add	r3, r1
    35f6:	3301      	adds	r3, #1
    35f8:	781b      	ldrb	r3, [r3, #0]
    35fa:	461a      	mov	r2, r3
    35fc:	4b1c      	ldr	r3, [pc, #112]	; (3670 <Clock_Ip_DistributePll+0x17c>)
    35fe:	5c9b      	ldrb	r3, [r3, r2]
    3600:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    3602:	4a1c      	ldr	r2, [pc, #112]	; (3674 <Clock_Ip_DistributePll+0x180>)
    3604:	9b00      	ldr	r3, [sp, #0]
    3606:	011b      	lsls	r3, r3, #4
    3608:	4413      	add	r3, r2
    360a:	330c      	adds	r3, #12
    360c:	6819      	ldr	r1, [r3, #0]
    360e:	4b10      	ldr	r3, [pc, #64]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    3610:	6818      	ldr	r0, [r3, #0]
    3612:	9a01      	ldr	r2, [sp, #4]
    3614:	4613      	mov	r3, r2
    3616:	009b      	lsls	r3, r3, #2
    3618:	4413      	add	r3, r2
    361a:	009b      	lsls	r3, r3, #2
    361c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3620:	4403      	add	r3, r0
    3622:	4618      	mov	r0, r3
    3624:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    3626:	9b01      	ldr	r3, [sp, #4]
    3628:	3301      	adds	r3, #1
    362a:	9301      	str	r3, [sp, #4]
    362c:	4b08      	ldr	r3, [pc, #32]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    362e:	681b      	ldr	r3, [r3, #0]
    3630:	7c9b      	ldrb	r3, [r3, #18]
    3632:	461a      	mov	r2, r3
    3634:	9b01      	ldr	r3, [sp, #4]
    3636:	4293      	cmp	r3, r2
    3638:	d3cd      	bcc.n	35d6 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    363a:	4b05      	ldr	r3, [pc, #20]	; (3650 <Clock_Ip_DistributePll+0x15c>)
    363c:	681b      	ldr	r3, [r3, #0]
    363e:	2104      	movs	r1, #4
    3640:	4618      	mov	r0, r3
    3642:	f002 fe0b 	bl	625c <Clock_Ip_Command>
        }
    }
}
    3646:	bf00      	nop
    3648:	b003      	add	sp, #12
    364a:	f85d fb04 	ldr.w	pc, [sp], #4
    364e:	bf00      	nop
    3650:	1fff8b78 	.word	0x1fff8b78
    3654:	000161b8 	.word	0x000161b8
    3658:	00015d6c 	.word	0x00015d6c
    365c:	00015d3c 	.word	0x00015d3c
    3660:	000163a4 	.word	0x000163a4
    3664:	1fff8b80 	.word	0x1fff8b80
    3668:	00015d0c 	.word	0x00015d0c
    366c:	000162f4 	.word	0x000162f4
    3670:	00015d5c 	.word	0x00015d5c
    3674:	00016368 	.word	0x00016368

00003678 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    3678:	b500      	push	{lr}
    367a:	b085      	sub	sp, #20
    367c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    367e:	490c      	ldr	r1, [pc, #48]	; (36b0 <Clock_Ip_DisableClockMonitor+0x38>)
    3680:	9a01      	ldr	r2, [sp, #4]
    3682:	4613      	mov	r3, r2
    3684:	00db      	lsls	r3, r3, #3
    3686:	4413      	add	r3, r2
    3688:	440b      	add	r3, r1
    368a:	3301      	adds	r3, #1
    368c:	781b      	ldrb	r3, [r3, #0]
    368e:	461a      	mov	r2, r3
    3690:	4b08      	ldr	r3, [pc, #32]	; (36b4 <Clock_Ip_DisableClockMonitor+0x3c>)
    3692:	5c9b      	ldrb	r3, [r3, r2]
    3694:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    3696:	4a08      	ldr	r2, [pc, #32]	; (36b8 <Clock_Ip_DisableClockMonitor+0x40>)
    3698:	9b03      	ldr	r3, [sp, #12]
    369a:	011b      	lsls	r3, r3, #4
    369c:	4413      	add	r3, r2
    369e:	3308      	adds	r3, #8
    36a0:	681b      	ldr	r3, [r3, #0]
    36a2:	9801      	ldr	r0, [sp, #4]
    36a4:	4798      	blx	r3
}
    36a6:	bf00      	nop
    36a8:	b005      	add	sp, #20
    36aa:	f85d fb04 	ldr.w	pc, [sp], #4
    36ae:	bf00      	nop
    36b0:	00015d6c 	.word	0x00015d6c
    36b4:	00015d5c 	.word	0x00015d5c
    36b8:	00016368 	.word	0x00016368

000036bc <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    36bc:	b082      	sub	sp, #8
    36be:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    36c0:	4a02      	ldr	r2, [pc, #8]	; (36cc <Clock_Ip_InstallNotificationsCallback+0x10>)
    36c2:	9b01      	ldr	r3, [sp, #4]
    36c4:	6013      	str	r3, [r2, #0]
}
    36c6:	bf00      	nop
    36c8:	b002      	add	sp, #8
    36ca:	4770      	bx	lr
    36cc:	1fff8b14 	.word	0x1fff8b14

000036d0 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    36d0:	b500      	push	{lr}
    36d2:	b085      	sub	sp, #20
    36d4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    36d6:	490c      	ldr	r1, [pc, #48]	; (3708 <Clock_Ip_DisableModuleClock+0x38>)
    36d8:	9a01      	ldr	r2, [sp, #4]
    36da:	4613      	mov	r3, r2
    36dc:	00db      	lsls	r3, r3, #3
    36de:	4413      	add	r3, r2
    36e0:	440b      	add	r3, r1
    36e2:	3301      	adds	r3, #1
    36e4:	781b      	ldrb	r3, [r3, #0]
    36e6:	461a      	mov	r2, r3
    36e8:	4b08      	ldr	r3, [pc, #32]	; (370c <Clock_Ip_DisableModuleClock+0x3c>)
    36ea:	5c9b      	ldrb	r3, [r3, r2]
    36ec:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    36ee:	4a08      	ldr	r2, [pc, #32]	; (3710 <Clock_Ip_DisableModuleClock+0x40>)
    36f0:	9b03      	ldr	r3, [sp, #12]
    36f2:	00db      	lsls	r3, r3, #3
    36f4:	4413      	add	r3, r2
    36f6:	685b      	ldr	r3, [r3, #4]
    36f8:	2101      	movs	r1, #1
    36fa:	9801      	ldr	r0, [sp, #4]
    36fc:	4798      	blx	r3
}
    36fe:	bf00      	nop
    3700:	b005      	add	sp, #20
    3702:	f85d fb04 	ldr.w	pc, [sp], #4
    3706:	bf00      	nop
    3708:	00015d6c 	.word	0x00015d6c
    370c:	00015d0c 	.word	0x00015d0c
    3710:	000162f4 	.word	0x000162f4

00003714 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    3714:	b500      	push	{lr}
    3716:	b085      	sub	sp, #20
    3718:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    371a:	490c      	ldr	r1, [pc, #48]	; (374c <Clock_Ip_EnableModuleClock+0x38>)
    371c:	9a01      	ldr	r2, [sp, #4]
    371e:	4613      	mov	r3, r2
    3720:	00db      	lsls	r3, r3, #3
    3722:	4413      	add	r3, r2
    3724:	440b      	add	r3, r1
    3726:	3301      	adds	r3, #1
    3728:	781b      	ldrb	r3, [r3, #0]
    372a:	461a      	mov	r2, r3
    372c:	4b08      	ldr	r3, [pc, #32]	; (3750 <Clock_Ip_EnableModuleClock+0x3c>)
    372e:	5c9b      	ldrb	r3, [r3, r2]
    3730:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    3732:	4a08      	ldr	r2, [pc, #32]	; (3754 <Clock_Ip_EnableModuleClock+0x40>)
    3734:	9b03      	ldr	r3, [sp, #12]
    3736:	00db      	lsls	r3, r3, #3
    3738:	4413      	add	r3, r2
    373a:	685b      	ldr	r3, [r3, #4]
    373c:	2100      	movs	r1, #0
    373e:	9801      	ldr	r0, [sp, #4]
    3740:	4798      	blx	r3
}
    3742:	bf00      	nop
    3744:	b005      	add	sp, #20
    3746:	f85d fb04 	ldr.w	pc, [sp], #4
    374a:	bf00      	nop
    374c:	00015d6c 	.word	0x00015d6c
    3750:	00015d0c 	.word	0x00015d0c
    3754:	000162f4 	.word	0x000162f4

00003758 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    3758:	b500      	push	{lr}
    375a:	b083      	sub	sp, #12
    375c:	9001      	str	r0, [sp, #4]
    375e:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    3760:	4b08      	ldr	r3, [pc, #32]	; (3784 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    3762:	2200      	movs	r2, #0
    3764:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    3766:	4b08      	ldr	r3, [pc, #32]	; (3788 <Clock_Ip_PowerModeChangeNotification+0x30>)
    3768:	681b      	ldr	r3, [r3, #0]
    376a:	2102      	movs	r1, #2
    376c:	4618      	mov	r0, r3
    376e:	f002 fd75 	bl	625c <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    3772:	9900      	ldr	r1, [sp, #0]
    3774:	9801      	ldr	r0, [sp, #4]
    3776:	f002 fc51 	bl	601c <Clock_Ip_ClockPowerModeChangeNotification>
}
    377a:	bf00      	nop
    377c:	b003      	add	sp, #12
    377e:	f85d fb04 	ldr.w	pc, [sp], #4
    3782:	bf00      	nop
    3784:	1fff8b10 	.word	0x1fff8b10
    3788:	1fff8b78 	.word	0x1fff8b78

0000378c <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    378c:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    378e:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    3792:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    3794:	4b06      	ldr	r3, [pc, #24]	; (37b0 <Clock_Ip_SetWaitStates+0x24>)
    3796:	785b      	ldrb	r3, [r3, #1]
    3798:	2b00      	cmp	r3, #0
    379a:	d005      	beq.n	37a8 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    379c:	9b01      	ldr	r3, [sp, #4]
    379e:	3b01      	subs	r3, #1
    37a0:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    37a2:	9b01      	ldr	r3, [sp, #4]
    37a4:	2b00      	cmp	r3, #0
    37a6:	d1f9      	bne.n	379c <Clock_Ip_SetWaitStates+0x10>
    }
}
    37a8:	bf00      	nop
    37aa:	b002      	add	sp, #8
    37ac:	4770      	bx	lr
    37ae:	bf00      	nop
    37b0:	1fff8b80 	.word	0x1fff8b80

000037b4 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    37b4:	b500      	push	{lr}
    37b6:	b083      	sub	sp, #12
    37b8:	9001      	str	r0, [sp, #4]
    37ba:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    37bc:	4b04      	ldr	r3, [pc, #16]	; (37d0 <Clock_Ip_ReportClockErrors+0x1c>)
    37be:	681b      	ldr	r3, [r3, #0]
    37c0:	9900      	ldr	r1, [sp, #0]
    37c2:	9801      	ldr	r0, [sp, #4]
    37c4:	4798      	blx	r3
}
    37c6:	bf00      	nop
    37c8:	b003      	add	sp, #12
    37ca:	f85d fb04 	ldr.w	pc, [sp], #4
    37ce:	bf00      	nop
    37d0:	1fff8b14 	.word	0x1fff8b14

000037d4 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    37d4:	b500      	push	{lr}
    37d6:	b085      	sub	sp, #20
    37d8:	9003      	str	r0, [sp, #12]
    37da:	9102      	str	r1, [sp, #8]
    37dc:	9201      	str	r2, [sp, #4]
    37de:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    37e0:	2000      	movs	r0, #0
    37e2:	f7fe ffd1 	bl	2788 <OsIf_GetCounter>
    37e6:	4602      	mov	r2, r0
    37e8:	9b03      	ldr	r3, [sp, #12]
    37ea:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    37ec:	9b02      	ldr	r3, [sp, #8]
    37ee:	2200      	movs	r2, #0
    37f0:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    37f2:	2100      	movs	r1, #0
    37f4:	9800      	ldr	r0, [sp, #0]
    37f6:	f7ff f813 	bl	2820 <OsIf_MicrosToTicks>
    37fa:	4602      	mov	r2, r0
    37fc:	9b01      	ldr	r3, [sp, #4]
    37fe:	601a      	str	r2, [r3, #0]
}
    3800:	bf00      	nop
    3802:	b005      	add	sp, #20
    3804:	f85d fb04 	ldr.w	pc, [sp], #4

00003808 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    3808:	b500      	push	{lr}
    380a:	b087      	sub	sp, #28
    380c:	9003      	str	r0, [sp, #12]
    380e:	9102      	str	r1, [sp, #8]
    3810:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    3812:	2300      	movs	r3, #0
    3814:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    3818:	2100      	movs	r1, #0
    381a:	9803      	ldr	r0, [sp, #12]
    381c:	f7fe ffcd 	bl	27ba <OsIf_GetElapsed>
    3820:	4602      	mov	r2, r0
    3822:	9b02      	ldr	r3, [sp, #8]
    3824:	681b      	ldr	r3, [r3, #0]
    3826:	441a      	add	r2, r3
    3828:	9b02      	ldr	r3, [sp, #8]
    382a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    382c:	9b02      	ldr	r3, [sp, #8]
    382e:	681b      	ldr	r3, [r3, #0]
    3830:	9a01      	ldr	r2, [sp, #4]
    3832:	429a      	cmp	r2, r3
    3834:	d802      	bhi.n	383c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    3836:	2301      	movs	r3, #1
    3838:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    383c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    3840:	4618      	mov	r0, r3
    3842:	b007      	add	sp, #28
    3844:	f85d fb04 	ldr.w	pc, [sp], #4

00003848 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    3848:	b082      	sub	sp, #8
    384a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    384c:	bf00      	nop
    384e:	b002      	add	sp, #8
    3850:	4770      	bx	lr

00003852 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    3852:	b500      	push	{lr}
    3854:	b083      	sub	sp, #12
    3856:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3858:	9b01      	ldr	r3, [sp, #4]
    385a:	2b00      	cmp	r3, #0
    385c:	d002      	beq.n	3864 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    385e:	9801      	ldr	r0, [sp, #4]
    3860:	f000 f8ad 	bl	39be <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3864:	bf00      	nop
    3866:	b003      	add	sp, #12
    3868:	f85d fb04 	ldr.w	pc, [sp], #4

0000386c <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    386c:	b500      	push	{lr}
    386e:	b083      	sub	sp, #12
    3870:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3872:	9b01      	ldr	r3, [sp, #4]
    3874:	2b00      	cmp	r3, #0
    3876:	d002      	beq.n	387e <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    3878:	9801      	ldr	r0, [sp, #4]
    387a:	f000 f8cd 	bl	3a18 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    387e:	bf00      	nop
    3880:	b003      	add	sp, #12
    3882:	f85d fb04 	ldr.w	pc, [sp], #4

00003886 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3886:	b500      	push	{lr}
    3888:	b083      	sub	sp, #12
    388a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    388c:	9b01      	ldr	r3, [sp, #4]
    388e:	2b00      	cmp	r3, #0
    3890:	d002      	beq.n	3898 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    3892:	9801      	ldr	r0, [sp, #4]
    3894:	f000 f8ee 	bl	3a74 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3898:	bf00      	nop
    389a:	b003      	add	sp, #12
    389c:	f85d fb04 	ldr.w	pc, [sp], #4

000038a0 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    38a0:	b500      	push	{lr}
    38a2:	b083      	sub	sp, #12
    38a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38a6:	9b01      	ldr	r3, [sp, #4]
    38a8:	2b00      	cmp	r3, #0
    38aa:	d002      	beq.n	38b2 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    38ac:	9801      	ldr	r0, [sp, #4]
    38ae:	f000 f8f9 	bl	3aa4 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38b2:	bf00      	nop
    38b4:	b003      	add	sp, #12
    38b6:	f85d fb04 	ldr.w	pc, [sp], #4

000038ba <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    38ba:	b500      	push	{lr}
    38bc:	b083      	sub	sp, #12
    38be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38c0:	9b01      	ldr	r3, [sp, #4]
    38c2:	2b00      	cmp	r3, #0
    38c4:	d002      	beq.n	38cc <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    38c6:	9801      	ldr	r0, [sp, #4]
    38c8:	f000 f904 	bl	3ad4 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38cc:	bf00      	nop
    38ce:	b003      	add	sp, #12
    38d0:	f85d fb04 	ldr.w	pc, [sp], #4

000038d4 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    38d4:	b500      	push	{lr}
    38d6:	b083      	sub	sp, #12
    38d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38da:	9b01      	ldr	r3, [sp, #4]
    38dc:	2b00      	cmp	r3, #0
    38de:	d002      	beq.n	38e6 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    38e0:	9801      	ldr	r0, [sp, #4]
    38e2:	f000 f90f 	bl	3b04 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38e6:	bf00      	nop
    38e8:	b003      	add	sp, #12
    38ea:	f85d fb04 	ldr.w	pc, [sp], #4

000038ee <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    38ee:	b500      	push	{lr}
    38f0:	b083      	sub	sp, #12
    38f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38f4:	9b01      	ldr	r3, [sp, #4]
    38f6:	2b00      	cmp	r3, #0
    38f8:	d002      	beq.n	3900 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    38fa:	9801      	ldr	r0, [sp, #4]
    38fc:	f000 f91a 	bl	3b34 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3900:	bf00      	nop
    3902:	b003      	add	sp, #12
    3904:	f85d fb04 	ldr.w	pc, [sp], #4

00003908 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3908:	b500      	push	{lr}
    390a:	b083      	sub	sp, #12
    390c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    390e:	9b01      	ldr	r3, [sp, #4]
    3910:	2b00      	cmp	r3, #0
    3912:	d002      	beq.n	391a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3914:	9801      	ldr	r0, [sp, #4]
    3916:	f000 f925 	bl	3b64 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    391a:	bf00      	nop
    391c:	b003      	add	sp, #12
    391e:	f85d fb04 	ldr.w	pc, [sp], #4

00003922 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3922:	b500      	push	{lr}
    3924:	b083      	sub	sp, #12
    3926:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3928:	9b01      	ldr	r3, [sp, #4]
    392a:	2b00      	cmp	r3, #0
    392c:	d002      	beq.n	3934 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    392e:	9801      	ldr	r0, [sp, #4]
    3930:	f000 f930 	bl	3b94 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3934:	bf00      	nop
    3936:	b003      	add	sp, #12
    3938:	f85d fb04 	ldr.w	pc, [sp], #4

0000393c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    393c:	b500      	push	{lr}
    393e:	b083      	sub	sp, #12
    3940:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3942:	9b01      	ldr	r3, [sp, #4]
    3944:	2b00      	cmp	r3, #0
    3946:	d002      	beq.n	394e <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    3948:	9801      	ldr	r0, [sp, #4]
    394a:	f000 f93b 	bl	3bc4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    394e:	bf00      	nop
    3950:	b003      	add	sp, #12
    3952:	f85d fb04 	ldr.w	pc, [sp], #4

00003956 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3956:	b500      	push	{lr}
    3958:	b083      	sub	sp, #12
    395a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    395c:	9b01      	ldr	r3, [sp, #4]
    395e:	2b00      	cmp	r3, #0
    3960:	d002      	beq.n	3968 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    3962:	9801      	ldr	r0, [sp, #4]
    3964:	f000 f946 	bl	3bf4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3968:	bf00      	nop
    396a:	b003      	add	sp, #12
    396c:	f85d fb04 	ldr.w	pc, [sp], #4

00003970 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    3970:	b500      	push	{lr}
    3972:	b083      	sub	sp, #12
    3974:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3976:	9b01      	ldr	r3, [sp, #4]
    3978:	2b00      	cmp	r3, #0
    397a:	d002      	beq.n	3982 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    397c:	9801      	ldr	r0, [sp, #4]
    397e:	f000 f951 	bl	3c24 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3982:	bf00      	nop
    3984:	b003      	add	sp, #12
    3986:	f85d fb04 	ldr.w	pc, [sp], #4

0000398a <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    398a:	b500      	push	{lr}
    398c:	b083      	sub	sp, #12
    398e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3990:	9b01      	ldr	r3, [sp, #4]
    3992:	2b00      	cmp	r3, #0
    3994:	d002      	beq.n	399c <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    3996:	9801      	ldr	r0, [sp, #4]
    3998:	f000 f95e 	bl	3c58 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    399c:	bf00      	nop
    399e:	b003      	add	sp, #12
    39a0:	f85d fb04 	ldr.w	pc, [sp], #4

000039a4 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    39a4:	b500      	push	{lr}
    39a6:	b083      	sub	sp, #12
    39a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39aa:	9b01      	ldr	r3, [sp, #4]
    39ac:	2b00      	cmp	r3, #0
    39ae:	d002      	beq.n	39b6 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    39b0:	9801      	ldr	r0, [sp, #4]
    39b2:	f000 f98b 	bl	3ccc <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39b6:	bf00      	nop
    39b8:	b003      	add	sp, #12
    39ba:	f85d fb04 	ldr.w	pc, [sp], #4

000039be <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    39be:	b086      	sub	sp, #24
    39c0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    39c2:	9b01      	ldr	r3, [sp, #4]
    39c4:	681a      	ldr	r2, [r3, #0]
    39c6:	4911      	ldr	r1, [pc, #68]	; (3a0c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    39c8:	4613      	mov	r3, r2
    39ca:	00db      	lsls	r3, r3, #3
    39cc:	4413      	add	r3, r2
    39ce:	440b      	add	r3, r1
    39d0:	781b      	ldrb	r3, [r3, #0]
    39d2:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    39d4:	9b01      	ldr	r3, [sp, #4]
    39d6:	685b      	ldr	r3, [r3, #4]
    39d8:	4a0d      	ldr	r2, [pc, #52]	; (3a10 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    39da:	5cd3      	ldrb	r3, [r2, r3]
    39dc:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    39de:	4a0d      	ldr	r2, [pc, #52]	; (3a14 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    39e0:	9b05      	ldr	r3, [sp, #20]
    39e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    39e6:	681b      	ldr	r3, [r3, #0]
    39e8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    39ea:	9b03      	ldr	r3, [sp, #12]
    39ec:	f023 0307 	bic.w	r3, r3, #7
    39f0:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    39f2:	9a03      	ldr	r2, [sp, #12]
    39f4:	9b04      	ldr	r3, [sp, #16]
    39f6:	4313      	orrs	r3, r2
    39f8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    39fa:	4a06      	ldr	r2, [pc, #24]	; (3a14 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    39fc:	9b05      	ldr	r3, [sp, #20]
    39fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a02:	9a03      	ldr	r2, [sp, #12]
    3a04:	601a      	str	r2, [r3, #0]
}
    3a06:	bf00      	nop
    3a08:	b006      	add	sp, #24
    3a0a:	4770      	bx	lr
    3a0c:	00015d6c 	.word	0x00015d6c
    3a10:	00016164 	.word	0x00016164
    3a14:	000161a8 	.word	0x000161a8

00003a18 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3a18:	b086      	sub	sp, #24
    3a1a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3a1c:	9b01      	ldr	r3, [sp, #4]
    3a1e:	681a      	ldr	r2, [r3, #0]
    3a20:	4911      	ldr	r1, [pc, #68]	; (3a68 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3a22:	4613      	mov	r3, r2
    3a24:	00db      	lsls	r3, r3, #3
    3a26:	4413      	add	r3, r2
    3a28:	440b      	add	r3, r1
    3a2a:	781b      	ldrb	r3, [r3, #0]
    3a2c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3a2e:	9b01      	ldr	r3, [sp, #4]
    3a30:	685b      	ldr	r3, [r3, #4]
    3a32:	4a0e      	ldr	r2, [pc, #56]	; (3a6c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3a34:	5cd3      	ldrb	r3, [r2, r3]
    3a36:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3a38:	4a0d      	ldr	r2, [pc, #52]	; (3a70 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3a3a:	9b05      	ldr	r3, [sp, #20]
    3a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a40:	681b      	ldr	r3, [r3, #0]
    3a42:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3a44:	9b03      	ldr	r3, [sp, #12]
    3a46:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3a4a:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3a4c:	9b04      	ldr	r3, [sp, #16]
    3a4e:	021b      	lsls	r3, r3, #8
    3a50:	9a03      	ldr	r2, [sp, #12]
    3a52:	4313      	orrs	r3, r2
    3a54:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3a56:	4a06      	ldr	r2, [pc, #24]	; (3a70 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3a58:	9b05      	ldr	r3, [sp, #20]
    3a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a5e:	9a03      	ldr	r2, [sp, #12]
    3a60:	601a      	str	r2, [r3, #0]
}
    3a62:	bf00      	nop
    3a64:	b006      	add	sp, #24
    3a66:	4770      	bx	lr
    3a68:	00015d6c 	.word	0x00015d6c
    3a6c:	00016164 	.word	0x00016164
    3a70:	000161a8 	.word	0x000161a8

00003a74 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3a74:	b084      	sub	sp, #16
    3a76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3a78:	4b09      	ldr	r3, [pc, #36]	; (3aa0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3a7a:	695b      	ldr	r3, [r3, #20]
    3a7c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3a7e:	9b03      	ldr	r3, [sp, #12]
    3a80:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3a84:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    3a86:	9b01      	ldr	r3, [sp, #4]
    3a88:	685b      	ldr	r3, [r3, #4]
    3a8a:	3b01      	subs	r3, #1
    3a8c:	041b      	lsls	r3, r3, #16
    3a8e:	9a03      	ldr	r2, [sp, #12]
    3a90:	4313      	orrs	r3, r2
    3a92:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3a94:	4a02      	ldr	r2, [pc, #8]	; (3aa0 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3a96:	9b03      	ldr	r3, [sp, #12]
    3a98:	6153      	str	r3, [r2, #20]
}
    3a9a:	bf00      	nop
    3a9c:	b004      	add	sp, #16
    3a9e:	4770      	bx	lr
    3aa0:	40064000 	.word	0x40064000

00003aa4 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3aa4:	b084      	sub	sp, #16
    3aa6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3aa8:	4b09      	ldr	r3, [pc, #36]	; (3ad0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3aaa:	695b      	ldr	r3, [r3, #20]
    3aac:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3aae:	9b03      	ldr	r3, [sp, #12]
    3ab0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3ab4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    3ab6:	9b01      	ldr	r3, [sp, #4]
    3ab8:	685b      	ldr	r3, [r3, #4]
    3aba:	3b01      	subs	r3, #1
    3abc:	011b      	lsls	r3, r3, #4
    3abe:	9a03      	ldr	r2, [sp, #12]
    3ac0:	4313      	orrs	r3, r2
    3ac2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3ac4:	4a02      	ldr	r2, [pc, #8]	; (3ad0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3ac6:	9b03      	ldr	r3, [sp, #12]
    3ac8:	6153      	str	r3, [r2, #20]
}
    3aca:	bf00      	nop
    3acc:	b004      	add	sp, #16
    3ace:	4770      	bx	lr
    3ad0:	40064000 	.word	0x40064000

00003ad4 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ad4:	b084      	sub	sp, #16
    3ad6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3ad8:	4b09      	ldr	r3, [pc, #36]	; (3b00 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3ada:	695b      	ldr	r3, [r3, #20]
    3adc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3ade:	9b03      	ldr	r3, [sp, #12]
    3ae0:	f023 030f 	bic.w	r3, r3, #15
    3ae4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    3ae6:	9b01      	ldr	r3, [sp, #4]
    3ae8:	685b      	ldr	r3, [r3, #4]
    3aea:	3b01      	subs	r3, #1
    3aec:	9a03      	ldr	r2, [sp, #12]
    3aee:	4313      	orrs	r3, r2
    3af0:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3af2:	4a03      	ldr	r2, [pc, #12]	; (3b00 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3af4:	9b03      	ldr	r3, [sp, #12]
    3af6:	6153      	str	r3, [r2, #20]
}
    3af8:	bf00      	nop
    3afa:	b004      	add	sp, #16
    3afc:	4770      	bx	lr
    3afe:	bf00      	nop
    3b00:	40064000 	.word	0x40064000

00003b04 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b04:	b084      	sub	sp, #16
    3b06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3b08:	4b09      	ldr	r3, [pc, #36]	; (3b30 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3b0a:	699b      	ldr	r3, [r3, #24]
    3b0c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3b0e:	9b03      	ldr	r3, [sp, #12]
    3b10:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3b14:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    3b16:	9b01      	ldr	r3, [sp, #4]
    3b18:	685b      	ldr	r3, [r3, #4]
    3b1a:	3b01      	subs	r3, #1
    3b1c:	041b      	lsls	r3, r3, #16
    3b1e:	9a03      	ldr	r2, [sp, #12]
    3b20:	4313      	orrs	r3, r2
    3b22:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3b24:	4a02      	ldr	r2, [pc, #8]	; (3b30 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3b26:	9b03      	ldr	r3, [sp, #12]
    3b28:	6193      	str	r3, [r2, #24]
}
    3b2a:	bf00      	nop
    3b2c:	b004      	add	sp, #16
    3b2e:	4770      	bx	lr
    3b30:	40064000 	.word	0x40064000

00003b34 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b34:	b084      	sub	sp, #16
    3b36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3b38:	4b09      	ldr	r3, [pc, #36]	; (3b60 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3b3a:	699b      	ldr	r3, [r3, #24]
    3b3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3b3e:	9b03      	ldr	r3, [sp, #12]
    3b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3b44:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    3b46:	9b01      	ldr	r3, [sp, #4]
    3b48:	685b      	ldr	r3, [r3, #4]
    3b4a:	3b01      	subs	r3, #1
    3b4c:	011b      	lsls	r3, r3, #4
    3b4e:	9a03      	ldr	r2, [sp, #12]
    3b50:	4313      	orrs	r3, r2
    3b52:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3b54:	4a02      	ldr	r2, [pc, #8]	; (3b60 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3b56:	9b03      	ldr	r3, [sp, #12]
    3b58:	6193      	str	r3, [r2, #24]
}
    3b5a:	bf00      	nop
    3b5c:	b004      	add	sp, #16
    3b5e:	4770      	bx	lr
    3b60:	40064000 	.word	0x40064000

00003b64 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b64:	b084      	sub	sp, #16
    3b66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3b68:	4b09      	ldr	r3, [pc, #36]	; (3b90 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3b6a:	699b      	ldr	r3, [r3, #24]
    3b6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3b6e:	9b03      	ldr	r3, [sp, #12]
    3b70:	f023 030f 	bic.w	r3, r3, #15
    3b74:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    3b76:	9b01      	ldr	r3, [sp, #4]
    3b78:	685b      	ldr	r3, [r3, #4]
    3b7a:	3b01      	subs	r3, #1
    3b7c:	9a03      	ldr	r2, [sp, #12]
    3b7e:	4313      	orrs	r3, r2
    3b80:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3b82:	4a03      	ldr	r2, [pc, #12]	; (3b90 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3b84:	9b03      	ldr	r3, [sp, #12]
    3b86:	6193      	str	r3, [r2, #24]
}
    3b88:	bf00      	nop
    3b8a:	b004      	add	sp, #16
    3b8c:	4770      	bx	lr
    3b8e:	bf00      	nop
    3b90:	40064000 	.word	0x40064000

00003b94 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b94:	b084      	sub	sp, #16
    3b96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3b98:	4b09      	ldr	r3, [pc, #36]	; (3bc0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3b9a:	69db      	ldr	r3, [r3, #28]
    3b9c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3b9e:	9b03      	ldr	r3, [sp, #12]
    3ba0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3ba4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    3ba6:	9b01      	ldr	r3, [sp, #4]
    3ba8:	685b      	ldr	r3, [r3, #4]
    3baa:	3b01      	subs	r3, #1
    3bac:	041b      	lsls	r3, r3, #16
    3bae:	9a03      	ldr	r2, [sp, #12]
    3bb0:	4313      	orrs	r3, r2
    3bb2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3bb4:	4a02      	ldr	r2, [pc, #8]	; (3bc0 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3bb6:	9b03      	ldr	r3, [sp, #12]
    3bb8:	61d3      	str	r3, [r2, #28]
}
    3bba:	bf00      	nop
    3bbc:	b004      	add	sp, #16
    3bbe:	4770      	bx	lr
    3bc0:	40064000 	.word	0x40064000

00003bc4 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3bc4:	b084      	sub	sp, #16
    3bc6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3bc8:	4b09      	ldr	r3, [pc, #36]	; (3bf0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3bca:	69db      	ldr	r3, [r3, #28]
    3bcc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3bce:	9b03      	ldr	r3, [sp, #12]
    3bd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3bd4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    3bd6:	9b01      	ldr	r3, [sp, #4]
    3bd8:	685b      	ldr	r3, [r3, #4]
    3bda:	3b01      	subs	r3, #1
    3bdc:	011b      	lsls	r3, r3, #4
    3bde:	9a03      	ldr	r2, [sp, #12]
    3be0:	4313      	orrs	r3, r2
    3be2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3be4:	4a02      	ldr	r2, [pc, #8]	; (3bf0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3be6:	9b03      	ldr	r3, [sp, #12]
    3be8:	61d3      	str	r3, [r2, #28]
}
    3bea:	bf00      	nop
    3bec:	b004      	add	sp, #16
    3bee:	4770      	bx	lr
    3bf0:	40064000 	.word	0x40064000

00003bf4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3bf4:	b084      	sub	sp, #16
    3bf6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3bf8:	4b09      	ldr	r3, [pc, #36]	; (3c20 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3bfa:	69db      	ldr	r3, [r3, #28]
    3bfc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3bfe:	9b03      	ldr	r3, [sp, #12]
    3c00:	f023 030f 	bic.w	r3, r3, #15
    3c04:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3c06:	9b01      	ldr	r3, [sp, #4]
    3c08:	685b      	ldr	r3, [r3, #4]
    3c0a:	3b01      	subs	r3, #1
    3c0c:	9a03      	ldr	r2, [sp, #12]
    3c0e:	4313      	orrs	r3, r2
    3c10:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3c12:	4a03      	ldr	r2, [pc, #12]	; (3c20 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3c14:	9b03      	ldr	r3, [sp, #12]
    3c16:	61d3      	str	r3, [r2, #28]
}
    3c18:	bf00      	nop
    3c1a:	b004      	add	sp, #16
    3c1c:	4770      	bx	lr
    3c1e:	bf00      	nop
    3c20:	40064000 	.word	0x40064000

00003c24 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3c24:	b084      	sub	sp, #16
    3c26:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3c28:	4b0a      	ldr	r3, [pc, #40]	; (3c54 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3c2a:	685b      	ldr	r3, [r3, #4]
    3c2c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3c2e:	9b03      	ldr	r3, [sp, #12]
    3c30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3c34:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3c36:	9b01      	ldr	r3, [sp, #4]
    3c38:	685b      	ldr	r3, [r3, #4]
    3c3a:	3b01      	subs	r3, #1
    3c3c:	021b      	lsls	r3, r3, #8
    3c3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3c42:	9a03      	ldr	r2, [sp, #12]
    3c44:	4313      	orrs	r3, r2
    3c46:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3c48:	4a02      	ldr	r2, [pc, #8]	; (3c54 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3c4a:	9b03      	ldr	r3, [sp, #12]
    3c4c:	6053      	str	r3, [r2, #4]
}
    3c4e:	bf00      	nop
    3c50:	b004      	add	sp, #16
    3c52:	4770      	bx	lr
    3c54:	40048000 	.word	0x40048000

00003c58 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3c58:	b084      	sub	sp, #16
    3c5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3c5c:	4919      	ldr	r1, [pc, #100]	; (3cc4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3c5e:	9b01      	ldr	r3, [sp, #4]
    3c60:	681a      	ldr	r2, [r3, #0]
    3c62:	4819      	ldr	r0, [pc, #100]	; (3cc8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3c64:	4613      	mov	r3, r2
    3c66:	00db      	lsls	r3, r3, #3
    3c68:	4413      	add	r3, r2
    3c6a:	4403      	add	r3, r0
    3c6c:	3305      	adds	r3, #5
    3c6e:	781b      	ldrb	r3, [r3, #0]
    3c70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3c74:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    3c76:	9b03      	ldr	r3, [sp, #12]
    3c78:	f023 030f 	bic.w	r3, r3, #15
    3c7c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3c7e:	9b01      	ldr	r3, [sp, #4]
    3c80:	685b      	ldr	r3, [r3, #4]
    3c82:	3b01      	subs	r3, #1
    3c84:	f003 0307 	and.w	r3, r3, #7
    3c88:	9a03      	ldr	r2, [sp, #12]
    3c8a:	4313      	orrs	r3, r2
    3c8c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3c8e:	9b01      	ldr	r3, [sp, #4]
    3c90:	7a1b      	ldrb	r3, [r3, #8]
    3c92:	3b01      	subs	r3, #1
    3c94:	00db      	lsls	r3, r3, #3
    3c96:	f003 0308 	and.w	r3, r3, #8
    3c9a:	9a03      	ldr	r2, [sp, #12]
    3c9c:	4313      	orrs	r3, r2
    3c9e:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3ca0:	4908      	ldr	r1, [pc, #32]	; (3cc4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3ca2:	9b01      	ldr	r3, [sp, #4]
    3ca4:	681a      	ldr	r2, [r3, #0]
    3ca6:	4808      	ldr	r0, [pc, #32]	; (3cc8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3ca8:	4613      	mov	r3, r2
    3caa:	00db      	lsls	r3, r3, #3
    3cac:	4413      	add	r3, r2
    3cae:	4403      	add	r3, r0
    3cb0:	3305      	adds	r3, #5
    3cb2:	781b      	ldrb	r3, [r3, #0]
    3cb4:	461a      	mov	r2, r3
    3cb6:	9b03      	ldr	r3, [sp, #12]
    3cb8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3cbc:	bf00      	nop
    3cbe:	b004      	add	sp, #16
    3cc0:	4770      	bx	lr
    3cc2:	bf00      	nop
    3cc4:	40065000 	.word	0x40065000
    3cc8:	00015d6c 	.word	0x00015d6c

00003ccc <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ccc:	b084      	sub	sp, #16
    3cce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3cd0:	4b10      	ldr	r3, [pc, #64]	; (3d14 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3cd4:	4a0f      	ldr	r2, [pc, #60]	; (3d14 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3cda:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3cdc:	4b0d      	ldr	r3, [pc, #52]	; (3d14 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3ce0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3ce2:	9b03      	ldr	r3, [sp, #12]
    3ce4:	f023 030f 	bic.w	r3, r3, #15
    3ce8:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3cea:	9b01      	ldr	r3, [sp, #4]
    3cec:	685b      	ldr	r3, [r3, #4]
    3cee:	3b01      	subs	r3, #1
    3cf0:	005b      	lsls	r3, r3, #1
    3cf2:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3cf6:	9b01      	ldr	r3, [sp, #4]
    3cf8:	7a1b      	ldrb	r3, [r3, #8]
    3cfa:	3b01      	subs	r3, #1
    3cfc:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3d00:	4313      	orrs	r3, r2
    3d02:	9a03      	ldr	r2, [sp, #12]
    3d04:	4313      	orrs	r3, r2
    3d06:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3d08:	4a02      	ldr	r2, [pc, #8]	; (3d14 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3d0a:	9b03      	ldr	r3, [sp, #12]
    3d0c:	6693      	str	r3, [r2, #104]	; 0x68
}
    3d0e:	bf00      	nop
    3d10:	b004      	add	sp, #16
    3d12:	4770      	bx	lr
    3d14:	40048000 	.word	0x40048000

00003d18 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3d18:	b082      	sub	sp, #8
    3d1a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d1c:	bf00      	nop
    3d1e:	b002      	add	sp, #8
    3d20:	4770      	bx	lr
	...

00003d24 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3d24:	b082      	sub	sp, #8
    3d26:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d28:	bf00      	nop
    3d2a:	b002      	add	sp, #8
    3d2c:	4770      	bx	lr

00003d2e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3d2e:	b082      	sub	sp, #8
    3d30:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3d32:	bf00      	nop
    3d34:	b002      	add	sp, #8
    3d36:	4770      	bx	lr

00003d38 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3d38:	b500      	push	{lr}
    3d3a:	b083      	sub	sp, #12
    3d3c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d3e:	9b01      	ldr	r3, [sp, #4]
    3d40:	2b00      	cmp	r3, #0
    3d42:	d002      	beq.n	3d4a <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3d44:	9801      	ldr	r0, [sp, #4]
    3d46:	f000 f86a 	bl	3e1e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d4a:	bf00      	nop
    3d4c:	b003      	add	sp, #12
    3d4e:	f85d fb04 	ldr.w	pc, [sp], #4

00003d52 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3d52:	b500      	push	{lr}
    3d54:	b083      	sub	sp, #12
    3d56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d58:	9b01      	ldr	r3, [sp, #4]
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d002      	beq.n	3d64 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3d5e:	9801      	ldr	r0, [sp, #4]
    3d60:	f000 f884 	bl	3e6c <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3d64:	bf00      	nop
    3d66:	b003      	add	sp, #12
    3d68:	f85d fb04 	ldr.w	pc, [sp], #4

00003d6c <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3d6c:	b500      	push	{lr}
    3d6e:	b089      	sub	sp, #36	; 0x24
    3d70:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3d72:	2300      	movs	r3, #0
    3d74:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3d78:	9b01      	ldr	r3, [sp, #4]
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d031      	beq.n	3de2 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3d7e:	4b1b      	ldr	r3, [pc, #108]	; (3dec <Clock_Ip_CompleteSOSC+0x80>)
    3d80:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3d84:	f003 0301 	and.w	r3, r3, #1
    3d88:	2b00      	cmp	r3, #0
    3d8a:	d02a      	beq.n	3de2 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d8c:	aa03      	add	r2, sp, #12
    3d8e:	a904      	add	r1, sp, #16
    3d90:	a805      	add	r0, sp, #20
    3d92:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d96:	f7ff fd1d 	bl	37d4 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3d9a:	4b14      	ldr	r3, [pc, #80]	; (3dec <Clock_Ip_CompleteSOSC+0x80>)
    3d9c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3da0:	0e1b      	lsrs	r3, r3, #24
    3da2:	f003 0301 	and.w	r3, r3, #1
    3da6:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3da8:	9a03      	ldr	r2, [sp, #12]
    3daa:	a904      	add	r1, sp, #16
    3dac:	ab05      	add	r3, sp, #20
    3dae:	4618      	mov	r0, r3
    3db0:	f7ff fd2a 	bl	3808 <Clock_Ip_TimeoutExpired>
    3db4:	4603      	mov	r3, r0
    3db6:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    3dba:	9b06      	ldr	r3, [sp, #24]
    3dbc:	2b00      	cmp	r3, #0
    3dbe:	d106      	bne.n	3dce <Clock_Ip_CompleteSOSC+0x62>
    3dc0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dc4:	f083 0301 	eor.w	r3, r3, #1
    3dc8:	b2db      	uxtb	r3, r3
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d1e5      	bne.n	3d9a <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3dce:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d005      	beq.n	3de2 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3dd6:	9b01      	ldr	r3, [sp, #4]
    3dd8:	681b      	ldr	r3, [r3, #0]
    3dda:	4619      	mov	r1, r3
    3ddc:	2001      	movs	r0, #1
    3dde:	f7ff fce9 	bl	37b4 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3de2:	bf00      	nop
    3de4:	b009      	add	sp, #36	; 0x24
    3de6:	f85d fb04 	ldr.w	pc, [sp], #4
    3dea:	bf00      	nop
    3dec:	40064000 	.word	0x40064000

00003df0 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3df0:	b500      	push	{lr}
    3df2:	b083      	sub	sp, #12
    3df4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3df6:	9801      	ldr	r0, [sp, #4]
    3df8:	f000 f8c0 	bl	3f7c <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3dfc:	bf00      	nop
    3dfe:	b003      	add	sp, #12
    3e00:	f85d fb04 	ldr.w	pc, [sp], #4

00003e04 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3e04:	b500      	push	{lr}
    3e06:	b083      	sub	sp, #12
    3e08:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e0a:	9b01      	ldr	r3, [sp, #4]
    3e0c:	2b00      	cmp	r3, #0
    3e0e:	d002      	beq.n	3e16 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3e10:	9801      	ldr	r0, [sp, #4]
    3e12:	f000 f8c3 	bl	3f9c <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e16:	bf00      	nop
    3e18:	b003      	add	sp, #12
    3e1a:	f85d fb04 	ldr.w	pc, [sp], #4

00003e1e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3e1e:	b082      	sub	sp, #8
    3e20:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3e22:	4b11      	ldr	r3, [pc, #68]	; (3e68 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e24:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e28:	4a0f      	ldr	r2, [pc, #60]	; (3e68 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e2e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3e32:	4b0d      	ldr	r3, [pc, #52]	; (3e68 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e34:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e38:	4a0b      	ldr	r2, [pc, #44]	; (3e68 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3e3e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3e42:	4b09      	ldr	r3, [pc, #36]	; (3e68 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e44:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e48:	4a07      	ldr	r2, [pc, #28]	; (3e68 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3e4e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3e52:	4b05      	ldr	r3, [pc, #20]	; (3e68 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e54:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e58:	4a03      	ldr	r2, [pc, #12]	; (3e68 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e5a:	f023 0301 	bic.w	r3, r3, #1
    3e5e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3e62:	bf00      	nop
    3e64:	b002      	add	sp, #8
    3e66:	4770      	bx	lr
    3e68:	40064000 	.word	0x40064000

00003e6c <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3e6c:	b082      	sub	sp, #8
    3e6e:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3e70:	9b01      	ldr	r3, [sp, #4]
    3e72:	891b      	ldrh	r3, [r3, #8]
    3e74:	2b01      	cmp	r3, #1
    3e76:	d174      	bne.n	3f62 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3e78:	9b01      	ldr	r3, [sp, #4]
    3e7a:	7bdb      	ldrb	r3, [r3, #15]
    3e7c:	2b00      	cmp	r3, #0
    3e7e:	d002      	beq.n	3e86 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3e80:	2b01      	cmp	r3, #1
    3e82:	d009      	beq.n	3e98 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3e84:	e011      	b.n	3eaa <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    3e86:	4b39      	ldr	r3, [pc, #228]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3e88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3e8c:	4a37      	ldr	r2, [pc, #220]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3e8e:	f023 0308 	bic.w	r3, r3, #8
    3e92:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3e96:	e008      	b.n	3eaa <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3e98:	4b34      	ldr	r3, [pc, #208]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3e9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3e9e:	4a33      	ldr	r2, [pc, #204]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ea0:	f043 0308 	orr.w	r3, r3, #8
    3ea4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3ea8:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    3eaa:	4b30      	ldr	r3, [pc, #192]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3eac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3eb0:	4a2e      	ldr	r2, [pc, #184]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3eb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3eb6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    3eba:	9b01      	ldr	r3, [sp, #4]
    3ebc:	685b      	ldr	r3, [r3, #4]
    3ebe:	4a2c      	ldr	r2, [pc, #176]	; (3f70 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3ec0:	4293      	cmp	r3, r2
    3ec2:	d90d      	bls.n	3ee0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3ec4:	9b01      	ldr	r3, [sp, #4]
    3ec6:	685b      	ldr	r3, [r3, #4]
    3ec8:	4a2a      	ldr	r2, [pc, #168]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    3eca:	4293      	cmp	r3, r2
    3ecc:	d208      	bcs.n	3ee0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3ece:	4b27      	ldr	r3, [pc, #156]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ed0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3ed4:	4a25      	ldr	r2, [pc, #148]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ed6:	f043 0320 	orr.w	r3, r3, #32
    3eda:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3ede:	e007      	b.n	3ef0 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3ee0:	4b22      	ldr	r3, [pc, #136]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ee2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3ee6:	4a21      	ldr	r2, [pc, #132]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ee8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3eec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3ef0:	9b01      	ldr	r3, [sp, #4]
    3ef2:	7b1b      	ldrb	r3, [r3, #12]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d108      	bne.n	3f0a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3ef8:	4b1c      	ldr	r3, [pc, #112]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3efa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3efe:	4a1b      	ldr	r2, [pc, #108]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f00:	f043 0304 	orr.w	r3, r3, #4
    3f04:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3f08:	e007      	b.n	3f1a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3f0a:	4b18      	ldr	r3, [pc, #96]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f10:	4a16      	ldr	r2, [pc, #88]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f12:	f023 0304 	bic.w	r3, r3, #4
    3f16:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3f1a:	9b01      	ldr	r3, [sp, #4]
    3f1c:	7c1b      	ldrb	r3, [r3, #16]
    3f1e:	2b02      	cmp	r3, #2
    3f20:	d011      	beq.n	3f46 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3f22:	2b02      	cmp	r3, #2
    3f24:	dc14      	bgt.n	3f50 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3f26:	2b00      	cmp	r3, #0
    3f28:	d002      	beq.n	3f30 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3f2a:	2b01      	cmp	r3, #1
    3f2c:	d005      	beq.n	3f3a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3f2e:	e00f      	b.n	3f50 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3f30:	4b0e      	ldr	r3, [pc, #56]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f32:	2201      	movs	r2, #1
    3f34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3f38:	e014      	b.n	3f64 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3f3a:	4b0c      	ldr	r3, [pc, #48]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f3c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3f40:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3f44:	e00e      	b.n	3f64 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3f46:	4b09      	ldr	r3, [pc, #36]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f48:	4a0b      	ldr	r2, [pc, #44]	; (3f78 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3f4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3f4e:	e009      	b.n	3f64 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3f50:	4b06      	ldr	r3, [pc, #24]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3f56:	4a05      	ldr	r2, [pc, #20]	; (3f6c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f58:	f043 0301 	orr.w	r3, r3, #1
    3f5c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3f60:	e000      	b.n	3f64 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3f62:	bf00      	nop
}
    3f64:	bf00      	nop
    3f66:	b002      	add	sp, #8
    3f68:	4770      	bx	lr
    3f6a:	bf00      	nop
    3f6c:	40064000 	.word	0x40064000
    3f70:	003d08ff 	.word	0x003d08ff
    3f74:	007a1200 	.word	0x007a1200
    3f78:	00030001 	.word	0x00030001

00003f7c <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3f7c:	b082      	sub	sp, #8
    3f7e:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3f80:	4b05      	ldr	r3, [pc, #20]	; (3f98 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3f82:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3f86:	4a04      	ldr	r2, [pc, #16]	; (3f98 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3f88:	f023 0301 	bic.w	r3, r3, #1
    3f8c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3f90:	bf00      	nop
    3f92:	b002      	add	sp, #8
    3f94:	4770      	bx	lr
    3f96:	bf00      	nop
    3f98:	40064000 	.word	0x40064000

00003f9c <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3f9c:	b082      	sub	sp, #8
    3f9e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3fa0:	9b01      	ldr	r3, [sp, #4]
    3fa2:	891b      	ldrh	r3, [r3, #8]
    3fa4:	2b01      	cmp	r3, #1
    3fa6:	d107      	bne.n	3fb8 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3fa8:	4b05      	ldr	r3, [pc, #20]	; (3fc0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3faa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3fae:	4a04      	ldr	r2, [pc, #16]	; (3fc0 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3fb0:	f043 0301 	orr.w	r3, r3, #1
    3fb4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3fb8:	bf00      	nop
    3fba:	b002      	add	sp, #8
    3fbc:	4770      	bx	lr
    3fbe:	bf00      	nop
    3fc0:	40064000 	.word	0x40064000

00003fc4 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3fc4:	b082      	sub	sp, #8
    3fc6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3fc8:	bf00      	nop
    3fca:	b002      	add	sp, #8
    3fcc:	4770      	bx	lr

00003fce <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3fce:	b082      	sub	sp, #8
    3fd0:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3fd2:	2300      	movs	r3, #0
}
    3fd4:	4618      	mov	r0, r3
    3fd6:	b002      	add	sp, #8
    3fd8:	4770      	bx	lr

00003fda <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    3fda:	b082      	sub	sp, #8
    3fdc:	9001      	str	r0, [sp, #4]
    3fde:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3fe0:	bf00      	nop
    3fe2:	b002      	add	sp, #8
    3fe4:	4770      	bx	lr
	...

00003fe8 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3fe8:	b082      	sub	sp, #8
    3fea:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3fec:	bf00      	nop
    3fee:	b002      	add	sp, #8
    3ff0:	4770      	bx	lr

00003ff2 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3ff2:	b082      	sub	sp, #8
    3ff4:	9001      	str	r0, [sp, #4]
    3ff6:	460b      	mov	r3, r1
    3ff8:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3ffc:	bf00      	nop
    3ffe:	b002      	add	sp, #8
    4000:	4770      	bx	lr

00004002 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    4002:	b500      	push	{lr}
    4004:	b083      	sub	sp, #12
    4006:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4008:	9b01      	ldr	r3, [sp, #4]
    400a:	2b00      	cmp	r3, #0
    400c:	d002      	beq.n	4014 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    400e:	9801      	ldr	r0, [sp, #4]
    4010:	f000 f8e7 	bl	41e2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4014:	bf00      	nop
    4016:	b003      	add	sp, #12
    4018:	f85d fb04 	ldr.w	pc, [sp], #4

0000401c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    401c:	b500      	push	{lr}
    401e:	b085      	sub	sp, #20
    4020:	9001      	str	r0, [sp, #4]
    4022:	460b      	mov	r3, r1
    4024:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4028:	9b01      	ldr	r3, [sp, #4]
    402a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    402c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4030:	2b00      	cmp	r3, #0
    4032:	d003      	beq.n	403c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    4034:	2300      	movs	r3, #0
    4036:	f8ad 300c 	strh.w	r3, [sp, #12]
    403a:	e002      	b.n	4042 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    403c:	2301      	movs	r3, #1
    403e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    4042:	ab02      	add	r3, sp, #8
    4044:	4618      	mov	r0, r3
    4046:	f7ff ffdc 	bl	4002 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    404a:	bf00      	nop
    404c:	b005      	add	sp, #20
    404e:	f85d fb04 	ldr.w	pc, [sp], #4

00004052 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    4052:	b500      	push	{lr}
    4054:	b083      	sub	sp, #12
    4056:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4058:	9b01      	ldr	r3, [sp, #4]
    405a:	2b00      	cmp	r3, #0
    405c:	d002      	beq.n	4064 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    405e:	9801      	ldr	r0, [sp, #4]
    4060:	f000 f8d6 	bl	4210 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4064:	bf00      	nop
    4066:	b003      	add	sp, #12
    4068:	f85d fb04 	ldr.w	pc, [sp], #4

0000406c <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    406c:	b500      	push	{lr}
    406e:	b085      	sub	sp, #20
    4070:	9001      	str	r0, [sp, #4]
    4072:	460b      	mov	r3, r1
    4074:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4078:	9b01      	ldr	r3, [sp, #4]
    407a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    407c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4080:	2b00      	cmp	r3, #0
    4082:	d003      	beq.n	408c <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    4084:	2300      	movs	r3, #0
    4086:	f8ad 300c 	strh.w	r3, [sp, #12]
    408a:	e002      	b.n	4092 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    408c:	2301      	movs	r3, #1
    408e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    4092:	ab02      	add	r3, sp, #8
    4094:	4618      	mov	r0, r3
    4096:	f7ff ffdc 	bl	4052 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    409a:	bf00      	nop
    409c:	b005      	add	sp, #20
    409e:	f85d fb04 	ldr.w	pc, [sp], #4

000040a2 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    40a2:	b500      	push	{lr}
    40a4:	b083      	sub	sp, #12
    40a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40a8:	9b01      	ldr	r3, [sp, #4]
    40aa:	2b00      	cmp	r3, #0
    40ac:	d002      	beq.n	40b4 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    40ae:	9801      	ldr	r0, [sp, #4]
    40b0:	f000 f8c6 	bl	4240 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40b4:	bf00      	nop
    40b6:	b003      	add	sp, #12
    40b8:	f85d fb04 	ldr.w	pc, [sp], #4

000040bc <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    40bc:	b500      	push	{lr}
    40be:	b085      	sub	sp, #20
    40c0:	9001      	str	r0, [sp, #4]
    40c2:	460b      	mov	r3, r1
    40c4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    40c8:	9b01      	ldr	r3, [sp, #4]
    40ca:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    40cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    40d0:	2b00      	cmp	r3, #0
    40d2:	d003      	beq.n	40dc <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    40d4:	2300      	movs	r3, #0
    40d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    40da:	e002      	b.n	40e2 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    40dc:	2301      	movs	r3, #1
    40de:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    40e2:	ab02      	add	r3, sp, #8
    40e4:	4618      	mov	r0, r3
    40e6:	f7ff ffdc 	bl	40a2 <Clock_Ip_ClockSetSimClkoutEnable>
}
    40ea:	bf00      	nop
    40ec:	b005      	add	sp, #20
    40ee:	f85d fb04 	ldr.w	pc, [sp], #4

000040f2 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    40f2:	b500      	push	{lr}
    40f4:	b083      	sub	sp, #12
    40f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40f8:	9b01      	ldr	r3, [sp, #4]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d002      	beq.n	4104 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    40fe:	9801      	ldr	r0, [sp, #4]
    4100:	f000 f8b6 	bl	4270 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4104:	bf00      	nop
    4106:	b003      	add	sp, #12
    4108:	f85d fb04 	ldr.w	pc, [sp], #4

0000410c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    410c:	b500      	push	{lr}
    410e:	b085      	sub	sp, #20
    4110:	9001      	str	r0, [sp, #4]
    4112:	460b      	mov	r3, r1
    4114:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4118:	9b01      	ldr	r3, [sp, #4]
    411a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    411c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4120:	2b00      	cmp	r3, #0
    4122:	d003      	beq.n	412c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    4124:	2300      	movs	r3, #0
    4126:	f8ad 300c 	strh.w	r3, [sp, #12]
    412a:	e002      	b.n	4132 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    412c:	2301      	movs	r3, #1
    412e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    4132:	ab02      	add	r3, sp, #8
    4134:	4618      	mov	r0, r3
    4136:	f7ff ffdc 	bl	40f2 <Clock_Ip_ClockSetPccCgcEnable>
}
    413a:	bf00      	nop
    413c:	b005      	add	sp, #20
    413e:	f85d fb04 	ldr.w	pc, [sp], #4

00004142 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    4142:	b500      	push	{lr}
    4144:	b083      	sub	sp, #12
    4146:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4148:	9b01      	ldr	r3, [sp, #4]
    414a:	2b00      	cmp	r3, #0
    414c:	d002      	beq.n	4154 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    414e:	9801      	ldr	r0, [sp, #4]
    4150:	f000 f8bc 	bl	42cc <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4154:	bf00      	nop
    4156:	b003      	add	sp, #12
    4158:	f85d fb04 	ldr.w	pc, [sp], #4

0000415c <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    415c:	b500      	push	{lr}
    415e:	b085      	sub	sp, #20
    4160:	9001      	str	r0, [sp, #4]
    4162:	460b      	mov	r3, r1
    4164:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4168:	9b01      	ldr	r3, [sp, #4]
    416a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    416c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4170:	2b00      	cmp	r3, #0
    4172:	d003      	beq.n	417c <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    4174:	2300      	movs	r3, #0
    4176:	f8ad 300c 	strh.w	r3, [sp, #12]
    417a:	e002      	b.n	4182 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    417c:	2301      	movs	r3, #1
    417e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    4182:	ab02      	add	r3, sp, #8
    4184:	4618      	mov	r0, r3
    4186:	f7ff ffdc 	bl	4142 <Clock_Ip_ClockSetSimGate>
}
    418a:	bf00      	nop
    418c:	b005      	add	sp, #20
    418e:	f85d fb04 	ldr.w	pc, [sp], #4

00004192 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    4192:	b500      	push	{lr}
    4194:	b083      	sub	sp, #12
    4196:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4198:	9b01      	ldr	r3, [sp, #4]
    419a:	2b00      	cmp	r3, #0
    419c:	d002      	beq.n	41a4 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    419e:	9801      	ldr	r0, [sp, #4]
    41a0:	f000 f8c0 	bl	4324 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41a4:	bf00      	nop
    41a6:	b003      	add	sp, #12
    41a8:	f85d fb04 	ldr.w	pc, [sp], #4

000041ac <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    41ac:	b500      	push	{lr}
    41ae:	b085      	sub	sp, #20
    41b0:	9001      	str	r0, [sp, #4]
    41b2:	460b      	mov	r3, r1
    41b4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    41b8:	9b01      	ldr	r3, [sp, #4]
    41ba:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    41bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    41c0:	2b00      	cmp	r3, #0
    41c2:	d003      	beq.n	41cc <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    41c4:	2300      	movs	r3, #0
    41c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    41ca:	e002      	b.n	41d2 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    41cc:	2301      	movs	r3, #1
    41ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    41d2:	ab02      	add	r3, sp, #8
    41d4:	4618      	mov	r0, r3
    41d6:	f7ff ffdc 	bl	4192 <Clock_Ip_ClockSetSimTraceEnable>
}
    41da:	bf00      	nop
    41dc:	b005      	add	sp, #20
    41de:	f85d fb04 	ldr.w	pc, [sp], #4

000041e2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    41e2:	b084      	sub	sp, #16
    41e4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    41e6:	4b09      	ldr	r3, [pc, #36]	; (420c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    41e8:	691b      	ldr	r3, [r3, #16]
    41ea:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    41ec:	9b03      	ldr	r3, [sp, #12]
    41ee:	f023 0301 	bic.w	r3, r3, #1
    41f2:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    41f4:	9b01      	ldr	r3, [sp, #4]
    41f6:	889b      	ldrh	r3, [r3, #4]
    41f8:	461a      	mov	r2, r3
    41fa:	9b03      	ldr	r3, [sp, #12]
    41fc:	4313      	orrs	r3, r2
    41fe:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4200:	4a02      	ldr	r2, [pc, #8]	; (420c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    4202:	9b03      	ldr	r3, [sp, #12]
    4204:	6113      	str	r3, [r2, #16]
}
    4206:	bf00      	nop
    4208:	b004      	add	sp, #16
    420a:	4770      	bx	lr
    420c:	40048000 	.word	0x40048000

00004210 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4210:	b084      	sub	sp, #16
    4212:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    4214:	4b09      	ldr	r3, [pc, #36]	; (423c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    4216:	691b      	ldr	r3, [r3, #16]
    4218:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    421a:	9b03      	ldr	r3, [sp, #12]
    421c:	f023 0302 	bic.w	r3, r3, #2
    4220:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4222:	9b01      	ldr	r3, [sp, #4]
    4224:	889b      	ldrh	r3, [r3, #4]
    4226:	005b      	lsls	r3, r3, #1
    4228:	9a03      	ldr	r2, [sp, #12]
    422a:	4313      	orrs	r3, r2
    422c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    422e:	4a03      	ldr	r2, [pc, #12]	; (423c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    4230:	9b03      	ldr	r3, [sp, #12]
    4232:	6113      	str	r3, [r2, #16]
}
    4234:	bf00      	nop
    4236:	b004      	add	sp, #16
    4238:	4770      	bx	lr
    423a:	bf00      	nop
    423c:	40048000 	.word	0x40048000

00004240 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4240:	b084      	sub	sp, #16
    4242:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    4244:	4b09      	ldr	r3, [pc, #36]	; (426c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    4246:	685b      	ldr	r3, [r3, #4]
    4248:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    424a:	9b03      	ldr	r3, [sp, #12]
    424c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4250:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    4252:	9b01      	ldr	r3, [sp, #4]
    4254:	889b      	ldrh	r3, [r3, #4]
    4256:	02db      	lsls	r3, r3, #11
    4258:	9a03      	ldr	r2, [sp, #12]
    425a:	4313      	orrs	r3, r2
    425c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    425e:	4a03      	ldr	r2, [pc, #12]	; (426c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    4260:	9b03      	ldr	r3, [sp, #12]
    4262:	6053      	str	r3, [r2, #4]
}
    4264:	bf00      	nop
    4266:	b004      	add	sp, #16
    4268:	4770      	bx	lr
    426a:	bf00      	nop
    426c:	40048000 	.word	0x40048000

00004270 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4270:	b084      	sub	sp, #16
    4272:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    4274:	4913      	ldr	r1, [pc, #76]	; (42c4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    4276:	9b01      	ldr	r3, [sp, #4]
    4278:	681a      	ldr	r2, [r3, #0]
    427a:	4813      	ldr	r0, [pc, #76]	; (42c8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    427c:	4613      	mov	r3, r2
    427e:	00db      	lsls	r3, r3, #3
    4280:	4413      	add	r3, r2
    4282:	4403      	add	r3, r0
    4284:	3306      	adds	r3, #6
    4286:	781b      	ldrb	r3, [r3, #0]
    4288:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    428c:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    428e:	9b03      	ldr	r3, [sp, #12]
    4290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    4294:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    4296:	9b01      	ldr	r3, [sp, #4]
    4298:	889b      	ldrh	r3, [r3, #4]
    429a:	079b      	lsls	r3, r3, #30
    429c:	9a03      	ldr	r2, [sp, #12]
    429e:	4313      	orrs	r3, r2
    42a0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    42a2:	4908      	ldr	r1, [pc, #32]	; (42c4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    42a4:	9b01      	ldr	r3, [sp, #4]
    42a6:	681a      	ldr	r2, [r3, #0]
    42a8:	4807      	ldr	r0, [pc, #28]	; (42c8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    42aa:	4613      	mov	r3, r2
    42ac:	00db      	lsls	r3, r3, #3
    42ae:	4413      	add	r3, r2
    42b0:	4403      	add	r3, r0
    42b2:	3306      	adds	r3, #6
    42b4:	781b      	ldrb	r3, [r3, #0]
    42b6:	461a      	mov	r2, r3
    42b8:	9b03      	ldr	r3, [sp, #12]
    42ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    42be:	bf00      	nop
    42c0:	b004      	add	sp, #16
    42c2:	4770      	bx	lr
    42c4:	40065000 	.word	0x40065000
    42c8:	00015d6c 	.word	0x00015d6c

000042cc <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    42cc:	b086      	sub	sp, #24
    42ce:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    42d0:	9b01      	ldr	r3, [sp, #4]
    42d2:	889b      	ldrh	r3, [r3, #4]
    42d4:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    42d6:	9b01      	ldr	r3, [sp, #4]
    42d8:	681a      	ldr	r2, [r3, #0]
    42da:	4910      	ldr	r1, [pc, #64]	; (431c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    42dc:	4613      	mov	r3, r2
    42de:	00db      	lsls	r3, r3, #3
    42e0:	4413      	add	r3, r2
    42e2:	440b      	add	r3, r1
    42e4:	3306      	adds	r3, #6
    42e6:	781b      	ldrb	r3, [r3, #0]
    42e8:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    42ea:	4b0d      	ldr	r3, [pc, #52]	; (4320 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    42ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    42ee:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    42f0:	2201      	movs	r2, #1
    42f2:	9b04      	ldr	r3, [sp, #16]
    42f4:	fa02 f303 	lsl.w	r3, r2, r3
    42f8:	43db      	mvns	r3, r3
    42fa:	9a03      	ldr	r2, [sp, #12]
    42fc:	4013      	ands	r3, r2
    42fe:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    4300:	9a05      	ldr	r2, [sp, #20]
    4302:	9b04      	ldr	r3, [sp, #16]
    4304:	fa02 f303 	lsl.w	r3, r2, r3
    4308:	9a03      	ldr	r2, [sp, #12]
    430a:	4313      	orrs	r3, r2
    430c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    430e:	4a04      	ldr	r2, [pc, #16]	; (4320 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    4310:	9b03      	ldr	r3, [sp, #12]
    4312:	6413      	str	r3, [r2, #64]	; 0x40
}
    4314:	bf00      	nop
    4316:	b006      	add	sp, #24
    4318:	4770      	bx	lr
    431a:	bf00      	nop
    431c:	00015d6c 	.word	0x00015d6c
    4320:	40048000 	.word	0x40048000

00004324 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4324:	b084      	sub	sp, #16
    4326:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    4328:	4b0a      	ldr	r3, [pc, #40]	; (4354 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    432a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    432c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    432e:	9b01      	ldr	r3, [sp, #4]
    4330:	889b      	ldrh	r3, [r3, #4]
    4332:	2b01      	cmp	r3, #1
    4334:	d104      	bne.n	4340 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    4336:	9b03      	ldr	r3, [sp, #12]
    4338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    433c:	9303      	str	r3, [sp, #12]
    433e:	e003      	b.n	4348 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    4340:	9b03      	ldr	r3, [sp, #12]
    4342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    4346:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    4348:	4a02      	ldr	r2, [pc, #8]	; (4354 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    434a:	9b03      	ldr	r3, [sp, #12]
    434c:	6693      	str	r3, [r2, #104]	; 0x68
}
    434e:	bf00      	nop
    4350:	b004      	add	sp, #16
    4352:	4770      	bx	lr
    4354:	40048000 	.word	0x40048000

00004358 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    4358:	b082      	sub	sp, #8
    435a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    435c:	bf00      	nop
    435e:	b002      	add	sp, #8
    4360:	4770      	bx	lr

00004362 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    4362:	b082      	sub	sp, #8
    4364:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4366:	bf00      	nop
    4368:	b002      	add	sp, #8
    436a:	4770      	bx	lr

0000436c <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    436c:	b500      	push	{lr}
    436e:	b083      	sub	sp, #12
    4370:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4372:	9b01      	ldr	r3, [sp, #4]
    4374:	2b00      	cmp	r3, #0
    4376:	d002      	beq.n	437e <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    4378:	9801      	ldr	r0, [sp, #4]
    437a:	f000 f8d1 	bl	4520 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    437e:	bf00      	nop
    4380:	b003      	add	sp, #12
    4382:	f85d fb04 	ldr.w	pc, [sp], #4

00004386 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4386:	b500      	push	{lr}
    4388:	b083      	sub	sp, #12
    438a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    438c:	9b01      	ldr	r3, [sp, #4]
    438e:	2b00      	cmp	r3, #0
    4390:	d002      	beq.n	4398 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    4392:	9801      	ldr	r0, [sp, #4]
    4394:	f000 f950 	bl	4638 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4398:	bf00      	nop
    439a:	b003      	add	sp, #12
    439c:	f85d fb04 	ldr.w	pc, [sp], #4

000043a0 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    43a0:	b500      	push	{lr}
    43a2:	b083      	sub	sp, #12
    43a4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    43a6:	9801      	ldr	r0, [sp, #4]
    43a8:	f000 f98e 	bl	46c8 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    43ac:	bf00      	nop
    43ae:	b003      	add	sp, #12
    43b0:	f85d fb04 	ldr.w	pc, [sp], #4

000043b4 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    43b4:	b500      	push	{lr}
    43b6:	b083      	sub	sp, #12
    43b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43ba:	9b01      	ldr	r3, [sp, #4]
    43bc:	2b00      	cmp	r3, #0
    43be:	d002      	beq.n	43c6 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    43c0:	9801      	ldr	r0, [sp, #4]
    43c2:	f000 f999 	bl	46f8 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43c6:	bf00      	nop
    43c8:	b003      	add	sp, #12
    43ca:	f85d fb04 	ldr.w	pc, [sp], #4

000043ce <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    43ce:	b500      	push	{lr}
    43d0:	b083      	sub	sp, #12
    43d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43d4:	9b01      	ldr	r3, [sp, #4]
    43d6:	2b00      	cmp	r3, #0
    43d8:	d002      	beq.n	43e0 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    43da:	9801      	ldr	r0, [sp, #4]
    43dc:	f000 f9b0 	bl	4740 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43e0:	bf00      	nop
    43e2:	b003      	add	sp, #12
    43e4:	f85d fb04 	ldr.w	pc, [sp], #4

000043e8 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    43e8:	b500      	push	{lr}
    43ea:	b083      	sub	sp, #12
    43ec:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    43ee:	9801      	ldr	r0, [sp, #4]
    43f0:	f000 f9ba 	bl	4768 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    43f4:	bf00      	nop
    43f6:	b003      	add	sp, #12
    43f8:	f85d fb04 	ldr.w	pc, [sp], #4

000043fc <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    43fc:	b500      	push	{lr}
    43fe:	b083      	sub	sp, #12
    4400:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4402:	9b01      	ldr	r3, [sp, #4]
    4404:	2b00      	cmp	r3, #0
    4406:	d002      	beq.n	440e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    4408:	9801      	ldr	r0, [sp, #4]
    440a:	f000 f9bd 	bl	4788 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    440e:	bf00      	nop
    4410:	b003      	add	sp, #12
    4412:	f85d fb04 	ldr.w	pc, [sp], #4

00004416 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    4416:	b500      	push	{lr}
    4418:	b083      	sub	sp, #12
    441a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    441c:	9b01      	ldr	r3, [sp, #4]
    441e:	2b00      	cmp	r3, #0
    4420:	d002      	beq.n	4428 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    4422:	9801      	ldr	r0, [sp, #4]
    4424:	f000 f9d4 	bl	47d0 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4428:	bf00      	nop
    442a:	b003      	add	sp, #12
    442c:	f85d fb04 	ldr.w	pc, [sp], #4

00004430 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    4430:	b500      	push	{lr}
    4432:	b083      	sub	sp, #12
    4434:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    4436:	9801      	ldr	r0, [sp, #4]
    4438:	f000 f9de 	bl	47f8 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    443c:	bf00      	nop
    443e:	b003      	add	sp, #12
    4440:	f85d fb04 	ldr.w	pc, [sp], #4

00004444 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    4444:	b500      	push	{lr}
    4446:	b089      	sub	sp, #36	; 0x24
    4448:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    444a:	2300      	movs	r3, #0
    444c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    4450:	4b20      	ldr	r3, [pc, #128]	; (44d4 <SetInputSouceSytemClock+0x90>)
    4452:	695b      	ldr	r3, [r3, #20]
    4454:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4456:	9b06      	ldr	r3, [sp, #24]
    4458:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    445c:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    445e:	9b01      	ldr	r3, [sp, #4]
    4460:	061b      	lsls	r3, r3, #24
    4462:	9a06      	ldr	r2, [sp, #24]
    4464:	4313      	orrs	r3, r2
    4466:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    4468:	4a1a      	ldr	r2, [pc, #104]	; (44d4 <SetInputSouceSytemClock+0x90>)
    446a:	9b06      	ldr	r3, [sp, #24]
    446c:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    446e:	aa02      	add	r2, sp, #8
    4470:	a903      	add	r1, sp, #12
    4472:	a804      	add	r0, sp, #16
    4474:	f24c 3350 	movw	r3, #50000	; 0xc350
    4478:	f7ff f9ac 	bl	37d4 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    447c:	4b15      	ldr	r3, [pc, #84]	; (44d4 <SetInputSouceSytemClock+0x90>)
    447e:	691b      	ldr	r3, [r3, #16]
    4480:	0e1b      	lsrs	r3, r3, #24
    4482:	f003 030f 	and.w	r3, r3, #15
    4486:	9a01      	ldr	r2, [sp, #4]
    4488:	429a      	cmp	r2, r3
    448a:	bf0c      	ite	eq
    448c:	2301      	moveq	r3, #1
    448e:	2300      	movne	r3, #0
    4490:	b2db      	uxtb	r3, r3
    4492:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4494:	9a02      	ldr	r2, [sp, #8]
    4496:	a903      	add	r1, sp, #12
    4498:	ab04      	add	r3, sp, #16
    449a:	4618      	mov	r0, r3
    449c:	f7ff f9b4 	bl	3808 <Clock_Ip_TimeoutExpired>
    44a0:	4603      	mov	r3, r0
    44a2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    44a6:	9b05      	ldr	r3, [sp, #20]
    44a8:	2b00      	cmp	r3, #0
    44aa:	d106      	bne.n	44ba <SetInputSouceSytemClock+0x76>
    44ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    44b0:	f083 0301 	eor.w	r3, r3, #1
    44b4:	b2db      	uxtb	r3, r3
    44b6:	2b00      	cmp	r3, #0
    44b8:	d1e0      	bne.n	447c <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    44ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
    44be:	2b00      	cmp	r3, #0
    44c0:	d003      	beq.n	44ca <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    44c2:	2105      	movs	r1, #5
    44c4:	2001      	movs	r0, #1
    44c6:	f7ff f975 	bl	37b4 <Clock_Ip_ReportClockErrors>
    }
}
    44ca:	bf00      	nop
    44cc:	b009      	add	sp, #36	; 0x24
    44ce:	f85d fb04 	ldr.w	pc, [sp], #4
    44d2:	bf00      	nop
    44d4:	40064000 	.word	0x40064000

000044d8 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    44d8:	b500      	push	{lr}
    44da:	b083      	sub	sp, #12
    44dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44de:	9b01      	ldr	r3, [sp, #4]
    44e0:	2b00      	cmp	r3, #0
    44e2:	d002      	beq.n	44ea <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    44e4:	9801      	ldr	r0, [sp, #4]
    44e6:	f000 f997 	bl	4818 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44ea:	bf00      	nop
    44ec:	b003      	add	sp, #12
    44ee:	f85d fb04 	ldr.w	pc, [sp], #4

000044f2 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    44f2:	b500      	push	{lr}
    44f4:	b083      	sub	sp, #12
    44f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44f8:	9b01      	ldr	r3, [sp, #4]
    44fa:	2b00      	cmp	r3, #0
    44fc:	d002      	beq.n	4504 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    44fe:	9801      	ldr	r0, [sp, #4]
    4500:	f000 fa7e 	bl	4a00 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4504:	bf00      	nop
    4506:	b003      	add	sp, #12
    4508:	f85d fb04 	ldr.w	pc, [sp], #4

0000450c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    450c:	b500      	push	{lr}
    450e:	b083      	sub	sp, #12
    4510:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    4512:	9801      	ldr	r0, [sp, #4]
    4514:	f000 fab8 	bl	4a88 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4518:	bf00      	nop
    451a:	b003      	add	sp, #12
    451c:	f85d fb04 	ldr.w	pc, [sp], #4

00004520 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4520:	b500      	push	{lr}
    4522:	b08b      	sub	sp, #44	; 0x2c
    4524:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4526:	2300      	movs	r3, #0
    4528:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    452c:	9b01      	ldr	r3, [sp, #4]
    452e:	2b00      	cmp	r3, #0
    4530:	d10b      	bne.n	454a <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    4532:	2305      	movs	r3, #5
    4534:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    4536:	2301      	movs	r3, #1
    4538:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    453c:	2301      	movs	r3, #1
    453e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    4542:	2301      	movs	r3, #1
    4544:	f88d 3010 	strb.w	r3, [sp, #16]
    4548:	e00e      	b.n	4568 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    454a:	9b01      	ldr	r3, [sp, #4]
    454c:	681b      	ldr	r3, [r3, #0]
    454e:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    4550:	9b01      	ldr	r3, [sp, #4]
    4552:	79db      	ldrb	r3, [r3, #7]
    4554:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    4558:	9b01      	ldr	r3, [sp, #4]
    455a:	889b      	ldrh	r3, [r3, #4]
    455c:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    4560:	9b01      	ldr	r3, [sp, #4]
    4562:	7a1b      	ldrb	r3, [r3, #8]
    4564:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4568:	4b32      	ldr	r3, [pc, #200]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    456a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    456e:	4a31      	ldr	r2, [pc, #196]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4570:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4574:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    4578:	4b2e      	ldr	r3, [pc, #184]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    457a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    457e:	4a2d      	ldr	r2, [pc, #180]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4580:	f023 0301 	bic.w	r3, r3, #1
    4584:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4588:	4b2a      	ldr	r3, [pc, #168]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    458a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    458e:	4a29      	ldr	r2, [pc, #164]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4590:	f023 0304 	bic.w	r3, r3, #4
    4594:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    4598:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    459c:	2b01      	cmp	r3, #1
    459e:	d144      	bne.n	462a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    45a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    45a4:	4a23      	ldr	r2, [pc, #140]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45a6:	f003 0301 	and.w	r3, r3, #1
    45aa:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    45ae:	4b21      	ldr	r3, [pc, #132]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45b4:	4a1f      	ldr	r2, [pc, #124]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45b6:	f043 0301 	orr.w	r3, r3, #1
    45ba:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    45be:	4b1d      	ldr	r3, [pc, #116]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    45c4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    45c8:	009b      	lsls	r3, r3, #2
    45ca:	f003 0304 	and.w	r3, r3, #4
    45ce:	4919      	ldr	r1, [pc, #100]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45d0:	4313      	orrs	r3, r2
    45d2:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    45d6:	aa05      	add	r2, sp, #20
    45d8:	a906      	add	r1, sp, #24
    45da:	a807      	add	r0, sp, #28
    45dc:	f24c 3350 	movw	r3, #50000	; 0xc350
    45e0:	f7ff f8f8 	bl	37d4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    45e4:	4b13      	ldr	r3, [pc, #76]	; (4634 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45ea:	0e1b      	lsrs	r3, r3, #24
    45ec:	f003 0301 	and.w	r3, r3, #1
    45f0:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    45f2:	9a05      	ldr	r2, [sp, #20]
    45f4:	a906      	add	r1, sp, #24
    45f6:	ab07      	add	r3, sp, #28
    45f8:	4618      	mov	r0, r3
    45fa:	f7ff f905 	bl	3808 <Clock_Ip_TimeoutExpired>
    45fe:	4603      	mov	r3, r0
    4600:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4604:	9b08      	ldr	r3, [sp, #32]
    4606:	2b00      	cmp	r3, #0
    4608:	d106      	bne.n	4618 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    460a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    460e:	f083 0301 	eor.w	r3, r3, #1
    4612:	b2db      	uxtb	r3, r3
    4614:	2b00      	cmp	r3, #0
    4616:	d1e5      	bne.n	45e4 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    4618:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    461c:	2b00      	cmp	r3, #0
    461e:	d004      	beq.n	462a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    4620:	9b02      	ldr	r3, [sp, #8]
    4622:	4619      	mov	r1, r3
    4624:	2001      	movs	r0, #1
    4626:	f7ff f8c5 	bl	37b4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    462a:	bf00      	nop
    462c:	b00b      	add	sp, #44	; 0x2c
    462e:	f85d fb04 	ldr.w	pc, [sp], #4
    4632:	bf00      	nop
    4634:	40064000 	.word	0x40064000

00004638 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4638:	b500      	push	{lr}
    463a:	b089      	sub	sp, #36	; 0x24
    463c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    463e:	2300      	movs	r3, #0
    4640:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    4644:	4b1f      	ldr	r3, [pc, #124]	; (46c4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4646:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    464a:	4a1e      	ldr	r2, [pc, #120]	; (46c4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    464c:	f043 0301 	orr.w	r3, r3, #1
    4650:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    4654:	4b1b      	ldr	r3, [pc, #108]	; (46c4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4656:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    465a:	4a1a      	ldr	r2, [pc, #104]	; (46c4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    465c:	f043 0304 	orr.w	r3, r3, #4
    4660:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4664:	aa03      	add	r2, sp, #12
    4666:	a904      	add	r1, sp, #16
    4668:	a805      	add	r0, sp, #20
    466a:	f24c 3350 	movw	r3, #50000	; 0xc350
    466e:	f7ff f8b1 	bl	37d4 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    4672:	4b14      	ldr	r3, [pc, #80]	; (46c4 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4674:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4678:	0e1b      	lsrs	r3, r3, #24
    467a:	f003 0301 	and.w	r3, r3, #1
    467e:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4680:	9a03      	ldr	r2, [sp, #12]
    4682:	a904      	add	r1, sp, #16
    4684:	ab05      	add	r3, sp, #20
    4686:	4618      	mov	r0, r3
    4688:	f7ff f8be 	bl	3808 <Clock_Ip_TimeoutExpired>
    468c:	4603      	mov	r3, r0
    468e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4692:	9b06      	ldr	r3, [sp, #24]
    4694:	2b00      	cmp	r3, #0
    4696:	d106      	bne.n	46a6 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    4698:	f89d 301f 	ldrb.w	r3, [sp, #31]
    469c:	f083 0301 	eor.w	r3, r3, #1
    46a0:	b2db      	uxtb	r3, r3
    46a2:	2b00      	cmp	r3, #0
    46a4:	d1e5      	bne.n	4672 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    46a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    46aa:	2b00      	cmp	r3, #0
    46ac:	d005      	beq.n	46ba <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    46ae:	9b01      	ldr	r3, [sp, #4]
    46b0:	681b      	ldr	r3, [r3, #0]
    46b2:	4619      	mov	r1, r3
    46b4:	2001      	movs	r0, #1
    46b6:	f7ff f87d 	bl	37b4 <Clock_Ip_ReportClockErrors>
    }
}
    46ba:	bf00      	nop
    46bc:	b009      	add	sp, #36	; 0x24
    46be:	f85d fb04 	ldr.w	pc, [sp], #4
    46c2:	bf00      	nop
    46c4:	40064000 	.word	0x40064000

000046c8 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    46c8:	b082      	sub	sp, #8
    46ca:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    46cc:	4b09      	ldr	r3, [pc, #36]	; (46f4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    46ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    46d2:	4a08      	ldr	r2, [pc, #32]	; (46f4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    46d4:	f023 0301 	bic.w	r3, r3, #1
    46d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    46dc:	4b05      	ldr	r3, [pc, #20]	; (46f4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    46de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    46e2:	4a04      	ldr	r2, [pc, #16]	; (46f4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    46e4:	f023 0304 	bic.w	r3, r3, #4
    46e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    46ec:	bf00      	nop
    46ee:	b002      	add	sp, #8
    46f0:	4770      	bx	lr
    46f2:	bf00      	nop
    46f4:	40064000 	.word	0x40064000

000046f8 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    46f8:	b082      	sub	sp, #8
    46fa:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    46fc:	4b0f      	ldr	r3, [pc, #60]	; (473c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    46fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4702:	4a0e      	ldr	r2, [pc, #56]	; (473c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4704:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4708:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    470c:	4b0b      	ldr	r3, [pc, #44]	; (473c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    470e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4712:	4a0a      	ldr	r2, [pc, #40]	; (473c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4714:	f023 0304 	bic.w	r3, r3, #4
    4718:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    471c:	4b07      	ldr	r3, [pc, #28]	; (473c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    471e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4722:	9b01      	ldr	r3, [sp, #4]
    4724:	7a1b      	ldrb	r3, [r3, #8]
    4726:	009b      	lsls	r3, r3, #2
    4728:	f003 0304 	and.w	r3, r3, #4
    472c:	4903      	ldr	r1, [pc, #12]	; (473c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    472e:	4313      	orrs	r3, r2
    4730:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4734:	bf00      	nop
    4736:	b002      	add	sp, #8
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	40064000 	.word	0x40064000

00004740 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4740:	b082      	sub	sp, #8
    4742:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4744:	9b01      	ldr	r3, [sp, #4]
    4746:	889b      	ldrh	r3, [r3, #4]
    4748:	2b01      	cmp	r3, #1
    474a:	d107      	bne.n	475c <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    474c:	4b05      	ldr	r3, [pc, #20]	; (4764 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    474e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4752:	4a04      	ldr	r2, [pc, #16]	; (4764 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    4754:	f043 0304 	orr.w	r3, r3, #4
    4758:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    475c:	bf00      	nop
    475e:	b002      	add	sp, #8
    4760:	4770      	bx	lr
    4762:	bf00      	nop
    4764:	40064000 	.word	0x40064000

00004768 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    4768:	b082      	sub	sp, #8
    476a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    476c:	4b05      	ldr	r3, [pc, #20]	; (4784 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    476e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4772:	4a04      	ldr	r2, [pc, #16]	; (4784 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    4774:	f023 0304 	bic.w	r3, r3, #4
    4778:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    477c:	bf00      	nop
    477e:	b002      	add	sp, #8
    4780:	4770      	bx	lr
    4782:	bf00      	nop
    4784:	40064000 	.word	0x40064000

00004788 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4788:	b082      	sub	sp, #8
    478a:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    478c:	4b0f      	ldr	r3, [pc, #60]	; (47cc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    478e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4792:	4a0e      	ldr	r2, [pc, #56]	; (47cc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4794:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4798:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    479c:	4b0b      	ldr	r3, [pc, #44]	; (47cc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    479e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47a2:	4a0a      	ldr	r2, [pc, #40]	; (47cc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47a4:	f023 0302 	bic.w	r3, r3, #2
    47a8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    47ac:	4b07      	ldr	r3, [pc, #28]	; (47cc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    47b2:	9b01      	ldr	r3, [sp, #4]
    47b4:	7a5b      	ldrb	r3, [r3, #9]
    47b6:	005b      	lsls	r3, r3, #1
    47b8:	f003 0302 	and.w	r3, r3, #2
    47bc:	4903      	ldr	r1, [pc, #12]	; (47cc <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47be:	4313      	orrs	r3, r2
    47c0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    47c4:	bf00      	nop
    47c6:	b002      	add	sp, #8
    47c8:	4770      	bx	lr
    47ca:	bf00      	nop
    47cc:	40064000 	.word	0x40064000

000047d0 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    47d0:	b082      	sub	sp, #8
    47d2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    47d4:	9b01      	ldr	r3, [sp, #4]
    47d6:	889b      	ldrh	r3, [r3, #4]
    47d8:	2b01      	cmp	r3, #1
    47da:	d107      	bne.n	47ec <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    47dc:	4b05      	ldr	r3, [pc, #20]	; (47f4 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    47de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47e2:	4a04      	ldr	r2, [pc, #16]	; (47f4 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    47e4:	f043 0302 	orr.w	r3, r3, #2
    47e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    47ec:	bf00      	nop
    47ee:	b002      	add	sp, #8
    47f0:	4770      	bx	lr
    47f2:	bf00      	nop
    47f4:	40064000 	.word	0x40064000

000047f8 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    47f8:	b082      	sub	sp, #8
    47fa:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    47fc:	4b05      	ldr	r3, [pc, #20]	; (4814 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    47fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4802:	4a04      	ldr	r2, [pc, #16]	; (4814 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4804:	f023 0302 	bic.w	r3, r3, #2
    4808:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    480c:	bf00      	nop
    480e:	b002      	add	sp, #8
    4810:	4770      	bx	lr
    4812:	bf00      	nop
    4814:	40064000 	.word	0x40064000

00004818 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4818:	b500      	push	{lr}
    481a:	b08b      	sub	sp, #44	; 0x2c
    481c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    481e:	9b01      	ldr	r3, [sp, #4]
    4820:	681a      	ldr	r2, [r3, #0]
    4822:	4975      	ldr	r1, [pc, #468]	; (49f8 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    4824:	4613      	mov	r3, r2
    4826:	00db      	lsls	r3, r3, #3
    4828:	4413      	add	r3, r2
    482a:	440b      	add	r3, r1
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4830:	2300      	movs	r3, #0
    4832:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    4836:	2300      	movs	r3, #0
    4838:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    483c:	4b6f      	ldr	r3, [pc, #444]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    483e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4842:	4a6e      	ldr	r2, [pc, #440]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4844:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4848:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    484c:	4b6b      	ldr	r3, [pc, #428]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    484e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4856:	2b00      	cmp	r3, #0
    4858:	d07d      	beq.n	4956 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    485a:	9b01      	ldr	r3, [sp, #4]
    485c:	79db      	ldrb	r3, [r3, #7]
    485e:	461a      	mov	r2, r3
    4860:	4b66      	ldr	r3, [pc, #408]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4862:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4866:	f003 0303 	and.w	r3, r3, #3
    486a:	429a      	cmp	r2, r3
    486c:	d10b      	bne.n	4886 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    486e:	9b01      	ldr	r3, [sp, #4]
    4870:	799b      	ldrb	r3, [r3, #6]
    4872:	461a      	mov	r2, r3
    4874:	4b61      	ldr	r3, [pc, #388]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4876:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    487a:	08db      	lsrs	r3, r3, #3
    487c:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4880:	429a      	cmp	r2, r3
    4882:	f000 80b4 	beq.w	49ee <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    4886:	4b5d      	ldr	r3, [pc, #372]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4888:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    488c:	f003 0301 	and.w	r3, r3, #1
    4890:	2b00      	cmp	r3, #0
    4892:	d105      	bne.n	48a0 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    4894:	2301      	movs	r3, #1
    4896:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    489a:	2000      	movs	r0, #0
    489c:	f7ff fd66 	bl	436c <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    48a0:	2002      	movs	r0, #2
    48a2:	f7ff fdcf 	bl	4444 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    48a6:	4b55      	ldr	r3, [pc, #340]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48a8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48ac:	4a53      	ldr	r2, [pc, #332]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48ae:	f023 0301 	bic.w	r3, r3, #1
    48b2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    48b6:	9b01      	ldr	r3, [sp, #4]
    48b8:	889b      	ldrh	r3, [r3, #4]
    48ba:	2b01      	cmp	r3, #1
    48bc:	f040 8097 	bne.w	49ee <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    48c0:	9b01      	ldr	r3, [sp, #4]
    48c2:	79db      	ldrb	r3, [r3, #7]
    48c4:	4a4d      	ldr	r2, [pc, #308]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48c6:	f003 0303 	and.w	r3, r3, #3
    48ca:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    48ce:	4b4b      	ldr	r3, [pc, #300]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48d0:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    48d4:	9b01      	ldr	r3, [sp, #4]
    48d6:	799b      	ldrb	r3, [r3, #6]
    48d8:	00db      	lsls	r3, r3, #3
    48da:	f003 0308 	and.w	r3, r3, #8
    48de:	4313      	orrs	r3, r2
    48e0:	4a46      	ldr	r2, [pc, #280]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48e2:	f043 0301 	orr.w	r3, r3, #1
    48e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    48ea:	aa03      	add	r2, sp, #12
    48ec:	a904      	add	r1, sp, #16
    48ee:	a805      	add	r0, sp, #20
    48f0:	f24c 3350 	movw	r3, #50000	; 0xc350
    48f4:	f7fe ff6e 	bl	37d4 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    48f8:	4b40      	ldr	r3, [pc, #256]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48fe:	0e1b      	lsrs	r3, r3, #24
    4900:	f003 0301 	and.w	r3, r3, #1
    4904:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4906:	9a03      	ldr	r2, [sp, #12]
    4908:	a904      	add	r1, sp, #16
    490a:	ab05      	add	r3, sp, #20
    490c:	4618      	mov	r0, r3
    490e:	f7fe ff7b 	bl	3808 <Clock_Ip_TimeoutExpired>
    4912:	4603      	mov	r3, r0
    4914:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4918:	9b06      	ldr	r3, [sp, #24]
    491a:	2b00      	cmp	r3, #0
    491c:	d106      	bne.n	492c <Clock_Ip_SetFirc_TrustedCall+0x114>
    491e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4922:	f083 0301 	eor.w	r3, r3, #1
    4926:	b2db      	uxtb	r3, r3
    4928:	2b00      	cmp	r3, #0
    492a:	d1e5      	bne.n	48f8 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    492c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4930:	2b00      	cmp	r3, #0
    4932:	d005      	beq.n	4940 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4934:	9b01      	ldr	r3, [sp, #4]
    4936:	681b      	ldr	r3, [r3, #0]
    4938:	4619      	mov	r1, r3
    493a:	2001      	movs	r0, #1
    493c:	f7fe ff3a 	bl	37b4 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4940:	2003      	movs	r0, #3
    4942:	f7ff fd7f 	bl	4444 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    4946:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    494a:	2b00      	cmp	r3, #0
    494c:	d04f      	beq.n	49ee <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    494e:	2002      	movs	r0, #2
    4950:	f7ff fd26 	bl	43a0 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    4954:	e04b      	b.n	49ee <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4956:	4b29      	ldr	r3, [pc, #164]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4958:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    495c:	4a27      	ldr	r2, [pc, #156]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    495e:	f023 0301 	bic.w	r3, r3, #1
    4962:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    4966:	9b01      	ldr	r3, [sp, #4]
    4968:	889b      	ldrh	r3, [r3, #4]
    496a:	2b01      	cmp	r3, #1
    496c:	d13f      	bne.n	49ee <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    496e:	9b01      	ldr	r3, [sp, #4]
    4970:	79db      	ldrb	r3, [r3, #7]
    4972:	4a22      	ldr	r2, [pc, #136]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4974:	f003 0303 	and.w	r3, r3, #3
    4978:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    497c:	4b1f      	ldr	r3, [pc, #124]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    497e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4982:	9b01      	ldr	r3, [sp, #4]
    4984:	799b      	ldrb	r3, [r3, #6]
    4986:	00db      	lsls	r3, r3, #3
    4988:	f003 0308 	and.w	r3, r3, #8
    498c:	4313      	orrs	r3, r2
    498e:	4a1b      	ldr	r2, [pc, #108]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4990:	f043 0301 	orr.w	r3, r3, #1
    4994:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4998:	aa03      	add	r2, sp, #12
    499a:	a904      	add	r1, sp, #16
    499c:	a805      	add	r0, sp, #20
    499e:	f24c 3350 	movw	r3, #50000	; 0xc350
    49a2:	f7fe ff17 	bl	37d4 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    49a6:	4b15      	ldr	r3, [pc, #84]	; (49fc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    49a8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49ac:	0e1b      	lsrs	r3, r3, #24
    49ae:	f003 0301 	and.w	r3, r3, #1
    49b2:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    49b4:	9a03      	ldr	r2, [sp, #12]
    49b6:	a904      	add	r1, sp, #16
    49b8:	ab05      	add	r3, sp, #20
    49ba:	4618      	mov	r0, r3
    49bc:	f7fe ff24 	bl	3808 <Clock_Ip_TimeoutExpired>
    49c0:	4603      	mov	r3, r0
    49c2:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    49c6:	9b06      	ldr	r3, [sp, #24]
    49c8:	2b00      	cmp	r3, #0
    49ca:	d106      	bne.n	49da <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    49cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    49d0:	f083 0301 	eor.w	r3, r3, #1
    49d4:	b2db      	uxtb	r3, r3
    49d6:	2b00      	cmp	r3, #0
    49d8:	d1e5      	bne.n	49a6 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    49da:	f89d 301f 	ldrb.w	r3, [sp, #31]
    49de:	2b00      	cmp	r3, #0
    49e0:	d005      	beq.n	49ee <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    49e2:	9b01      	ldr	r3, [sp, #4]
    49e4:	681b      	ldr	r3, [r3, #0]
    49e6:	4619      	mov	r1, r3
    49e8:	2001      	movs	r0, #1
    49ea:	f7fe fee3 	bl	37b4 <Clock_Ip_ReportClockErrors>
}
    49ee:	bf00      	nop
    49f0:	b00b      	add	sp, #44	; 0x2c
    49f2:	f85d fb04 	ldr.w	pc, [sp], #4
    49f6:	bf00      	nop
    49f8:	00015d6c 	.word	0x00015d6c
    49fc:	40064000 	.word	0x40064000

00004a00 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4a00:	b500      	push	{lr}
    4a02:	b089      	sub	sp, #36	; 0x24
    4a04:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a06:	2300      	movs	r3, #0
    4a08:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4a0c:	9b01      	ldr	r3, [sp, #4]
    4a0e:	889b      	ldrh	r3, [r3, #4]
    4a10:	2b01      	cmp	r3, #1
    4a12:	d132      	bne.n	4a7a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4a14:	4b1b      	ldr	r3, [pc, #108]	; (4a84 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a1a:	4a1a      	ldr	r2, [pc, #104]	; (4a84 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a1c:	f043 0301 	orr.w	r3, r3, #1
    4a20:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a24:	aa03      	add	r2, sp, #12
    4a26:	a904      	add	r1, sp, #16
    4a28:	a805      	add	r0, sp, #20
    4a2a:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a2e:	f7fe fed1 	bl	37d4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a32:	4b14      	ldr	r3, [pc, #80]	; (4a84 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a34:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a38:	0e1b      	lsrs	r3, r3, #24
    4a3a:	f003 0301 	and.w	r3, r3, #1
    4a3e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a40:	9a03      	ldr	r2, [sp, #12]
    4a42:	a904      	add	r1, sp, #16
    4a44:	ab05      	add	r3, sp, #20
    4a46:	4618      	mov	r0, r3
    4a48:	f7fe fede 	bl	3808 <Clock_Ip_TimeoutExpired>
    4a4c:	4603      	mov	r3, r0
    4a4e:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4a52:	9b06      	ldr	r3, [sp, #24]
    4a54:	2b00      	cmp	r3, #0
    4a56:	d106      	bne.n	4a66 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4a58:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a5c:	f083 0301 	eor.w	r3, r3, #1
    4a60:	b2db      	uxtb	r3, r3
    4a62:	2b00      	cmp	r3, #0
    4a64:	d1e5      	bne.n	4a32 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    4a66:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d005      	beq.n	4a7a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4a6e:	9b01      	ldr	r3, [sp, #4]
    4a70:	681b      	ldr	r3, [r3, #0]
    4a72:	4619      	mov	r1, r3
    4a74:	2001      	movs	r0, #1
    4a76:	f7fe fe9d 	bl	37b4 <Clock_Ip_ReportClockErrors>
        }
    }
}
    4a7a:	bf00      	nop
    4a7c:	b009      	add	sp, #36	; 0x24
    4a7e:	f85d fb04 	ldr.w	pc, [sp], #4
    4a82:	bf00      	nop
    4a84:	40064000 	.word	0x40064000

00004a88 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    4a88:	b082      	sub	sp, #8
    4a8a:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4a8c:	4b05      	ldr	r3, [pc, #20]	; (4aa4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4a8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a92:	4a04      	ldr	r2, [pc, #16]	; (4aa4 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4a94:	f023 0301 	bic.w	r3, r3, #1
    4a98:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4a9c:	bf00      	nop
    4a9e:	b002      	add	sp, #8
    4aa0:	4770      	bx	lr
    4aa2:	bf00      	nop
    4aa4:	40064000 	.word	0x40064000

00004aa8 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4aa8:	b082      	sub	sp, #8
    4aaa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4aac:	bf00      	nop
    4aae:	b002      	add	sp, #8
    4ab0:	4770      	bx	lr

00004ab2 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4ab2:	b082      	sub	sp, #8
    4ab4:	9001      	str	r0, [sp, #4]
    4ab6:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4ab8:	bf00      	nop
    4aba:	b002      	add	sp, #8
    4abc:	4770      	bx	lr

00004abe <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4abe:	b082      	sub	sp, #8
    4ac0:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4ac2:	bf00      	nop
    4ac4:	b002      	add	sp, #8
    4ac6:	4770      	bx	lr

00004ac8 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    4ac8:	b082      	sub	sp, #8
    4aca:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4acc:	bf00      	nop
    4ace:	b002      	add	sp, #8
    4ad0:	4770      	bx	lr

00004ad2 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4ad2:	b082      	sub	sp, #8
    4ad4:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    4ad6:	2302      	movs	r3, #2
}
    4ad8:	4618      	mov	r0, r3
    4ada:	b002      	add	sp, #8
    4adc:	4770      	bx	lr

00004ade <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4ade:	b082      	sub	sp, #8
    4ae0:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4ae2:	bf00      	nop
    4ae4:	b002      	add	sp, #8
    4ae6:	4770      	bx	lr

00004ae8 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4ae8:	b500      	push	{lr}
    4aea:	b083      	sub	sp, #12
    4aec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4aee:	9b01      	ldr	r3, [sp, #4]
    4af0:	2b00      	cmp	r3, #0
    4af2:	d002      	beq.n	4afa <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4af4:	9801      	ldr	r0, [sp, #4]
    4af6:	f000 f870 	bl	4bda <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4afa:	bf00      	nop
    4afc:	b003      	add	sp, #12
    4afe:	f85d fb04 	ldr.w	pc, [sp], #4

00004b02 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4b02:	b500      	push	{lr}
    4b04:	b083      	sub	sp, #12
    4b06:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4b08:	9b01      	ldr	r3, [sp, #4]
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	d002      	beq.n	4b14 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4b0e:	9801      	ldr	r0, [sp, #4]
    4b10:	f000 f89a 	bl	4c48 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b14:	bf00      	nop
    4b16:	b003      	add	sp, #12
    4b18:	f85d fb04 	ldr.w	pc, [sp], #4

00004b1c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4b1c:	b500      	push	{lr}
    4b1e:	b089      	sub	sp, #36	; 0x24
    4b20:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4b22:	2301      	movs	r3, #1
    4b24:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    4b26:	2300      	movs	r3, #0
    4b28:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4b2c:	4b1e      	ldr	r3, [pc, #120]	; (4ba8 <Clock_Ip_CompleteSpll+0x8c>)
    4b2e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4b32:	f003 0301 	and.w	r3, r3, #1
    4b36:	2b00      	cmp	r3, #0
    4b38:	d02f      	beq.n	4b9a <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4b3a:	aa02      	add	r2, sp, #8
    4b3c:	a903      	add	r1, sp, #12
    4b3e:	a804      	add	r0, sp, #16
    4b40:	f24c 3350 	movw	r3, #50000	; 0xc350
    4b44:	f7fe fe46 	bl	37d4 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4b48:	4b17      	ldr	r3, [pc, #92]	; (4ba8 <Clock_Ip_CompleteSpll+0x8c>)
    4b4a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4b4e:	0e1b      	lsrs	r3, r3, #24
    4b50:	f003 0301 	and.w	r3, r3, #1
    4b54:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4b56:	9a02      	ldr	r2, [sp, #8]
    4b58:	a903      	add	r1, sp, #12
    4b5a:	ab04      	add	r3, sp, #16
    4b5c:	4618      	mov	r0, r3
    4b5e:	f7fe fe53 	bl	3808 <Clock_Ip_TimeoutExpired>
    4b62:	4603      	mov	r3, r0
    4b64:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4b68:	9b05      	ldr	r3, [sp, #20]
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d106      	bne.n	4b7c <Clock_Ip_CompleteSpll+0x60>
    4b6e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4b72:	f083 0301 	eor.w	r3, r3, #1
    4b76:	b2db      	uxtb	r3, r3
    4b78:	2b00      	cmp	r3, #0
    4b7a:	d1e5      	bne.n	4b48 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4b7c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4b80:	f083 0301 	eor.w	r3, r3, #1
    4b84:	b2db      	uxtb	r3, r3
    4b86:	2b00      	cmp	r3, #0
    4b88:	d002      	beq.n	4b90 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    4b8a:	2302      	movs	r3, #2
    4b8c:	9307      	str	r3, [sp, #28]
    4b8e:	e006      	b.n	4b9e <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4b90:	9901      	ldr	r1, [sp, #4]
    4b92:	2001      	movs	r0, #1
    4b94:	f7fe fe0e 	bl	37b4 <Clock_Ip_ReportClockErrors>
    4b98:	e001      	b.n	4b9e <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    4b9a:	2300      	movs	r3, #0
    4b9c:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4b9e:	9b07      	ldr	r3, [sp, #28]
}
    4ba0:	4618      	mov	r0, r3
    4ba2:	b009      	add	sp, #36	; 0x24
    4ba4:	f85d fb04 	ldr.w	pc, [sp], #4
    4ba8:	40064000 	.word	0x40064000

00004bac <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4bac:	b500      	push	{lr}
    4bae:	b083      	sub	sp, #12
    4bb0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4bb2:	9801      	ldr	r0, [sp, #4]
    4bb4:	f000 f886 	bl	4cc4 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4bb8:	bf00      	nop
    4bba:	b003      	add	sp, #12
    4bbc:	f85d fb04 	ldr.w	pc, [sp], #4

00004bc0 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4bc0:	b500      	push	{lr}
    4bc2:	b083      	sub	sp, #12
    4bc4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4bc6:	9b01      	ldr	r3, [sp, #4]
    4bc8:	2b00      	cmp	r3, #0
    4bca:	d002      	beq.n	4bd2 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4bcc:	9801      	ldr	r0, [sp, #4]
    4bce:	f000 f891 	bl	4cf4 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4bd2:	bf00      	nop
    4bd4:	b003      	add	sp, #12
    4bd6:	f85d fb04 	ldr.w	pc, [sp], #4

00004bda <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4bda:	b082      	sub	sp, #8
    4bdc:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4bde:	4b19      	ldr	r3, [pc, #100]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4be0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4be4:	4a17      	ldr	r2, [pc, #92]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4be6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4bea:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4bee:	4b15      	ldr	r3, [pc, #84]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4bf0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4bf4:	4a13      	ldr	r2, [pc, #76]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4bfa:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4bfe:	4b11      	ldr	r3, [pc, #68]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c00:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c04:	4a0f      	ldr	r2, [pc, #60]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4c0a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4c0e:	4b0d      	ldr	r3, [pc, #52]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c10:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c14:	4a0b      	ldr	r2, [pc, #44]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c16:	f023 0301 	bic.w	r3, r3, #1
    4c1a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4c1e:	4b09      	ldr	r3, [pc, #36]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c20:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c24:	4a07      	ldr	r2, [pc, #28]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4c2a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4c2e:	4b05      	ldr	r3, [pc, #20]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c30:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c34:	4a03      	ldr	r2, [pc, #12]	; (4c44 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4c3a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4c3e:	bf00      	nop
    4c40:	b002      	add	sp, #8
    4c42:	4770      	bx	lr
    4c44:	40064000 	.word	0x40064000

00004c48 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4c48:	b082      	sub	sp, #8
    4c4a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4c4c:	9b01      	ldr	r3, [sp, #4]
    4c4e:	889b      	ldrh	r3, [r3, #4]
    4c50:	2b01      	cmp	r3, #1
    4c52:	d12f      	bne.n	4cb4 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4c54:	4b1a      	ldr	r3, [pc, #104]	; (4cc0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4c56:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4c5a:	9b01      	ldr	r3, [sp, #4]
    4c5c:	7b5b      	ldrb	r3, [r3, #13]
    4c5e:	3b01      	subs	r3, #1
    4c60:	021b      	lsls	r3, r3, #8
    4c62:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4c66:	9b01      	ldr	r3, [sp, #4]
    4c68:	7d1b      	ldrb	r3, [r3, #20]
    4c6a:	3b10      	subs	r3, #16
    4c6c:	041b      	lsls	r3, r3, #16
    4c6e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4c72:	430b      	orrs	r3, r1
    4c74:	4912      	ldr	r1, [pc, #72]	; (4cc0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4c76:	4313      	orrs	r3, r2
    4c78:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4c7c:	9b01      	ldr	r3, [sp, #4]
    4c7e:	7fdb      	ldrb	r3, [r3, #31]
    4c80:	2b02      	cmp	r3, #2
    4c82:	d011      	beq.n	4ca8 <Clock_Ip_SetSpll_TrustedCall+0x60>
    4c84:	2b02      	cmp	r3, #2
    4c86:	dc17      	bgt.n	4cb8 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4c88:	2b00      	cmp	r3, #0
    4c8a:	d002      	beq.n	4c92 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4c8c:	2b01      	cmp	r3, #1
    4c8e:	d005      	beq.n	4c9c <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4c90:	e012      	b.n	4cb8 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4c92:	4b0b      	ldr	r3, [pc, #44]	; (4cc0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4c94:	2200      	movs	r2, #0
    4c96:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4c9a:	e00e      	b.n	4cba <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4c9c:	4b08      	ldr	r3, [pc, #32]	; (4cc0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4ca2:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4ca6:	e008      	b.n	4cba <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4ca8:	4b05      	ldr	r3, [pc, #20]	; (4cc0 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4caa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4cae:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4cb2:	e002      	b.n	4cba <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4cb4:	bf00      	nop
    4cb6:	e000      	b.n	4cba <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4cb8:	bf00      	nop
}
    4cba:	bf00      	nop
    4cbc:	b002      	add	sp, #8
    4cbe:	4770      	bx	lr
    4cc0:	40064000 	.word	0x40064000

00004cc4 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4cc4:	b082      	sub	sp, #8
    4cc6:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4cc8:	4b09      	ldr	r3, [pc, #36]	; (4cf0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4cca:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4cce:	4a08      	ldr	r2, [pc, #32]	; (4cf0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4cd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4cd4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4cd8:	4b05      	ldr	r3, [pc, #20]	; (4cf0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4cda:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4cde:	4a04      	ldr	r2, [pc, #16]	; (4cf0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4ce0:	f023 0301 	bic.w	r3, r3, #1
    4ce4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4ce8:	bf00      	nop
    4cea:	b002      	add	sp, #8
    4cec:	4770      	bx	lr
    4cee:	bf00      	nop
    4cf0:	40064000 	.word	0x40064000

00004cf4 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4cf4:	b082      	sub	sp, #8
    4cf6:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4cf8:	9b01      	ldr	r3, [sp, #4]
    4cfa:	889b      	ldrh	r3, [r3, #4]
    4cfc:	2b01      	cmp	r3, #1
    4cfe:	d107      	bne.n	4d10 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4d00:	4b05      	ldr	r3, [pc, #20]	; (4d18 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4d02:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4d06:	4a04      	ldr	r2, [pc, #16]	; (4d18 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4d08:	f043 0301 	orr.w	r3, r3, #1
    4d0c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4d10:	bf00      	nop
    4d12:	b002      	add	sp, #8
    4d14:	4770      	bx	lr
    4d16:	bf00      	nop
    4d18:	40064000 	.word	0x40064000

00004d1c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4d1c:	b082      	sub	sp, #8
    4d1e:	9001      	str	r0, [sp, #4]
    4d20:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4d22:	bf00      	nop
    4d24:	b002      	add	sp, #8
    4d26:	4770      	bx	lr

00004d28 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4d28:	b082      	sub	sp, #8
    4d2a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4d2c:	bf00      	nop
    4d2e:	b002      	add	sp, #8
    4d30:	4770      	bx	lr

00004d32 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d32:	b500      	push	{lr}
    4d34:	b083      	sub	sp, #12
    4d36:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d38:	9b01      	ldr	r3, [sp, #4]
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d002      	beq.n	4d44 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4d3e:	9801      	ldr	r0, [sp, #4]
    4d40:	f000 f8ee 	bl	4f20 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d44:	bf00      	nop
    4d46:	b003      	add	sp, #12
    4d48:	f85d fb04 	ldr.w	pc, [sp], #4

00004d4c <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d4c:	b500      	push	{lr}
    4d4e:	b083      	sub	sp, #12
    4d50:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d52:	9b01      	ldr	r3, [sp, #4]
    4d54:	2b00      	cmp	r3, #0
    4d56:	d002      	beq.n	4d5e <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4d58:	9801      	ldr	r0, [sp, #4]
    4d5a:	f000 f8ff 	bl	4f5c <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d5e:	bf00      	nop
    4d60:	b003      	add	sp, #12
    4d62:	f85d fb04 	ldr.w	pc, [sp], #4

00004d66 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d66:	b500      	push	{lr}
    4d68:	b083      	sub	sp, #12
    4d6a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d6c:	9b01      	ldr	r3, [sp, #4]
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d002      	beq.n	4d78 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4d72:	9801      	ldr	r0, [sp, #4]
    4d74:	f000 f912 	bl	4f9c <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d78:	bf00      	nop
    4d7a:	b003      	add	sp, #12
    4d7c:	f85d fb04 	ldr.w	pc, [sp], #4

00004d80 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d80:	b500      	push	{lr}
    4d82:	b083      	sub	sp, #12
    4d84:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d86:	9b01      	ldr	r3, [sp, #4]
    4d88:	2b00      	cmp	r3, #0
    4d8a:	d002      	beq.n	4d92 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4d8c:	9801      	ldr	r0, [sp, #4]
    4d8e:	f000 f925 	bl	4fdc <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d92:	bf00      	nop
    4d94:	b003      	add	sp, #12
    4d96:	f85d fb04 	ldr.w	pc, [sp], #4

00004d9a <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d9a:	b500      	push	{lr}
    4d9c:	b083      	sub	sp, #12
    4d9e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4da0:	9b01      	ldr	r3, [sp, #4]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d002      	beq.n	4dac <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4da6:	9801      	ldr	r0, [sp, #4]
    4da8:	f000 f936 	bl	5018 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4dac:	bf00      	nop
    4dae:	b003      	add	sp, #12
    4db0:	f85d fb04 	ldr.w	pc, [sp], #4

00004db4 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4db4:	b500      	push	{lr}
    4db6:	b083      	sub	sp, #12
    4db8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4dba:	9b01      	ldr	r3, [sp, #4]
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	d002      	beq.n	4dc6 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4dc0:	9801      	ldr	r0, [sp, #4]
    4dc2:	f000 f949 	bl	5058 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4dc6:	bf00      	nop
    4dc8:	b003      	add	sp, #12
    4dca:	f85d fb04 	ldr.w	pc, [sp], #4

00004dce <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4dce:	b500      	push	{lr}
    4dd0:	b083      	sub	sp, #12
    4dd2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4dd4:	9b01      	ldr	r3, [sp, #4]
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	d002      	beq.n	4de0 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4dda:	9801      	ldr	r0, [sp, #4]
    4ddc:	f000 f958 	bl	5090 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4de0:	bf00      	nop
    4de2:	b003      	add	sp, #12
    4de4:	f85d fb04 	ldr.w	pc, [sp], #4

00004de8 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4de8:	b500      	push	{lr}
    4dea:	b083      	sub	sp, #12
    4dec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4dee:	9b01      	ldr	r3, [sp, #4]
    4df0:	2b00      	cmp	r3, #0
    4df2:	d002      	beq.n	4dfa <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4df4:	9801      	ldr	r0, [sp, #4]
    4df6:	f000 f969 	bl	50cc <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4dfa:	bf00      	nop
    4dfc:	b003      	add	sp, #12
    4dfe:	f85d fb04 	ldr.w	pc, [sp], #4

00004e02 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e02:	b500      	push	{lr}
    4e04:	b083      	sub	sp, #12
    4e06:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e08:	9b01      	ldr	r3, [sp, #4]
    4e0a:	2b00      	cmp	r3, #0
    4e0c:	d002      	beq.n	4e14 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4e0e:	9801      	ldr	r0, [sp, #4]
    4e10:	f000 f978 	bl	5104 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e14:	bf00      	nop
    4e16:	b003      	add	sp, #12
    4e18:	f85d fb04 	ldr.w	pc, [sp], #4

00004e1c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e1c:	b500      	push	{lr}
    4e1e:	b083      	sub	sp, #12
    4e20:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e22:	9b01      	ldr	r3, [sp, #4]
    4e24:	2b00      	cmp	r3, #0
    4e26:	d002      	beq.n	4e2e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4e28:	9801      	ldr	r0, [sp, #4]
    4e2a:	f000 f989 	bl	5140 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e2e:	bf00      	nop
    4e30:	b003      	add	sp, #12
    4e32:	f85d fb04 	ldr.w	pc, [sp], #4

00004e36 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e36:	b500      	push	{lr}
    4e38:	b083      	sub	sp, #12
    4e3a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e3c:	9b01      	ldr	r3, [sp, #4]
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d002      	beq.n	4e48 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4e42:	9801      	ldr	r0, [sp, #4]
    4e44:	f000 f998 	bl	5178 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e48:	bf00      	nop
    4e4a:	b003      	add	sp, #12
    4e4c:	f85d fb04 	ldr.w	pc, [sp], #4

00004e50 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e50:	b500      	push	{lr}
    4e52:	b083      	sub	sp, #12
    4e54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e56:	9b01      	ldr	r3, [sp, #4]
    4e58:	2b00      	cmp	r3, #0
    4e5a:	d002      	beq.n	4e62 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4e5c:	9801      	ldr	r0, [sp, #4]
    4e5e:	f000 f9a9 	bl	51b4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e62:	bf00      	nop
    4e64:	b003      	add	sp, #12
    4e66:	f85d fb04 	ldr.w	pc, [sp], #4

00004e6a <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e6a:	b500      	push	{lr}
    4e6c:	b083      	sub	sp, #12
    4e6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e70:	9b01      	ldr	r3, [sp, #4]
    4e72:	2b00      	cmp	r3, #0
    4e74:	d002      	beq.n	4e7c <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    4e76:	9801      	ldr	r0, [sp, #4]
    4e78:	f000 f9e6 	bl	5248 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e7c:	bf00      	nop
    4e7e:	b003      	add	sp, #12
    4e80:	f85d fb04 	ldr.w	pc, [sp], #4

00004e84 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e84:	b500      	push	{lr}
    4e86:	b083      	sub	sp, #12
    4e88:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e8a:	9b01      	ldr	r3, [sp, #4]
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	d002      	beq.n	4e96 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4e90:	9801      	ldr	r0, [sp, #4]
    4e92:	f000 fa25 	bl	52e0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e96:	bf00      	nop
    4e98:	b003      	add	sp, #12
    4e9a:	f85d fb04 	ldr.w	pc, [sp], #4

00004e9e <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e9e:	b500      	push	{lr}
    4ea0:	b083      	sub	sp, #12
    4ea2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ea4:	9b01      	ldr	r3, [sp, #4]
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d002      	beq.n	4eb0 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    4eaa:	9801      	ldr	r0, [sp, #4]
    4eac:	f000 fa2a 	bl	5304 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4eb0:	bf00      	nop
    4eb2:	b003      	add	sp, #12
    4eb4:	f85d fb04 	ldr.w	pc, [sp], #4

00004eb8 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4eb8:	b500      	push	{lr}
    4eba:	b083      	sub	sp, #12
    4ebc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ebe:	9b01      	ldr	r3, [sp, #4]
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	d002      	beq.n	4eca <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4ec4:	9801      	ldr	r0, [sp, #4]
    4ec6:	f000 fa3b 	bl	5340 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4eca:	bf00      	nop
    4ecc:	b003      	add	sp, #12
    4ece:	f85d fb04 	ldr.w	pc, [sp], #4

00004ed2 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4ed2:	b500      	push	{lr}
    4ed4:	b083      	sub	sp, #12
    4ed6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ed8:	9b01      	ldr	r3, [sp, #4]
    4eda:	2b00      	cmp	r3, #0
    4edc:	d002      	beq.n	4ee4 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4ede:	9801      	ldr	r0, [sp, #4]
    4ee0:	f000 fa56 	bl	5390 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ee4:	bf00      	nop
    4ee6:	b003      	add	sp, #12
    4ee8:	f85d fb04 	ldr.w	pc, [sp], #4

00004eec <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4eec:	b500      	push	{lr}
    4eee:	b083      	sub	sp, #12
    4ef0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ef2:	9b01      	ldr	r3, [sp, #4]
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	d002      	beq.n	4efe <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4ef8:	9801      	ldr	r0, [sp, #4]
    4efa:	f000 fa79 	bl	53f0 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4efe:	bf00      	nop
    4f00:	b003      	add	sp, #12
    4f02:	f85d fb04 	ldr.w	pc, [sp], #4

00004f06 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4f06:	b500      	push	{lr}
    4f08:	b083      	sub	sp, #12
    4f0a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f0c:	9b01      	ldr	r3, [sp, #4]
    4f0e:	2b00      	cmp	r3, #0
    4f10:	d002      	beq.n	4f18 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4f12:	9801      	ldr	r0, [sp, #4]
    4f14:	f000 fa8a 	bl	542c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f18:	bf00      	nop
    4f1a:	b003      	add	sp, #12
    4f1c:	f85d fb04 	ldr.w	pc, [sp], #4

00004f20 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4f20:	b084      	sub	sp, #16
    4f22:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4f24:	4b0b      	ldr	r3, [pc, #44]	; (4f54 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4f26:	795b      	ldrb	r3, [r3, #5]
    4f28:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4f2a:	4b0b      	ldr	r3, [pc, #44]	; (4f58 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4f2c:	695b      	ldr	r3, [r3, #20]
    4f2e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4f30:	9b02      	ldr	r3, [sp, #8]
    4f32:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4f36:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4f38:	9b03      	ldr	r3, [sp, #12]
    4f3a:	061b      	lsls	r3, r3, #24
    4f3c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4f40:	9a02      	ldr	r2, [sp, #8]
    4f42:	4313      	orrs	r3, r2
    4f44:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4f46:	4a04      	ldr	r2, [pc, #16]	; (4f58 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4f48:	9b02      	ldr	r3, [sp, #8]
    4f4a:	6153      	str	r3, [r2, #20]
}
    4f4c:	bf00      	nop
    4f4e:	b004      	add	sp, #16
    4f50:	4770      	bx	lr
    4f52:	bf00      	nop
    4f54:	000160d4 	.word	0x000160d4
    4f58:	40064000 	.word	0x40064000

00004f5c <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4f5c:	b084      	sub	sp, #16
    4f5e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4f60:	9b01      	ldr	r3, [sp, #4]
    4f62:	685b      	ldr	r3, [r3, #4]
    4f64:	4a0b      	ldr	r2, [pc, #44]	; (4f94 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4f66:	5cd3      	ldrb	r3, [r2, r3]
    4f68:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4f6a:	4b0b      	ldr	r3, [pc, #44]	; (4f98 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4f6c:	695b      	ldr	r3, [r3, #20]
    4f6e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4f70:	9b02      	ldr	r3, [sp, #8]
    4f72:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4f76:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4f78:	9b03      	ldr	r3, [sp, #12]
    4f7a:	061b      	lsls	r3, r3, #24
    4f7c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4f80:	9a02      	ldr	r2, [sp, #8]
    4f82:	4313      	orrs	r3, r2
    4f84:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4f86:	4a04      	ldr	r2, [pc, #16]	; (4f98 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4f88:	9b02      	ldr	r3, [sp, #8]
    4f8a:	6153      	str	r3, [r2, #20]
}
    4f8c:	bf00      	nop
    4f8e:	b004      	add	sp, #16
    4f90:	4770      	bx	lr
    4f92:	bf00      	nop
    4f94:	000160d4 	.word	0x000160d4
    4f98:	40064000 	.word	0x40064000

00004f9c <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4f9c:	b084      	sub	sp, #16
    4f9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4fa0:	9b01      	ldr	r3, [sp, #4]
    4fa2:	685b      	ldr	r3, [r3, #4]
    4fa4:	4a0b      	ldr	r2, [pc, #44]	; (4fd4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    4fa6:	5cd3      	ldrb	r3, [r2, r3]
    4fa8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    4faa:	4b0b      	ldr	r3, [pc, #44]	; (4fd8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4fac:	699b      	ldr	r3, [r3, #24]
    4fae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4fb0:	9b02      	ldr	r3, [sp, #8]
    4fb2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4fb6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4fb8:	9b03      	ldr	r3, [sp, #12]
    4fba:	061b      	lsls	r3, r3, #24
    4fbc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4fc0:	9a02      	ldr	r2, [sp, #8]
    4fc2:	4313      	orrs	r3, r2
    4fc4:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4fc6:	4a04      	ldr	r2, [pc, #16]	; (4fd8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4fc8:	9b02      	ldr	r3, [sp, #8]
    4fca:	6193      	str	r3, [r2, #24]
}
    4fcc:	bf00      	nop
    4fce:	b004      	add	sp, #16
    4fd0:	4770      	bx	lr
    4fd2:	bf00      	nop
    4fd4:	000160d4 	.word	0x000160d4
    4fd8:	40064000 	.word	0x40064000

00004fdc <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4fdc:	b084      	sub	sp, #16
    4fde:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4fe0:	4b0b      	ldr	r3, [pc, #44]	; (5010 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4fe2:	795b      	ldrb	r3, [r3, #5]
    4fe4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4fe6:	4b0b      	ldr	r3, [pc, #44]	; (5014 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4fe8:	69db      	ldr	r3, [r3, #28]
    4fea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4fec:	9b02      	ldr	r3, [sp, #8]
    4fee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4ff2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4ff4:	9b03      	ldr	r3, [sp, #12]
    4ff6:	061b      	lsls	r3, r3, #24
    4ff8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4ffc:	9a02      	ldr	r2, [sp, #8]
    4ffe:	4313      	orrs	r3, r2
    5000:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    5002:	4a04      	ldr	r2, [pc, #16]	; (5014 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    5004:	9b02      	ldr	r3, [sp, #8]
    5006:	61d3      	str	r3, [r2, #28]
}
    5008:	bf00      	nop
    500a:	b004      	add	sp, #16
    500c:	4770      	bx	lr
    500e:	bf00      	nop
    5010:	000160d4 	.word	0x000160d4
    5014:	40064000 	.word	0x40064000

00005018 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5018:	b084      	sub	sp, #16
    501a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    501c:	9b01      	ldr	r3, [sp, #4]
    501e:	685b      	ldr	r3, [r3, #4]
    5020:	4a0b      	ldr	r2, [pc, #44]	; (5050 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    5022:	5cd3      	ldrb	r3, [r2, r3]
    5024:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    5026:	4b0b      	ldr	r3, [pc, #44]	; (5054 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    5028:	69db      	ldr	r3, [r3, #28]
    502a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    502c:	9b02      	ldr	r3, [sp, #8]
    502e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    5032:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    5034:	9b03      	ldr	r3, [sp, #12]
    5036:	061b      	lsls	r3, r3, #24
    5038:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    503c:	9a02      	ldr	r2, [sp, #8]
    503e:	4313      	orrs	r3, r2
    5040:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    5042:	4a04      	ldr	r2, [pc, #16]	; (5054 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    5044:	9b02      	ldr	r3, [sp, #8]
    5046:	61d3      	str	r3, [r2, #28]
}
    5048:	bf00      	nop
    504a:	b004      	add	sp, #16
    504c:	4770      	bx	lr
    504e:	bf00      	nop
    5050:	000160d4 	.word	0x000160d4
    5054:	40064000 	.word	0x40064000

00005058 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5058:	b084      	sub	sp, #16
    505a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    505c:	4b0a      	ldr	r3, [pc, #40]	; (5088 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    505e:	7b9b      	ldrb	r3, [r3, #14]
    5060:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    5062:	4b0a      	ldr	r3, [pc, #40]	; (508c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    5064:	691b      	ldr	r3, [r3, #16]
    5066:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    5068:	9b02      	ldr	r3, [sp, #8]
    506a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    506e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5070:	9b03      	ldr	r3, [sp, #12]
    5072:	011b      	lsls	r3, r3, #4
    5074:	9a02      	ldr	r2, [sp, #8]
    5076:	4313      	orrs	r3, r2
    5078:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    507a:	4a04      	ldr	r2, [pc, #16]	; (508c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    507c:	9b02      	ldr	r3, [sp, #8]
    507e:	6113      	str	r3, [r2, #16]
}
    5080:	bf00      	nop
    5082:	b004      	add	sp, #16
    5084:	4770      	bx	lr
    5086:	bf00      	nop
    5088:	0001607c 	.word	0x0001607c
    508c:	40048000 	.word	0x40048000

00005090 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5090:	b084      	sub	sp, #16
    5092:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5094:	9b01      	ldr	r3, [sp, #4]
    5096:	685b      	ldr	r3, [r3, #4]
    5098:	4a0a      	ldr	r2, [pc, #40]	; (50c4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    509a:	5cd3      	ldrb	r3, [r2, r3]
    509c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    509e:	4b0a      	ldr	r3, [pc, #40]	; (50c8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    50a0:	691b      	ldr	r3, [r3, #16]
    50a2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    50a4:	9b02      	ldr	r3, [sp, #8]
    50a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    50aa:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    50ac:	9b03      	ldr	r3, [sp, #12]
    50ae:	011b      	lsls	r3, r3, #4
    50b0:	9a02      	ldr	r2, [sp, #8]
    50b2:	4313      	orrs	r3, r2
    50b4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    50b6:	4a04      	ldr	r2, [pc, #16]	; (50c8 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    50b8:	9b02      	ldr	r3, [sp, #8]
    50ba:	6113      	str	r3, [r2, #16]
}
    50bc:	bf00      	nop
    50be:	b004      	add	sp, #16
    50c0:	4770      	bx	lr
    50c2:	bf00      	nop
    50c4:	0001607c 	.word	0x0001607c
    50c8:	40048000 	.word	0x40048000

000050cc <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    50cc:	b084      	sub	sp, #16
    50ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    50d0:	4b0a      	ldr	r3, [pc, #40]	; (50fc <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    50d2:	785b      	ldrb	r3, [r3, #1]
    50d4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    50d6:	4b0a      	ldr	r3, [pc, #40]	; (5100 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    50d8:	691b      	ldr	r3, [r3, #16]
    50da:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    50dc:	9b02      	ldr	r3, [sp, #8]
    50de:	f023 030c 	bic.w	r3, r3, #12
    50e2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    50e4:	9b03      	ldr	r3, [sp, #12]
    50e6:	009b      	lsls	r3, r3, #2
    50e8:	9a02      	ldr	r2, [sp, #8]
    50ea:	4313      	orrs	r3, r2
    50ec:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    50ee:	4a04      	ldr	r2, [pc, #16]	; (5100 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    50f0:	9b02      	ldr	r3, [sp, #8]
    50f2:	6113      	str	r3, [r2, #16]
}
    50f4:	bf00      	nop
    50f6:	b004      	add	sp, #16
    50f8:	4770      	bx	lr
    50fa:	bf00      	nop
    50fc:	00016134 	.word	0x00016134
    5100:	40048000 	.word	0x40048000

00005104 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5104:	b084      	sub	sp, #16
    5106:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5108:	9b01      	ldr	r3, [sp, #4]
    510a:	685b      	ldr	r3, [r3, #4]
    510c:	4a0a      	ldr	r2, [pc, #40]	; (5138 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    510e:	5cd3      	ldrb	r3, [r2, r3]
    5110:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    5112:	4b0a      	ldr	r3, [pc, #40]	; (513c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    5114:	691b      	ldr	r3, [r3, #16]
    5116:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    5118:	9b02      	ldr	r3, [sp, #8]
    511a:	f023 030c 	bic.w	r3, r3, #12
    511e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5120:	9b03      	ldr	r3, [sp, #12]
    5122:	009b      	lsls	r3, r3, #2
    5124:	9a02      	ldr	r2, [sp, #8]
    5126:	4313      	orrs	r3, r2
    5128:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    512a:	4a04      	ldr	r2, [pc, #16]	; (513c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    512c:	9b02      	ldr	r3, [sp, #8]
    512e:	6113      	str	r3, [r2, #16]
}
    5130:	bf00      	nop
    5132:	b004      	add	sp, #16
    5134:	4770      	bx	lr
    5136:	bf00      	nop
    5138:	00016134 	.word	0x00016134
    513c:	40048000 	.word	0x40048000

00005140 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5140:	b084      	sub	sp, #16
    5142:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5144:	4b0a      	ldr	r3, [pc, #40]	; (5170 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    5146:	795b      	ldrb	r3, [r3, #5]
    5148:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    514a:	4b0a      	ldr	r3, [pc, #40]	; (5174 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    514c:	6a1b      	ldr	r3, [r3, #32]
    514e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    5150:	9b02      	ldr	r3, [sp, #8]
    5152:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    5156:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    5158:	9b03      	ldr	r3, [sp, #12]
    515a:	061b      	lsls	r3, r3, #24
    515c:	9a02      	ldr	r2, [sp, #8]
    515e:	4313      	orrs	r3, r2
    5160:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    5162:	4a04      	ldr	r2, [pc, #16]	; (5174 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    5164:	9b02      	ldr	r3, [sp, #8]
    5166:	6213      	str	r3, [r2, #32]
}
    5168:	bf00      	nop
    516a:	b004      	add	sp, #16
    516c:	4770      	bx	lr
    516e:	bf00      	nop
    5170:	000160d4 	.word	0x000160d4
    5174:	40064000 	.word	0x40064000

00005178 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5178:	b084      	sub	sp, #16
    517a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    517c:	9b01      	ldr	r3, [sp, #4]
    517e:	685b      	ldr	r3, [r3, #4]
    5180:	4a0a      	ldr	r2, [pc, #40]	; (51ac <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    5182:	5cd3      	ldrb	r3, [r2, r3]
    5184:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    5186:	4b0a      	ldr	r3, [pc, #40]	; (51b0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    5188:	6a1b      	ldr	r3, [r3, #32]
    518a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    518c:	9b02      	ldr	r3, [sp, #8]
    518e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    5192:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    5194:	9b03      	ldr	r3, [sp, #12]
    5196:	061b      	lsls	r3, r3, #24
    5198:	9a02      	ldr	r2, [sp, #8]
    519a:	4313      	orrs	r3, r2
    519c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    519e:	4a04      	ldr	r2, [pc, #16]	; (51b0 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    51a0:	9b02      	ldr	r3, [sp, #8]
    51a2:	6213      	str	r3, [r2, #32]
}
    51a4:	bf00      	nop
    51a6:	b004      	add	sp, #16
    51a8:	4770      	bx	lr
    51aa:	bf00      	nop
    51ac:	000160d4 	.word	0x000160d4
    51b0:	40064000 	.word	0x40064000

000051b4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    51b4:	b086      	sub	sp, #24
    51b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    51b8:	4b20      	ldr	r3, [pc, #128]	; (523c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    51ba:	795b      	ldrb	r3, [r3, #5]
    51bc:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    51be:	9b01      	ldr	r3, [sp, #4]
    51c0:	681a      	ldr	r2, [r3, #0]
    51c2:	491f      	ldr	r1, [pc, #124]	; (5240 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    51c4:	4613      	mov	r3, r2
    51c6:	00db      	lsls	r3, r3, #3
    51c8:	4413      	add	r3, r2
    51ca:	440b      	add	r3, r1
    51cc:	781b      	ldrb	r3, [r3, #0]
    51ce:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    51d0:	4b1c      	ldr	r3, [pc, #112]	; (5244 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    51d2:	68db      	ldr	r3, [r3, #12]
    51d4:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    51d6:	9b03      	ldr	r3, [sp, #12]
    51d8:	2b03      	cmp	r3, #3
    51da:	d813      	bhi.n	5204 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    51dc:	9b03      	ldr	r3, [sp, #12]
    51de:	005b      	lsls	r3, r3, #1
    51e0:	3318      	adds	r3, #24
    51e2:	2203      	movs	r2, #3
    51e4:	fa02 f303 	lsl.w	r3, r2, r3
    51e8:	43db      	mvns	r3, r3
    51ea:	9a05      	ldr	r2, [sp, #20]
    51ec:	4013      	ands	r3, r2
    51ee:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    51f0:	9b03      	ldr	r3, [sp, #12]
    51f2:	005b      	lsls	r3, r3, #1
    51f4:	3318      	adds	r3, #24
    51f6:	9a04      	ldr	r2, [sp, #16]
    51f8:	fa02 f303 	lsl.w	r3, r2, r3
    51fc:	9a05      	ldr	r2, [sp, #20]
    51fe:	4313      	orrs	r3, r2
    5200:	9305      	str	r3, [sp, #20]
    5202:	e014      	b.n	522e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    5204:	9b03      	ldr	r3, [sp, #12]
    5206:	3b04      	subs	r3, #4
    5208:	005b      	lsls	r3, r3, #1
    520a:	3310      	adds	r3, #16
    520c:	2203      	movs	r2, #3
    520e:	fa02 f303 	lsl.w	r3, r2, r3
    5212:	43db      	mvns	r3, r3
    5214:	9a05      	ldr	r2, [sp, #20]
    5216:	4013      	ands	r3, r2
    5218:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    521a:	9b03      	ldr	r3, [sp, #12]
    521c:	3b04      	subs	r3, #4
    521e:	005b      	lsls	r3, r3, #1
    5220:	3310      	adds	r3, #16
    5222:	9a04      	ldr	r2, [sp, #16]
    5224:	fa02 f303 	lsl.w	r3, r2, r3
    5228:	9a05      	ldr	r2, [sp, #20]
    522a:	4313      	orrs	r3, r2
    522c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    522e:	4a05      	ldr	r2, [pc, #20]	; (5244 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    5230:	9b05      	ldr	r3, [sp, #20]
    5232:	60d3      	str	r3, [r2, #12]
}
    5234:	bf00      	nop
    5236:	b006      	add	sp, #24
    5238:	4770      	bx	lr
    523a:	bf00      	nop
    523c:	0001607c 	.word	0x0001607c
    5240:	00015d6c 	.word	0x00015d6c
    5244:	40048000 	.word	0x40048000

00005248 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5248:	b086      	sub	sp, #24
    524a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    524c:	9b01      	ldr	r3, [sp, #4]
    524e:	685b      	ldr	r3, [r3, #4]
    5250:	4a20      	ldr	r2, [pc, #128]	; (52d4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    5252:	5cd3      	ldrb	r3, [r2, r3]
    5254:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    5256:	9b01      	ldr	r3, [sp, #4]
    5258:	681a      	ldr	r2, [r3, #0]
    525a:	491f      	ldr	r1, [pc, #124]	; (52d8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    525c:	4613      	mov	r3, r2
    525e:	00db      	lsls	r3, r3, #3
    5260:	4413      	add	r3, r2
    5262:	440b      	add	r3, r1
    5264:	781b      	ldrb	r3, [r3, #0]
    5266:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    5268:	4b1c      	ldr	r3, [pc, #112]	; (52dc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    526a:	68db      	ldr	r3, [r3, #12]
    526c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    526e:	9b03      	ldr	r3, [sp, #12]
    5270:	2b03      	cmp	r3, #3
    5272:	d813      	bhi.n	529c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    5274:	9b03      	ldr	r3, [sp, #12]
    5276:	005b      	lsls	r3, r3, #1
    5278:	3318      	adds	r3, #24
    527a:	2203      	movs	r2, #3
    527c:	fa02 f303 	lsl.w	r3, r2, r3
    5280:	43db      	mvns	r3, r3
    5282:	9a05      	ldr	r2, [sp, #20]
    5284:	4013      	ands	r3, r2
    5286:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    5288:	9b03      	ldr	r3, [sp, #12]
    528a:	005b      	lsls	r3, r3, #1
    528c:	3318      	adds	r3, #24
    528e:	9a04      	ldr	r2, [sp, #16]
    5290:	fa02 f303 	lsl.w	r3, r2, r3
    5294:	9a05      	ldr	r2, [sp, #20]
    5296:	4313      	orrs	r3, r2
    5298:	9305      	str	r3, [sp, #20]
    529a:	e014      	b.n	52c6 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    529c:	9b03      	ldr	r3, [sp, #12]
    529e:	3b04      	subs	r3, #4
    52a0:	005b      	lsls	r3, r3, #1
    52a2:	3310      	adds	r3, #16
    52a4:	2203      	movs	r2, #3
    52a6:	fa02 f303 	lsl.w	r3, r2, r3
    52aa:	43db      	mvns	r3, r3
    52ac:	9a05      	ldr	r2, [sp, #20]
    52ae:	4013      	ands	r3, r2
    52b0:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    52b2:	9b03      	ldr	r3, [sp, #12]
    52b4:	3b04      	subs	r3, #4
    52b6:	005b      	lsls	r3, r3, #1
    52b8:	3310      	adds	r3, #16
    52ba:	9a04      	ldr	r2, [sp, #16]
    52bc:	fa02 f303 	lsl.w	r3, r2, r3
    52c0:	9a05      	ldr	r2, [sp, #20]
    52c2:	4313      	orrs	r3, r2
    52c4:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    52c6:	4a05      	ldr	r2, [pc, #20]	; (52dc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    52c8:	9b05      	ldr	r3, [sp, #20]
    52ca:	60d3      	str	r3, [r2, #12]
}
    52cc:	bf00      	nop
    52ce:	b006      	add	sp, #24
    52d0:	4770      	bx	lr
    52d2:	bf00      	nop
    52d4:	0001607c 	.word	0x0001607c
    52d8:	00015d6c 	.word	0x00015d6c
    52dc:	40048000 	.word	0x40048000

000052e0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    52e0:	b084      	sub	sp, #16
    52e2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    52e4:	4b06      	ldr	r3, [pc, #24]	; (5300 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    52e6:	685b      	ldr	r3, [r3, #4]
    52e8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    52ea:	9b03      	ldr	r3, [sp, #12]
    52ec:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    52f0:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    52f2:	4a03      	ldr	r2, [pc, #12]	; (5300 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    52f4:	9b03      	ldr	r3, [sp, #12]
    52f6:	6053      	str	r3, [r2, #4]
}
    52f8:	bf00      	nop
    52fa:	b004      	add	sp, #16
    52fc:	4770      	bx	lr
    52fe:	bf00      	nop
    5300:	40048000 	.word	0x40048000

00005304 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5304:	b084      	sub	sp, #16
    5306:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5308:	9b01      	ldr	r3, [sp, #4]
    530a:	685b      	ldr	r3, [r3, #4]
    530c:	4a0a      	ldr	r2, [pc, #40]	; (5338 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    530e:	5cd3      	ldrb	r3, [r2, r3]
    5310:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    5312:	4b0a      	ldr	r3, [pc, #40]	; (533c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    5314:	685b      	ldr	r3, [r3, #4]
    5316:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    5318:	9b02      	ldr	r3, [sp, #8]
    531a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    531e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    5320:	9b03      	ldr	r3, [sp, #12]
    5322:	011b      	lsls	r3, r3, #4
    5324:	9a02      	ldr	r2, [sp, #8]
    5326:	4313      	orrs	r3, r2
    5328:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    532a:	4a04      	ldr	r2, [pc, #16]	; (533c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    532c:	9b02      	ldr	r3, [sp, #8]
    532e:	6053      	str	r3, [r2, #4]
}
    5330:	bf00      	nop
    5332:	b004      	add	sp, #16
    5334:	4770      	bx	lr
    5336:	bf00      	nop
    5338:	0001607c 	.word	0x0001607c
    533c:	40048000 	.word	0x40048000

00005340 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5340:	b084      	sub	sp, #16
    5342:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    5344:	9b01      	ldr	r3, [sp, #4]
    5346:	681a      	ldr	r2, [r3, #0]
    5348:	490f      	ldr	r1, [pc, #60]	; (5388 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    534a:	4613      	mov	r3, r2
    534c:	00db      	lsls	r3, r3, #3
    534e:	4413      	add	r3, r2
    5350:	440b      	add	r3, r1
    5352:	3304      	adds	r3, #4
    5354:	781b      	ldrb	r3, [r3, #0]
    5356:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    5358:	4a0c      	ldr	r2, [pc, #48]	; (538c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    535a:	9b03      	ldr	r3, [sp, #12]
    535c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5360:	490a      	ldr	r1, [pc, #40]	; (538c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    5362:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    5366:	9b03      	ldr	r3, [sp, #12]
    5368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    536c:	4a07      	ldr	r2, [pc, #28]	; (538c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    536e:	9b03      	ldr	r3, [sp, #12]
    5370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5374:	4905      	ldr	r1, [pc, #20]	; (538c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    5376:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    537a:	9b03      	ldr	r3, [sp, #12]
    537c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5380:	bf00      	nop
    5382:	b004      	add	sp, #16
    5384:	4770      	bx	lr
    5386:	bf00      	nop
    5388:	00015d6c 	.word	0x00015d6c
    538c:	40065000 	.word	0x40065000

00005390 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5390:	b086      	sub	sp, #24
    5392:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    5394:	9b01      	ldr	r3, [sp, #4]
    5396:	681a      	ldr	r2, [r3, #0]
    5398:	4912      	ldr	r1, [pc, #72]	; (53e4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    539a:	4613      	mov	r3, r2
    539c:	00db      	lsls	r3, r3, #3
    539e:	4413      	add	r3, r2
    53a0:	440b      	add	r3, r1
    53a2:	3304      	adds	r3, #4
    53a4:	781b      	ldrb	r3, [r3, #0]
    53a6:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53a8:	9b01      	ldr	r3, [sp, #4]
    53aa:	685b      	ldr	r3, [r3, #4]
    53ac:	4a0e      	ldr	r2, [pc, #56]	; (53e8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    53ae:	5cd3      	ldrb	r3, [r2, r3]
    53b0:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    53b2:	4a0e      	ldr	r2, [pc, #56]	; (53ec <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    53b4:	9b05      	ldr	r3, [sp, #20]
    53b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    53ba:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    53bc:	9b03      	ldr	r3, [sp, #12]
    53be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    53c2:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    53c4:	9b04      	ldr	r3, [sp, #16]
    53c6:	061b      	lsls	r3, r3, #24
    53c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    53cc:	9a03      	ldr	r2, [sp, #12]
    53ce:	4313      	orrs	r3, r2
    53d0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    53d2:	4906      	ldr	r1, [pc, #24]	; (53ec <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    53d4:	9b05      	ldr	r3, [sp, #20]
    53d6:	9a03      	ldr	r2, [sp, #12]
    53d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    53dc:	bf00      	nop
    53de:	b006      	add	sp, #24
    53e0:	4770      	bx	lr
    53e2:	bf00      	nop
    53e4:	00015d6c 	.word	0x00015d6c
    53e8:	00016104 	.word	0x00016104
    53ec:	40065000 	.word	0x40065000

000053f0 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53f0:	b084      	sub	sp, #16
    53f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53f4:	4b0b      	ldr	r3, [pc, #44]	; (5424 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    53f6:	7f1b      	ldrb	r3, [r3, #28]
    53f8:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    53fa:	4b0b      	ldr	r3, [pc, #44]	; (5428 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    53fc:	685b      	ldr	r3, [r3, #4]
    53fe:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5400:	9b02      	ldr	r3, [sp, #8]
    5402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5406:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5408:	9b03      	ldr	r3, [sp, #12]
    540a:	031b      	lsls	r3, r3, #12
    540c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5410:	9a02      	ldr	r2, [sp, #8]
    5412:	4313      	orrs	r3, r2
    5414:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    5416:	4a04      	ldr	r2, [pc, #16]	; (5428 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5418:	9b02      	ldr	r3, [sp, #8]
    541a:	6053      	str	r3, [r2, #4]
}
    541c:	bf00      	nop
    541e:	b004      	add	sp, #16
    5420:	4770      	bx	lr
    5422:	bf00      	nop
    5424:	0001607c 	.word	0x0001607c
    5428:	40048000 	.word	0x40048000

0000542c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    542c:	b084      	sub	sp, #16
    542e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5430:	9b01      	ldr	r3, [sp, #4]
    5432:	685b      	ldr	r3, [r3, #4]
    5434:	4a0b      	ldr	r2, [pc, #44]	; (5464 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    5436:	5cd3      	ldrb	r3, [r2, r3]
    5438:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    543a:	4b0b      	ldr	r3, [pc, #44]	; (5468 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    543c:	685b      	ldr	r3, [r3, #4]
    543e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5440:	9b02      	ldr	r3, [sp, #8]
    5442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5446:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5448:	9b03      	ldr	r3, [sp, #12]
    544a:	031b      	lsls	r3, r3, #12
    544c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5450:	9a02      	ldr	r2, [sp, #8]
    5452:	4313      	orrs	r3, r2
    5454:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    5456:	4a04      	ldr	r2, [pc, #16]	; (5468 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    5458:	9b02      	ldr	r3, [sp, #8]
    545a:	6053      	str	r3, [r2, #4]
}
    545c:	bf00      	nop
    545e:	b004      	add	sp, #16
    5460:	4770      	bx	lr
    5462:	bf00      	nop
    5464:	0001607c 	.word	0x0001607c
    5468:	40048000 	.word	0x40048000

0000546c <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    546c:	b500      	push	{lr}
    546e:	b085      	sub	sp, #20
    5470:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    5472:	2300      	movs	r3, #0
    5474:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    5478:	9b01      	ldr	r3, [sp, #4]
    547a:	2b00      	cmp	r3, #0
    547c:	d037      	beq.n	54ee <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    547e:	2300      	movs	r3, #0
    5480:	9303      	str	r3, [sp, #12]
    5482:	e02b      	b.n	54dc <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    5484:	4b29      	ldr	r3, [pc, #164]	; (552c <DisableSafeClock+0xc0>)
    5486:	6819      	ldr	r1, [r3, #0]
    5488:	9a03      	ldr	r2, [sp, #12]
    548a:	4613      	mov	r3, r2
    548c:	005b      	lsls	r3, r3, #1
    548e:	4413      	add	r3, r2
    5490:	009b      	lsls	r3, r3, #2
    5492:	440b      	add	r3, r1
    5494:	3314      	adds	r3, #20
    5496:	681b      	ldr	r3, [r3, #0]
    5498:	2b05      	cmp	r3, #5
    549a:	d11c      	bne.n	54d6 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    549c:	2301      	movs	r3, #1
    549e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    54a2:	4b22      	ldr	r3, [pc, #136]	; (552c <DisableSafeClock+0xc0>)
    54a4:	6819      	ldr	r1, [r3, #0]
    54a6:	9a03      	ldr	r2, [sp, #12]
    54a8:	4613      	mov	r3, r2
    54aa:	005b      	lsls	r3, r3, #1
    54ac:	4413      	add	r3, r2
    54ae:	009b      	lsls	r3, r3, #2
    54b0:	440b      	add	r3, r1
    54b2:	3318      	adds	r3, #24
    54b4:	881b      	ldrh	r3, [r3, #0]
    54b6:	2b00      	cmp	r3, #0
    54b8:	d118      	bne.n	54ec <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    54ba:	4b1d      	ldr	r3, [pc, #116]	; (5530 <DisableSafeClock+0xc4>)
    54bc:	791b      	ldrb	r3, [r3, #4]
    54be:	4619      	mov	r1, r3
    54c0:	4a1c      	ldr	r2, [pc, #112]	; (5534 <DisableSafeClock+0xc8>)
    54c2:	460b      	mov	r3, r1
    54c4:	005b      	lsls	r3, r3, #1
    54c6:	440b      	add	r3, r1
    54c8:	009b      	lsls	r3, r3, #2
    54ca:	4413      	add	r3, r2
    54cc:	3308      	adds	r3, #8
    54ce:	681b      	ldr	r3, [r3, #0]
    54d0:	2005      	movs	r0, #5
    54d2:	4798      	blx	r3
                }
                break;
    54d4:	e00a      	b.n	54ec <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    54d6:	9b03      	ldr	r3, [sp, #12]
    54d8:	3301      	adds	r3, #1
    54da:	9303      	str	r3, [sp, #12]
    54dc:	4b13      	ldr	r3, [pc, #76]	; (552c <DisableSafeClock+0xc0>)
    54de:	681b      	ldr	r3, [r3, #0]
    54e0:	7a1b      	ldrb	r3, [r3, #8]
    54e2:	461a      	mov	r2, r3
    54e4:	9b03      	ldr	r3, [sp, #12]
    54e6:	4293      	cmp	r3, r2
    54e8:	d3cc      	bcc.n	5484 <DisableSafeClock+0x18>
    54ea:	e000      	b.n	54ee <DisableSafeClock+0x82>
                break;
    54ec:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    54ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    54f2:	f083 0301 	eor.w	r3, r3, #1
    54f6:	b2db      	uxtb	r3, r3
    54f8:	2b00      	cmp	r3, #0
    54fa:	d013      	beq.n	5524 <DisableSafeClock+0xb8>
    54fc:	4b0e      	ldr	r3, [pc, #56]	; (5538 <DisableSafeClock+0xcc>)
    54fe:	781b      	ldrb	r3, [r3, #0]
    5500:	f083 0301 	eor.w	r3, r3, #1
    5504:	b2db      	uxtb	r3, r3
    5506:	2b00      	cmp	r3, #0
    5508:	d00c      	beq.n	5524 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    550a:	4b09      	ldr	r3, [pc, #36]	; (5530 <DisableSafeClock+0xc4>)
    550c:	791b      	ldrb	r3, [r3, #4]
    550e:	4619      	mov	r1, r3
    5510:	4a08      	ldr	r2, [pc, #32]	; (5534 <DisableSafeClock+0xc8>)
    5512:	460b      	mov	r3, r1
    5514:	005b      	lsls	r3, r3, #1
    5516:	440b      	add	r3, r1
    5518:	009b      	lsls	r3, r3, #2
    551a:	4413      	add	r3, r2
    551c:	3308      	adds	r3, #8
    551e:	681b      	ldr	r3, [r3, #0]
    5520:	2005      	movs	r0, #5
    5522:	4798      	blx	r3
    }
}
    5524:	bf00      	nop
    5526:	b005      	add	sp, #20
    5528:	f85d fb04 	ldr.w	pc, [sp], #4
    552c:	1fff8bdc 	.word	0x1fff8bdc
    5530:	00015cfc 	.word	0x00015cfc
    5534:	0001632c 	.word	0x0001632c
    5538:	1fff8b18 	.word	0x1fff8b18

0000553c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    553c:	4b06      	ldr	r3, [pc, #24]	; (5558 <SetFircToResetValue_TrustedCall+0x1c>)
    553e:	2200      	movs	r2, #0
    5540:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    5544:	4b04      	ldr	r3, [pc, #16]	; (5558 <SetFircToResetValue_TrustedCall+0x1c>)
    5546:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    554a:	4a03      	ldr	r2, [pc, #12]	; (5558 <SetFircToResetValue_TrustedCall+0x1c>)
    554c:	f043 0301 	orr.w	r3, r3, #1
    5550:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    5554:	bf00      	nop
    5556:	4770      	bx	lr
    5558:	40064000 	.word	0x40064000

0000555c <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    555c:	b084      	sub	sp, #16
    555e:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    5560:	2303      	movs	r3, #3
    5562:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    5564:	2300      	movs	r3, #0
    5566:	9302      	str	r3, [sp, #8]
    5568:	e028      	b.n	55bc <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    556a:	9b01      	ldr	r3, [sp, #4]
    556c:	9a02      	ldr	r2, [sp, #8]
    556e:	320d      	adds	r2, #13
    5570:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5574:	2b28      	cmp	r3, #40	; 0x28
    5576:	d10b      	bne.n	5590 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5578:	9a01      	ldr	r2, [sp, #4]
    557a:	9b02      	ldr	r3, [sp, #8]
    557c:	330d      	adds	r3, #13
    557e:	00db      	lsls	r3, r3, #3
    5580:	4413      	add	r3, r2
    5582:	685b      	ldr	r3, [r3, #4]
    5584:	4a2b      	ldr	r2, [pc, #172]	; (5634 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    5586:	5cd3      	ldrb	r3, [r2, r3]
    5588:	011b      	lsls	r3, r3, #4
    558a:	9a03      	ldr	r2, [sp, #12]
    558c:	4313      	orrs	r3, r2
    558e:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    5590:	9b01      	ldr	r3, [sp, #4]
    5592:	9a02      	ldr	r2, [sp, #8]
    5594:	320d      	adds	r2, #13
    5596:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    559a:	2b29      	cmp	r3, #41	; 0x29
    559c:	d10b      	bne.n	55b6 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    559e:	9a01      	ldr	r2, [sp, #4]
    55a0:	9b02      	ldr	r3, [sp, #8]
    55a2:	330d      	adds	r3, #13
    55a4:	00db      	lsls	r3, r3, #3
    55a6:	4413      	add	r3, r2
    55a8:	685b      	ldr	r3, [r3, #4]
    55aa:	4a23      	ldr	r2, [pc, #140]	; (5638 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    55ac:	5cd3      	ldrb	r3, [r2, r3]
    55ae:	009b      	lsls	r3, r3, #2
    55b0:	9a03      	ldr	r2, [sp, #12]
    55b2:	4313      	orrs	r3, r2
    55b4:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    55b6:	9b02      	ldr	r3, [sp, #8]
    55b8:	3301      	adds	r3, #1
    55ba:	9302      	str	r3, [sp, #8]
    55bc:	9b01      	ldr	r3, [sp, #4]
    55be:	7adb      	ldrb	r3, [r3, #11]
    55c0:	461a      	mov	r2, r3
    55c2:	9b02      	ldr	r3, [sp, #8]
    55c4:	4293      	cmp	r3, r2
    55c6:	d3d0      	bcc.n	556a <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    55c8:	2300      	movs	r3, #0
    55ca:	9302      	str	r3, [sp, #8]
    55cc:	e026      	b.n	561c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    55ce:	9a01      	ldr	r2, [sp, #4]
    55d0:	9b02      	ldr	r3, [sp, #8]
    55d2:	334e      	adds	r3, #78	; 0x4e
    55d4:	00db      	lsls	r3, r3, #3
    55d6:	4413      	add	r3, r2
    55d8:	685b      	ldr	r3, [r3, #4]
    55da:	2b12      	cmp	r3, #18
    55dc:	d109      	bne.n	55f2 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    55de:	9a01      	ldr	r2, [sp, #4]
    55e0:	9b02      	ldr	r3, [sp, #8]
    55e2:	334e      	adds	r3, #78	; 0x4e
    55e4:	00db      	lsls	r3, r3, #3
    55e6:	4413      	add	r3, r2
    55e8:	891b      	ldrh	r3, [r3, #8]
    55ea:	005b      	lsls	r3, r3, #1
    55ec:	9a03      	ldr	r2, [sp, #12]
    55ee:	4313      	orrs	r3, r2
    55f0:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    55f2:	9a01      	ldr	r2, [sp, #4]
    55f4:	9b02      	ldr	r3, [sp, #8]
    55f6:	334e      	adds	r3, #78	; 0x4e
    55f8:	00db      	lsls	r3, r3, #3
    55fa:	4413      	add	r3, r2
    55fc:	685b      	ldr	r3, [r3, #4]
    55fe:	2b13      	cmp	r3, #19
    5600:	d109      	bne.n	5616 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    5602:	9a01      	ldr	r2, [sp, #4]
    5604:	9b02      	ldr	r3, [sp, #8]
    5606:	334e      	adds	r3, #78	; 0x4e
    5608:	00db      	lsls	r3, r3, #3
    560a:	4413      	add	r3, r2
    560c:	891b      	ldrh	r3, [r3, #8]
    560e:	461a      	mov	r2, r3
    5610:	9b03      	ldr	r3, [sp, #12]
    5612:	4313      	orrs	r3, r2
    5614:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    5616:	9b02      	ldr	r3, [sp, #8]
    5618:	3301      	adds	r3, #1
    561a:	9302      	str	r3, [sp, #8]
    561c:	9b01      	ldr	r3, [sp, #4]
    561e:	7c1b      	ldrb	r3, [r3, #16]
    5620:	461a      	mov	r2, r3
    5622:	9b02      	ldr	r3, [sp, #8]
    5624:	4293      	cmp	r3, r2
    5626:	d3d2      	bcc.n	55ce <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    5628:	4a04      	ldr	r2, [pc, #16]	; (563c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    562a:	9b03      	ldr	r3, [sp, #12]
    562c:	6113      	str	r3, [r2, #16]
}
    562e:	bf00      	nop
    5630:	b004      	add	sp, #16
    5632:	4770      	bx	lr
    5634:	0001607c 	.word	0x0001607c
    5638:	00016134 	.word	0x00016134
    563c:	40048000 	.word	0x40048000

00005640 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    5640:	b500      	push	{lr}
    5642:	b089      	sub	sp, #36	; 0x24
    5644:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    5646:	2300      	movs	r3, #0
    5648:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    564c:	4a21      	ldr	r2, [pc, #132]	; (56d4 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    564e:	9b01      	ldr	r3, [sp, #4]
    5650:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    5652:	4b21      	ldr	r3, [pc, #132]	; (56d8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    5654:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5658:	f003 0301 	and.w	r3, r3, #1
    565c:	2b00      	cmp	r3, #0
    565e:	d12e      	bne.n	56be <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    5660:	4b1e      	ldr	r3, [pc, #120]	; (56dc <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    5662:	2200      	movs	r2, #0
    5664:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    5666:	f7ff ff69 	bl	553c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    566a:	aa03      	add	r2, sp, #12
    566c:	a904      	add	r1, sp, #16
    566e:	a805      	add	r0, sp, #20
    5670:	f24c 3350 	movw	r3, #50000	; 0xc350
    5674:	f7fe f8ae 	bl	37d4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    5678:	4b17      	ldr	r3, [pc, #92]	; (56d8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    567a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    567e:	0e1b      	lsrs	r3, r3, #24
    5680:	f003 0301 	and.w	r3, r3, #1
    5684:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5686:	9a03      	ldr	r2, [sp, #12]
    5688:	a904      	add	r1, sp, #16
    568a:	ab05      	add	r3, sp, #20
    568c:	4618      	mov	r0, r3
    568e:	f7fe f8bb 	bl	3808 <Clock_Ip_TimeoutExpired>
    5692:	4603      	mov	r3, r0
    5694:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    5698:	9b06      	ldr	r3, [sp, #24]
    569a:	2b00      	cmp	r3, #0
    569c:	d106      	bne.n	56ac <Clock_Ip_SpecificPlatformInitClock+0x6c>
    569e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    56a2:	f083 0301 	eor.w	r3, r3, #1
    56a6:	b2db      	uxtb	r3, r3
    56a8:	2b00      	cmp	r3, #0
    56aa:	d1e5      	bne.n	5678 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    56ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    56b0:	2b00      	cmp	r3, #0
    56b2:	d007      	beq.n	56c4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    56b4:	2105      	movs	r1, #5
    56b6:	2001      	movs	r0, #1
    56b8:	f7fe f87c 	bl	37b4 <Clock_Ip_ReportClockErrors>
    56bc:	e002      	b.n	56c4 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    56be:	4b07      	ldr	r3, [pc, #28]	; (56dc <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    56c0:	2201      	movs	r2, #1
    56c2:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    56c4:	9801      	ldr	r0, [sp, #4]
    56c6:	f7ff ff49 	bl	555c <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    56ca:	bf00      	nop
    56cc:	b009      	add	sp, #36	; 0x24
    56ce:	f85d fb04 	ldr.w	pc, [sp], #4
    56d2:	bf00      	nop
    56d4:	1fff8bdc 	.word	0x1fff8bdc
    56d8:	40064000 	.word	0x40064000
    56dc:	1fff8b18 	.word	0x1fff8b18

000056e0 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    56e0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    56e2:	2300      	movs	r3, #0
    56e4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    56e6:	4b29      	ldr	r3, [pc, #164]	; (578c <getFircConfig+0xac>)
    56e8:	681b      	ldr	r3, [r3, #0]
    56ea:	2b00      	cmp	r3, #0
    56ec:	d024      	beq.n	5738 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    56ee:	2300      	movs	r3, #0
    56f0:	9301      	str	r3, [sp, #4]
    56f2:	e01a      	b.n	572a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    56f4:	4b25      	ldr	r3, [pc, #148]	; (578c <getFircConfig+0xac>)
    56f6:	6819      	ldr	r1, [r3, #0]
    56f8:	9a01      	ldr	r2, [sp, #4]
    56fa:	4613      	mov	r3, r2
    56fc:	005b      	lsls	r3, r3, #1
    56fe:	4413      	add	r3, r2
    5700:	009b      	lsls	r3, r3, #2
    5702:	440b      	add	r3, r1
    5704:	3314      	adds	r3, #20
    5706:	681b      	ldr	r3, [r3, #0]
    5708:	2b05      	cmp	r3, #5
    570a:	d10b      	bne.n	5724 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    570c:	4b1f      	ldr	r3, [pc, #124]	; (578c <getFircConfig+0xac>)
    570e:	6819      	ldr	r1, [r3, #0]
    5710:	9a01      	ldr	r2, [sp, #4]
    5712:	4613      	mov	r3, r2
    5714:	005b      	lsls	r3, r3, #1
    5716:	4413      	add	r3, r2
    5718:	009b      	lsls	r3, r3, #2
    571a:	3310      	adds	r3, #16
    571c:	440b      	add	r3, r1
    571e:	3304      	adds	r3, #4
    5720:	9300      	str	r3, [sp, #0]
                break;
    5722:	e009      	b.n	5738 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5724:	9b01      	ldr	r3, [sp, #4]
    5726:	3301      	adds	r3, #1
    5728:	9301      	str	r3, [sp, #4]
    572a:	4b18      	ldr	r3, [pc, #96]	; (578c <getFircConfig+0xac>)
    572c:	681b      	ldr	r3, [r3, #0]
    572e:	7a1b      	ldrb	r3, [r3, #8]
    5730:	461a      	mov	r2, r3
    5732:	9b01      	ldr	r3, [sp, #4]
    5734:	4293      	cmp	r3, r2
    5736:	d3dd      	bcc.n	56f4 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5738:	9b00      	ldr	r3, [sp, #0]
    573a:	2b00      	cmp	r3, #0
    573c:	d121      	bne.n	5782 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    573e:	4b14      	ldr	r3, [pc, #80]	; (5790 <getFircConfig+0xb0>)
    5740:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    5742:	4b13      	ldr	r3, [pc, #76]	; (5790 <getFircConfig+0xb0>)
    5744:	2205      	movs	r2, #5
    5746:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    5748:	4b12      	ldr	r3, [pc, #72]	; (5794 <getFircConfig+0xb4>)
    574a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    574e:	b29b      	uxth	r3, r3
    5750:	f003 0301 	and.w	r3, r3, #1
    5754:	b29a      	uxth	r2, r3
    5756:	4b0e      	ldr	r3, [pc, #56]	; (5790 <getFircConfig+0xb0>)
    5758:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    575a:	4b0e      	ldr	r3, [pc, #56]	; (5794 <getFircConfig+0xb4>)
    575c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    5760:	b2db      	uxtb	r3, r3
    5762:	f003 0303 	and.w	r3, r3, #3
    5766:	b2da      	uxtb	r2, r3
    5768:	4b09      	ldr	r3, [pc, #36]	; (5790 <getFircConfig+0xb0>)
    576a:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    576c:	4b09      	ldr	r3, [pc, #36]	; (5794 <getFircConfig+0xb4>)
    576e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5772:	b2db      	uxtb	r3, r3
    5774:	10db      	asrs	r3, r3, #3
    5776:	b2db      	uxtb	r3, r3
    5778:	f003 0301 	and.w	r3, r3, #1
    577c:	b2da      	uxtb	r2, r3
    577e:	4b04      	ldr	r3, [pc, #16]	; (5790 <getFircConfig+0xb0>)
    5780:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    5782:	9b00      	ldr	r3, [sp, #0]
}
    5784:	4618      	mov	r0, r3
    5786:	b002      	add	sp, #8
    5788:	4770      	bx	lr
    578a:	bf00      	nop
    578c:	1fff8bdc 	.word	0x1fff8bdc
    5790:	1fff8c48 	.word	0x1fff8c48
    5794:	40064000 	.word	0x40064000

00005798 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    5798:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    579a:	2300      	movs	r3, #0
    579c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    579e:	4b20      	ldr	r3, [pc, #128]	; (5820 <getSoscConfig+0x88>)
    57a0:	681b      	ldr	r3, [r3, #0]
    57a2:	2b00      	cmp	r3, #0
    57a4:	d024      	beq.n	57f0 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    57a6:	2300      	movs	r3, #0
    57a8:	9301      	str	r3, [sp, #4]
    57aa:	e01a      	b.n	57e2 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    57ac:	4b1c      	ldr	r3, [pc, #112]	; (5820 <getSoscConfig+0x88>)
    57ae:	6819      	ldr	r1, [r3, #0]
    57b0:	9a01      	ldr	r2, [sp, #4]
    57b2:	4613      	mov	r3, r2
    57b4:	009b      	lsls	r3, r3, #2
    57b6:	4413      	add	r3, r2
    57b8:	009b      	lsls	r3, r3, #2
    57ba:	440b      	add	r3, r1
    57bc:	332c      	adds	r3, #44	; 0x2c
    57be:	681b      	ldr	r3, [r3, #0]
    57c0:	2b08      	cmp	r3, #8
    57c2:	d10b      	bne.n	57dc <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    57c4:	4b16      	ldr	r3, [pc, #88]	; (5820 <getSoscConfig+0x88>)
    57c6:	6819      	ldr	r1, [r3, #0]
    57c8:	9a01      	ldr	r2, [sp, #4]
    57ca:	4613      	mov	r3, r2
    57cc:	009b      	lsls	r3, r3, #2
    57ce:	4413      	add	r3, r2
    57d0:	009b      	lsls	r3, r3, #2
    57d2:	3328      	adds	r3, #40	; 0x28
    57d4:	440b      	add	r3, r1
    57d6:	3304      	adds	r3, #4
    57d8:	9300      	str	r3, [sp, #0]
                break;
    57da:	e009      	b.n	57f0 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    57dc:	9b01      	ldr	r3, [sp, #4]
    57de:	3301      	adds	r3, #1
    57e0:	9301      	str	r3, [sp, #4]
    57e2:	4b0f      	ldr	r3, [pc, #60]	; (5820 <getSoscConfig+0x88>)
    57e4:	681b      	ldr	r3, [r3, #0]
    57e6:	7a5b      	ldrb	r3, [r3, #9]
    57e8:	461a      	mov	r2, r3
    57ea:	9b01      	ldr	r3, [sp, #4]
    57ec:	4293      	cmp	r3, r2
    57ee:	d3dd      	bcc.n	57ac <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    57f0:	9b00      	ldr	r3, [sp, #0]
    57f2:	2b00      	cmp	r3, #0
    57f4:	d110      	bne.n	5818 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    57f6:	4b0b      	ldr	r3, [pc, #44]	; (5824 <getSoscConfig+0x8c>)
    57f8:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    57fa:	4b0a      	ldr	r3, [pc, #40]	; (5824 <getSoscConfig+0x8c>)
    57fc:	2208      	movs	r2, #8
    57fe:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    5800:	4b09      	ldr	r3, [pc, #36]	; (5828 <getSoscConfig+0x90>)
    5802:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    5806:	b29b      	uxth	r3, r3
    5808:	f003 0301 	and.w	r3, r3, #1
    580c:	b29a      	uxth	r2, r3
    580e:	4b05      	ldr	r3, [pc, #20]	; (5824 <getSoscConfig+0x8c>)
    5810:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    5812:	4b04      	ldr	r3, [pc, #16]	; (5824 <getSoscConfig+0x8c>)
    5814:	4a05      	ldr	r2, [pc, #20]	; (582c <getSoscConfig+0x94>)
    5816:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    5818:	9b00      	ldr	r3, [sp, #0]
}
    581a:	4618      	mov	r0, r3
    581c:	b002      	add	sp, #8
    581e:	4770      	bx	lr
    5820:	1fff8bdc 	.word	0x1fff8bdc
    5824:	1fff8c54 	.word	0x1fff8c54
    5828:	40064000 	.word	0x40064000
    582c:	02625a00 	.word	0x02625a00

00005830 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5830:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    5832:	2300      	movs	r3, #0
    5834:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5836:	4b28      	ldr	r3, [pc, #160]	; (58d8 <getSpllConfig+0xa8>)
    5838:	681b      	ldr	r3, [r3, #0]
    583a:	2b00      	cmp	r3, #0
    583c:	d023      	beq.n	5886 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    583e:	2300      	movs	r3, #0
    5840:	9301      	str	r3, [sp, #4]
    5842:	e019      	b.n	5878 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    5844:	4b24      	ldr	r3, [pc, #144]	; (58d8 <getSpllConfig+0xa8>)
    5846:	6819      	ldr	r1, [r3, #0]
    5848:	9a01      	ldr	r2, [sp, #4]
    584a:	4613      	mov	r3, r2
    584c:	009b      	lsls	r3, r3, #2
    584e:	4413      	add	r3, r2
    5850:	00db      	lsls	r3, r3, #3
    5852:	440b      	add	r3, r1
    5854:	3340      	adds	r3, #64	; 0x40
    5856:	681b      	ldr	r3, [r3, #0]
    5858:	2b09      	cmp	r3, #9
    585a:	d10a      	bne.n	5872 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    585c:	4b1e      	ldr	r3, [pc, #120]	; (58d8 <getSpllConfig+0xa8>)
    585e:	6819      	ldr	r1, [r3, #0]
    5860:	9a01      	ldr	r2, [sp, #4]
    5862:	4613      	mov	r3, r2
    5864:	009b      	lsls	r3, r3, #2
    5866:	4413      	add	r3, r2
    5868:	00db      	lsls	r3, r3, #3
    586a:	3340      	adds	r3, #64	; 0x40
    586c:	440b      	add	r3, r1
    586e:	9300      	str	r3, [sp, #0]
                break;
    5870:	e009      	b.n	5886 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5872:	9b01      	ldr	r3, [sp, #4]
    5874:	3301      	adds	r3, #1
    5876:	9301      	str	r3, [sp, #4]
    5878:	4b17      	ldr	r3, [pc, #92]	; (58d8 <getSpllConfig+0xa8>)
    587a:	681b      	ldr	r3, [r3, #0]
    587c:	7a9b      	ldrb	r3, [r3, #10]
    587e:	461a      	mov	r2, r3
    5880:	9b01      	ldr	r3, [sp, #4]
    5882:	4293      	cmp	r3, r2
    5884:	d3de      	bcc.n	5844 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5886:	9b00      	ldr	r3, [sp, #0]
    5888:	2b00      	cmp	r3, #0
    588a:	d121      	bne.n	58d0 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    588c:	4b13      	ldr	r3, [pc, #76]	; (58dc <getSpllConfig+0xac>)
    588e:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    5890:	4b12      	ldr	r3, [pc, #72]	; (58dc <getSpllConfig+0xac>)
    5892:	2209      	movs	r2, #9
    5894:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    5896:	4b12      	ldr	r3, [pc, #72]	; (58e0 <getSpllConfig+0xb0>)
    5898:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    589c:	b29b      	uxth	r3, r3
    589e:	f003 0301 	and.w	r3, r3, #1
    58a2:	b29a      	uxth	r2, r3
    58a4:	4b0d      	ldr	r3, [pc, #52]	; (58dc <getSpllConfig+0xac>)
    58a6:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    58a8:	4b0d      	ldr	r3, [pc, #52]	; (58e0 <getSpllConfig+0xb0>)
    58aa:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    58ae:	0a1b      	lsrs	r3, r3, #8
    58b0:	b2db      	uxtb	r3, r3
    58b2:	f003 0307 	and.w	r3, r3, #7
    58b6:	b2da      	uxtb	r2, r3
    58b8:	4b08      	ldr	r3, [pc, #32]	; (58dc <getSpllConfig+0xac>)
    58ba:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    58bc:	4b08      	ldr	r3, [pc, #32]	; (58e0 <getSpllConfig+0xb0>)
    58be:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    58c2:	0c1b      	lsrs	r3, r3, #16
    58c4:	b2db      	uxtb	r3, r3
    58c6:	f003 031f 	and.w	r3, r3, #31
    58ca:	b2da      	uxtb	r2, r3
    58cc:	4b03      	ldr	r3, [pc, #12]	; (58dc <getSpllConfig+0xac>)
    58ce:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    58d0:	9b00      	ldr	r3, [sp, #0]
}
    58d2:	4618      	mov	r0, r3
    58d4:	b002      	add	sp, #8
    58d6:	4770      	bx	lr
    58d8:	1fff8bdc 	.word	0x1fff8bdc
    58dc:	1fff8c68 	.word	0x1fff8c68
    58e0:	40064000 	.word	0x40064000

000058e4 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    58e4:	b086      	sub	sp, #24
    58e6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    58e8:	2300      	movs	r3, #0
    58ea:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    58ec:	9b01      	ldr	r3, [sp, #4]
    58ee:	2b1b      	cmp	r3, #27
    58f0:	d00f      	beq.n	5912 <getSelectorConfig+0x2e>
    58f2:	9b01      	ldr	r3, [sp, #4]
    58f4:	2b1b      	cmp	r3, #27
    58f6:	d80f      	bhi.n	5918 <getSelectorConfig+0x34>
    58f8:	9b01      	ldr	r3, [sp, #4]
    58fa:	2b19      	cmp	r3, #25
    58fc:	d003      	beq.n	5906 <getSelectorConfig+0x22>
    58fe:	9b01      	ldr	r3, [sp, #4]
    5900:	2b1a      	cmp	r3, #26
    5902:	d003      	beq.n	590c <getSelectorConfig+0x28>
    5904:	e008      	b.n	5918 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    5906:	2300      	movs	r3, #0
    5908:	9304      	str	r3, [sp, #16]
            break;
    590a:	e008      	b.n	591e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    590c:	2301      	movs	r3, #1
    590e:	9304      	str	r3, [sp, #16]
            break;
    5910:	e005      	b.n	591e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    5912:	2302      	movs	r3, #2
    5914:	9304      	str	r3, [sp, #16]
            break;
    5916:	e002      	b.n	591e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5918:	2300      	movs	r3, #0
    591a:	9304      	str	r3, [sp, #16]
            break;
    591c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    591e:	4b36      	ldr	r3, [pc, #216]	; (59f8 <getSelectorConfig+0x114>)
    5920:	681b      	ldr	r3, [r3, #0]
    5922:	2b00      	cmp	r3, #0
    5924:	d01d      	beq.n	5962 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5926:	2300      	movs	r3, #0
    5928:	9303      	str	r3, [sp, #12]
    592a:	e013      	b.n	5954 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    592c:	4b32      	ldr	r3, [pc, #200]	; (59f8 <getSelectorConfig+0x114>)
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	9a03      	ldr	r2, [sp, #12]
    5932:	320d      	adds	r2, #13
    5934:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5938:	9a01      	ldr	r2, [sp, #4]
    593a:	429a      	cmp	r2, r3
    593c:	d107      	bne.n	594e <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    593e:	4b2e      	ldr	r3, [pc, #184]	; (59f8 <getSelectorConfig+0x114>)
    5940:	681a      	ldr	r2, [r3, #0]
    5942:	9b03      	ldr	r3, [sp, #12]
    5944:	330d      	adds	r3, #13
    5946:	00db      	lsls	r3, r3, #3
    5948:	4413      	add	r3, r2
    594a:	9305      	str	r3, [sp, #20]
                break;
    594c:	e009      	b.n	5962 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    594e:	9b03      	ldr	r3, [sp, #12]
    5950:	3301      	adds	r3, #1
    5952:	9303      	str	r3, [sp, #12]
    5954:	4b28      	ldr	r3, [pc, #160]	; (59f8 <getSelectorConfig+0x114>)
    5956:	681b      	ldr	r3, [r3, #0]
    5958:	7adb      	ldrb	r3, [r3, #11]
    595a:	461a      	mov	r2, r3
    595c:	9b03      	ldr	r3, [sp, #12]
    595e:	4293      	cmp	r3, r2
    5960:	d3e4      	bcc.n	592c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5962:	9b05      	ldr	r3, [sp, #20]
    5964:	2b00      	cmp	r3, #0
    5966:	d140      	bne.n	59ea <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    5968:	9b04      	ldr	r3, [sp, #16]
    596a:	00db      	lsls	r3, r3, #3
    596c:	4a23      	ldr	r2, [pc, #140]	; (59fc <getSelectorConfig+0x118>)
    596e:	4413      	add	r3, r2
    5970:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    5972:	4922      	ldr	r1, [pc, #136]	; (59fc <getSelectorConfig+0x118>)
    5974:	9b04      	ldr	r3, [sp, #16]
    5976:	9a01      	ldr	r2, [sp, #4]
    5978:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    597c:	9b01      	ldr	r3, [sp, #4]
    597e:	2b1b      	cmp	r3, #27
    5980:	d025      	beq.n	59ce <getSelectorConfig+0xea>
    5982:	9b01      	ldr	r3, [sp, #4]
    5984:	2b1b      	cmp	r3, #27
    5986:	d832      	bhi.n	59ee <getSelectorConfig+0x10a>
    5988:	9b01      	ldr	r3, [sp, #4]
    598a:	2b19      	cmp	r3, #25
    598c:	d003      	beq.n	5996 <getSelectorConfig+0xb2>
    598e:	9b01      	ldr	r3, [sp, #4]
    5990:	2b1a      	cmp	r3, #26
    5992:	d00e      	beq.n	59b2 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5994:	e02b      	b.n	59ee <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    5996:	4b1a      	ldr	r3, [pc, #104]	; (5a00 <getSelectorConfig+0x11c>)
    5998:	695b      	ldr	r3, [r3, #20]
    599a:	0e1b      	lsrs	r3, r3, #24
    599c:	f003 030f 	and.w	r3, r3, #15
    59a0:	4a18      	ldr	r2, [pc, #96]	; (5a04 <getSelectorConfig+0x120>)
    59a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    59a6:	4915      	ldr	r1, [pc, #84]	; (59fc <getSelectorConfig+0x118>)
    59a8:	9b04      	ldr	r3, [sp, #16]
    59aa:	00db      	lsls	r3, r3, #3
    59ac:	440b      	add	r3, r1
    59ae:	605a      	str	r2, [r3, #4]
                break;
    59b0:	e01e      	b.n	59f0 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    59b2:	4b13      	ldr	r3, [pc, #76]	; (5a00 <getSelectorConfig+0x11c>)
    59b4:	699b      	ldr	r3, [r3, #24]
    59b6:	0e1b      	lsrs	r3, r3, #24
    59b8:	f003 030f 	and.w	r3, r3, #15
    59bc:	4a11      	ldr	r2, [pc, #68]	; (5a04 <getSelectorConfig+0x120>)
    59be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    59c2:	490e      	ldr	r1, [pc, #56]	; (59fc <getSelectorConfig+0x118>)
    59c4:	9b04      	ldr	r3, [sp, #16]
    59c6:	00db      	lsls	r3, r3, #3
    59c8:	440b      	add	r3, r1
    59ca:	605a      	str	r2, [r3, #4]
                break;
    59cc:	e010      	b.n	59f0 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    59ce:	4b0c      	ldr	r3, [pc, #48]	; (5a00 <getSelectorConfig+0x11c>)
    59d0:	69db      	ldr	r3, [r3, #28]
    59d2:	0e1b      	lsrs	r3, r3, #24
    59d4:	f003 030f 	and.w	r3, r3, #15
    59d8:	4a0a      	ldr	r2, [pc, #40]	; (5a04 <getSelectorConfig+0x120>)
    59da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    59de:	4907      	ldr	r1, [pc, #28]	; (59fc <getSelectorConfig+0x118>)
    59e0:	9b04      	ldr	r3, [sp, #16]
    59e2:	00db      	lsls	r3, r3, #3
    59e4:	440b      	add	r3, r1
    59e6:	605a      	str	r2, [r3, #4]
                break;
    59e8:	e002      	b.n	59f0 <getSelectorConfig+0x10c>
        }
    }
    59ea:	bf00      	nop
    59ec:	e000      	b.n	59f0 <getSelectorConfig+0x10c>
                break;
    59ee:	bf00      	nop

    return ReturnValue;
    59f0:	9b05      	ldr	r3, [sp, #20]
}
    59f2:	4618      	mov	r0, r3
    59f4:	b006      	add	sp, #24
    59f6:	4770      	bx	lr
    59f8:	1fff8bdc 	.word	0x1fff8bdc
    59fc:	1fff8c90 	.word	0x1fff8c90
    5a00:	40064000 	.word	0x40064000
    5a04:	000163fc 	.word	0x000163fc

00005a08 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5a08:	b086      	sub	sp, #24
    5a0a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5a0c:	2300      	movs	r3, #0
    5a0e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5a10:	2300      	movs	r3, #0
    5a12:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5a14:	9b01      	ldr	r3, [sp, #4]
    5a16:	2b1f      	cmp	r3, #31
    5a18:	d00f      	beq.n	5a3a <getCoreDividerConfig+0x32>
    5a1a:	9b01      	ldr	r3, [sp, #4]
    5a1c:	2b1f      	cmp	r3, #31
    5a1e:	d80f      	bhi.n	5a40 <getCoreDividerConfig+0x38>
    5a20:	9b01      	ldr	r3, [sp, #4]
    5a22:	2b1d      	cmp	r3, #29
    5a24:	d003      	beq.n	5a2e <getCoreDividerConfig+0x26>
    5a26:	9b01      	ldr	r3, [sp, #4]
    5a28:	2b1e      	cmp	r3, #30
    5a2a:	d003      	beq.n	5a34 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5a2c:	e008      	b.n	5a40 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5a2e:	2300      	movs	r3, #0
    5a30:	9304      	str	r3, [sp, #16]
            break;
    5a32:	e006      	b.n	5a42 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5a34:	2301      	movs	r3, #1
    5a36:	9304      	str	r3, [sp, #16]
            break;
    5a38:	e003      	b.n	5a42 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5a3a:	2302      	movs	r3, #2
    5a3c:	9304      	str	r3, [sp, #16]
            break;
    5a3e:	e000      	b.n	5a42 <getCoreDividerConfig+0x3a>
                break;
    5a40:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5a42:	4b41      	ldr	r3, [pc, #260]	; (5b48 <getCoreDividerConfig+0x140>)
    5a44:	681b      	ldr	r3, [r3, #0]
    5a46:	2b00      	cmp	r3, #0
    5a48:	d026      	beq.n	5a98 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5a4a:	2300      	movs	r3, #0
    5a4c:	9303      	str	r3, [sp, #12]
    5a4e:	e01c      	b.n	5a8a <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5a50:	4b3d      	ldr	r3, [pc, #244]	; (5b48 <getCoreDividerConfig+0x140>)
    5a52:	6819      	ldr	r1, [r3, #0]
    5a54:	9a03      	ldr	r2, [sp, #12]
    5a56:	4613      	mov	r3, r2
    5a58:	005b      	lsls	r3, r3, #1
    5a5a:	4413      	add	r3, r2
    5a5c:	009b      	lsls	r3, r3, #2
    5a5e:	440b      	add	r3, r1
    5a60:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5a64:	681b      	ldr	r3, [r3, #0]
    5a66:	9a01      	ldr	r2, [sp, #4]
    5a68:	429a      	cmp	r2, r3
    5a6a:	d10b      	bne.n	5a84 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5a6c:	4b36      	ldr	r3, [pc, #216]	; (5b48 <getCoreDividerConfig+0x140>)
    5a6e:	6819      	ldr	r1, [r3, #0]
    5a70:	9a03      	ldr	r2, [sp, #12]
    5a72:	4613      	mov	r3, r2
    5a74:	005b      	lsls	r3, r3, #1
    5a76:	4413      	add	r3, r2
    5a78:	009b      	lsls	r3, r3, #2
    5a7a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5a7e:	440b      	add	r3, r1
    5a80:	9305      	str	r3, [sp, #20]
                break;
    5a82:	e009      	b.n	5a98 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5a84:	9b03      	ldr	r3, [sp, #12]
    5a86:	3301      	adds	r3, #1
    5a88:	9303      	str	r3, [sp, #12]
    5a8a:	4b2f      	ldr	r3, [pc, #188]	; (5b48 <getCoreDividerConfig+0x140>)
    5a8c:	681b      	ldr	r3, [r3, #0]
    5a8e:	7b1b      	ldrb	r3, [r3, #12]
    5a90:	461a      	mov	r2, r3
    5a92:	9b03      	ldr	r3, [sp, #12]
    5a94:	4293      	cmp	r3, r2
    5a96:	d3db      	bcc.n	5a50 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5a98:	9b05      	ldr	r3, [sp, #20]
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	d14d      	bne.n	5b3a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5a9e:	9a04      	ldr	r2, [sp, #16]
    5aa0:	4613      	mov	r3, r2
    5aa2:	005b      	lsls	r3, r3, #1
    5aa4:	4413      	add	r3, r2
    5aa6:	009b      	lsls	r3, r3, #2
    5aa8:	4a28      	ldr	r2, [pc, #160]	; (5b4c <getCoreDividerConfig+0x144>)
    5aaa:	4413      	add	r3, r2
    5aac:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5aae:	4927      	ldr	r1, [pc, #156]	; (5b4c <getCoreDividerConfig+0x144>)
    5ab0:	9a04      	ldr	r2, [sp, #16]
    5ab2:	4613      	mov	r3, r2
    5ab4:	005b      	lsls	r3, r3, #1
    5ab6:	4413      	add	r3, r2
    5ab8:	009b      	lsls	r3, r3, #2
    5aba:	440b      	add	r3, r1
    5abc:	9a01      	ldr	r2, [sp, #4]
    5abe:	601a      	str	r2, [r3, #0]
        switch(Name)
    5ac0:	9b01      	ldr	r3, [sp, #4]
    5ac2:	2b1f      	cmp	r3, #31
    5ac4:	d029      	beq.n	5b1a <getCoreDividerConfig+0x112>
    5ac6:	9b01      	ldr	r3, [sp, #4]
    5ac8:	2b1f      	cmp	r3, #31
    5aca:	d838      	bhi.n	5b3e <getCoreDividerConfig+0x136>
    5acc:	9b01      	ldr	r3, [sp, #4]
    5ace:	2b1d      	cmp	r3, #29
    5ad0:	d003      	beq.n	5ada <getCoreDividerConfig+0xd2>
    5ad2:	9b01      	ldr	r3, [sp, #4]
    5ad4:	2b1e      	cmp	r3, #30
    5ad6:	d010      	beq.n	5afa <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5ad8:	e031      	b.n	5b3e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5ada:	4b1d      	ldr	r3, [pc, #116]	; (5b50 <getCoreDividerConfig+0x148>)
    5adc:	695b      	ldr	r3, [r3, #20]
    5ade:	0c1b      	lsrs	r3, r3, #16
    5ae0:	f003 030f 	and.w	r3, r3, #15
    5ae4:	1c59      	adds	r1, r3, #1
    5ae6:	4819      	ldr	r0, [pc, #100]	; (5b4c <getCoreDividerConfig+0x144>)
    5ae8:	9a04      	ldr	r2, [sp, #16]
    5aea:	4613      	mov	r3, r2
    5aec:	005b      	lsls	r3, r3, #1
    5aee:	4413      	add	r3, r2
    5af0:	009b      	lsls	r3, r3, #2
    5af2:	4403      	add	r3, r0
    5af4:	3304      	adds	r3, #4
    5af6:	6019      	str	r1, [r3, #0]
                break;
    5af8:	e022      	b.n	5b40 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5afa:	4b15      	ldr	r3, [pc, #84]	; (5b50 <getCoreDividerConfig+0x148>)
    5afc:	699b      	ldr	r3, [r3, #24]
    5afe:	0c1b      	lsrs	r3, r3, #16
    5b00:	f003 030f 	and.w	r3, r3, #15
    5b04:	1c59      	adds	r1, r3, #1
    5b06:	4811      	ldr	r0, [pc, #68]	; (5b4c <getCoreDividerConfig+0x144>)
    5b08:	9a04      	ldr	r2, [sp, #16]
    5b0a:	4613      	mov	r3, r2
    5b0c:	005b      	lsls	r3, r3, #1
    5b0e:	4413      	add	r3, r2
    5b10:	009b      	lsls	r3, r3, #2
    5b12:	4403      	add	r3, r0
    5b14:	3304      	adds	r3, #4
    5b16:	6019      	str	r1, [r3, #0]
                break;
    5b18:	e012      	b.n	5b40 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5b1a:	4b0d      	ldr	r3, [pc, #52]	; (5b50 <getCoreDividerConfig+0x148>)
    5b1c:	69db      	ldr	r3, [r3, #28]
    5b1e:	0c1b      	lsrs	r3, r3, #16
    5b20:	f003 030f 	and.w	r3, r3, #15
    5b24:	1c59      	adds	r1, r3, #1
    5b26:	4809      	ldr	r0, [pc, #36]	; (5b4c <getCoreDividerConfig+0x144>)
    5b28:	9a04      	ldr	r2, [sp, #16]
    5b2a:	4613      	mov	r3, r2
    5b2c:	005b      	lsls	r3, r3, #1
    5b2e:	4413      	add	r3, r2
    5b30:	009b      	lsls	r3, r3, #2
    5b32:	4403      	add	r3, r0
    5b34:	3304      	adds	r3, #4
    5b36:	6019      	str	r1, [r3, #0]
                break;
    5b38:	e002      	b.n	5b40 <getCoreDividerConfig+0x138>
        }
    }
    5b3a:	bf00      	nop
    5b3c:	e000      	b.n	5b40 <getCoreDividerConfig+0x138>
                break;
    5b3e:	bf00      	nop

    return ReturnValue;
    5b40:	9b05      	ldr	r3, [sp, #20]
}
    5b42:	4618      	mov	r0, r3
    5b44:	b006      	add	sp, #24
    5b46:	4770      	bx	lr
    5b48:	1fff8bdc 	.word	0x1fff8bdc
    5b4c:	1fff8ca8 	.word	0x1fff8ca8
    5b50:	40064000 	.word	0x40064000

00005b54 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5b54:	b086      	sub	sp, #24
    5b56:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5b58:	2300      	movs	r3, #0
    5b5a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5b5c:	2300      	movs	r3, #0
    5b5e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5b60:	9b01      	ldr	r3, [sp, #4]
    5b62:	2b23      	cmp	r3, #35	; 0x23
    5b64:	d00f      	beq.n	5b86 <getBusDividerConfig+0x32>
    5b66:	9b01      	ldr	r3, [sp, #4]
    5b68:	2b23      	cmp	r3, #35	; 0x23
    5b6a:	d80f      	bhi.n	5b8c <getBusDividerConfig+0x38>
    5b6c:	9b01      	ldr	r3, [sp, #4]
    5b6e:	2b21      	cmp	r3, #33	; 0x21
    5b70:	d003      	beq.n	5b7a <getBusDividerConfig+0x26>
    5b72:	9b01      	ldr	r3, [sp, #4]
    5b74:	2b22      	cmp	r3, #34	; 0x22
    5b76:	d003      	beq.n	5b80 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5b78:	e008      	b.n	5b8c <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5b7a:	2300      	movs	r3, #0
    5b7c:	9304      	str	r3, [sp, #16]
            break;
    5b7e:	e006      	b.n	5b8e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5b80:	2301      	movs	r3, #1
    5b82:	9304      	str	r3, [sp, #16]
            break;
    5b84:	e003      	b.n	5b8e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5b86:	2302      	movs	r3, #2
    5b88:	9304      	str	r3, [sp, #16]
            break;
    5b8a:	e000      	b.n	5b8e <getBusDividerConfig+0x3a>
                break;
    5b8c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5b8e:	4b41      	ldr	r3, [pc, #260]	; (5c94 <getBusDividerConfig+0x140>)
    5b90:	681b      	ldr	r3, [r3, #0]
    5b92:	2b00      	cmp	r3, #0
    5b94:	d026      	beq.n	5be4 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5b96:	2300      	movs	r3, #0
    5b98:	9303      	str	r3, [sp, #12]
    5b9a:	e01c      	b.n	5bd6 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5b9c:	4b3d      	ldr	r3, [pc, #244]	; (5c94 <getBusDividerConfig+0x140>)
    5b9e:	6819      	ldr	r1, [r3, #0]
    5ba0:	9a03      	ldr	r2, [sp, #12]
    5ba2:	4613      	mov	r3, r2
    5ba4:	005b      	lsls	r3, r3, #1
    5ba6:	4413      	add	r3, r2
    5ba8:	009b      	lsls	r3, r3, #2
    5baa:	440b      	add	r3, r1
    5bac:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5bb0:	681b      	ldr	r3, [r3, #0]
    5bb2:	9a01      	ldr	r2, [sp, #4]
    5bb4:	429a      	cmp	r2, r3
    5bb6:	d10b      	bne.n	5bd0 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5bb8:	4b36      	ldr	r3, [pc, #216]	; (5c94 <getBusDividerConfig+0x140>)
    5bba:	6819      	ldr	r1, [r3, #0]
    5bbc:	9a03      	ldr	r2, [sp, #12]
    5bbe:	4613      	mov	r3, r2
    5bc0:	005b      	lsls	r3, r3, #1
    5bc2:	4413      	add	r3, r2
    5bc4:	009b      	lsls	r3, r3, #2
    5bc6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5bca:	440b      	add	r3, r1
    5bcc:	9305      	str	r3, [sp, #20]
                break;
    5bce:	e009      	b.n	5be4 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5bd0:	9b03      	ldr	r3, [sp, #12]
    5bd2:	3301      	adds	r3, #1
    5bd4:	9303      	str	r3, [sp, #12]
    5bd6:	4b2f      	ldr	r3, [pc, #188]	; (5c94 <getBusDividerConfig+0x140>)
    5bd8:	681b      	ldr	r3, [r3, #0]
    5bda:	7b1b      	ldrb	r3, [r3, #12]
    5bdc:	461a      	mov	r2, r3
    5bde:	9b03      	ldr	r3, [sp, #12]
    5be0:	4293      	cmp	r3, r2
    5be2:	d3db      	bcc.n	5b9c <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5be4:	9b05      	ldr	r3, [sp, #20]
    5be6:	2b00      	cmp	r3, #0
    5be8:	d14d      	bne.n	5c86 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5bea:	9a04      	ldr	r2, [sp, #16]
    5bec:	4613      	mov	r3, r2
    5bee:	005b      	lsls	r3, r3, #1
    5bf0:	4413      	add	r3, r2
    5bf2:	009b      	lsls	r3, r3, #2
    5bf4:	4a28      	ldr	r2, [pc, #160]	; (5c98 <getBusDividerConfig+0x144>)
    5bf6:	4413      	add	r3, r2
    5bf8:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5bfa:	4927      	ldr	r1, [pc, #156]	; (5c98 <getBusDividerConfig+0x144>)
    5bfc:	9a04      	ldr	r2, [sp, #16]
    5bfe:	4613      	mov	r3, r2
    5c00:	005b      	lsls	r3, r3, #1
    5c02:	4413      	add	r3, r2
    5c04:	009b      	lsls	r3, r3, #2
    5c06:	440b      	add	r3, r1
    5c08:	9a01      	ldr	r2, [sp, #4]
    5c0a:	601a      	str	r2, [r3, #0]
        switch(Name)
    5c0c:	9b01      	ldr	r3, [sp, #4]
    5c0e:	2b23      	cmp	r3, #35	; 0x23
    5c10:	d029      	beq.n	5c66 <getBusDividerConfig+0x112>
    5c12:	9b01      	ldr	r3, [sp, #4]
    5c14:	2b23      	cmp	r3, #35	; 0x23
    5c16:	d838      	bhi.n	5c8a <getBusDividerConfig+0x136>
    5c18:	9b01      	ldr	r3, [sp, #4]
    5c1a:	2b21      	cmp	r3, #33	; 0x21
    5c1c:	d003      	beq.n	5c26 <getBusDividerConfig+0xd2>
    5c1e:	9b01      	ldr	r3, [sp, #4]
    5c20:	2b22      	cmp	r3, #34	; 0x22
    5c22:	d010      	beq.n	5c46 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5c24:	e031      	b.n	5c8a <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5c26:	4b1d      	ldr	r3, [pc, #116]	; (5c9c <getBusDividerConfig+0x148>)
    5c28:	695b      	ldr	r3, [r3, #20]
    5c2a:	091b      	lsrs	r3, r3, #4
    5c2c:	f003 030f 	and.w	r3, r3, #15
    5c30:	1c59      	adds	r1, r3, #1
    5c32:	4819      	ldr	r0, [pc, #100]	; (5c98 <getBusDividerConfig+0x144>)
    5c34:	9a04      	ldr	r2, [sp, #16]
    5c36:	4613      	mov	r3, r2
    5c38:	005b      	lsls	r3, r3, #1
    5c3a:	4413      	add	r3, r2
    5c3c:	009b      	lsls	r3, r3, #2
    5c3e:	4403      	add	r3, r0
    5c40:	3304      	adds	r3, #4
    5c42:	6019      	str	r1, [r3, #0]
                break;
    5c44:	e022      	b.n	5c8c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5c46:	4b15      	ldr	r3, [pc, #84]	; (5c9c <getBusDividerConfig+0x148>)
    5c48:	699b      	ldr	r3, [r3, #24]
    5c4a:	091b      	lsrs	r3, r3, #4
    5c4c:	f003 030f 	and.w	r3, r3, #15
    5c50:	1c59      	adds	r1, r3, #1
    5c52:	4811      	ldr	r0, [pc, #68]	; (5c98 <getBusDividerConfig+0x144>)
    5c54:	9a04      	ldr	r2, [sp, #16]
    5c56:	4613      	mov	r3, r2
    5c58:	005b      	lsls	r3, r3, #1
    5c5a:	4413      	add	r3, r2
    5c5c:	009b      	lsls	r3, r3, #2
    5c5e:	4403      	add	r3, r0
    5c60:	3304      	adds	r3, #4
    5c62:	6019      	str	r1, [r3, #0]
                break;
    5c64:	e012      	b.n	5c8c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5c66:	4b0d      	ldr	r3, [pc, #52]	; (5c9c <getBusDividerConfig+0x148>)
    5c68:	69db      	ldr	r3, [r3, #28]
    5c6a:	091b      	lsrs	r3, r3, #4
    5c6c:	f003 030f 	and.w	r3, r3, #15
    5c70:	1c59      	adds	r1, r3, #1
    5c72:	4809      	ldr	r0, [pc, #36]	; (5c98 <getBusDividerConfig+0x144>)
    5c74:	9a04      	ldr	r2, [sp, #16]
    5c76:	4613      	mov	r3, r2
    5c78:	005b      	lsls	r3, r3, #1
    5c7a:	4413      	add	r3, r2
    5c7c:	009b      	lsls	r3, r3, #2
    5c7e:	4403      	add	r3, r0
    5c80:	3304      	adds	r3, #4
    5c82:	6019      	str	r1, [r3, #0]
                break;
    5c84:	e002      	b.n	5c8c <getBusDividerConfig+0x138>
        }
    }
    5c86:	bf00      	nop
    5c88:	e000      	b.n	5c8c <getBusDividerConfig+0x138>
                break;
    5c8a:	bf00      	nop

    return ReturnValue;
    5c8c:	9b05      	ldr	r3, [sp, #20]
}
    5c8e:	4618      	mov	r0, r3
    5c90:	b006      	add	sp, #24
    5c92:	4770      	bx	lr
    5c94:	1fff8bdc 	.word	0x1fff8bdc
    5c98:	1fff8ccc 	.word	0x1fff8ccc
    5c9c:	40064000 	.word	0x40064000

00005ca0 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5ca0:	b086      	sub	sp, #24
    5ca2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5ca4:	2300      	movs	r3, #0
    5ca6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5ca8:	2300      	movs	r3, #0
    5caa:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5cac:	9b01      	ldr	r3, [sp, #4]
    5cae:	2b27      	cmp	r3, #39	; 0x27
    5cb0:	d00f      	beq.n	5cd2 <getSlowDividerConfig+0x32>
    5cb2:	9b01      	ldr	r3, [sp, #4]
    5cb4:	2b27      	cmp	r3, #39	; 0x27
    5cb6:	d80f      	bhi.n	5cd8 <getSlowDividerConfig+0x38>
    5cb8:	9b01      	ldr	r3, [sp, #4]
    5cba:	2b25      	cmp	r3, #37	; 0x25
    5cbc:	d003      	beq.n	5cc6 <getSlowDividerConfig+0x26>
    5cbe:	9b01      	ldr	r3, [sp, #4]
    5cc0:	2b26      	cmp	r3, #38	; 0x26
    5cc2:	d003      	beq.n	5ccc <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5cc4:	e008      	b.n	5cd8 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5cc6:	2300      	movs	r3, #0
    5cc8:	9304      	str	r3, [sp, #16]
            break;
    5cca:	e006      	b.n	5cda <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5ccc:	2301      	movs	r3, #1
    5cce:	9304      	str	r3, [sp, #16]
            break;
    5cd0:	e003      	b.n	5cda <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5cd2:	2302      	movs	r3, #2
    5cd4:	9304      	str	r3, [sp, #16]
            break;
    5cd6:	e000      	b.n	5cda <getSlowDividerConfig+0x3a>
                break;
    5cd8:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5cda:	4b40      	ldr	r3, [pc, #256]	; (5ddc <getSlowDividerConfig+0x13c>)
    5cdc:	681b      	ldr	r3, [r3, #0]
    5cde:	2b00      	cmp	r3, #0
    5ce0:	d026      	beq.n	5d30 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5ce2:	2300      	movs	r3, #0
    5ce4:	9303      	str	r3, [sp, #12]
    5ce6:	e01c      	b.n	5d22 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5ce8:	4b3c      	ldr	r3, [pc, #240]	; (5ddc <getSlowDividerConfig+0x13c>)
    5cea:	6819      	ldr	r1, [r3, #0]
    5cec:	9a03      	ldr	r2, [sp, #12]
    5cee:	4613      	mov	r3, r2
    5cf0:	005b      	lsls	r3, r3, #1
    5cf2:	4413      	add	r3, r2
    5cf4:	009b      	lsls	r3, r3, #2
    5cf6:	440b      	add	r3, r1
    5cf8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5cfc:	681b      	ldr	r3, [r3, #0]
    5cfe:	9a01      	ldr	r2, [sp, #4]
    5d00:	429a      	cmp	r2, r3
    5d02:	d10b      	bne.n	5d1c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5d04:	4b35      	ldr	r3, [pc, #212]	; (5ddc <getSlowDividerConfig+0x13c>)
    5d06:	6819      	ldr	r1, [r3, #0]
    5d08:	9a03      	ldr	r2, [sp, #12]
    5d0a:	4613      	mov	r3, r2
    5d0c:	005b      	lsls	r3, r3, #1
    5d0e:	4413      	add	r3, r2
    5d10:	009b      	lsls	r3, r3, #2
    5d12:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5d16:	440b      	add	r3, r1
    5d18:	9305      	str	r3, [sp, #20]
                break;
    5d1a:	e009      	b.n	5d30 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5d1c:	9b03      	ldr	r3, [sp, #12]
    5d1e:	3301      	adds	r3, #1
    5d20:	9303      	str	r3, [sp, #12]
    5d22:	4b2e      	ldr	r3, [pc, #184]	; (5ddc <getSlowDividerConfig+0x13c>)
    5d24:	681b      	ldr	r3, [r3, #0]
    5d26:	7b1b      	ldrb	r3, [r3, #12]
    5d28:	461a      	mov	r2, r3
    5d2a:	9b03      	ldr	r3, [sp, #12]
    5d2c:	4293      	cmp	r3, r2
    5d2e:	d3db      	bcc.n	5ce8 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5d30:	9b05      	ldr	r3, [sp, #20]
    5d32:	2b00      	cmp	r3, #0
    5d34:	d14a      	bne.n	5dcc <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5d36:	9a04      	ldr	r2, [sp, #16]
    5d38:	4613      	mov	r3, r2
    5d3a:	005b      	lsls	r3, r3, #1
    5d3c:	4413      	add	r3, r2
    5d3e:	009b      	lsls	r3, r3, #2
    5d40:	4a27      	ldr	r2, [pc, #156]	; (5de0 <getSlowDividerConfig+0x140>)
    5d42:	4413      	add	r3, r2
    5d44:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5d46:	4926      	ldr	r1, [pc, #152]	; (5de0 <getSlowDividerConfig+0x140>)
    5d48:	9a04      	ldr	r2, [sp, #16]
    5d4a:	4613      	mov	r3, r2
    5d4c:	005b      	lsls	r3, r3, #1
    5d4e:	4413      	add	r3, r2
    5d50:	009b      	lsls	r3, r3, #2
    5d52:	440b      	add	r3, r1
    5d54:	9a01      	ldr	r2, [sp, #4]
    5d56:	601a      	str	r2, [r3, #0]
        switch(Name)
    5d58:	9b01      	ldr	r3, [sp, #4]
    5d5a:	2b27      	cmp	r3, #39	; 0x27
    5d5c:	d027      	beq.n	5dae <getSlowDividerConfig+0x10e>
    5d5e:	9b01      	ldr	r3, [sp, #4]
    5d60:	2b27      	cmp	r3, #39	; 0x27
    5d62:	d835      	bhi.n	5dd0 <getSlowDividerConfig+0x130>
    5d64:	9b01      	ldr	r3, [sp, #4]
    5d66:	2b25      	cmp	r3, #37	; 0x25
    5d68:	d003      	beq.n	5d72 <getSlowDividerConfig+0xd2>
    5d6a:	9b01      	ldr	r3, [sp, #4]
    5d6c:	2b26      	cmp	r3, #38	; 0x26
    5d6e:	d00f      	beq.n	5d90 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5d70:	e02e      	b.n	5dd0 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5d72:	4b1c      	ldr	r3, [pc, #112]	; (5de4 <getSlowDividerConfig+0x144>)
    5d74:	695b      	ldr	r3, [r3, #20]
    5d76:	f003 030f 	and.w	r3, r3, #15
    5d7a:	1c59      	adds	r1, r3, #1
    5d7c:	4818      	ldr	r0, [pc, #96]	; (5de0 <getSlowDividerConfig+0x140>)
    5d7e:	9a04      	ldr	r2, [sp, #16]
    5d80:	4613      	mov	r3, r2
    5d82:	005b      	lsls	r3, r3, #1
    5d84:	4413      	add	r3, r2
    5d86:	009b      	lsls	r3, r3, #2
    5d88:	4403      	add	r3, r0
    5d8a:	3304      	adds	r3, #4
    5d8c:	6019      	str	r1, [r3, #0]
                break;
    5d8e:	e020      	b.n	5dd2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5d90:	4b14      	ldr	r3, [pc, #80]	; (5de4 <getSlowDividerConfig+0x144>)
    5d92:	699b      	ldr	r3, [r3, #24]
    5d94:	f003 030f 	and.w	r3, r3, #15
    5d98:	1c59      	adds	r1, r3, #1
    5d9a:	4811      	ldr	r0, [pc, #68]	; (5de0 <getSlowDividerConfig+0x140>)
    5d9c:	9a04      	ldr	r2, [sp, #16]
    5d9e:	4613      	mov	r3, r2
    5da0:	005b      	lsls	r3, r3, #1
    5da2:	4413      	add	r3, r2
    5da4:	009b      	lsls	r3, r3, #2
    5da6:	4403      	add	r3, r0
    5da8:	3304      	adds	r3, #4
    5daa:	6019      	str	r1, [r3, #0]
                break;
    5dac:	e011      	b.n	5dd2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5dae:	4b0d      	ldr	r3, [pc, #52]	; (5de4 <getSlowDividerConfig+0x144>)
    5db0:	69db      	ldr	r3, [r3, #28]
    5db2:	f003 030f 	and.w	r3, r3, #15
    5db6:	1c59      	adds	r1, r3, #1
    5db8:	4809      	ldr	r0, [pc, #36]	; (5de0 <getSlowDividerConfig+0x140>)
    5dba:	9a04      	ldr	r2, [sp, #16]
    5dbc:	4613      	mov	r3, r2
    5dbe:	005b      	lsls	r3, r3, #1
    5dc0:	4413      	add	r3, r2
    5dc2:	009b      	lsls	r3, r3, #2
    5dc4:	4403      	add	r3, r0
    5dc6:	3304      	adds	r3, #4
    5dc8:	6019      	str	r1, [r3, #0]
                break;
    5dca:	e002      	b.n	5dd2 <getSlowDividerConfig+0x132>
        }
    }
    5dcc:	bf00      	nop
    5dce:	e000      	b.n	5dd2 <getSlowDividerConfig+0x132>
                break;
    5dd0:	bf00      	nop

    return ReturnValue;
    5dd2:	9b05      	ldr	r3, [sp, #20]
}
    5dd4:	4618      	mov	r0, r3
    5dd6:	b006      	add	sp, #24
    5dd8:	4770      	bx	lr
    5dda:	bf00      	nop
    5ddc:	1fff8bdc 	.word	0x1fff8bdc
    5de0:	1fff8cf0 	.word	0x1fff8cf0
    5de4:	40064000 	.word	0x40064000

00005de8 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5de8:	b500      	push	{lr}
    5dea:	b083      	sub	sp, #12
    5dec:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5dee:	4b64      	ldr	r3, [pc, #400]	; (5f80 <Clock_Ip_ClockInitializeObjects+0x198>)
    5df0:	781b      	ldrb	r3, [r3, #0]
    5df2:	f083 0301 	eor.w	r3, r3, #1
    5df6:	b2db      	uxtb	r3, r3
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d05b      	beq.n	5eb4 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5dfc:	4b60      	ldr	r3, [pc, #384]	; (5f80 <Clock_Ip_ClockInitializeObjects+0x198>)
    5dfe:	2201      	movs	r2, #1
    5e00:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5e02:	4b60      	ldr	r3, [pc, #384]	; (5f84 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5e04:	785b      	ldrb	r3, [r3, #1]
    5e06:	461a      	mov	r2, r3
    5e08:	4613      	mov	r3, r2
    5e0a:	009b      	lsls	r3, r3, #2
    5e0c:	4413      	add	r3, r2
    5e0e:	009b      	lsls	r3, r3, #2
    5e10:	4a5d      	ldr	r2, [pc, #372]	; (5f88 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5e12:	4413      	add	r3, r2
    5e14:	4a5d      	ldr	r2, [pc, #372]	; (5f8c <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5e16:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5e18:	4b5d      	ldr	r3, [pc, #372]	; (5f90 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5e1a:	785b      	ldrb	r3, [r3, #1]
    5e1c:	461a      	mov	r2, r3
    5e1e:	4613      	mov	r3, r2
    5e20:	009b      	lsls	r3, r3, #2
    5e22:	4413      	add	r3, r2
    5e24:	009b      	lsls	r3, r3, #2
    5e26:	4a5b      	ldr	r2, [pc, #364]	; (5f94 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5e28:	4413      	add	r3, r2
    5e2a:	4a5b      	ldr	r2, [pc, #364]	; (5f98 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5e2c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5e2e:	4b5b      	ldr	r3, [pc, #364]	; (5f9c <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5e30:	791b      	ldrb	r3, [r3, #4]
    5e32:	461a      	mov	r2, r3
    5e34:	4613      	mov	r3, r2
    5e36:	005b      	lsls	r3, r3, #1
    5e38:	4413      	add	r3, r2
    5e3a:	009b      	lsls	r3, r3, #2
    5e3c:	4a58      	ldr	r2, [pc, #352]	; (5fa0 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5e3e:	4413      	add	r3, r2
    5e40:	4a58      	ldr	r2, [pc, #352]	; (5fa4 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5e42:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5e44:	4b58      	ldr	r3, [pc, #352]	; (5fa8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5e46:	795b      	ldrb	r3, [r3, #5]
    5e48:	00db      	lsls	r3, r3, #3
    5e4a:	4a58      	ldr	r2, [pc, #352]	; (5fac <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5e4c:	4413      	add	r3, r2
    5e4e:	4a58      	ldr	r2, [pc, #352]	; (5fb0 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5e50:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5e52:	4b55      	ldr	r3, [pc, #340]	; (5fa8 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5e54:	79db      	ldrb	r3, [r3, #7]
    5e56:	00db      	lsls	r3, r3, #3
    5e58:	4a54      	ldr	r2, [pc, #336]	; (5fac <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5e5a:	4413      	add	r3, r2
    5e5c:	4a55      	ldr	r2, [pc, #340]	; (5fb4 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5e5e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5e60:	4b55      	ldr	r3, [pc, #340]	; (5fb8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5e62:	799b      	ldrb	r3, [r3, #6]
    5e64:	009b      	lsls	r3, r3, #2
    5e66:	4a55      	ldr	r2, [pc, #340]	; (5fbc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5e68:	4413      	add	r3, r2
    5e6a:	4a55      	ldr	r2, [pc, #340]	; (5fc0 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5e6c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5e6e:	4b52      	ldr	r3, [pc, #328]	; (5fb8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5e70:	7a1b      	ldrb	r3, [r3, #8]
    5e72:	009b      	lsls	r3, r3, #2
    5e74:	4a51      	ldr	r2, [pc, #324]	; (5fbc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5e76:	4413      	add	r3, r2
    5e78:	4a52      	ldr	r2, [pc, #328]	; (5fc4 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    5e7a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5e7c:	4b4e      	ldr	r3, [pc, #312]	; (5fb8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5e7e:	7a5b      	ldrb	r3, [r3, #9]
    5e80:	009b      	lsls	r3, r3, #2
    5e82:	4a4e      	ldr	r2, [pc, #312]	; (5fbc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5e84:	4413      	add	r3, r2
    5e86:	4a50      	ldr	r2, [pc, #320]	; (5fc8 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5e88:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5e8a:	4b4b      	ldr	r3, [pc, #300]	; (5fb8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5e8c:	7adb      	ldrb	r3, [r3, #11]
    5e8e:	009b      	lsls	r3, r3, #2
    5e90:	4a4a      	ldr	r2, [pc, #296]	; (5fbc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5e92:	4413      	add	r3, r2
    5e94:	4a4d      	ldr	r2, [pc, #308]	; (5fcc <Clock_Ip_ClockInitializeObjects+0x1e4>)
    5e96:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5e98:	4b47      	ldr	r3, [pc, #284]	; (5fb8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5e9a:	7b1b      	ldrb	r3, [r3, #12]
    5e9c:	009b      	lsls	r3, r3, #2
    5e9e:	4a47      	ldr	r2, [pc, #284]	; (5fbc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5ea0:	4413      	add	r3, r2
    5ea2:	4a4b      	ldr	r2, [pc, #300]	; (5fd0 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5ea4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5ea6:	4b44      	ldr	r3, [pc, #272]	; (5fb8 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5ea8:	7b9b      	ldrb	r3, [r3, #14]
    5eaa:	009b      	lsls	r3, r3, #2
    5eac:	4a43      	ldr	r2, [pc, #268]	; (5fbc <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5eae:	4413      	add	r3, r2
    5eb0:	4a48      	ldr	r2, [pc, #288]	; (5fd4 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5eb2:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5eb4:	4b48      	ldr	r3, [pc, #288]	; (5fd8 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5eb6:	781b      	ldrb	r3, [r3, #0]
    5eb8:	2b00      	cmp	r3, #0
    5eba:	d002      	beq.n	5ec2 <Clock_Ip_ClockInitializeObjects+0xda>
    5ebc:	9b01      	ldr	r3, [sp, #4]
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	d003      	beq.n	5eca <Clock_Ip_ClockInitializeObjects+0xe2>
    5ec2:	4b46      	ldr	r3, [pc, #280]	; (5fdc <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5ec4:	781b      	ldrb	r3, [r3, #0]
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	d056      	beq.n	5f78 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    5eca:	f7ff fc09 	bl	56e0 <getFircConfig>
    5ece:	4603      	mov	r3, r0
    5ed0:	4a43      	ldr	r2, [pc, #268]	; (5fe0 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5ed2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5ed4:	f7ff fc60 	bl	5798 <getSoscConfig>
    5ed8:	4603      	mov	r3, r0
    5eda:	4a42      	ldr	r2, [pc, #264]	; (5fe4 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5edc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5ede:	f7ff fca7 	bl	5830 <getSpllConfig>
    5ee2:	4603      	mov	r3, r0
    5ee4:	4a40      	ldr	r2, [pc, #256]	; (5fe8 <Clock_Ip_ClockInitializeObjects+0x200>)
    5ee6:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5ee8:	2019      	movs	r0, #25
    5eea:	f7ff fcfb 	bl	58e4 <getSelectorConfig>
    5eee:	4603      	mov	r3, r0
    5ef0:	4a3e      	ldr	r2, [pc, #248]	; (5fec <Clock_Ip_ClockInitializeObjects+0x204>)
    5ef2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5ef4:	201a      	movs	r0, #26
    5ef6:	f7ff fcf5 	bl	58e4 <getSelectorConfig>
    5efa:	4603      	mov	r3, r0
    5efc:	4a3c      	ldr	r2, [pc, #240]	; (5ff0 <Clock_Ip_ClockInitializeObjects+0x208>)
    5efe:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5f00:	201b      	movs	r0, #27
    5f02:	f7ff fcef 	bl	58e4 <getSelectorConfig>
    5f06:	4603      	mov	r3, r0
    5f08:	4a3a      	ldr	r2, [pc, #232]	; (5ff4 <Clock_Ip_ClockInitializeObjects+0x20c>)
    5f0a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5f0c:	201d      	movs	r0, #29
    5f0e:	f7ff fd7b 	bl	5a08 <getCoreDividerConfig>
    5f12:	4603      	mov	r3, r0
    5f14:	4a38      	ldr	r2, [pc, #224]	; (5ff8 <Clock_Ip_ClockInitializeObjects+0x210>)
    5f16:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5f18:	201e      	movs	r0, #30
    5f1a:	f7ff fd75 	bl	5a08 <getCoreDividerConfig>
    5f1e:	4603      	mov	r3, r0
    5f20:	4a36      	ldr	r2, [pc, #216]	; (5ffc <Clock_Ip_ClockInitializeObjects+0x214>)
    5f22:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5f24:	201f      	movs	r0, #31
    5f26:	f7ff fd6f 	bl	5a08 <getCoreDividerConfig>
    5f2a:	4603      	mov	r3, r0
    5f2c:	4a34      	ldr	r2, [pc, #208]	; (6000 <Clock_Ip_ClockInitializeObjects+0x218>)
    5f2e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5f30:	2021      	movs	r0, #33	; 0x21
    5f32:	f7ff fe0f 	bl	5b54 <getBusDividerConfig>
    5f36:	4603      	mov	r3, r0
    5f38:	4a32      	ldr	r2, [pc, #200]	; (6004 <Clock_Ip_ClockInitializeObjects+0x21c>)
    5f3a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5f3c:	2022      	movs	r0, #34	; 0x22
    5f3e:	f7ff fe09 	bl	5b54 <getBusDividerConfig>
    5f42:	4603      	mov	r3, r0
    5f44:	4a30      	ldr	r2, [pc, #192]	; (6008 <Clock_Ip_ClockInitializeObjects+0x220>)
    5f46:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5f48:	2023      	movs	r0, #35	; 0x23
    5f4a:	f7ff fe03 	bl	5b54 <getBusDividerConfig>
    5f4e:	4603      	mov	r3, r0
    5f50:	4a2e      	ldr	r2, [pc, #184]	; (600c <Clock_Ip_ClockInitializeObjects+0x224>)
    5f52:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5f54:	2025      	movs	r0, #37	; 0x25
    5f56:	f7ff fea3 	bl	5ca0 <getSlowDividerConfig>
    5f5a:	4603      	mov	r3, r0
    5f5c:	4a2c      	ldr	r2, [pc, #176]	; (6010 <Clock_Ip_ClockInitializeObjects+0x228>)
    5f5e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5f60:	2026      	movs	r0, #38	; 0x26
    5f62:	f7ff fe9d 	bl	5ca0 <getSlowDividerConfig>
    5f66:	4603      	mov	r3, r0
    5f68:	4a2a      	ldr	r2, [pc, #168]	; (6014 <Clock_Ip_ClockInitializeObjects+0x22c>)
    5f6a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5f6c:	2027      	movs	r0, #39	; 0x27
    5f6e:	f7ff fe97 	bl	5ca0 <getSlowDividerConfig>
    5f72:	4603      	mov	r3, r0
    5f74:	4a28      	ldr	r2, [pc, #160]	; (6018 <Clock_Ip_ClockInitializeObjects+0x230>)
    5f76:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5f78:	bf00      	nop
    5f7a:	b003      	add	sp, #12
    5f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    5f80:	1fff8d14 	.word	0x1fff8d14
    5f84:	00015d2c 	.word	0x00015d2c
    5f88:	00016378 	.word	0x00016378
    5f8c:	1fff8be0 	.word	0x1fff8be0
    5f90:	00015cec 	.word	0x00015cec
    5f94:	000162c0 	.word	0x000162c0
    5f98:	1fff8be4 	.word	0x1fff8be4
    5f9c:	00015cfc 	.word	0x00015cfc
    5fa0:	0001632c 	.word	0x0001632c
    5fa4:	1fff8be8 	.word	0x1fff8be8
    5fa8:	00015d3c 	.word	0x00015d3c
    5fac:	000163a4 	.word	0x000163a4
    5fb0:	1fff8bec 	.word	0x1fff8bec
    5fb4:	1fff8c28 	.word	0x1fff8c28
    5fb8:	00015ccc 	.word	0x00015ccc
    5fbc:	0001627c 	.word	0x0001627c
    5fc0:	1fff8bf0 	.word	0x1fff8bf0
    5fc4:	1fff8c2c 	.word	0x1fff8c2c
    5fc8:	1fff8bf4 	.word	0x1fff8bf4
    5fcc:	1fff8c30 	.word	0x1fff8c30
    5fd0:	1fff8bf8 	.word	0x1fff8bf8
    5fd4:	1fff8c34 	.word	0x1fff8c34
    5fd8:	1fff8b19 	.word	0x1fff8b19
    5fdc:	1fff8b10 	.word	0x1fff8b10
    5fe0:	1fff8bfc 	.word	0x1fff8bfc
    5fe4:	1fff8c00 	.word	0x1fff8c00
    5fe8:	1fff8c04 	.word	0x1fff8c04
    5fec:	1fff8c08 	.word	0x1fff8c08
    5ff0:	1fff8c0c 	.word	0x1fff8c0c
    5ff4:	1fff8c38 	.word	0x1fff8c38
    5ff8:	1fff8c10 	.word	0x1fff8c10
    5ffc:	1fff8c14 	.word	0x1fff8c14
    6000:	1fff8c3c 	.word	0x1fff8c3c
    6004:	1fff8c18 	.word	0x1fff8c18
    6008:	1fff8c1c 	.word	0x1fff8c1c
    600c:	1fff8c40 	.word	0x1fff8c40
    6010:	1fff8c20 	.word	0x1fff8c20
    6014:	1fff8c24 	.word	0x1fff8c24
    6018:	1fff8c44 	.word	0x1fff8c44

0000601c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    601c:	b500      	push	{lr}
    601e:	b083      	sub	sp, #12
    6020:	9001      	str	r0, [sp, #4]
    6022:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    6024:	9b01      	ldr	r3, [sp, #4]
    6026:	2b03      	cmp	r3, #3
    6028:	f000 8090 	beq.w	614c <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    602c:	9b01      	ldr	r3, [sp, #4]
    602e:	2b03      	cmp	r3, #3
    6030:	f200 80d3 	bhi.w	61da <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    6034:	9b01      	ldr	r3, [sp, #4]
    6036:	2b00      	cmp	r3, #0
    6038:	d040      	beq.n	60bc <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    603a:	9b01      	ldr	r3, [sp, #4]
    603c:	3b01      	subs	r3, #1
    603e:	2b01      	cmp	r3, #1
    6040:	f200 80cb 	bhi.w	61da <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    6044:	9b00      	ldr	r3, [sp, #0]
    6046:	2b00      	cmp	r3, #0
    6048:	f040 80c9 	bne.w	61de <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    604c:	4b68      	ldr	r3, [pc, #416]	; (61f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    604e:	2200      	movs	r2, #0
    6050:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    6052:	4b68      	ldr	r3, [pc, #416]	; (61f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    6054:	681b      	ldr	r3, [r3, #0]
    6056:	685b      	ldr	r3, [r3, #4]
    6058:	4a67      	ldr	r2, [pc, #412]	; (61f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    605a:	6812      	ldr	r2, [r2, #0]
    605c:	4610      	mov	r0, r2
    605e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    6060:	4b66      	ldr	r3, [pc, #408]	; (61fc <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    6062:	681b      	ldr	r3, [r3, #0]
    6064:	681b      	ldr	r3, [r3, #0]
    6066:	4a66      	ldr	r2, [pc, #408]	; (6200 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    6068:	6812      	ldr	r2, [r2, #0]
    606a:	4610      	mov	r0, r2
    606c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    606e:	4b65      	ldr	r3, [pc, #404]	; (6204 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    6070:	681b      	ldr	r3, [r3, #0]
    6072:	681b      	ldr	r3, [r3, #0]
    6074:	4a64      	ldr	r2, [pc, #400]	; (6208 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    6076:	6812      	ldr	r2, [r2, #0]
    6078:	4610      	mov	r0, r2
    607a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    607c:	4b63      	ldr	r3, [pc, #396]	; (620c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    607e:	681b      	ldr	r3, [r3, #0]
    6080:	681b      	ldr	r3, [r3, #0]
    6082:	4a63      	ldr	r2, [pc, #396]	; (6210 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    6084:	6812      	ldr	r2, [r2, #0]
    6086:	4610      	mov	r0, r2
    6088:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    608a:	4b62      	ldr	r3, [pc, #392]	; (6214 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    608c:	681b      	ldr	r3, [r3, #0]
    608e:	691b      	ldr	r3, [r3, #16]
    6090:	4a61      	ldr	r2, [pc, #388]	; (6218 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6092:	6812      	ldr	r2, [r2, #0]
    6094:	6812      	ldr	r2, [r2, #0]
    6096:	4610      	mov	r0, r2
    6098:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    609a:	4b60      	ldr	r3, [pc, #384]	; (621c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    609c:	681b      	ldr	r3, [r3, #0]
    609e:	68db      	ldr	r3, [r3, #12]
    60a0:	4a5f      	ldr	r2, [pc, #380]	; (6220 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    60a2:	6812      	ldr	r2, [r2, #0]
    60a4:	6812      	ldr	r2, [r2, #0]
    60a6:	4610      	mov	r0, r2
    60a8:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    60aa:	4b5e      	ldr	r3, [pc, #376]	; (6224 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    60ac:	681b      	ldr	r3, [r3, #0]
    60ae:	689b      	ldr	r3, [r3, #8]
    60b0:	4a5d      	ldr	r2, [pc, #372]	; (6228 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    60b2:	6812      	ldr	r2, [r2, #0]
    60b4:	6812      	ldr	r2, [r2, #0]
    60b6:	4610      	mov	r0, r2
    60b8:	4798      	blx	r3
            }
        }
        break;
    60ba:	e090      	b.n	61de <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    60bc:	9b00      	ldr	r3, [sp, #0]
    60be:	2b02      	cmp	r3, #2
    60c0:	f040 808f 	bne.w	61e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    60c4:	4b4a      	ldr	r3, [pc, #296]	; (61f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    60c6:	2201      	movs	r2, #1
    60c8:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    60ca:	4b56      	ldr	r3, [pc, #344]	; (6224 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    60cc:	681b      	ldr	r3, [r3, #0]
    60ce:	685b      	ldr	r3, [r3, #4]
    60d0:	4a55      	ldr	r2, [pc, #340]	; (6228 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    60d2:	6812      	ldr	r2, [r2, #0]
    60d4:	4610      	mov	r0, r2
    60d6:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    60d8:	4b50      	ldr	r3, [pc, #320]	; (621c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    60da:	681b      	ldr	r3, [r3, #0]
    60dc:	691b      	ldr	r3, [r3, #16]
    60de:	4a50      	ldr	r2, [pc, #320]	; (6220 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    60e0:	6812      	ldr	r2, [r2, #0]
    60e2:	4610      	mov	r0, r2
    60e4:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    60e6:	4b4d      	ldr	r3, [pc, #308]	; (621c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    60e8:	681b      	ldr	r3, [r3, #0]
    60ea:	689b      	ldr	r3, [r3, #8]
    60ec:	4a4c      	ldr	r2, [pc, #304]	; (6220 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    60ee:	6812      	ldr	r2, [r2, #0]
    60f0:	4610      	mov	r0, r2
    60f2:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    60f4:	4b47      	ldr	r3, [pc, #284]	; (6214 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    60f6:	681b      	ldr	r3, [r3, #0]
    60f8:	68db      	ldr	r3, [r3, #12]
    60fa:	4a47      	ldr	r2, [pc, #284]	; (6218 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    60fc:	6812      	ldr	r2, [r2, #0]
    60fe:	4610      	mov	r0, r2
    6100:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    6102:	4b44      	ldr	r3, [pc, #272]	; (6214 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    6104:	681b      	ldr	r3, [r3, #0]
    6106:	689b      	ldr	r3, [r3, #8]
    6108:	4a43      	ldr	r2, [pc, #268]	; (6218 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    610a:	6812      	ldr	r2, [r2, #0]
    610c:	6812      	ldr	r2, [r2, #0]
    610e:	4610      	mov	r0, r2
    6110:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    6112:	4b38      	ldr	r3, [pc, #224]	; (61f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    6114:	681b      	ldr	r3, [r3, #0]
    6116:	685b      	ldr	r3, [r3, #4]
    6118:	4a44      	ldr	r2, [pc, #272]	; (622c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    611a:	6812      	ldr	r2, [r2, #0]
    611c:	4610      	mov	r0, r2
    611e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    6120:	4b36      	ldr	r3, [pc, #216]	; (61fc <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    6122:	681b      	ldr	r3, [r3, #0]
    6124:	681b      	ldr	r3, [r3, #0]
    6126:	4a42      	ldr	r2, [pc, #264]	; (6230 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    6128:	6812      	ldr	r2, [r2, #0]
    612a:	4610      	mov	r0, r2
    612c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    612e:	4b35      	ldr	r3, [pc, #212]	; (6204 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    6130:	681b      	ldr	r3, [r3, #0]
    6132:	681b      	ldr	r3, [r3, #0]
    6134:	4a3f      	ldr	r2, [pc, #252]	; (6234 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    6136:	6812      	ldr	r2, [r2, #0]
    6138:	4610      	mov	r0, r2
    613a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    613c:	4b33      	ldr	r3, [pc, #204]	; (620c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    613e:	681b      	ldr	r3, [r3, #0]
    6140:	681b      	ldr	r3, [r3, #0]
    6142:	4a3d      	ldr	r2, [pc, #244]	; (6238 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    6144:	6812      	ldr	r2, [r2, #0]
    6146:	4610      	mov	r0, r2
    6148:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    614a:	e04a      	b.n	61e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    614c:	9b00      	ldr	r3, [sp, #0]
    614e:	2b02      	cmp	r3, #2
    6150:	d149      	bne.n	61e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    6152:	4b27      	ldr	r3, [pc, #156]	; (61f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    6154:	2201      	movs	r2, #1
    6156:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    6158:	4b32      	ldr	r3, [pc, #200]	; (6224 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    615a:	681b      	ldr	r3, [r3, #0]
    615c:	685b      	ldr	r3, [r3, #4]
    615e:	4a32      	ldr	r2, [pc, #200]	; (6228 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    6160:	6812      	ldr	r2, [r2, #0]
    6162:	4610      	mov	r0, r2
    6164:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    6166:	4b2d      	ldr	r3, [pc, #180]	; (621c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6168:	681b      	ldr	r3, [r3, #0]
    616a:	691b      	ldr	r3, [r3, #16]
    616c:	4a2c      	ldr	r2, [pc, #176]	; (6220 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    616e:	6812      	ldr	r2, [r2, #0]
    6170:	4610      	mov	r0, r2
    6172:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    6174:	4b29      	ldr	r3, [pc, #164]	; (621c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6176:	681b      	ldr	r3, [r3, #0]
    6178:	689b      	ldr	r3, [r3, #8]
    617a:	4a29      	ldr	r2, [pc, #164]	; (6220 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    617c:	6812      	ldr	r2, [r2, #0]
    617e:	4610      	mov	r0, r2
    6180:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    6182:	4b24      	ldr	r3, [pc, #144]	; (6214 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    6184:	681b      	ldr	r3, [r3, #0]
    6186:	68db      	ldr	r3, [r3, #12]
    6188:	4a23      	ldr	r2, [pc, #140]	; (6218 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    618a:	6812      	ldr	r2, [r2, #0]
    618c:	4610      	mov	r0, r2
    618e:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    6190:	4b20      	ldr	r3, [pc, #128]	; (6214 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    6192:	681b      	ldr	r3, [r3, #0]
    6194:	689b      	ldr	r3, [r3, #8]
    6196:	4a20      	ldr	r2, [pc, #128]	; (6218 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6198:	6812      	ldr	r2, [r2, #0]
    619a:	6812      	ldr	r2, [r2, #0]
    619c:	4610      	mov	r0, r2
    619e:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    61a0:	4b26      	ldr	r3, [pc, #152]	; (623c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    61a2:	681b      	ldr	r3, [r3, #0]
    61a4:	685b      	ldr	r3, [r3, #4]
    61a6:	4a26      	ldr	r2, [pc, #152]	; (6240 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    61a8:	6812      	ldr	r2, [r2, #0]
    61aa:	4610      	mov	r0, r2
    61ac:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    61ae:	4b25      	ldr	r3, [pc, #148]	; (6244 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    61b0:	681b      	ldr	r3, [r3, #0]
    61b2:	681b      	ldr	r3, [r3, #0]
    61b4:	4a24      	ldr	r2, [pc, #144]	; (6248 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    61b6:	6812      	ldr	r2, [r2, #0]
    61b8:	4610      	mov	r0, r2
    61ba:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    61bc:	4b23      	ldr	r3, [pc, #140]	; (624c <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    61be:	681b      	ldr	r3, [r3, #0]
    61c0:	681b      	ldr	r3, [r3, #0]
    61c2:	4a23      	ldr	r2, [pc, #140]	; (6250 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    61c4:	6812      	ldr	r2, [r2, #0]
    61c6:	4610      	mov	r0, r2
    61c8:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    61ca:	4b22      	ldr	r3, [pc, #136]	; (6254 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    61cc:	681b      	ldr	r3, [r3, #0]
    61ce:	681b      	ldr	r3, [r3, #0]
    61d0:	4a21      	ldr	r2, [pc, #132]	; (6258 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    61d2:	6812      	ldr	r2, [r2, #0]
    61d4:	4610      	mov	r0, r2
    61d6:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    61d8:	e005      	b.n	61e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    61da:	bf00      	nop
    61dc:	e004      	b.n	61e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    61de:	bf00      	nop
    61e0:	e002      	b.n	61e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    61e2:	bf00      	nop
    61e4:	e000      	b.n	61e8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    61e6:	bf00      	nop
    }

}
    61e8:	bf00      	nop
    61ea:	b003      	add	sp, #12
    61ec:	f85d fb04 	ldr.w	pc, [sp], #4
    61f0:	1fff8b19 	.word	0x1fff8b19
    61f4:	1fff8bec 	.word	0x1fff8bec
    61f8:	1fff8c0c 	.word	0x1fff8c0c
    61fc:	1fff8bf0 	.word	0x1fff8bf0
    6200:	1fff8c14 	.word	0x1fff8c14
    6204:	1fff8bf4 	.word	0x1fff8bf4
    6208:	1fff8c1c 	.word	0x1fff8c1c
    620c:	1fff8bf8 	.word	0x1fff8bf8
    6210:	1fff8c24 	.word	0x1fff8c24
    6214:	1fff8be0 	.word	0x1fff8be0
    6218:	1fff8c04 	.word	0x1fff8c04
    621c:	1fff8be4 	.word	0x1fff8be4
    6220:	1fff8c00 	.word	0x1fff8c00
    6224:	1fff8be8 	.word	0x1fff8be8
    6228:	1fff8bfc 	.word	0x1fff8bfc
    622c:	1fff8c08 	.word	0x1fff8c08
    6230:	1fff8c10 	.word	0x1fff8c10
    6234:	1fff8c18 	.word	0x1fff8c18
    6238:	1fff8c20 	.word	0x1fff8c20
    623c:	1fff8c28 	.word	0x1fff8c28
    6240:	1fff8c38 	.word	0x1fff8c38
    6244:	1fff8c2c 	.word	0x1fff8c2c
    6248:	1fff8c3c 	.word	0x1fff8c3c
    624c:	1fff8c30 	.word	0x1fff8c30
    6250:	1fff8c40 	.word	0x1fff8c40
    6254:	1fff8c34 	.word	0x1fff8c34
    6258:	1fff8c44 	.word	0x1fff8c44

0000625c <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    625c:	b500      	push	{lr}
    625e:	b083      	sub	sp, #12
    6260:	9001      	str	r0, [sp, #4]
    6262:	9100      	str	r1, [sp, #0]
    switch(Command)
    6264:	9b00      	ldr	r3, [sp, #0]
    6266:	2b04      	cmp	r3, #4
    6268:	d010      	beq.n	628c <Clock_Ip_Command+0x30>
    626a:	9b00      	ldr	r3, [sp, #0]
    626c:	2b04      	cmp	r3, #4
    626e:	d811      	bhi.n	6294 <Clock_Ip_Command+0x38>
    6270:	9b00      	ldr	r3, [sp, #0]
    6272:	2b01      	cmp	r3, #1
    6274:	d006      	beq.n	6284 <Clock_Ip_Command+0x28>
    6276:	9b00      	ldr	r3, [sp, #0]
    6278:	2b02      	cmp	r3, #2
    627a:	d10b      	bne.n	6294 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    627c:	9801      	ldr	r0, [sp, #4]
    627e:	f7ff fdb3 	bl	5de8 <Clock_Ip_ClockInitializeObjects>
            break;
    6282:	e008      	b.n	6296 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    6284:	9801      	ldr	r0, [sp, #4]
    6286:	f7ff f9db 	bl	5640 <Clock_Ip_SpecificPlatformInitClock>
            break;
    628a:	e004      	b.n	6296 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    628c:	9801      	ldr	r0, [sp, #4]
    628e:	f7ff f8ed 	bl	546c <DisableSafeClock>
            break;
    6292:	e000      	b.n	6296 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    6294:	bf00      	nop
    }
}
    6296:	bf00      	nop
    6298:	b003      	add	sp, #12
    629a:	f85d fb04 	ldr.w	pc, [sp], #4
    629e:	bf00      	nop

000062a0 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    62a0:	b500      	push	{lr}
    62a2:	b085      	sub	sp, #20
    62a4:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    62a6:	4a20      	ldr	r2, [pc, #128]	; (6328 <Mcu_Init+0x88>)
    62a8:	9b01      	ldr	r3, [sp, #4]
    62aa:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    62ac:	2300      	movs	r3, #0
    62ae:	9303      	str	r3, [sp, #12]
    62b0:	e010      	b.n	62d4 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    62b2:	4b1d      	ldr	r3, [pc, #116]	; (6328 <Mcu_Init+0x88>)
    62b4:	681b      	ldr	r3, [r3, #0]
    62b6:	6919      	ldr	r1, [r3, #16]
    62b8:	9a03      	ldr	r2, [sp, #12]
    62ba:	4613      	mov	r3, r2
    62bc:	005b      	lsls	r3, r3, #1
    62be:	4413      	add	r3, r2
    62c0:	009b      	lsls	r3, r3, #2
    62c2:	440b      	add	r3, r1
    62c4:	681b      	ldr	r3, [r3, #0]
    62c6:	9a03      	ldr	r2, [sp, #12]
    62c8:	b2d1      	uxtb	r1, r2
    62ca:	4a18      	ldr	r2, [pc, #96]	; (632c <Mcu_Init+0x8c>)
    62cc:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    62ce:	9b03      	ldr	r3, [sp, #12]
    62d0:	3301      	adds	r3, #1
    62d2:	9303      	str	r3, [sp, #12]
    62d4:	4b14      	ldr	r3, [pc, #80]	; (6328 <Mcu_Init+0x88>)
    62d6:	681b      	ldr	r3, [r3, #0]
    62d8:	689b      	ldr	r3, [r3, #8]
    62da:	9a03      	ldr	r2, [sp, #12]
    62dc:	429a      	cmp	r2, r3
    62de:	d3e8      	bcc.n	62b2 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    62e0:	2300      	movs	r3, #0
    62e2:	9303      	str	r3, [sp, #12]
    62e4:	e010      	b.n	6308 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    62e6:	4b10      	ldr	r3, [pc, #64]	; (6328 <Mcu_Init+0x88>)
    62e8:	681b      	ldr	r3, [r3, #0]
    62ea:	6959      	ldr	r1, [r3, #20]
    62ec:	9a03      	ldr	r2, [sp, #12]
    62ee:	4613      	mov	r3, r2
    62f0:	01db      	lsls	r3, r3, #7
    62f2:	1a9b      	subs	r3, r3, r2
    62f4:	00db      	lsls	r3, r3, #3
    62f6:	440b      	add	r3, r1
    62f8:	681b      	ldr	r3, [r3, #0]
    62fa:	9a03      	ldr	r2, [sp, #12]
    62fc:	b2d1      	uxtb	r1, r2
    62fe:	4a0c      	ldr	r2, [pc, #48]	; (6330 <Mcu_Init+0x90>)
    6300:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    6302:	9b03      	ldr	r3, [sp, #12]
    6304:	3301      	adds	r3, #1
    6306:	9303      	str	r3, [sp, #12]
    6308:	4b07      	ldr	r3, [pc, #28]	; (6328 <Mcu_Init+0x88>)
    630a:	681b      	ldr	r3, [r3, #0]
    630c:	68db      	ldr	r3, [r3, #12]
    630e:	9a03      	ldr	r2, [sp, #12]
    6310:	429a      	cmp	r2, r3
    6312:	d3e8      	bcc.n	62e6 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    6314:	4b04      	ldr	r3, [pc, #16]	; (6328 <Mcu_Init+0x88>)
    6316:	681b      	ldr	r3, [r3, #0]
    6318:	699b      	ldr	r3, [r3, #24]
    631a:	4618      	mov	r0, r3
    631c:	f000 f88a 	bl	6434 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    6320:	bf00      	nop
    6322:	b005      	add	sp, #20
    6324:	f85d fb04 	ldr.w	pc, [sp], #4
    6328:	1fff8d20 	.word	0x1fff8d20
    632c:	1fff8d1c 	.word	0x1fff8d1c
    6330:	1fff8d18 	.word	0x1fff8d18

00006334 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    6334:	b084      	sub	sp, #16
    6336:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    6338:	2301      	movs	r3, #1
    633a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    633e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6342:	4618      	mov	r0, r3
    6344:	b004      	add	sp, #16
    6346:	4770      	bx	lr

00006348 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    6348:	b500      	push	{lr}
    634a:	b085      	sub	sp, #20
    634c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    634e:	4a0e      	ldr	r2, [pc, #56]	; (6388 <Mcu_InitClock+0x40>)
    6350:	9b01      	ldr	r3, [sp, #4]
    6352:	4413      	add	r3, r2
    6354:	781b      	ldrb	r3, [r3, #0]
    6356:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    635a:	4b0c      	ldr	r3, [pc, #48]	; (638c <Mcu_InitClock+0x44>)
    635c:	681b      	ldr	r3, [r3, #0]
    635e:	6959      	ldr	r1, [r3, #20]
    6360:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6364:	4613      	mov	r3, r2
    6366:	01db      	lsls	r3, r3, #7
    6368:	1a9b      	subs	r3, r3, r2
    636a:	00db      	lsls	r3, r3, #3
    636c:	440b      	add	r3, r1
    636e:	4618      	mov	r0, r3
    6370:	f000 f86a 	bl	6448 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    6374:	2300      	movs	r3, #0
    6376:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    637a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    637e:	4618      	mov	r0, r3
    6380:	b005      	add	sp, #20
    6382:	f85d fb04 	ldr.w	pc, [sp], #4
    6386:	bf00      	nop
    6388:	1fff8d18 	.word	0x1fff8d18
    638c:	1fff8d20 	.word	0x1fff8d20

00006390 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    6390:	b500      	push	{lr}
    6392:	b085      	sub	sp, #20
    6394:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    6396:	4a0d      	ldr	r2, [pc, #52]	; (63cc <Mcu_SetMode+0x3c>)
    6398:	9b01      	ldr	r3, [sp, #4]
    639a:	4413      	add	r3, r2
    639c:	781b      	ldrb	r3, [r3, #0]
    639e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    63a2:	f00c fe6b 	bl	1307c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    63a6:	4b0a      	ldr	r3, [pc, #40]	; (63d0 <Mcu_SetMode+0x40>)
    63a8:	681b      	ldr	r3, [r3, #0]
    63aa:	6919      	ldr	r1, [r3, #16]
    63ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
    63b0:	4613      	mov	r3, r2
    63b2:	005b      	lsls	r3, r3, #1
    63b4:	4413      	add	r3, r2
    63b6:	009b      	lsls	r3, r3, #2
    63b8:	440b      	add	r3, r1
    63ba:	4618      	mov	r0, r3
    63bc:	f000 f84e 	bl	645c <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    63c0:	f00c fe88 	bl	130d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    63c4:	bf00      	nop
    63c6:	b005      	add	sp, #20
    63c8:	f85d fb04 	ldr.w	pc, [sp], #4
    63cc:	1fff8d1c 	.word	0x1fff8d1c
    63d0:	1fff8d20 	.word	0x1fff8d20

000063d4 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    63d4:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    63d6:	2302      	movs	r3, #2
    63d8:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    63da:	9b01      	ldr	r3, [sp, #4]
}
    63dc:	4618      	mov	r0, r3
    63de:	b002      	add	sp, #8
    63e0:	4770      	bx	lr

000063e2 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    63e2:	b500      	push	{lr}
    63e4:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    63e6:	f000 f843 	bl	6470 <Mcu_Ipw_GetResetReason>
    63ea:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    63ec:	9b01      	ldr	r3, [sp, #4]
}
    63ee:	4618      	mov	r0, r3
    63f0:	b003      	add	sp, #12
    63f2:	f85d fb04 	ldr.w	pc, [sp], #4

000063f6 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    63f6:	b500      	push	{lr}
    63f8:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    63fa:	f000 f83f 	bl	647c <Mcu_Ipw_GetResetRawValue>
    63fe:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    6400:	9b01      	ldr	r3, [sp, #4]
}
    6402:	4618      	mov	r0, r3
    6404:	b003      	add	sp, #12
    6406:	f85d fb04 	ldr.w	pc, [sp], #4

0000640a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    640a:	b500      	push	{lr}
    640c:	b083      	sub	sp, #12
    640e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    6410:	9801      	ldr	r0, [sp, #4]
    6412:	f000 f839 	bl	6488 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    6416:	bf00      	nop
    6418:	b003      	add	sp, #12
    641a:	f85d fb04 	ldr.w	pc, [sp], #4

0000641e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    641e:	b082      	sub	sp, #8
    6420:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    6422:	4b03      	ldr	r3, [pc, #12]	; (6430 <Mcu_ClkSrcFailureNotification+0x12>)
    6424:	681b      	ldr	r3, [r3, #0]
    6426:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    6428:	bf00      	nop
    642a:	b002      	add	sp, #8
    642c:	4770      	bx	lr
    642e:	bf00      	nop
    6430:	1fff8d20 	.word	0x1fff8d20

00006434 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    6434:	b500      	push	{lr}
    6436:	b083      	sub	sp, #12
    6438:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    643a:	9801      	ldr	r0, [sp, #4]
    643c:	f000 f882 	bl	6544 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    6440:	bf00      	nop
    6442:	b003      	add	sp, #12
    6444:	f85d fb04 	ldr.w	pc, [sp], #4

00006448 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    6448:	b500      	push	{lr}
    644a:	b083      	sub	sp, #12
    644c:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    644e:	9801      	ldr	r0, [sp, #4]
    6450:	f7fc fc6a 	bl	2d28 <Clock_Ip_InitClock>
}
    6454:	bf00      	nop
    6456:	b003      	add	sp, #12
    6458:	f85d fb04 	ldr.w	pc, [sp], #4

0000645c <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    645c:	b500      	push	{lr}
    645e:	b083      	sub	sp, #12
    6460:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    6462:	9801      	ldr	r0, [sp, #4]
    6464:	f000 f820 	bl	64a8 <Power_Ip_SetMode>
}
    6468:	bf00      	nop
    646a:	b003      	add	sp, #12
    646c:	f85d fb04 	ldr.w	pc, [sp], #4

00006470 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    6470:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    6472:	f000 f84f 	bl	6514 <Power_Ip_GetResetReason>
    6476:	4603      	mov	r3, r0
}
    6478:	4618      	mov	r0, r3
    647a:	bd08      	pop	{r3, pc}

0000647c <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    647c:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    647e:	f000 f857 	bl	6530 <Power_Ip_GetResetRawValue>
    6482:	4603      	mov	r3, r0
}
    6484:	4618      	mov	r0, r3
    6486:	bd08      	pop	{r3, pc}

00006488 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    6488:	b500      	push	{lr}
    648a:	b083      	sub	sp, #12
    648c:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    648e:	9b01      	ldr	r3, [sp, #4]
    6490:	2b00      	cmp	r3, #0
    6492:	d102      	bne.n	649a <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    6494:	f000 f86c 	bl	6570 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    6498:	e001      	b.n	649e <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    649a:	f000 f86e 	bl	657a <Power_Ip_EnableSleepOnExit>
}
    649e:	bf00      	nop
    64a0:	b003      	add	sp, #12
    64a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000064a8 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    64a8:	b500      	push	{lr}
    64aa:	b085      	sub	sp, #20
    64ac:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    64ae:	9b01      	ldr	r3, [sp, #4]
    64b0:	685b      	ldr	r3, [r3, #4]
    64b2:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    64b4:	9802      	ldr	r0, [sp, #8]
    64b6:	f000 f9f5 	bl	68a4 <Power_Ip_SMC_ModeCheckEntry>
    64ba:	4603      	mov	r3, r0
    64bc:	2b00      	cmp	r3, #0
    64be:	d002      	beq.n	64c6 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    64c0:	2301      	movs	r3, #1
    64c2:	9303      	str	r3, [sp, #12]
    64c4:	e003      	b.n	64ce <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    64c6:	9801      	ldr	r0, [sp, #4]
    64c8:	f000 fa1e 	bl	6908 <Power_Ip_SMC_ModeConfig>
    64cc:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    64ce:	9b03      	ldr	r3, [sp, #12]
    64d0:	2b01      	cmp	r3, #1
    64d2:	d103      	bne.n	64dc <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    64d4:	21ff      	movs	r1, #255	; 0xff
    64d6:	2003      	movs	r0, #3
    64d8:	f000 f8f4 	bl	66c4 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    64dc:	bf00      	nop
    64de:	b005      	add	sp, #20
    64e0:	f85d fb04 	ldr.w	pc, [sp], #4

000064e4 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    64e4:	b084      	sub	sp, #16
    64e6:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    64e8:	230c      	movs	r3, #12
    64ea:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    64ec:	4a08      	ldr	r2, [pc, #32]	; (6510 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    64ee:	9b01      	ldr	r3, [sp, #4]
    64f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64f4:	2b0e      	cmp	r3, #14
    64f6:	d805      	bhi.n	6504 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    64f8:	4a05      	ldr	r2, [pc, #20]	; (6510 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    64fa:	9b01      	ldr	r3, [sp, #4]
    64fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6500:	9303      	str	r3, [sp, #12]
    6502:	e001      	b.n	6508 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    6504:	230c      	movs	r3, #12
    6506:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    6508:	9b03      	ldr	r3, [sp, #12]
}
    650a:	4618      	mov	r0, r3
    650c:	b004      	add	sp, #16
    650e:	4770      	bx	lr
    6510:	00016418 	.word	0x00016418

00006514 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    6514:	b500      	push	{lr}
    6516:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    6518:	f000 f940 	bl	679c <Power_Ip_RCM_GetResetReason>
    651c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    651e:	9801      	ldr	r0, [sp, #4]
    6520:	f7ff ffe0 	bl	64e4 <Power_Ip_ConvertIntergeToResetType>
    6524:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    6526:	9b00      	ldr	r3, [sp, #0]
}
    6528:	4618      	mov	r0, r3
    652a:	b003      	add	sp, #12
    652c:	f85d fb04 	ldr.w	pc, [sp], #4

00006530 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    6530:	b500      	push	{lr}
    6532:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    6534:	f000 f98a 	bl	684c <Power_Ip_RCM_GetResetRawValue>
    6538:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    653a:	9b01      	ldr	r3, [sp, #4]
}
    653c:	4618      	mov	r0, r3
    653e:	b003      	add	sp, #12
    6540:	f85d fb04 	ldr.w	pc, [sp], #4

00006544 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    6544:	b500      	push	{lr}
    6546:	b083      	sub	sp, #12
    6548:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    654a:	9b01      	ldr	r3, [sp, #4]
    654c:	681b      	ldr	r3, [r3, #0]
    654e:	4618      	mov	r0, r3
    6550:	f000 f90e 	bl	6770 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    6554:	9b01      	ldr	r3, [sp, #4]
    6556:	685b      	ldr	r3, [r3, #4]
    6558:	4618      	mov	r0, r3
    655a:	f000 f86d 	bl	6638 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    655e:	9b01      	ldr	r3, [sp, #4]
    6560:	689b      	ldr	r3, [r3, #8]
    6562:	4618      	mov	r0, r3
    6564:	f000 f990 	bl	6888 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    6568:	bf00      	nop
    656a:	b003      	add	sp, #12
    656c:	f85d fb04 	ldr.w	pc, [sp], #4

00006570 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    6570:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    6572:	f000 f811 	bl	6598 <Power_Ip_CM4_DisableSleepOnExit>
}
    6576:	bf00      	nop
    6578:	bd08      	pop	{r3, pc}

0000657a <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    657a:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    657c:	f000 f820 	bl	65c0 <Power_Ip_CM4_EnableSleepOnExit>
}
    6580:	bf00      	nop
    6582:	bd08      	pop	{r3, pc}

00006584 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    6584:	b082      	sub	sp, #8
    6586:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    6588:	4a02      	ldr	r2, [pc, #8]	; (6594 <Power_Ip_InstallNotificationsCallback+0x10>)
    658a:	9b01      	ldr	r3, [sp, #4]
    658c:	6013      	str	r3, [r2, #0]
}
    658e:	bf00      	nop
    6590:	b002      	add	sp, #8
    6592:	4770      	bx	lr
    6594:	1fff8b1c 	.word	0x1fff8b1c

00006598 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    6598:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    659a:	2300      	movs	r3, #0
    659c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    659e:	4b07      	ldr	r3, [pc, #28]	; (65bc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    65a0:	681b      	ldr	r3, [r3, #0]
    65a2:	685b      	ldr	r3, [r3, #4]
    65a4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    65a6:	9b01      	ldr	r3, [sp, #4]
    65a8:	f023 0302 	bic.w	r3, r3, #2
    65ac:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    65ae:	4b03      	ldr	r3, [pc, #12]	; (65bc <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    65b0:	681b      	ldr	r3, [r3, #0]
    65b2:	9a01      	ldr	r2, [sp, #4]
    65b4:	605a      	str	r2, [r3, #4]
}
    65b6:	bf00      	nop
    65b8:	b002      	add	sp, #8
    65ba:	4770      	bx	lr
    65bc:	1fff8b20 	.word	0x1fff8b20

000065c0 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    65c0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    65c2:	2300      	movs	r3, #0
    65c4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    65c6:	4b07      	ldr	r3, [pc, #28]	; (65e4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    65c8:	681b      	ldr	r3, [r3, #0]
    65ca:	685b      	ldr	r3, [r3, #4]
    65cc:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    65ce:	9b01      	ldr	r3, [sp, #4]
    65d0:	f043 0302 	orr.w	r3, r3, #2
    65d4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    65d6:	4b03      	ldr	r3, [pc, #12]	; (65e4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    65d8:	681b      	ldr	r3, [r3, #0]
    65da:	9a01      	ldr	r2, [sp, #4]
    65dc:	605a      	str	r2, [r3, #4]
}
    65de:	bf00      	nop
    65e0:	b002      	add	sp, #8
    65e2:	4770      	bx	lr
    65e4:	1fff8b20 	.word	0x1fff8b20

000065e8 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    65e8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    65ea:	2300      	movs	r3, #0
    65ec:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    65ee:	4b07      	ldr	r3, [pc, #28]	; (660c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    65f0:	681b      	ldr	r3, [r3, #0]
    65f2:	685b      	ldr	r3, [r3, #4]
    65f4:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    65f6:	9b01      	ldr	r3, [sp, #4]
    65f8:	f043 0304 	orr.w	r3, r3, #4
    65fc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    65fe:	4b03      	ldr	r3, [pc, #12]	; (660c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6600:	681b      	ldr	r3, [r3, #0]
    6602:	9a01      	ldr	r2, [sp, #4]
    6604:	605a      	str	r2, [r3, #4]
}
    6606:	bf00      	nop
    6608:	b002      	add	sp, #8
    660a:	4770      	bx	lr
    660c:	1fff8b20 	.word	0x1fff8b20

00006610 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    6610:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6612:	2300      	movs	r3, #0
    6614:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6616:	4b07      	ldr	r3, [pc, #28]	; (6634 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6618:	681b      	ldr	r3, [r3, #0]
    661a:	685b      	ldr	r3, [r3, #4]
    661c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    661e:	9b01      	ldr	r3, [sp, #4]
    6620:	f023 0304 	bic.w	r3, r3, #4
    6624:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6626:	4b03      	ldr	r3, [pc, #12]	; (6634 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6628:	681b      	ldr	r3, [r3, #0]
    662a:	9a01      	ldr	r2, [sp, #4]
    662c:	605a      	str	r2, [r3, #4]
}
    662e:	bf00      	nop
    6630:	b002      	add	sp, #8
    6632:	4770      	bx	lr
    6634:	1fff8b20 	.word	0x1fff8b20

00006638 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    6638:	b084      	sub	sp, #16
    663a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    663c:	4b20      	ldr	r3, [pc, #128]	; (66c0 <Power_Ip_PMC_PowerInit+0x88>)
    663e:	781b      	ldrb	r3, [r3, #0]
    6640:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    6644:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6648:	f003 030f 	and.w	r3, r3, #15
    664c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    6650:	9b01      	ldr	r3, [sp, #4]
    6652:	781a      	ldrb	r2, [r3, #0]
    6654:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6658:	4313      	orrs	r3, r2
    665a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    665e:	4a18      	ldr	r2, [pc, #96]	; (66c0 <Power_Ip_PMC_PowerInit+0x88>)
    6660:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6664:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    6666:	4b16      	ldr	r3, [pc, #88]	; (66c0 <Power_Ip_PMC_PowerInit+0x88>)
    6668:	785b      	ldrb	r3, [r3, #1]
    666a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    666e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6672:	f003 031f 	and.w	r3, r3, #31
    6676:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    667a:	9b01      	ldr	r3, [sp, #4]
    667c:	785a      	ldrb	r2, [r3, #1]
    667e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6682:	4313      	orrs	r3, r2
    6684:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    6688:	4a0d      	ldr	r2, [pc, #52]	; (66c0 <Power_Ip_PMC_PowerInit+0x88>)
    668a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    668e:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    6690:	4b0b      	ldr	r3, [pc, #44]	; (66c0 <Power_Ip_PMC_PowerInit+0x88>)
    6692:	789b      	ldrb	r3, [r3, #2]
    6694:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    6698:	f89d 300f 	ldrb.w	r3, [sp, #15]
    669c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    66a0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    66a4:	9b01      	ldr	r3, [sp, #4]
    66a6:	789a      	ldrb	r2, [r3, #2]
    66a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66ac:	4313      	orrs	r3, r2
    66ae:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    66b2:	4a03      	ldr	r2, [pc, #12]	; (66c0 <Power_Ip_PMC_PowerInit+0x88>)
    66b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66b8:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    66ba:	bf00      	nop
    66bc:	b004      	add	sp, #16
    66be:	4770      	bx	lr
    66c0:	4007d000 	.word	0x4007d000

000066c4 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    66c4:	b500      	push	{lr}
    66c6:	b083      	sub	sp, #12
    66c8:	9001      	str	r0, [sp, #4]
    66ca:	460b      	mov	r3, r1
    66cc:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    66d0:	4b05      	ldr	r3, [pc, #20]	; (66e8 <Power_Ip_ReportPowerErrors+0x24>)
    66d2:	681b      	ldr	r3, [r3, #0]
    66d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    66d8:	4611      	mov	r1, r2
    66da:	9801      	ldr	r0, [sp, #4]
    66dc:	4798      	blx	r3
}
    66de:	bf00      	nop
    66e0:	b003      	add	sp, #12
    66e2:	f85d fb04 	ldr.w	pc, [sp], #4
    66e6:	bf00      	nop
    66e8:	1fff8b1c 	.word	0x1fff8b1c

000066ec <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    66ec:	b082      	sub	sp, #8
    66ee:	9001      	str	r0, [sp, #4]
    66f0:	460b      	mov	r3, r1
    66f2:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    66f6:	bf00      	nop
    66f8:	b002      	add	sp, #8
    66fa:	4770      	bx	lr

000066fc <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    66fc:	b500      	push	{lr}
    66fe:	b085      	sub	sp, #20
    6700:	9003      	str	r0, [sp, #12]
    6702:	9102      	str	r1, [sp, #8]
    6704:	9201      	str	r2, [sp, #4]
    6706:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    6708:	2000      	movs	r0, #0
    670a:	f7fc f83d 	bl	2788 <OsIf_GetCounter>
    670e:	4602      	mov	r2, r0
    6710:	9b03      	ldr	r3, [sp, #12]
    6712:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6714:	9b02      	ldr	r3, [sp, #8]
    6716:	2200      	movs	r2, #0
    6718:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    671a:	2100      	movs	r1, #0
    671c:	9800      	ldr	r0, [sp, #0]
    671e:	f7fc f87f 	bl	2820 <OsIf_MicrosToTicks>
    6722:	4602      	mov	r2, r0
    6724:	9b01      	ldr	r3, [sp, #4]
    6726:	601a      	str	r2, [r3, #0]
}
    6728:	bf00      	nop
    672a:	b005      	add	sp, #20
    672c:	f85d fb04 	ldr.w	pc, [sp], #4

00006730 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6730:	b500      	push	{lr}
    6732:	b087      	sub	sp, #28
    6734:	9003      	str	r0, [sp, #12]
    6736:	9102      	str	r1, [sp, #8]
    6738:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    673a:	2300      	movs	r3, #0
    673c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6740:	2100      	movs	r1, #0
    6742:	9803      	ldr	r0, [sp, #12]
    6744:	f7fc f839 	bl	27ba <OsIf_GetElapsed>
    6748:	4602      	mov	r2, r0
    674a:	9b02      	ldr	r3, [sp, #8]
    674c:	681b      	ldr	r3, [r3, #0]
    674e:	441a      	add	r2, r3
    6750:	9b02      	ldr	r3, [sp, #8]
    6752:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    6754:	9b02      	ldr	r3, [sp, #8]
    6756:	681b      	ldr	r3, [r3, #0]
    6758:	9a01      	ldr	r2, [sp, #4]
    675a:	429a      	cmp	r2, r3
    675c:	d802      	bhi.n	6764 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    675e:	2301      	movs	r3, #1
    6760:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    6764:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6768:	4618      	mov	r0, r3
    676a:	b007      	add	sp, #28
    676c:	f85d fb04 	ldr.w	pc, [sp], #4

00006770 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6770:	b082      	sub	sp, #8
    6772:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    6774:	9b01      	ldr	r3, [sp, #4]
    6776:	681a      	ldr	r2, [r3, #0]
    6778:	4907      	ldr	r1, [pc, #28]	; (6798 <Power_Ip_RCM_ResetInit+0x28>)
    677a:	f641 7307 	movw	r3, #7943	; 0x1f07
    677e:	4013      	ands	r3, r2
    6780:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    6782:	9b01      	ldr	r3, [sp, #4]
    6784:	685a      	ldr	r2, [r3, #4]
    6786:	4904      	ldr	r1, [pc, #16]	; (6798 <Power_Ip_RCM_ResetInit+0x28>)
    6788:	f642 73ff 	movw	r3, #12287	; 0x2fff
    678c:	4013      	ands	r3, r2
    678e:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    6790:	bf00      	nop
    6792:	b002      	add	sp, #8
    6794:	4770      	bx	lr
    6796:	bf00      	nop
    6798:	4007f000 	.word	0x4007f000

0000679c <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    679c:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    679e:	230c      	movs	r3, #12
    67a0:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    67a2:	2300      	movs	r3, #0
    67a4:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    67a6:	2300      	movs	r3, #0
    67a8:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    67aa:	2300      	movs	r3, #0
    67ac:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    67ae:	4b25      	ldr	r3, [pc, #148]	; (6844 <Power_Ip_RCM_GetResetReason+0xa8>)
    67b0:	699a      	ldr	r2, [r3, #24]
    67b2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    67b6:	4013      	ands	r3, r2
    67b8:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    67ba:	9b03      	ldr	r3, [sp, #12]
    67bc:	2b00      	cmp	r3, #0
    67be:	d008      	beq.n	67d2 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    67c0:	4920      	ldr	r1, [pc, #128]	; (6844 <Power_Ip_RCM_GetResetReason+0xa8>)
    67c2:	9a03      	ldr	r2, [sp, #12]
    67c4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    67c8:	4013      	ands	r3, r2
    67ca:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    67cc:	4a1e      	ldr	r2, [pc, #120]	; (6848 <Power_Ip_RCM_GetResetReason+0xac>)
    67ce:	9b03      	ldr	r3, [sp, #12]
    67d0:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    67d2:	4b1d      	ldr	r3, [pc, #116]	; (6848 <Power_Ip_RCM_GetResetReason+0xac>)
    67d4:	681b      	ldr	r3, [r3, #0]
    67d6:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    67d8:	9a02      	ldr	r2, [sp, #8]
    67da:	f642 73ee 	movw	r3, #12270	; 0x2fee
    67de:	4013      	ands	r3, r2
    67e0:	2b82      	cmp	r3, #130	; 0x82
    67e2:	d102      	bne.n	67ea <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    67e4:	2305      	movs	r3, #5
    67e6:	9307      	str	r3, [sp, #28]
    67e8:	e027      	b.n	683a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    67ea:	2300      	movs	r3, #0
    67ec:	9306      	str	r3, [sp, #24]
    67ee:	e021      	b.n	6834 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    67f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    67f4:	9b06      	ldr	r3, [sp, #24]
    67f6:	fa22 f303 	lsr.w	r3, r2, r3
    67fa:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    67fc:	9a01      	ldr	r2, [sp, #4]
    67fe:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6802:	4013      	ands	r3, r2
    6804:	2b00      	cmp	r3, #0
    6806:	d012      	beq.n	682e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    6808:	9a01      	ldr	r2, [sp, #4]
    680a:	9b02      	ldr	r3, [sp, #8]
    680c:	4013      	ands	r3, r2
    680e:	2b00      	cmp	r3, #0
    6810:	d00a      	beq.n	6828 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6812:	9b05      	ldr	r3, [sp, #20]
    6814:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    6816:	9b04      	ldr	r3, [sp, #16]
    6818:	3301      	adds	r3, #1
    681a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    681c:	9b04      	ldr	r3, [sp, #16]
    681e:	2b01      	cmp	r3, #1
    6820:	d902      	bls.n	6828 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6822:	230d      	movs	r3, #13
    6824:	9307      	str	r3, [sp, #28]
                        break;
    6826:	e008      	b.n	683a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6828:	9b05      	ldr	r3, [sp, #20]
    682a:	3301      	adds	r3, #1
    682c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    682e:	9b06      	ldr	r3, [sp, #24]
    6830:	3301      	adds	r3, #1
    6832:	9306      	str	r3, [sp, #24]
    6834:	9b06      	ldr	r3, [sp, #24]
    6836:	2b1f      	cmp	r3, #31
    6838:	d9da      	bls.n	67f0 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    683a:	9b07      	ldr	r3, [sp, #28]
}
    683c:	4618      	mov	r0, r3
    683e:	b008      	add	sp, #32
    6840:	4770      	bx	lr
    6842:	bf00      	nop
    6844:	4007f000 	.word	0x4007f000
    6848:	1fff8d24 	.word	0x1fff8d24

0000684c <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    684c:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    684e:	4b0c      	ldr	r3, [pc, #48]	; (6880 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6850:	699a      	ldr	r2, [r3, #24]
    6852:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6856:	4013      	ands	r3, r2
    6858:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    685a:	9b01      	ldr	r3, [sp, #4]
    685c:	2b00      	cmp	r3, #0
    685e:	d008      	beq.n	6872 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6860:	4907      	ldr	r1, [pc, #28]	; (6880 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6862:	9a01      	ldr	r2, [sp, #4]
    6864:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6868:	4013      	ands	r3, r2
    686a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    686c:	4a05      	ldr	r2, [pc, #20]	; (6884 <Power_Ip_RCM_GetResetRawValue+0x38>)
    686e:	9b01      	ldr	r3, [sp, #4]
    6870:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    6872:	4b04      	ldr	r3, [pc, #16]	; (6884 <Power_Ip_RCM_GetResetRawValue+0x38>)
    6874:	681b      	ldr	r3, [r3, #0]
    6876:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    6878:	9b00      	ldr	r3, [sp, #0]
}
    687a:	4618      	mov	r0, r3
    687c:	b002      	add	sp, #8
    687e:	4770      	bx	lr
    6880:	4007f000 	.word	0x4007f000
    6884:	1fff8d24 	.word	0x1fff8d24

00006888 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    6888:	b082      	sub	sp, #8
    688a:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    688c:	9b01      	ldr	r3, [sp, #4]
    688e:	681b      	ldr	r3, [r3, #0]
    6890:	4a03      	ldr	r2, [pc, #12]	; (68a0 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    6892:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    6896:	6093      	str	r3, [r2, #8]
}
    6898:	bf00      	nop
    689a:	b002      	add	sp, #8
    689c:	4770      	bx	lr
    689e:	bf00      	nop
    68a0:	4007e000 	.word	0x4007e000

000068a4 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    68a4:	b084      	sub	sp, #16
    68a6:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    68a8:	2301      	movs	r3, #1
    68aa:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    68ac:	4b15      	ldr	r3, [pc, #84]	; (6904 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    68ae:	695b      	ldr	r3, [r3, #20]
    68b0:	b2db      	uxtb	r3, r3
    68b2:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    68b4:	9b01      	ldr	r3, [sp, #4]
    68b6:	2b02      	cmp	r3, #2
    68b8:	d012      	beq.n	68e0 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    68ba:	9b01      	ldr	r3, [sp, #4]
    68bc:	2b02      	cmp	r3, #2
    68be:	d818      	bhi.n	68f2 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    68c0:	9b01      	ldr	r3, [sp, #4]
    68c2:	2b00      	cmp	r3, #0
    68c4:	d003      	beq.n	68ce <Power_Ip_SMC_ModeCheckEntry+0x2a>
    68c6:	9b01      	ldr	r3, [sp, #4]
    68c8:	2b01      	cmp	r3, #1
    68ca:	d003      	beq.n	68d4 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    68cc:	e011      	b.n	68f2 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    68ce:	2300      	movs	r3, #0
    68d0:	9303      	str	r3, [sp, #12]
            break;
    68d2:	e013      	b.n	68fc <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    68d4:	9b02      	ldr	r3, [sp, #8]
    68d6:	2b01      	cmp	r3, #1
    68d8:	d10d      	bne.n	68f6 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    68da:	2300      	movs	r3, #0
    68dc:	9303      	str	r3, [sp, #12]
            break;
    68de:	e00a      	b.n	68f6 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    68e0:	9b02      	ldr	r3, [sp, #8]
    68e2:	2b01      	cmp	r3, #1
    68e4:	d002      	beq.n	68ec <Power_Ip_SMC_ModeCheckEntry+0x48>
    68e6:	9b02      	ldr	r3, [sp, #8]
    68e8:	2b10      	cmp	r3, #16
    68ea:	d106      	bne.n	68fa <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    68ec:	2300      	movs	r3, #0
    68ee:	9303      	str	r3, [sp, #12]
            break;
    68f0:	e003      	b.n	68fa <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    68f2:	bf00      	nop
    68f4:	e002      	b.n	68fc <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    68f6:	bf00      	nop
    68f8:	e000      	b.n	68fc <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    68fa:	bf00      	nop
        }
    }

    return PowerModeCheck;
    68fc:	9b03      	ldr	r3, [sp, #12]
}
    68fe:	4618      	mov	r0, r3
    6900:	b004      	add	sp, #16
    6902:	4770      	bx	lr
    6904:	4007e000 	.word	0x4007e000

00006908 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6908:	b500      	push	{lr}
    690a:	b08b      	sub	sp, #44	; 0x2c
    690c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    690e:	2300      	movs	r3, #0
    6910:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6912:	2300      	movs	r3, #0
    6914:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    6916:	2300      	movs	r3, #0
    6918:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    691c:	9b01      	ldr	r3, [sp, #4]
    691e:	685b      	ldr	r3, [r3, #4]
    6920:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6922:	9b08      	ldr	r3, [sp, #32]
    6924:	2b02      	cmp	r3, #2
    6926:	d076      	beq.n	6a16 <Power_Ip_SMC_ModeConfig+0x10e>
    6928:	9b08      	ldr	r3, [sp, #32]
    692a:	2b02      	cmp	r3, #2
    692c:	f200 80ab 	bhi.w	6a86 <Power_Ip_SMC_ModeConfig+0x17e>
    6930:	9b08      	ldr	r3, [sp, #32]
    6932:	2b00      	cmp	r3, #0
    6934:	d003      	beq.n	693e <Power_Ip_SMC_ModeConfig+0x36>
    6936:	9b08      	ldr	r3, [sp, #32]
    6938:	2b01      	cmp	r3, #1
    693a:	d034      	beq.n	69a6 <Power_Ip_SMC_ModeConfig+0x9e>
    693c:	e0a3      	b.n	6a86 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    693e:	4b58      	ldr	r3, [pc, #352]	; (6aa0 <Power_Ip_SMC_ModeConfig+0x198>)
    6940:	68db      	ldr	r3, [r3, #12]
    6942:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6944:	9b06      	ldr	r3, [sp, #24]
    6946:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    694a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    694c:	4a54      	ldr	r2, [pc, #336]	; (6aa0 <Power_Ip_SMC_ModeConfig+0x198>)
    694e:	9b06      	ldr	r3, [sp, #24]
    6950:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6952:	aa02      	add	r2, sp, #8
    6954:	a903      	add	r1, sp, #12
    6956:	a804      	add	r0, sp, #16
    6958:	f24c 3350 	movw	r3, #50000	; 0xc350
    695c:	f7ff fece 	bl	66fc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6960:	9a02      	ldr	r2, [sp, #8]
    6962:	a903      	add	r1, sp, #12
    6964:	ab04      	add	r3, sp, #16
    6966:	4618      	mov	r0, r3
    6968:	f7ff fee2 	bl	6730 <Power_Ip_TimeoutExpired>
    696c:	4603      	mov	r3, r0
    696e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    6972:	4b4b      	ldr	r3, [pc, #300]	; (6aa0 <Power_Ip_SMC_ModeConfig+0x198>)
    6974:	695b      	ldr	r3, [r3, #20]
    6976:	f003 0301 	and.w	r3, r3, #1
    697a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    697c:	9b05      	ldr	r3, [sp, #20]
    697e:	2b01      	cmp	r3, #1
    6980:	d006      	beq.n	6990 <Power_Ip_SMC_ModeConfig+0x88>
    6982:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6986:	f083 0301 	eor.w	r3, r3, #1
    698a:	b2db      	uxtb	r3, r3
    698c:	2b00      	cmp	r3, #0
    698e:	d1e7      	bne.n	6960 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    6990:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6994:	2b00      	cmp	r3, #0
    6996:	d079      	beq.n	6a8c <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6998:	2301      	movs	r3, #1
    699a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    699c:	21ff      	movs	r1, #255	; 0xff
    699e:	2000      	movs	r0, #0
    69a0:	f7ff fe90 	bl	66c4 <Power_Ip_ReportPowerErrors>
            }

            break;
    69a4:	e072      	b.n	6a8c <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    69a6:	4b3e      	ldr	r3, [pc, #248]	; (6aa0 <Power_Ip_SMC_ModeConfig+0x198>)
    69a8:	68db      	ldr	r3, [r3, #12]
    69aa:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    69ac:	9b06      	ldr	r3, [sp, #24]
    69ae:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    69b2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    69b4:	9b06      	ldr	r3, [sp, #24]
    69b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    69ba:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    69bc:	4a38      	ldr	r2, [pc, #224]	; (6aa0 <Power_Ip_SMC_ModeConfig+0x198>)
    69be:	9b06      	ldr	r3, [sp, #24]
    69c0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    69c2:	aa02      	add	r2, sp, #8
    69c4:	a903      	add	r1, sp, #12
    69c6:	a804      	add	r0, sp, #16
    69c8:	f24c 3350 	movw	r3, #50000	; 0xc350
    69cc:	f7ff fe96 	bl	66fc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    69d0:	9a02      	ldr	r2, [sp, #8]
    69d2:	a903      	add	r1, sp, #12
    69d4:	ab04      	add	r3, sp, #16
    69d6:	4618      	mov	r0, r3
    69d8:	f7ff feaa 	bl	6730 <Power_Ip_TimeoutExpired>
    69dc:	4603      	mov	r3, r0
    69de:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    69e2:	4b2f      	ldr	r3, [pc, #188]	; (6aa0 <Power_Ip_SMC_ModeConfig+0x198>)
    69e4:	695b      	ldr	r3, [r3, #20]
    69e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    69ea:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    69ec:	9b05      	ldr	r3, [sp, #20]
    69ee:	2b80      	cmp	r3, #128	; 0x80
    69f0:	d006      	beq.n	6a00 <Power_Ip_SMC_ModeConfig+0xf8>
    69f2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    69f6:	f083 0301 	eor.w	r3, r3, #1
    69fa:	b2db      	uxtb	r3, r3
    69fc:	2b00      	cmp	r3, #0
    69fe:	d1e7      	bne.n	69d0 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6a00:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6a04:	2b00      	cmp	r3, #0
    6a06:	d043      	beq.n	6a90 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6a08:	2301      	movs	r3, #1
    6a0a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6a0c:	21ff      	movs	r1, #255	; 0xff
    6a0e:	2000      	movs	r0, #0
    6a10:	f7ff fe58 	bl	66c4 <Power_Ip_ReportPowerErrors>
            }

            break;
    6a14:	e03c      	b.n	6a90 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    6a16:	4b22      	ldr	r3, [pc, #136]	; (6aa0 <Power_Ip_SMC_ModeConfig+0x198>)
    6a18:	68db      	ldr	r3, [r3, #12]
    6a1a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6a1c:	9b06      	ldr	r3, [sp, #24]
    6a1e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6a22:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6a24:	9b06      	ldr	r3, [sp, #24]
    6a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6a2a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6a2c:	4a1c      	ldr	r2, [pc, #112]	; (6aa0 <Power_Ip_SMC_ModeConfig+0x198>)
    6a2e:	9b06      	ldr	r3, [sp, #24]
    6a30:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6a32:	aa02      	add	r2, sp, #8
    6a34:	a903      	add	r1, sp, #12
    6a36:	a804      	add	r0, sp, #16
    6a38:	f24c 3350 	movw	r3, #50000	; 0xc350
    6a3c:	f7ff fe5e 	bl	66fc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6a40:	9a02      	ldr	r2, [sp, #8]
    6a42:	a903      	add	r1, sp, #12
    6a44:	ab04      	add	r3, sp, #16
    6a46:	4618      	mov	r0, r3
    6a48:	f7ff fe72 	bl	6730 <Power_Ip_TimeoutExpired>
    6a4c:	4603      	mov	r3, r0
    6a4e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    6a52:	4b13      	ldr	r3, [pc, #76]	; (6aa0 <Power_Ip_SMC_ModeConfig+0x198>)
    6a54:	695b      	ldr	r3, [r3, #20]
    6a56:	f003 0304 	and.w	r3, r3, #4
    6a5a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6a5c:	9b05      	ldr	r3, [sp, #20]
    6a5e:	2b04      	cmp	r3, #4
    6a60:	d006      	beq.n	6a70 <Power_Ip_SMC_ModeConfig+0x168>
    6a62:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6a66:	f083 0301 	eor.w	r3, r3, #1
    6a6a:	b2db      	uxtb	r3, r3
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	d1e7      	bne.n	6a40 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6a70:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6a74:	2b00      	cmp	r3, #0
    6a76:	d00d      	beq.n	6a94 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6a78:	2301      	movs	r3, #1
    6a7a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6a7c:	21ff      	movs	r1, #255	; 0xff
    6a7e:	2000      	movs	r0, #0
    6a80:	f7ff fe20 	bl	66c4 <Power_Ip_ReportPowerErrors>
            }

            break;
    6a84:	e006      	b.n	6a94 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6a86:	2301      	movs	r3, #1
    6a88:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    6a8a:	e004      	b.n	6a96 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6a8c:	bf00      	nop
    6a8e:	e002      	b.n	6a96 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6a90:	bf00      	nop
    6a92:	e000      	b.n	6a96 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6a94:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    6a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6a98:	4618      	mov	r0, r3
    6a9a:	b00b      	add	sp, #44	; 0x2c
    6a9c:	f85d fb04 	ldr.w	pc, [sp], #4
    6aa0:	4007e000 	.word	0x4007e000

00006aa4 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    6aa4:	b500      	push	{lr}
    6aa6:	b085      	sub	sp, #20
    6aa8:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6aaa:	9b01      	ldr	r3, [sp, #4]
    6aac:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    6aae:	9803      	ldr	r0, [sp, #12]
    6ab0:	f000 fbc8 	bl	7244 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    6ab4:	4a03      	ldr	r2, [pc, #12]	; (6ac4 <Port_Init+0x20>)
    6ab6:	9b03      	ldr	r3, [sp, #12]
    6ab8:	6013      	str	r3, [r2, #0]
        }
    }
}
    6aba:	bf00      	nop
    6abc:	b005      	add	sp, #20
    6abe:	f85d fb04 	ldr.w	pc, [sp], #4
    6ac2:	bf00      	nop
    6ac4:	1fff8d28 	.word	0x1fff8d28

00006ac8 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    6ac8:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    6aca:	4b03      	ldr	r3, [pc, #12]	; (6ad8 <Port_RefreshPortDirection+0x10>)
    6acc:	681b      	ldr	r3, [r3, #0]
    6ace:	4618      	mov	r0, r3
    6ad0:	f000 fc10 	bl	72f4 <Port_Ipw_RefreshPortDirection>
    }
}
    6ad4:	bf00      	nop
    6ad6:	bd08      	pop	{r3, pc}
    6ad8:	1fff8d28 	.word	0x1fff8d28

00006adc <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6adc:	b086      	sub	sp, #24
    6ade:	9003      	str	r0, [sp, #12]
    6ae0:	9102      	str	r1, [sp, #8]
    6ae2:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    6ae4:	23ff      	movs	r3, #255	; 0xff
    6ae6:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    6ae8:	9b03      	ldr	r3, [sp, #12]
    6aea:	4a39      	ldr	r2, [pc, #228]	; (6bd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6aec:	4293      	cmp	r3, r2
    6aee:	d151      	bne.n	6b94 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    6af0:	9b02      	ldr	r3, [sp, #8]
    6af2:	2b10      	cmp	r3, #16
    6af4:	d867      	bhi.n	6bc6 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    6af6:	a201      	add	r2, pc, #4	; (adr r2, 6afc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    6af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6afc:	00006b41 	.word	0x00006b41
    6b00:	00006b4f 	.word	0x00006b4f
    6b04:	00006bc7 	.word	0x00006bc7
    6b08:	00006bc7 	.word	0x00006bc7
    6b0c:	00006bc7 	.word	0x00006bc7
    6b10:	00006bc7 	.word	0x00006bc7
    6b14:	00006bc7 	.word	0x00006bc7
    6b18:	00006bc7 	.word	0x00006bc7
    6b1c:	00006bc7 	.word	0x00006bc7
    6b20:	00006bc7 	.word	0x00006bc7
    6b24:	00006bc7 	.word	0x00006bc7
    6b28:	00006bc7 	.word	0x00006bc7
    6b2c:	00006bc7 	.word	0x00006bc7
    6b30:	00006b5d 	.word	0x00006b5d
    6b34:	00006b6b 	.word	0x00006b6b
    6b38:	00006b79 	.word	0x00006b79
    6b3c:	00006b87 	.word	0x00006b87
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6b40:	2301      	movs	r3, #1
    6b42:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6b44:	9a05      	ldr	r2, [sp, #20]
    6b46:	9b01      	ldr	r3, [sp, #4]
    6b48:	4313      	orrs	r3, r2
    6b4a:	9305      	str	r3, [sp, #20]
                break;
    6b4c:	e03c      	b.n	6bc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6b4e:	2302      	movs	r3, #2
    6b50:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6b52:	9a05      	ldr	r2, [sp, #20]
    6b54:	9b01      	ldr	r3, [sp, #4]
    6b56:	4313      	orrs	r3, r2
    6b58:	9305      	str	r3, [sp, #20]
                break;
    6b5a:	e035      	b.n	6bc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6b5c:	2304      	movs	r3, #4
    6b5e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6b60:	9a05      	ldr	r2, [sp, #20]
    6b62:	9b01      	ldr	r3, [sp, #4]
    6b64:	4313      	orrs	r3, r2
    6b66:	9305      	str	r3, [sp, #20]
                break;
    6b68:	e02e      	b.n	6bc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    6b6a:	2308      	movs	r3, #8
    6b6c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6b6e:	9a05      	ldr	r2, [sp, #20]
    6b70:	9b01      	ldr	r3, [sp, #4]
    6b72:	4313      	orrs	r3, r2
    6b74:	9305      	str	r3, [sp, #20]
                break;
    6b76:	e027      	b.n	6bc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    6b78:	230e      	movs	r3, #14
    6b7a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6b7c:	9a05      	ldr	r2, [sp, #20]
    6b7e:	9b01      	ldr	r3, [sp, #4]
    6b80:	4013      	ands	r3, r2
    6b82:	9305      	str	r3, [sp, #20]
                break;
    6b84:	e020      	b.n	6bc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    6b86:	230d      	movs	r3, #13
    6b88:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6b8a:	9a05      	ldr	r2, [sp, #20]
    6b8c:	9b01      	ldr	r3, [sp, #4]
    6b8e:	4013      	ands	r3, r2
    6b90:	9305      	str	r3, [sp, #20]
                break;
    6b92:	e019      	b.n	6bc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    6b94:	9b03      	ldr	r3, [sp, #12]
    6b96:	4a0f      	ldr	r2, [pc, #60]	; (6bd4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    6b98:	4293      	cmp	r3, r2
    6b9a:	d115      	bne.n	6bc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    6b9c:	9b02      	ldr	r3, [sp, #8]
    6b9e:	2b00      	cmp	r3, #0
    6ba0:	d003      	beq.n	6baa <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    6ba2:	9b02      	ldr	r3, [sp, #8]
    6ba4:	2b01      	cmp	r3, #1
    6ba6:	d007      	beq.n	6bb8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    6ba8:	e00e      	b.n	6bc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    6baa:	230b      	movs	r3, #11
    6bac:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6bae:	9a05      	ldr	r2, [sp, #20]
    6bb0:	9b01      	ldr	r3, [sp, #4]
    6bb2:	4013      	ands	r3, r2
    6bb4:	9305      	str	r3, [sp, #20]
                break;
    6bb6:	e007      	b.n	6bc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    6bb8:	2307      	movs	r3, #7
    6bba:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6bbc:	9a05      	ldr	r2, [sp, #20]
    6bbe:	9b01      	ldr	r3, [sp, #4]
    6bc0:	4013      	ands	r3, r2
    6bc2:	9305      	str	r3, [sp, #20]
                break;
    6bc4:	e000      	b.n	6bc8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    6bc6:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    6bc8:	9b05      	ldr	r3, [sp, #20]
}
    6bca:	4618      	mov	r0, r3
    6bcc:	b006      	add	sp, #24
    6bce:	4770      	bx	lr
    6bd0:	4004a000 	.word	0x4004a000
    6bd4:	4004b000 	.word	0x4004b000

00006bd8 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6bd8:	b500      	push	{lr}
    6bda:	b089      	sub	sp, #36	; 0x24
    6bdc:	9003      	str	r0, [sp, #12]
    6bde:	9102      	str	r1, [sp, #8]
    6be0:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6be2:	9b01      	ldr	r3, [sp, #4]
    6be4:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    6be6:	9b01      	ldr	r3, [sp, #4]
    6be8:	2b08      	cmp	r3, #8
    6bea:	d121      	bne.n	6c30 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6bec:	4b13      	ldr	r3, [pc, #76]	; (6c3c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6bee:	685b      	ldr	r3, [r3, #4]
    6bf0:	f003 030f 	and.w	r3, r3, #15
    6bf4:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    6bf6:	9a06      	ldr	r2, [sp, #24]
    6bf8:	9902      	ldr	r1, [sp, #8]
    6bfa:	9803      	ldr	r0, [sp, #12]
    6bfc:	f7ff ff6e 	bl	6adc <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6c00:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6c02:	9b05      	ldr	r3, [sp, #20]
    6c04:	2bff      	cmp	r3, #255	; 0xff
    6c06:	d011      	beq.n	6c2c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6c08:	f00c fcc8 	bl	1359c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6c0c:	4b0b      	ldr	r3, [pc, #44]	; (6c3c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c0e:	685b      	ldr	r3, [r3, #4]
    6c10:	4a0a      	ldr	r2, [pc, #40]	; (6c3c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c12:	f023 030f 	bic.w	r3, r3, #15
    6c16:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6c18:	4b08      	ldr	r3, [pc, #32]	; (6c3c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c1a:	685a      	ldr	r2, [r3, #4]
    6c1c:	9b05      	ldr	r3, [sp, #20]
    6c1e:	f003 030f 	and.w	r3, r3, #15
    6c22:	4906      	ldr	r1, [pc, #24]	; (6c3c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c24:	4313      	orrs	r3, r2
    6c26:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6c28:	f00c fce4 	bl	135f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6c2c:	2300      	movs	r3, #0
    6c2e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6c30:	9b07      	ldr	r3, [sp, #28]
}
    6c32:	4618      	mov	r0, r3
    6c34:	b009      	add	sp, #36	; 0x24
    6c36:	f85d fb04 	ldr.w	pc, [sp], #4
    6c3a:	bf00      	nop
    6c3c:	40048000 	.word	0x40048000

00006c40 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6c40:	b500      	push	{lr}
    6c42:	b087      	sub	sp, #28
    6c44:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    6c46:	2300      	movs	r3, #0
    6c48:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6c4a:	2300      	movs	r3, #0
    6c4c:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6c4e:	2300      	movs	r3, #0
    6c50:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6c52:	9b01      	ldr	r3, [sp, #4]
    6c54:	68db      	ldr	r3, [r3, #12]
    6c56:	2b02      	cmp	r3, #2
    6c58:	d00a      	beq.n	6c70 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    6c5a:	9b05      	ldr	r3, [sp, #20]
    6c5c:	f043 0302 	orr.w	r3, r3, #2
    6c60:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6c62:	9b01      	ldr	r3, [sp, #4]
    6c64:	68db      	ldr	r3, [r3, #12]
    6c66:	f003 0301 	and.w	r3, r3, #1
    6c6a:	9a05      	ldr	r2, [sp, #20]
    6c6c:	4313      	orrs	r3, r2
    6c6e:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6c70:	9b01      	ldr	r3, [sp, #4]
    6c72:	699b      	ldr	r3, [r3, #24]
    6c74:	019b      	lsls	r3, r3, #6
    6c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6c7a:	9a05      	ldr	r2, [sp, #20]
    6c7c:	4313      	orrs	r3, r2
    6c7e:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6c80:	9b01      	ldr	r3, [sp, #4]
    6c82:	6a1b      	ldr	r3, [r3, #32]
    6c84:	03db      	lsls	r3, r3, #15
    6c86:	b29b      	uxth	r3, r3
    6c88:	9a05      	ldr	r2, [sp, #20]
    6c8a:	4313      	orrs	r3, r2
    6c8c:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6c8e:	9b01      	ldr	r3, [sp, #4]
    6c90:	7f1b      	ldrb	r3, [r3, #28]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d001      	beq.n	6c9a <Port_Ci_Port_Ip_PinInit+0x5a>
    6c96:	2310      	movs	r3, #16
    6c98:	e000      	b.n	6c9c <Port_Ci_Port_Ip_PinInit+0x5c>
    6c9a:	2300      	movs	r3, #0
    6c9c:	9a05      	ldr	r2, [sp, #20]
    6c9e:	4313      	orrs	r3, r2
    6ca0:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6ca2:	9b01      	ldr	r3, [sp, #4]
    6ca4:	691b      	ldr	r3, [r3, #16]
    6ca6:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6ca8:	9b01      	ldr	r3, [sp, #4]
    6caa:	6818      	ldr	r0, [r3, #0]
    6cac:	9b01      	ldr	r3, [sp, #4]
    6cae:	689b      	ldr	r3, [r3, #8]
    6cb0:	9a04      	ldr	r2, [sp, #16]
    6cb2:	4619      	mov	r1, r3
    6cb4:	f7ff ff90 	bl	6bd8 <Port_Ci_Port_Ip_ConfigureInterleave>
    6cb8:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    6cba:	9b03      	ldr	r3, [sp, #12]
    6cbc:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6cbe:	9b04      	ldr	r3, [sp, #16]
    6cc0:	021b      	lsls	r3, r3, #8
    6cc2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6cc6:	9a05      	ldr	r2, [sp, #20]
    6cc8:	4313      	orrs	r3, r2
    6cca:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6ccc:	f00c facc 	bl	13268 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6cd0:	9b01      	ldr	r3, [sp, #4]
    6cd2:	681b      	ldr	r3, [r3, #0]
    6cd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6cd8:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6cda:	9b01      	ldr	r3, [sp, #4]
    6cdc:	689b      	ldr	r3, [r3, #8]
    6cde:	2201      	movs	r2, #1
    6ce0:	fa02 f303 	lsl.w	r3, r2, r3
    6ce4:	43db      	mvns	r3, r3
    6ce6:	9a02      	ldr	r2, [sp, #8]
    6ce8:	4013      	ands	r3, r2
    6cea:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6cec:	9b01      	ldr	r3, [sp, #4]
    6cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d001      	beq.n	6cfa <Port_Ci_Port_Ip_PinInit+0xba>
    6cf6:	2201      	movs	r2, #1
    6cf8:	e000      	b.n	6cfc <Port_Ci_Port_Ip_PinInit+0xbc>
    6cfa:	2200      	movs	r2, #0
    6cfc:	9b01      	ldr	r3, [sp, #4]
    6cfe:	689b      	ldr	r3, [r3, #8]
    6d00:	fa02 f303 	lsl.w	r3, r2, r3
    6d04:	9a02      	ldr	r2, [sp, #8]
    6d06:	4313      	orrs	r3, r2
    6d08:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6d0a:	9b01      	ldr	r3, [sp, #4]
    6d0c:	681b      	ldr	r3, [r3, #0]
    6d0e:	9a02      	ldr	r2, [sp, #8]
    6d10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6d14:	f00c fad4 	bl	132c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6d18:	9b04      	ldr	r3, [sp, #16]
    6d1a:	2b01      	cmp	r3, #1
    6d1c:	d16d      	bne.n	6dfa <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6d1e:	9b01      	ldr	r3, [sp, #4]
    6d20:	695b      	ldr	r3, [r3, #20]
    6d22:	2b02      	cmp	r3, #2
    6d24:	d138      	bne.n	6d98 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6d26:	9b01      	ldr	r3, [sp, #4]
    6d28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6d2c:	2b01      	cmp	r3, #1
    6d2e:	d10f      	bne.n	6d50 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6d30:	f00c faec 	bl	1330c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6d34:	9b01      	ldr	r3, [sp, #4]
    6d36:	685b      	ldr	r3, [r3, #4]
    6d38:	6859      	ldr	r1, [r3, #4]
    6d3a:	9b01      	ldr	r3, [sp, #4]
    6d3c:	689b      	ldr	r3, [r3, #8]
    6d3e:	2201      	movs	r2, #1
    6d40:	409a      	lsls	r2, r3
    6d42:	9b01      	ldr	r3, [sp, #4]
    6d44:	685b      	ldr	r3, [r3, #4]
    6d46:	430a      	orrs	r2, r1
    6d48:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6d4a:	f00c fb0b 	bl	13364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6d4e:	e013      	b.n	6d78 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6d50:	9b01      	ldr	r3, [sp, #4]
    6d52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6d56:	2b00      	cmp	r3, #0
    6d58:	d10e      	bne.n	6d78 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6d5a:	f00c fb29 	bl	133b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6d5e:	9b01      	ldr	r3, [sp, #4]
    6d60:	685b      	ldr	r3, [r3, #4]
    6d62:	6899      	ldr	r1, [r3, #8]
    6d64:	9b01      	ldr	r3, [sp, #4]
    6d66:	689b      	ldr	r3, [r3, #8]
    6d68:	2201      	movs	r2, #1
    6d6a:	409a      	lsls	r2, r3
    6d6c:	9b01      	ldr	r3, [sp, #4]
    6d6e:	685b      	ldr	r3, [r3, #4]
    6d70:	430a      	orrs	r2, r1
    6d72:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6d74:	f00c fb48 	bl	13408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6d78:	f00c fb6c 	bl	13454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6d7c:	9b01      	ldr	r3, [sp, #4]
    6d7e:	685b      	ldr	r3, [r3, #4]
    6d80:	6959      	ldr	r1, [r3, #20]
    6d82:	9b01      	ldr	r3, [sp, #4]
    6d84:	689b      	ldr	r3, [r3, #8]
    6d86:	2201      	movs	r2, #1
    6d88:	409a      	lsls	r2, r3
    6d8a:	9b01      	ldr	r3, [sp, #4]
    6d8c:	685b      	ldr	r3, [r3, #4]
    6d8e:	430a      	orrs	r2, r1
    6d90:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6d92:	f00c fb8b 	bl	134ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6d96:	e030      	b.n	6dfa <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6d98:	f00c fb5c 	bl	13454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6d9c:	9b01      	ldr	r3, [sp, #4]
    6d9e:	685b      	ldr	r3, [r3, #4]
    6da0:	6959      	ldr	r1, [r3, #20]
    6da2:	9b01      	ldr	r3, [sp, #4]
    6da4:	689b      	ldr	r3, [r3, #8]
    6da6:	2201      	movs	r2, #1
    6da8:	fa02 f303 	lsl.w	r3, r2, r3
    6dac:	43da      	mvns	r2, r3
    6dae:	9b01      	ldr	r3, [sp, #4]
    6db0:	685b      	ldr	r3, [r3, #4]
    6db2:	400a      	ands	r2, r1
    6db4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6db6:	f00c fb79 	bl	134ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6dba:	f00c fb9d 	bl	134f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6dbe:	9b01      	ldr	r3, [sp, #4]
    6dc0:	685b      	ldr	r3, [r3, #4]
    6dc2:	6999      	ldr	r1, [r3, #24]
    6dc4:	9b01      	ldr	r3, [sp, #4]
    6dc6:	689b      	ldr	r3, [r3, #8]
    6dc8:	2201      	movs	r2, #1
    6dca:	fa02 f303 	lsl.w	r3, r2, r3
    6dce:	43da      	mvns	r2, r3
    6dd0:	9b01      	ldr	r3, [sp, #4]
    6dd2:	685b      	ldr	r3, [r3, #4]
    6dd4:	400a      	ands	r2, r1
    6dd6:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6dd8:	9b01      	ldr	r3, [sp, #4]
    6dda:	695b      	ldr	r3, [r3, #20]
    6ddc:	2b03      	cmp	r3, #3
    6dde:	d10a      	bne.n	6df6 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6de0:	9b01      	ldr	r3, [sp, #4]
    6de2:	685b      	ldr	r3, [r3, #4]
    6de4:	6999      	ldr	r1, [r3, #24]
    6de6:	9b01      	ldr	r3, [sp, #4]
    6de8:	689b      	ldr	r3, [r3, #8]
    6dea:	2201      	movs	r2, #1
    6dec:	409a      	lsls	r2, r3
    6dee:	9b01      	ldr	r3, [sp, #4]
    6df0:	685b      	ldr	r3, [r3, #4]
    6df2:	430a      	orrs	r2, r1
    6df4:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6df6:	f00c fbab 	bl	13550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6dfa:	9b01      	ldr	r3, [sp, #4]
    6dfc:	681b      	ldr	r3, [r3, #0]
    6dfe:	9a01      	ldr	r2, [sp, #4]
    6e00:	6892      	ldr	r2, [r2, #8]
    6e02:	9905      	ldr	r1, [sp, #20]
    6e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6e08:	bf00      	nop
    6e0a:	b007      	add	sp, #28
    6e0c:	f85d fb04 	ldr.w	pc, [sp], #4

00006e10 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6e10:	b500      	push	{lr}
    6e12:	b085      	sub	sp, #20
    6e14:	9001      	str	r0, [sp, #4]
    6e16:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6e18:	2300      	movs	r3, #0
    6e1a:	9303      	str	r3, [sp, #12]
    6e1c:	e00d      	b.n	6e3a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6e1e:	9a03      	ldr	r2, [sp, #12]
    6e20:	4613      	mov	r3, r2
    6e22:	009b      	lsls	r3, r3, #2
    6e24:	4413      	add	r3, r2
    6e26:	00db      	lsls	r3, r3, #3
    6e28:	461a      	mov	r2, r3
    6e2a:	9b00      	ldr	r3, [sp, #0]
    6e2c:	4413      	add	r3, r2
    6e2e:	4618      	mov	r0, r3
    6e30:	f7ff ff06 	bl	6c40 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6e34:	9b03      	ldr	r3, [sp, #12]
    6e36:	3301      	adds	r3, #1
    6e38:	9303      	str	r3, [sp, #12]
    6e3a:	9a03      	ldr	r2, [sp, #12]
    6e3c:	9b01      	ldr	r3, [sp, #4]
    6e3e:	429a      	cmp	r2, r3
    6e40:	d3ed      	bcc.n	6e1e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6e42:	2300      	movs	r3, #0
}
    6e44:	4618      	mov	r0, r3
    6e46:	b005      	add	sp, #20
    6e48:	f85d fb04 	ldr.w	pc, [sp], #4

00006e4c <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6e4c:	b500      	push	{lr}
    6e4e:	b087      	sub	sp, #28
    6e50:	9003      	str	r0, [sp, #12]
    6e52:	9102      	str	r1, [sp, #8]
    6e54:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    6e56:	9a01      	ldr	r2, [sp, #4]
    6e58:	9902      	ldr	r1, [sp, #8]
    6e5a:	9803      	ldr	r0, [sp, #12]
    6e5c:	f7ff febc 	bl	6bd8 <Port_Ci_Port_Ip_ConfigureInterleave>
    6e60:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6e62:	f00c fbed 	bl	13640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6e66:	9b03      	ldr	r3, [sp, #12]
    6e68:	9a02      	ldr	r2, [sp, #8]
    6e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e6e:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6e70:	9b04      	ldr	r3, [sp, #16]
    6e72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    6e76:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6e78:	9b05      	ldr	r3, [sp, #20]
    6e7a:	021b      	lsls	r3, r3, #8
    6e7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6e80:	9a04      	ldr	r2, [sp, #16]
    6e82:	4313      	orrs	r3, r2
    6e84:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6e86:	9b03      	ldr	r3, [sp, #12]
    6e88:	9a02      	ldr	r2, [sp, #8]
    6e8a:	9904      	ldr	r1, [sp, #16]
    6e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6e90:	f00c fc02 	bl	13698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6e94:	bf00      	nop
    6e96:	b007      	add	sp, #28
    6e98:	f85d fb04 	ldr.w	pc, [sp], #4

00006e9c <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6e9c:	b500      	push	{lr}
    6e9e:	b083      	sub	sp, #12
    6ea0:	9001      	str	r0, [sp, #4]
    6ea2:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6ea4:	f00c fc1e 	bl	136e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6ea8:	9b01      	ldr	r3, [sp, #4]
    6eaa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6eae:	2101      	movs	r1, #1
    6eb0:	9b00      	ldr	r3, [sp, #0]
    6eb2:	fa01 f303 	lsl.w	r3, r1, r3
    6eb6:	431a      	orrs	r2, r3
    6eb8:	9b01      	ldr	r3, [sp, #4]
    6eba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6ebe:	f00c fc3d 	bl	1373c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6ec2:	bf00      	nop
    6ec4:	b003      	add	sp, #12
    6ec6:	f85d fb04 	ldr.w	pc, [sp], #4

00006eca <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6eca:	b500      	push	{lr}
    6ecc:	b083      	sub	sp, #12
    6ece:	9001      	str	r0, [sp, #4]
    6ed0:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6ed2:	f00c fc59 	bl	13788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6ed6:	9b01      	ldr	r3, [sp, #4]
    6ed8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6edc:	2101      	movs	r1, #1
    6ede:	9b00      	ldr	r3, [sp, #0]
    6ee0:	fa01 f303 	lsl.w	r3, r1, r3
    6ee4:	43db      	mvns	r3, r3
    6ee6:	401a      	ands	r2, r3
    6ee8:	9b01      	ldr	r3, [sp, #4]
    6eea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6eee:	f00c fc77 	bl	137e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6ef2:	bf00      	nop
    6ef4:	b003      	add	sp, #12
    6ef6:	f85d fb04 	ldr.w	pc, [sp], #4

00006efa <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6efa:	b082      	sub	sp, #8
    6efc:	9001      	str	r0, [sp, #4]
    6efe:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6f00:	9b00      	ldr	r3, [sp, #0]
    6f02:	785b      	ldrb	r3, [r3, #1]
    6f04:	f003 0201 	and.w	r2, r3, #1
    6f08:	9b01      	ldr	r3, [sp, #4]
    6f0a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6f0e:	9b00      	ldr	r3, [sp, #0]
    6f10:	789b      	ldrb	r3, [r3, #2]
    6f12:	f003 021f 	and.w	r2, r3, #31
    6f16:	9b01      	ldr	r3, [sp, #4]
    6f18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6f1c:	bf00      	nop
    6f1e:	b002      	add	sp, #8
    6f20:	4770      	bx	lr

00006f22 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6f22:	b086      	sub	sp, #24
    6f24:	9003      	str	r0, [sp, #12]
    6f26:	9301      	str	r3, [sp, #4]
    6f28:	460b      	mov	r3, r1
    6f2a:	f8ad 300a 	strh.w	r3, [sp, #10]
    6f2e:	4613      	mov	r3, r2
    6f30:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6f34:	2300      	movs	r3, #0
    6f36:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6f3a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f3e:	f043 0301 	orr.w	r3, r3, #1
    6f42:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6f46:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f4a:	f043 0302 	orr.w	r3, r3, #2
    6f4e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6f52:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f56:	f043 0310 	orr.w	r3, r3, #16
    6f5a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6f5e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6f66:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6f6a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6f72:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6f76:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6f82:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6f86:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6f8a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6f8e:	4013      	ands	r3, r2
    6f90:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6f94:	9b01      	ldr	r3, [sp, #4]
    6f96:	2b00      	cmp	r3, #0
    6f98:	d003      	beq.n	6fa2 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6f9a:	9b01      	ldr	r3, [sp, #4]
    6f9c:	2b01      	cmp	r3, #1
    6f9e:	d00a      	beq.n	6fb6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6fa0:	e013      	b.n	6fca <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6fa2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fa6:	041a      	lsls	r2, r3, #16
    6fa8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fac:	431a      	orrs	r2, r3
    6fae:	9b03      	ldr	r3, [sp, #12]
    6fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6fb4:	e009      	b.n	6fca <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6fb6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fba:	041a      	lsls	r2, r3, #16
    6fbc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fc0:	431a      	orrs	r2, r3
    6fc2:	9b03      	ldr	r3, [sp, #12]
    6fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6fc8:	bf00      	nop
    }
}
    6fca:	bf00      	nop
    6fcc:	b006      	add	sp, #24
    6fce:	4770      	bx	lr

00006fd0 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6fd0:	b500      	push	{lr}
    6fd2:	b087      	sub	sp, #28
    6fd4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6fd6:	9b01      	ldr	r3, [sp, #4]
    6fd8:	885b      	ldrh	r3, [r3, #2]
    6fda:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6fde:	9b01      	ldr	r3, [sp, #4]
    6fe0:	689b      	ldr	r3, [r3, #8]
    6fe2:	7a1b      	ldrb	r3, [r3, #8]
    6fe4:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6fe8:	9b01      	ldr	r3, [sp, #4]
    6fea:	689b      	ldr	r3, [r3, #8]
    6fec:	681b      	ldr	r3, [r3, #0]
    6fee:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6ff0:	9b01      	ldr	r3, [sp, #4]
    6ff2:	689b      	ldr	r3, [r3, #8]
    6ff4:	685b      	ldr	r3, [r3, #4]
    6ff6:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6ff8:	2300      	movs	r3, #0
    6ffa:	f8ad 3016 	strh.w	r3, [sp, #22]
    6ffe:	e111      	b.n	7224 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    7000:	9b02      	ldr	r3, [sp, #8]
    7002:	2b02      	cmp	r3, #2
    7004:	d169      	bne.n	70da <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    7006:	f89d 3013 	ldrb.w	r3, [sp, #19]
    700a:	2b01      	cmp	r3, #1
    700c:	d11a      	bne.n	7044 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    700e:	9b01      	ldr	r3, [sp, #4]
    7010:	685a      	ldr	r2, [r3, #4]
    7012:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7016:	005b      	lsls	r3, r3, #1
    7018:	4413      	add	r3, r2
    701a:	881b      	ldrh	r3, [r3, #0]
    701c:	f003 021f 	and.w	r2, r3, #31
    7020:	9b01      	ldr	r3, [sp, #4]
    7022:	6859      	ldr	r1, [r3, #4]
    7024:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7028:	005b      	lsls	r3, r3, #1
    702a:	440b      	add	r3, r1
    702c:	881b      	ldrh	r3, [r3, #0]
    702e:	095b      	lsrs	r3, r3, #5
    7030:	b29b      	uxth	r3, r3
    7032:	4619      	mov	r1, r3
    7034:	4b81      	ldr	r3, [pc, #516]	; (723c <Port_Ipw_Init_UnusedPins+0x26c>)
    7036:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    703a:	2101      	movs	r1, #1
    703c:	fa01 f202 	lsl.w	r2, r1, r2
    7040:	605a      	str	r2, [r3, #4]
    7042:	e01d      	b.n	7080 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    7044:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7048:	2b00      	cmp	r3, #0
    704a:	d119      	bne.n	7080 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    704c:	9b01      	ldr	r3, [sp, #4]
    704e:	685a      	ldr	r2, [r3, #4]
    7050:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7054:	005b      	lsls	r3, r3, #1
    7056:	4413      	add	r3, r2
    7058:	881b      	ldrh	r3, [r3, #0]
    705a:	f003 021f 	and.w	r2, r3, #31
    705e:	9b01      	ldr	r3, [sp, #4]
    7060:	6859      	ldr	r1, [r3, #4]
    7062:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7066:	005b      	lsls	r3, r3, #1
    7068:	440b      	add	r3, r1
    706a:	881b      	ldrh	r3, [r3, #0]
    706c:	095b      	lsrs	r3, r3, #5
    706e:	b29b      	uxth	r3, r3
    7070:	4619      	mov	r1, r3
    7072:	4b72      	ldr	r3, [pc, #456]	; (723c <Port_Ipw_Init_UnusedPins+0x26c>)
    7074:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7078:	2101      	movs	r1, #1
    707a:	fa01 f202 	lsl.w	r2, r1, r2
    707e:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    7080:	f00c fbd4 	bl	1382c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7084:	9b01      	ldr	r3, [sp, #4]
    7086:	685a      	ldr	r2, [r3, #4]
    7088:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    708c:	005b      	lsls	r3, r3, #1
    708e:	4413      	add	r3, r2
    7090:	881b      	ldrh	r3, [r3, #0]
    7092:	095b      	lsrs	r3, r3, #5
    7094:	b29b      	uxth	r3, r3
    7096:	461a      	mov	r2, r3
    7098:	4b68      	ldr	r3, [pc, #416]	; (723c <Port_Ipw_Init_UnusedPins+0x26c>)
    709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    709e:	6959      	ldr	r1, [r3, #20]
    70a0:	9b01      	ldr	r3, [sp, #4]
    70a2:	685a      	ldr	r2, [r3, #4]
    70a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70a8:	005b      	lsls	r3, r3, #1
    70aa:	4413      	add	r3, r2
    70ac:	881b      	ldrh	r3, [r3, #0]
    70ae:	f003 031f 	and.w	r3, r3, #31
    70b2:	2201      	movs	r2, #1
    70b4:	409a      	lsls	r2, r3
    70b6:	9b01      	ldr	r3, [sp, #4]
    70b8:	6858      	ldr	r0, [r3, #4]
    70ba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70be:	005b      	lsls	r3, r3, #1
    70c0:	4403      	add	r3, r0
    70c2:	881b      	ldrh	r3, [r3, #0]
    70c4:	095b      	lsrs	r3, r3, #5
    70c6:	b29b      	uxth	r3, r3
    70c8:	4618      	mov	r0, r3
    70ca:	4b5c      	ldr	r3, [pc, #368]	; (723c <Port_Ipw_Init_UnusedPins+0x26c>)
    70cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    70d0:	430a      	orrs	r2, r1
    70d2:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    70d4:	f00c fbd6 	bl	13884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    70d8:	e086      	b.n	71e8 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    70da:	f00c fba7 	bl	1382c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    70de:	9b01      	ldr	r3, [sp, #4]
    70e0:	685a      	ldr	r2, [r3, #4]
    70e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70e6:	005b      	lsls	r3, r3, #1
    70e8:	4413      	add	r3, r2
    70ea:	881b      	ldrh	r3, [r3, #0]
    70ec:	095b      	lsrs	r3, r3, #5
    70ee:	b29b      	uxth	r3, r3
    70f0:	461a      	mov	r2, r3
    70f2:	4b52      	ldr	r3, [pc, #328]	; (723c <Port_Ipw_Init_UnusedPins+0x26c>)
    70f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    70f8:	6959      	ldr	r1, [r3, #20]
    70fa:	9b01      	ldr	r3, [sp, #4]
    70fc:	685a      	ldr	r2, [r3, #4]
    70fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7102:	005b      	lsls	r3, r3, #1
    7104:	4413      	add	r3, r2
    7106:	881b      	ldrh	r3, [r3, #0]
    7108:	f003 031f 	and.w	r3, r3, #31
    710c:	2201      	movs	r2, #1
    710e:	fa02 f303 	lsl.w	r3, r2, r3
    7112:	43da      	mvns	r2, r3
    7114:	9b01      	ldr	r3, [sp, #4]
    7116:	6858      	ldr	r0, [r3, #4]
    7118:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    711c:	005b      	lsls	r3, r3, #1
    711e:	4403      	add	r3, r0
    7120:	881b      	ldrh	r3, [r3, #0]
    7122:	095b      	lsrs	r3, r3, #5
    7124:	b29b      	uxth	r3, r3
    7126:	4618      	mov	r0, r3
    7128:	4b44      	ldr	r3, [pc, #272]	; (723c <Port_Ipw_Init_UnusedPins+0x26c>)
    712a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    712e:	400a      	ands	r2, r1
    7130:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    7132:	f00c fba7 	bl	13884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    7136:	f00c fbcb 	bl	138d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    713a:	9b01      	ldr	r3, [sp, #4]
    713c:	685a      	ldr	r2, [r3, #4]
    713e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7142:	005b      	lsls	r3, r3, #1
    7144:	4413      	add	r3, r2
    7146:	881b      	ldrh	r3, [r3, #0]
    7148:	095b      	lsrs	r3, r3, #5
    714a:	b29b      	uxth	r3, r3
    714c:	461a      	mov	r2, r3
    714e:	4b3b      	ldr	r3, [pc, #236]	; (723c <Port_Ipw_Init_UnusedPins+0x26c>)
    7150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7154:	6999      	ldr	r1, [r3, #24]
    7156:	9b01      	ldr	r3, [sp, #4]
    7158:	685a      	ldr	r2, [r3, #4]
    715a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    715e:	005b      	lsls	r3, r3, #1
    7160:	4413      	add	r3, r2
    7162:	881b      	ldrh	r3, [r3, #0]
    7164:	f003 031f 	and.w	r3, r3, #31
    7168:	2201      	movs	r2, #1
    716a:	fa02 f303 	lsl.w	r3, r2, r3
    716e:	43da      	mvns	r2, r3
    7170:	9b01      	ldr	r3, [sp, #4]
    7172:	6858      	ldr	r0, [r3, #4]
    7174:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7178:	005b      	lsls	r3, r3, #1
    717a:	4403      	add	r3, r0
    717c:	881b      	ldrh	r3, [r3, #0]
    717e:	095b      	lsrs	r3, r3, #5
    7180:	b29b      	uxth	r3, r3
    7182:	4618      	mov	r0, r3
    7184:	4b2d      	ldr	r3, [pc, #180]	; (723c <Port_Ipw_Init_UnusedPins+0x26c>)
    7186:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    718a:	400a      	ands	r2, r1
    718c:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    718e:	9b02      	ldr	r3, [sp, #8]
    7190:	2b03      	cmp	r3, #3
    7192:	d127      	bne.n	71e4 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7194:	9b01      	ldr	r3, [sp, #4]
    7196:	685a      	ldr	r2, [r3, #4]
    7198:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    719c:	005b      	lsls	r3, r3, #1
    719e:	4413      	add	r3, r2
    71a0:	881b      	ldrh	r3, [r3, #0]
    71a2:	095b      	lsrs	r3, r3, #5
    71a4:	b29b      	uxth	r3, r3
    71a6:	461a      	mov	r2, r3
    71a8:	4b24      	ldr	r3, [pc, #144]	; (723c <Port_Ipw_Init_UnusedPins+0x26c>)
    71aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71ae:	6999      	ldr	r1, [r3, #24]
    71b0:	9b01      	ldr	r3, [sp, #4]
    71b2:	685a      	ldr	r2, [r3, #4]
    71b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71b8:	005b      	lsls	r3, r3, #1
    71ba:	4413      	add	r3, r2
    71bc:	881b      	ldrh	r3, [r3, #0]
    71be:	f003 031f 	and.w	r3, r3, #31
    71c2:	2201      	movs	r2, #1
    71c4:	409a      	lsls	r2, r3
    71c6:	9b01      	ldr	r3, [sp, #4]
    71c8:	6858      	ldr	r0, [r3, #4]
    71ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71ce:	005b      	lsls	r3, r3, #1
    71d0:	4403      	add	r3, r0
    71d2:	881b      	ldrh	r3, [r3, #0]
    71d4:	095b      	lsrs	r3, r3, #5
    71d6:	b29b      	uxth	r3, r3
    71d8:	4618      	mov	r0, r3
    71da:	4b18      	ldr	r3, [pc, #96]	; (723c <Port_Ipw_Init_UnusedPins+0x26c>)
    71dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    71e0:	430a      	orrs	r2, r1
    71e2:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    71e4:	f00c fba0 	bl	13928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    71e8:	9b01      	ldr	r3, [sp, #4]
    71ea:	685a      	ldr	r2, [r3, #4]
    71ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71f0:	005b      	lsls	r3, r3, #1
    71f2:	4413      	add	r3, r2
    71f4:	881b      	ldrh	r3, [r3, #0]
    71f6:	095b      	lsrs	r3, r3, #5
    71f8:	b29b      	uxth	r3, r3
    71fa:	461a      	mov	r2, r3
    71fc:	4b10      	ldr	r3, [pc, #64]	; (7240 <Port_Ipw_Init_UnusedPins+0x270>)
    71fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7202:	9a01      	ldr	r2, [sp, #4]
    7204:	6851      	ldr	r1, [r2, #4]
    7206:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    720a:	0052      	lsls	r2, r2, #1
    720c:	440a      	add	r2, r1
    720e:	8812      	ldrh	r2, [r2, #0]
    7210:	f002 021f 	and.w	r2, r2, #31
    7214:	9903      	ldr	r1, [sp, #12]
    7216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    721a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    721e:	3301      	adds	r3, #1
    7220:	f8ad 3016 	strh.w	r3, [sp, #22]
    7224:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7228:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    722c:	429a      	cmp	r2, r3
    722e:	f4ff aee7 	bcc.w	7000 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    7232:	bf00      	nop
    7234:	bf00      	nop
    7236:	b007      	add	sp, #28
    7238:	f85d fb04 	ldr.w	pc, [sp], #4
    723c:	00016468 	.word	0x00016468
    7240:	00016454 	.word	0x00016454

00007244 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    7244:	b500      	push	{lr}
    7246:	b085      	sub	sp, #20
    7248:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    724a:	9b01      	ldr	r3, [sp, #4]
    724c:	7c1b      	ldrb	r3, [r3, #16]
    724e:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    7252:	2300      	movs	r3, #0
    7254:	f8ad 300e 	strh.w	r3, [sp, #14]
    7258:	e035      	b.n	72c6 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    725a:	9b01      	ldr	r3, [sp, #4]
    725c:	695a      	ldr	r2, [r3, #20]
    725e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7262:	00db      	lsls	r3, r3, #3
    7264:	4413      	add	r3, r2
    7266:	781b      	ldrb	r3, [r3, #0]
    7268:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    726c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7270:	4a1f      	ldr	r2, [pc, #124]	; (72f0 <Port_Ipw_Init+0xac>)
    7272:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    7276:	9b01      	ldr	r3, [sp, #4]
    7278:	695a      	ldr	r2, [r3, #20]
    727a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    727e:	00db      	lsls	r3, r3, #3
    7280:	4413      	add	r3, r2
    7282:	4619      	mov	r1, r3
    7284:	f7ff fe39 	bl	6efa <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    7288:	f00c fcbc 	bl	13c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    728c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7290:	4a17      	ldr	r2, [pc, #92]	; (72f0 <Port_Ipw_Init+0xac>)
    7292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7296:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    729a:	9b01      	ldr	r3, [sp, #4]
    729c:	695a      	ldr	r2, [r3, #20]
    729e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72a2:	00db      	lsls	r3, r3, #3
    72a4:	4413      	add	r3, r2
    72a6:	685a      	ldr	r2, [r3, #4]
    72a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    72ac:	4810      	ldr	r0, [pc, #64]	; (72f0 <Port_Ipw_Init+0xac>)
    72ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    72b2:	430a      	orrs	r2, r1
    72b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    72b8:	f00c fcd0 	bl	13c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    72bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72c0:	3301      	adds	r3, #1
    72c2:	f8ad 300e 	strh.w	r3, [sp, #14]
    72c6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    72ca:	b29b      	uxth	r3, r3
    72cc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72d0:	429a      	cmp	r2, r3
    72d2:	d3c2      	bcc.n	725a <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    72d4:	9b01      	ldr	r3, [sp, #4]
    72d6:	6a1b      	ldr	r3, [r3, #32]
    72d8:	4619      	mov	r1, r3
    72da:	200c      	movs	r0, #12
    72dc:	f7ff fd98 	bl	6e10 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    72e0:	9801      	ldr	r0, [sp, #4]
    72e2:	f7ff fe75 	bl	6fd0 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    72e6:	bf00      	nop
    72e8:	b005      	add	sp, #20
    72ea:	f85d fb04 	ldr.w	pc, [sp], #4
    72ee:	bf00      	nop
    72f0:	00016454 	.word	0x00016454

000072f4 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    72f4:	b500      	push	{lr}
    72f6:	b085      	sub	sp, #20
    72f8:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    72fa:	9b01      	ldr	r3, [sp, #4]
    72fc:	881b      	ldrh	r3, [r3, #0]
    72fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7302:	2300      	movs	r3, #0
    7304:	f8ad 300e 	strh.w	r3, [sp, #14]
    7308:	e0d2      	b.n	74b0 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    730a:	9b01      	ldr	r3, [sp, #4]
    730c:	68d9      	ldr	r1, [r3, #12]
    730e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7312:	4613      	mov	r3, r2
    7314:	009b      	lsls	r3, r3, #2
    7316:	4413      	add	r3, r2
    7318:	009b      	lsls	r3, r3, #2
    731a:	440b      	add	r3, r1
    731c:	7c5b      	ldrb	r3, [r3, #17]
    731e:	f083 0301 	eor.w	r3, r3, #1
    7322:	b2db      	uxtb	r3, r3
    7324:	2b00      	cmp	r3, #0
    7326:	f000 80be 	beq.w	74a6 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    732a:	9b01      	ldr	r3, [sp, #4]
    732c:	68d9      	ldr	r1, [r3, #12]
    732e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7332:	4613      	mov	r3, r2
    7334:	009b      	lsls	r3, r3, #2
    7336:	4413      	add	r3, r2
    7338:	009b      	lsls	r3, r3, #2
    733a:	440b      	add	r3, r1
    733c:	7c1b      	ldrb	r3, [r3, #16]
    733e:	2b00      	cmp	r3, #0
    7340:	f000 80b1 	beq.w	74a6 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    7344:	9b01      	ldr	r3, [sp, #4]
    7346:	68d9      	ldr	r1, [r3, #12]
    7348:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    734c:	4613      	mov	r3, r2
    734e:	009b      	lsls	r3, r3, #2
    7350:	4413      	add	r3, r2
    7352:	009b      	lsls	r3, r3, #2
    7354:	440b      	add	r3, r1
    7356:	881b      	ldrh	r3, [r3, #0]
    7358:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    735c:	9b01      	ldr	r3, [sp, #4]
    735e:	68d9      	ldr	r1, [r3, #12]
    7360:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7364:	4613      	mov	r3, r2
    7366:	009b      	lsls	r3, r3, #2
    7368:	4413      	add	r3, r2
    736a:	009b      	lsls	r3, r3, #2
    736c:	440b      	add	r3, r1
    736e:	68db      	ldr	r3, [r3, #12]
    7370:	2b02      	cmp	r3, #2
    7372:	d11d      	bne.n	73b0 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7374:	f00c fd8e 	bl	13e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7378:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    737c:	095b      	lsrs	r3, r3, #5
    737e:	b29b      	uxth	r3, r3
    7380:	461a      	mov	r2, r3
    7382:	4b51      	ldr	r3, [pc, #324]	; (74c8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7388:	6959      	ldr	r1, [r3, #20]
    738a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    738e:	f003 031f 	and.w	r3, r3, #31
    7392:	2201      	movs	r2, #1
    7394:	409a      	lsls	r2, r3
    7396:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    739a:	095b      	lsrs	r3, r3, #5
    739c:	b29b      	uxth	r3, r3
    739e:	4618      	mov	r0, r3
    73a0:	4b49      	ldr	r3, [pc, #292]	; (74c8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    73a6:	430a      	orrs	r2, r1
    73a8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    73aa:	f00c fd9f 	bl	13eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    73ae:	e07a      	b.n	74a6 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    73b0:	9b01      	ldr	r3, [sp, #4]
    73b2:	68d9      	ldr	r1, [r3, #12]
    73b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73b8:	4613      	mov	r3, r2
    73ba:	009b      	lsls	r3, r3, #2
    73bc:	4413      	add	r3, r2
    73be:	009b      	lsls	r3, r3, #2
    73c0:	440b      	add	r3, r1
    73c2:	68db      	ldr	r3, [r3, #12]
    73c4:	2b01      	cmp	r3, #1
    73c6:	d00b      	beq.n	73e0 <Port_Ipw_RefreshPortDirection+0xec>
    73c8:	9b01      	ldr	r3, [sp, #4]
    73ca:	68d9      	ldr	r1, [r3, #12]
    73cc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73d0:	4613      	mov	r3, r2
    73d2:	009b      	lsls	r3, r3, #2
    73d4:	4413      	add	r3, r2
    73d6:	009b      	lsls	r3, r3, #2
    73d8:	440b      	add	r3, r1
    73da:	68db      	ldr	r3, [r3, #12]
    73dc:	2b03      	cmp	r3, #3
    73de:	d162      	bne.n	74a6 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    73e0:	f00c fd58 	bl	13e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    73e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73e8:	095b      	lsrs	r3, r3, #5
    73ea:	b29b      	uxth	r3, r3
    73ec:	461a      	mov	r2, r3
    73ee:	4b36      	ldr	r3, [pc, #216]	; (74c8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    73f4:	6959      	ldr	r1, [r3, #20]
    73f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73fa:	f003 031f 	and.w	r3, r3, #31
    73fe:	2201      	movs	r2, #1
    7400:	fa02 f303 	lsl.w	r3, r2, r3
    7404:	43da      	mvns	r2, r3
    7406:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    740a:	095b      	lsrs	r3, r3, #5
    740c:	b29b      	uxth	r3, r3
    740e:	4618      	mov	r0, r3
    7410:	4b2d      	ldr	r3, [pc, #180]	; (74c8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7412:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7416:	400a      	ands	r2, r1
    7418:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    741a:	f00c fd67 	bl	13eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    741e:	f00c fd8b 	bl	13f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7422:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7426:	095b      	lsrs	r3, r3, #5
    7428:	b29b      	uxth	r3, r3
    742a:	461a      	mov	r2, r3
    742c:	4b26      	ldr	r3, [pc, #152]	; (74c8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    742e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7432:	6999      	ldr	r1, [r3, #24]
    7434:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7438:	f003 031f 	and.w	r3, r3, #31
    743c:	2201      	movs	r2, #1
    743e:	fa02 f303 	lsl.w	r3, r2, r3
    7442:	43da      	mvns	r2, r3
    7444:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7448:	095b      	lsrs	r3, r3, #5
    744a:	b29b      	uxth	r3, r3
    744c:	4618      	mov	r0, r3
    744e:	4b1e      	ldr	r3, [pc, #120]	; (74c8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7450:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7454:	400a      	ands	r2, r1
    7456:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7458:	9b01      	ldr	r3, [sp, #4]
    745a:	68d9      	ldr	r1, [r3, #12]
    745c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7460:	4613      	mov	r3, r2
    7462:	009b      	lsls	r3, r3, #2
    7464:	4413      	add	r3, r2
    7466:	009b      	lsls	r3, r3, #2
    7468:	440b      	add	r3, r1
    746a:	68db      	ldr	r3, [r3, #12]
    746c:	2b03      	cmp	r3, #3
    746e:	d118      	bne.n	74a2 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7470:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7474:	095b      	lsrs	r3, r3, #5
    7476:	b29b      	uxth	r3, r3
    7478:	461a      	mov	r2, r3
    747a:	4b13      	ldr	r3, [pc, #76]	; (74c8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    747c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7480:	6999      	ldr	r1, [r3, #24]
    7482:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7486:	f003 031f 	and.w	r3, r3, #31
    748a:	2201      	movs	r2, #1
    748c:	409a      	lsls	r2, r3
    748e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7492:	095b      	lsrs	r3, r3, #5
    7494:	b29b      	uxth	r3, r3
    7496:	4618      	mov	r0, r3
    7498:	4b0b      	ldr	r3, [pc, #44]	; (74c8 <Port_Ipw_RefreshPortDirection+0x1d4>)
    749a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    749e:	430a      	orrs	r2, r1
    74a0:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    74a2:	f00c fd75 	bl	13f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    74a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74aa:	3301      	adds	r3, #1
    74ac:	f8ad 300e 	strh.w	r3, [sp, #14]
    74b0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    74b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    74b8:	429a      	cmp	r2, r3
    74ba:	f4ff af26 	bcc.w	730a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    74be:	bf00      	nop
    74c0:	bf00      	nop
    74c2:	b005      	add	sp, #20
    74c4:	f85d fb04 	ldr.w	pc, [sp], #4
    74c8:	00016468 	.word	0x00016468

000074cc <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    74cc:	b500      	push	{lr}
    74ce:	b085      	sub	sp, #20
    74d0:	4603      	mov	r3, r0
    74d2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    74d6:	2300      	movs	r3, #0
    74d8:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    74dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    74e0:	4618      	mov	r0, r3
    74e2:	f000 f871 	bl	75c8 <Dio_Ipw_ReadChannel>
    74e6:	4603      	mov	r3, r0
    74e8:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    74ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    74f0:	4618      	mov	r0, r3
    74f2:	b005      	add	sp, #20
    74f4:	f85d fb04 	ldr.w	pc, [sp], #4

000074f8 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    74f8:	b500      	push	{lr}
    74fa:	b083      	sub	sp, #12
    74fc:	4603      	mov	r3, r0
    74fe:	460a      	mov	r2, r1
    7500:	f8ad 3006 	strh.w	r3, [sp, #6]
    7504:	4613      	mov	r3, r2
    7506:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    750a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    750e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7512:	4611      	mov	r1, r2
    7514:	4618      	mov	r0, r3
    7516:	f000 f87d 	bl	7614 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    751a:	bf00      	nop
    751c:	b003      	add	sp, #12
    751e:	f85d fb04 	ldr.w	pc, [sp], #4

00007522 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    7522:	b500      	push	{lr}
    7524:	b085      	sub	sp, #20
    7526:	4603      	mov	r3, r0
    7528:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    752c:	2300      	movs	r3, #0
    752e:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    7532:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7536:	4618      	mov	r0, r3
    7538:	f000 f892 	bl	7660 <Dio_Ipw_FlipChannel>
    753c:	4603      	mov	r3, r0
    753e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    7542:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7546:	4618      	mov	r0, r3
    7548:	b005      	add	sp, #20
    754a:	f85d fb04 	ldr.w	pc, [sp], #4

0000754e <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    754e:	b500      	push	{lr}
    7550:	b085      	sub	sp, #20
    7552:	4603      	mov	r3, r0
    7554:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7558:	2300      	movs	r3, #0
    755a:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    755c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7560:	4618      	mov	r0, r3
    7562:	f000 f8b3 	bl	76cc <Dio_Ipw_ReadPort>
    7566:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    7568:	9b03      	ldr	r3, [sp, #12]
}
    756a:	4618      	mov	r0, r3
    756c:	b005      	add	sp, #20
    756e:	f85d fb04 	ldr.w	pc, [sp], #4

00007572 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    7572:	b500      	push	{lr}
    7574:	b083      	sub	sp, #12
    7576:	4603      	mov	r3, r0
    7578:	9100      	str	r1, [sp, #0]
    757a:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    757e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7582:	9900      	ldr	r1, [sp, #0]
    7584:	4618      	mov	r0, r3
    7586:	f000 f8b9 	bl	76fc <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    758a:	bf00      	nop
    758c:	b003      	add	sp, #12
    758e:	f85d fb04 	ldr.w	pc, [sp], #4

00007592 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    7592:	b500      	push	{lr}
    7594:	b085      	sub	sp, #20
    7596:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7598:	2300      	movs	r3, #0
    759a:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    759c:	9801      	ldr	r0, [sp, #4]
    759e:	f000 f8c5 	bl	772c <Dio_Ipw_ReadChannelGroup>
    75a2:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    75a4:	9b03      	ldr	r3, [sp, #12]
}
    75a6:	4618      	mov	r0, r3
    75a8:	b005      	add	sp, #20
    75aa:	f85d fb04 	ldr.w	pc, [sp], #4

000075ae <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    75ae:	b500      	push	{lr}
    75b0:	b083      	sub	sp, #12
    75b2:	9001      	str	r0, [sp, #4]
    75b4:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    75b6:	9900      	ldr	r1, [sp, #0]
    75b8:	9801      	ldr	r0, [sp, #4]
    75ba:	f000 f8d7 	bl	776c <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    75be:	bf00      	nop
    75c0:	b003      	add	sp, #12
    75c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000075c8 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    75c8:	b500      	push	{lr}
    75ca:	b087      	sub	sp, #28
    75cc:	4603      	mov	r3, r0
    75ce:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    75d2:	2300      	movs	r3, #0
    75d4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    75d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    75dc:	095b      	lsrs	r3, r3, #5
    75de:	b29b      	uxth	r3, r3
    75e0:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    75e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    75e6:	f003 031f 	and.w	r3, r3, #31
    75ea:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    75ec:	4a08      	ldr	r2, [pc, #32]	; (7610 <Dio_Ipw_ReadChannel+0x48>)
    75ee:	9b04      	ldr	r3, [sp, #16]
    75f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75f4:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    75f6:	9903      	ldr	r1, [sp, #12]
    75f8:	9802      	ldr	r0, [sp, #8]
    75fa:	f000 f940 	bl	787e <Gpio_Dio_Ip_ReadPin>
    75fe:	4603      	mov	r3, r0
    7600:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    7604:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7608:	4618      	mov	r0, r3
    760a:	b007      	add	sp, #28
    760c:	f85d fb04 	ldr.w	pc, [sp], #4
    7610:	1fff8b24 	.word	0x1fff8b24

00007614 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    7614:	b500      	push	{lr}
    7616:	b087      	sub	sp, #28
    7618:	4603      	mov	r3, r0
    761a:	460a      	mov	r2, r1
    761c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7620:	4613      	mov	r3, r2
    7622:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    7626:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    762a:	095b      	lsrs	r3, r3, #5
    762c:	b29b      	uxth	r3, r3
    762e:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7630:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7634:	f003 031f 	and.w	r3, r3, #31
    7638:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    763a:	4a08      	ldr	r2, [pc, #32]	; (765c <Dio_Ipw_WriteChannel+0x48>)
    763c:	9b05      	ldr	r3, [sp, #20]
    763e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7642:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    7644:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7648:	461a      	mov	r2, r3
    764a:	9904      	ldr	r1, [sp, #16]
    764c:	9803      	ldr	r0, [sp, #12]
    764e:	f000 f8b7 	bl	77c0 <Gpio_Dio_Ip_WritePin>
}
    7652:	bf00      	nop
    7654:	b007      	add	sp, #28
    7656:	f85d fb04 	ldr.w	pc, [sp], #4
    765a:	bf00      	nop
    765c:	1fff8b24 	.word	0x1fff8b24

00007660 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    7660:	b500      	push	{lr}
    7662:	b089      	sub	sp, #36	; 0x24
    7664:	4603      	mov	r3, r0
    7666:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    766a:	2300      	movs	r3, #0
    766c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    7670:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7674:	095b      	lsrs	r3, r3, #5
    7676:	b29b      	uxth	r3, r3
    7678:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    767a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    767e:	f003 031f 	and.w	r3, r3, #31
    7682:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    7684:	4a10      	ldr	r2, [pc, #64]	; (76c8 <Dio_Ipw_FlipChannel+0x68>)
    7686:	9b06      	ldr	r3, [sp, #24]
    7688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    768c:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    768e:	2201      	movs	r2, #1
    7690:	9b05      	ldr	r3, [sp, #20]
    7692:	fa02 f303 	lsl.w	r3, r2, r3
    7696:	4619      	mov	r1, r3
    7698:	9804      	ldr	r0, [sp, #16]
    769a:	f000 f8dc 	bl	7856 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    769e:	9804      	ldr	r0, [sp, #16]
    76a0:	f000 f8bc 	bl	781c <Gpio_Dio_Ip_GetPinsOutput>
    76a4:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    76a6:	2201      	movs	r2, #1
    76a8:	9b05      	ldr	r3, [sp, #20]
    76aa:	409a      	lsls	r2, r3
    76ac:	9b03      	ldr	r3, [sp, #12]
    76ae:	401a      	ands	r2, r3
    76b0:	9b05      	ldr	r3, [sp, #20]
    76b2:	fa22 f303 	lsr.w	r3, r2, r3
    76b6:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    76ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    76be:	4618      	mov	r0, r3
    76c0:	b009      	add	sp, #36	; 0x24
    76c2:	f85d fb04 	ldr.w	pc, [sp], #4
    76c6:	bf00      	nop
    76c8:	1fff8b24 	.word	0x1fff8b24

000076cc <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    76cc:	b500      	push	{lr}
    76ce:	b085      	sub	sp, #20
    76d0:	4603      	mov	r3, r0
    76d2:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    76d6:	2300      	movs	r3, #0
    76d8:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    76da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76de:	4a06      	ldr	r2, [pc, #24]	; (76f8 <Dio_Ipw_ReadPort+0x2c>)
    76e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76e4:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    76e6:	9802      	ldr	r0, [sp, #8]
    76e8:	f000 f8be 	bl	7868 <Gpio_Dio_Ip_ReadPins>
    76ec:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    76ee:	9b03      	ldr	r3, [sp, #12]
}
    76f0:	4618      	mov	r0, r3
    76f2:	b005      	add	sp, #20
    76f4:	f85d fb04 	ldr.w	pc, [sp], #4
    76f8:	1fff8b24 	.word	0x1fff8b24

000076fc <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    76fc:	b500      	push	{lr}
    76fe:	b085      	sub	sp, #20
    7700:	4603      	mov	r3, r0
    7702:	9100      	str	r1, [sp, #0]
    7704:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    7708:	9b00      	ldr	r3, [sp, #0]
    770a:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    770c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7710:	4a05      	ldr	r2, [pc, #20]	; (7728 <Dio_Ipw_WritePort+0x2c>)
    7712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7716:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    7718:	9903      	ldr	r1, [sp, #12]
    771a:	9802      	ldr	r0, [sp, #8]
    771c:	f000 f875 	bl	780a <Gpio_Dio_Ip_WritePins>
}
    7720:	bf00      	nop
    7722:	b005      	add	sp, #20
    7724:	f85d fb04 	ldr.w	pc, [sp], #4
    7728:	1fff8b24 	.word	0x1fff8b24

0000772c <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    772c:	b500      	push	{lr}
    772e:	b087      	sub	sp, #28
    7730:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7732:	2300      	movs	r3, #0
    7734:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    7736:	9b01      	ldr	r3, [sp, #4]
    7738:	781b      	ldrb	r3, [r3, #0]
    773a:	461a      	mov	r2, r3
    773c:	4b0a      	ldr	r3, [pc, #40]	; (7768 <Dio_Ipw_ReadChannelGroup+0x3c>)
    773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7742:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    7744:	9804      	ldr	r0, [sp, #16]
    7746:	f000 f88f 	bl	7868 <Gpio_Dio_Ip_ReadPins>
    774a:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    774c:	9b01      	ldr	r3, [sp, #4]
    774e:	685a      	ldr	r2, [r3, #4]
    7750:	9b03      	ldr	r3, [sp, #12]
    7752:	4013      	ands	r3, r2
    7754:	9a01      	ldr	r2, [sp, #4]
    7756:	7852      	ldrb	r2, [r2, #1]
    7758:	40d3      	lsrs	r3, r2
    775a:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    775c:	9b05      	ldr	r3, [sp, #20]
}
    775e:	4618      	mov	r0, r3
    7760:	b007      	add	sp, #28
    7762:	f85d fb04 	ldr.w	pc, [sp], #4
    7766:	bf00      	nop
    7768:	1fff8b24 	.word	0x1fff8b24

0000776c <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    776c:	b500      	push	{lr}
    776e:	b087      	sub	sp, #28
    7770:	9001      	str	r0, [sp, #4]
    7772:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    7774:	9b01      	ldr	r3, [sp, #4]
    7776:	781b      	ldrb	r3, [r3, #0]
    7778:	461a      	mov	r2, r3
    777a:	4b10      	ldr	r3, [pc, #64]	; (77bc <Dio_Ipw_WriteChannelGroup+0x50>)
    777c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7780:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    7782:	9b01      	ldr	r3, [sp, #4]
    7784:	785b      	ldrb	r3, [r3, #1]
    7786:	461a      	mov	r2, r3
    7788:	9b00      	ldr	r3, [sp, #0]
    778a:	fa03 f202 	lsl.w	r2, r3, r2
    778e:	9b01      	ldr	r3, [sp, #4]
    7790:	685b      	ldr	r3, [r3, #4]
    7792:	4013      	ands	r3, r2
    7794:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    7796:	9904      	ldr	r1, [sp, #16]
    7798:	9805      	ldr	r0, [sp, #20]
    779a:	f000 f84a 	bl	7832 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    779e:	9b04      	ldr	r3, [sp, #16]
    77a0:	43da      	mvns	r2, r3
    77a2:	9b01      	ldr	r3, [sp, #4]
    77a4:	685b      	ldr	r3, [r3, #4]
    77a6:	4013      	ands	r3, r2
    77a8:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    77aa:	9903      	ldr	r1, [sp, #12]
    77ac:	9805      	ldr	r0, [sp, #20]
    77ae:	f000 f849 	bl	7844 <Gpio_Dio_Ip_ClearPins>

}
    77b2:	bf00      	nop
    77b4:	b007      	add	sp, #28
    77b6:	f85d fb04 	ldr.w	pc, [sp], #4
    77ba:	bf00      	nop
    77bc:	1fff8b24 	.word	0x1fff8b24

000077c0 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    77c0:	b500      	push	{lr}
    77c2:	b087      	sub	sp, #28
    77c4:	9003      	str	r0, [sp, #12]
    77c6:	9102      	str	r1, [sp, #8]
    77c8:	4613      	mov	r3, r2
    77ca:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    77ce:	f00b fbb1 	bl	12f34 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    77d2:	9b03      	ldr	r3, [sp, #12]
    77d4:	681b      	ldr	r3, [r3, #0]
    77d6:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    77d8:	2201      	movs	r2, #1
    77da:	9b02      	ldr	r3, [sp, #8]
    77dc:	fa02 f303 	lsl.w	r3, r2, r3
    77e0:	43db      	mvns	r3, r3
    77e2:	9a05      	ldr	r2, [sp, #20]
    77e4:	4013      	ands	r3, r2
    77e6:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    77e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    77ec:	9b02      	ldr	r3, [sp, #8]
    77ee:	fa02 f303 	lsl.w	r3, r2, r3
    77f2:	9a05      	ldr	r2, [sp, #20]
    77f4:	4313      	orrs	r3, r2
    77f6:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    77f8:	9b03      	ldr	r3, [sp, #12]
    77fa:	9a05      	ldr	r2, [sp, #20]
    77fc:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    77fe:	f00b fbc5 	bl	12f8c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    7802:	bf00      	nop
    7804:	b007      	add	sp, #28
    7806:	f85d fb04 	ldr.w	pc, [sp], #4

0000780a <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    780a:	b082      	sub	sp, #8
    780c:	9001      	str	r0, [sp, #4]
    780e:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    7810:	9b01      	ldr	r3, [sp, #4]
    7812:	9a00      	ldr	r2, [sp, #0]
    7814:	601a      	str	r2, [r3, #0]
}
    7816:	bf00      	nop
    7818:	b002      	add	sp, #8
    781a:	4770      	bx	lr

0000781c <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    781c:	b084      	sub	sp, #16
    781e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7820:	2300      	movs	r3, #0
    7822:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    7824:	9b01      	ldr	r3, [sp, #4]
    7826:	681b      	ldr	r3, [r3, #0]
    7828:	9303      	str	r3, [sp, #12]
    return returnValue;
    782a:	9b03      	ldr	r3, [sp, #12]
}
    782c:	4618      	mov	r0, r3
    782e:	b004      	add	sp, #16
    7830:	4770      	bx	lr

00007832 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7832:	b082      	sub	sp, #8
    7834:	9001      	str	r0, [sp, #4]
    7836:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    7838:	9b01      	ldr	r3, [sp, #4]
    783a:	9a00      	ldr	r2, [sp, #0]
    783c:	605a      	str	r2, [r3, #4]
}
    783e:	bf00      	nop
    7840:	b002      	add	sp, #8
    7842:	4770      	bx	lr

00007844 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7844:	b082      	sub	sp, #8
    7846:	9001      	str	r0, [sp, #4]
    7848:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    784a:	9b01      	ldr	r3, [sp, #4]
    784c:	9a00      	ldr	r2, [sp, #0]
    784e:	609a      	str	r2, [r3, #8]
}
    7850:	bf00      	nop
    7852:	b002      	add	sp, #8
    7854:	4770      	bx	lr

00007856 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7856:	b082      	sub	sp, #8
    7858:	9001      	str	r0, [sp, #4]
    785a:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    785c:	9b01      	ldr	r3, [sp, #4]
    785e:	9a00      	ldr	r2, [sp, #0]
    7860:	60da      	str	r2, [r3, #12]
}
    7862:	bf00      	nop
    7864:	b002      	add	sp, #8
    7866:	4770      	bx	lr

00007868 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    7868:	b084      	sub	sp, #16
    786a:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    786c:	2300      	movs	r3, #0
    786e:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    7870:	9b01      	ldr	r3, [sp, #4]
    7872:	691b      	ldr	r3, [r3, #16]
    7874:	9303      	str	r3, [sp, #12]
    return returnValue;
    7876:	9b03      	ldr	r3, [sp, #12]
}
    7878:	4618      	mov	r0, r3
    787a:	b004      	add	sp, #16
    787c:	4770      	bx	lr

0000787e <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    787e:	b084      	sub	sp, #16
    7880:	9001      	str	r0, [sp, #4]
    7882:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    7884:	2300      	movs	r3, #0
    7886:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    788a:	9b01      	ldr	r3, [sp, #4]
    788c:	691a      	ldr	r2, [r3, #16]
    788e:	2101      	movs	r1, #1
    7890:	9b00      	ldr	r3, [sp, #0]
    7892:	fa01 f303 	lsl.w	r3, r1, r3
    7896:	401a      	ands	r2, r3
    7898:	9b00      	ldr	r3, [sp, #0]
    789a:	fa22 f303 	lsr.w	r3, r2, r3
    789e:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    78a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    78a6:	4618      	mov	r0, r3
    78a8:	b004      	add	sp, #16
    78aa:	4770      	bx	lr

000078ac <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    78ac:	b500      	push	{lr}
    78ae:	b083      	sub	sp, #12
    78b0:	4603      	mov	r3, r0
    78b2:	460a      	mov	r2, r1
    78b4:	f88d 3007 	strb.w	r3, [sp, #7]
    78b8:	4613      	mov	r3, r2
    78ba:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    78be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    78c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    78c6:	2100      	movs	r1, #0
    78c8:	207b      	movs	r0, #123	; 0x7b
    78ca:	f00e f937 	bl	15b3c <Det_ReportRuntimeError>
}
    78ce:	bf00      	nop
    78d0:	b003      	add	sp, #12
    78d2:	f85d fb04 	ldr.w	pc, [sp], #4

000078d6 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    78d6:	b500      	push	{lr}
    78d8:	b085      	sub	sp, #20
    78da:	4603      	mov	r3, r0
    78dc:	460a      	mov	r2, r1
    78de:	f88d 3007 	strb.w	r3, [sp, #7]
    78e2:	4613      	mov	r3, r2
    78e4:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    78e8:	2300      	movs	r3, #0
    78ea:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    78ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78f2:	4a0c      	ldr	r2, [pc, #48]	; (7924 <Adc_ValidateNotBusyNoQueue+0x4e>)
    78f4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    78f8:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    78fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7900:	2b00      	cmp	r3, #0
    7902:	d008      	beq.n	7916 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    7904:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7908:	210b      	movs	r1, #11
    790a:	4618      	mov	r0, r3
    790c:	f7ff ffce 	bl	78ac <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    7910:	2301      	movs	r3, #1
    7912:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    7916:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    791a:	4618      	mov	r0, r3
    791c:	b005      	add	sp, #20
    791e:	f85d fb04 	ldr.w	pc, [sp], #4
    7922:	bf00      	nop
    7924:	1fff8d58 	.word	0x1fff8d58

00007928 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    7928:	b500      	push	{lr}
    792a:	b085      	sub	sp, #20
    792c:	4603      	mov	r3, r0
    792e:	f8ad 3006 	strh.w	r3, [sp, #6]
    7932:	460b      	mov	r3, r1
    7934:	f88d 3005 	strb.w	r3, [sp, #5]
    7938:	4613      	mov	r3, r2
    793a:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    793e:	2301      	movs	r3, #1
    7940:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    7944:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7948:	4917      	ldr	r1, [pc, #92]	; (79a8 <Adc_ValidateNotBusyNoPrio+0x80>)
    794a:	4613      	mov	r3, r2
    794c:	009b      	lsls	r3, r3, #2
    794e:	4413      	add	r3, r2
    7950:	009b      	lsls	r3, r3, #2
    7952:	440b      	add	r3, r1
    7954:	681b      	ldr	r3, [r3, #0]
    7956:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    7958:	f89d 3005 	ldrb.w	r3, [sp, #5]
    795c:	f083 0301 	eor.w	r3, r3, #1
    7960:	b2db      	uxtb	r3, r3
    7962:	2b00      	cmp	r3, #0
    7964:	d007      	beq.n	7976 <Adc_ValidateNotBusyNoPrio+0x4e>
    7966:	9b02      	ldr	r3, [sp, #8]
    7968:	2b00      	cmp	r3, #0
    796a:	d004      	beq.n	7976 <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    796c:	210b      	movs	r1, #11
    796e:	2002      	movs	r0, #2
    7970:	f7ff ff9c 	bl	78ac <Adc_ReportDetRuntimeError>
    7974:	e011      	b.n	799a <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    7976:	f89d 3005 	ldrb.w	r3, [sp, #5]
    797a:	2b00      	cmp	r3, #0
    797c:	d00a      	beq.n	7994 <Adc_ValidateNotBusyNoPrio+0x6c>
    797e:	9b02      	ldr	r3, [sp, #8]
    7980:	2b00      	cmp	r3, #0
    7982:	d007      	beq.n	7994 <Adc_ValidateNotBusyNoPrio+0x6c>
    7984:	9b02      	ldr	r3, [sp, #8]
    7986:	2b03      	cmp	r3, #3
    7988:	d004      	beq.n	7994 <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    798a:	210b      	movs	r1, #11
    798c:	2002      	movs	r0, #2
    798e:	f7ff ff8d 	bl	78ac <Adc_ReportDetRuntimeError>
    7992:	e002      	b.n	799a <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    7994:	2300      	movs	r3, #0
    7996:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    799a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    799e:	4618      	mov	r0, r3
    79a0:	b005      	add	sp, #20
    79a2:	f85d fb04 	ldr.w	pc, [sp], #4
    79a6:	bf00      	nop
    79a8:	1fff8d30 	.word	0x1fff8d30

000079ac <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    79ac:	b500      	push	{lr}
    79ae:	b087      	sub	sp, #28
    79b0:	4603      	mov	r3, r0
    79b2:	460a      	mov	r2, r1
    79b4:	f88d 3007 	strb.w	r3, [sp, #7]
    79b8:	4613      	mov	r3, r2
    79ba:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    79be:	2300      	movs	r3, #0
    79c0:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    79c4:	2300      	movs	r3, #0
    79c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    79ca:	e02c      	b.n	7a26 <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    79cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    79d0:	4a1d      	ldr	r2, [pc, #116]	; (7a48 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    79d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79d6:	685a      	ldr	r2, [r3, #4]
    79d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    79dc:	2134      	movs	r1, #52	; 0x34
    79de:	fb01 f303 	mul.w	r3, r1, r3
    79e2:	4413      	add	r3, r2
    79e4:	881b      	ldrh	r3, [r3, #0]
    79e6:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    79ea:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    79ee:	4917      	ldr	r1, [pc, #92]	; (7a4c <Adc_ValidateCheckGroupNotConversion+0xa0>)
    79f0:	4613      	mov	r3, r2
    79f2:	009b      	lsls	r3, r3, #2
    79f4:	4413      	add	r3, r2
    79f6:	009b      	lsls	r3, r3, #2
    79f8:	440b      	add	r3, r1
    79fa:	681b      	ldr	r3, [r3, #0]
    79fc:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    79fe:	9b03      	ldr	r3, [sp, #12]
    7a00:	2b00      	cmp	r3, #0
    7a02:	d00b      	beq.n	7a1c <Adc_ValidateCheckGroupNotConversion+0x70>
    7a04:	9b03      	ldr	r3, [sp, #12]
    7a06:	2b03      	cmp	r3, #3
    7a08:	d008      	beq.n	7a1c <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    7a0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a0e:	210b      	movs	r1, #11
    7a10:	4618      	mov	r0, r3
    7a12:	f7ff ff4b 	bl	78ac <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    7a16:	2301      	movs	r3, #1
    7a18:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    7a1c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7a20:	3301      	adds	r3, #1
    7a22:	f8ad 3016 	strh.w	r3, [sp, #22]
    7a26:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a2a:	4a07      	ldr	r2, [pc, #28]	; (7a48 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    7a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a30:	891b      	ldrh	r3, [r3, #8]
    7a32:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7a36:	429a      	cmp	r2, r3
    7a38:	d3c8      	bcc.n	79cc <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    7a3a:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    7a3e:	4618      	mov	r0, r3
    7a40:	b007      	add	sp, #28
    7a42:	f85d fb04 	ldr.w	pc, [sp], #4
    7a46:	bf00      	nop
    7a48:	1fff8d2c 	.word	0x1fff8d2c
    7a4c:	1fff8d30 	.word	0x1fff8d30

00007a50 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    7a50:	b500      	push	{lr}
    7a52:	b085      	sub	sp, #20
    7a54:	4603      	mov	r3, r0
    7a56:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    7a5a:	2300      	movs	r3, #0
    7a5c:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7a60:	2301      	movs	r3, #1
    7a62:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7a66:	2300      	movs	r3, #0
    7a68:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7a6c:	2300      	movs	r3, #0
    7a6e:	f88d 300d 	strb.w	r3, [sp, #13]
    7a72:	e01d      	b.n	7ab0 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7a74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a78:	4a1b      	ldr	r2, [pc, #108]	; (7ae8 <Adc_ValidateDeInitNotBusy+0x98>)
    7a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a7e:	681a      	ldr	r2, [r3, #0]
    7a80:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7a84:	4413      	add	r3, r2
    7a86:	7f9b      	ldrb	r3, [r3, #30]
    7a88:	2b01      	cmp	r3, #1
    7a8a:	d10c      	bne.n	7aa6 <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    7a8c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7a90:	2101      	movs	r1, #1
    7a92:	4618      	mov	r0, r3
    7a94:	f7ff ff1f 	bl	78d6 <Adc_ValidateNotBusyNoQueue>
    7a98:	4603      	mov	r3, r0
    7a9a:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    7a9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7aa2:	2b01      	cmp	r3, #1
    7aa4:	d009      	beq.n	7aba <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7aa6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7aaa:	3301      	adds	r3, #1
    7aac:	f88d 300d 	strb.w	r3, [sp, #13]
    7ab0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7ab4:	2b01      	cmp	r3, #1
    7ab6:	d9dd      	bls.n	7a74 <Adc_ValidateDeInitNotBusy+0x24>
    7ab8:	e000      	b.n	7abc <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    7aba:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    7abc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ac0:	2b00      	cmp	r3, #0
    7ac2:	d10b      	bne.n	7adc <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    7ac4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ac8:	4619      	mov	r1, r3
    7aca:	2001      	movs	r0, #1
    7acc:	f7ff ff6e 	bl	79ac <Adc_ValidateCheckGroupNotConversion>
    7ad0:	4603      	mov	r3, r0
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d102      	bne.n	7adc <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    7ad6:	2300      	movs	r3, #0
    7ad8:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    7adc:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7ae0:	4618      	mov	r0, r3
    7ae2:	b005      	add	sp, #20
    7ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    7ae8:	1fff8d2c 	.word	0x1fff8d2c

00007aec <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    7aec:	b500      	push	{lr}
    7aee:	b085      	sub	sp, #20
    7af0:	4603      	mov	r3, r0
    7af2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7af6:	2301      	movs	r3, #1
    7af8:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    7afc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b00:	490b      	ldr	r1, [pc, #44]	; (7b30 <Adc_ValidateSetupBufferNotBusy+0x44>)
    7b02:	4613      	mov	r3, r2
    7b04:	009b      	lsls	r3, r3, #2
    7b06:	4413      	add	r3, r2
    7b08:	009b      	lsls	r3, r3, #2
    7b0a:	440b      	add	r3, r1
    7b0c:	681b      	ldr	r3, [r3, #0]
    7b0e:	2b00      	cmp	r3, #0
    7b10:	d004      	beq.n	7b1c <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    7b12:	210b      	movs	r1, #11
    7b14:	200c      	movs	r0, #12
    7b16:	f7ff fec9 	bl	78ac <Adc_ReportDetRuntimeError>
    7b1a:	e002      	b.n	7b22 <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    7b1c:	2300      	movs	r3, #0
    7b1e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    7b22:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7b26:	4618      	mov	r0, r3
    7b28:	b005      	add	sp, #20
    7b2a:	f85d fb04 	ldr.w	pc, [sp], #4
    7b2e:	bf00      	nop
    7b30:	1fff8d30 	.word	0x1fff8d30

00007b34 <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    7b34:	b500      	push	{lr}
    7b36:	b085      	sub	sp, #20
    7b38:	4603      	mov	r3, r0
    7b3a:	460a      	mov	r2, r1
    7b3c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7b40:	4613      	mov	r3, r2
    7b42:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    7b46:	2300      	movs	r3, #0
    7b48:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    7b4c:	2300      	movs	r3, #0
    7b4e:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7b52:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b56:	4a32      	ldr	r2, [pc, #200]	; (7c20 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b5c:	68da      	ldr	r2, [r3, #12]
    7b5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b62:	005b      	lsls	r3, r3, #1
    7b64:	4413      	add	r3, r2
    7b66:	881b      	ldrh	r3, [r3, #0]
    7b68:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7b6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b70:	4a2b      	ldr	r2, [pc, #172]	; (7c20 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b76:	685a      	ldr	r2, [r3, #4]
    7b78:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7b7c:	2134      	movs	r1, #52	; 0x34
    7b7e:	fb01 f303 	mul.w	r3, r1, r3
    7b82:	4413      	add	r3, r2
    7b84:	689b      	ldr	r3, [r3, #8]
    7b86:	2b00      	cmp	r3, #0
    7b88:	d02c      	beq.n	7be4 <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7b8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b8e:	4a24      	ldr	r2, [pc, #144]	; (7c20 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b94:	685a      	ldr	r2, [r3, #4]
    7b96:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7b9a:	2134      	movs	r1, #52	; 0x34
    7b9c:	fb01 f303 	mul.w	r3, r1, r3
    7ba0:	4413      	add	r3, r2
    7ba2:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7ba4:	2b01      	cmp	r3, #1
    7ba6:	d120      	bne.n	7bea <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7ba8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bac:	4a1c      	ldr	r2, [pc, #112]	; (7c20 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bb2:	685a      	ldr	r2, [r3, #4]
    7bb4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7bb8:	2134      	movs	r1, #52	; 0x34
    7bba:	fb01 f303 	mul.w	r3, r1, r3
    7bbe:	4413      	add	r3, r2
    7bc0:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7bc2:	2b01      	cmp	r3, #1
    7bc4:	d111      	bne.n	7bea <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    7bc6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bca:	4a15      	ldr	r2, [pc, #84]	; (7c20 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bd0:	685a      	ldr	r2, [r3, #4]
    7bd2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7bd6:	2134      	movs	r1, #52	; 0x34
    7bd8:	fb01 f303 	mul.w	r3, r1, r3
    7bdc:	4413      	add	r3, r2
    7bde:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7be0:	2b00      	cmp	r3, #0
    7be2:	d102      	bne.n	7bea <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    7be4:	2301      	movs	r3, #1
    7be6:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    7bea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7bee:	2b01      	cmp	r3, #1
    7bf0:	d104      	bne.n	7bfc <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    7bf2:	210b      	movs	r1, #11
    7bf4:	2002      	movs	r0, #2
    7bf6:	f7ff fe59 	bl	78ac <Adc_ReportDetRuntimeError>
    7bfa:	e00b      	b.n	7c14 <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    7bfc:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7c00:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7c04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c08:	4618      	mov	r0, r3
    7c0a:	f7ff fe8d 	bl	7928 <Adc_ValidateNotBusyNoPrio>
    7c0e:	4603      	mov	r3, r0
    7c10:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    7c14:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7c18:	4618      	mov	r0, r3
    7c1a:	b005      	add	sp, #20
    7c1c:	f85d fb04 	ldr.w	pc, [sp], #4
    7c20:	1fff8d2c 	.word	0x1fff8d2c

00007c24 <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    7c24:	b500      	push	{lr}
    7c26:	b085      	sub	sp, #20
    7c28:	4603      	mov	r3, r0
    7c2a:	f88d 3007 	strb.w	r3, [sp, #7]
    7c2e:	460b      	mov	r3, r1
    7c30:	f8ad 3004 	strh.w	r3, [sp, #4]
    7c34:	4613      	mov	r3, r2
    7c36:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    7c3a:	2300      	movs	r3, #0
    7c3c:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    7c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c44:	2b0b      	cmp	r3, #11
    7c46:	d03b      	beq.n	7cc0 <Adc_ValidateStateNotIdle+0x9c>
    7c48:	2b0b      	cmp	r3, #11
    7c4a:	dc4e      	bgt.n	7cea <Adc_ValidateStateNotIdle+0xc6>
    7c4c:	2b03      	cmp	r3, #3
    7c4e:	d022      	beq.n	7c96 <Adc_ValidateStateNotIdle+0x72>
    7c50:	2b04      	cmp	r3, #4
    7c52:	d14a      	bne.n	7cea <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7c54:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7c58:	492a      	ldr	r1, [pc, #168]	; (7d04 <Adc_ValidateStateNotIdle+0xe0>)
    7c5a:	4613      	mov	r3, r2
    7c5c:	009b      	lsls	r3, r3, #2
    7c5e:	4413      	add	r3, r2
    7c60:	009b      	lsls	r3, r3, #2
    7c62:	440b      	add	r3, r1
    7c64:	681b      	ldr	r3, [r3, #0]
    7c66:	2b00      	cmp	r3, #0
    7c68:	d141      	bne.n	7cee <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    7c6a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7c6e:	4925      	ldr	r1, [pc, #148]	; (7d04 <Adc_ValidateStateNotIdle+0xe0>)
    7c70:	4613      	mov	r3, r2
    7c72:	009b      	lsls	r3, r3, #2
    7c74:	4413      	add	r3, r2
    7c76:	009b      	lsls	r3, r3, #2
    7c78:	440b      	add	r3, r1
    7c7a:	3304      	adds	r3, #4
    7c7c:	681b      	ldr	r3, [r3, #0]
    7c7e:	2b00      	cmp	r3, #0
    7c80:	d135      	bne.n	7cee <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7c82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c86:	210c      	movs	r1, #12
    7c88:	4618      	mov	r0, r3
    7c8a:	f7ff fe0f 	bl	78ac <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    7c8e:	2301      	movs	r3, #1
    7c90:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    7c94:	e02b      	b.n	7cee <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7c96:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7c9a:	491a      	ldr	r1, [pc, #104]	; (7d04 <Adc_ValidateStateNotIdle+0xe0>)
    7c9c:	4613      	mov	r3, r2
    7c9e:	009b      	lsls	r3, r3, #2
    7ca0:	4413      	add	r3, r2
    7ca2:	009b      	lsls	r3, r3, #2
    7ca4:	440b      	add	r3, r1
    7ca6:	681b      	ldr	r3, [r3, #0]
    7ca8:	2b00      	cmp	r3, #0
    7caa:	d122      	bne.n	7cf2 <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cb0:	210c      	movs	r1, #12
    7cb2:	4618      	mov	r0, r3
    7cb4:	f7ff fdfa 	bl	78ac <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    7cb8:	2301      	movs	r3, #1
    7cba:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    7cbe:	e018      	b.n	7cf2 <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7cc0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7cc4:	490f      	ldr	r1, [pc, #60]	; (7d04 <Adc_ValidateStateNotIdle+0xe0>)
    7cc6:	4613      	mov	r3, r2
    7cc8:	009b      	lsls	r3, r3, #2
    7cca:	4413      	add	r3, r2
    7ccc:	009b      	lsls	r3, r3, #2
    7cce:	440b      	add	r3, r1
    7cd0:	681b      	ldr	r3, [r3, #0]
    7cd2:	2b00      	cmp	r3, #0
    7cd4:	d10f      	bne.n	7cf6 <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7cd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cda:	210c      	movs	r1, #12
    7cdc:	4618      	mov	r0, r3
    7cde:	f7ff fde5 	bl	78ac <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    7ce2:	2301      	movs	r3, #1
    7ce4:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    7ce8:	e005      	b.n	7cf6 <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    7cea:	bf00      	nop
    7cec:	e004      	b.n	7cf8 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7cee:	bf00      	nop
    7cf0:	e002      	b.n	7cf8 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7cf2:	bf00      	nop
    7cf4:	e000      	b.n	7cf8 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7cf6:	bf00      	nop
        }
    }

    return ValidState;
    7cf8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7cfc:	4618      	mov	r0, r3
    7cfe:	b005      	add	sp, #20
    7d00:	f85d fb04 	ldr.w	pc, [sp], #4
    7d04:	1fff8d30 	.word	0x1fff8d30

00007d08 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    7d08:	b084      	sub	sp, #16
    7d0a:	4603      	mov	r3, r0
    7d0c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    7d10:	2300      	movs	r3, #0
    7d12:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    7d16:	2300      	movs	r3, #0
    7d18:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    7d1c:	2300      	movs	r3, #0
    7d1e:	f8ad 300e 	strh.w	r3, [sp, #14]
    7d22:	e049      	b.n	7db8 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    7d24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d28:	4a2a      	ldr	r2, [pc, #168]	; (7dd4 <Adc_InitGroupsStatus+0xcc>)
    7d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d2e:	685a      	ldr	r2, [r3, #4]
    7d30:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7d34:	2134      	movs	r1, #52	; 0x34
    7d36:	fb01 f303 	mul.w	r3, r1, r3
    7d3a:	4413      	add	r3, r2
    7d3c:	881b      	ldrh	r3, [r3, #0]
    7d3e:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    7d42:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7d46:	4924      	ldr	r1, [pc, #144]	; (7dd8 <Adc_InitGroupsStatus+0xd0>)
    7d48:	4613      	mov	r3, r2
    7d4a:	009b      	lsls	r3, r3, #2
    7d4c:	4413      	add	r3, r2
    7d4e:	009b      	lsls	r3, r3, #2
    7d50:	440b      	add	r3, r1
    7d52:	2200      	movs	r2, #0
    7d54:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    7d56:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7d5a:	491f      	ldr	r1, [pc, #124]	; (7dd8 <Adc_InitGroupsStatus+0xd0>)
    7d5c:	4613      	mov	r3, r2
    7d5e:	009b      	lsls	r3, r3, #2
    7d60:	4413      	add	r3, r2
    7d62:	009b      	lsls	r3, r3, #2
    7d64:	440b      	add	r3, r1
    7d66:	3304      	adds	r3, #4
    7d68:	2200      	movs	r2, #0
    7d6a:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    7d6c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7d70:	4919      	ldr	r1, [pc, #100]	; (7dd8 <Adc_InitGroupsStatus+0xd0>)
    7d72:	4613      	mov	r3, r2
    7d74:	009b      	lsls	r3, r3, #2
    7d76:	4413      	add	r3, r2
    7d78:	009b      	lsls	r3, r3, #2
    7d7a:	440b      	add	r3, r1
    7d7c:	3308      	adds	r3, #8
    7d7e:	2200      	movs	r2, #0
    7d80:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    7d82:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7d86:	4914      	ldr	r1, [pc, #80]	; (7dd8 <Adc_InitGroupsStatus+0xd0>)
    7d88:	4613      	mov	r3, r2
    7d8a:	009b      	lsls	r3, r3, #2
    7d8c:	4413      	add	r3, r2
    7d8e:	009b      	lsls	r3, r3, #2
    7d90:	440b      	add	r3, r1
    7d92:	330c      	adds	r3, #12
    7d94:	2200      	movs	r2, #0
    7d96:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    7d98:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7d9c:	490e      	ldr	r1, [pc, #56]	; (7dd8 <Adc_InitGroupsStatus+0xd0>)
    7d9e:	4613      	mov	r3, r2
    7da0:	009b      	lsls	r3, r3, #2
    7da2:	4413      	add	r3, r2
    7da4:	009b      	lsls	r3, r3, #2
    7da6:	440b      	add	r3, r1
    7da8:	3310      	adds	r3, #16
    7daa:	2200      	movs	r2, #0
    7dac:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    7dae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7db2:	3301      	adds	r3, #1
    7db4:	f8ad 300e 	strh.w	r3, [sp, #14]
    7db8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7dbc:	4a05      	ldr	r2, [pc, #20]	; (7dd4 <Adc_InitGroupsStatus+0xcc>)
    7dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dc2:	891b      	ldrh	r3, [r3, #8]
    7dc4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7dc8:	429a      	cmp	r2, r3
    7dca:	d3ab      	bcc.n	7d24 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    7dcc:	bf00      	nop
    7dce:	bf00      	nop
    7dd0:	b004      	add	sp, #16
    7dd2:	4770      	bx	lr
    7dd4:	1fff8d2c 	.word	0x1fff8d2c
    7dd8:	1fff8d30 	.word	0x1fff8d30

00007ddc <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    7ddc:	b084      	sub	sp, #16
    7dde:	4603      	mov	r3, r0
    7de0:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7de4:	2300      	movs	r3, #0
    7de6:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    7dea:	2300      	movs	r3, #0
    7dec:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7df0:	2300      	movs	r3, #0
    7df2:	f88d 300f 	strb.w	r3, [sp, #15]
    7df6:	e035      	b.n	7e64 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7df8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7dfc:	4a1d      	ldr	r2, [pc, #116]	; (7e74 <Adc_InitUnitStatus+0x98>)
    7dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e02:	681a      	ldr	r2, [r3, #0]
    7e04:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e08:	4413      	add	r3, r2
    7e0a:	7f9b      	ldrb	r3, [r3, #30]
    7e0c:	2b01      	cmp	r3, #1
    7e0e:	d124      	bne.n	7e5a <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    7e10:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e14:	4a18      	ldr	r2, [pc, #96]	; (7e78 <Adc_InitUnitStatus+0x9c>)
    7e16:	2100      	movs	r1, #0
    7e18:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7e1c:	2300      	movs	r3, #0
    7e1e:	f8ad 300c 	strh.w	r3, [sp, #12]
    7e22:	e00f      	b.n	7e44 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    7e24:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7e28:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e2c:	4912      	ldr	r1, [pc, #72]	; (7e78 <Adc_InitUnitStatus+0x9c>)
    7e2e:	0092      	lsls	r2, r2, #2
    7e30:	4413      	add	r3, r2
    7e32:	005b      	lsls	r3, r3, #1
    7e34:	440b      	add	r3, r1
    7e36:	2200      	movs	r2, #0
    7e38:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7e3a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e3e:	3301      	adds	r3, #1
    7e40:	f8ad 300c 	strh.w	r3, [sp, #12]
    7e44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e48:	2b01      	cmp	r3, #1
    7e4a:	d9eb      	bls.n	7e24 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7e4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e50:	4a09      	ldr	r2, [pc, #36]	; (7e78 <Adc_InitUnitStatus+0x9c>)
    7e52:	00db      	lsls	r3, r3, #3
    7e54:	4413      	add	r3, r2
    7e56:	2200      	movs	r2, #0
    7e58:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7e5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e5e:	3301      	adds	r3, #1
    7e60:	f88d 300f 	strb.w	r3, [sp, #15]
    7e64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e68:	2b01      	cmp	r3, #1
    7e6a:	d9c5      	bls.n	7df8 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    7e6c:	bf00      	nop
    7e6e:	bf00      	nop
    7e70:	b004      	add	sp, #16
    7e72:	4770      	bx	lr
    7e74:	1fff8d2c 	.word	0x1fff8d2c
    7e78:	1fff8d58 	.word	0x1fff8d58

00007e7c <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    7e7c:	b084      	sub	sp, #16
    7e7e:	9001      	str	r0, [sp, #4]
    7e80:	460b      	mov	r3, r1
    7e82:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    7e86:	2300      	movs	r3, #0
    7e88:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    7e8c:	2301      	movs	r3, #1
    7e8e:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    7e92:	9b01      	ldr	r3, [sp, #4]
    7e94:	7c1b      	ldrb	r3, [r3, #16]
    7e96:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7e9a:	429a      	cmp	r2, r3
    7e9c:	d11c      	bne.n	7ed8 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    7e9e:	2300      	movs	r3, #0
    7ea0:	f88d 300f 	strb.w	r3, [sp, #15]
    7ea4:	e012      	b.n	7ecc <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    7ea6:	9b01      	ldr	r3, [sp, #4]
    7ea8:	695a      	ldr	r2, [r3, #20]
    7eaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7eae:	4413      	add	r3, r2
    7eb0:	781b      	ldrb	r3, [r3, #0]
    7eb2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7eb6:	429a      	cmp	r2, r3
    7eb8:	d103      	bne.n	7ec2 <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    7eba:	2300      	movs	r3, #0
    7ebc:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    7ec0:	e00a      	b.n	7ed8 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    7ec2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ec6:	3301      	adds	r3, #1
    7ec8:	f88d 300f 	strb.w	r3, [sp, #15]
    7ecc:	9b01      	ldr	r3, [sp, #4]
    7ece:	7e1b      	ldrb	r3, [r3, #24]
    7ed0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7ed4:	429a      	cmp	r2, r3
    7ed6:	d3e6      	bcc.n	7ea6 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    7ed8:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7edc:	4618      	mov	r0, r3
    7ede:	b004      	add	sp, #16
    7ee0:	4770      	bx	lr

00007ee2 <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    7ee2:	b500      	push	{lr}
    7ee4:	b085      	sub	sp, #20
    7ee6:	4603      	mov	r3, r0
    7ee8:	f8ad 3006 	strh.w	r3, [sp, #6]
    7eec:	460b      	mov	r3, r1
    7eee:	f88d 3005 	strb.w	r3, [sp, #5]
    7ef2:	4613      	mov	r3, r2
    7ef4:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    7ef8:	2300      	movs	r3, #0
    7efa:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7efe:	2300      	movs	r3, #0
    7f00:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7f04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f08:	493e      	ldr	r1, [pc, #248]	; (8004 <Adc_UpdateStatusStartConversion+0x122>)
    7f0a:	4613      	mov	r3, r2
    7f0c:	009b      	lsls	r3, r3, #2
    7f0e:	4413      	add	r3, r2
    7f10:	009b      	lsls	r3, r3, #2
    7f12:	440b      	add	r3, r1
    7f14:	2201      	movs	r2, #1
    7f16:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    7f18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f1c:	4939      	ldr	r1, [pc, #228]	; (8004 <Adc_UpdateStatusStartConversion+0x122>)
    7f1e:	4613      	mov	r3, r2
    7f20:	009b      	lsls	r3, r3, #2
    7f22:	4413      	add	r3, r2
    7f24:	009b      	lsls	r3, r3, #2
    7f26:	440b      	add	r3, r1
    7f28:	3308      	adds	r3, #8
    7f2a:	2200      	movs	r2, #0
    7f2c:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7f2e:	f007 f8ef 	bl	f110 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7f32:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7f36:	4a34      	ldr	r2, [pc, #208]	; (8008 <Adc_UpdateStatusStartConversion+0x126>)
    7f38:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7f3c:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    7f40:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7f44:	2b00      	cmp	r3, #0
    7f46:	d016      	beq.n	7f76 <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    7f48:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7f4c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7f50:	492d      	ldr	r1, [pc, #180]	; (8008 <Adc_UpdateStatusStartConversion+0x126>)
    7f52:	0092      	lsls	r2, r2, #2
    7f54:	4413      	add	r3, r2
    7f56:	005b      	lsls	r3, r3, #1
    7f58:	440b      	add	r3, r1
    7f5a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f5e:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    7f60:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7f64:	4a28      	ldr	r2, [pc, #160]	; (8008 <Adc_UpdateStatusStartConversion+0x126>)
    7f66:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7f6a:	b292      	uxth	r2, r2
    7f6c:	3201      	adds	r2, #1
    7f6e:	b291      	uxth	r1, r2
    7f70:	4a25      	ldr	r2, [pc, #148]	; (8008 <Adc_UpdateStatusStartConversion+0x126>)
    7f72:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7f76:	f007 f8f7 	bl	f168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7f7a:	f007 f8c9 	bl	f110 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7f7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7f82:	4a21      	ldr	r2, [pc, #132]	; (8008 <Adc_UpdateStatusStartConversion+0x126>)
    7f84:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7f88:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    7f8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7f90:	4a1d      	ldr	r2, [pc, #116]	; (8008 <Adc_UpdateStatusStartConversion+0x126>)
    7f92:	00db      	lsls	r3, r3, #3
    7f94:	4413      	add	r3, r2
    7f96:	885b      	ldrh	r3, [r3, #2]
    7f98:	b29b      	uxth	r3, r3
    7f9a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f9e:	429a      	cmp	r2, r3
    7fa0:	d003      	beq.n	7faa <Adc_UpdateStatusStartConversion+0xc8>
    7fa2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fa6:	2b00      	cmp	r3, #0
    7fa8:	d125      	bne.n	7ff6 <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    7faa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fae:	4a16      	ldr	r2, [pc, #88]	; (8008 <Adc_UpdateStatusStartConversion+0x126>)
    7fb0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7fb4:	b29b      	uxth	r3, r3
    7fb6:	2b00      	cmp	r3, #0
    7fb8:	d112      	bne.n	7fe0 <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    7fba:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fbe:	4a12      	ldr	r2, [pc, #72]	; (8008 <Adc_UpdateStatusStartConversion+0x126>)
    7fc0:	00db      	lsls	r3, r3, #3
    7fc2:	4413      	add	r3, r2
    7fc4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7fc8:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    7fca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fce:	4a0e      	ldr	r2, [pc, #56]	; (8008 <Adc_UpdateStatusStartConversion+0x126>)
    7fd0:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7fd4:	b292      	uxth	r2, r2
    7fd6:	3201      	adds	r2, #1
    7fd8:	b291      	uxth	r1, r2
    7fda:	4a0b      	ldr	r2, [pc, #44]	; (8008 <Adc_UpdateStatusStartConversion+0x126>)
    7fdc:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7fe0:	f007 f8c2 	bl	f168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    7fe4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7fe8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fec:	4611      	mov	r1, r2
    7fee:	4618      	mov	r0, r3
    7ff0:	f002 fbf2 	bl	a7d8 <Adc_Ipw_StartNormalConversion>
    7ff4:	e002      	b.n	7ffc <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7ff6:	f007 f8b7 	bl	f168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    7ffa:	bf00      	nop
    7ffc:	bf00      	nop
    7ffe:	b005      	add	sp, #20
    8000:	f85d fb04 	ldr.w	pc, [sp], #4
    8004:	1fff8d30 	.word	0x1fff8d30
    8008:	1fff8d58 	.word	0x1fff8d58

0000800c <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    800c:	b500      	push	{lr}
    800e:	b085      	sub	sp, #20
    8010:	9001      	str	r0, [sp, #4]
    8012:	4608      	mov	r0, r1
    8014:	4611      	mov	r1, r2
    8016:	461a      	mov	r2, r3
    8018:	4603      	mov	r3, r0
    801a:	f8ad 3002 	strh.w	r3, [sp, #2]
    801e:	460b      	mov	r3, r1
    8020:	f88d 3001 	strb.w	r3, [sp, #1]
    8024:	4613      	mov	r3, r2
    8026:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    802a:	2300      	movs	r3, #0
    802c:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    8030:	f89d 3001 	ldrb.w	r3, [sp, #1]
    8034:	4a26      	ldr	r2, [pc, #152]	; (80d0 <Adc_StopSwGroupConversion+0xc4>)
    8036:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    803a:	b29a      	uxth	r2, r3
    803c:	9b01      	ldr	r3, [sp, #4]
    803e:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8040:	f89d 3001 	ldrb.w	r3, [sp, #1]
    8044:	4a22      	ldr	r2, [pc, #136]	; (80d0 <Adc_StopSwGroupConversion+0xc4>)
    8046:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    804a:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    804e:	2300      	movs	r3, #0
    8050:	f8ad 300c 	strh.w	r3, [sp, #12]
    8054:	e02f      	b.n	80b6 <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    8056:	f89d 2001 	ldrb.w	r2, [sp, #1]
    805a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    805e:	491c      	ldr	r1, [pc, #112]	; (80d0 <Adc_StopSwGroupConversion+0xc4>)
    8060:	0092      	lsls	r2, r2, #2
    8062:	4413      	add	r3, r2
    8064:	005b      	lsls	r3, r3, #1
    8066:	440b      	add	r3, r1
    8068:	885b      	ldrh	r3, [r3, #2]
    806a:	b29b      	uxth	r3, r3
    806c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    8070:	429a      	cmp	r2, r3
    8072:	d11b      	bne.n	80ac <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    8074:	9b01      	ldr	r3, [sp, #4]
    8076:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    807a:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    807c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8080:	2b00      	cmp	r3, #0
    8082:	d10b      	bne.n	809c <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    8084:	f89d 2000 	ldrb.w	r2, [sp]
    8088:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    808c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    8090:	4618      	mov	r0, r3
    8092:	f002 fc4b 	bl	a92c <Adc_Ipw_StopCurrentConversion>
    8096:	4603      	mov	r3, r0
    8098:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    809c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    80a0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    80a4:	4611      	mov	r1, r2
    80a6:	4618      	mov	r0, r3
    80a8:	f001 fd88 	bl	9bbc <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    80ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    80b0:	3301      	adds	r3, #1
    80b2:	f8ad 300c 	strh.w	r3, [sp, #12]
    80b6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    80ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    80be:	429a      	cmp	r2, r3
    80c0:	d3c9      	bcc.n	8056 <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    80c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    80c6:	4618      	mov	r0, r3
    80c8:	b005      	add	sp, #20
    80ca:	f85d fb04 	ldr.w	pc, [sp], #4
    80ce:	bf00      	nop
    80d0:	1fff8d58 	.word	0x1fff8d58

000080d4 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    80d4:	b500      	push	{lr}
    80d6:	b089      	sub	sp, #36	; 0x24
    80d8:	4603      	mov	r3, r0
    80da:	f8ad 3006 	strh.w	r3, [sp, #6]
    80de:	460b      	mov	r3, r1
    80e0:	f88d 3005 	strb.w	r3, [sp, #5]
    80e4:	4613      	mov	r3, r2
    80e6:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    80ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
    80ee:	4a4f      	ldr	r2, [pc, #316]	; (822c <Adc_UpdateStatusStopConversion+0x158>)
    80f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80f4:	68da      	ldr	r2, [r3, #12]
    80f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    80fa:	005b      	lsls	r3, r3, #1
    80fc:	4413      	add	r3, r2
    80fe:	881b      	ldrh	r3, [r3, #0]
    8100:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    8104:	2300      	movs	r3, #0
    8106:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    810a:	2300      	movs	r3, #0
    810c:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    8110:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8114:	4a45      	ldr	r2, [pc, #276]	; (822c <Adc_UpdateStatusStopConversion+0x158>)
    8116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    811a:	685a      	ldr	r2, [r3, #4]
    811c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8120:	2134      	movs	r1, #52	; 0x34
    8122:	fb01 f303 	mul.w	r3, r1, r3
    8126:	4413      	add	r3, r2
    8128:	689b      	ldr	r3, [r3, #8]
    812a:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    812c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8130:	4a3e      	ldr	r2, [pc, #248]	; (822c <Adc_UpdateStatusStopConversion+0x158>)
    8132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8136:	685a      	ldr	r2, [r3, #4]
    8138:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    813c:	2134      	movs	r1, #52	; 0x34
    813e:	fb01 f303 	mul.w	r3, r1, r3
    8142:	4413      	add	r3, r2
    8144:	685b      	ldr	r3, [r3, #4]
    8146:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    8148:	f89d 3004 	ldrb.w	r3, [sp, #4]
    814c:	4a37      	ldr	r2, [pc, #220]	; (822c <Adc_UpdateStatusStopConversion+0x158>)
    814e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8152:	685a      	ldr	r2, [r3, #4]
    8154:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8158:	2134      	movs	r1, #52	; 0x34
    815a:	fb01 f303 	mul.w	r3, r1, r3
    815e:	4413      	add	r3, r2
    8160:	699b      	ldr	r3, [r3, #24]
    8162:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    8164:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8168:	4931      	ldr	r1, [pc, #196]	; (8230 <Adc_UpdateStatusStopConversion+0x15c>)
    816a:	4613      	mov	r3, r2
    816c:	009b      	lsls	r3, r3, #2
    816e:	4413      	add	r3, r2
    8170:	009b      	lsls	r3, r3, #2
    8172:	440b      	add	r3, r1
    8174:	681b      	ldr	r3, [r3, #0]
    8176:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    8178:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    817c:	492c      	ldr	r1, [pc, #176]	; (8230 <Adc_UpdateStatusStopConversion+0x15c>)
    817e:	4613      	mov	r3, r2
    8180:	009b      	lsls	r3, r3, #2
    8182:	4413      	add	r3, r2
    8184:	009b      	lsls	r3, r3, #2
    8186:	440b      	add	r3, r1
    8188:	3308      	adds	r3, #8
    818a:	2200      	movs	r2, #0
    818c:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    818e:	9b06      	ldr	r3, [sp, #24]
    8190:	2b00      	cmp	r3, #0
    8192:	d005      	beq.n	81a0 <Adc_UpdateStatusStopConversion+0xcc>
    8194:	9b05      	ldr	r3, [sp, #20]
    8196:	2b01      	cmp	r3, #1
    8198:	d110      	bne.n	81bc <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    819a:	9b04      	ldr	r3, [sp, #16]
    819c:	2b00      	cmp	r3, #0
    819e:	d10d      	bne.n	81bc <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    81a0:	9b03      	ldr	r3, [sp, #12]
    81a2:	2b03      	cmp	r3, #3
    81a4:	d10a      	bne.n	81bc <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    81a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    81aa:	4921      	ldr	r1, [pc, #132]	; (8230 <Adc_UpdateStatusStopConversion+0x15c>)
    81ac:	4613      	mov	r3, r2
    81ae:	009b      	lsls	r3, r3, #2
    81b0:	4413      	add	r3, r2
    81b2:	009b      	lsls	r3, r3, #2
    81b4:	440b      	add	r3, r1
    81b6:	2200      	movs	r2, #0
    81b8:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    81ba:	e032      	b.n	8222 <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    81bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    81c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    81c4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    81c8:	f10d 000a 	add.w	r0, sp, #10
    81cc:	f7ff ff1e 	bl	800c <Adc_StopSwGroupConversion>
    81d0:	4603      	mov	r3, r0
    81d2:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    81d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    81da:	4915      	ldr	r1, [pc, #84]	; (8230 <Adc_UpdateStatusStopConversion+0x15c>)
    81dc:	4613      	mov	r3, r2
    81de:	009b      	lsls	r3, r3, #2
    81e0:	4413      	add	r3, r2
    81e2:	009b      	lsls	r3, r3, #2
    81e4:	440b      	add	r3, r1
    81e6:	2200      	movs	r2, #0
    81e8:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    81ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    81ee:	2b00      	cmp	r3, #0
    81f0:	d10f      	bne.n	8212 <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    81f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    81f6:	4a0f      	ldr	r2, [pc, #60]	; (8234 <Adc_UpdateStatusStopConversion+0x160>)
    81f8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    81fc:	b29b      	uxth	r3, r3
    81fe:	2b00      	cmp	r3, #0
    8200:	d007      	beq.n	8212 <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    8202:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8206:	f89d 3005 	ldrb.w	r3, [sp, #5]
    820a:	4611      	mov	r1, r2
    820c:	4618      	mov	r0, r3
    820e:	f002 fae3 	bl	a7d8 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    8212:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8216:	2b01      	cmp	r3, #1
    8218:	d103      	bne.n	8222 <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    821a:	212b      	movs	r1, #43	; 0x2b
    821c:	2003      	movs	r0, #3
    821e:	f7ff fb45 	bl	78ac <Adc_ReportDetRuntimeError>
}
    8222:	bf00      	nop
    8224:	b009      	add	sp, #36	; 0x24
    8226:	f85d fb04 	ldr.w	pc, [sp], #4
    822a:	bf00      	nop
    822c:	1fff8d2c 	.word	0x1fff8d2c
    8230:	1fff8d30 	.word	0x1fff8d30
    8234:	1fff8d58 	.word	0x1fff8d58

00008238 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    8238:	b500      	push	{lr}
    823a:	b085      	sub	sp, #20
    823c:	4603      	mov	r3, r0
    823e:	f8ad 3006 	strh.w	r3, [sp, #6]
    8242:	460b      	mov	r3, r1
    8244:	f88d 3005 	strb.w	r3, [sp, #5]
    8248:	4613      	mov	r3, r2
    824a:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    824e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8252:	4a18      	ldr	r2, [pc, #96]	; (82b4 <Adc_UpdateStatusReadGroup+0x7c>)
    8254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8258:	68da      	ldr	r2, [r3, #12]
    825a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    825e:	005b      	lsls	r3, r3, #1
    8260:	4413      	add	r3, r2
    8262:	881b      	ldrh	r3, [r3, #0]
    8264:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    8268:	f89d 3004 	ldrb.w	r3, [sp, #4]
    826c:	4a11      	ldr	r2, [pc, #68]	; (82b4 <Adc_UpdateStatusReadGroup+0x7c>)
    826e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8272:	685a      	ldr	r2, [r3, #4]
    8274:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8278:	2134      	movs	r1, #52	; 0x34
    827a:	fb01 f303 	mul.w	r3, r1, r3
    827e:	4413      	add	r3, r2
    8280:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    8284:	2b01      	cmp	r3, #1
    8286:	d109      	bne.n	829c <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    8288:	f89d 2004 	ldrb.w	r2, [sp, #4]
    828c:	f89d 1005 	ldrb.w	r1, [sp, #5]
    8290:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8294:	4618      	mov	r0, r3
    8296:	f000 f80f 	bl	82b8 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    829a:	e007      	b.n	82ac <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    829c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    82a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    82a4:	4611      	mov	r1, r2
    82a6:	4618      	mov	r0, r3
    82a8:	f000 f8e8 	bl	847c <Adc_UpdateStatusReadGroupInt>
}
    82ac:	bf00      	nop
    82ae:	b005      	add	sp, #20
    82b0:	f85d fb04 	ldr.w	pc, [sp], #4
    82b4:	1fff8d2c 	.word	0x1fff8d2c

000082b8 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    82b8:	b500      	push	{lr}
    82ba:	b085      	sub	sp, #20
    82bc:	4603      	mov	r3, r0
    82be:	f8ad 3006 	strh.w	r3, [sp, #6]
    82c2:	460b      	mov	r3, r1
    82c4:	f88d 3005 	strb.w	r3, [sp, #5]
    82c8:	4613      	mov	r3, r2
    82ca:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    82ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
    82d2:	4a2c      	ldr	r2, [pc, #176]	; (8384 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    82d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82d8:	68da      	ldr	r2, [r3, #12]
    82da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    82de:	005b      	lsls	r3, r3, #1
    82e0:	4413      	add	r3, r2
    82e2:	881b      	ldrh	r3, [r3, #0]
    82e4:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    82e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    82ec:	4926      	ldr	r1, [pc, #152]	; (8388 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    82ee:	4613      	mov	r3, r2
    82f0:	009b      	lsls	r3, r3, #2
    82f2:	4413      	add	r3, r2
    82f4:	009b      	lsls	r3, r3, #2
    82f6:	440b      	add	r3, r1
    82f8:	3304      	adds	r3, #4
    82fa:	2201      	movs	r2, #1
    82fc:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    82fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8302:	2b00      	cmp	r3, #0
    8304:	d03a      	beq.n	837c <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    8306:	f89d 3004 	ldrb.w	r3, [sp, #4]
    830a:	4a1e      	ldr	r2, [pc, #120]	; (8384 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    830c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8310:	685a      	ldr	r2, [r3, #4]
    8312:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8316:	2134      	movs	r1, #52	; 0x34
    8318:	fb01 f303 	mul.w	r3, r1, r3
    831c:	4413      	add	r3, r2
    831e:	689b      	ldr	r3, [r3, #8]
    8320:	2b01      	cmp	r3, #1
    8322:	d10a      	bne.n	833a <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    8324:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8328:	4917      	ldr	r1, [pc, #92]	; (8388 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    832a:	4613      	mov	r3, r2
    832c:	009b      	lsls	r3, r3, #2
    832e:	4413      	add	r3, r2
    8330:	009b      	lsls	r3, r3, #2
    8332:	440b      	add	r3, r1
    8334:	2201      	movs	r2, #1
    8336:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    8338:	e020      	b.n	837c <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    833a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    833e:	4a11      	ldr	r2, [pc, #68]	; (8384 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    8340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8344:	685a      	ldr	r2, [r3, #4]
    8346:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    834a:	2134      	movs	r1, #52	; 0x34
    834c:	fb01 f303 	mul.w	r3, r1, r3
    8350:	4413      	add	r3, r2
    8352:	695b      	ldr	r3, [r3, #20]
    8354:	2b00      	cmp	r3, #0
    8356:	d111      	bne.n	837c <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    8358:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    835c:	490a      	ldr	r1, [pc, #40]	; (8388 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    835e:	4613      	mov	r3, r2
    8360:	009b      	lsls	r3, r3, #2
    8362:	4413      	add	r3, r2
    8364:	009b      	lsls	r3, r3, #2
    8366:	440b      	add	r3, r1
    8368:	2200      	movs	r2, #0
    836a:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    836c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8370:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8374:	4611      	mov	r1, r2
    8376:	4618      	mov	r0, r3
    8378:	f000 f808 	bl	838c <Adc_UpdateSwQueueIndexNoInt>
}
    837c:	bf00      	nop
    837e:	b005      	add	sp, #20
    8380:	f85d fb04 	ldr.w	pc, [sp], #4
    8384:	1fff8d2c 	.word	0x1fff8d2c
    8388:	1fff8d30 	.word	0x1fff8d30

0000838c <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    838c:	b500      	push	{lr}
    838e:	b085      	sub	sp, #20
    8390:	4603      	mov	r3, r0
    8392:	460a      	mov	r2, r1
    8394:	f8ad 3006 	strh.w	r3, [sp, #6]
    8398:	4613      	mov	r3, r2
    839a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    839e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    83a2:	4a34      	ldr	r2, [pc, #208]	; (8474 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    83a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83a8:	68da      	ldr	r2, [r3, #12]
    83aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    83ae:	005b      	lsls	r3, r3, #1
    83b0:	4413      	add	r3, r2
    83b2:	881b      	ldrh	r3, [r3, #0]
    83b4:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    83b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    83bc:	4a2d      	ldr	r2, [pc, #180]	; (8474 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    83be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83c2:	685a      	ldr	r2, [r3, #4]
    83c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    83c8:	2134      	movs	r1, #52	; 0x34
    83ca:	fb01 f303 	mul.w	r3, r1, r3
    83ce:	4413      	add	r3, r2
    83d0:	789b      	ldrb	r3, [r3, #2]
    83d2:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    83d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    83da:	4a27      	ldr	r2, [pc, #156]	; (8478 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    83dc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    83e0:	b29b      	uxth	r3, r3
    83e2:	2b00      	cmp	r3, #0
    83e4:	d041      	beq.n	846a <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    83e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    83ea:	4a23      	ldr	r2, [pc, #140]	; (8478 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    83ec:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    83f0:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    83f4:	2300      	movs	r3, #0
    83f6:	f8ad 300e 	strh.w	r3, [sp, #14]
    83fa:	e01c      	b.n	8436 <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    83fc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8400:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8404:	491c      	ldr	r1, [pc, #112]	; (8478 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    8406:	0092      	lsls	r2, r2, #2
    8408:	4413      	add	r3, r2
    840a:	005b      	lsls	r3, r3, #1
    840c:	440b      	add	r3, r1
    840e:	885b      	ldrh	r3, [r3, #2]
    8410:	b29b      	uxth	r3, r3
    8412:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8416:	429a      	cmp	r2, r3
    8418:	d108      	bne.n	842c <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    841a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    841e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8422:	4611      	mov	r1, r2
    8424:	4618      	mov	r0, r3
    8426:	f001 fbc9 	bl	9bbc <Adc_Ipw_RemoveFromQueue>
                    break;
    842a:	e00a      	b.n	8442 <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    842c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8430:	3301      	adds	r3, #1
    8432:	f8ad 300e 	strh.w	r3, [sp, #14]
    8436:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    843a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    843e:	429a      	cmp	r2, r3
    8440:	d3dc      	bcc.n	83fc <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    8442:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8446:	2b00      	cmp	r3, #0
    8448:	d10f      	bne.n	846a <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    844a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    844e:	4a0a      	ldr	r2, [pc, #40]	; (8478 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    8450:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8454:	b29b      	uxth	r3, r3
    8456:	2b00      	cmp	r3, #0
    8458:	d007      	beq.n	846a <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    845a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    845e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8462:	4611      	mov	r1, r2
    8464:	4618      	mov	r0, r3
    8466:	f002 f9b7 	bl	a7d8 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    846a:	bf00      	nop
    846c:	b005      	add	sp, #20
    846e:	f85d fb04 	ldr.w	pc, [sp], #4
    8472:	bf00      	nop
    8474:	1fff8d2c 	.word	0x1fff8d2c
    8478:	1fff8d58 	.word	0x1fff8d58

0000847c <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    847c:	b084      	sub	sp, #16
    847e:	4603      	mov	r3, r0
    8480:	460a      	mov	r2, r1
    8482:	f8ad 3006 	strh.w	r3, [sp, #6]
    8486:	4613      	mov	r3, r2
    8488:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    848c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8490:	4a47      	ldr	r2, [pc, #284]	; (85b0 <Adc_UpdateStatusReadGroupInt+0x134>)
    8492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8496:	68da      	ldr	r2, [r3, #12]
    8498:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    849c:	005b      	lsls	r3, r3, #1
    849e:	4413      	add	r3, r2
    84a0:	881b      	ldrh	r3, [r3, #0]
    84a2:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    84a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    84aa:	4942      	ldr	r1, [pc, #264]	; (85b4 <Adc_UpdateStatusReadGroupInt+0x138>)
    84ac:	4613      	mov	r3, r2
    84ae:	009b      	lsls	r3, r3, #2
    84b0:	4413      	add	r3, r2
    84b2:	009b      	lsls	r3, r3, #2
    84b4:	440b      	add	r3, r1
    84b6:	681b      	ldr	r3, [r3, #0]
    84b8:	2b02      	cmp	r3, #2
    84ba:	d10a      	bne.n	84d2 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    84bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    84c0:	493c      	ldr	r1, [pc, #240]	; (85b4 <Adc_UpdateStatusReadGroupInt+0x138>)
    84c2:	4613      	mov	r3, r2
    84c4:	009b      	lsls	r3, r3, #2
    84c6:	4413      	add	r3, r2
    84c8:	009b      	lsls	r3, r3, #2
    84ca:	440b      	add	r3, r1
    84cc:	2201      	movs	r2, #1
    84ce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    84d0:	e06a      	b.n	85a8 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    84d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    84d6:	4937      	ldr	r1, [pc, #220]	; (85b4 <Adc_UpdateStatusReadGroupInt+0x138>)
    84d8:	4613      	mov	r3, r2
    84da:	009b      	lsls	r3, r3, #2
    84dc:	4413      	add	r3, r2
    84de:	009b      	lsls	r3, r3, #2
    84e0:	440b      	add	r3, r1
    84e2:	681b      	ldr	r3, [r3, #0]
    84e4:	2b03      	cmp	r3, #3
    84e6:	d15f      	bne.n	85a8 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    84e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    84ec:	4a30      	ldr	r2, [pc, #192]	; (85b0 <Adc_UpdateStatusReadGroupInt+0x134>)
    84ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84f2:	685a      	ldr	r2, [r3, #4]
    84f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    84f8:	2134      	movs	r1, #52	; 0x34
    84fa:	fb01 f303 	mul.w	r3, r1, r3
    84fe:	4413      	add	r3, r2
    8500:	695b      	ldr	r3, [r3, #20]
    8502:	2b00      	cmp	r3, #0
    8504:	d150      	bne.n	85a8 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    8506:	f89d 3005 	ldrb.w	r3, [sp, #5]
    850a:	4a29      	ldr	r2, [pc, #164]	; (85b0 <Adc_UpdateStatusReadGroupInt+0x134>)
    850c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8510:	685a      	ldr	r2, [r3, #4]
    8512:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8516:	2134      	movs	r1, #52	; 0x34
    8518:	fb01 f303 	mul.w	r3, r1, r3
    851c:	4413      	add	r3, r2
    851e:	689b      	ldr	r3, [r3, #8]
    8520:	2b00      	cmp	r3, #0
    8522:	d02c      	beq.n	857e <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    8524:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8528:	4a21      	ldr	r2, [pc, #132]	; (85b0 <Adc_UpdateStatusReadGroupInt+0x134>)
    852a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    852e:	685a      	ldr	r2, [r3, #4]
    8530:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8534:	2134      	movs	r1, #52	; 0x34
    8536:	fb01 f303 	mul.w	r3, r1, r3
    853a:	4413      	add	r3, r2
    853c:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    853e:	2b01      	cmp	r3, #1
    8540:	d128      	bne.n	8594 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    8542:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8546:	4a1a      	ldr	r2, [pc, #104]	; (85b0 <Adc_UpdateStatusReadGroupInt+0x134>)
    8548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    854c:	685a      	ldr	r2, [r3, #4]
    854e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8552:	2134      	movs	r1, #52	; 0x34
    8554:	fb01 f303 	mul.w	r3, r1, r3
    8558:	4413      	add	r3, r2
    855a:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    855c:	2b01      	cmp	r3, #1
    855e:	d119      	bne.n	8594 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    8560:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8564:	4a12      	ldr	r2, [pc, #72]	; (85b0 <Adc_UpdateStatusReadGroupInt+0x134>)
    8566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    856a:	685a      	ldr	r2, [r3, #4]
    856c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8570:	2134      	movs	r1, #52	; 0x34
    8572:	fb01 f303 	mul.w	r3, r1, r3
    8576:	4413      	add	r3, r2
    8578:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    857a:	2b00      	cmp	r3, #0
    857c:	d10a      	bne.n	8594 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    857e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8582:	490c      	ldr	r1, [pc, #48]	; (85b4 <Adc_UpdateStatusReadGroupInt+0x138>)
    8584:	4613      	mov	r3, r2
    8586:	009b      	lsls	r3, r3, #2
    8588:	4413      	add	r3, r2
    858a:	009b      	lsls	r3, r3, #2
    858c:	440b      	add	r3, r1
    858e:	2200      	movs	r2, #0
    8590:	601a      	str	r2, [r3, #0]
}
    8592:	e009      	b.n	85a8 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    8594:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8598:	4906      	ldr	r1, [pc, #24]	; (85b4 <Adc_UpdateStatusReadGroupInt+0x138>)
    859a:	4613      	mov	r3, r2
    859c:	009b      	lsls	r3, r3, #2
    859e:	4413      	add	r3, r2
    85a0:	009b      	lsls	r3, r3, #2
    85a2:	440b      	add	r3, r1
    85a4:	2201      	movs	r2, #1
    85a6:	601a      	str	r2, [r3, #0]
}
    85a8:	bf00      	nop
    85aa:	b004      	add	sp, #16
    85ac:	4770      	bx	lr
    85ae:	bf00      	nop
    85b0:	1fff8d2c 	.word	0x1fff8d2c
    85b4:	1fff8d30 	.word	0x1fff8d30

000085b8 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    85b8:	b084      	sub	sp, #16
    85ba:	4603      	mov	r3, r0
    85bc:	460a      	mov	r2, r1
    85be:	f8ad 3006 	strh.w	r3, [sp, #6]
    85c2:	4613      	mov	r3, r2
    85c4:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    85c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    85cc:	4a46      	ldr	r2, [pc, #280]	; (86e8 <Adc_UpdateStatusAfterGetStream+0x130>)
    85ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85d2:	68da      	ldr	r2, [r3, #12]
    85d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    85d8:	005b      	lsls	r3, r3, #1
    85da:	4413      	add	r3, r2
    85dc:	881b      	ldrh	r3, [r3, #0]
    85de:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    85e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    85e6:	4941      	ldr	r1, [pc, #260]	; (86ec <Adc_UpdateStatusAfterGetStream+0x134>)
    85e8:	4613      	mov	r3, r2
    85ea:	009b      	lsls	r3, r3, #2
    85ec:	4413      	add	r3, r2
    85ee:	009b      	lsls	r3, r3, #2
    85f0:	440b      	add	r3, r1
    85f2:	681b      	ldr	r3, [r3, #0]
    85f4:	2b02      	cmp	r3, #2
    85f6:	d109      	bne.n	860c <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    85f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    85fc:	493b      	ldr	r1, [pc, #236]	; (86ec <Adc_UpdateStatusAfterGetStream+0x134>)
    85fe:	4613      	mov	r3, r2
    8600:	009b      	lsls	r3, r3, #2
    8602:	4413      	add	r3, r2
    8604:	009b      	lsls	r3, r3, #2
    8606:	440b      	add	r3, r1
    8608:	2201      	movs	r2, #1
    860a:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    860c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8610:	4936      	ldr	r1, [pc, #216]	; (86ec <Adc_UpdateStatusAfterGetStream+0x134>)
    8612:	4613      	mov	r3, r2
    8614:	009b      	lsls	r3, r3, #2
    8616:	4413      	add	r3, r2
    8618:	009b      	lsls	r3, r3, #2
    861a:	440b      	add	r3, r1
    861c:	681b      	ldr	r3, [r3, #0]
    861e:	2b03      	cmp	r3, #3
    8620:	d15f      	bne.n	86e2 <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    8622:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8626:	4a30      	ldr	r2, [pc, #192]	; (86e8 <Adc_UpdateStatusAfterGetStream+0x130>)
    8628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    862c:	685a      	ldr	r2, [r3, #4]
    862e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8632:	2134      	movs	r1, #52	; 0x34
    8634:	fb01 f303 	mul.w	r3, r1, r3
    8638:	4413      	add	r3, r2
    863a:	695b      	ldr	r3, [r3, #20]
    863c:	2b00      	cmp	r3, #0
    863e:	d150      	bne.n	86e2 <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    8640:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8644:	4a28      	ldr	r2, [pc, #160]	; (86e8 <Adc_UpdateStatusAfterGetStream+0x130>)
    8646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    864a:	685a      	ldr	r2, [r3, #4]
    864c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8650:	2134      	movs	r1, #52	; 0x34
    8652:	fb01 f303 	mul.w	r3, r1, r3
    8656:	4413      	add	r3, r2
    8658:	689b      	ldr	r3, [r3, #8]
    865a:	2b00      	cmp	r3, #0
    865c:	d02c      	beq.n	86b8 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    865e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8662:	4a21      	ldr	r2, [pc, #132]	; (86e8 <Adc_UpdateStatusAfterGetStream+0x130>)
    8664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8668:	685a      	ldr	r2, [r3, #4]
    866a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    866e:	2134      	movs	r1, #52	; 0x34
    8670:	fb01 f303 	mul.w	r3, r1, r3
    8674:	4413      	add	r3, r2
    8676:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    8678:	2b01      	cmp	r3, #1
    867a:	d128      	bne.n	86ce <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    867c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8680:	4a19      	ldr	r2, [pc, #100]	; (86e8 <Adc_UpdateStatusAfterGetStream+0x130>)
    8682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8686:	685a      	ldr	r2, [r3, #4]
    8688:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    868c:	2134      	movs	r1, #52	; 0x34
    868e:	fb01 f303 	mul.w	r3, r1, r3
    8692:	4413      	add	r3, r2
    8694:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    8696:	2b01      	cmp	r3, #1
    8698:	d119      	bne.n	86ce <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    869a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    869e:	4a12      	ldr	r2, [pc, #72]	; (86e8 <Adc_UpdateStatusAfterGetStream+0x130>)
    86a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86a4:	685a      	ldr	r2, [r3, #4]
    86a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    86aa:	2134      	movs	r1, #52	; 0x34
    86ac:	fb01 f303 	mul.w	r3, r1, r3
    86b0:	4413      	add	r3, r2
    86b2:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    86b4:	2b00      	cmp	r3, #0
    86b6:	d10a      	bne.n	86ce <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    86b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    86bc:	490b      	ldr	r1, [pc, #44]	; (86ec <Adc_UpdateStatusAfterGetStream+0x134>)
    86be:	4613      	mov	r3, r2
    86c0:	009b      	lsls	r3, r3, #2
    86c2:	4413      	add	r3, r2
    86c4:	009b      	lsls	r3, r3, #2
    86c6:	440b      	add	r3, r1
    86c8:	2200      	movs	r2, #0
    86ca:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    86cc:	e009      	b.n	86e2 <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    86ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    86d2:	4906      	ldr	r1, [pc, #24]	; (86ec <Adc_UpdateStatusAfterGetStream+0x134>)
    86d4:	4613      	mov	r3, r2
    86d6:	009b      	lsls	r3, r3, #2
    86d8:	4413      	add	r3, r2
    86da:	009b      	lsls	r3, r3, #2
    86dc:	440b      	add	r3, r1
    86de:	2201      	movs	r2, #1
    86e0:	601a      	str	r2, [r3, #0]
}
    86e2:	bf00      	nop
    86e4:	b004      	add	sp, #16
    86e6:	4770      	bx	lr
    86e8:	1fff8d2c 	.word	0x1fff8d2c
    86ec:	1fff8d30 	.word	0x1fff8d30

000086f0 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    86f0:	b500      	push	{lr}
    86f2:	b085      	sub	sp, #20
    86f4:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    86f6:	f002 fa5b 	bl	abb0 <Adc_GetCoreID>
    86fa:	4603      	mov	r3, r0
    86fc:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    8700:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8704:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    8708:	f89d 300c 	ldrb.w	r3, [sp, #12]
    870c:	b2db      	uxtb	r3, r3
    870e:	4619      	mov	r1, r3
    8710:	9801      	ldr	r0, [sp, #4]
    8712:	f7ff fbb3 	bl	7e7c <Adc_CheckCurrentCoreId>
    8716:	4603      	mov	r3, r0
    8718:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    871c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8720:	2b00      	cmp	r3, #0
    8722:	d12c      	bne.n	877e <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    8724:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8728:	b2db      	uxtb	r3, r3
    872a:	4619      	mov	r1, r3
    872c:	4a16      	ldr	r2, [pc, #88]	; (8788 <Adc_Init+0x98>)
    872e:	9b01      	ldr	r3, [sp, #4]
    8730:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    8734:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8738:	b2db      	uxtb	r3, r3
    873a:	4618      	mov	r0, r3
    873c:	f7ff fb4e 	bl	7ddc <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    8740:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8744:	b2db      	uxtb	r3, r3
    8746:	4618      	mov	r0, r3
    8748:	f7ff fade 	bl	7d08 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    874c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8750:	b2db      	uxtb	r3, r3
    8752:	461a      	mov	r2, r3
    8754:	4b0c      	ldr	r3, [pc, #48]	; (8788 <Adc_Init+0x98>)
    8756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    875a:	681b      	ldr	r3, [r3, #0]
    875c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8760:	4611      	mov	r1, r2
    8762:	4618      	mov	r0, r3
    8764:	f001 ff78 	bl	a658 <Adc_Ipw_Init>
    8768:	4603      	mov	r3, r0
    876a:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    876e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8772:	2b01      	cmp	r3, #1
    8774:	d103      	bne.n	877e <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    8776:	212b      	movs	r1, #43	; 0x2b
    8778:	2000      	movs	r0, #0
    877a:	f7ff f897 	bl	78ac <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    877e:	bf00      	nop
    8780:	b005      	add	sp, #20
    8782:	f85d fb04 	ldr.w	pc, [sp], #4
    8786:	bf00      	nop
    8788:	1fff8d2c 	.word	0x1fff8d2c

0000878c <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    878c:	b500      	push	{lr}
    878e:	b085      	sub	sp, #20
    8790:	4603      	mov	r3, r0
    8792:	9100      	str	r1, [sp, #0]
    8794:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    8798:	2301      	movs	r3, #1
    879a:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    879e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    87a2:	4618      	mov	r0, r3
    87a4:	f7ff f9a2 	bl	7aec <Adc_ValidateSetupBufferNotBusy>
    87a8:	4603      	mov	r3, r0
    87aa:	2b00      	cmp	r3, #0
    87ac:	d10d      	bne.n	87ca <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    87ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    87b2:	4909      	ldr	r1, [pc, #36]	; (87d8 <Adc_SetupResultBuffer+0x4c>)
    87b4:	4613      	mov	r3, r2
    87b6:	009b      	lsls	r3, r3, #2
    87b8:	4413      	add	r3, r2
    87ba:	009b      	lsls	r3, r3, #2
    87bc:	440b      	add	r3, r1
    87be:	330c      	adds	r3, #12
    87c0:	9a00      	ldr	r2, [sp, #0]
    87c2:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    87c4:	2300      	movs	r3, #0
    87c6:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    87ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    87ce:	4618      	mov	r0, r3
    87d0:	b005      	add	sp, #20
    87d2:	f85d fb04 	ldr.w	pc, [sp], #4
    87d6:	bf00      	nop
    87d8:	1fff8d30 	.word	0x1fff8d30

000087dc <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    87dc:	b500      	push	{lr}
    87de:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    87e0:	2300      	movs	r3, #0
    87e2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    87e6:	f002 f9e3 	bl	abb0 <Adc_GetCoreID>
    87ea:	4603      	mov	r3, r0
    87ec:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    87f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    87f4:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    87f8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    87fc:	b2db      	uxtb	r3, r3
    87fe:	461a      	mov	r2, r3
    8800:	4b2d      	ldr	r3, [pc, #180]	; (88b8 <Adc_DeInit+0xdc>)
    8802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8806:	f89d 2006 	ldrb.w	r2, [sp, #6]
    880a:	4611      	mov	r1, r2
    880c:	4618      	mov	r0, r3
    880e:	f7ff fb35 	bl	7e7c <Adc_CheckCurrentCoreId>
    8812:	4603      	mov	r3, r0
    8814:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    8818:	f89d 3005 	ldrb.w	r3, [sp, #5]
    881c:	2b00      	cmp	r3, #0
    881e:	d147      	bne.n	88b0 <Adc_DeInit+0xd4>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    8820:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8824:	b2db      	uxtb	r3, r3
    8826:	4618      	mov	r0, r3
    8828:	f7ff f912 	bl	7a50 <Adc_ValidateDeInitNotBusy>
    882c:	4603      	mov	r3, r0
    882e:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    8832:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8836:	2b00      	cmp	r3, #0
    8838:	d13a      	bne.n	88b0 <Adc_DeInit+0xd4>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    883a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    883e:	b2db      	uxtb	r3, r3
    8840:	4618      	mov	r0, r3
    8842:	f001 ff4e 	bl	a6e2 <Adc_Ipw_DeInit>
    8846:	4603      	mov	r3, r0
    8848:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    884c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8850:	2b01      	cmp	r3, #1
    8852:	d103      	bne.n	885c <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    8854:	212b      	movs	r1, #43	; 0x2b
    8856:	2001      	movs	r0, #1
    8858:	f7ff f828 	bl	78ac <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    885c:	2300      	movs	r3, #0
    885e:	f88d 3007 	strb.w	r3, [sp, #7]
    8862:	e019      	b.n	8898 <Adc_DeInit+0xbc>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    8864:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8868:	b2db      	uxtb	r3, r3
    886a:	461a      	mov	r2, r3
    886c:	4b12      	ldr	r3, [pc, #72]	; (88b8 <Adc_DeInit+0xdc>)
    886e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8872:	681a      	ldr	r2, [r3, #0]
    8874:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8878:	4413      	add	r3, r2
    887a:	7f9b      	ldrb	r3, [r3, #30]
    887c:	2b01      	cmp	r3, #1
    887e:	d106      	bne.n	888e <Adc_DeInit+0xb2>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    8880:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8884:	4a0d      	ldr	r2, [pc, #52]	; (88bc <Adc_DeInit+0xe0>)
    8886:	00db      	lsls	r3, r3, #3
    8888:	4413      	add	r3, r2
    888a:	2200      	movs	r2, #0
    888c:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    888e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8892:	3301      	adds	r3, #1
    8894:	f88d 3007 	strb.w	r3, [sp, #7]
    8898:	f89d 3007 	ldrb.w	r3, [sp, #7]
    889c:	2b01      	cmp	r3, #1
    889e:	d9e1      	bls.n	8864 <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    88a0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    88a4:	b2db      	uxtb	r3, r3
    88a6:	4619      	mov	r1, r3
    88a8:	4b03      	ldr	r3, [pc, #12]	; (88b8 <Adc_DeInit+0xdc>)
    88aa:	2200      	movs	r2, #0
    88ac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    88b0:	bf00      	nop
    88b2:	b003      	add	sp, #12
    88b4:	f85d fb04 	ldr.w	pc, [sp], #4
    88b8:	1fff8d2c 	.word	0x1fff8d2c
    88bc:	1fff8d58 	.word	0x1fff8d58

000088c0 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    88c0:	b500      	push	{lr}
    88c2:	b085      	sub	sp, #20
    88c4:	4603      	mov	r3, r0
    88c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    88ca:	2300      	movs	r3, #0
    88cc:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    88d0:	2300      	movs	r3, #0
    88d2:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    88d6:	f002 f96b 	bl	abb0 <Adc_GetCoreID>
    88da:	4603      	mov	r3, r0
    88dc:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    88e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    88e4:	b2db      	uxtb	r3, r3
    88e6:	461a      	mov	r2, r3
    88e8:	4b1a      	ldr	r3, [pc, #104]	; (8954 <Adc_StartGroupConversion+0x94>)
    88ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    88ee:	68da      	ldr	r2, [r3, #12]
    88f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    88f4:	005b      	lsls	r3, r3, #1
    88f6:	4413      	add	r3, r2
    88f8:	881b      	ldrh	r3, [r3, #0]
    88fa:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    88fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8902:	b2da      	uxtb	r2, r3
    8904:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8908:	4611      	mov	r1, r2
    890a:	4618      	mov	r0, r3
    890c:	f7ff f912 	bl	7b34 <Adc_ValidateStateStartGroupConvNotBusy>
    8910:	4603      	mov	r3, r0
    8912:	2b00      	cmp	r3, #0
    8914:	d11a      	bne.n	894c <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    8916:	f89d 300c 	ldrb.w	r3, [sp, #12]
    891a:	b2db      	uxtb	r3, r3
    891c:	461a      	mov	r2, r3
    891e:	4b0d      	ldr	r3, [pc, #52]	; (8954 <Adc_StartGroupConversion+0x94>)
    8920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8924:	685a      	ldr	r2, [r3, #4]
    8926:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    892a:	2134      	movs	r1, #52	; 0x34
    892c:	fb01 f303 	mul.w	r3, r1, r3
    8930:	4413      	add	r3, r2
    8932:	789b      	ldrb	r3, [r3, #2]
    8934:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    8938:	f89d 300c 	ldrb.w	r3, [sp, #12]
    893c:	b2da      	uxtb	r2, r3
    893e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    8942:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8946:	4618      	mov	r0, r3
    8948:	f7ff facb 	bl	7ee2 <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    894c:	bf00      	nop
    894e:	b005      	add	sp, #20
    8950:	f85d fb04 	ldr.w	pc, [sp], #4
    8954:	1fff8d2c 	.word	0x1fff8d2c

00008958 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    8958:	b500      	push	{lr}
    895a:	b085      	sub	sp, #20
    895c:	4603      	mov	r3, r0
    895e:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8962:	2300      	movs	r3, #0
    8964:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    8968:	2300      	movs	r3, #0
    896a:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    896e:	f002 f91f 	bl	abb0 <Adc_GetCoreID>
    8972:	4603      	mov	r3, r0
    8974:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    8978:	f89d 300b 	ldrb.w	r3, [sp, #11]
    897c:	b2da      	uxtb	r2, r3
    897e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8982:	4619      	mov	r1, r3
    8984:	2003      	movs	r0, #3
    8986:	f7ff f94d 	bl	7c24 <Adc_ValidateStateNotIdle>
    898a:	4603      	mov	r3, r0
    898c:	2b00      	cmp	r3, #0
    898e:	d129      	bne.n	89e4 <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8990:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8994:	b2db      	uxtb	r3, r3
    8996:	461a      	mov	r2, r3
    8998:	4b14      	ldr	r3, [pc, #80]	; (89ec <Adc_StopGroupConversion+0x94>)
    899a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    899e:	68da      	ldr	r2, [r3, #12]
    89a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    89a4:	005b      	lsls	r3, r3, #1
    89a6:	4413      	add	r3, r2
    89a8:	881b      	ldrh	r3, [r3, #0]
    89aa:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    89ae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    89b2:	b2db      	uxtb	r3, r3
    89b4:	461a      	mov	r2, r3
    89b6:	4b0d      	ldr	r3, [pc, #52]	; (89ec <Adc_StopGroupConversion+0x94>)
    89b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    89bc:	685a      	ldr	r2, [r3, #4]
    89be:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    89c2:	2134      	movs	r1, #52	; 0x34
    89c4:	fb01 f303 	mul.w	r3, r1, r3
    89c8:	4413      	add	r3, r2
    89ca:	789b      	ldrb	r3, [r3, #2]
    89cc:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    89d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    89d4:	b2da      	uxtb	r2, r3
    89d6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    89da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    89de:	4618      	mov	r0, r3
    89e0:	f7ff fb78 	bl	80d4 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    89e4:	bf00      	nop
    89e6:	b005      	add	sp, #20
    89e8:	f85d fb04 	ldr.w	pc, [sp], #4
    89ec:	1fff8d2c 	.word	0x1fff8d2c

000089f0 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    89f0:	b500      	push	{lr}
    89f2:	b085      	sub	sp, #20
    89f4:	4603      	mov	r3, r0
    89f6:	9100      	str	r1, [sp, #0]
    89f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    89fc:	2301      	movs	r3, #1
    89fe:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    8a02:	2301      	movs	r3, #1
    8a04:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    8a08:	f002 f8d2 	bl	abb0 <Adc_GetCoreID>
    8a0c:	4603      	mov	r3, r0
    8a0e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    8a12:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a16:	b2da      	uxtb	r2, r3
    8a18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a1c:	4619      	mov	r1, r3
    8a1e:	2004      	movs	r0, #4
    8a20:	f7ff f900 	bl	7c24 <Adc_ValidateStateNotIdle>
    8a24:	4603      	mov	r3, r0
    8a26:	2b00      	cmp	r3, #0
    8a28:	d121      	bne.n	8a6e <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    8a2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a2e:	b2db      	uxtb	r3, r3
    8a30:	f10d 020d 	add.w	r2, sp, #13
    8a34:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    8a38:	9900      	ldr	r1, [sp, #0]
    8a3a:	f002 f812 	bl	aa62 <Adc_Ipw_ReadGroup>
    8a3e:	4603      	mov	r3, r0
    8a40:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    8a44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a48:	2b00      	cmp	r3, #0
    8a4a:	d006      	beq.n	8a5a <Adc_ReadGroup+0x6a>
    8a4c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8a50:	f083 0301 	eor.w	r3, r3, #1
    8a54:	b2db      	uxtb	r3, r3
    8a56:	2b00      	cmp	r3, #0
    8a58:	d009      	beq.n	8a6e <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    8a5a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    8a5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a62:	b2da      	uxtb	r2, r3
    8a64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a68:	4618      	mov	r0, r3
    8a6a:	f7ff fbe5 	bl	8238 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    8a6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a72:	4618      	mov	r0, r3
    8a74:	b005      	add	sp, #20
    8a76:	f85d fb04 	ldr.w	pc, [sp], #4

00008a7a <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    8a7a:	b084      	sub	sp, #16
    8a7c:	4603      	mov	r3, r0
    8a7e:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    8a82:	2300      	movs	r3, #0
    8a84:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    8a86:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8a8a:	4906      	ldr	r1, [pc, #24]	; (8aa4 <Adc_GetGroupStatus+0x2a>)
    8a8c:	4613      	mov	r3, r2
    8a8e:	009b      	lsls	r3, r3, #2
    8a90:	4413      	add	r3, r2
    8a92:	009b      	lsls	r3, r3, #2
    8a94:	440b      	add	r3, r1
    8a96:	681b      	ldr	r3, [r3, #0]
    8a98:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    8a9a:	9b03      	ldr	r3, [sp, #12]
}
    8a9c:	4618      	mov	r0, r3
    8a9e:	b004      	add	sp, #16
    8aa0:	4770      	bx	lr
    8aa2:	bf00      	nop
    8aa4:	1fff8d30 	.word	0x1fff8d30

00008aa8 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    8aa8:	b500      	push	{lr}
    8aaa:	b085      	sub	sp, #20
    8aac:	4603      	mov	r3, r0
    8aae:	9100      	str	r1, [sp, #0]
    8ab0:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    8ab4:	f002 f87c 	bl	abb0 <Adc_GetCoreID>
    8ab8:	4603      	mov	r3, r0
    8aba:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    8abe:	2300      	movs	r3, #0
    8ac0:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    8ac4:	2300      	movs	r3, #0
    8ac6:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    8aca:	2300      	movs	r3, #0
    8acc:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    8ad0:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8ad4:	b2da      	uxtb	r2, r3
    8ad6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8ada:	4619      	mov	r1, r3
    8adc:	200b      	movs	r0, #11
    8ade:	f7ff f8a1 	bl	7c24 <Adc_ValidateStateNotIdle>
    8ae2:	4603      	mov	r3, r0
    8ae4:	2b00      	cmp	r3, #0
    8ae6:	f040 808e 	bne.w	8c06 <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    8aea:	9b00      	ldr	r3, [sp, #0]
    8aec:	2200      	movs	r2, #0
    8aee:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    8af0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8af4:	4948      	ldr	r1, [pc, #288]	; (8c18 <Adc_GetStreamLastPointer+0x170>)
    8af6:	4613      	mov	r3, r2
    8af8:	009b      	lsls	r3, r3, #2
    8afa:	4413      	add	r3, r2
    8afc:	009b      	lsls	r3, r3, #2
    8afe:	440b      	add	r3, r1
    8b00:	681b      	ldr	r3, [r3, #0]
    8b02:	2b00      	cmp	r3, #0
    8b04:	f000 8082 	beq.w	8c0c <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    8b08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8b0c:	4942      	ldr	r1, [pc, #264]	; (8c18 <Adc_GetStreamLastPointer+0x170>)
    8b0e:	4613      	mov	r3, r2
    8b10:	009b      	lsls	r3, r3, #2
    8b12:	4413      	add	r3, r2
    8b14:	009b      	lsls	r3, r3, #2
    8b16:	440b      	add	r3, r1
    8b18:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    8b1a:	2b01      	cmp	r3, #1
    8b1c:	d076      	beq.n	8c0c <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8b1e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8b22:	b2db      	uxtb	r3, r3
    8b24:	461a      	mov	r2, r3
    8b26:	4b3d      	ldr	r3, [pc, #244]	; (8c1c <Adc_GetStreamLastPointer+0x174>)
    8b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b2c:	68da      	ldr	r2, [r3, #12]
    8b2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8b32:	005b      	lsls	r3, r3, #1
    8b34:	4413      	add	r3, r2
    8b36:	881b      	ldrh	r3, [r3, #0]
    8b38:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8b3c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8b40:	4935      	ldr	r1, [pc, #212]	; (8c18 <Adc_GetStreamLastPointer+0x170>)
    8b42:	4613      	mov	r3, r2
    8b44:	009b      	lsls	r3, r3, #2
    8b46:	4413      	add	r3, r2
    8b48:	009b      	lsls	r3, r3, #2
    8b4a:	440b      	add	r3, r1
    8b4c:	3308      	adds	r3, #8
    8b4e:	881b      	ldrh	r3, [r3, #0]
    8b50:	b29b      	uxth	r3, r3
    8b52:	2b00      	cmp	r3, #0
    8b54:	d123      	bne.n	8b9e <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    8b56:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8b5a:	b2db      	uxtb	r3, r3
    8b5c:	461a      	mov	r2, r3
    8b5e:	4b2f      	ldr	r3, [pc, #188]	; (8c1c <Adc_GetStreamLastPointer+0x174>)
    8b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b64:	685a      	ldr	r2, [r3, #4]
    8b66:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8b6a:	2134      	movs	r1, #52	; 0x34
    8b6c:	fb01 f303 	mul.w	r3, r1, r3
    8b70:	4413      	add	r3, r2
    8b72:	8b9b      	ldrh	r3, [r3, #28]
    8b74:	3b01      	subs	r3, #1
    8b76:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    8b7a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8b7e:	b2db      	uxtb	r3, r3
    8b80:	461a      	mov	r2, r3
    8b82:	4b26      	ldr	r3, [pc, #152]	; (8c1c <Adc_GetStreamLastPointer+0x174>)
    8b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b88:	685a      	ldr	r2, [r3, #4]
    8b8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8b8e:	2134      	movs	r1, #52	; 0x34
    8b90:	fb01 f303 	mul.w	r3, r1, r3
    8b94:	4413      	add	r3, r2
    8b96:	8b9b      	ldrh	r3, [r3, #28]
    8b98:	f8ad 300e 	strh.w	r3, [sp, #14]
    8b9c:	e019      	b.n	8bd2 <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8b9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8ba2:	491d      	ldr	r1, [pc, #116]	; (8c18 <Adc_GetStreamLastPointer+0x170>)
    8ba4:	4613      	mov	r3, r2
    8ba6:	009b      	lsls	r3, r3, #2
    8ba8:	4413      	add	r3, r2
    8baa:	009b      	lsls	r3, r3, #2
    8bac:	440b      	add	r3, r1
    8bae:	3308      	adds	r3, #8
    8bb0:	881b      	ldrh	r3, [r3, #0]
    8bb2:	b29b      	uxth	r3, r3
    8bb4:	3b01      	subs	r3, #1
    8bb6:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    8bba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8bbe:	4916      	ldr	r1, [pc, #88]	; (8c18 <Adc_GetStreamLastPointer+0x170>)
    8bc0:	4613      	mov	r3, r2
    8bc2:	009b      	lsls	r3, r3, #2
    8bc4:	4413      	add	r3, r2
    8bc6:	009b      	lsls	r3, r3, #2
    8bc8:	440b      	add	r3, r1
    8bca:	3308      	adds	r3, #8
    8bcc:	881b      	ldrh	r3, [r3, #0]
    8bce:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    8bd2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8bd6:	4910      	ldr	r1, [pc, #64]	; (8c18 <Adc_GetStreamLastPointer+0x170>)
    8bd8:	4613      	mov	r3, r2
    8bda:	009b      	lsls	r3, r3, #2
    8bdc:	4413      	add	r3, r2
    8bde:	009b      	lsls	r3, r3, #2
    8be0:	440b      	add	r3, r1
    8be2:	330c      	adds	r3, #12
    8be4:	681a      	ldr	r2, [r3, #0]
    8be6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8bea:	005b      	lsls	r3, r3, #1
    8bec:	441a      	add	r2, r3
    8bee:	9b00      	ldr	r3, [sp, #0]
    8bf0:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    8bf2:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8bf6:	b2da      	uxtb	r2, r3
    8bf8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8bfc:	4611      	mov	r1, r2
    8bfe:	4618      	mov	r0, r3
    8c00:	f7ff fcda 	bl	85b8 <Adc_UpdateStatusAfterGetStream>
    8c04:	e002      	b.n	8c0c <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    8c06:	9b00      	ldr	r3, [sp, #0]
    8c08:	2200      	movs	r2, #0
    8c0a:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    8c0c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    8c10:	4618      	mov	r0, r3
    8c12:	b005      	add	sp, #20
    8c14:	f85d fb04 	ldr.w	pc, [sp], #4
    8c18:	1fff8d30 	.word	0x1fff8d30
    8c1c:	1fff8d2c 	.word	0x1fff8d2c

00008c20 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    8c20:	b082      	sub	sp, #8
    8c22:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    8c24:	9b01      	ldr	r3, [sp, #4]
    8c26:	222b      	movs	r2, #43	; 0x2b
    8c28:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    8c2a:	9b01      	ldr	r3, [sp, #4]
    8c2c:	227b      	movs	r2, #123	; 0x7b
    8c2e:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    8c30:	9b01      	ldr	r3, [sp, #4]
    8c32:	2202      	movs	r2, #2
    8c34:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    8c36:	9b01      	ldr	r3, [sp, #4]
    8c38:	2200      	movs	r2, #0
    8c3a:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    8c3c:	9b01      	ldr	r3, [sp, #4]
    8c3e:	2200      	movs	r2, #0
    8c40:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    8c42:	bf00      	nop
    8c44:	b002      	add	sp, #8
    8c46:	4770      	bx	lr

00008c48 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    8c48:	b500      	push	{lr}
    8c4a:	b085      	sub	sp, #20
    8c4c:	4603      	mov	r3, r0
    8c4e:	9100      	str	r1, [sp, #0]
    8c50:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    8c54:	2300      	movs	r3, #0
    8c56:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    8c5a:	f001 ffa9 	bl	abb0 <Adc_GetCoreID>
    8c5e:	4603      	mov	r3, r0
    8c60:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    8c64:	9b00      	ldr	r3, [sp, #0]
    8c66:	2201      	movs	r2, #1
    8c68:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    8c6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c6e:	2129      	movs	r1, #41	; 0x29
    8c70:	4618      	mov	r0, r3
    8c72:	f7fe fe30 	bl	78d6 <Adc_ValidateNotBusyNoQueue>
    8c76:	4603      	mov	r3, r0
    8c78:	2b00      	cmp	r3, #0
    8c7a:	d115      	bne.n	8ca8 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    8c7c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8c80:	b2db      	uxtb	r3, r3
    8c82:	4619      	mov	r1, r3
    8c84:	2029      	movs	r0, #41	; 0x29
    8c86:	f7fe fe91 	bl	79ac <Adc_ValidateCheckGroupNotConversion>
    8c8a:	4603      	mov	r3, r0
    8c8c:	2b00      	cmp	r3, #0
    8c8e:	d10b      	bne.n	8ca8 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    8c90:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8c94:	b2da      	uxtb	r2, r3
    8c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c9a:	9900      	ldr	r1, [sp, #0]
    8c9c:	4618      	mov	r0, r3
    8c9e:	f001 ff5d 	bl	ab5c <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    8ca2:	2301      	movs	r3, #1
    8ca4:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    8ca8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8cac:	2b00      	cmp	r3, #0
    8cae:	d007      	beq.n	8cc0 <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    8cb0:	9b00      	ldr	r3, [sp, #0]
    8cb2:	781b      	ldrb	r3, [r3, #0]
    8cb4:	2b01      	cmp	r3, #1
    8cb6:	d103      	bne.n	8cc0 <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    8cb8:	212b      	movs	r1, #43	; 0x2b
    8cba:	2029      	movs	r0, #41	; 0x29
    8cbc:	f7fe fdf6 	bl	78ac <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    8cc0:	bf00      	nop
    8cc2:	b005      	add	sp, #20
    8cc4:	f85d fb04 	ldr.w	pc, [sp], #4

00008cc8 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    8cc8:	b086      	sub	sp, #24
    8cca:	9003      	str	r0, [sp, #12]
    8ccc:	9102      	str	r1, [sp, #8]
    8cce:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    8cd0:	9b03      	ldr	r3, [sp, #12]
    8cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8cd6:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    8cd8:	9b02      	ldr	r3, [sp, #8]
    8cda:	43db      	mvns	r3, r3
    8cdc:	9a05      	ldr	r2, [sp, #20]
    8cde:	4013      	ands	r3, r2
    8ce0:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    8ce2:	9a05      	ldr	r2, [sp, #20]
    8ce4:	9b01      	ldr	r3, [sp, #4]
    8ce6:	4313      	orrs	r3, r2
    8ce8:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    8cea:	9b03      	ldr	r3, [sp, #12]
    8cec:	9a05      	ldr	r2, [sp, #20]
    8cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    8cf2:	bf00      	nop
    8cf4:	b006      	add	sp, #24
    8cf6:	4770      	bx	lr

00008cf8 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    8cf8:	b086      	sub	sp, #24
    8cfa:	9003      	str	r0, [sp, #12]
    8cfc:	9102      	str	r1, [sp, #8]
    8cfe:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    8d00:	9b03      	ldr	r3, [sp, #12]
    8d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8d04:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    8d06:	9b05      	ldr	r3, [sp, #20]
    8d08:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    8d0c:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    8d0e:	9b02      	ldr	r3, [sp, #8]
    8d10:	015b      	lsls	r3, r3, #5
    8d12:	f003 0360 	and.w	r3, r3, #96	; 0x60
    8d16:	9a05      	ldr	r2, [sp, #20]
    8d18:	4313      	orrs	r3, r2
    8d1a:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    8d1c:	9b01      	ldr	r3, [sp, #4]
    8d1e:	f003 0303 	and.w	r3, r3, #3
    8d22:	9a05      	ldr	r2, [sp, #20]
    8d24:	4313      	orrs	r3, r2
    8d26:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    8d28:	9b03      	ldr	r3, [sp, #12]
    8d2a:	9a05      	ldr	r2, [sp, #20]
    8d2c:	641a      	str	r2, [r3, #64]	; 0x40
}
    8d2e:	bf00      	nop
    8d30:	b006      	add	sp, #24
    8d32:	4770      	bx	lr

00008d34 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    8d34:	b084      	sub	sp, #16
    8d36:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    8d38:	2300      	movs	r3, #0
    8d3a:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    8d3c:	9b01      	ldr	r3, [sp, #4]
    8d3e:	095b      	lsrs	r3, r3, #5
    8d40:	f003 0303 	and.w	r3, r3, #3
    8d44:	2b03      	cmp	r3, #3
    8d46:	d00c      	beq.n	8d62 <Adc_HwAcc_GetClockDivide+0x2e>
    8d48:	2b03      	cmp	r3, #3
    8d4a:	d80d      	bhi.n	8d68 <Adc_HwAcc_GetClockDivide+0x34>
    8d4c:	2b01      	cmp	r3, #1
    8d4e:	d002      	beq.n	8d56 <Adc_HwAcc_GetClockDivide+0x22>
    8d50:	2b02      	cmp	r3, #2
    8d52:	d003      	beq.n	8d5c <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    8d54:	e008      	b.n	8d68 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    8d56:	2301      	movs	r3, #1
    8d58:	9303      	str	r3, [sp, #12]
            break;
    8d5a:	e006      	b.n	8d6a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    8d5c:	2302      	movs	r3, #2
    8d5e:	9303      	str	r3, [sp, #12]
            break;
    8d60:	e003      	b.n	8d6a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    8d62:	2303      	movs	r3, #3
    8d64:	9303      	str	r3, [sp, #12]
            break;
    8d66:	e000      	b.n	8d6a <Adc_HwAcc_GetClockDivide+0x36>
            break;
    8d68:	bf00      	nop
    }
    return ReturnValue;
    8d6a:	9b03      	ldr	r3, [sp, #12]
}
    8d6c:	4618      	mov	r0, r3
    8d6e:	b004      	add	sp, #16
    8d70:	4770      	bx	lr

00008d72 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    8d72:	b084      	sub	sp, #16
    8d74:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    8d76:	2300      	movs	r3, #0
    8d78:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    8d7a:	9b01      	ldr	r3, [sp, #4]
    8d7c:	f003 0303 	and.w	r3, r3, #3
    8d80:	2b03      	cmp	r3, #3
    8d82:	d00c      	beq.n	8d9e <Adc_HwAcc_GetInputClock+0x2c>
    8d84:	2b03      	cmp	r3, #3
    8d86:	d80d      	bhi.n	8da4 <Adc_HwAcc_GetInputClock+0x32>
    8d88:	2b01      	cmp	r3, #1
    8d8a:	d002      	beq.n	8d92 <Adc_HwAcc_GetInputClock+0x20>
    8d8c:	2b02      	cmp	r3, #2
    8d8e:	d003      	beq.n	8d98 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    8d90:	e008      	b.n	8da4 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    8d92:	2301      	movs	r3, #1
    8d94:	9303      	str	r3, [sp, #12]
            break;
    8d96:	e006      	b.n	8da6 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    8d98:	2302      	movs	r3, #2
    8d9a:	9303      	str	r3, [sp, #12]
            break;
    8d9c:	e003      	b.n	8da6 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    8d9e:	2303      	movs	r3, #3
    8da0:	9303      	str	r3, [sp, #12]
            break;
    8da2:	e000      	b.n	8da6 <Adc_HwAcc_GetInputClock+0x34>
            break;
    8da4:	bf00      	nop
    }
    return ReturnValue;
    8da6:	9b03      	ldr	r3, [sp, #12]
}
    8da8:	4618      	mov	r0, r3
    8daa:	b004      	add	sp, #16
    8dac:	4770      	bx	lr

00008dae <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    8dae:	b084      	sub	sp, #16
    8db0:	9001      	str	r0, [sp, #4]
    8db2:	460b      	mov	r3, r1
    8db4:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    8db8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8dbc:	2b00      	cmp	r3, #0
    8dbe:	d002      	beq.n	8dc6 <Adc_HwAcc_SetSampleTime+0x18>
    8dc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8dc4:	e000      	b.n	8dc8 <Adc_HwAcc_SetSampleTime+0x1a>
    8dc6:	2301      	movs	r3, #1
    8dc8:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    8dcc:	9b01      	ldr	r3, [sp, #4]
    8dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8dd0:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    8dd2:	9b02      	ldr	r3, [sp, #8]
    8dd4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8dd8:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    8dda:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8dde:	9a02      	ldr	r2, [sp, #8]
    8de0:	4313      	orrs	r3, r2
    8de2:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    8de4:	9b01      	ldr	r3, [sp, #4]
    8de6:	9a02      	ldr	r2, [sp, #8]
    8de8:	645a      	str	r2, [r3, #68]	; 0x44
}
    8dea:	bf00      	nop
    8dec:	b004      	add	sp, #16
    8dee:	4770      	bx	lr

00008df0 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    8df0:	b086      	sub	sp, #24
    8df2:	9003      	str	r0, [sp, #12]
    8df4:	460b      	mov	r3, r1
    8df6:	9201      	str	r2, [sp, #4]
    8df8:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    8dfc:	9b03      	ldr	r3, [sp, #12]
    8dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8e02:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    8e04:	9b05      	ldr	r3, [sp, #20]
    8e06:	f023 0307 	bic.w	r3, r3, #7
    8e0a:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    8e0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8e10:	2b00      	cmp	r3, #0
    8e12:	d001      	beq.n	8e18 <Adc_HwAcc_SetAveraging+0x28>
    8e14:	2304      	movs	r3, #4
    8e16:	e000      	b.n	8e1a <Adc_HwAcc_SetAveraging+0x2a>
    8e18:	2300      	movs	r3, #0
    8e1a:	9a05      	ldr	r2, [sp, #20]
    8e1c:	4313      	orrs	r3, r2
    8e1e:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    8e20:	9b01      	ldr	r3, [sp, #4]
    8e22:	f003 0303 	and.w	r3, r3, #3
    8e26:	9a05      	ldr	r2, [sp, #20]
    8e28:	4313      	orrs	r3, r2
    8e2a:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    8e2c:	9b03      	ldr	r3, [sp, #12]
    8e2e:	9a05      	ldr	r2, [sp, #20]
    8e30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    8e34:	bf00      	nop
    8e36:	b006      	add	sp, #24
    8e38:	4770      	bx	lr

00008e3a <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    8e3a:	b084      	sub	sp, #16
    8e3c:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    8e3e:	2300      	movs	r3, #0
    8e40:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    8e42:	9b01      	ldr	r3, [sp, #4]
    8e44:	f003 0303 	and.w	r3, r3, #3
    8e48:	2b03      	cmp	r3, #3
    8e4a:	d00c      	beq.n	8e66 <Adc_HwAcc_GetAverageSelect+0x2c>
    8e4c:	2b03      	cmp	r3, #3
    8e4e:	d80d      	bhi.n	8e6c <Adc_HwAcc_GetAverageSelect+0x32>
    8e50:	2b01      	cmp	r3, #1
    8e52:	d002      	beq.n	8e5a <Adc_HwAcc_GetAverageSelect+0x20>
    8e54:	2b02      	cmp	r3, #2
    8e56:	d003      	beq.n	8e60 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    8e58:	e008      	b.n	8e6c <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    8e5a:	2301      	movs	r3, #1
    8e5c:	9303      	str	r3, [sp, #12]
            break;
    8e5e:	e006      	b.n	8e6e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    8e60:	2302      	movs	r3, #2
    8e62:	9303      	str	r3, [sp, #12]
            break;
    8e64:	e003      	b.n	8e6e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    8e66:	2303      	movs	r3, #3
    8e68:	9303      	str	r3, [sp, #12]
            break;
    8e6a:	e000      	b.n	8e6e <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    8e6c:	bf00      	nop
    }
    return ReturnValue;
    8e6e:	9b03      	ldr	r3, [sp, #12]
}
    8e70:	4618      	mov	r0, r3
    8e72:	b004      	add	sp, #16
    8e74:	4770      	bx	lr

00008e76 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    8e76:	b084      	sub	sp, #16
    8e78:	9001      	str	r0, [sp, #4]
    8e7a:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    8e7c:	9b01      	ldr	r3, [sp, #4]
    8e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8e82:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    8e84:	9b03      	ldr	r3, [sp, #12]
    8e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8e8a:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    8e8c:	9b00      	ldr	r3, [sp, #0]
    8e8e:	019b      	lsls	r3, r3, #6
    8e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8e94:	9a03      	ldr	r2, [sp, #12]
    8e96:	4313      	orrs	r3, r2
    8e98:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    8e9a:	9b01      	ldr	r3, [sp, #4]
    8e9c:	9a03      	ldr	r2, [sp, #12]
    8e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    8ea2:	bf00      	nop
    8ea4:	b004      	add	sp, #16
    8ea6:	4770      	bx	lr

00008ea8 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    8ea8:	b084      	sub	sp, #16
    8eaa:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    8eac:	2300      	movs	r3, #0
    8eae:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    8eb0:	9b01      	ldr	r3, [sp, #4]
    8eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d001      	beq.n	8ebe <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    8eba:	2301      	movs	r3, #1
    8ebc:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    8ebe:	9b03      	ldr	r3, [sp, #12]
}
    8ec0:	4618      	mov	r0, r3
    8ec2:	b004      	add	sp, #16
    8ec4:	4770      	bx	lr

00008ec6 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    8ec6:	b086      	sub	sp, #24
    8ec8:	9003      	str	r0, [sp, #12]
    8eca:	9201      	str	r2, [sp, #4]
    8ecc:	461a      	mov	r2, r3
    8ece:	460b      	mov	r3, r1
    8ed0:	f88d 300b 	strb.w	r3, [sp, #11]
    8ed4:	4613      	mov	r3, r2
    8ed6:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    8eda:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8ede:	9b03      	ldr	r3, [sp, #12]
    8ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8ee4:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    8ee6:	9b05      	ldr	r3, [sp, #20]
    8ee8:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    8eec:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    8eee:	9b01      	ldr	r3, [sp, #4]
    8ef0:	f003 031f 	and.w	r3, r3, #31
    8ef4:	9a05      	ldr	r2, [sp, #20]
    8ef6:	4313      	orrs	r3, r2
    8ef8:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    8efa:	f89d 300a 	ldrb.w	r3, [sp, #10]
    8efe:	2b00      	cmp	r3, #0
    8f00:	d001      	beq.n	8f06 <Adc_HwAcc_SetChannel+0x40>
    8f02:	2340      	movs	r3, #64	; 0x40
    8f04:	e000      	b.n	8f08 <Adc_HwAcc_SetChannel+0x42>
    8f06:	2300      	movs	r3, #0
    8f08:	9a05      	ldr	r2, [sp, #20]
    8f0a:	4313      	orrs	r3, r2
    8f0c:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    8f0e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8f12:	9b03      	ldr	r3, [sp, #12]
    8f14:	9905      	ldr	r1, [sp, #20]
    8f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    8f1a:	bf00      	nop
    8f1c:	b006      	add	sp, #24
    8f1e:	4770      	bx	lr

00008f20 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    8f20:	b082      	sub	sp, #8
    8f22:	9001      	str	r0, [sp, #4]
    8f24:	460b      	mov	r3, r1
    8f26:	f8ad 3002 	strh.w	r3, [sp, #2]
    8f2a:	4613      	mov	r3, r2
    8f2c:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    8f30:	f8bd 3000 	ldrh.w	r3, [sp]
    8f34:	b2da      	uxtb	r2, r3
    8f36:	9b01      	ldr	r3, [sp, #4]
    8f38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    8f3c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8f40:	f3c3 0209 	ubfx	r2, r3, #0, #10
    8f44:	9b01      	ldr	r3, [sp, #4]
    8f46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    8f4a:	bf00      	nop
    8f4c:	b002      	add	sp, #8
    8f4e:	4770      	bx	lr

00008f50 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    8f50:	b082      	sub	sp, #8
    8f52:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    8f54:	9b01      	ldr	r3, [sp, #4]
    8f56:	099b      	lsrs	r3, r3, #6
    8f58:	f003 0301 	and.w	r3, r3, #1
    8f5c:	2b00      	cmp	r3, #0
    8f5e:	bf14      	ite	ne
    8f60:	2301      	movne	r3, #1
    8f62:	2300      	moveq	r3, #0
    8f64:	b2db      	uxtb	r3, r3
}
    8f66:	4618      	mov	r0, r3
    8f68:	b002      	add	sp, #8
    8f6a:	4770      	bx	lr

00008f6c <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    8f6c:	b082      	sub	sp, #8
    8f6e:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    8f70:	9b01      	ldr	r3, [sp, #4]
    8f72:	09db      	lsrs	r3, r3, #7
    8f74:	f003 0301 	and.w	r3, r3, #1
    8f78:	2b00      	cmp	r3, #0
    8f7a:	bf14      	ite	ne
    8f7c:	2301      	movne	r3, #1
    8f7e:	2300      	moveq	r3, #0
    8f80:	b2db      	uxtb	r3, r3
}
    8f82:	4618      	mov	r0, r3
    8f84:	b002      	add	sp, #8
    8f86:	4770      	bx	lr

00008f88 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    8f88:	b084      	sub	sp, #16
    8f8a:	9001      	str	r0, [sp, #4]
    8f8c:	460b      	mov	r3, r1
    8f8e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    8f92:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8f96:	9b01      	ldr	r3, [sp, #4]
    8f98:	3212      	adds	r2, #18
    8f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8f9e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8fa2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8faa:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    8fae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    8fb2:	4618      	mov	r0, r3
    8fb4:	b004      	add	sp, #16
    8fb6:	4770      	bx	lr

00008fb8 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    8fb8:	b500      	push	{lr}
    8fba:	b085      	sub	sp, #20
    8fbc:	9003      	str	r0, [sp, #12]
    8fbe:	9102      	str	r1, [sp, #8]
    8fc0:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8fc2:	f007 f99d 	bl	10300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8fc6:	9b02      	ldr	r3, [sp, #8]
    8fc8:	7a59      	ldrb	r1, [r3, #9]
    8fca:	9b02      	ldr	r3, [sp, #8]
    8fcc:	68db      	ldr	r3, [r3, #12]
    8fce:	461a      	mov	r2, r3
    8fd0:	9803      	ldr	r0, [sp, #12]
    8fd2:	f7ff ff0d 	bl	8df0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8fd6:	f007 f9bf 	bl	10358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    8fda:	f006 fff7 	bl	ffcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    8fde:	9901      	ldr	r1, [sp, #4]
    8fe0:	9803      	ldr	r0, [sp, #12]
    8fe2:	f7ff ff48 	bl	8e76 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    8fe6:	f007 f81d 	bl	10024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    8fea:	f006 fd0d 	bl	fa08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8fee:	9b02      	ldr	r3, [sp, #8]
    8ff0:	7a1b      	ldrb	r3, [r3, #8]
    8ff2:	4619      	mov	r1, r3
    8ff4:	9803      	ldr	r0, [sp, #12]
    8ff6:	f7ff feda 	bl	8dae <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    8ffa:	f006 fd31 	bl	fa60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    8ffe:	f006 fc5f 	bl	f8c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    9002:	9b02      	ldr	r3, [sp, #8]
    9004:	6819      	ldr	r1, [r3, #0]
    9006:	9b02      	ldr	r3, [sp, #8]
    9008:	685b      	ldr	r3, [r3, #4]
    900a:	461a      	mov	r2, r3
    900c:	9803      	ldr	r0, [sp, #12]
    900e:	f7ff fe73 	bl	8cf8 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    9012:	f006 fc81 	bl	f918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    9016:	bf00      	nop
    9018:	b005      	add	sp, #20
    901a:	f85d fb04 	ldr.w	pc, [sp], #4

0000901e <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    901e:	b500      	push	{lr}
    9020:	b087      	sub	sp, #28
    9022:	9001      	str	r0, [sp, #4]
    9024:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9026:	4a67      	ldr	r2, [pc, #412]	; (91c4 <Adc_Ip_Init+0x1a6>)
    9028:	9b01      	ldr	r3, [sp, #4]
    902a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    902e:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    9030:	2300      	movs	r3, #0
    9032:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    9034:	2300      	movs	r3, #0
    9036:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    9038:	9b00      	ldr	r3, [sp, #0]
    903a:	6819      	ldr	r1, [r3, #0]
    903c:	9b00      	ldr	r3, [sp, #0]
    903e:	689b      	ldr	r3, [r3, #8]
    9040:	461a      	mov	r2, r3
    9042:	9802      	ldr	r0, [sp, #8]
    9044:	f7ff fe58 	bl	8cf8 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    9048:	9b00      	ldr	r3, [sp, #0]
    904a:	7b1b      	ldrb	r3, [r3, #12]
    904c:	4619      	mov	r1, r3
    904e:	9802      	ldr	r0, [sp, #8]
    9050:	f7ff fead 	bl	8dae <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    9054:	9b00      	ldr	r3, [sp, #0]
    9056:	7b59      	ldrb	r1, [r3, #13]
    9058:	9b00      	ldr	r3, [sp, #0]
    905a:	691b      	ldr	r3, [r3, #16]
    905c:	461a      	mov	r2, r3
    905e:	9802      	ldr	r0, [sp, #8]
    9060:	f7ff fec6 	bl	8df0 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    9064:	9b00      	ldr	r3, [sp, #0]
    9066:	695b      	ldr	r3, [r3, #20]
    9068:	4619      	mov	r1, r3
    906a:	9801      	ldr	r0, [sp, #4]
    906c:	f000 f9ea 	bl	9444 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    9070:	9b04      	ldr	r3, [sp, #16]
    9072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9076:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    9078:	9b00      	ldr	r3, [sp, #0]
    907a:	699b      	ldr	r3, [r3, #24]
    907c:	019b      	lsls	r3, r3, #6
    907e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9082:	9a05      	ldr	r2, [sp, #20]
    9084:	4313      	orrs	r3, r2
    9086:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    9088:	9b00      	ldr	r3, [sp, #0]
    908a:	7f1b      	ldrb	r3, [r3, #28]
    908c:	2b00      	cmp	r3, #0
    908e:	d004      	beq.n	909a <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    9090:	9b05      	ldr	r3, [sp, #20]
    9092:	f043 0304 	orr.w	r3, r3, #4
    9096:	9305      	str	r3, [sp, #20]
    9098:	e003      	b.n	90a2 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    909a:	9b04      	ldr	r3, [sp, #16]
    909c:	f043 0304 	orr.w	r3, r3, #4
    90a0:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    90a2:	9b04      	ldr	r3, [sp, #16]
    90a4:	f043 0303 	orr.w	r3, r3, #3
    90a8:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    90aa:	9b00      	ldr	r3, [sp, #0]
    90ac:	6a1b      	ldr	r3, [r3, #32]
    90ae:	f003 0303 	and.w	r3, r3, #3
    90b2:	9a05      	ldr	r2, [sp, #20]
    90b4:	4313      	orrs	r3, r2
    90b6:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    90b8:	9b04      	ldr	r3, [sp, #16]
    90ba:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    90be:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    90c0:	9b00      	ldr	r3, [sp, #0]
    90c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    90c6:	2b00      	cmp	r3, #0
    90c8:	d001      	beq.n	90ce <Adc_Ip_Init+0xb0>
    90ca:	2320      	movs	r3, #32
    90cc:	e000      	b.n	90d0 <Adc_Ip_Init+0xb2>
    90ce:	2300      	movs	r3, #0
    90d0:	9a05      	ldr	r2, [sp, #20]
    90d2:	4313      	orrs	r3, r2
    90d4:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    90d6:	9b00      	ldr	r3, [sp, #0]
    90d8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    90dc:	2b00      	cmp	r3, #0
    90de:	d001      	beq.n	90e4 <Adc_Ip_Init+0xc6>
    90e0:	2310      	movs	r3, #16
    90e2:	e000      	b.n	90e6 <Adc_Ip_Init+0xc8>
    90e4:	2300      	movs	r3, #0
    90e6:	9a05      	ldr	r2, [sp, #20]
    90e8:	4313      	orrs	r3, r2
    90ea:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    90ec:	9b00      	ldr	r3, [sp, #0]
    90ee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    90f2:	2b00      	cmp	r3, #0
    90f4:	d001      	beq.n	90fa <Adc_Ip_Init+0xdc>
    90f6:	2308      	movs	r3, #8
    90f8:	e000      	b.n	90fc <Adc_Ip_Init+0xde>
    90fa:	2300      	movs	r3, #0
    90fc:	9a05      	ldr	r2, [sp, #20]
    90fe:	4313      	orrs	r3, r2
    9100:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    9102:	9b00      	ldr	r3, [sp, #0]
    9104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9106:	461a      	mov	r2, r3
    9108:	9b02      	ldr	r3, [sp, #8]
    910a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    910e:	9b00      	ldr	r3, [sp, #0]
    9110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9112:	461a      	mov	r2, r3
    9114:	9b02      	ldr	r3, [sp, #8]
    9116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    911a:	9a05      	ldr	r2, [sp, #20]
    911c:	9904      	ldr	r1, [sp, #16]
    911e:	9802      	ldr	r0, [sp, #8]
    9120:	f7ff fdd2 	bl	8cc8 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    9124:	9b00      	ldr	r3, [sp, #0]
    9126:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    9128:	9b00      	ldr	r3, [sp, #0]
    912a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    912c:	461a      	mov	r2, r3
    912e:	9802      	ldr	r0, [sp, #8]
    9130:	f7ff fef6 	bl	8f20 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    9134:	9b00      	ldr	r3, [sp, #0]
    9136:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    913a:	4619      	mov	r1, r3
    913c:	9801      	ldr	r0, [sp, #4]
    913e:	f000 f955 	bl	93ec <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    9142:	9b00      	ldr	r3, [sp, #0]
    9144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9146:	2b00      	cmp	r3, #0
    9148:	d01c      	beq.n	9184 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    914a:	2300      	movs	r3, #0
    914c:	f88d 300f 	strb.w	r3, [sp, #15]
    9150:	e011      	b.n	9176 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    9152:	9b00      	ldr	r3, [sp, #0]
    9154:	6b59      	ldr	r1, [r3, #52]	; 0x34
    9156:	f89d 200f 	ldrb.w	r2, [sp, #15]
    915a:	4613      	mov	r3, r2
    915c:	005b      	lsls	r3, r3, #1
    915e:	4413      	add	r3, r2
    9160:	009b      	lsls	r3, r3, #2
    9162:	440b      	add	r3, r1
    9164:	4619      	mov	r1, r3
    9166:	9801      	ldr	r0, [sp, #4]
    9168:	f000 f9c2 	bl	94f0 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    916c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9170:	3301      	adds	r3, #1
    9172:	f88d 300f 	strb.w	r3, [sp, #15]
    9176:	9b00      	ldr	r3, [sp, #0]
    9178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    917c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9180:	429a      	cmp	r2, r3
    9182:	d3e6      	bcc.n	9152 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    9184:	9b00      	ldr	r3, [sp, #0]
    9186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    9188:	490f      	ldr	r1, [pc, #60]	; (91c8 <Adc_Ip_Init+0x1aa>)
    918a:	9b01      	ldr	r3, [sp, #4]
    918c:	204c      	movs	r0, #76	; 0x4c
    918e:	fb00 f303 	mul.w	r3, r0, r3
    9192:	440b      	add	r3, r1
    9194:	3308      	adds	r3, #8
    9196:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    9198:	9b00      	ldr	r3, [sp, #0]
    919a:	685a      	ldr	r2, [r3, #4]
    919c:	490a      	ldr	r1, [pc, #40]	; (91c8 <Adc_Ip_Init+0x1aa>)
    919e:	9b01      	ldr	r3, [sp, #4]
    91a0:	204c      	movs	r0, #76	; 0x4c
    91a2:	fb00 f303 	mul.w	r3, r0, r3
    91a6:	440b      	add	r3, r1
    91a8:	3304      	adds	r3, #4
    91aa:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    91ac:	4a06      	ldr	r2, [pc, #24]	; (91c8 <Adc_Ip_Init+0x1aa>)
    91ae:	9b01      	ldr	r3, [sp, #4]
    91b0:	214c      	movs	r1, #76	; 0x4c
    91b2:	fb01 f303 	mul.w	r3, r1, r3
    91b6:	4413      	add	r3, r2
    91b8:	2201      	movs	r2, #1
    91ba:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    91bc:	bf00      	nop
    91be:	b007      	add	sp, #28
    91c0:	f85d fb04 	ldr.w	pc, [sp], #4
    91c4:	0001647c 	.word	0x0001647c
    91c8:	1fff8d68 	.word	0x1fff8d68

000091cc <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    91cc:	b500      	push	{lr}
    91ce:	b0c3      	sub	sp, #268	; 0x10c
    91d0:	ab42      	add	r3, sp, #264	; 0x108
    91d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    91d6:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    91d8:	2300      	movs	r3, #0
    91da:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    91dc:	2303      	movs	r3, #3
    91de:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    91e0:	2300      	movs	r3, #0
    91e2:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    91e4:	230c      	movs	r3, #12
    91e6:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    91ea:	2300      	movs	r3, #0
    91ec:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    91f0:	2300      	movs	r3, #0
    91f2:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    91f4:	2300      	movs	r3, #0
    91f6:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    91f8:	2300      	movs	r3, #0
    91fa:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    91fc:	2300      	movs	r3, #0
    91fe:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    9202:	2300      	movs	r3, #0
    9204:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    9206:	2300      	movs	r3, #0
    9208:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    920c:	2300      	movs	r3, #0
    920e:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    9212:	2300      	movs	r3, #0
    9214:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    9218:	2300      	movs	r3, #0
    921a:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    921e:	2300      	movs	r3, #0
    9220:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    9224:	2300      	movs	r3, #0
    9226:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    922a:	2304      	movs	r3, #4
    922c:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    9230:	2300      	movs	r3, #0
    9232:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    9236:	2310      	movs	r3, #16
    9238:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    923c:	2300      	movs	r3, #0
    923e:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    9242:	e02b      	b.n	929c <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    9244:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    9248:	ab42      	add	r3, sp, #264	; 0x108
    924a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    924e:	4613      	mov	r3, r2
    9250:	005b      	lsls	r3, r3, #1
    9252:	4413      	add	r3, r2
    9254:	009b      	lsls	r3, r3, #2
    9256:	440b      	add	r3, r1
    9258:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    925c:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    925e:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    9262:	ab42      	add	r3, sp, #264	; 0x108
    9264:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    9268:	4613      	mov	r3, r2
    926a:	005b      	lsls	r3, r3, #1
    926c:	4413      	add	r3, r2
    926e:	009b      	lsls	r3, r3, #2
    9270:	440b      	add	r3, r1
    9272:	3304      	adds	r3, #4
    9274:	221f      	movs	r2, #31
    9276:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    9278:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    927c:	ab42      	add	r3, sp, #264	; 0x108
    927e:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    9282:	4613      	mov	r3, r2
    9284:	005b      	lsls	r3, r3, #1
    9286:	4413      	add	r3, r2
    9288:	009b      	lsls	r3, r3, #2
    928a:	440b      	add	r3, r1
    928c:	3308      	adds	r3, #8
    928e:	2200      	movs	r2, #0
    9290:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    9292:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    9296:	3301      	adds	r3, #1
    9298:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    929c:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    92a0:	2b0f      	cmp	r3, #15
    92a2:	d9cf      	bls.n	9244 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    92a4:	ab02      	add	r3, sp, #8
    92a6:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    92a8:	2300      	movs	r3, #0
    92aa:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    92ac:	aa32      	add	r2, sp, #200	; 0xc8
    92ae:	ab42      	add	r3, sp, #264	; 0x108
    92b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    92b4:	4611      	mov	r1, r2
    92b6:	6818      	ldr	r0, [r3, #0]
    92b8:	f7ff feb1 	bl	901e <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    92bc:	4a07      	ldr	r2, [pc, #28]	; (92dc <Adc_Ip_DeInit+0x110>)
    92be:	ab42      	add	r3, sp, #264	; 0x108
    92c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    92c4:	681b      	ldr	r3, [r3, #0]
    92c6:	214c      	movs	r1, #76	; 0x4c
    92c8:	fb01 f303 	mul.w	r3, r1, r3
    92cc:	4413      	add	r3, r2
    92ce:	2200      	movs	r2, #0
    92d0:	701a      	strb	r2, [r3, #0]
}
    92d2:	bf00      	nop
    92d4:	b043      	add	sp, #268	; 0x10c
    92d6:	f85d fb04 	ldr.w	pc, [sp], #4
    92da:	bf00      	nop
    92dc:	1fff8d68 	.word	0x1fff8d68

000092e0 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    92e0:	b500      	push	{lr}
    92e2:	b087      	sub	sp, #28
    92e4:	9003      	str	r0, [sp, #12]
    92e6:	460b      	mov	r3, r1
    92e8:	9201      	str	r2, [sp, #4]
    92ea:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    92ee:	4a0a      	ldr	r2, [pc, #40]	; (9318 <Adc_Ip_SetAveraging+0x38>)
    92f0:	9b03      	ldr	r3, [sp, #12]
    92f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92f6:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    92f8:	f006 ff5e 	bl	101b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    92fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9300:	9a01      	ldr	r2, [sp, #4]
    9302:	4619      	mov	r1, r3
    9304:	9805      	ldr	r0, [sp, #20]
    9306:	f7ff fd73 	bl	8df0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    930a:	f006 ff81 	bl	10210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    930e:	bf00      	nop
    9310:	b007      	add	sp, #28
    9312:	f85d fb04 	ldr.w	pc, [sp], #4
    9316:	bf00      	nop
    9318:	0001647c 	.word	0x0001647c

0000931c <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    931c:	b500      	push	{lr}
    931e:	b085      	sub	sp, #20
    9320:	9001      	str	r0, [sp, #4]
    9322:	460b      	mov	r3, r1
    9324:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9328:	4a09      	ldr	r2, [pc, #36]	; (9350 <Adc_Ip_SetSampleTime+0x34>)
    932a:	9b01      	ldr	r3, [sp, #4]
    932c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9330:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    9332:	f006 fbbb 	bl	faac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    9336:	f89d 3003 	ldrb.w	r3, [sp, #3]
    933a:	4619      	mov	r1, r3
    933c:	9803      	ldr	r0, [sp, #12]
    933e:	f7ff fd36 	bl	8dae <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    9342:	f006 fbdf 	bl	fb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    9346:	bf00      	nop
    9348:	b005      	add	sp, #20
    934a:	f85d fb04 	ldr.w	pc, [sp], #4
    934e:	bf00      	nop
    9350:	0001647c 	.word	0x0001647c

00009354 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    9354:	b500      	push	{lr}
    9356:	b085      	sub	sp, #20
    9358:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    935a:	4a0a      	ldr	r2, [pc, #40]	; (9384 <Adc_Ip_EnableDma+0x30>)
    935c:	9b01      	ldr	r3, [sp, #4]
    935e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9362:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    9364:	f006 fed6 	bl	10114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    9368:	9b03      	ldr	r3, [sp, #12]
    936a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    936e:	f043 0204 	orr.w	r2, r3, #4
    9372:	9b03      	ldr	r3, [sp, #12]
    9374:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    9378:	f006 fef8 	bl	1016c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    937c:	bf00      	nop
    937e:	b005      	add	sp, #20
    9380:	f85d fb04 	ldr.w	pc, [sp], #4
    9384:	0001647c 	.word	0x0001647c

00009388 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    9388:	b500      	push	{lr}
    938a:	b085      	sub	sp, #20
    938c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    938e:	4a0a      	ldr	r2, [pc, #40]	; (93b8 <Adc_Ip_DisableDma+0x30>)
    9390:	9b01      	ldr	r3, [sp, #4]
    9392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9396:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    9398:	f006 fd74 	bl	fe84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    939c:	9b03      	ldr	r3, [sp, #12]
    939e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    93a2:	f023 0204 	bic.w	r2, r3, #4
    93a6:	9b03      	ldr	r3, [sp, #12]
    93a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    93ac:	f006 fd96 	bl	fedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    93b0:	bf00      	nop
    93b2:	b005      	add	sp, #20
    93b4:	f85d fb04 	ldr.w	pc, [sp], #4
    93b8:	0001647c 	.word	0x0001647c

000093bc <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    93bc:	b500      	push	{lr}
    93be:	b085      	sub	sp, #20
    93c0:	9001      	str	r0, [sp, #4]
    93c2:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    93c4:	4a08      	ldr	r2, [pc, #32]	; (93e8 <Adc_Ip_SetTriggerMode+0x2c>)
    93c6:	9b01      	ldr	r3, [sp, #4]
    93c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93cc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    93ce:	f006 fdab 	bl	ff28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    93d2:	9900      	ldr	r1, [sp, #0]
    93d4:	9803      	ldr	r0, [sp, #12]
    93d6:	f7ff fd4e 	bl	8e76 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    93da:	f006 fdd1 	bl	ff80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    93de:	bf00      	nop
    93e0:	b005      	add	sp, #20
    93e2:	f85d fb04 	ldr.w	pc, [sp], #4
    93e6:	bf00      	nop
    93e8:	0001647c 	.word	0x0001647c

000093ec <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    93ec:	b500      	push	{lr}
    93ee:	b085      	sub	sp, #20
    93f0:	9001      	str	r0, [sp, #4]
    93f2:	460b      	mov	r3, r1
    93f4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    93f8:	4a11      	ldr	r2, [pc, #68]	; (9440 <Adc_Ip_SetContinuousMode+0x54>)
    93fa:	9b01      	ldr	r3, [sp, #4]
    93fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9400:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    9402:	f006 ffcf 	bl	103a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    9406:	9b03      	ldr	r3, [sp, #12]
    9408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    940c:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    940e:	9b02      	ldr	r3, [sp, #8]
    9410:	f023 0308 	bic.w	r3, r3, #8
    9414:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    9416:	f89d 3003 	ldrb.w	r3, [sp, #3]
    941a:	2b00      	cmp	r3, #0
    941c:	d001      	beq.n	9422 <Adc_Ip_SetContinuousMode+0x36>
    941e:	2308      	movs	r3, #8
    9420:	e000      	b.n	9424 <Adc_Ip_SetContinuousMode+0x38>
    9422:	2300      	movs	r3, #0
    9424:	9a02      	ldr	r2, [sp, #8]
    9426:	4313      	orrs	r3, r2
    9428:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    942a:	9b03      	ldr	r3, [sp, #12]
    942c:	9a02      	ldr	r2, [sp, #8]
    942e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    9432:	f006 ffe3 	bl	103fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    9436:	bf00      	nop
    9438:	b005      	add	sp, #20
    943a:	f85d fb04 	ldr.w	pc, [sp], #4
    943e:	bf00      	nop
    9440:	0001647c 	.word	0x0001647c

00009444 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    9444:	b500      	push	{lr}
    9446:	b085      	sub	sp, #20
    9448:	9001      	str	r0, [sp, #4]
    944a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    944c:	4a0e      	ldr	r2, [pc, #56]	; (9488 <Adc_Ip_SetResolution+0x44>)
    944e:	9b01      	ldr	r3, [sp, #4]
    9450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9454:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    9456:	f005 fff5 	bl	f444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    945a:	9b03      	ldr	r3, [sp, #12]
    945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    945e:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    9460:	9b02      	ldr	r3, [sp, #8]
    9462:	f023 030c 	bic.w	r3, r3, #12
    9466:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    9468:	9b00      	ldr	r3, [sp, #0]
    946a:	009b      	lsls	r3, r3, #2
    946c:	f003 030c 	and.w	r3, r3, #12
    9470:	9a02      	ldr	r2, [sp, #8]
    9472:	4313      	orrs	r3, r2
    9474:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    9476:	9b03      	ldr	r3, [sp, #12]
    9478:	9a02      	ldr	r2, [sp, #8]
    947a:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    947c:	f006 f80e 	bl	f49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    9480:	bf00      	nop
    9482:	b005      	add	sp, #20
    9484:	f85d fb04 	ldr.w	pc, [sp], #4
    9488:	0001647c 	.word	0x0001647c

0000948c <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    948c:	b500      	push	{lr}
    948e:	b085      	sub	sp, #20
    9490:	9001      	str	r0, [sp, #4]
    9492:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9494:	4a15      	ldr	r2, [pc, #84]	; (94ec <Adc_Ip_SetClockMode+0x60>)
    9496:	9b01      	ldr	r3, [sp, #4]
    9498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    949c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    949e:	f006 f96b 	bl	f778 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    94a2:	9b00      	ldr	r3, [sp, #0]
    94a4:	6819      	ldr	r1, [r3, #0]
    94a6:	9b00      	ldr	r3, [sp, #0]
    94a8:	685b      	ldr	r3, [r3, #4]
    94aa:	461a      	mov	r2, r3
    94ac:	9803      	ldr	r0, [sp, #12]
    94ae:	f7ff fc23 	bl	8cf8 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    94b2:	f006 f98d 	bl	f7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    94b6:	f006 fa55 	bl	f964 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    94ba:	9b00      	ldr	r3, [sp, #0]
    94bc:	7a1b      	ldrb	r3, [r3, #8]
    94be:	4619      	mov	r1, r3
    94c0:	9803      	ldr	r0, [sp, #12]
    94c2:	f7ff fc74 	bl	8dae <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    94c6:	f006 fa79 	bl	f9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    94ca:	f006 fec7 	bl	1025c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    94ce:	9b00      	ldr	r3, [sp, #0]
    94d0:	7a59      	ldrb	r1, [r3, #9]
    94d2:	9b00      	ldr	r3, [sp, #0]
    94d4:	68db      	ldr	r3, [r3, #12]
    94d6:	461a      	mov	r2, r3
    94d8:	9803      	ldr	r0, [sp, #12]
    94da:	f7ff fc89 	bl	8df0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    94de:	f006 fee9 	bl	102b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    94e2:	bf00      	nop
    94e4:	b005      	add	sp, #20
    94e6:	f85d fb04 	ldr.w	pc, [sp], #4
    94ea:	bf00      	nop
    94ec:	0001647c 	.word	0x0001647c

000094f0 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    94f0:	b510      	push	{r4, lr}
    94f2:	b084      	sub	sp, #16
    94f4:	9001      	str	r0, [sp, #4]
    94f6:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    94f8:	4a13      	ldr	r2, [pc, #76]	; (9548 <Adc_Ip_ConfigChannel+0x58>)
    94fa:	9b01      	ldr	r3, [sp, #4]
    94fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9500:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    9502:	9b00      	ldr	r3, [sp, #0]
    9504:	685b      	ldr	r3, [r3, #4]
    9506:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    9508:	f006 fc6a 	bl	fde0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    950c:	9b00      	ldr	r3, [sp, #0]
    950e:	7819      	ldrb	r1, [r3, #0]
    9510:	9b00      	ldr	r3, [sp, #0]
    9512:	7a1b      	ldrb	r3, [r3, #8]
    9514:	9a02      	ldr	r2, [sp, #8]
    9516:	9803      	ldr	r0, [sp, #12]
    9518:	f7ff fcd5 	bl	8ec6 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    951c:	f006 fc8c 	bl	fe38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    9520:	9b00      	ldr	r3, [sp, #0]
    9522:	781b      	ldrb	r3, [r3, #0]
    9524:	461c      	mov	r4, r3
    9526:	9b00      	ldr	r3, [sp, #0]
    9528:	6859      	ldr	r1, [r3, #4]
    952a:	4808      	ldr	r0, [pc, #32]	; (954c <Adc_Ip_ConfigChannel+0x5c>)
    952c:	9a01      	ldr	r2, [sp, #4]
    952e:	4613      	mov	r3, r2
    9530:	00db      	lsls	r3, r3, #3
    9532:	4413      	add	r3, r2
    9534:	005b      	lsls	r3, r3, #1
    9536:	4413      	add	r3, r2
    9538:	4423      	add	r3, r4
    953a:	3302      	adds	r3, #2
    953c:	009b      	lsls	r3, r3, #2
    953e:	4403      	add	r3, r0
    9540:	6059      	str	r1, [r3, #4]
}
    9542:	bf00      	nop
    9544:	b004      	add	sp, #16
    9546:	bd10      	pop	{r4, pc}
    9548:	0001647c 	.word	0x0001647c
    954c:	1fff8d68 	.word	0x1fff8d68

00009550 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    9550:	b500      	push	{lr}
    9552:	b089      	sub	sp, #36	; 0x24
    9554:	9001      	str	r0, [sp, #4]
    9556:	460b      	mov	r3, r1
    9558:	f88d 3003 	strb.w	r3, [sp, #3]
    955c:	4613      	mov	r3, r2
    955e:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9562:	4a24      	ldr	r2, [pc, #144]	; (95f4 <Adc_Ip_SetDisabledChannel+0xa4>)
    9564:	9b01      	ldr	r3, [sp, #4]
    9566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    956a:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    956c:	2300      	movs	r3, #0
    956e:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    9570:	2100      	movs	r1, #0
    9572:	4821      	ldr	r0, [pc, #132]	; (95f8 <Adc_Ip_SetDisabledChannel+0xa8>)
    9574:	f7f9 f954 	bl	2820 <OsIf_MicrosToTicks>
    9578:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    957a:	2000      	movs	r0, #0
    957c:	f7f9 f904 	bl	2788 <OsIf_GetCounter>
    9580:	4603      	mov	r3, r0
    9582:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    9584:	2300      	movs	r3, #0
    9586:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    9588:	f006 fae2 	bl	fb50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    958c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9590:	9b05      	ldr	r3, [sp, #20]
    9592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9596:	f89d 2003 	ldrb.w	r2, [sp, #3]
    959a:	f043 011f 	orr.w	r1, r3, #31
    959e:	9b05      	ldr	r3, [sp, #20]
    95a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    95a4:	f006 fb00 	bl	fba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    95a8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    95ac:	2b00      	cmp	r3, #0
    95ae:	d01c      	beq.n	95ea <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    95b0:	e008      	b.n	95c4 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    95b2:	ab03      	add	r3, sp, #12
    95b4:	2100      	movs	r1, #0
    95b6:	4618      	mov	r0, r3
    95b8:	f7f9 f8ff 	bl	27ba <OsIf_GetElapsed>
    95bc:	4602      	mov	r2, r0
    95be:	9b06      	ldr	r3, [sp, #24]
    95c0:	4413      	add	r3, r2
    95c2:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    95c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    95c8:	9b05      	ldr	r3, [sp, #20]
    95ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    95ce:	f003 031f 	and.w	r3, r3, #31
    95d2:	2b1f      	cmp	r3, #31
    95d4:	d003      	beq.n	95de <Adc_Ip_SetDisabledChannel+0x8e>
    95d6:	9a06      	ldr	r2, [sp, #24]
    95d8:	9b04      	ldr	r3, [sp, #16]
    95da:	429a      	cmp	r2, r3
    95dc:	d3e9      	bcc.n	95b2 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    95de:	9a06      	ldr	r2, [sp, #24]
    95e0:	9b04      	ldr	r3, [sp, #16]
    95e2:	429a      	cmp	r2, r3
    95e4:	d301      	bcc.n	95ea <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    95e6:	2302      	movs	r3, #2
    95e8:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    95ea:	9b07      	ldr	r3, [sp, #28]
}
    95ec:	4618      	mov	r0, r3
    95ee:	b009      	add	sp, #36	; 0x24
    95f0:	f85d fb04 	ldr.w	pc, [sp], #4
    95f4:	0001647c 	.word	0x0001647c
    95f8:	000186a0 	.word	0x000186a0

000095fc <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    95fc:	b500      	push	{lr}
    95fe:	b087      	sub	sp, #28
    9600:	9003      	str	r0, [sp, #12]
    9602:	9102      	str	r1, [sp, #8]
    9604:	4613      	mov	r3, r2
    9606:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    960a:	4a0a      	ldr	r2, [pc, #40]	; (9634 <Adc_Ip_StartConversion+0x38>)
    960c:	9b03      	ldr	r3, [sp, #12]
    960e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9612:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    9614:	f006 faee 	bl	fbf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    9618:	f89d 3007 	ldrb.w	r3, [sp, #7]
    961c:	9a02      	ldr	r2, [sp, #8]
    961e:	2100      	movs	r1, #0
    9620:	9805      	ldr	r0, [sp, #20]
    9622:	f7ff fc50 	bl	8ec6 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    9626:	f006 fb11 	bl	fc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    962a:	bf00      	nop
    962c:	b007      	add	sp, #28
    962e:	f85d fb04 	ldr.w	pc, [sp], #4
    9632:	bf00      	nop
    9634:	0001647c 	.word	0x0001647c

00009638 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    9638:	b084      	sub	sp, #16
    963a:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    963c:	4a0b      	ldr	r2, [pc, #44]	; (966c <Adc_Ip_GetConvActiveFlag+0x34>)
    963e:	9b01      	ldr	r3, [sp, #4]
    9640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9644:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    9646:	9b03      	ldr	r3, [sp, #12]
    9648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    964c:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    964e:	9b02      	ldr	r3, [sp, #8]
    9650:	09db      	lsrs	r3, r3, #7
    9652:	f003 0301 	and.w	r3, r3, #1
    9656:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    9658:	9b02      	ldr	r3, [sp, #8]
    965a:	2b00      	cmp	r3, #0
    965c:	bf14      	ite	ne
    965e:	2301      	movne	r3, #1
    9660:	2300      	moveq	r3, #0
    9662:	b2db      	uxtb	r3, r3
}
    9664:	4618      	mov	r0, r3
    9666:	b004      	add	sp, #16
    9668:	4770      	bx	lr
    966a:	bf00      	nop
    966c:	0001647c 	.word	0x0001647c

00009670 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    9670:	b500      	push	{lr}
    9672:	b085      	sub	sp, #20
    9674:	9001      	str	r0, [sp, #4]
    9676:	460b      	mov	r3, r1
    9678:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    967c:	4a08      	ldr	r2, [pc, #32]	; (96a0 <Adc_Ip_GetChanInterrupt+0x30>)
    967e:	9b01      	ldr	r3, [sp, #4]
    9680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9684:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    968c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    968e:	9803      	ldr	r0, [sp, #12]
    9690:	f7ff fc5e 	bl	8f50 <Adc_HwAcc_GetAIEN>
    9694:	4603      	mov	r3, r0
}
    9696:	4618      	mov	r0, r3
    9698:	b005      	add	sp, #20
    969a:	f85d fb04 	ldr.w	pc, [sp], #4
    969e:	bf00      	nop
    96a0:	0001647c 	.word	0x0001647c

000096a4 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    96a4:	b500      	push	{lr}
    96a6:	b085      	sub	sp, #20
    96a8:	9001      	str	r0, [sp, #4]
    96aa:	460b      	mov	r3, r1
    96ac:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    96b0:	4a08      	ldr	r2, [pc, #32]	; (96d4 <Adc_Ip_GetConvCompleteFlag+0x30>)
    96b2:	9b01      	ldr	r3, [sp, #4]
    96b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    96bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    96c0:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    96c2:	9803      	ldr	r0, [sp, #12]
    96c4:	f7ff fc52 	bl	8f6c <Adc_HwAcc_GetCOCO>
    96c8:	4603      	mov	r3, r0
}
    96ca:	4618      	mov	r0, r3
    96cc:	b005      	add	sp, #20
    96ce:	f85d fb04 	ldr.w	pc, [sp], #4
    96d2:	bf00      	nop
    96d4:	0001647c 	.word	0x0001647c

000096d8 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    96d8:	b500      	push	{lr}
    96da:	b085      	sub	sp, #20
    96dc:	9001      	str	r0, [sp, #4]
    96de:	460b      	mov	r3, r1
    96e0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    96e4:	4a07      	ldr	r2, [pc, #28]	; (9704 <Adc_Ip_GetConvData+0x2c>)
    96e6:	9b01      	ldr	r3, [sp, #4]
    96e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96ec:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    96ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    96f2:	4619      	mov	r1, r3
    96f4:	9803      	ldr	r0, [sp, #12]
    96f6:	f7ff fc47 	bl	8f88 <Adc_HwAcc_GetData>
    96fa:	4603      	mov	r3, r0
}
    96fc:	4618      	mov	r0, r3
    96fe:	b005      	add	sp, #20
    9700:	f85d fb04 	ldr.w	pc, [sp], #4
    9704:	0001647c 	.word	0x0001647c

00009708 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    9708:	b500      	push	{lr}
    970a:	b093      	sub	sp, #76	; 0x4c
    970c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    970e:	4a59      	ldr	r2, [pc, #356]	; (9874 <Adc_Ip_DoCalibration+0x16c>)
    9710:	9b01      	ldr	r3, [sp, #4]
    9712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9716:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9718:	2300      	movs	r3, #0
    971a:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    971c:	2100      	movs	r1, #0
    971e:	4856      	ldr	r0, [pc, #344]	; (9878 <Adc_Ip_DoCalibration+0x170>)
    9720:	f7f9 f87e 	bl	2820 <OsIf_MicrosToTicks>
    9724:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    9726:	2000      	movs	r0, #0
    9728:	f7f9 f82e 	bl	2788 <OsIf_GetCounter>
    972c:	4603      	mov	r3, r0
    972e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    9730:	2300      	movs	r3, #0
    9732:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    9734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    973a:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    973c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    973e:	089b      	lsrs	r3, r3, #2
    9740:	f003 0301 	and.w	r3, r3, #1
    9744:	2b00      	cmp	r3, #0
    9746:	bf14      	ite	ne
    9748:	2301      	movne	r3, #1
    974a:	2300      	moveq	r3, #0
    974c:	b2db      	uxtb	r3, r3
    974e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    9752:	980d      	ldr	r0, [sp, #52]	; 0x34
    9754:	f7ff fb71 	bl	8e3a <Adc_HwAcc_GetAverageSelect>
    9758:	4603      	mov	r3, r0
    975a:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    975c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    975e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9760:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    9762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9764:	b2db      	uxtb	r3, r3
    9766:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    976a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    976c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9770:	4618      	mov	r0, r3
    9772:	f7ff fb99 	bl	8ea8 <Adc_HwAcc_GetTriggerMode>
    9776:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    9778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    977c:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    977e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9780:	f7ff fad8 	bl	8d34 <Adc_HwAcc_GetClockDivide>
    9784:	4603      	mov	r3, r0
    9786:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    9788:	980d      	ldr	r0, [sp, #52]	; 0x34
    978a:	f7ff faf2 	bl	8d72 <Adc_HwAcc_GetInputClock>
    978e:	4603      	mov	r3, r0
    9790:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    9792:	2301      	movs	r3, #1
    9794:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    9798:	2303      	movs	r3, #3
    979a:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    979c:	230c      	movs	r3, #12
    979e:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    97a2:	4a36      	ldr	r2, [pc, #216]	; (987c <Adc_Ip_DoCalibration+0x174>)
    97a4:	9b01      	ldr	r3, [sp, #4]
    97a6:	214c      	movs	r1, #76	; 0x4c
    97a8:	fb01 f303 	mul.w	r3, r1, r3
    97ac:	4413      	add	r3, r2
    97ae:	3304      	adds	r3, #4
    97b0:	681b      	ldr	r3, [r3, #0]
    97b2:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    97b4:	9b08      	ldr	r3, [sp, #32]
    97b6:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    97b8:	ab03      	add	r3, sp, #12
    97ba:	2200      	movs	r2, #0
    97bc:	4619      	mov	r1, r3
    97be:	980f      	ldr	r0, [sp, #60]	; 0x3c
    97c0:	f7ff fbfa 	bl	8fb8 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    97c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97c6:	2200      	movs	r2, #0
    97c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    97cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97ce:	2200      	movs	r2, #0
    97d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    97d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97d6:	2200      	movs	r2, #0
    97d8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    97dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97de:	2200      	movs	r2, #0
    97e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    97e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97e6:	2200      	movs	r2, #0
    97e8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    97ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97ee:	2200      	movs	r2, #0
    97f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    97f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97f6:	2200      	movs	r2, #0
    97f8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    97fc:	f006 fd80 	bl	10300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    9800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    9806:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    9808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    980a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    980e:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    9810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9816:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    9818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    981a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    981c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    9820:	f006 fd9a 	bl	10358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    9824:	e008      	b.n	9838 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    9826:	ab0b      	add	r3, sp, #44	; 0x2c
    9828:	2100      	movs	r1, #0
    982a:	4618      	mov	r0, r3
    982c:	f7f8 ffc5 	bl	27ba <OsIf_GetElapsed>
    9830:	4602      	mov	r2, r0
    9832:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9834:	4413      	add	r3, r2
    9836:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    9838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    983a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    983e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9842:	2b00      	cmp	r3, #0
    9844:	d003      	beq.n	984e <Adc_Ip_DoCalibration+0x146>
    9846:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    984a:	429a      	cmp	r2, r3
    984c:	d3eb      	bcc.n	9826 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    984e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9852:	429a      	cmp	r2, r3
    9854:	d301      	bcc.n	985a <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    9856:	2302      	movs	r3, #2
    9858:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    985a:	ab07      	add	r3, sp, #28
    985c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    985e:	4619      	mov	r1, r3
    9860:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9862:	f7ff fba9 	bl	8fb8 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    9866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9868:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    986a:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    986c:	4618      	mov	r0, r3
    986e:	b013      	add	sp, #76	; 0x4c
    9870:	f85d fb04 	ldr.w	pc, [sp], #4
    9874:	0001647c 	.word	0x0001647c
    9878:	000186a0 	.word	0x000186a0
    987c:	1fff8d68 	.word	0x1fff8d68

00009880 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    9880:	b500      	push	{lr}
    9882:	b089      	sub	sp, #36	; 0x24
    9884:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9886:	4a1e      	ldr	r2, [pc, #120]	; (9900 <Adc_Ip_ClearLatchedTriggers+0x80>)
    9888:	9b01      	ldr	r3, [sp, #4]
    988a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    988e:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9890:	2300      	movs	r3, #0
    9892:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    9894:	2100      	movs	r1, #0
    9896:	481b      	ldr	r0, [pc, #108]	; (9904 <Adc_Ip_ClearLatchedTriggers+0x84>)
    9898:	f7f8 ffc2 	bl	2820 <OsIf_MicrosToTicks>
    989c:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    989e:	2000      	movs	r0, #0
    98a0:	f7f8 ff72 	bl	2788 <OsIf_GetCounter>
    98a4:	4603      	mov	r3, r0
    98a6:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    98a8:	2300      	movs	r3, #0
    98aa:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    98ac:	f005 ffb6 	bl	f81c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    98b0:	9b05      	ldr	r3, [sp, #20]
    98b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    98b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    98b8:	9b05      	ldr	r3, [sp, #20]
    98ba:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    98bc:	f005 ffda 	bl	f874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    98c0:	e008      	b.n	98d4 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    98c2:	ab03      	add	r3, sp, #12
    98c4:	2100      	movs	r1, #0
    98c6:	4618      	mov	r0, r3
    98c8:	f7f8 ff77 	bl	27ba <OsIf_GetElapsed>
    98cc:	4602      	mov	r2, r0
    98ce:	9b06      	ldr	r3, [sp, #24]
    98d0:	4413      	add	r3, r2
    98d2:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    98d4:	9b05      	ldr	r3, [sp, #20]
    98d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    98da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    98de:	2b00      	cmp	r3, #0
    98e0:	d003      	beq.n	98ea <Adc_Ip_ClearLatchedTriggers+0x6a>
    98e2:	9a06      	ldr	r2, [sp, #24]
    98e4:	9b04      	ldr	r3, [sp, #16]
    98e6:	429a      	cmp	r2, r3
    98e8:	d3eb      	bcc.n	98c2 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    98ea:	9a06      	ldr	r2, [sp, #24]
    98ec:	9b04      	ldr	r3, [sp, #16]
    98ee:	429a      	cmp	r2, r3
    98f0:	d301      	bcc.n	98f6 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    98f2:	2302      	movs	r3, #2
    98f4:	9307      	str	r3, [sp, #28]
    }

    return Status;
    98f6:	9b07      	ldr	r3, [sp, #28]
}
    98f8:	4618      	mov	r0, r3
    98fa:	b009      	add	sp, #36	; 0x24
    98fc:	f85d fb04 	ldr.w	pc, [sp], #4
    9900:	0001647c 	.word	0x0001647c
    9904:	000186a0 	.word	0x000186a0

00009908 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    9908:	b500      	push	{lr}
    990a:	b085      	sub	sp, #20
    990c:	9001      	str	r0, [sp, #4]
    990e:	460b      	mov	r3, r1
    9910:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9914:	4a0c      	ldr	r2, [pc, #48]	; (9948 <Adc_Ip_EnableChannelNotification+0x40>)
    9916:	9b01      	ldr	r3, [sp, #4]
    9918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    991c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    991e:	f006 f9bb 	bl	fc98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    9922:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9926:	9b03      	ldr	r3, [sp, #12]
    9928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    992c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9930:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    9934:	9b03      	ldr	r3, [sp, #12]
    9936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    993a:	f006 f9d9 	bl	fcf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    993e:	bf00      	nop
    9940:	b005      	add	sp, #20
    9942:	f85d fb04 	ldr.w	pc, [sp], #4
    9946:	bf00      	nop
    9948:	0001647c 	.word	0x0001647c

0000994c <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    994c:	b500      	push	{lr}
    994e:	b085      	sub	sp, #20
    9950:	9001      	str	r0, [sp, #4]
    9952:	460b      	mov	r3, r1
    9954:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9958:	4a0c      	ldr	r2, [pc, #48]	; (998c <Adc_Ip_DisableChannelNotification+0x40>)
    995a:	9b01      	ldr	r3, [sp, #4]
    995c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9960:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    9962:	f006 f9eb 	bl	fd3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    9966:	f89d 2003 	ldrb.w	r2, [sp, #3]
    996a:	9b03      	ldr	r3, [sp, #12]
    996c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9970:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9974:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    9978:	9b03      	ldr	r3, [sp, #12]
    997a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    997e:	f006 fa09 	bl	fd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    9982:	bf00      	nop
    9984:	b005      	add	sp, #20
    9986:	f85d fb04 	ldr.w	pc, [sp], #4
    998a:	bf00      	nop
    998c:	0001647c 	.word	0x0001647c

00009990 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    9990:	b500      	push	{lr}
    9992:	b085      	sub	sp, #20
    9994:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9996:	4a0a      	ldr	r2, [pc, #40]	; (99c0 <Adc_Ip_ClearTrigErrReg+0x30>)
    9998:	9b01      	ldr	r3, [sp, #4]
    999a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    999e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    99a0:	f006 fb66 	bl	10070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    99a4:	9b03      	ldr	r3, [sp, #12]
    99a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    99aa:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    99ae:	9b03      	ldr	r3, [sp, #12]
    99b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    99b4:	f006 fb88 	bl	100c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    99b8:	bf00      	nop
    99ba:	b005      	add	sp, #20
    99bc:	f85d fb04 	ldr.w	pc, [sp], #4
    99c0:	0001647c 	.word	0x0001647c

000099c4 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    99c4:	b084      	sub	sp, #16
    99c6:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    99c8:	4a06      	ldr	r2, [pc, #24]	; (99e4 <Adc_Ip_GetTrigErrReg+0x20>)
    99ca:	9b01      	ldr	r3, [sp, #4]
    99cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99d0:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    99d2:	9b03      	ldr	r3, [sp, #12]
    99d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    99d8:	0e1b      	lsrs	r3, r3, #24
    99da:	f003 030f 	and.w	r3, r3, #15
}
    99de:	4618      	mov	r0, r3
    99e0:	b004      	add	sp, #16
    99e2:	4770      	bx	lr
    99e4:	0001647c 	.word	0x0001647c

000099e8 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    99e8:	b082      	sub	sp, #8
    99ea:	9001      	str	r0, [sp, #4]
    99ec:	460b      	mov	r3, r1
    99ee:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    99f2:	4a06      	ldr	r2, [pc, #24]	; (9a0c <Adc_Ip_GetDataAddress+0x24>)
    99f4:	9b01      	ldr	r3, [sp, #4]
    99f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    99fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    99fe:	3312      	adds	r3, #18
    9a00:	009b      	lsls	r3, r3, #2
    9a02:	4413      	add	r3, r2
}
    9a04:	4618      	mov	r0, r3
    9a06:	b002      	add	sp, #8
    9a08:	4770      	bx	lr
    9a0a:	bf00      	nop
    9a0c:	0001647c 	.word	0x0001647c

00009a10 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    9a10:	b088      	sub	sp, #32
    9a12:	9003      	str	r0, [sp, #12]
    9a14:	9102      	str	r1, [sp, #8]
    9a16:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9a18:	4a25      	ldr	r2, [pc, #148]	; (9ab0 <Adc_Ip_GetChanData+0xa0>)
    9a1a:	9b03      	ldr	r3, [sp, #12]
    9a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a20:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9a22:	2300      	movs	r3, #0
    9a24:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    9a26:	2300      	movs	r3, #0
    9a28:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    9a2c:	2300      	movs	r3, #0
    9a2e:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9a32:	2300      	movs	r3, #0
    9a34:	f88d 3019 	strb.w	r3, [sp, #25]
    9a38:	e019      	b.n	9a6e <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    9a3a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    9a3e:	481d      	ldr	r0, [pc, #116]	; (9ab4 <Adc_Ip_GetChanData+0xa4>)
    9a40:	9a03      	ldr	r2, [sp, #12]
    9a42:	4613      	mov	r3, r2
    9a44:	00db      	lsls	r3, r3, #3
    9a46:	4413      	add	r3, r2
    9a48:	005b      	lsls	r3, r3, #1
    9a4a:	4413      	add	r3, r2
    9a4c:	440b      	add	r3, r1
    9a4e:	3302      	adds	r3, #2
    9a50:	009b      	lsls	r3, r3, #2
    9a52:	4403      	add	r3, r0
    9a54:	685b      	ldr	r3, [r3, #4]
    9a56:	9a02      	ldr	r2, [sp, #8]
    9a58:	429a      	cmp	r2, r3
    9a5a:	d103      	bne.n	9a64 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    9a5c:	2301      	movs	r3, #1
    9a5e:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    9a62:	e008      	b.n	9a76 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9a64:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9a68:	3301      	adds	r3, #1
    9a6a:	f88d 3019 	strb.w	r3, [sp, #25]
    9a6e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9a72:	2b0f      	cmp	r3, #15
    9a74:	d9e1      	bls.n	9a3a <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    9a76:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9a7a:	2b00      	cmp	r3, #0
    9a7c:	d00e      	beq.n	9a9c <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    9a7e:	f89d 2019 	ldrb.w	r2, [sp, #25]
    9a82:	9b05      	ldr	r3, [sp, #20]
    9a84:	3212      	adds	r2, #18
    9a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9a8a:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    9a8e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
    9a96:	f8ad 301a 	strh.w	r3, [sp, #26]
    9a9a:	e001      	b.n	9aa0 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    9a9c:	2301      	movs	r3, #1
    9a9e:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    9aa0:	9b01      	ldr	r3, [sp, #4]
    9aa2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9aa6:	801a      	strh	r2, [r3, #0]

    return Status;
    9aa8:	9b07      	ldr	r3, [sp, #28]
}
    9aaa:	4618      	mov	r0, r3
    9aac:	b008      	add	sp, #32
    9aae:	4770      	bx	lr
    9ab0:	0001647c 	.word	0x0001647c
    9ab4:	1fff8d68 	.word	0x1fff8d68

00009ab8 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    9ab8:	b500      	push	{lr}
    9aba:	b085      	sub	sp, #20
    9abc:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    9abe:	2300      	movs	r3, #0
    9ac0:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    9ac4:	2300      	movs	r3, #0
    9ac6:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    9aca:	4a32      	ldr	r2, [pc, #200]	; (9b94 <Adc_Ip_IRQHandler+0xdc>)
    9acc:	9b01      	ldr	r3, [sp, #4]
    9ace:	214c      	movs	r1, #76	; 0x4c
    9ad0:	fb01 f303 	mul.w	r3, r1, r3
    9ad4:	4413      	add	r3, r2
    9ad6:	781b      	ldrb	r3, [r3, #0]
    9ad8:	2b00      	cmp	r3, #0
    9ada:	d040      	beq.n	9b5e <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    9adc:	4a2d      	ldr	r2, [pc, #180]	; (9b94 <Adc_Ip_IRQHandler+0xdc>)
    9ade:	9b01      	ldr	r3, [sp, #4]
    9ae0:	214c      	movs	r1, #76	; 0x4c
    9ae2:	fb01 f303 	mul.w	r3, r1, r3
    9ae6:	4413      	add	r3, r2
    9ae8:	3308      	adds	r3, #8
    9aea:	681b      	ldr	r3, [r3, #0]
    9aec:	2b00      	cmp	r3, #0
    9aee:	d04d      	beq.n	9b8c <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9af0:	2300      	movs	r3, #0
    9af2:	f88d 300f 	strb.w	r3, [sp, #15]
    9af6:	e02d      	b.n	9b54 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9af8:	4a27      	ldr	r2, [pc, #156]	; (9b98 <Adc_Ip_IRQHandler+0xe0>)
    9afa:	9b01      	ldr	r3, [sp, #4]
    9afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b00:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9b08:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    9b0a:	9802      	ldr	r0, [sp, #8]
    9b0c:	f7ff fa20 	bl	8f50 <Adc_HwAcc_GetAIEN>
    9b10:	4603      	mov	r3, r0
    9b12:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    9b16:	9802      	ldr	r0, [sp, #8]
    9b18:	f7ff fa28 	bl	8f6c <Adc_HwAcc_GetCOCO>
    9b1c:	4603      	mov	r3, r0
    9b1e:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    9b22:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9b26:	2b00      	cmp	r3, #0
    9b28:	d00f      	beq.n	9b4a <Adc_Ip_IRQHandler+0x92>
    9b2a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d00b      	beq.n	9b4a <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    9b32:	4a18      	ldr	r2, [pc, #96]	; (9b94 <Adc_Ip_IRQHandler+0xdc>)
    9b34:	9b01      	ldr	r3, [sp, #4]
    9b36:	214c      	movs	r1, #76	; 0x4c
    9b38:	fb01 f303 	mul.w	r3, r1, r3
    9b3c:	4413      	add	r3, r2
    9b3e:	3308      	adds	r3, #8
    9b40:	681b      	ldr	r3, [r3, #0]
    9b42:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b46:	4610      	mov	r0, r2
    9b48:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9b4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b4e:	3301      	adds	r3, #1
    9b50:	f88d 300f 	strb.w	r3, [sp, #15]
    9b54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b58:	2b0f      	cmp	r3, #15
    9b5a:	d9cd      	bls.n	9af8 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    9b5c:	e016      	b.n	9b8c <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9b5e:	2300      	movs	r3, #0
    9b60:	f88d 300f 	strb.w	r3, [sp, #15]
    9b64:	e00e      	b.n	9b84 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9b66:	4a0c      	ldr	r2, [pc, #48]	; (9b98 <Adc_Ip_IRQHandler+0xe0>)
    9b68:	9b01      	ldr	r3, [sp, #4]
    9b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b72:	4611      	mov	r1, r2
    9b74:	4618      	mov	r0, r3
    9b76:	f7ff fa07 	bl	8f88 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9b7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b7e:	3301      	adds	r3, #1
    9b80:	f88d 300f 	strb.w	r3, [sp, #15]
    9b84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b88:	2b0f      	cmp	r3, #15
    9b8a:	d9ec      	bls.n	9b66 <Adc_Ip_IRQHandler+0xae>
}
    9b8c:	bf00      	nop
    9b8e:	b005      	add	sp, #20
    9b90:	f85d fb04 	ldr.w	pc, [sp], #4
    9b94:	1fff8d68 	.word	0x1fff8d68
    9b98:	0001647c 	.word	0x0001647c

00009b9c <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    9b9c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    9b9e:	2000      	movs	r0, #0
    9ba0:	f7ff ff8a 	bl	9ab8 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    9ba4:	f3bf 8f4f 	dsb	sy
}
    9ba8:	bf00      	nop
    9baa:	bd08      	pop	{r3, pc}

00009bac <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    9bac:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    9bae:	2001      	movs	r0, #1
    9bb0:	f7ff ff82 	bl	9ab8 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    9bb4:	f3bf 8f4f 	dsb	sy
}
    9bb8:	bf00      	nop
    9bba:	bd08      	pop	{r3, pc}

00009bbc <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    9bbc:	b510      	push	{r4, lr}
    9bbe:	b084      	sub	sp, #16
    9bc0:	4603      	mov	r3, r0
    9bc2:	460a      	mov	r2, r1
    9bc4:	f88d 3007 	strb.w	r3, [sp, #7]
    9bc8:	4613      	mov	r3, r2
    9bca:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    9bce:	2300      	movs	r3, #0
    9bd0:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    9bd4:	2300      	movs	r3, #0
    9bd6:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    9bda:	f005 fa47 	bl	f06c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    9bde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9be2:	4a24      	ldr	r2, [pc, #144]	; (9c74 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9be4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9be8:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    9bec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9bf0:	2b01      	cmp	r3, #1
    9bf2:	d806      	bhi.n	9c02 <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    9bf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bf8:	4a1e      	ldr	r2, [pc, #120]	; (9c74 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9bfa:	2100      	movs	r1, #0
    9bfc:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    9c00:	e032      	b.n	9c68 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    9c02:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9c06:	3301      	adds	r3, #1
    9c08:	f8ad 300e 	strh.w	r3, [sp, #14]
    9c0c:	e01b      	b.n	9c46 <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    9c0e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9c12:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c16:	f89d 1007 	ldrb.w	r1, [sp, #7]
    9c1a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9c1e:	3a01      	subs	r2, #1
    9c20:	4c14      	ldr	r4, [pc, #80]	; (9c74 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c22:	0080      	lsls	r0, r0, #2
    9c24:	4403      	add	r3, r0
    9c26:	005b      	lsls	r3, r3, #1
    9c28:	4423      	add	r3, r4
    9c2a:	885b      	ldrh	r3, [r3, #2]
    9c2c:	b29c      	uxth	r4, r3
    9c2e:	4811      	ldr	r0, [pc, #68]	; (9c74 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c30:	008b      	lsls	r3, r1, #2
    9c32:	4413      	add	r3, r2
    9c34:	005b      	lsls	r3, r3, #1
    9c36:	4403      	add	r3, r0
    9c38:	4622      	mov	r2, r4
    9c3a:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    9c3c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c40:	3301      	adds	r3, #1
    9c42:	f8ad 300e 	strh.w	r3, [sp, #14]
    9c46:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9c4a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9c4e:	429a      	cmp	r2, r3
    9c50:	d3dd      	bcc.n	9c0e <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    9c52:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c56:	4a07      	ldr	r2, [pc, #28]	; (9c74 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c58:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    9c5c:	b292      	uxth	r2, r2
    9c5e:	3a01      	subs	r2, #1
    9c60:	b291      	uxth	r1, r2
    9c62:	4a04      	ldr	r2, [pc, #16]	; (9c74 <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c64:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    9c68:	f005 fa2c 	bl	f0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    9c6c:	bf00      	nop
    9c6e:	b004      	add	sp, #16
    9c70:	bd10      	pop	{r4, pc}
    9c72:	bf00      	nop
    9c74:	1fff8d58 	.word	0x1fff8d58

00009c78 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    9c78:	b500      	push	{lr}
    9c7a:	b087      	sub	sp, #28
    9c7c:	9003      	str	r0, [sp, #12]
    9c7e:	9102      	str	r1, [sp, #8]
    9c80:	9201      	str	r2, [sp, #4]
    9c82:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9c86:	2300      	movs	r3, #0
    9c88:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9c8c:	9b03      	ldr	r3, [sp, #12]
    9c8e:	789b      	ldrb	r3, [r3, #2]
    9c90:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9c94:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9c98:	4a29      	ldr	r2, [pc, #164]	; (9d40 <Adc_Ipw_ReadGroupConvData+0xc8>)
    9c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c9e:	681a      	ldr	r2, [r3, #0]
    9ca0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9ca4:	4413      	add	r3, r2
    9ca6:	7c1b      	ldrb	r3, [r3, #16]
    9ca8:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    9cac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9cb0:	4a23      	ldr	r2, [pc, #140]	; (9d40 <Adc_Ipw_ReadGroupConvData+0xc8>)
    9cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cb6:	681b      	ldr	r3, [r3, #0]
    9cb8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    9cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9cc0:	695b      	ldr	r3, [r3, #20]
    9cc2:	4618      	mov	r0, r3
    9cc4:	f000 fbce 	bl	a464 <Adc_Ipw_CalculateNumsBitShift>
    9cc8:	4603      	mov	r3, r0
    9cca:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    9cce:	9b03      	ldr	r3, [sp, #12]
    9cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9cd4:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    9cd8:	2300      	movs	r3, #0
    9cda:	f88d 3017 	strb.w	r3, [sp, #23]
    9cde:	e022      	b.n	9d26 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    9ce0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9ce4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9ce8:	4611      	mov	r1, r2
    9cea:	4618      	mov	r0, r3
    9cec:	f7ff fcf4 	bl	96d8 <Adc_Ip_GetConvData>
    9cf0:	4603      	mov	r3, r0
    9cf2:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    9cf6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9cfa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9cfe:	fa02 f303 	lsl.w	r3, r2, r3
    9d02:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    9d06:	9b01      	ldr	r3, [sp, #4]
    9d08:	2201      	movs	r2, #1
    9d0a:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    9d0c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d10:	005b      	lsls	r3, r3, #1
    9d12:	9a02      	ldr	r2, [sp, #8]
    9d14:	4413      	add	r3, r2
    9d16:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9d1a:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    9d1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d20:	3301      	adds	r3, #1
    9d22:	f88d 3017 	strb.w	r3, [sp, #23]
    9d26:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9d2a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9d2e:	429a      	cmp	r2, r3
    9d30:	d3d6      	bcc.n	9ce0 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    9d32:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    9d36:	4618      	mov	r0, r3
    9d38:	b007      	add	sp, #28
    9d3a:	f85d fb04 	ldr.w	pc, [sp], #4
    9d3e:	bf00      	nop
    9d40:	1fff8d2c 	.word	0x1fff8d2c

00009d44 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    9d44:	b500      	push	{lr}
    9d46:	b087      	sub	sp, #28
    9d48:	9003      	str	r0, [sp, #12]
    9d4a:	9102      	str	r1, [sp, #8]
    9d4c:	9201      	str	r2, [sp, #4]
    9d4e:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    9d52:	2301      	movs	r3, #1
    9d54:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9d58:	2300      	movs	r3, #0
    9d5a:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9d5e:	9b03      	ldr	r3, [sp, #12]
    9d60:	789b      	ldrb	r3, [r3, #2]
    9d62:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9d66:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9d6a:	4a19      	ldr	r2, [pc, #100]	; (9dd0 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    9d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d70:	681a      	ldr	r2, [r3, #0]
    9d72:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9d76:	4413      	add	r3, r2
    9d78:	7c1b      	ldrb	r3, [r3, #16]
    9d7a:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    9d7e:	9b03      	ldr	r3, [sp, #12]
    9d80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9d84:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    9d88:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9d8c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9d90:	2100      	movs	r1, #0
    9d92:	4618      	mov	r0, r3
    9d94:	f000 fe2a 	bl	a9ec <Adc_Ipw_CheckValidConversion>
    9d98:	4603      	mov	r3, r0
    9d9a:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    9d9e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9da2:	2b00      	cmp	r3, #0
    9da4:	d00a      	beq.n	9dbc <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    9da6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9daa:	9a01      	ldr	r2, [sp, #4]
    9dac:	9902      	ldr	r1, [sp, #8]
    9dae:	9803      	ldr	r0, [sp, #12]
    9db0:	f7ff ff62 	bl	9c78 <Adc_Ipw_ReadGroupConvData>
    9db4:	4603      	mov	r3, r0
    9db6:	f88d 3017 	strb.w	r3, [sp, #23]
    9dba:	e002      	b.n	9dc2 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9dbc:	2301      	movs	r3, #1
    9dbe:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    9dc2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9dc6:	4618      	mov	r0, r3
    9dc8:	b007      	add	sp, #28
    9dca:	f85d fb04 	ldr.w	pc, [sp], #4
    9dce:	bf00      	nop
    9dd0:	1fff8d2c 	.word	0x1fff8d2c

00009dd4 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    9dd4:	b088      	sub	sp, #32
    9dd6:	4603      	mov	r3, r0
    9dd8:	9100      	str	r1, [sp, #0]
    9dda:	f8ad 3006 	strh.w	r3, [sp, #6]
    9dde:	4613      	mov	r3, r2
    9de0:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9de4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9de8:	4a3a      	ldr	r2, [pc, #232]	; (9ed4 <Adc_Ipw_WriteDataBuffer+0x100>)
    9dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dee:	68da      	ldr	r2, [r3, #12]
    9df0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9df4:	005b      	lsls	r3, r3, #1
    9df6:	4413      	add	r3, r2
    9df8:	881b      	ldrh	r3, [r3, #0]
    9dfa:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9dfe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9e02:	4a34      	ldr	r2, [pc, #208]	; (9ed4 <Adc_Ipw_WriteDataBuffer+0x100>)
    9e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e08:	685a      	ldr	r2, [r3, #4]
    9e0a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9e0e:	2134      	movs	r1, #52	; 0x34
    9e10:	fb01 f303 	mul.w	r3, r1, r3
    9e14:	4413      	add	r3, r2
    9e16:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    9e18:	9b04      	ldr	r3, [sp, #16]
    9e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9e1e:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    9e22:	2300      	movs	r3, #0
    9e24:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    9e26:	2300      	movs	r3, #0
    9e28:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    9e2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e30:	4929      	ldr	r1, [pc, #164]	; (9ed8 <Adc_Ipw_WriteDataBuffer+0x104>)
    9e32:	4613      	mov	r3, r2
    9e34:	009b      	lsls	r3, r3, #2
    9e36:	4413      	add	r3, r2
    9e38:	009b      	lsls	r3, r3, #2
    9e3a:	440b      	add	r3, r1
    9e3c:	3308      	adds	r3, #8
    9e3e:	881b      	ldrh	r3, [r3, #0]
    9e40:	b29b      	uxth	r3, r3
    9e42:	3b01      	subs	r3, #1
    9e44:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    9e48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e4c:	4922      	ldr	r1, [pc, #136]	; (9ed8 <Adc_Ipw_WriteDataBuffer+0x104>)
    9e4e:	4613      	mov	r3, r2
    9e50:	009b      	lsls	r3, r3, #2
    9e52:	4413      	add	r3, r2
    9e54:	009b      	lsls	r3, r3, #2
    9e56:	440b      	add	r3, r1
    9e58:	3308      	adds	r3, #8
    9e5a:	881b      	ldrh	r3, [r3, #0]
    9e5c:	b29b      	uxth	r3, r3
    9e5e:	2b00      	cmp	r3, #0
    9e60:	d104      	bne.n	9e6c <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    9e62:	9b04      	ldr	r3, [sp, #16]
    9e64:	8b9b      	ldrh	r3, [r3, #28]
    9e66:	3b01      	subs	r3, #1
    9e68:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    9e6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e70:	4919      	ldr	r1, [pc, #100]	; (9ed8 <Adc_Ipw_WriteDataBuffer+0x104>)
    9e72:	4613      	mov	r3, r2
    9e74:	009b      	lsls	r3, r3, #2
    9e76:	4413      	add	r3, r2
    9e78:	009b      	lsls	r3, r3, #2
    9e7a:	440b      	add	r3, r1
    9e7c:	330c      	adds	r3, #12
    9e7e:	681a      	ldr	r2, [r3, #0]
    9e80:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9e84:	005b      	lsls	r3, r3, #1
    9e86:	4413      	add	r3, r2
    9e88:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    9e8a:	9b04      	ldr	r3, [sp, #16]
    9e8c:	8b9b      	ldrh	r3, [r3, #28]
    9e8e:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    9e92:	2300      	movs	r3, #0
    9e94:	f88d 301f 	strb.w	r3, [sp, #31]
    9e98:	e012      	b.n	9ec0 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    9e9a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9e9e:	005b      	lsls	r3, r3, #1
    9ea0:	9a00      	ldr	r2, [sp, #0]
    9ea2:	4413      	add	r3, r2
    9ea4:	9a06      	ldr	r2, [sp, #24]
    9ea6:	8812      	ldrh	r2, [r2, #0]
    9ea8:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    9eaa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9eae:	005b      	lsls	r3, r3, #1
    9eb0:	9a06      	ldr	r2, [sp, #24]
    9eb2:	4413      	add	r3, r2
    9eb4:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    9eb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9eba:	3301      	adds	r3, #1
    9ebc:	f88d 301f 	strb.w	r3, [sp, #31]
    9ec0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9ec4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ec8:	429a      	cmp	r2, r3
    9eca:	d3e6      	bcc.n	9e9a <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    9ecc:	bf00      	nop
    9ece:	bf00      	nop
    9ed0:	b008      	add	sp, #32
    9ed2:	4770      	bx	lr
    9ed4:	1fff8d2c 	.word	0x1fff8d2c
    9ed8:	1fff8d30 	.word	0x1fff8d30

00009edc <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    9edc:	b500      	push	{lr}
    9ede:	b089      	sub	sp, #36	; 0x24
    9ee0:	9200      	str	r2, [sp, #0]
    9ee2:	461a      	mov	r2, r3
    9ee4:	4603      	mov	r3, r0
    9ee6:	f88d 3007 	strb.w	r3, [sp, #7]
    9eea:	460b      	mov	r3, r1
    9eec:	f8ad 3004 	strh.w	r3, [sp, #4]
    9ef0:	4613      	mov	r3, r2
    9ef2:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    9ef6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9efa:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9efe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f02:	f003 0307 	and.w	r3, r3, #7
    9f06:	b2db      	uxtb	r3, r3
    9f08:	2b00      	cmp	r3, #0
    9f0a:	d006      	beq.n	9f1a <Adc_Ipw_ConfigurePdbChannels+0x3e>
    9f0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f10:	08db      	lsrs	r3, r3, #3
    9f12:	b2db      	uxtb	r3, r3
    9f14:	3301      	adds	r3, #1
    9f16:	b2db      	uxtb	r3, r3
    9f18:	e003      	b.n	9f22 <Adc_Ipw_ConfigurePdbChannels+0x46>
    9f1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f1e:	08db      	lsrs	r3, r3, #3
    9f20:	b2db      	uxtb	r3, r3
    9f22:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    9f26:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f2a:	4987      	ldr	r1, [pc, #540]	; (a148 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    9f2c:	4613      	mov	r3, r2
    9f2e:	009b      	lsls	r3, r3, #2
    9f30:	4413      	add	r3, r2
    9f32:	009b      	lsls	r3, r3, #2
    9f34:	440b      	add	r3, r1
    9f36:	3310      	adds	r3, #16
    9f38:	781b      	ldrb	r3, [r3, #0]
    9f3a:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9f3e:	4b83      	ldr	r3, [pc, #524]	; (a14c <Adc_Ipw_ConfigurePdbChannels+0x270>)
    9f40:	681b      	ldr	r3, [r3, #0]
    9f42:	681a      	ldr	r2, [r3, #0]
    9f44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f48:	4413      	add	r3, r2
    9f4a:	7c1b      	ldrb	r3, [r3, #16]
    9f4c:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9f50:	9b00      	ldr	r3, [sp, #0]
    9f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9f54:	691b      	ldr	r3, [r3, #16]
    9f56:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9f58:	2300      	movs	r3, #0
    9f5a:	f88d 301f 	strb.w	r3, [sp, #31]
    9f5e:	e0e6      	b.n	a12e <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    9f60:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9f64:	08db      	lsrs	r3, r3, #3
    9f66:	b2db      	uxtb	r3, r3
    9f68:	2b00      	cmp	r3, #0
    9f6a:	d102      	bne.n	9f72 <Adc_Ipw_ConfigurePdbChannels+0x96>
    9f6c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9f70:	e000      	b.n	9f74 <Adc_Ipw_ConfigurePdbChannels+0x98>
    9f72:	2308      	movs	r3, #8
    9f74:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9f78:	9b00      	ldr	r3, [sp, #0]
    9f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9f7c:	7bdb      	ldrb	r3, [r3, #15]
    9f7e:	2b00      	cmp	r3, #0
    9f80:	d05e      	beq.n	a040 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9f82:	9b00      	ldr	r3, [sp, #0]
    9f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9f86:	7b9b      	ldrb	r3, [r3, #14]
    9f88:	f083 0301 	eor.w	r3, r3, #1
    9f8c:	b2db      	uxtb	r3, r3
    9f8e:	2b00      	cmp	r3, #0
    9f90:	d02a      	beq.n	9fe8 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9f92:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9f96:	f1c3 0308 	rsb	r3, r3, #8
    9f9a:	22ff      	movs	r2, #255	; 0xff
    9f9c:	fa22 f303 	lsr.w	r3, r2, r3
    9fa0:	b2db      	uxtb	r3, r3
    9fa2:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9fa6:	2300      	movs	r3, #0
    9fa8:	f88d 301e 	strb.w	r3, [sp, #30]
    9fac:	e015      	b.n	9fda <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    9fae:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9fb2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9fb6:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9fba:	4413      	add	r3, r2
    9fbc:	005b      	lsls	r3, r3, #1
    9fbe:	9a05      	ldr	r2, [sp, #20]
    9fc0:	4413      	add	r3, r2
    9fc2:	881b      	ldrh	r3, [r3, #0]
    9fc4:	f89d 201e 	ldrb.w	r2, [sp, #30]
    9fc8:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9fcc:	f001 fd16 	bl	b9fc <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9fd0:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9fd4:	3301      	adds	r3, #1
    9fd6:	f88d 301e 	strb.w	r3, [sp, #30]
    9fda:	f89d 201e 	ldrb.w	r2, [sp, #30]
    9fde:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9fe2:	429a      	cmp	r2, r3
    9fe4:	d3e3      	bcc.n	9fae <Adc_Ipw_ConfigurePdbChannels+0xd2>
    9fe6:	e051      	b.n	a08c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    9fe8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9fec:	2b00      	cmp	r3, #0
    9fee:	d110      	bne.n	a012 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    9ff0:	2301      	movs	r3, #1
    9ff2:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    9ff6:	9b05      	ldr	r3, [sp, #20]
    9ff8:	881b      	ldrh	r3, [r3, #0]
    9ffa:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    9ffe:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a002:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a006:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a00a:	2200      	movs	r2, #0
    a00c:	f001 fcf6 	bl	b9fc <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a010:	e03c      	b.n	a08c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    a012:	2301      	movs	r3, #1
    a014:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    a018:	9b00      	ldr	r3, [sp, #0]
    a01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a01c:	899a      	ldrh	r2, [r3, #12]
    a01e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a022:	b29b      	uxth	r3, r3
    a024:	fb12 f303 	smulbb	r3, r2, r3
    a028:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    a02c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a030:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a034:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a038:	2200      	movs	r2, #0
    a03a:	f001 fcdf 	bl	b9fc <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a03e:	e025      	b.n	a08c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    a040:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a044:	2b00      	cmp	r3, #0
    a046:	d10b      	bne.n	a060 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    a048:	2301      	movs	r3, #1
    a04a:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    a04e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a052:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a056:	2300      	movs	r3, #0
    a058:	2200      	movs	r2, #0
    a05a:	f001 fccf 	bl	b9fc <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a05e:	e015      	b.n	a08c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    a060:	2301      	movs	r3, #1
    a062:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    a066:	9b00      	ldr	r3, [sp, #0]
    a068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a06a:	899a      	ldrh	r2, [r3, #12]
    a06c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a070:	b29b      	uxth	r3, r3
    a072:	fb12 f303 	smulbb	r3, r2, r3
    a076:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    a07a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a07e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a082:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a086:	2200      	movs	r2, #0
    a088:	f001 fcb8 	bl	b9fc <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    a08c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a090:	4618      	mov	r0, r3
    a092:	f001 fb87 	bl	b7a4 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    a096:	f89d 201d 	ldrb.w	r2, [sp, #29]
    a09a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a09e:	1ad3      	subs	r3, r2, r3
    a0a0:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    a0a4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0a8:	b29a      	uxth	r2, r3
    a0aa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    a0ae:	4413      	add	r3, r2
    a0b0:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    a0b4:	9b00      	ldr	r3, [sp, #0]
    a0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a0b8:	7b9b      	ldrb	r3, [r3, #14]
    a0ba:	2b00      	cmp	r3, #0
    a0bc:	d01d      	beq.n	a0fa <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    a0be:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a0c2:	2b00      	cmp	r3, #0
    a0c4:	d10c      	bne.n	a0e0 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    a0c6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0ca:	f1c3 0308 	rsb	r3, r3, #8
    a0ce:	22ff      	movs	r2, #255	; 0xff
    a0d0:	fa22 f303 	lsr.w	r3, r2, r3
    a0d4:	b2db      	uxtb	r3, r3
    a0d6:	3b01      	subs	r3, #1
    a0d8:	b2db      	uxtb	r3, r3
    a0da:	f88d 300e 	strb.w	r3, [sp, #14]
    a0de:	e00f      	b.n	a100 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    a0e0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0e4:	f1c3 0308 	rsb	r3, r3, #8
    a0e8:	22ff      	movs	r2, #255	; 0xff
    a0ea:	fa22 f303 	lsr.w	r3, r2, r3
    a0ee:	b2db      	uxtb	r3, r3
    a0f0:	3b01      	subs	r3, #1
    a0f2:	b2db      	uxtb	r3, r3
    a0f4:	f88d 300e 	strb.w	r3, [sp, #14]
    a0f8:	e002      	b.n	a100 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    a0fa:	2300      	movs	r3, #0
    a0fc:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    a100:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a104:	f1c3 0308 	rsb	r3, r3, #8
    a108:	22ff      	movs	r2, #255	; 0xff
    a10a:	fa22 f303 	lsr.w	r3, r2, r3
    a10e:	b2db      	uxtb	r3, r3
    a110:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    a114:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a118:	aa03      	add	r2, sp, #12
    a11a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a11e:	4618      	mov	r0, r3
    a120:	f001 fb7c 	bl	b81c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    a124:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a128:	3301      	adds	r3, #1
    a12a:	f88d 301f 	strb.w	r3, [sp, #31]
    a12e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a132:	f89d 3019 	ldrb.w	r3, [sp, #25]
    a136:	429a      	cmp	r2, r3
    a138:	f4ff af12 	bcc.w	9f60 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    a13c:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a140:	4618      	mov	r0, r3
    a142:	b009      	add	sp, #36	; 0x24
    a144:	f85d fb04 	ldr.w	pc, [sp], #4
    a148:	1fff8d30 	.word	0x1fff8d30
    a14c:	1fff8d2c 	.word	0x1fff8d2c

0000a150 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    a150:	b500      	push	{lr}
    a152:	b089      	sub	sp, #36	; 0x24
    a154:	9202      	str	r2, [sp, #8]
    a156:	9301      	str	r3, [sp, #4]
    a158:	4603      	mov	r3, r0
    a15a:	f88d 300f 	strb.w	r3, [sp, #15]
    a15e:	460b      	mov	r3, r1
    a160:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    a164:	2300      	movs	r3, #0
    a166:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a16a:	4b62      	ldr	r3, [pc, #392]	; (a2f4 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    a16c:	681b      	ldr	r3, [r3, #0]
    a16e:	681a      	ldr	r2, [r3, #0]
    a170:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a174:	4413      	add	r3, r2
    a176:	7c1b      	ldrb	r3, [r3, #16]
    a178:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    a17c:	9b02      	ldr	r3, [sp, #8]
    a17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a180:	691b      	ldr	r3, [r3, #16]
    a182:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    a184:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a188:	f003 0307 	and.w	r3, r3, #7
    a18c:	b2db      	uxtb	r3, r3
    a18e:	2b00      	cmp	r3, #0
    a190:	d006      	beq.n	a1a0 <Adc_Ipw_ConfigurePdbConversion+0x50>
    a192:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a196:	08db      	lsrs	r3, r3, #3
    a198:	b2db      	uxtb	r3, r3
    a19a:	3301      	adds	r3, #1
    a19c:	b2db      	uxtb	r3, r3
    a19e:	e003      	b.n	a1a8 <Adc_Ipw_ConfigurePdbConversion+0x58>
    a1a0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a1a4:	08db      	lsrs	r3, r3, #3
    a1a6:	b2db      	uxtb	r3, r3
    a1a8:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    a1ac:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a1b0:	4618      	mov	r0, r3
    a1b2:	f001 fa61 	bl	b678 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    a1b6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a1ba:	9901      	ldr	r1, [sp, #4]
    a1bc:	4618      	mov	r0, r3
    a1be:	f001 fa89 	bl	b6d4 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    a1c2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a1c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a1ca:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a1ce:	9a02      	ldr	r2, [sp, #8]
    a1d0:	f7ff fe84 	bl	9edc <Adc_Ipw_ConfigurePdbChannels>
    a1d4:	4603      	mov	r3, r0
    a1d6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    a1da:	9b02      	ldr	r3, [sp, #8]
    a1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a1de:	7bdb      	ldrb	r3, [r3, #15]
    a1e0:	2b00      	cmp	r3, #0
    a1e2:	d02f      	beq.n	a244 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    a1e4:	9b02      	ldr	r3, [sp, #8]
    a1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a1e8:	7b9b      	ldrb	r3, [r3, #14]
    a1ea:	f083 0301 	eor.w	r3, r3, #1
    a1ee:	b2db      	uxtb	r3, r3
    a1f0:	2b00      	cmp	r3, #0
    a1f2:	d017      	beq.n	a224 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    a1f4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a1f8:	493f      	ldr	r1, [pc, #252]	; (a2f8 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a1fa:	4613      	mov	r3, r2
    a1fc:	009b      	lsls	r3, r3, #2
    a1fe:	4413      	add	r3, r2
    a200:	009b      	lsls	r3, r3, #2
    a202:	440b      	add	r3, r1
    a204:	3310      	adds	r3, #16
    a206:	781b      	ldrb	r3, [r3, #0]
    a208:	461a      	mov	r2, r3
    a20a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a20e:	4413      	add	r3, r2
    a210:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    a214:	3b01      	subs	r3, #1
    a216:	005b      	lsls	r3, r3, #1
    a218:	9a05      	ldr	r2, [sp, #20]
    a21a:	4413      	add	r3, r2
    a21c:	881b      	ldrh	r3, [r3, #0]
    a21e:	f8ad 301c 	strh.w	r3, [sp, #28]
    a222:	e01a      	b.n	a25a <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    a224:	9b05      	ldr	r3, [sp, #20]
    a226:	881a      	ldrh	r2, [r3, #0]
    a228:	9b02      	ldr	r3, [sp, #8]
    a22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a22c:	8999      	ldrh	r1, [r3, #12]
    a22e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a232:	3b01      	subs	r3, #1
    a234:	b29b      	uxth	r3, r3
    a236:	fb11 f303 	smulbb	r3, r1, r3
    a23a:	b29b      	uxth	r3, r3
    a23c:	4413      	add	r3, r2
    a23e:	f8ad 301c 	strh.w	r3, [sp, #28]
    a242:	e00a      	b.n	a25a <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    a244:	9b02      	ldr	r3, [sp, #8]
    a246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a248:	899a      	ldrh	r2, [r3, #12]
    a24a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a24e:	3b01      	subs	r3, #1
    a250:	b29b      	uxth	r3, r3
    a252:	fb12 f303 	smulbb	r3, r2, r3
    a256:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    a25a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a25e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    a262:	4611      	mov	r1, r2
    a264:	4618      	mov	r0, r3
    a266:	f001 fab5 	bl	b7d4 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    a26a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a26e:	4618      	mov	r0, r3
    a270:	f001 fa98 	bl	b7a4 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    a274:	2300      	movs	r3, #0
    a276:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    a27a:	2300      	movs	r3, #0
    a27c:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    a280:	2300      	movs	r3, #0
    a282:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    a286:	e00c      	b.n	a2a2 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    a288:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a28c:	aa04      	add	r2, sp, #16
    a28e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a292:	4618      	mov	r0, r3
    a294:	f001 fac2 	bl	b81c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    a298:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a29c:	3301      	adds	r3, #1
    a29e:	f88d 301f 	strb.w	r3, [sp, #31]
    a2a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a2a6:	2b01      	cmp	r3, #1
    a2a8:	d9ee      	bls.n	a288 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    a2aa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a2ae:	4912      	ldr	r1, [pc, #72]	; (a2f8 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a2b0:	4613      	mov	r3, r2
    a2b2:	009b      	lsls	r3, r3, #2
    a2b4:	4413      	add	r3, r2
    a2b6:	009b      	lsls	r3, r3, #2
    a2b8:	440b      	add	r3, r1
    a2ba:	3310      	adds	r3, #16
    a2bc:	7819      	ldrb	r1, [r3, #0]
    a2be:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a2c2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a2c6:	440b      	add	r3, r1
    a2c8:	b2d8      	uxtb	r0, r3
    a2ca:	490b      	ldr	r1, [pc, #44]	; (a2f8 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a2cc:	4613      	mov	r3, r2
    a2ce:	009b      	lsls	r3, r3, #2
    a2d0:	4413      	add	r3, r2
    a2d2:	009b      	lsls	r3, r3, #2
    a2d4:	440b      	add	r3, r1
    a2d6:	3310      	adds	r3, #16
    a2d8:	4602      	mov	r2, r0
    a2da:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    a2dc:	9b01      	ldr	r3, [sp, #4]
    a2de:	2b0f      	cmp	r3, #15
    a2e0:	d104      	bne.n	a2ec <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    a2e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a2e6:	4618      	mov	r0, r3
    a2e8:	f001 fa34 	bl	b754 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    a2ec:	bf00      	nop
    a2ee:	b009      	add	sp, #36	; 0x24
    a2f0:	f85d fb04 	ldr.w	pc, [sp], #4
    a2f4:	1fff8d2c 	.word	0x1fff8d2c
    a2f8:	1fff8d30 	.word	0x1fff8d30

0000a2fc <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    a2fc:	b500      	push	{lr}
    a2fe:	b087      	sub	sp, #28
    a300:	4603      	mov	r3, r0
    a302:	f88d 3007 	strb.w	r3, [sp, #7]
    a306:	460b      	mov	r3, r1
    a308:	f8ad 3004 	strh.w	r3, [sp, #4]
    a30c:	4613      	mov	r3, r2
    a30e:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a312:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a316:	4a36      	ldr	r2, [pc, #216]	; (a3f0 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a31c:	68da      	ldr	r2, [r3, #12]
    a31e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a322:	005b      	lsls	r3, r3, #1
    a324:	4413      	add	r3, r2
    a326:	881b      	ldrh	r3, [r3, #0]
    a328:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a32c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a330:	4a2f      	ldr	r2, [pc, #188]	; (a3f0 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a336:	681a      	ldr	r2, [r3, #0]
    a338:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a33c:	4413      	add	r3, r2
    a33e:	7c1b      	ldrb	r3, [r3, #16]
    a340:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    a344:	2300      	movs	r3, #0
    a346:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    a34a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a34e:	4618      	mov	r0, r3
    a350:	f001 fb7e 	bl	ba50 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    a354:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a358:	4a25      	ldr	r2, [pc, #148]	; (a3f0 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a35e:	685a      	ldr	r2, [r3, #4]
    a360:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a364:	2134      	movs	r1, #52	; 0x34
    a366:	fb01 f303 	mul.w	r3, r1, r3
    a36a:	4413      	add	r3, r2
    a36c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a370:	2b01      	cmp	r3, #1
    a372:	d114      	bne.n	a39e <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    a374:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a378:	4a1d      	ldr	r2, [pc, #116]	; (a3f0 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a37a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a37e:	685a      	ldr	r2, [r3, #4]
    a380:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a384:	2134      	movs	r1, #52	; 0x34
    a386:	fb01 f303 	mul.w	r3, r1, r3
    a38a:	4413      	add	r3, r2
    a38c:	689b      	ldr	r3, [r3, #8]
    a38e:	2b01      	cmp	r3, #1
    a390:	d105      	bne.n	a39e <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    a392:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a396:	2100      	movs	r1, #0
    a398:	4618      	mov	r0, r3
    a39a:	f7ff f827 	bl	93ec <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a39e:	2300      	movs	r3, #0
    a3a0:	f88d 3016 	strb.w	r3, [sp, #22]
    a3a4:	e013      	b.n	a3ce <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    a3a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a3aa:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a3ae:	2201      	movs	r2, #1
    a3b0:	4618      	mov	r0, r3
    a3b2:	f7ff f8cd 	bl	9550 <Adc_Ip_SetDisabledChannel>
    a3b6:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    a3b8:	9b03      	ldr	r3, [sp, #12]
    a3ba:	2b02      	cmp	r3, #2
    a3bc:	d102      	bne.n	a3c4 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    a3be:	2301      	movs	r3, #1
    a3c0:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a3c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a3c8:	3301      	adds	r3, #1
    a3ca:	f88d 3016 	strb.w	r3, [sp, #22]
    a3ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3d2:	4a08      	ldr	r2, [pc, #32]	; (a3f4 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    a3d4:	00db      	lsls	r3, r3, #3
    a3d6:	4413      	add	r3, r2
    a3d8:	799b      	ldrb	r3, [r3, #6]
    a3da:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a3de:	429a      	cmp	r2, r3
    a3e0:	d3e1      	bcc.n	a3a6 <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    a3e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a3e6:	4618      	mov	r0, r3
    a3e8:	b007      	add	sp, #28
    a3ea:	f85d fb04 	ldr.w	pc, [sp], #4
    a3ee:	bf00      	nop
    a3f0:	1fff8d2c 	.word	0x1fff8d2c
    a3f4:	1fff8d58 	.word	0x1fff8d58

0000a3f8 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    a3f8:	b500      	push	{lr}
    a3fa:	b085      	sub	sp, #20
    a3fc:	4603      	mov	r3, r0
    a3fe:	9100      	str	r1, [sp, #0]
    a400:	f88d 3007 	strb.w	r3, [sp, #7]
    a404:	4613      	mov	r3, r2
    a406:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a40a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a40e:	4a14      	ldr	r2, [pc, #80]	; (a460 <Adc_Ipw_PrepareGroupStart+0x68>)
    a410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a414:	681a      	ldr	r2, [r3, #0]
    a416:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a41a:	4413      	add	r3, r2
    a41c:	7c1b      	ldrb	r3, [r3, #16]
    a41e:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    a422:	9b00      	ldr	r3, [sp, #0]
    a424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a426:	781b      	ldrb	r3, [r3, #0]
    a428:	2b01      	cmp	r3, #1
    a42a:	d108      	bne.n	a43e <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    a42c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a430:	9b00      	ldr	r3, [sp, #0]
    a432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a434:	685b      	ldr	r3, [r3, #4]
    a436:	461a      	mov	r2, r3
    a438:	2101      	movs	r1, #1
    a43a:	f7fe ff51 	bl	92e0 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    a43e:	9b00      	ldr	r3, [sp, #0]
    a440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a442:	7a1b      	ldrb	r3, [r3, #8]
    a444:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    a448:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a44c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a450:	4611      	mov	r1, r2
    a452:	4618      	mov	r0, r3
    a454:	f7fe ff62 	bl	931c <Adc_Ip_SetSampleTime>
}
    a458:	bf00      	nop
    a45a:	b005      	add	sp, #20
    a45c:	f85d fb04 	ldr.w	pc, [sp], #4
    a460:	1fff8d2c 	.word	0x1fff8d2c

0000a464 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    a464:	b084      	sub	sp, #16
    a466:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    a468:	2300      	movs	r3, #0
    a46a:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    a46e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a472:	4618      	mov	r0, r3
    a474:	b004      	add	sp, #16
    a476:	4770      	bx	lr

0000a478 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    a478:	b500      	push	{lr}
    a47a:	b08f      	sub	sp, #60	; 0x3c
    a47c:	9202      	str	r2, [sp, #8]
    a47e:	461a      	mov	r2, r3
    a480:	4603      	mov	r3, r0
    a482:	f88d 300f 	strb.w	r3, [sp, #15]
    a486:	460b      	mov	r3, r1
    a488:	f8ad 300c 	strh.w	r3, [sp, #12]
    a48c:	4613      	mov	r3, r2
    a48e:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a492:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a496:	4a6d      	ldr	r2, [pc, #436]	; (a64c <Adc_Ipw_ConfigureConversion+0x1d4>)
    a498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a49c:	68da      	ldr	r2, [r3, #12]
    a49e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a4a2:	005b      	lsls	r3, r3, #1
    a4a4:	4413      	add	r3, r2
    a4a6:	881b      	ldrh	r3, [r3, #0]
    a4a8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a4ac:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a4b0:	4a66      	ldr	r2, [pc, #408]	; (a64c <Adc_Ipw_ConfigureConversion+0x1d4>)
    a4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4b6:	685a      	ldr	r2, [r3, #4]
    a4b8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    a4bc:	2134      	movs	r1, #52	; 0x34
    a4be:	fb01 f303 	mul.w	r3, r1, r3
    a4c2:	4413      	add	r3, r2
    a4c4:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a4c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a4ca:	4a60      	ldr	r2, [pc, #384]	; (a64c <Adc_Ipw_ConfigureConversion+0x1d4>)
    a4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4d0:	681a      	ldr	r2, [r3, #0]
    a4d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a4d6:	4413      	add	r3, r2
    a4d8:	7c1b      	ldrb	r3, [r3, #16]
    a4da:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    a4de:	2300      	movs	r3, #0
    a4e0:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    a4e2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a4e6:	495a      	ldr	r1, [pc, #360]	; (a650 <Adc_Ipw_ConfigureConversion+0x1d8>)
    a4e8:	4613      	mov	r3, r2
    a4ea:	009b      	lsls	r3, r3, #2
    a4ec:	4413      	add	r3, r2
    a4ee:	009b      	lsls	r3, r3, #2
    a4f0:	440b      	add	r3, r1
    a4f2:	3310      	adds	r3, #16
    a4f4:	781b      	ldrb	r3, [r3, #0]
    a4f6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    a4fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a4fc:	6a1b      	ldr	r3, [r3, #32]
    a4fe:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    a500:	2300      	movs	r3, #0
    a502:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a506:	e030      	b.n	a56a <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    a508:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a50c:	4a4f      	ldr	r2, [pc, #316]	; (a64c <Adc_Ipw_ConfigureConversion+0x1d4>)
    a50e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a512:	681b      	ldr	r3, [r3, #0]
    a514:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a51c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a51e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a522:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a526:	440b      	add	r3, r1
    a528:	005b      	lsls	r3, r3, #1
    a52a:	990a      	ldr	r1, [sp, #40]	; 0x28
    a52c:	440b      	add	r3, r1
    a52e:	881b      	ldrh	r3, [r3, #0]
    a530:	4619      	mov	r1, r3
    a532:	460b      	mov	r3, r1
    a534:	005b      	lsls	r3, r3, #1
    a536:	440b      	add	r3, r1
    a538:	009b      	lsls	r3, r3, #2
    a53a:	4413      	add	r3, r2
    a53c:	685b      	ldr	r3, [r3, #4]
    a53e:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    a540:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a544:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    a548:	9b08      	ldr	r3, [sp, #32]
    a54a:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    a54c:	2300      	movs	r3, #0
    a54e:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a552:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a556:	aa05      	add	r2, sp, #20
    a558:	4611      	mov	r1, r2
    a55a:	4618      	mov	r0, r3
    a55c:	f7fe ffc8 	bl	94f0 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    a560:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a564:	3301      	adds	r3, #1
    a566:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a56a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    a56e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a572:	3b01      	subs	r3, #1
    a574:	429a      	cmp	r2, r3
    a576:	d3c7      	bcc.n	a508 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    a578:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a57c:	4a33      	ldr	r2, [pc, #204]	; (a64c <Adc_Ipw_ConfigureConversion+0x1d4>)
    a57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a582:	681b      	ldr	r3, [r3, #0]
    a584:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a58c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a58e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a592:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a596:	440b      	add	r3, r1
    a598:	005b      	lsls	r3, r3, #1
    a59a:	990a      	ldr	r1, [sp, #40]	; 0x28
    a59c:	440b      	add	r3, r1
    a59e:	881b      	ldrh	r3, [r3, #0]
    a5a0:	4619      	mov	r1, r3
    a5a2:	460b      	mov	r3, r1
    a5a4:	005b      	lsls	r3, r3, #1
    a5a6:	440b      	add	r3, r1
    a5a8:	009b      	lsls	r3, r3, #2
    a5aa:	4413      	add	r3, r2
    a5ac:	685b      	ldr	r3, [r3, #4]
    a5ae:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    a5b0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a5b4:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    a5b8:	9b08      	ldr	r3, [sp, #32]
    a5ba:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    a5bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a5be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a5c2:	2b00      	cmp	r3, #0
    a5c4:	d103      	bne.n	a5ce <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    a5c6:	2301      	movs	r3, #1
    a5c8:	f88d 301c 	strb.w	r3, [sp, #28]
    a5cc:	e002      	b.n	a5d4 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    a5ce:	2300      	movs	r3, #0
    a5d0:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a5d4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a5d8:	aa05      	add	r2, sp, #20
    a5da:	4611      	mov	r1, r2
    a5dc:	4618      	mov	r0, r3
    a5de:	f7fe ff87 	bl	94f0 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    a5e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a5e6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a5ea:	e014      	b.n	a616 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    a5ec:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a5f0:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    a5f4:	231f      	movs	r3, #31
    a5f6:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    a5f8:	2300      	movs	r3, #0
    a5fa:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a5fe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a602:	aa05      	add	r2, sp, #20
    a604:	4611      	mov	r1, r2
    a606:	4618      	mov	r0, r3
    a608:	f7fe ff72 	bl	94f0 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    a60c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a610:	3301      	adds	r3, #1
    a612:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a616:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a61a:	2b0f      	cmp	r3, #15
    a61c:	d9e6      	bls.n	a5ec <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    a61e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a622:	4a0c      	ldr	r2, [pc, #48]	; (a654 <Adc_Ipw_ConfigureConversion+0x1dc>)
    a624:	00db      	lsls	r3, r3, #3
    a626:	4413      	add	r3, r2
    a628:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a62c:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    a62e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a632:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a636:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a63a:	9300      	str	r3, [sp, #0]
    a63c:	9b02      	ldr	r3, [sp, #8]
    a63e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a640:	f7ff fd86 	bl	a150 <Adc_Ipw_ConfigurePdbConversion>
}
    a644:	bf00      	nop
    a646:	b00f      	add	sp, #60	; 0x3c
    a648:	f85d fb04 	ldr.w	pc, [sp], #4
    a64c:	1fff8d2c 	.word	0x1fff8d2c
    a650:	1fff8d30 	.word	0x1fff8d30
    a654:	1fff8d58 	.word	0x1fff8d58

0000a658 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    a658:	b500      	push	{lr}
    a65a:	b085      	sub	sp, #20
    a65c:	9001      	str	r0, [sp, #4]
    a65e:	460b      	mov	r3, r1
    a660:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a664:	2300      	movs	r3, #0
    a666:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    a66a:	2300      	movs	r3, #0
    a66c:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    a670:	2300      	movs	r3, #0
    a672:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a676:	2300      	movs	r3, #0
    a678:	f88d 300f 	strb.w	r3, [sp, #15]
    a67c:	e027      	b.n	a6ce <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    a67e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a682:	9a01      	ldr	r2, [sp, #4]
    a684:	4413      	add	r3, r2
    a686:	7f9b      	ldrb	r3, [r3, #30]
    a688:	2b01      	cmp	r3, #1
    a68a:	d11b      	bne.n	a6c4 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    a68c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a690:	9a01      	ldr	r2, [sp, #4]
    a692:	4413      	add	r3, r2
    a694:	7c1b      	ldrb	r3, [r3, #16]
    a696:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    a69a:	f89d 000e 	ldrb.w	r0, [sp, #14]
    a69e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a6a2:	9b01      	ldr	r3, [sp, #4]
    a6a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a6a8:	4619      	mov	r1, r3
    a6aa:	f7fe fcb8 	bl	901e <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    a6ae:	f89d 000e 	ldrb.w	r0, [sp, #14]
    a6b2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a6b6:	9b01      	ldr	r3, [sp, #4]
    a6b8:	3202      	adds	r2, #2
    a6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a6be:	4619      	mov	r1, r3
    a6c0:	f000 fead 	bl	b41e <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a6c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6c8:	3301      	adds	r3, #1
    a6ca:	f88d 300f 	strb.w	r3, [sp, #15]
    a6ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6d2:	2b01      	cmp	r3, #1
    a6d4:	d9d3      	bls.n	a67e <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    a6d6:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    a6da:	4618      	mov	r0, r3
    a6dc:	b005      	add	sp, #20
    a6de:	f85d fb04 	ldr.w	pc, [sp], #4

0000a6e2 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    a6e2:	b500      	push	{lr}
    a6e4:	b087      	sub	sp, #28
    a6e6:	4603      	mov	r3, r0
    a6e8:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    a6ec:	2300      	movs	r3, #0
    a6ee:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a6f2:	2300      	movs	r3, #0
    a6f4:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    a6f8:	2300      	movs	r3, #0
    a6fa:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    a6fe:	2300      	movs	r3, #0
    a700:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    a704:	2300      	movs	r3, #0
    a706:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a70a:	2300      	movs	r3, #0
    a70c:	f88d 3017 	strb.w	r3, [sp, #23]
    a710:	e026      	b.n	a760 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    a712:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a716:	4a2e      	ldr	r2, [pc, #184]	; (a7d0 <Adc_Ipw_DeInit+0xee>)
    a718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a71c:	681a      	ldr	r2, [r3, #0]
    a71e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a722:	4413      	add	r3, r2
    a724:	7f9b      	ldrb	r3, [r3, #30]
    a726:	2b01      	cmp	r3, #1
    a728:	d115      	bne.n	a756 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    a72a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a72e:	4a28      	ldr	r2, [pc, #160]	; (a7d0 <Adc_Ipw_DeInit+0xee>)
    a730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a734:	681a      	ldr	r2, [r3, #0]
    a736:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a73a:	4413      	add	r3, r2
    a73c:	7c1b      	ldrb	r3, [r3, #16]
    a73e:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    a742:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a746:	4618      	mov	r0, r3
    a748:	f7fe fd40 	bl	91cc <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    a74c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a750:	4618      	mov	r0, r3
    a752:	f000 ff0d 	bl	b570 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a756:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a75a:	3301      	adds	r3, #1
    a75c:	f88d 3017 	strb.w	r3, [sp, #23]
    a760:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a764:	2b01      	cmp	r3, #1
    a766:	d9d4      	bls.n	a712 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    a768:	2300      	movs	r3, #0
    a76a:	f8ad 3014 	strh.w	r3, [sp, #20]
    a76e:	e01e      	b.n	a7ae <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    a770:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a774:	4a16      	ldr	r2, [pc, #88]	; (a7d0 <Adc_Ipw_DeInit+0xee>)
    a776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a77a:	685a      	ldr	r2, [r3, #4]
    a77c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a780:	2134      	movs	r1, #52	; 0x34
    a782:	fb01 f303 	mul.w	r3, r1, r3
    a786:	4413      	add	r3, r2
    a788:	881b      	ldrh	r3, [r3, #0]
    a78a:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    a78e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a792:	4910      	ldr	r1, [pc, #64]	; (a7d4 <Adc_Ipw_DeInit+0xf2>)
    a794:	4613      	mov	r3, r2
    a796:	009b      	lsls	r3, r3, #2
    a798:	4413      	add	r3, r2
    a79a:	009b      	lsls	r3, r3, #2
    a79c:	440b      	add	r3, r1
    a79e:	330c      	adds	r3, #12
    a7a0:	2200      	movs	r2, #0
    a7a2:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    a7a4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a7a8:	3301      	adds	r3, #1
    a7aa:	f8ad 3014 	strh.w	r3, [sp, #20]
    a7ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7b2:	4a07      	ldr	r2, [pc, #28]	; (a7d0 <Adc_Ipw_DeInit+0xee>)
    a7b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7b8:	891b      	ldrh	r3, [r3, #8]
    a7ba:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a7be:	429a      	cmp	r2, r3
    a7c0:	d3d6      	bcc.n	a770 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    a7c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a7c6:	4618      	mov	r0, r3
    a7c8:	b007      	add	sp, #28
    a7ca:	f85d fb04 	ldr.w	pc, [sp], #4
    a7ce:	bf00      	nop
    a7d0:	1fff8d2c 	.word	0x1fff8d2c
    a7d4:	1fff8d30 	.word	0x1fff8d30

0000a7d8 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    a7d8:	b500      	push	{lr}
    a7da:	b089      	sub	sp, #36	; 0x24
    a7dc:	4603      	mov	r3, r0
    a7de:	460a      	mov	r2, r1
    a7e0:	f88d 300f 	strb.w	r3, [sp, #15]
    a7e4:	4613      	mov	r3, r2
    a7e6:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    a7ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a7ee:	4a4c      	ldr	r2, [pc, #304]	; (a920 <Adc_Ipw_StartNormalConversion+0x148>)
    a7f0:	00db      	lsls	r3, r3, #3
    a7f2:	4413      	add	r3, r2
    a7f4:	885b      	ldrh	r3, [r3, #2]
    a7f6:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    a7fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a7fe:	4a49      	ldr	r2, [pc, #292]	; (a924 <Adc_Ipw_StartNormalConversion+0x14c>)
    a800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a804:	68da      	ldr	r2, [r3, #12]
    a806:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    a80a:	005b      	lsls	r3, r3, #1
    a80c:	4413      	add	r3, r2
    a80e:	881b      	ldrh	r3, [r3, #0]
    a810:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    a814:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a818:	4a42      	ldr	r2, [pc, #264]	; (a924 <Adc_Ipw_StartNormalConversion+0x14c>)
    a81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a81e:	685a      	ldr	r2, [r3, #4]
    a820:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    a824:	2134      	movs	r1, #52	; 0x34
    a826:	fb01 f303 	mul.w	r3, r1, r3
    a82a:	4413      	add	r3, r2
    a82c:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a82e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a832:	4a3c      	ldr	r2, [pc, #240]	; (a924 <Adc_Ipw_StartNormalConversion+0x14c>)
    a834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a838:	681a      	ldr	r2, [r3, #0]
    a83a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a83e:	4413      	add	r3, r2
    a840:	7c1b      	ldrb	r3, [r3, #16]
    a842:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    a846:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a84a:	4a35      	ldr	r2, [pc, #212]	; (a920 <Adc_Ipw_StartNormalConversion+0x148>)
    a84c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a850:	b29b      	uxth	r3, r3
    a852:	2b00      	cmp	r3, #0
    a854:	d05f      	beq.n	a916 <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    a856:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a85a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a85e:	9905      	ldr	r1, [sp, #20]
    a860:	4618      	mov	r0, r3
    a862:	f7ff fdc9 	bl	a3f8 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a866:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    a86a:	492f      	ldr	r1, [pc, #188]	; (a928 <Adc_Ipw_StartNormalConversion+0x150>)
    a86c:	4613      	mov	r3, r2
    a86e:	009b      	lsls	r3, r3, #2
    a870:	4413      	add	r3, r2
    a872:	009b      	lsls	r3, r3, #2
    a874:	440b      	add	r3, r1
    a876:	3310      	adds	r3, #16
    a878:	2200      	movs	r2, #0
    a87a:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    a87c:	9b05      	ldr	r3, [sp, #20]
    a87e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a882:	2b0f      	cmp	r3, #15
    a884:	d806      	bhi.n	a894 <Adc_Ipw_StartNormalConversion+0xbc>
    a886:	9b05      	ldr	r3, [sp, #20]
    a888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a88c:	f003 030f 	and.w	r3, r3, #15
    a890:	b2db      	uxtb	r3, r3
    a892:	e000      	b.n	a896 <Adc_Ipw_StartNormalConversion+0xbe>
    a894:	2310      	movs	r3, #16
    a896:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    a89a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a89e:	4a20      	ldr	r2, [pc, #128]	; (a920 <Adc_Ipw_StartNormalConversion+0x148>)
    a8a0:	00db      	lsls	r3, r3, #3
    a8a2:	4413      	add	r3, r2
    a8a4:	799b      	ldrb	r3, [r3, #6]
    a8a6:	2b00      	cmp	r3, #0
    a8a8:	d107      	bne.n	a8ba <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    a8aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8ae:	4a1c      	ldr	r2, [pc, #112]	; (a920 <Adc_Ipw_StartNormalConversion+0x148>)
    a8b0:	00db      	lsls	r3, r3, #3
    a8b2:	4413      	add	r3, r2
    a8b4:	f89d 2012 	ldrb.w	r2, [sp, #18]
    a8b8:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a8ba:	2300      	movs	r3, #0
    a8bc:	f88d 301f 	strb.w	r3, [sp, #31]
    a8c0:	e00c      	b.n	a8dc <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    a8c2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a8c6:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a8ca:	4611      	mov	r1, r2
    a8cc:	4618      	mov	r0, r3
    a8ce:	f7fe ff03 	bl	96d8 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a8d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a8d6:	3301      	adds	r3, #1
    a8d8:	f88d 301f 	strb.w	r3, [sp, #31]
    a8dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8e0:	4a0f      	ldr	r2, [pc, #60]	; (a920 <Adc_Ipw_StartNormalConversion+0x148>)
    a8e2:	00db      	lsls	r3, r3, #3
    a8e4:	4413      	add	r3, r2
    a8e6:	799b      	ldrb	r3, [r3, #6]
    a8e8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a8ec:	429a      	cmp	r2, r3
    a8ee:	d3e8      	bcc.n	a8c2 <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    a8f0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a8f4:	2101      	movs	r1, #1
    a8f6:	4618      	mov	r0, r3
    a8f8:	f7fe fd60 	bl	93bc <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    a8fc:	f89d 2012 	ldrb.w	r2, [sp, #18]
    a900:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    a904:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a908:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a90c:	9300      	str	r3, [sp, #0]
    a90e:	4613      	mov	r3, r2
    a910:	220f      	movs	r2, #15
    a912:	f7ff fdb1 	bl	a478 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    a916:	bf00      	nop
    a918:	b009      	add	sp, #36	; 0x24
    a91a:	f85d fb04 	ldr.w	pc, [sp], #4
    a91e:	bf00      	nop
    a920:	1fff8d58 	.word	0x1fff8d58
    a924:	1fff8d2c 	.word	0x1fff8d2c
    a928:	1fff8d30 	.word	0x1fff8d30

0000a92c <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    a92c:	b500      	push	{lr}
    a92e:	b085      	sub	sp, #20
    a930:	4603      	mov	r3, r0
    a932:	f88d 3007 	strb.w	r3, [sp, #7]
    a936:	460b      	mov	r3, r1
    a938:	f8ad 3004 	strh.w	r3, [sp, #4]
    a93c:	4613      	mov	r3, r2
    a93e:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    a942:	2300      	movs	r3, #0
    a944:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a948:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a94c:	4a24      	ldr	r2, [pc, #144]	; (a9e0 <Adc_Ipw_StopCurrentConversion+0xb4>)
    a94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a952:	681a      	ldr	r2, [r3, #0]
    a954:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a958:	4413      	add	r3, r2
    a95a:	7c1b      	ldrb	r3, [r3, #16]
    a95c:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a960:	2300      	movs	r3, #0
    a962:	f88d 300f 	strb.w	r3, [sp, #15]
    a966:	e014      	b.n	a992 <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    a968:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a96c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a970:	2200      	movs	r2, #0
    a972:	4618      	mov	r0, r3
    a974:	f7fe fdec 	bl	9550 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    a978:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a97c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a980:	4611      	mov	r1, r2
    a982:	4618      	mov	r0, r3
    a984:	f7fe fea8 	bl	96d8 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a988:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a98c:	3301      	adds	r3, #1
    a98e:	f88d 300f 	strb.w	r3, [sp, #15]
    a992:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a996:	4a13      	ldr	r2, [pc, #76]	; (a9e4 <Adc_Ipw_StopCurrentConversion+0xb8>)
    a998:	00db      	lsls	r3, r3, #3
    a99a:	4413      	add	r3, r2
    a99c:	799b      	ldrb	r3, [r3, #6]
    a99e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a9a2:	429a      	cmp	r2, r3
    a9a4:	d3e0      	bcc.n	a968 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a9a6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a9aa:	490f      	ldr	r1, [pc, #60]	; (a9e8 <Adc_Ipw_StopCurrentConversion+0xbc>)
    a9ac:	4613      	mov	r3, r2
    a9ae:	009b      	lsls	r3, r3, #2
    a9b0:	4413      	add	r3, r2
    a9b2:	009b      	lsls	r3, r3, #2
    a9b4:	440b      	add	r3, r1
    a9b6:	3310      	adds	r3, #16
    a9b8:	2200      	movs	r2, #0
    a9ba:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    a9bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a9c0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a9c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9c8:	4618      	mov	r0, r3
    a9ca:	f7ff fc97 	bl	a2fc <Adc_Ipw_StopConversionCheckTimeout>
    a9ce:	4603      	mov	r3, r0
    a9d0:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    a9d4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    a9d8:	4618      	mov	r0, r3
    a9da:	b005      	add	sp, #20
    a9dc:	f85d fb04 	ldr.w	pc, [sp], #4
    a9e0:	1fff8d2c 	.word	0x1fff8d2c
    a9e4:	1fff8d58 	.word	0x1fff8d58
    a9e8:	1fff8d30 	.word	0x1fff8d30

0000a9ec <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    a9ec:	b500      	push	{lr}
    a9ee:	b085      	sub	sp, #20
    a9f0:	4603      	mov	r3, r0
    a9f2:	f88d 3007 	strb.w	r3, [sp, #7]
    a9f6:	460b      	mov	r3, r1
    a9f8:	f88d 3006 	strb.w	r3, [sp, #6]
    a9fc:	4613      	mov	r3, r2
    a9fe:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    aa02:	2301      	movs	r3, #1
    aa04:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    aa08:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa0c:	f88d 300f 	strb.w	r3, [sp, #15]
    aa10:	e019      	b.n	aa46 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    aa12:	f89d 0007 	ldrb.w	r0, [sp, #7]
    aa16:	f89d 200f 	ldrb.w	r2, [sp, #15]
    aa1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa1e:	1ad3      	subs	r3, r2, r3
    aa20:	b2db      	uxtb	r3, r3
    aa22:	4619      	mov	r1, r3
    aa24:	f7fe fe3e 	bl	96a4 <Adc_Ip_GetConvCompleteFlag>
    aa28:	4603      	mov	r3, r0
    aa2a:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    aa2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aa32:	f083 0301 	eor.w	r3, r3, #1
    aa36:	b2db      	uxtb	r3, r3
    aa38:	2b00      	cmp	r3, #0
    aa3a:	d10b      	bne.n	aa54 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    aa3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    aa40:	3301      	adds	r3, #1
    aa42:	f88d 300f 	strb.w	r3, [sp, #15]
    aa46:	f89d 200f 	ldrb.w	r2, [sp, #15]
    aa4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    aa4e:	429a      	cmp	r2, r3
    aa50:	d3df      	bcc.n	aa12 <Adc_Ipw_CheckValidConversion+0x26>
    aa52:	e000      	b.n	aa56 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    aa54:	bf00      	nop
        }
    }

    return ValidConversion;
    aa56:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    aa5a:	4618      	mov	r0, r3
    aa5c:	b005      	add	sp, #20
    aa5e:	f85d fb04 	ldr.w	pc, [sp], #4

0000aa62 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    aa62:	b500      	push	{lr}
    aa64:	b089      	sub	sp, #36	; 0x24
    aa66:	9102      	str	r1, [sp, #8]
    aa68:	9201      	str	r2, [sp, #4]
    aa6a:	461a      	mov	r2, r3
    aa6c:	4603      	mov	r3, r0
    aa6e:	f8ad 300e 	strh.w	r3, [sp, #14]
    aa72:	4613      	mov	r3, r2
    aa74:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    aa78:	2300      	movs	r3, #0
    aa7a:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    aa7e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    aa82:	4a33      	ldr	r2, [pc, #204]	; (ab50 <Adc_Ipw_ReadGroup+0xee>)
    aa84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa88:	68da      	ldr	r2, [r3, #12]
    aa8a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    aa8e:	005b      	lsls	r3, r3, #1
    aa90:	4413      	add	r3, r2
    aa92:	881b      	ldrh	r3, [r3, #0]
    aa94:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    aa98:	f89d 300d 	ldrb.w	r3, [sp, #13]
    aa9c:	4a2c      	ldr	r2, [pc, #176]	; (ab50 <Adc_Ipw_ReadGroup+0xee>)
    aa9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaa2:	685a      	ldr	r2, [r3, #4]
    aaa4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    aaa8:	2134      	movs	r1, #52	; 0x34
    aaaa:	fb01 f303 	mul.w	r3, r1, r3
    aaae:	4413      	add	r3, r2
    aab0:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    aab2:	9b06      	ldr	r3, [sp, #24]
    aab4:	789b      	ldrb	r3, [r3, #2]
    aab6:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    aaba:	9b06      	ldr	r3, [sp, #24]
    aabc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    aac0:	2b01      	cmp	r3, #1
    aac2:	d124      	bne.n	ab0e <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    aac4:	9b06      	ldr	r3, [sp, #24]
    aac6:	68db      	ldr	r3, [r3, #12]
    aac8:	2b00      	cmp	r3, #0
    aaca:	d111      	bne.n	aaf0 <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    aacc:	9b06      	ldr	r3, [sp, #24]
    aace:	695b      	ldr	r3, [r3, #20]
    aad0:	2b00      	cmp	r3, #0
    aad2:	d10d      	bne.n	aaf0 <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    aad4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aad8:	4a1e      	ldr	r2, [pc, #120]	; (ab54 <Adc_Ipw_ReadGroup+0xf2>)
    aada:	00db      	lsls	r3, r3, #3
    aadc:	4413      	add	r3, r2
    aade:	885b      	ldrh	r3, [r3, #2]
    aae0:	b29b      	uxth	r3, r3
    aae2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    aae6:	429a      	cmp	r2, r3
    aae8:	d002      	beq.n	aaf0 <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    aaea:	2301      	movs	r3, #1
    aaec:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    aaf0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    aaf4:	2b00      	cmp	r3, #0
    aaf6:	d124      	bne.n	ab42 <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    aaf8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    aafc:	9a01      	ldr	r2, [sp, #4]
    aafe:	9902      	ldr	r1, [sp, #8]
    ab00:	9806      	ldr	r0, [sp, #24]
    ab02:	f7ff f91f 	bl	9d44 <Adc_Ipw_ReadGroupNoInt>
    ab06:	4603      	mov	r3, r0
    ab08:	f88d 301f 	strb.w	r3, [sp, #31]
    ab0c:	e019      	b.n	ab42 <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    ab0e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ab12:	4911      	ldr	r1, [pc, #68]	; (ab58 <Adc_Ipw_ReadGroup+0xf6>)
    ab14:	4613      	mov	r3, r2
    ab16:	009b      	lsls	r3, r3, #2
    ab18:	4413      	add	r3, r2
    ab1a:	009b      	lsls	r3, r3, #2
    ab1c:	440b      	add	r3, r1
    ab1e:	681b      	ldr	r3, [r3, #0]
    ab20:	2b01      	cmp	r3, #1
    ab22:	d102      	bne.n	ab2a <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    ab24:	2301      	movs	r3, #1
    ab26:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    ab2a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d107      	bne.n	ab42 <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    ab32:	f89d 200d 	ldrb.w	r2, [sp, #13]
    ab36:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ab3a:	9902      	ldr	r1, [sp, #8]
    ab3c:	4618      	mov	r0, r3
    ab3e:	f7ff f949 	bl	9dd4 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    ab42:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    ab46:	4618      	mov	r0, r3
    ab48:	b009      	add	sp, #36	; 0x24
    ab4a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab4e:	bf00      	nop
    ab50:	1fff8d2c 	.word	0x1fff8d2c
    ab54:	1fff8d58 	.word	0x1fff8d58
    ab58:	1fff8d30 	.word	0x1fff8d30

0000ab5c <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    ab5c:	b500      	push	{lr}
    ab5e:	b085      	sub	sp, #20
    ab60:	4603      	mov	r3, r0
    ab62:	9100      	str	r1, [sp, #0]
    ab64:	f88d 3007 	strb.w	r3, [sp, #7]
    ab68:	4613      	mov	r3, r2
    ab6a:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    ab6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab72:	4a0e      	ldr	r2, [pc, #56]	; (abac <Adc_Ipw_Calibrate+0x50>)
    ab74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab78:	681a      	ldr	r2, [r3, #0]
    ab7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ab7e:	4413      	add	r3, r2
    ab80:	7c1b      	ldrb	r3, [r3, #16]
    ab82:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    ab86:	9b00      	ldr	r3, [sp, #0]
    ab88:	2200      	movs	r2, #0
    ab8a:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    ab8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ab90:	4618      	mov	r0, r3
    ab92:	f7fe fdb9 	bl	9708 <Adc_Ip_DoCalibration>
    ab96:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    ab98:	9b02      	ldr	r3, [sp, #8]
    ab9a:	2b00      	cmp	r3, #0
    ab9c:	d002      	beq.n	aba4 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    ab9e:	9b00      	ldr	r3, [sp, #0]
    aba0:	2201      	movs	r2, #1
    aba2:	701a      	strb	r2, [r3, #0]
    }
}
    aba4:	bf00      	nop
    aba6:	b005      	add	sp, #20
    aba8:	f85d fb04 	ldr.w	pc, [sp], #4
    abac:	1fff8d2c 	.word	0x1fff8d2c

0000abb0 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    abb0:	2300      	movs	r3, #0
}
    abb2:	4618      	mov	r0, r3
    abb4:	4770      	bx	lr
    abb6:	bf00      	nop

0000abb8 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    abb8:	b500      	push	{lr}
    abba:	b083      	sub	sp, #12
    abbc:	4603      	mov	r3, r0
    abbe:	460a      	mov	r2, r1
    abc0:	f88d 3007 	strb.w	r3, [sp, #7]
    abc4:	4613      	mov	r3, r2
    abc6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    abca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    abce:	2100      	movs	r1, #0
    abd0:	4618      	mov	r0, r3
    abd2:	f7fe fff3 	bl	9bbc <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    abd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    abda:	4a09      	ldr	r2, [pc, #36]	; (ac00 <Adc_Ipw_UpdateQueue+0x48>)
    abdc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    abe0:	b29b      	uxth	r3, r3
    abe2:	2b00      	cmp	r3, #0
    abe4:	d007      	beq.n	abf6 <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    abe6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    abea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    abee:	4611      	mov	r1, r2
    abf0:	4618      	mov	r0, r3
    abf2:	f7ff fdf1 	bl	a7d8 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    abf6:	bf00      	nop
    abf8:	b003      	add	sp, #12
    abfa:	f85d fb04 	ldr.w	pc, [sp], #4
    abfe:	bf00      	nop
    ac00:	1fff8d58 	.word	0x1fff8d58

0000ac04 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    ac04:	b510      	push	{r4, lr}
    ac06:	b08a      	sub	sp, #40	; 0x28
    ac08:	4604      	mov	r4, r0
    ac0a:	4608      	mov	r0, r1
    ac0c:	4611      	mov	r1, r2
    ac0e:	461a      	mov	r2, r3
    ac10:	4623      	mov	r3, r4
    ac12:	f88d 300f 	strb.w	r3, [sp, #15]
    ac16:	4603      	mov	r3, r0
    ac18:	f8ad 300c 	strh.w	r3, [sp, #12]
    ac1c:	460b      	mov	r3, r1
    ac1e:	f8ad 300a 	strh.w	r3, [sp, #10]
    ac22:	4613      	mov	r3, r2
    ac24:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    ac28:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ac2c:	4a68      	ldr	r2, [pc, #416]	; (add0 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ac2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac32:	68da      	ldr	r2, [r3, #12]
    ac34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ac38:	005b      	lsls	r3, r3, #1
    ac3a:	4413      	add	r3, r2
    ac3c:	881b      	ldrh	r3, [r3, #0]
    ac3e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    ac42:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ac46:	4963      	ldr	r1, [pc, #396]	; (add4 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ac48:	4613      	mov	r3, r2
    ac4a:	009b      	lsls	r3, r3, #2
    ac4c:	4413      	add	r3, r2
    ac4e:	009b      	lsls	r3, r3, #2
    ac50:	440b      	add	r3, r1
    ac52:	3310      	adds	r3, #16
    ac54:	781b      	ldrb	r3, [r3, #0]
    ac56:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    ac5a:	2300      	movs	r3, #0
    ac5c:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    ac5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ac62:	4a5b      	ldr	r2, [pc, #364]	; (add0 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ac64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac68:	681a      	ldr	r2, [r3, #0]
    ac6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ac6e:	4413      	add	r3, r2
    ac70:	7c1b      	ldrb	r3, [r3, #16]
    ac72:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    ac76:	2300      	movs	r3, #0
    ac78:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    ac7c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ac80:	4a53      	ldr	r2, [pc, #332]	; (add0 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ac82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac86:	681b      	ldr	r3, [r3, #0]
    ac88:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ac8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ac90:	695b      	ldr	r3, [r3, #20]
    ac92:	4618      	mov	r0, r3
    ac94:	f7ff fbe6 	bl	a464 <Adc_Ipw_CalculateNumsBitShift>
    ac98:	4603      	mov	r3, r0
    ac9a:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    ac9e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aca2:	4a4b      	ldr	r2, [pc, #300]	; (add0 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    aca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aca8:	685a      	ldr	r2, [r3, #4]
    acaa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    acae:	2134      	movs	r1, #52	; 0x34
    acb0:	fb01 f303 	mul.w	r3, r1, r3
    acb4:	4413      	add	r3, r2
    acb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    acba:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    acbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    acc2:	4a43      	ldr	r2, [pc, #268]	; (add0 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    acc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acc8:	685a      	ldr	r2, [r3, #4]
    acca:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    acce:	2134      	movs	r1, #52	; 0x34
    acd0:	fb01 f303 	mul.w	r3, r1, r3
    acd4:	4413      	add	r3, r2
    acd6:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    acd8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    acdc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ace0:	429a      	cmp	r2, r3
    ace2:	d870      	bhi.n	adc6 <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    ace4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ace8:	f003 030f 	and.w	r3, r3, #15
    acec:	b2db      	uxtb	r3, r3
    acee:	2b00      	cmp	r3, #0
    acf0:	d104      	bne.n	acfc <Adc_Ipw_CheckConversionChannels+0xf8>
    acf2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    acf6:	3b10      	subs	r3, #16
    acf8:	b2db      	uxtb	r3, r3
    acfa:	e004      	b.n	ad06 <Adc_Ipw_CheckConversionChannels+0x102>
    acfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ad00:	f023 030f 	bic.w	r3, r3, #15
    ad04:	b2db      	uxtb	r3, r3
    ad06:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    ad0a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ad0e:	4931      	ldr	r1, [pc, #196]	; (add4 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ad10:	4613      	mov	r3, r2
    ad12:	009b      	lsls	r3, r3, #2
    ad14:	4413      	add	r3, r2
    ad16:	009b      	lsls	r3, r3, #2
    ad18:	440b      	add	r3, r1
    ad1a:	330c      	adds	r3, #12
    ad1c:	6819      	ldr	r1, [r3, #0]
    ad1e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ad22:	482c      	ldr	r0, [pc, #176]	; (add4 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ad24:	4613      	mov	r3, r2
    ad26:	009b      	lsls	r3, r3, #2
    ad28:	4413      	add	r3, r2
    ad2a:	009b      	lsls	r3, r3, #2
    ad2c:	4403      	add	r3, r0
    ad2e:	3308      	adds	r3, #8
    ad30:	881b      	ldrh	r3, [r3, #0]
    ad32:	b29b      	uxth	r3, r3
    ad34:	005b      	lsls	r3, r3, #1
    ad36:	440b      	add	r3, r1
    ad38:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    ad3a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ad3e:	f89d 1013 	ldrb.w	r1, [sp, #19]
    ad42:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ad46:	4618      	mov	r0, r3
    ad48:	f7ff fe50 	bl	a9ec <Adc_Ipw_CheckValidConversion>
    ad4c:	4603      	mov	r3, r0
    ad4e:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    ad52:	f89d 3012 	ldrb.w	r3, [sp, #18]
    ad56:	2b00      	cmp	r3, #0
    ad58:	d032      	beq.n	adc0 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    ad5a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ad5e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    ad62:	e026      	b.n	adb2 <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    ad64:	f89d 001b 	ldrb.w	r0, [sp, #27]
    ad68:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    ad6c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ad70:	1ad3      	subs	r3, r2, r3
    ad72:	b2db      	uxtb	r3, r3
    ad74:	4619      	mov	r1, r3
    ad76:	f7fe fcaf 	bl	96d8 <Adc_Ip_GetConvData>
    ad7a:	4603      	mov	r3, r0
    ad7c:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    ad80:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    ad84:	f89d 301a 	ldrb.w	r3, [sp, #26]
    ad88:	fa02 f303 	lsl.w	r3, r2, r3
    ad8c:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    ad90:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    ad94:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    ad98:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ad9c:	9300      	str	r3, [sp, #0]
    ad9e:	460b      	mov	r3, r1
    ada0:	9907      	ldr	r1, [sp, #28]
    ada2:	9805      	ldr	r0, [sp, #20]
    ada4:	f000 fa02 	bl	b1ac <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    ada8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    adac:	3301      	adds	r3, #1
    adae:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    adb2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    adb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    adba:	429a      	cmp	r2, r3
    adbc:	d3d2      	bcc.n	ad64 <Adc_Ipw_CheckConversionChannels+0x160>
    adbe:	e002      	b.n	adc6 <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    adc0:	2301      	movs	r3, #1
    adc2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    adc6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    adca:	4618      	mov	r0, r3
    adcc:	b00a      	add	sp, #40	; 0x28
    adce:	bd10      	pop	{r4, pc}
    add0:	1fff8d2c 	.word	0x1fff8d2c
    add4:	1fff8d30 	.word	0x1fff8d30

0000add8 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    add8:	b500      	push	{lr}
    adda:	b087      	sub	sp, #28
    addc:	4603      	mov	r3, r0
    adde:	f88d 300f 	strb.w	r3, [sp, #15]
    ade2:	460b      	mov	r3, r1
    ade4:	f8ad 300c 	strh.w	r3, [sp, #12]
    ade8:	4613      	mov	r3, r2
    adea:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    adee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    adf2:	4a33      	ldr	r2, [pc, #204]	; (aec0 <Adc_Ipw_RestartConversion+0xe8>)
    adf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adf8:	68da      	ldr	r2, [r3, #12]
    adfa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    adfe:	005b      	lsls	r3, r3, #1
    ae00:	4413      	add	r3, r2
    ae02:	881b      	ldrh	r3, [r3, #0]
    ae04:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    ae08:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ae0c:	4a2c      	ldr	r2, [pc, #176]	; (aec0 <Adc_Ipw_RestartConversion+0xe8>)
    ae0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae12:	681a      	ldr	r2, [r3, #0]
    ae14:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ae18:	4413      	add	r3, r2
    ae1a:	7c1b      	ldrb	r3, [r3, #16]
    ae1c:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    ae20:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ae24:	4a26      	ldr	r2, [pc, #152]	; (aec0 <Adc_Ipw_RestartConversion+0xe8>)
    ae26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae2a:	685a      	ldr	r2, [r3, #4]
    ae2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ae30:	2134      	movs	r1, #52	; 0x34
    ae32:	fb01 f303 	mul.w	r3, r1, r3
    ae36:	4413      	add	r3, r2
    ae38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    ae3c:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    ae40:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae44:	2b0f      	cmp	r3, #15
    ae46:	d805      	bhi.n	ae54 <Adc_Ipw_RestartConversion+0x7c>
    ae48:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae4c:	f003 030f 	and.w	r3, r3, #15
    ae50:	b2db      	uxtb	r3, r3
    ae52:	e000      	b.n	ae56 <Adc_Ipw_RestartConversion+0x7e>
    ae54:	2310      	movs	r3, #16
    ae56:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    ae5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae5e:	2b10      	cmp	r3, #16
    ae60:	d811      	bhi.n	ae86 <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    ae62:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ae66:	4917      	ldr	r1, [pc, #92]	; (aec4 <Adc_Ipw_RestartConversion+0xec>)
    ae68:	4613      	mov	r3, r2
    ae6a:	009b      	lsls	r3, r3, #2
    ae6c:	4413      	add	r3, r2
    ae6e:	009b      	lsls	r3, r3, #2
    ae70:	440b      	add	r3, r1
    ae72:	3310      	adds	r3, #16
    ae74:	f89d 2014 	ldrb.w	r2, [sp, #20]
    ae78:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    ae7a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ae7e:	4618      	mov	r0, r3
    ae80:	f000 fc68 	bl	b754 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    ae84:	e017      	b.n	aeb6 <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    ae86:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ae8a:	490e      	ldr	r1, [pc, #56]	; (aec4 <Adc_Ipw_RestartConversion+0xec>)
    ae8c:	4613      	mov	r3, r2
    ae8e:	009b      	lsls	r3, r3, #2
    ae90:	4413      	add	r3, r2
    ae92:	009b      	lsls	r3, r3, #2
    ae94:	440b      	add	r3, r1
    ae96:	3310      	adds	r3, #16
    ae98:	2200      	movs	r2, #0
    ae9a:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    ae9c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    aea0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    aea4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    aea8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aeac:	9300      	str	r3, [sp, #0]
    aeae:	4613      	mov	r3, r2
    aeb0:	220f      	movs	r2, #15
    aeb2:	f7ff fae1 	bl	a478 <Adc_Ipw_ConfigureConversion>
}
    aeb6:	bf00      	nop
    aeb8:	b007      	add	sp, #28
    aeba:	f85d fb04 	ldr.w	pc, [sp], #4
    aebe:	bf00      	nop
    aec0:	1fff8d2c 	.word	0x1fff8d2c
    aec4:	1fff8d30 	.word	0x1fff8d30

0000aec8 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    aec8:	b084      	sub	sp, #16
    aeca:	4603      	mov	r3, r0
    aecc:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    aed0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    aed4:	4907      	ldr	r1, [pc, #28]	; (aef4 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    aed6:	4613      	mov	r3, r2
    aed8:	009b      	lsls	r3, r3, #2
    aeda:	4413      	add	r3, r2
    aedc:	009b      	lsls	r3, r3, #2
    aede:	440b      	add	r3, r1
    aee0:	3308      	adds	r3, #8
    aee2:	881b      	ldrh	r3, [r3, #0]
    aee4:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    aee8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    aeec:	4618      	mov	r0, r3
    aeee:	b004      	add	sp, #16
    aef0:	4770      	bx	lr
    aef2:	bf00      	nop
    aef4:	1fff8d30 	.word	0x1fff8d30

0000aef8 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    aef8:	b510      	push	{r4, lr}
    aefa:	b084      	sub	sp, #16
    aefc:	4604      	mov	r4, r0
    aefe:	4608      	mov	r0, r1
    af00:	4611      	mov	r1, r2
    af02:	461a      	mov	r2, r3
    af04:	4623      	mov	r3, r4
    af06:	f88d 3007 	strb.w	r3, [sp, #7]
    af0a:	4603      	mov	r3, r0
    af0c:	f8ad 3004 	strh.w	r3, [sp, #4]
    af10:	460b      	mov	r3, r1
    af12:	f8ad 3002 	strh.w	r3, [sp, #2]
    af16:	4613      	mov	r3, r2
    af18:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    af1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    af20:	4a4f      	ldr	r2, [pc, #316]	; (b060 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    af22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af26:	68da      	ldr	r2, [r3, #12]
    af28:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    af2c:	005b      	lsls	r3, r3, #1
    af2e:	4413      	add	r3, r2
    af30:	881b      	ldrh	r3, [r3, #0]
    af32:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    af36:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af3a:	494a      	ldr	r1, [pc, #296]	; (b064 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    af3c:	4613      	mov	r3, r2
    af3e:	009b      	lsls	r3, r3, #2
    af40:	4413      	add	r3, r2
    af42:	009b      	lsls	r3, r3, #2
    af44:	440b      	add	r3, r1
    af46:	3304      	adds	r3, #4
    af48:	2201      	movs	r2, #1
    af4a:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    af4c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af50:	4944      	ldr	r1, [pc, #272]	; (b064 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    af52:	4613      	mov	r3, r2
    af54:	009b      	lsls	r3, r3, #2
    af56:	4413      	add	r3, r2
    af58:	009b      	lsls	r3, r3, #2
    af5a:	440b      	add	r3, r1
    af5c:	681b      	ldr	r3, [r3, #0]
    af5e:	2b01      	cmp	r3, #1
    af60:	d109      	bne.n	af76 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    af62:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af66:	493f      	ldr	r1, [pc, #252]	; (b064 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    af68:	4613      	mov	r3, r2
    af6a:	009b      	lsls	r3, r3, #2
    af6c:	4413      	add	r3, r2
    af6e:	009b      	lsls	r3, r3, #2
    af70:	440b      	add	r3, r1
    af72:	2202      	movs	r2, #2
    af74:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    af76:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    af7a:	4618      	mov	r0, r3
    af7c:	f7ff ffa4 	bl	aec8 <Adc_Ipw_GetCurrentSampleCount>
    af80:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    af82:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    af86:	9a02      	ldr	r2, [sp, #8]
    af88:	429a      	cmp	r2, r3
    af8a:	d35d      	bcc.n	b048 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    af8c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af90:	4934      	ldr	r1, [pc, #208]	; (b064 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    af92:	4613      	mov	r3, r2
    af94:	009b      	lsls	r3, r3, #2
    af96:	4413      	add	r3, r2
    af98:	009b      	lsls	r3, r3, #2
    af9a:	440b      	add	r3, r1
    af9c:	2203      	movs	r2, #3
    af9e:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    afa0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afa4:	4a2e      	ldr	r2, [pc, #184]	; (b060 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    afa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afaa:	685a      	ldr	r2, [r3, #4]
    afac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    afb0:	2134      	movs	r1, #52	; 0x34
    afb2:	fb01 f303 	mul.w	r3, r1, r3
    afb6:	4413      	add	r3, r2
    afb8:	699b      	ldr	r3, [r3, #24]
    afba:	2b00      	cmp	r3, #0
    afbc:	d117      	bne.n	afee <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    afbe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afc2:	4a27      	ldr	r2, [pc, #156]	; (b060 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    afc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afc8:	685a      	ldr	r2, [r3, #4]
    afca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    afce:	2134      	movs	r1, #52	; 0x34
    afd0:	fb01 f303 	mul.w	r3, r1, r3
    afd4:	4413      	add	r3, r2
    afd6:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    afd8:	2b01      	cmp	r3, #1
    afda:	d108      	bne.n	afee <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    afdc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    afe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    afe4:	4611      	mov	r1, r2
    afe6:	4618      	mov	r0, r3
    afe8:	f7ff fde6 	bl	abb8 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    afec:	e035      	b.n	b05a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    afee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aff2:	4a1b      	ldr	r2, [pc, #108]	; (b060 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    aff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aff8:	685a      	ldr	r2, [r3, #4]
    affa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    affe:	2134      	movs	r1, #52	; 0x34
    b000:	fb01 f303 	mul.w	r3, r1, r3
    b004:	4413      	add	r3, r2
    b006:	689b      	ldr	r3, [r3, #8]
    b008:	2b01      	cmp	r3, #1
    b00a:	d114      	bne.n	b036 <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    b00c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b010:	4914      	ldr	r1, [pc, #80]	; (b064 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    b012:	4613      	mov	r3, r2
    b014:	009b      	lsls	r3, r3, #2
    b016:	4413      	add	r3, r2
    b018:	009b      	lsls	r3, r3, #2
    b01a:	440b      	add	r3, r1
    b01c:	3308      	adds	r3, #8
    b01e:	2200      	movs	r2, #0
    b020:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    b022:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b026:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b02a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b02e:	4618      	mov	r0, r3
    b030:	f7ff fed2 	bl	add8 <Adc_Ipw_RestartConversion>
}
    b034:	e011      	b.n	b05a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    b036:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b03a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b03e:	4611      	mov	r1, r2
    b040:	4618      	mov	r0, r3
    b042:	f7ff fdb9 	bl	abb8 <Adc_Ipw_UpdateQueue>
}
    b046:	e008      	b.n	b05a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    b048:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b04c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b050:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b054:	4618      	mov	r0, r3
    b056:	f7ff febf 	bl	add8 <Adc_Ipw_RestartConversion>
}
    b05a:	bf00      	nop
    b05c:	b004      	add	sp, #16
    b05e:	bd10      	pop	{r4, pc}
    b060:	1fff8d2c 	.word	0x1fff8d2c
    b064:	1fff8d30 	.word	0x1fff8d30

0000b068 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    b068:	b510      	push	{r4, lr}
    b06a:	b088      	sub	sp, #32
    b06c:	4604      	mov	r4, r0
    b06e:	4608      	mov	r0, r1
    b070:	4611      	mov	r1, r2
    b072:	461a      	mov	r2, r3
    b074:	4623      	mov	r3, r4
    b076:	f88d 300f 	strb.w	r3, [sp, #15]
    b07a:	4603      	mov	r3, r0
    b07c:	f8ad 300c 	strh.w	r3, [sp, #12]
    b080:	460b      	mov	r3, r1
    b082:	f88d 300e 	strb.w	r3, [sp, #14]
    b086:	4613      	mov	r3, r2
    b088:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    b08c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b090:	4a44      	ldr	r2, [pc, #272]	; (b1a4 <Adc_Ipw_EndConversion+0x13c>)
    b092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b096:	68da      	ldr	r2, [r3, #12]
    b098:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b09c:	005b      	lsls	r3, r3, #1
    b09e:	4413      	add	r3, r2
    b0a0:	881b      	ldrh	r3, [r3, #0]
    b0a2:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    b0a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0aa:	4a3e      	ldr	r2, [pc, #248]	; (b1a4 <Adc_Ipw_EndConversion+0x13c>)
    b0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0b0:	685a      	ldr	r2, [r3, #4]
    b0b2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    b0b6:	2134      	movs	r1, #52	; 0x34
    b0b8:	fb01 f303 	mul.w	r3, r1, r3
    b0bc:	4413      	add	r3, r2
    b0be:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    b0c0:	9b06      	ldr	r3, [sp, #24]
    b0c2:	8b9a      	ldrh	r2, [r3, #28]
    b0c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0c8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b0cc:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b0d0:	f7ff fd98 	bl	ac04 <Adc_Ipw_CheckConversionChannels>
    b0d4:	4603      	mov	r3, r0
    b0d6:	2b00      	cmp	r3, #0
    b0d8:	d160      	bne.n	b19c <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    b0da:	9b06      	ldr	r3, [sp, #24]
    b0dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b0e0:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    b0e4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b0e8:	492f      	ldr	r1, [pc, #188]	; (b1a8 <Adc_Ipw_EndConversion+0x140>)
    b0ea:	4613      	mov	r3, r2
    b0ec:	009b      	lsls	r3, r3, #2
    b0ee:	4413      	add	r3, r2
    b0f0:	009b      	lsls	r3, r3, #2
    b0f2:	440b      	add	r3, r1
    b0f4:	3310      	adds	r3, #16
    b0f6:	781b      	ldrb	r3, [r3, #0]
    b0f8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b0fc:	429a      	cmp	r2, r3
    b0fe:	d929      	bls.n	b154 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    b100:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b104:	4928      	ldr	r1, [pc, #160]	; (b1a8 <Adc_Ipw_EndConversion+0x140>)
    b106:	4613      	mov	r3, r2
    b108:	009b      	lsls	r3, r3, #2
    b10a:	4413      	add	r3, r2
    b10c:	009b      	lsls	r3, r3, #2
    b10e:	440b      	add	r3, r1
    b110:	3310      	adds	r3, #16
    b112:	781b      	ldrb	r3, [r3, #0]
    b114:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b118:	1ad3      	subs	r3, r2, r3
    b11a:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    b11e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b122:	2b0f      	cmp	r3, #15
    b124:	d805      	bhi.n	b132 <Adc_Ipw_EndConversion+0xca>
    b126:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b12a:	f003 030f 	and.w	r3, r3, #15
    b12e:	b2db      	uxtb	r3, r3
    b130:	e000      	b.n	b134 <Adc_Ipw_EndConversion+0xcc>
    b132:	2310      	movs	r3, #16
    b134:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    b138:	f89d 2015 	ldrb.w	r2, [sp, #21]
    b13c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b140:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b144:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b148:	9300      	str	r3, [sp, #0]
    b14a:	4613      	mov	r3, r2
    b14c:	220f      	movs	r2, #15
    b14e:	f7ff f993 	bl	a478 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    b152:	e023      	b.n	b19c <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    b154:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b158:	4913      	ldr	r1, [pc, #76]	; (b1a8 <Adc_Ipw_EndConversion+0x140>)
    b15a:	4613      	mov	r3, r2
    b15c:	009b      	lsls	r3, r3, #2
    b15e:	4413      	add	r3, r2
    b160:	009b      	lsls	r3, r3, #2
    b162:	440b      	add	r3, r1
    b164:	3308      	adds	r3, #8
    b166:	881b      	ldrh	r3, [r3, #0]
    b168:	b29b      	uxth	r3, r3
    b16a:	3301      	adds	r3, #1
    b16c:	b298      	uxth	r0, r3
    b16e:	490e      	ldr	r1, [pc, #56]	; (b1a8 <Adc_Ipw_EndConversion+0x140>)
    b170:	4613      	mov	r3, r2
    b172:	009b      	lsls	r3, r3, #2
    b174:	4413      	add	r3, r2
    b176:	009b      	lsls	r3, r3, #2
    b178:	440b      	add	r3, r1
    b17a:	3308      	adds	r3, #8
    b17c:	4602      	mov	r2, r0
    b17e:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    b180:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b184:	2b00      	cmp	r3, #0
    b186:	d009      	beq.n	b19c <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    b188:	9b06      	ldr	r3, [sp, #24]
    b18a:	8b9a      	ldrh	r2, [r3, #28]
    b18c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b190:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b194:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b198:	f7ff feae 	bl	aef8 <Adc_Ipw_UpdateSoftwareGroupState>
}
    b19c:	bf00      	nop
    b19e:	b008      	add	sp, #32
    b1a0:	bd10      	pop	{r4, pc}
    b1a2:	bf00      	nop
    b1a4:	1fff8d2c 	.word	0x1fff8d2c
    b1a8:	1fff8d30 	.word	0x1fff8d30

0000b1ac <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    b1ac:	b084      	sub	sp, #16
    b1ae:	9003      	str	r0, [sp, #12]
    b1b0:	9102      	str	r1, [sp, #8]
    b1b2:	4611      	mov	r1, r2
    b1b4:	461a      	mov	r2, r3
    b1b6:	460b      	mov	r3, r1
    b1b8:	f8ad 3006 	strh.w	r3, [sp, #6]
    b1bc:	4613      	mov	r3, r2
    b1be:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    b1c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b1c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b1ca:	fb02 f303 	mul.w	r3, r2, r3
    b1ce:	005b      	lsls	r3, r3, #1
    b1d0:	9a02      	ldr	r2, [sp, #8]
    b1d2:	4413      	add	r3, r2
    b1d4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b1d8:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    b1da:	bf00      	nop
    b1dc:	b004      	add	sp, #16
    b1de:	4770      	bx	lr

0000b1e0 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    b1e0:	b500      	push	{lr}
    b1e2:	b085      	sub	sp, #20
    b1e4:	4603      	mov	r3, r0
    b1e6:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    b1ea:	f7ff fce1 	bl	abb0 <Adc_GetCoreID>
    b1ee:	4603      	mov	r3, r0
    b1f0:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    b1f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b1f8:	b2db      	uxtb	r3, r3
    b1fa:	461a      	mov	r2, r3
    b1fc:	4b14      	ldr	r3, [pc, #80]	; (b250 <Adc_Ipw_EndConversionNotification+0x70>)
    b1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b202:	681a      	ldr	r2, [r3, #0]
    b204:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b208:	4413      	add	r3, r2
    b20a:	f893 3020 	ldrb.w	r3, [r3, #32]
    b20e:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    b212:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b216:	4a0f      	ldr	r2, [pc, #60]	; (b254 <Adc_Ipw_EndConversionNotification+0x74>)
    b218:	00db      	lsls	r3, r3, #3
    b21a:	4413      	add	r3, r2
    b21c:	885b      	ldrh	r3, [r3, #2]
    b21e:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    b222:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b226:	4a0b      	ldr	r2, [pc, #44]	; (b254 <Adc_Ipw_EndConversionNotification+0x74>)
    b228:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    b22c:	b29b      	uxth	r3, r3
    b22e:	2b00      	cmp	r3, #0
    b230:	d009      	beq.n	b246 <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    b232:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b236:	b2db      	uxtb	r3, r3
    b238:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b23c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b240:	2201      	movs	r2, #1
    b242:	f7ff ff11 	bl	b068 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    b246:	bf00      	nop
    b248:	b005      	add	sp, #20
    b24a:	f85d fb04 	ldr.w	pc, [sp], #4
    b24e:	bf00      	nop
    b250:	1fff8d2c 	.word	0x1fff8d2c
    b254:	1fff8d58 	.word	0x1fff8d58

0000b258 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    b258:	b500      	push	{lr}
    b25a:	b085      	sub	sp, #20
    b25c:	4603      	mov	r3, r0
    b25e:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    b262:	2300      	movs	r3, #0
    b264:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    b268:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b26c:	4618      	mov	r0, r3
    b26e:	f7ff ffb7 	bl	b1e0 <Adc_Ipw_EndConversionNotification>
}
    b272:	bf00      	nop
    b274:	b005      	add	sp, #20
    b276:	f85d fb04 	ldr.w	pc, [sp], #4

0000b27a <Adc_Ipw_Adc1EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc1EndConversionNotification(const uint8 ControlChanIdx)
{
    b27a:	b500      	push	{lr}
    b27c:	b085      	sub	sp, #20
    b27e:	4603      	mov	r3, r0
    b280:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 1U;
    b284:	2301      	movs	r3, #1
    b286:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    b28a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b28e:	4618      	mov	r0, r3
    b290:	f7ff ffa6 	bl	b1e0 <Adc_Ipw_EndConversionNotification>
}
    b294:	bf00      	nop
    b296:	b005      	add	sp, #20
    b298:	f85d fb04 	ldr.w	pc, [sp], #4

0000b29c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    b29c:	b084      	sub	sp, #16
    b29e:	9003      	str	r0, [sp, #12]
    b2a0:	9201      	str	r2, [sp, #4]
    b2a2:	461a      	mov	r2, r3
    b2a4:	460b      	mov	r3, r1
    b2a6:	f88d 300b 	strb.w	r3, [sp, #11]
    b2aa:	4613      	mov	r3, r2
    b2ac:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    b2b0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b2b4:	2b00      	cmp	r3, #0
    b2b6:	d016      	beq.n	b2e6 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    b2b8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b2bc:	9903      	ldr	r1, [sp, #12]
    b2be:	4613      	mov	r3, r2
    b2c0:	009b      	lsls	r3, r3, #2
    b2c2:	4413      	add	r3, r2
    b2c4:	00db      	lsls	r3, r3, #3
    b2c6:	440b      	add	r3, r1
    b2c8:	3310      	adds	r3, #16
    b2ca:	6819      	ldr	r1, [r3, #0]
    b2cc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b2d0:	9b01      	ldr	r3, [sp, #4]
    b2d2:	4319      	orrs	r1, r3
    b2d4:	9803      	ldr	r0, [sp, #12]
    b2d6:	4613      	mov	r3, r2
    b2d8:	009b      	lsls	r3, r3, #2
    b2da:	4413      	add	r3, r2
    b2dc:	00db      	lsls	r3, r3, #3
    b2de:	4403      	add	r3, r0
    b2e0:	3310      	adds	r3, #16
    b2e2:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    b2e4:	e016      	b.n	b314 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    b2e6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b2ea:	9903      	ldr	r1, [sp, #12]
    b2ec:	4613      	mov	r3, r2
    b2ee:	009b      	lsls	r3, r3, #2
    b2f0:	4413      	add	r3, r2
    b2f2:	00db      	lsls	r3, r3, #3
    b2f4:	440b      	add	r3, r1
    b2f6:	3310      	adds	r3, #16
    b2f8:	6819      	ldr	r1, [r3, #0]
    b2fa:	9b01      	ldr	r3, [sp, #4]
    b2fc:	43db      	mvns	r3, r3
    b2fe:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b302:	4019      	ands	r1, r3
    b304:	9803      	ldr	r0, [sp, #12]
    b306:	4613      	mov	r3, r2
    b308:	009b      	lsls	r3, r3, #2
    b30a:	4413      	add	r3, r2
    b30c:	00db      	lsls	r3, r3, #3
    b30e:	4403      	add	r3, r0
    b310:	3310      	adds	r3, #16
    b312:	6019      	str	r1, [r3, #0]
}
    b314:	bf00      	nop
    b316:	b004      	add	sp, #16
    b318:	4770      	bx	lr

0000b31a <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    b31a:	b082      	sub	sp, #8
    b31c:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    b31e:	9b01      	ldr	r3, [sp, #4]
    b320:	681b      	ldr	r3, [r3, #0]
    b322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    b326:	9b01      	ldr	r3, [sp, #4]
    b328:	601a      	str	r2, [r3, #0]
}
    b32a:	bf00      	nop
    b32c:	b002      	add	sp, #8
    b32e:	4770      	bx	lr

0000b330 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    b330:	b082      	sub	sp, #8
    b332:	9001      	str	r0, [sp, #4]
    b334:	460b      	mov	r3, r1
    b336:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    b33a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b33e:	2b00      	cmp	r3, #0
    b340:	d006      	beq.n	b350 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    b342:	9b01      	ldr	r3, [sp, #4]
    b344:	681b      	ldr	r3, [r3, #0]
    b346:	f043 0202 	orr.w	r2, r3, #2
    b34a:	9b01      	ldr	r3, [sp, #4]
    b34c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    b34e:	e005      	b.n	b35c <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    b350:	9b01      	ldr	r3, [sp, #4]
    b352:	681b      	ldr	r3, [r3, #0]
    b354:	f023 0202 	bic.w	r2, r3, #2
    b358:	9b01      	ldr	r3, [sp, #4]
    b35a:	601a      	str	r2, [r3, #0]
}
    b35c:	bf00      	nop
    b35e:	b002      	add	sp, #8
    b360:	4770      	bx	lr

0000b362 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    b362:	b086      	sub	sp, #24
    b364:	9003      	str	r0, [sp, #12]
    b366:	460b      	mov	r3, r1
    b368:	9201      	str	r2, [sp, #4]
    b36a:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    b36e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b372:	9903      	ldr	r1, [sp, #12]
    b374:	4613      	mov	r3, r2
    b376:	009b      	lsls	r3, r3, #2
    b378:	4413      	add	r3, r2
    b37a:	00db      	lsls	r3, r3, #3
    b37c:	440b      	add	r3, r1
    b37e:	3310      	adds	r3, #16
    b380:	681b      	ldr	r3, [r3, #0]
    b382:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    b384:	9b05      	ldr	r3, [sp, #20]
    b386:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    b38a:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    b38c:	9b01      	ldr	r3, [sp, #4]
    b38e:	781b      	ldrb	r3, [r3, #0]
    b390:	461a      	mov	r2, r3
    b392:	9b05      	ldr	r3, [sp, #20]
    b394:	4313      	orrs	r3, r2
    b396:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    b398:	9b01      	ldr	r3, [sp, #4]
    b39a:	785b      	ldrb	r3, [r3, #1]
    b39c:	021b      	lsls	r3, r3, #8
    b39e:	b29b      	uxth	r3, r3
    b3a0:	9a05      	ldr	r2, [sp, #20]
    b3a2:	4313      	orrs	r3, r2
    b3a4:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    b3a6:	9b01      	ldr	r3, [sp, #4]
    b3a8:	789b      	ldrb	r3, [r3, #2]
    b3aa:	041b      	lsls	r3, r3, #16
    b3ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b3b0:	9a05      	ldr	r2, [sp, #20]
    b3b2:	4313      	orrs	r3, r2
    b3b4:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    b3b6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b3ba:	9903      	ldr	r1, [sp, #12]
    b3bc:	4613      	mov	r3, r2
    b3be:	009b      	lsls	r3, r3, #2
    b3c0:	4413      	add	r3, r2
    b3c2:	00db      	lsls	r3, r3, #3
    b3c4:	440b      	add	r3, r1
    b3c6:	3310      	adds	r3, #16
    b3c8:	9a05      	ldr	r2, [sp, #20]
    b3ca:	601a      	str	r2, [r3, #0]
}
    b3cc:	bf00      	nop
    b3ce:	b006      	add	sp, #24
    b3d0:	4770      	bx	lr

0000b3d2 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    b3d2:	b082      	sub	sp, #8
    b3d4:	9001      	str	r0, [sp, #4]
    b3d6:	460b      	mov	r3, r1
    b3d8:	f88d 3003 	strb.w	r3, [sp, #3]
    b3dc:	4613      	mov	r3, r2
    b3de:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    b3e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b3e6:	9901      	ldr	r1, [sp, #4]
    b3e8:	4613      	mov	r3, r2
    b3ea:	009b      	lsls	r3, r3, #2
    b3ec:	4413      	add	r3, r2
    b3ee:	00db      	lsls	r3, r3, #3
    b3f0:	440b      	add	r3, r1
    b3f2:	3314      	adds	r3, #20
    b3f4:	6819      	ldr	r1, [r3, #0]
    b3f6:	f8bd 3000 	ldrh.w	r3, [sp]
    b3fa:	041b      	lsls	r3, r3, #16
    b3fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b400:	43db      	mvns	r3, r3
    b402:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b406:	4019      	ands	r1, r3
    b408:	9801      	ldr	r0, [sp, #4]
    b40a:	4613      	mov	r3, r2
    b40c:	009b      	lsls	r3, r3, #2
    b40e:	4413      	add	r3, r2
    b410:	00db      	lsls	r3, r3, #3
    b412:	4403      	add	r3, r0
    b414:	3314      	adds	r3, #20
    b416:	6019      	str	r1, [r3, #0]
}
    b418:	bf00      	nop
    b41a:	b002      	add	sp, #8
    b41c:	4770      	bx	lr

0000b41e <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    b41e:	b500      	push	{lr}
    b420:	b087      	sub	sp, #28
    b422:	9001      	str	r0, [sp, #4]
    b424:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b426:	4a50      	ldr	r2, [pc, #320]	; (b568 <Pdb_Adc_Ip_Init+0x14a>)
    b428:	9b01      	ldr	r3, [sp, #4]
    b42a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b42e:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    b430:	2300      	movs	r3, #0
    b432:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    b434:	9b00      	ldr	r3, [sp, #0]
    b436:	681b      	ldr	r3, [r3, #0]
    b438:	049b      	lsls	r3, r3, #18
    b43a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    b43e:	9a04      	ldr	r2, [sp, #16]
    b440:	4313      	orrs	r3, r2
    b442:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    b444:	9b00      	ldr	r3, [sp, #0]
    b446:	685b      	ldr	r3, [r3, #4]
    b448:	031b      	lsls	r3, r3, #12
    b44a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    b44e:	9a04      	ldr	r2, [sp, #16]
    b450:	4313      	orrs	r3, r2
    b452:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    b454:	9b00      	ldr	r3, [sp, #0]
    b456:	689b      	ldr	r3, [r3, #8]
    b458:	009b      	lsls	r3, r3, #2
    b45a:	f003 030c 	and.w	r3, r3, #12
    b45e:	9a04      	ldr	r2, [sp, #16]
    b460:	4313      	orrs	r3, r2
    b462:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    b464:	9b00      	ldr	r3, [sp, #0]
    b466:	68db      	ldr	r3, [r3, #12]
    b468:	021b      	lsls	r3, r3, #8
    b46a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    b46e:	9a04      	ldr	r2, [sp, #16]
    b470:	4313      	orrs	r3, r2
    b472:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    b474:	9b00      	ldr	r3, [sp, #0]
    b476:	7c1b      	ldrb	r3, [r3, #16]
    b478:	2b00      	cmp	r3, #0
    b47a:	d003      	beq.n	b484 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    b47c:	9b04      	ldr	r3, [sp, #16]
    b47e:	f043 0302 	orr.w	r3, r3, #2
    b482:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    b484:	9b00      	ldr	r3, [sp, #0]
    b486:	7c5b      	ldrb	r3, [r3, #17]
    b488:	2b00      	cmp	r3, #0
    b48a:	d003      	beq.n	b494 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    b48c:	9b04      	ldr	r3, [sp, #16]
    b48e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b492:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    b494:	9b00      	ldr	r3, [sp, #0]
    b496:	69db      	ldr	r3, [r3, #28]
    b498:	2b00      	cmp	r3, #0
    b49a:	d003      	beq.n	b4a4 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    b49c:	9b04      	ldr	r3, [sp, #16]
    b49e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b4a2:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    b4a4:	9b03      	ldr	r3, [sp, #12]
    b4a6:	9a04      	ldr	r2, [sp, #16]
    b4a8:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    b4aa:	9b00      	ldr	r3, [sp, #0]
    b4ac:	8a5b      	ldrh	r3, [r3, #18]
    b4ae:	4619      	mov	r1, r3
    b4b0:	9801      	ldr	r0, [sp, #4]
    b4b2:	f000 f98f 	bl	b7d4 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    b4b6:	9b00      	ldr	r3, [sp, #0]
    b4b8:	7d1b      	ldrb	r3, [r3, #20]
    b4ba:	2b00      	cmp	r3, #0
    b4bc:	d03e      	beq.n	b53c <Pdb_Adc_Ip_Init+0x11e>
    b4be:	9b00      	ldr	r3, [sp, #0]
    b4c0:	699b      	ldr	r3, [r3, #24]
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	d03a      	beq.n	b53c <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    b4c6:	2300      	movs	r3, #0
    b4c8:	f88d 3017 	strb.w	r3, [sp, #23]
    b4cc:	e030      	b.n	b530 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    b4ce:	9b00      	ldr	r3, [sp, #0]
    b4d0:	6999      	ldr	r1, [r3, #24]
    b4d2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b4d6:	4613      	mov	r3, r2
    b4d8:	009b      	lsls	r3, r3, #2
    b4da:	4413      	add	r3, r2
    b4dc:	009b      	lsls	r3, r3, #2
    b4de:	440b      	add	r3, r1
    b4e0:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    b4e2:	9b02      	ldr	r3, [sp, #8]
    b4e4:	7819      	ldrb	r1, [r3, #0]
    b4e6:	9b02      	ldr	r3, [sp, #8]
    b4e8:	3301      	adds	r3, #1
    b4ea:	461a      	mov	r2, r3
    b4ec:	9803      	ldr	r0, [sp, #12]
    b4ee:	f7ff ff38 	bl	b362 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b4f2:	2300      	movs	r3, #0
    b4f4:	f88d 3016 	strb.w	r3, [sp, #22]
    b4f8:	e011      	b.n	b51e <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    b4fa:	9b02      	ldr	r3, [sp, #8]
    b4fc:	7819      	ldrb	r1, [r3, #0]
    b4fe:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b502:	9a02      	ldr	r2, [sp, #8]
    b504:	005b      	lsls	r3, r3, #1
    b506:	4413      	add	r3, r2
    b508:	889b      	ldrh	r3, [r3, #4]
    b50a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    b50e:	9801      	ldr	r0, [sp, #4]
    b510:	f000 fa74 	bl	b9fc <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b514:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b518:	3301      	adds	r3, #1
    b51a:	f88d 3016 	strb.w	r3, [sp, #22]
    b51e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b522:	2b07      	cmp	r3, #7
    b524:	d9e9      	bls.n	b4fa <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    b526:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b52a:	3301      	adds	r3, #1
    b52c:	f88d 3017 	strb.w	r3, [sp, #23]
    b530:	9b00      	ldr	r3, [sp, #0]
    b532:	7d1b      	ldrb	r3, [r3, #20]
    b534:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b538:	429a      	cmp	r2, r3
    b53a:	d3c8      	bcc.n	b4ce <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    b53c:	9801      	ldr	r0, [sp, #4]
    b53e:	f000 f89b 	bl	b678 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    b542:	9801      	ldr	r0, [sp, #4]
    b544:	f000 f92e 	bl	b7a4 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    b548:	9b00      	ldr	r3, [sp, #0]
    b54a:	69da      	ldr	r2, [r3, #28]
    b54c:	4907      	ldr	r1, [pc, #28]	; (b56c <Pdb_Adc_Ip_Init+0x14e>)
    b54e:	9b01      	ldr	r3, [sp, #4]
    b550:	00db      	lsls	r3, r3, #3
    b552:	440b      	add	r3, r1
    b554:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    b556:	4a05      	ldr	r2, [pc, #20]	; (b56c <Pdb_Adc_Ip_Init+0x14e>)
    b558:	9b01      	ldr	r3, [sp, #4]
    b55a:	2101      	movs	r1, #1
    b55c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    b560:	bf00      	nop
    b562:	b007      	add	sp, #28
    b564:	f85d fb04 	ldr.w	pc, [sp], #4
    b568:	00016484 	.word	0x00016484
    b56c:	1fff8e00 	.word	0x1fff8e00

0000b570 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    b570:	b500      	push	{lr}
    b572:	b097      	sub	sp, #92	; 0x5c
    b574:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    b576:	2300      	movs	r3, #0
    b578:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    b57a:	2300      	movs	r3, #0
    b57c:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    b57e:	2300      	movs	r3, #0
    b580:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    b582:	2300      	movs	r3, #0
    b584:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    b586:	2300      	movs	r3, #0
    b588:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    b58c:	2300      	movs	r3, #0
    b58e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    b592:	2300      	movs	r3, #0
    b594:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    b598:	2302      	movs	r3, #2
    b59a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    b59e:	2300      	movs	r3, #0
    b5a0:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    b5a4:	e04d      	b.n	b642 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    b5a6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5aa:	4613      	mov	r3, r2
    b5ac:	009b      	lsls	r3, r3, #2
    b5ae:	4413      	add	r3, r2
    b5b0:	009b      	lsls	r3, r3, #2
    b5b2:	aa16      	add	r2, sp, #88	; 0x58
    b5b4:	4413      	add	r3, r2
    b5b6:	3b4c      	subs	r3, #76	; 0x4c
    b5b8:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5bc:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    b5be:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5c2:	4613      	mov	r3, r2
    b5c4:	009b      	lsls	r3, r3, #2
    b5c6:	4413      	add	r3, r2
    b5c8:	009b      	lsls	r3, r3, #2
    b5ca:	aa16      	add	r2, sp, #88	; 0x58
    b5cc:	4413      	add	r3, r2
    b5ce:	3b4b      	subs	r3, #75	; 0x4b
    b5d0:	2200      	movs	r2, #0
    b5d2:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    b5d4:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5d8:	4613      	mov	r3, r2
    b5da:	009b      	lsls	r3, r3, #2
    b5dc:	4413      	add	r3, r2
    b5de:	009b      	lsls	r3, r3, #2
    b5e0:	aa16      	add	r2, sp, #88	; 0x58
    b5e2:	4413      	add	r3, r2
    b5e4:	3b4a      	subs	r3, #74	; 0x4a
    b5e6:	2200      	movs	r2, #0
    b5e8:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    b5ea:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5ee:	4613      	mov	r3, r2
    b5f0:	009b      	lsls	r3, r3, #2
    b5f2:	4413      	add	r3, r2
    b5f4:	009b      	lsls	r3, r3, #2
    b5f6:	aa16      	add	r2, sp, #88	; 0x58
    b5f8:	4413      	add	r3, r2
    b5fa:	3b49      	subs	r3, #73	; 0x49
    b5fc:	2200      	movs	r2, #0
    b5fe:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b600:	2300      	movs	r3, #0
    b602:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    b606:	e013      	b.n	b630 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    b608:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b60c:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    b610:	4613      	mov	r3, r2
    b612:	009b      	lsls	r3, r3, #2
    b614:	4413      	add	r3, r2
    b616:	005b      	lsls	r3, r3, #1
    b618:	440b      	add	r3, r1
    b61a:	005b      	lsls	r3, r3, #1
    b61c:	aa16      	add	r2, sp, #88	; 0x58
    b61e:	4413      	add	r3, r2
    b620:	2200      	movs	r2, #0
    b622:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b626:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    b62a:	3301      	adds	r3, #1
    b62c:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    b630:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    b634:	2b07      	cmp	r3, #7
    b636:	d9e7      	bls.n	b608 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    b638:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    b63c:	3301      	adds	r3, #1
    b63e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    b642:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    b646:	2b01      	cmp	r3, #1
    b648:	d9ad      	bls.n	b5a6 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    b64a:	ab03      	add	r3, sp, #12
    b64c:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    b64e:	2300      	movs	r3, #0
    b650:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    b652:	ab0d      	add	r3, sp, #52	; 0x34
    b654:	4619      	mov	r1, r3
    b656:	9801      	ldr	r0, [sp, #4]
    b658:	f7ff fee1 	bl	b41e <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    b65c:	9801      	ldr	r0, [sp, #4]
    b65e:	f000 f823 	bl	b6a8 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    b662:	4a04      	ldr	r2, [pc, #16]	; (b674 <Pdb_Adc_Ip_DeInit+0x104>)
    b664:	9b01      	ldr	r3, [sp, #4]
    b666:	2100      	movs	r1, #0
    b668:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    b66c:	bf00      	nop
    b66e:	b017      	add	sp, #92	; 0x5c
    b670:	f85d fb04 	ldr.w	pc, [sp], #4
    b674:	1fff8e00 	.word	0x1fff8e00

0000b678 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    b678:	b500      	push	{lr}
    b67a:	b085      	sub	sp, #20
    b67c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b67e:	4a09      	ldr	r2, [pc, #36]	; (b6a4 <Pdb_Adc_Ip_Enable+0x2c>)
    b680:	9b01      	ldr	r3, [sp, #4]
    b682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b686:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    b688:	f004 ffd4 	bl	10634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    b68c:	9b03      	ldr	r3, [sp, #12]
    b68e:	681b      	ldr	r3, [r3, #0]
    b690:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    b694:	9b03      	ldr	r3, [sp, #12]
    b696:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    b698:	f004 fff8 	bl	1068c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    b69c:	bf00      	nop
    b69e:	b005      	add	sp, #20
    b6a0:	f85d fb04 	ldr.w	pc, [sp], #4
    b6a4:	00016484 	.word	0x00016484

0000b6a8 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    b6a8:	b500      	push	{lr}
    b6aa:	b085      	sub	sp, #20
    b6ac:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b6ae:	4a08      	ldr	r2, [pc, #32]	; (b6d0 <Pdb_Adc_Ip_Disable+0x28>)
    b6b0:	9b01      	ldr	r3, [sp, #4]
    b6b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6b6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    b6b8:	f005 f80e 	bl	106d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    b6bc:	9803      	ldr	r0, [sp, #12]
    b6be:	f7ff fe2c 	bl	b31a <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    b6c2:	f005 f835 	bl	10730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    b6c6:	bf00      	nop
    b6c8:	b005      	add	sp, #20
    b6ca:	f85d fb04 	ldr.w	pc, [sp], #4
    b6ce:	bf00      	nop
    b6d0:	00016484 	.word	0x00016484

0000b6d4 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    b6d4:	b500      	push	{lr}
    b6d6:	b085      	sub	sp, #20
    b6d8:	9001      	str	r0, [sp, #4]
    b6da:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b6dc:	4a0e      	ldr	r2, [pc, #56]	; (b718 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    b6de:	9b01      	ldr	r3, [sp, #4]
    b6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6e4:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    b6e6:	f005 f849 	bl	1077c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    b6ea:	9b03      	ldr	r3, [sp, #12]
    b6ec:	681b      	ldr	r3, [r3, #0]
    b6ee:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    b6f0:	9b02      	ldr	r3, [sp, #8]
    b6f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    b6f6:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    b6f8:	9b00      	ldr	r3, [sp, #0]
    b6fa:	021b      	lsls	r3, r3, #8
    b6fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    b700:	9a02      	ldr	r2, [sp, #8]
    b702:	4313      	orrs	r3, r2
    b704:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    b706:	9b03      	ldr	r3, [sp, #12]
    b708:	9a02      	ldr	r2, [sp, #8]
    b70a:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    b70c:	f005 f862 	bl	107d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    b710:	bf00      	nop
    b712:	b005      	add	sp, #20
    b714:	f85d fb04 	ldr.w	pc, [sp], #4
    b718:	00016484 	.word	0x00016484

0000b71c <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    b71c:	b500      	push	{lr}
    b71e:	b085      	sub	sp, #20
    b720:	9001      	str	r0, [sp, #4]
    b722:	460b      	mov	r3, r1
    b724:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b728:	4a09      	ldr	r2, [pc, #36]	; (b750 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    b72a:	9b01      	ldr	r3, [sp, #4]
    b72c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b730:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    b732:	f005 f875 	bl	10820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    b736:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b73a:	4619      	mov	r1, r3
    b73c:	9803      	ldr	r0, [sp, #12]
    b73e:	f7ff fdf7 	bl	b330 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    b742:	f005 f899 	bl	10878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    b746:	bf00      	nop
    b748:	b005      	add	sp, #20
    b74a:	f85d fb04 	ldr.w	pc, [sp], #4
    b74e:	bf00      	nop
    b750:	00016484 	.word	0x00016484

0000b754 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    b754:	b500      	push	{lr}
    b756:	b085      	sub	sp, #20
    b758:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b75a:	4a09      	ldr	r2, [pc, #36]	; (b780 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    b75c:	9b01      	ldr	r3, [sp, #4]
    b75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b762:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    b764:	f005 f8ae 	bl	108c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    b768:	9b03      	ldr	r3, [sp, #12]
    b76a:	681b      	ldr	r3, [r3, #0]
    b76c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    b770:	9b03      	ldr	r3, [sp, #12]
    b772:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    b774:	f005 f8d2 	bl	1091c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    b778:	bf00      	nop
    b77a:	b005      	add	sp, #20
    b77c:	f85d fb04 	ldr.w	pc, [sp], #4
    b780:	00016484 	.word	0x00016484

0000b784 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    b784:	b084      	sub	sp, #16
    b786:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b788:	4a05      	ldr	r2, [pc, #20]	; (b7a0 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    b78a:	9b01      	ldr	r3, [sp, #4]
    b78c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b790:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    b792:	9b03      	ldr	r3, [sp, #12]
    b794:	689b      	ldr	r3, [r3, #8]
    b796:	b29b      	uxth	r3, r3
}
    b798:	4618      	mov	r0, r3
    b79a:	b004      	add	sp, #16
    b79c:	4770      	bx	lr
    b79e:	bf00      	nop
    b7a0:	00016484 	.word	0x00016484

0000b7a4 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    b7a4:	b500      	push	{lr}
    b7a6:	b085      	sub	sp, #20
    b7a8:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b7aa:	4a09      	ldr	r2, [pc, #36]	; (b7d0 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    b7ac:	9b01      	ldr	r3, [sp, #4]
    b7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7b2:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    b7b4:	f005 f8d8 	bl	10968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    b7b8:	9b03      	ldr	r3, [sp, #12]
    b7ba:	681b      	ldr	r3, [r3, #0]
    b7bc:	f043 0201 	orr.w	r2, r3, #1
    b7c0:	9b03      	ldr	r3, [sp, #12]
    b7c2:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    b7c4:	f005 f8fc 	bl	109c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    b7c8:	bf00      	nop
    b7ca:	b005      	add	sp, #20
    b7cc:	f85d fb04 	ldr.w	pc, [sp], #4
    b7d0:	00016484 	.word	0x00016484

0000b7d4 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    b7d4:	b500      	push	{lr}
    b7d6:	b085      	sub	sp, #20
    b7d8:	9001      	str	r0, [sp, #4]
    b7da:	460b      	mov	r3, r1
    b7dc:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b7e0:	4a0d      	ldr	r2, [pc, #52]	; (b818 <Pdb_Adc_Ip_SetModulus+0x44>)
    b7e2:	9b01      	ldr	r3, [sp, #4]
    b7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7e8:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    b7ea:	f005 fb9f 	bl	10f2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    b7ee:	9b03      	ldr	r3, [sp, #12]
    b7f0:	685b      	ldr	r3, [r3, #4]
    b7f2:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    b7f4:	9b02      	ldr	r3, [sp, #8]
    b7f6:	0c1b      	lsrs	r3, r3, #16
    b7f8:	041b      	lsls	r3, r3, #16
    b7fa:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    b7fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    b800:	9a02      	ldr	r2, [sp, #8]
    b802:	4313      	orrs	r3, r2
    b804:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    b806:	9b03      	ldr	r3, [sp, #12]
    b808:	9a02      	ldr	r2, [sp, #8]
    b80a:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    b80c:	f005 fbba 	bl	10f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    b810:	bf00      	nop
    b812:	b005      	add	sp, #20
    b814:	f85d fb04 	ldr.w	pc, [sp], #4
    b818:	00016484 	.word	0x00016484

0000b81c <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    b81c:	b500      	push	{lr}
    b81e:	b087      	sub	sp, #28
    b820:	9003      	str	r0, [sp, #12]
    b822:	460b      	mov	r3, r1
    b824:	9201      	str	r2, [sp, #4]
    b826:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b82a:	4a0a      	ldr	r2, [pc, #40]	; (b854 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    b82c:	9b03      	ldr	r3, [sp, #12]
    b82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b832:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    b834:	f005 f93c 	bl	10ab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    b838:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b83c:	9a01      	ldr	r2, [sp, #4]
    b83e:	4619      	mov	r1, r3
    b840:	9805      	ldr	r0, [sp, #20]
    b842:	f7ff fd8e 	bl	b362 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    b846:	f005 f95f 	bl	10b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    b84a:	bf00      	nop
    b84c:	b007      	add	sp, #28
    b84e:	f85d fb04 	ldr.w	pc, [sp], #4
    b852:	bf00      	nop
    b854:	00016484 	.word	0x00016484

0000b858 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    b858:	b084      	sub	sp, #16
    b85a:	9001      	str	r0, [sp, #4]
    b85c:	460b      	mov	r3, r1
    b85e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b862:	4a0c      	ldr	r2, [pc, #48]	; (b894 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    b864:	9b01      	ldr	r3, [sp, #4]
    b866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b86a:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    b86c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b870:	9903      	ldr	r1, [sp, #12]
    b872:	4613      	mov	r3, r2
    b874:	009b      	lsls	r3, r3, #2
    b876:	4413      	add	r3, r2
    b878:	00db      	lsls	r3, r3, #3
    b87a:	440b      	add	r3, r1
    b87c:	3314      	adds	r3, #20
    b87e:	681b      	ldr	r3, [r3, #0]
    b880:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    b882:	9b02      	ldr	r3, [sp, #8]
    b884:	0c1b      	lsrs	r3, r3, #16
    b886:	b2db      	uxtb	r3, r3
    b888:	9302      	str	r3, [sp, #8]

    return Result;
    b88a:	9b02      	ldr	r3, [sp, #8]
}
    b88c:	4618      	mov	r0, r3
    b88e:	b004      	add	sp, #16
    b890:	4770      	bx	lr
    b892:	bf00      	nop
    b894:	00016484 	.word	0x00016484

0000b898 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    b898:	b500      	push	{lr}
    b89a:	b085      	sub	sp, #20
    b89c:	9001      	str	r0, [sp, #4]
    b89e:	460b      	mov	r3, r1
    b8a0:	f88d 3003 	strb.w	r3, [sp, #3]
    b8a4:	4613      	mov	r3, r2
    b8a6:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b8aa:	4a0a      	ldr	r2, [pc, #40]	; (b8d4 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    b8ac:	9b01      	ldr	r3, [sp, #4]
    b8ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8b2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    b8b4:	f005 fa96 	bl	10de4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    b8b8:	f8bd 2000 	ldrh.w	r2, [sp]
    b8bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b8c0:	4619      	mov	r1, r3
    b8c2:	9803      	ldr	r0, [sp, #12]
    b8c4:	f7ff fd85 	bl	b3d2 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    b8c8:	f005 fab8 	bl	10e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    b8cc:	bf00      	nop
    b8ce:	b005      	add	sp, #20
    b8d0:	f85d fb04 	ldr.w	pc, [sp], #4
    b8d4:	00016484 	.word	0x00016484

0000b8d8 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    b8d8:	b500      	push	{lr}
    b8da:	b085      	sub	sp, #20
    b8dc:	9001      	str	r0, [sp, #4]
    b8de:	4608      	mov	r0, r1
    b8e0:	4611      	mov	r1, r2
    b8e2:	461a      	mov	r2, r3
    b8e4:	4603      	mov	r3, r0
    b8e6:	f88d 3003 	strb.w	r3, [sp, #3]
    b8ea:	460b      	mov	r3, r1
    b8ec:	f88d 3002 	strb.w	r3, [sp, #2]
    b8f0:	4613      	mov	r3, r2
    b8f2:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b8f6:	4a10      	ldr	r2, [pc, #64]	; (b938 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    b8f8:	9b01      	ldr	r3, [sp, #4]
    b8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8fe:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b900:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b904:	2201      	movs	r2, #1
    b906:	fa02 f303 	lsl.w	r3, r2, r3
    b90a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    b90c:	9b02      	ldr	r3, [sp, #8]
    b90e:	041b      	lsls	r3, r3, #16
    b910:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b914:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    b916:	f005 f91d 	bl	10b54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b91a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b91e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b922:	9a02      	ldr	r2, [sp, #8]
    b924:	9803      	ldr	r0, [sp, #12]
    b926:	f7ff fcb9 	bl	b29c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    b92a:	f005 f93f 	bl	10bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    b92e:	bf00      	nop
    b930:	b005      	add	sp, #20
    b932:	f85d fb04 	ldr.w	pc, [sp], #4
    b936:	bf00      	nop
    b938:	00016484 	.word	0x00016484

0000b93c <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    b93c:	b500      	push	{lr}
    b93e:	b085      	sub	sp, #20
    b940:	9001      	str	r0, [sp, #4]
    b942:	4608      	mov	r0, r1
    b944:	4611      	mov	r1, r2
    b946:	461a      	mov	r2, r3
    b948:	4603      	mov	r3, r0
    b94a:	f88d 3003 	strb.w	r3, [sp, #3]
    b94e:	460b      	mov	r3, r1
    b950:	f88d 3002 	strb.w	r3, [sp, #2]
    b954:	4613      	mov	r3, r2
    b956:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b95a:	4a0f      	ldr	r2, [pc, #60]	; (b998 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    b95c:	9b01      	ldr	r3, [sp, #4]
    b95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b962:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b964:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b968:	2201      	movs	r2, #1
    b96a:	fa02 f303 	lsl.w	r3, r2, r3
    b96e:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    b970:	9b02      	ldr	r3, [sp, #8]
    b972:	b2db      	uxtb	r3, r3
    b974:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    b976:	f005 f93f 	bl	10bf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b97a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b97e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b982:	9a02      	ldr	r2, [sp, #8]
    b984:	9803      	ldr	r0, [sp, #12]
    b986:	f7ff fc89 	bl	b29c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    b98a:	f005 f961 	bl	10c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    b98e:	bf00      	nop
    b990:	b005      	add	sp, #20
    b992:	f85d fb04 	ldr.w	pc, [sp], #4
    b996:	bf00      	nop
    b998:	00016484 	.word	0x00016484

0000b99c <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    b99c:	b500      	push	{lr}
    b99e:	b085      	sub	sp, #20
    b9a0:	9001      	str	r0, [sp, #4]
    b9a2:	4608      	mov	r0, r1
    b9a4:	4611      	mov	r1, r2
    b9a6:	461a      	mov	r2, r3
    b9a8:	4603      	mov	r3, r0
    b9aa:	f88d 3003 	strb.w	r3, [sp, #3]
    b9ae:	460b      	mov	r3, r1
    b9b0:	f88d 3002 	strb.w	r3, [sp, #2]
    b9b4:	4613      	mov	r3, r2
    b9b6:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b9ba:	4a0f      	ldr	r2, [pc, #60]	; (b9f8 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    b9bc:	9b01      	ldr	r3, [sp, #4]
    b9be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9c2:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b9c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b9c8:	2201      	movs	r2, #1
    b9ca:	fa02 f303 	lsl.w	r3, r2, r3
    b9ce:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    b9d0:	9b02      	ldr	r3, [sp, #8]
    b9d2:	021b      	lsls	r3, r3, #8
    b9d4:	b29b      	uxth	r3, r3
    b9d6:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    b9d8:	f005 f960 	bl	10c9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b9dc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b9e0:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b9e4:	9a02      	ldr	r2, [sp, #8]
    b9e6:	9803      	ldr	r0, [sp, #12]
    b9e8:	f7ff fc58 	bl	b29c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    b9ec:	f005 f982 	bl	10cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    b9f0:	bf00      	nop
    b9f2:	b005      	add	sp, #20
    b9f4:	f85d fb04 	ldr.w	pc, [sp], #4
    b9f8:	00016484 	.word	0x00016484

0000b9fc <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    b9fc:	b410      	push	{r4}
    b9fe:	b085      	sub	sp, #20
    ba00:	9001      	str	r0, [sp, #4]
    ba02:	4608      	mov	r0, r1
    ba04:	4611      	mov	r1, r2
    ba06:	461a      	mov	r2, r3
    ba08:	4603      	mov	r3, r0
    ba0a:	f88d 3003 	strb.w	r3, [sp, #3]
    ba0e:	460b      	mov	r3, r1
    ba10:	f88d 3002 	strb.w	r3, [sp, #2]
    ba14:	4613      	mov	r3, r2
    ba16:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ba1a:	4a0c      	ldr	r2, [pc, #48]	; (ba4c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    ba1c:	9b01      	ldr	r3, [sp, #4]
    ba1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba22:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    ba24:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba28:	f89d 4002 	ldrb.w	r4, [sp, #2]
    ba2c:	f8bd 0000 	ldrh.w	r0, [sp]
    ba30:	9903      	ldr	r1, [sp, #12]
    ba32:	4613      	mov	r3, r2
    ba34:	009b      	lsls	r3, r3, #2
    ba36:	4413      	add	r3, r2
    ba38:	005b      	lsls	r3, r3, #1
    ba3a:	4423      	add	r3, r4
    ba3c:	3306      	adds	r3, #6
    ba3e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    ba42:	bf00      	nop
    ba44:	b005      	add	sp, #20
    ba46:	f85d 4b04 	ldr.w	r4, [sp], #4
    ba4a:	4770      	bx	lr
    ba4c:	00016484 	.word	0x00016484

0000ba50 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    ba50:	b500      	push	{lr}
    ba52:	b087      	sub	sp, #28
    ba54:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ba56:	4a19      	ldr	r2, [pc, #100]	; (babc <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    ba58:	9b01      	ldr	r3, [sp, #4]
    ba5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba5e:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    ba60:	2300      	movs	r3, #0
    ba62:	f88d 300c 	strb.w	r3, [sp, #12]
    ba66:	2300      	movs	r3, #0
    ba68:	f88d 300d 	strb.w	r3, [sp, #13]
    ba6c:	2300      	movs	r3, #0
    ba6e:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    ba72:	f004 ffcb 	bl	10a0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    ba76:	9804      	ldr	r0, [sp, #16]
    ba78:	f7ff fc4f 	bl	b31a <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    ba7c:	2100      	movs	r1, #0
    ba7e:	9804      	ldr	r0, [sp, #16]
    ba80:	f7ff fc56 	bl	b330 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    ba84:	f004 ffee 	bl	10a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ba88:	2300      	movs	r3, #0
    ba8a:	f88d 3017 	strb.w	r3, [sp, #23]
    ba8e:	e00b      	b.n	baa8 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    ba90:	aa03      	add	r2, sp, #12
    ba92:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ba96:	4619      	mov	r1, r3
    ba98:	9804      	ldr	r0, [sp, #16]
    ba9a:	f000 f899 	bl	bbd0 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ba9e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    baa2:	3301      	adds	r3, #1
    baa4:	f88d 3017 	strb.w	r3, [sp, #23]
    baa8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    baac:	2b01      	cmp	r3, #1
    baae:	d9ef      	bls.n	ba90 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    bab0:	bf00      	nop
    bab2:	bf00      	nop
    bab4:	b007      	add	sp, #28
    bab6:	f85d fb04 	ldr.w	pc, [sp], #4
    baba:	bf00      	nop
    babc:	00016484 	.word	0x00016484

0000bac0 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    bac0:	b500      	push	{lr}
    bac2:	b087      	sub	sp, #28
    bac4:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    bac6:	4a40      	ldr	r2, [pc, #256]	; (bbc8 <Pdb_Adc_Ip_IRQHandler+0x108>)
    bac8:	9b01      	ldr	r3, [sp, #4]
    baca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bace:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    bad0:	4a3e      	ldr	r2, [pc, #248]	; (bbcc <Pdb_Adc_Ip_IRQHandler+0x10c>)
    bad2:	9b01      	ldr	r3, [sp, #4]
    bad4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    bad8:	2b00      	cmp	r3, #0
    bada:	d04d      	beq.n	bb78 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    badc:	9b04      	ldr	r3, [sp, #16]
    bade:	681b      	ldr	r3, [r3, #0]
    bae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    bae4:	2b00      	cmp	r3, #0
    bae6:	d06a      	beq.n	bbbe <Pdb_Adc_Ip_IRQHandler+0xfe>
    bae8:	4a38      	ldr	r2, [pc, #224]	; (bbcc <Pdb_Adc_Ip_IRQHandler+0x10c>)
    baea:	9b01      	ldr	r3, [sp, #4]
    baec:	00db      	lsls	r3, r3, #3
    baee:	4413      	add	r3, r2
    baf0:	685b      	ldr	r3, [r3, #4]
    baf2:	2b00      	cmp	r3, #0
    baf4:	d063      	beq.n	bbbe <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    baf6:	2300      	movs	r3, #0
    baf8:	f88d 3017 	strb.w	r3, [sp, #23]
    bafc:	e037      	b.n	bb6e <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    bafe:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb02:	9904      	ldr	r1, [sp, #16]
    bb04:	4613      	mov	r3, r2
    bb06:	009b      	lsls	r3, r3, #2
    bb08:	4413      	add	r3, r2
    bb0a:	00db      	lsls	r3, r3, #3
    bb0c:	440b      	add	r3, r1
    bb0e:	3314      	adds	r3, #20
    bb10:	681b      	ldr	r3, [r3, #0]
    bb12:	b29b      	uxth	r3, r3
    bb14:	b2db      	uxtb	r3, r3
    bb16:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    bb1a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    bb1e:	2b00      	cmp	r3, #0
    bb20:	d020      	beq.n	bb64 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bb22:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb26:	9904      	ldr	r1, [sp, #16]
    bb28:	4613      	mov	r3, r2
    bb2a:	009b      	lsls	r3, r3, #2
    bb2c:	4413      	add	r3, r2
    bb2e:	00db      	lsls	r3, r3, #3
    bb30:	440b      	add	r3, r1
    bb32:	3314      	adds	r3, #20
    bb34:	681b      	ldr	r3, [r3, #0]
    bb36:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bb3e:	9804      	ldr	r0, [sp, #16]
    bb40:	4613      	mov	r3, r2
    bb42:	009b      	lsls	r3, r3, #2
    bb44:	4413      	add	r3, r2
    bb46:	00db      	lsls	r3, r3, #3
    bb48:	4403      	add	r3, r0
    bb4a:	3314      	adds	r3, #20
    bb4c:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    bb4e:	4a1f      	ldr	r2, [pc, #124]	; (bbcc <Pdb_Adc_Ip_IRQHandler+0x10c>)
    bb50:	9b01      	ldr	r3, [sp, #4]
    bb52:	00db      	lsls	r3, r3, #3
    bb54:	4413      	add	r3, r2
    bb56:	685b      	ldr	r3, [r3, #4]
    bb58:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    bb5c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb60:	4610      	mov	r0, r2
    bb62:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bb64:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bb68:	3301      	adds	r3, #1
    bb6a:	f88d 3017 	strb.w	r3, [sp, #23]
    bb6e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bb72:	2b01      	cmp	r3, #1
    bb74:	d9c3      	bls.n	bafe <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    bb76:	e022      	b.n	bbbe <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bb78:	2300      	movs	r3, #0
    bb7a:	f88d 3017 	strb.w	r3, [sp, #23]
    bb7e:	e01a      	b.n	bbb6 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bb80:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb84:	9904      	ldr	r1, [sp, #16]
    bb86:	4613      	mov	r3, r2
    bb88:	009b      	lsls	r3, r3, #2
    bb8a:	4413      	add	r3, r2
    bb8c:	00db      	lsls	r3, r3, #3
    bb8e:	440b      	add	r3, r1
    bb90:	3314      	adds	r3, #20
    bb92:	681b      	ldr	r3, [r3, #0]
    bb94:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb98:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bb9c:	9804      	ldr	r0, [sp, #16]
    bb9e:	4613      	mov	r3, r2
    bba0:	009b      	lsls	r3, r3, #2
    bba2:	4413      	add	r3, r2
    bba4:	00db      	lsls	r3, r3, #3
    bba6:	4403      	add	r3, r0
    bba8:	3314      	adds	r3, #20
    bbaa:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bbac:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bbb0:	3301      	adds	r3, #1
    bbb2:	f88d 3017 	strb.w	r3, [sp, #23]
    bbb6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bbba:	2b01      	cmp	r3, #1
    bbbc:	d9e0      	bls.n	bb80 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    bbbe:	bf00      	nop
    bbc0:	b007      	add	sp, #28
    bbc2:	f85d fb04 	ldr.w	pc, [sp], #4
    bbc6:	bf00      	nop
    bbc8:	00016484 	.word	0x00016484
    bbcc:	1fff8e00 	.word	0x1fff8e00

0000bbd0 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    bbd0:	b500      	push	{lr}
    bbd2:	b085      	sub	sp, #20
    bbd4:	9003      	str	r0, [sp, #12]
    bbd6:	460b      	mov	r3, r1
    bbd8:	9201      	str	r2, [sp, #4]
    bbda:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    bbde:	f005 f8af 	bl	10d40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    bbe2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bbe6:	9a01      	ldr	r2, [sp, #4]
    bbe8:	4619      	mov	r1, r3
    bbea:	9803      	ldr	r0, [sp, #12]
    bbec:	f7ff fbb9 	bl	b362 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    bbf0:	f005 f8d2 	bl	10d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    bbf4:	f005 f948 	bl	10e88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    bbf8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bbfc:	22ff      	movs	r2, #255	; 0xff
    bbfe:	4619      	mov	r1, r3
    bc00:	9803      	ldr	r0, [sp, #12]
    bc02:	f7ff fbe6 	bl	b3d2 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bc06:	f89d 200b 	ldrb.w	r2, [sp, #11]
    bc0a:	9903      	ldr	r1, [sp, #12]
    bc0c:	4613      	mov	r3, r2
    bc0e:	009b      	lsls	r3, r3, #2
    bc10:	4413      	add	r3, r2
    bc12:	00db      	lsls	r3, r3, #3
    bc14:	440b      	add	r3, r1
    bc16:	3314      	adds	r3, #20
    bc18:	681b      	ldr	r3, [r3, #0]
    bc1a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    bc1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bc22:	9803      	ldr	r0, [sp, #12]
    bc24:	4613      	mov	r3, r2
    bc26:	009b      	lsls	r3, r3, #2
    bc28:	4413      	add	r3, r2
    bc2a:	00db      	lsls	r3, r3, #3
    bc2c:	4403      	add	r3, r0
    bc2e:	3314      	adds	r3, #20
    bc30:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    bc32:	f005 f955 	bl	10ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    bc36:	bf00      	nop
    bc38:	b005      	add	sp, #20
    bc3a:	f85d fb04 	ldr.w	pc, [sp], #4
    bc3e:	bf00      	nop

0000bc40 <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    bc40:	b082      	sub	sp, #8
    bc42:	9001      	str	r0, [sp, #4]
    bc44:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    bc46:	9b01      	ldr	r3, [sp, #4]
    bc48:	681b      	ldr	r3, [r3, #0]
    bc4a:	f023 0207 	bic.w	r2, r3, #7
    bc4e:	9b00      	ldr	r3, [sp, #0]
    bc50:	f003 0307 	and.w	r3, r3, #7
    bc54:	431a      	orrs	r2, r3
    bc56:	9b01      	ldr	r3, [sp, #4]
    bc58:	601a      	str	r2, [r3, #0]
}
    bc5a:	bf00      	nop
    bc5c:	b002      	add	sp, #8
    bc5e:	4770      	bx	lr

0000bc60 <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    bc60:	b082      	sub	sp, #8
    bc62:	9001      	str	r0, [sp, #4]
    bc64:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    bc66:	9b01      	ldr	r3, [sp, #4]
    bc68:	681b      	ldr	r3, [r3, #0]
    bc6a:	f023 0218 	bic.w	r2, r3, #24
    bc6e:	9b00      	ldr	r3, [sp, #0]
    bc70:	00db      	lsls	r3, r3, #3
    bc72:	f003 0318 	and.w	r3, r3, #24
    bc76:	431a      	orrs	r2, r3
    bc78:	9b01      	ldr	r3, [sp, #4]
    bc7a:	601a      	str	r2, [r3, #0]
}
    bc7c:	bf00      	nop
    bc7e:	b002      	add	sp, #8
    bc80:	4770      	bx	lr

0000bc82 <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    bc82:	b082      	sub	sp, #8
    bc84:	9001      	str	r0, [sp, #4]
    bc86:	460b      	mov	r3, r1
    bc88:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    bc8c:	9b01      	ldr	r3, [sp, #4]
    bc8e:	681b      	ldr	r3, [r3, #0]
    bc90:	f023 0320 	bic.w	r3, r3, #32
    bc94:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bc98:	2a00      	cmp	r2, #0
    bc9a:	d001      	beq.n	bca0 <Ftm_Pwm_Ip_SetCpwms+0x1e>
    bc9c:	2220      	movs	r2, #32
    bc9e:	e000      	b.n	bca2 <Ftm_Pwm_Ip_SetCpwms+0x20>
    bca0:	2200      	movs	r2, #0
    bca2:	431a      	orrs	r2, r3
    bca4:	9b01      	ldr	r3, [sp, #4]
    bca6:	601a      	str	r2, [r3, #0]
}
    bca8:	bf00      	nop
    bcaa:	b002      	add	sp, #8
    bcac:	4770      	bx	lr

0000bcae <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    bcae:	b082      	sub	sp, #8
    bcb0:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    bcb2:	9b01      	ldr	r3, [sp, #4]
    bcb4:	681b      	ldr	r3, [r3, #0]
    bcb6:	f003 0320 	and.w	r3, r3, #32
    bcba:	2b00      	cmp	r3, #0
    bcbc:	bf14      	ite	ne
    bcbe:	2301      	movne	r3, #1
    bcc0:	2300      	moveq	r3, #0
    bcc2:	b2db      	uxtb	r3, r3
}
    bcc4:	4618      	mov	r0, r3
    bcc6:	b002      	add	sp, #8
    bcc8:	4770      	bx	lr

0000bcca <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    bcca:	b082      	sub	sp, #8
    bccc:	9001      	str	r0, [sp, #4]
    bcce:	460b      	mov	r3, r1
    bcd0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    bcd4:	9b01      	ldr	r3, [sp, #4]
    bcd6:	681b      	ldr	r3, [r3, #0]
    bcd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bcdc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bce0:	2a00      	cmp	r2, #0
    bce2:	d002      	beq.n	bcea <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    bce4:	f44f 7280 	mov.w	r2, #256	; 0x100
    bce8:	e000      	b.n	bcec <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    bcea:	2200      	movs	r2, #0
    bcec:	431a      	orrs	r2, r3
    bcee:	9b01      	ldr	r3, [sp, #4]
    bcf0:	601a      	str	r2, [r3, #0]
}
    bcf2:	bf00      	nop
    bcf4:	b002      	add	sp, #8
    bcf6:	4770      	bx	lr

0000bcf8 <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    bcf8:	b082      	sub	sp, #8
    bcfa:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    bcfc:	9b01      	ldr	r3, [sp, #4]
    bcfe:	681b      	ldr	r3, [r3, #0]
    bd00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    bd04:	9b01      	ldr	r3, [sp, #4]
    bd06:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    bd08:	bf00      	nop
    bd0a:	b002      	add	sp, #8
    bd0c:	4770      	bx	lr

0000bd0e <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    bd0e:	b082      	sub	sp, #8
    bd10:	9001      	str	r0, [sp, #4]
    bd12:	460b      	mov	r3, r1
    bd14:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    bd18:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd1c:	3310      	adds	r3, #16
    bd1e:	2201      	movs	r2, #1
    bd20:	409a      	lsls	r2, r3
    bd22:	9b01      	ldr	r3, [sp, #4]
    bd24:	681b      	ldr	r3, [r3, #0]
    bd26:	431a      	orrs	r2, r3
    bd28:	9b01      	ldr	r3, [sp, #4]
    bd2a:	601a      	str	r2, [r3, #0]
}
    bd2c:	bf00      	nop
    bd2e:	b002      	add	sp, #8
    bd30:	4770      	bx	lr

0000bd32 <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    bd32:	b082      	sub	sp, #8
    bd34:	9001      	str	r0, [sp, #4]
    bd36:	460b      	mov	r3, r1
    bd38:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    bd3c:	9b01      	ldr	r3, [sp, #4]
    bd3e:	685b      	ldr	r3, [r3, #4]
    bd40:	0c1b      	lsrs	r3, r3, #16
    bd42:	041b      	lsls	r3, r3, #16
    bd44:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bd48:	431a      	orrs	r2, r3
    bd4a:	9b01      	ldr	r3, [sp, #4]
    bd4c:	605a      	str	r2, [r3, #4]
}
    bd4e:	bf00      	nop
    bd50:	b002      	add	sp, #8
    bd52:	4770      	bx	lr

0000bd54 <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    bd54:	b082      	sub	sp, #8
    bd56:	9001      	str	r0, [sp, #4]
    bd58:	460b      	mov	r3, r1
    bd5a:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    bd5e:	9b01      	ldr	r3, [sp, #4]
    bd60:	689b      	ldr	r3, [r3, #8]
    bd62:	0c1b      	lsrs	r3, r3, #16
    bd64:	041b      	lsls	r3, r3, #16
    bd66:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bd6a:	431a      	orrs	r2, r3
    bd6c:	9b01      	ldr	r3, [sp, #4]
    bd6e:	609a      	str	r2, [r3, #8]
}
    bd70:	bf00      	nop
    bd72:	b002      	add	sp, #8
    bd74:	4770      	bx	lr

0000bd76 <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    bd76:	b084      	sub	sp, #16
    bd78:	9001      	str	r0, [sp, #4]
    bd7a:	460b      	mov	r3, r1
    bd7c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    bd80:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd84:	9a01      	ldr	r2, [sp, #4]
    bd86:	3301      	adds	r3, #1
    bd88:	00db      	lsls	r3, r3, #3
    bd8a:	4413      	add	r3, r2
    bd8c:	685b      	ldr	r3, [r3, #4]
    bd8e:	089b      	lsrs	r3, r3, #2
    bd90:	b2db      	uxtb	r3, r3
    bd92:	f003 0301 	and.w	r3, r3, #1
    bd96:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    bd9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd9e:	9a01      	ldr	r2, [sp, #4]
    bda0:	3301      	adds	r3, #1
    bda2:	00db      	lsls	r3, r3, #3
    bda4:	4413      	add	r3, r2
    bda6:	685b      	ldr	r3, [r3, #4]
    bda8:	08db      	lsrs	r3, r3, #3
    bdaa:	b2db      	uxtb	r3, r3
    bdac:	005b      	lsls	r3, r3, #1
    bdae:	b2db      	uxtb	r3, r3
    bdb0:	f003 0302 	and.w	r3, r3, #2
    bdb4:	b2da      	uxtb	r2, r3
    bdb6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bdba:	4313      	orrs	r3, r2
    bdbc:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    bdc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bdc4:	4618      	mov	r0, r3
    bdc6:	b004      	add	sp, #16
    bdc8:	4770      	bx	lr

0000bdca <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    bdca:	b086      	sub	sp, #24
    bdcc:	9003      	str	r0, [sp, #12]
    bdce:	460b      	mov	r3, r1
    bdd0:	9201      	str	r2, [sp, #4]
    bdd2:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    bdd6:	9b01      	ldr	r3, [sp, #4]
    bdd8:	009b      	lsls	r3, r3, #2
    bdda:	f003 0304 	and.w	r3, r3, #4
    bdde:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    bde0:	9b01      	ldr	r3, [sp, #4]
    bde2:	009b      	lsls	r3, r3, #2
    bde4:	f003 0308 	and.w	r3, r3, #8
    bde8:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    bdea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bdee:	9a03      	ldr	r2, [sp, #12]
    bdf0:	3301      	adds	r3, #1
    bdf2:	00db      	lsls	r3, r3, #3
    bdf4:	4413      	add	r3, r2
    bdf6:	685b      	ldr	r3, [r3, #4]
    bdf8:	f023 0104 	bic.w	r1, r3, #4
    bdfc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be00:	9a05      	ldr	r2, [sp, #20]
    be02:	430a      	orrs	r2, r1
    be04:	9903      	ldr	r1, [sp, #12]
    be06:	3301      	adds	r3, #1
    be08:	00db      	lsls	r3, r3, #3
    be0a:	440b      	add	r3, r1
    be0c:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    be0e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be12:	9a03      	ldr	r2, [sp, #12]
    be14:	3301      	adds	r3, #1
    be16:	00db      	lsls	r3, r3, #3
    be18:	4413      	add	r3, r2
    be1a:	685b      	ldr	r3, [r3, #4]
    be1c:	f023 0108 	bic.w	r1, r3, #8
    be20:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be24:	9a04      	ldr	r2, [sp, #16]
    be26:	430a      	orrs	r2, r1
    be28:	9903      	ldr	r1, [sp, #12]
    be2a:	3301      	adds	r3, #1
    be2c:	00db      	lsls	r3, r3, #3
    be2e:	440b      	add	r3, r1
    be30:	605a      	str	r2, [r3, #4]
}
    be32:	bf00      	nop
    be34:	b006      	add	sp, #24
    be36:	4770      	bx	lr

0000be38 <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    be38:	b086      	sub	sp, #24
    be3a:	9003      	str	r0, [sp, #12]
    be3c:	460b      	mov	r3, r1
    be3e:	9201      	str	r2, [sp, #4]
    be40:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    be44:	9b01      	ldr	r3, [sp, #4]
    be46:	009b      	lsls	r3, r3, #2
    be48:	f003 0310 	and.w	r3, r3, #16
    be4c:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    be4e:	9b01      	ldr	r3, [sp, #4]
    be50:	009b      	lsls	r3, r3, #2
    be52:	f003 0320 	and.w	r3, r3, #32
    be56:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    be58:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be5c:	9a03      	ldr	r2, [sp, #12]
    be5e:	3301      	adds	r3, #1
    be60:	00db      	lsls	r3, r3, #3
    be62:	4413      	add	r3, r2
    be64:	685b      	ldr	r3, [r3, #4]
    be66:	f023 0110 	bic.w	r1, r3, #16
    be6a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be6e:	9a05      	ldr	r2, [sp, #20]
    be70:	430a      	orrs	r2, r1
    be72:	9903      	ldr	r1, [sp, #12]
    be74:	3301      	adds	r3, #1
    be76:	00db      	lsls	r3, r3, #3
    be78:	440b      	add	r3, r1
    be7a:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    be7c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be80:	9a03      	ldr	r2, [sp, #12]
    be82:	3301      	adds	r3, #1
    be84:	00db      	lsls	r3, r3, #3
    be86:	4413      	add	r3, r2
    be88:	685b      	ldr	r3, [r3, #4]
    be8a:	f023 0120 	bic.w	r1, r3, #32
    be8e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be92:	9a04      	ldr	r2, [sp, #16]
    be94:	430a      	orrs	r2, r1
    be96:	9903      	ldr	r1, [sp, #12]
    be98:	3301      	adds	r3, #1
    be9a:	00db      	lsls	r3, r3, #3
    be9c:	440b      	add	r3, r1
    be9e:	605a      	str	r2, [r3, #4]
}
    bea0:	bf00      	nop
    bea2:	b006      	add	sp, #24
    bea4:	4770      	bx	lr

0000bea6 <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    bea6:	b084      	sub	sp, #16
    bea8:	9001      	str	r0, [sp, #4]
    beaa:	460b      	mov	r3, r1
    beac:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    beb0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    beb4:	9a01      	ldr	r2, [sp, #4]
    beb6:	3301      	adds	r3, #1
    beb8:	00db      	lsls	r3, r3, #3
    beba:	4413      	add	r3, r2
    bebc:	685b      	ldr	r3, [r3, #4]
    bebe:	091b      	lsrs	r3, r3, #4
    bec0:	b2db      	uxtb	r3, r3
    bec2:	f003 0301 	and.w	r3, r3, #1
    bec6:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    beca:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bece:	9a01      	ldr	r2, [sp, #4]
    bed0:	3301      	adds	r3, #1
    bed2:	00db      	lsls	r3, r3, #3
    bed4:	4413      	add	r3, r2
    bed6:	685b      	ldr	r3, [r3, #4]
    bed8:	095b      	lsrs	r3, r3, #5
    beda:	b2db      	uxtb	r3, r3
    bedc:	005b      	lsls	r3, r3, #1
    bede:	b2db      	uxtb	r3, r3
    bee0:	f003 0302 	and.w	r3, r3, #2
    bee4:	b2da      	uxtb	r2, r3
    bee6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    beea:	4313      	orrs	r3, r2
    beec:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    bef0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bef4:	4618      	mov	r0, r3
    bef6:	b004      	add	sp, #16
    bef8:	4770      	bx	lr

0000befa <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    befa:	b082      	sub	sp, #8
    befc:	9001      	str	r0, [sp, #4]
    befe:	460b      	mov	r3, r1
    bf00:	f88d 3003 	strb.w	r3, [sp, #3]
    bf04:	4613      	mov	r3, r2
    bf06:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    bf0a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf0e:	9a01      	ldr	r2, [sp, #4]
    bf10:	3301      	adds	r3, #1
    bf12:	00db      	lsls	r3, r3, #3
    bf14:	4413      	add	r3, r2
    bf16:	685b      	ldr	r3, [r3, #4]
    bf18:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    bf1c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bf20:	2b00      	cmp	r3, #0
    bf22:	d001      	beq.n	bf28 <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    bf24:	2140      	movs	r1, #64	; 0x40
    bf26:	e000      	b.n	bf2a <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    bf28:	2100      	movs	r1, #0
    bf2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf2e:	430a      	orrs	r2, r1
    bf30:	9901      	ldr	r1, [sp, #4]
    bf32:	3301      	adds	r3, #1
    bf34:	00db      	lsls	r3, r3, #3
    bf36:	440b      	add	r3, r1
    bf38:	605a      	str	r2, [r3, #4]
}
    bf3a:	bf00      	nop
    bf3c:	b002      	add	sp, #8
    bf3e:	4770      	bx	lr

0000bf40 <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    bf40:	b082      	sub	sp, #8
    bf42:	9001      	str	r0, [sp, #4]
    bf44:	460b      	mov	r3, r1
    bf46:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    bf4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf4e:	9a01      	ldr	r2, [sp, #4]
    bf50:	3301      	adds	r3, #1
    bf52:	00db      	lsls	r3, r3, #3
    bf54:	4413      	add	r3, r2
    bf56:	685a      	ldr	r2, [r3, #4]
    bf58:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    bf60:	9901      	ldr	r1, [sp, #4]
    bf62:	3301      	adds	r3, #1
    bf64:	00db      	lsls	r3, r3, #3
    bf66:	440b      	add	r3, r1
    bf68:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    bf6a:	bf00      	nop
    bf6c:	b002      	add	sp, #8
    bf6e:	4770      	bx	lr

0000bf70 <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    bf70:	b082      	sub	sp, #8
    bf72:	9001      	str	r0, [sp, #4]
    bf74:	460b      	mov	r3, r1
    bf76:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    bf7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf7e:	9a01      	ldr	r2, [sp, #4]
    bf80:	3301      	adds	r3, #1
    bf82:	00db      	lsls	r3, r3, #3
    bf84:	4413      	add	r3, r2
    bf86:	685b      	ldr	r3, [r3, #4]
    bf88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	bf14      	ite	ne
    bf90:	2301      	movne	r3, #1
    bf92:	2300      	moveq	r3, #0
    bf94:	b2db      	uxtb	r3, r3
}
    bf96:	4618      	mov	r0, r3
    bf98:	b002      	add	sp, #8
    bf9a:	4770      	bx	lr

0000bf9c <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    bf9c:	b082      	sub	sp, #8
    bf9e:	9001      	str	r0, [sp, #4]
    bfa0:	460b      	mov	r3, r1
    bfa2:	f88d 3003 	strb.w	r3, [sp, #3]
    bfa6:	4613      	mov	r3, r2
    bfa8:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    bfac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bfb0:	f8bd 2000 	ldrh.w	r2, [sp]
    bfb4:	9901      	ldr	r1, [sp, #4]
    bfb6:	3301      	adds	r3, #1
    bfb8:	00db      	lsls	r3, r3, #3
    bfba:	440b      	add	r3, r1
    bfbc:	609a      	str	r2, [r3, #8]
}
    bfbe:	bf00      	nop
    bfc0:	b002      	add	sp, #8
    bfc2:	4770      	bx	lr

0000bfc4 <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    bfc4:	b082      	sub	sp, #8
    bfc6:	9001      	str	r0, [sp, #4]
    bfc8:	460b      	mov	r3, r1
    bfca:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    bfce:	9b01      	ldr	r3, [sp, #4]
    bfd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    bfd2:	0c1b      	lsrs	r3, r3, #16
    bfd4:	041b      	lsls	r3, r3, #16
    bfd6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bfda:	431a      	orrs	r2, r3
    bfdc:	9b01      	ldr	r3, [sp, #4]
    bfde:	64da      	str	r2, [r3, #76]	; 0x4c
}
    bfe0:	bf00      	nop
    bfe2:	b002      	add	sp, #8
    bfe4:	4770      	bx	lr

0000bfe6 <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    bfe6:	b082      	sub	sp, #8
    bfe8:	9001      	str	r0, [sp, #4]
    bfea:	460b      	mov	r3, r1
    bfec:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    bff0:	9b01      	ldr	r3, [sp, #4]
    bff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bff4:	f023 0301 	bic.w	r3, r3, #1
    bff8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bffc:	2a00      	cmp	r2, #0
    bffe:	d001      	beq.n	c004 <Ftm_Pwm_Ip_Enable+0x1e>
    c000:	2201      	movs	r2, #1
    c002:	e000      	b.n	c006 <Ftm_Pwm_Ip_Enable+0x20>
    c004:	2200      	movs	r2, #0
    c006:	431a      	orrs	r2, r3
    c008:	9b01      	ldr	r3, [sp, #4]
    c00a:	655a      	str	r2, [r3, #84]	; 0x54
}
    c00c:	bf00      	nop
    c00e:	b002      	add	sp, #8
    c010:	4770      	bx	lr

0000c012 <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    c012:	b082      	sub	sp, #8
    c014:	9001      	str	r0, [sp, #4]
    c016:	460b      	mov	r3, r1
    c018:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    c01c:	9b01      	ldr	r3, [sp, #4]
    c01e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c020:	f023 0308 	bic.w	r3, r3, #8
    c024:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c028:	2a00      	cmp	r2, #0
    c02a:	d001      	beq.n	c030 <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    c02c:	2208      	movs	r2, #8
    c02e:	e000      	b.n	c032 <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    c030:	2200      	movs	r2, #0
    c032:	431a      	orrs	r2, r3
    c034:	9b01      	ldr	r3, [sp, #4]
    c036:	655a      	str	r2, [r3, #84]	; 0x54
}
    c038:	bf00      	nop
    c03a:	b002      	add	sp, #8
    c03c:	4770      	bx	lr

0000c03e <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    c03e:	b082      	sub	sp, #8
    c040:	9001      	str	r0, [sp, #4]
    c042:	460b      	mov	r3, r1
    c044:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    c048:	9b01      	ldr	r3, [sp, #4]
    c04a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c04c:	f023 0301 	bic.w	r3, r3, #1
    c050:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c054:	2a00      	cmp	r2, #0
    c056:	d001      	beq.n	c05c <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    c058:	2201      	movs	r2, #1
    c05a:	e000      	b.n	c05e <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    c05c:	2200      	movs	r2, #0
    c05e:	431a      	orrs	r2, r3
    c060:	9b01      	ldr	r3, [sp, #4]
    c062:	659a      	str	r2, [r3, #88]	; 0x58
}
    c064:	bf00      	nop
    c066:	b002      	add	sp, #8
    c068:	4770      	bx	lr

0000c06a <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    c06a:	b082      	sub	sp, #8
    c06c:	9001      	str	r0, [sp, #4]
    c06e:	460b      	mov	r3, r1
    c070:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    c074:	9b01      	ldr	r3, [sp, #4]
    c076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c078:	f023 0302 	bic.w	r3, r3, #2
    c07c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c080:	2a00      	cmp	r2, #0
    c082:	d001      	beq.n	c088 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    c084:	2202      	movs	r2, #2
    c086:	e000      	b.n	c08a <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    c088:	2200      	movs	r2, #0
    c08a:	431a      	orrs	r2, r3
    c08c:	9b01      	ldr	r3, [sp, #4]
    c08e:	659a      	str	r2, [r3, #88]	; 0x58
}
    c090:	bf00      	nop
    c092:	b002      	add	sp, #8
    c094:	4770      	bx	lr

0000c096 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    c096:	b082      	sub	sp, #8
    c098:	9001      	str	r0, [sp, #4]
    c09a:	460b      	mov	r3, r1
    c09c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    c0a0:	9b01      	ldr	r3, [sp, #4]
    c0a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c0a4:	f023 0308 	bic.w	r3, r3, #8
    c0a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c0ac:	2a00      	cmp	r2, #0
    c0ae:	d001      	beq.n	c0b4 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    c0b0:	2208      	movs	r2, #8
    c0b2:	e000      	b.n	c0b6 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    c0b4:	2200      	movs	r2, #0
    c0b6:	431a      	orrs	r2, r3
    c0b8:	9b01      	ldr	r3, [sp, #4]
    c0ba:	659a      	str	r2, [r3, #88]	; 0x58
}
    c0bc:	bf00      	nop
    c0be:	b002      	add	sp, #8
    c0c0:	4770      	bx	lr

0000c0c2 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    c0c2:	b082      	sub	sp, #8
    c0c4:	9001      	str	r0, [sp, #4]
    c0c6:	460b      	mov	r3, r1
    c0c8:	f88d 3003 	strb.w	r3, [sp, #3]
    c0cc:	4613      	mov	r3, r2
    c0ce:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c0d2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c0d6:	2b00      	cmp	r3, #0
    c0d8:	d00a      	beq.n	c0f0 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    c0da:	9b01      	ldr	r3, [sp, #4]
    c0dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    c0de:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c0e2:	2110      	movs	r1, #16
    c0e4:	fa01 f303 	lsl.w	r3, r1, r3
    c0e8:	431a      	orrs	r2, r3
    c0ea:	9b01      	ldr	r3, [sp, #4]
    c0ec:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    c0ee:	e00a      	b.n	c106 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    c0f0:	9b01      	ldr	r3, [sp, #4]
    c0f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    c0f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c0f8:	2110      	movs	r1, #16
    c0fa:	fa01 f303 	lsl.w	r3, r1, r3
    c0fe:	43db      	mvns	r3, r3
    c100:	401a      	ands	r2, r3
    c102:	9b01      	ldr	r3, [sp, #4]
    c104:	659a      	str	r2, [r3, #88]	; 0x58
}
    c106:	bf00      	nop
    c108:	b002      	add	sp, #8
    c10a:	4770      	bx	lr

0000c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    c10c:	b082      	sub	sp, #8
    c10e:	9001      	str	r0, [sp, #4]
    c110:	460b      	mov	r3, r1
    c112:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    c116:	9b01      	ldr	r3, [sp, #4]
    c118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c11a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c11e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c122:	2a00      	cmp	r2, #0
    c124:	d001      	beq.n	c12a <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    c126:	2280      	movs	r2, #128	; 0x80
    c128:	e000      	b.n	c12c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    c12a:	2200      	movs	r2, #0
    c12c:	431a      	orrs	r2, r3
    c12e:	9b01      	ldr	r3, [sp, #4]
    c130:	659a      	str	r2, [r3, #88]	; 0x58
}
    c132:	bf00      	nop
    c134:	b002      	add	sp, #8
    c136:	4770      	bx	lr

0000c138 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    c138:	b084      	sub	sp, #16
    c13a:	9003      	str	r0, [sp, #12]
    c13c:	460b      	mov	r3, r1
    c13e:	9201      	str	r2, [sp, #4]
    c140:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    c144:	9b01      	ldr	r3, [sp, #4]
    c146:	2b01      	cmp	r3, #1
    c148:	d10a      	bne.n	c160 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    c14a:	9b03      	ldr	r3, [sp, #12]
    c14c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    c14e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c152:	2101      	movs	r1, #1
    c154:	fa01 f303 	lsl.w	r3, r1, r3
    c158:	431a      	orrs	r2, r3
    c15a:	9b03      	ldr	r3, [sp, #12]
    c15c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    c15e:	e00a      	b.n	c176 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    c160:	9b03      	ldr	r3, [sp, #12]
    c162:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    c164:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c168:	2101      	movs	r1, #1
    c16a:	fa01 f303 	lsl.w	r3, r1, r3
    c16e:	43db      	mvns	r3, r3
    c170:	401a      	ands	r2, r3
    c172:	9b03      	ldr	r3, [sp, #12]
    c174:	65da      	str	r2, [r3, #92]	; 0x5c
}
    c176:	bf00      	nop
    c178:	b004      	add	sp, #16
    c17a:	4770      	bx	lr

0000c17c <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    c17c:	b082      	sub	sp, #8
    c17e:	9001      	str	r0, [sp, #4]
    c180:	460b      	mov	r3, r1
    c182:	f88d 3003 	strb.w	r3, [sp, #3]
    c186:	4613      	mov	r3, r2
    c188:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    c18c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c190:	2b00      	cmp	r3, #0
    c192:	d00a      	beq.n	c1aa <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    c194:	9b01      	ldr	r3, [sp, #4]
    c196:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c198:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c19c:	2101      	movs	r1, #1
    c19e:	fa01 f303 	lsl.w	r3, r1, r3
    c1a2:	431a      	orrs	r2, r3
    c1a4:	9b01      	ldr	r3, [sp, #4]
    c1a6:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    c1a8:	e00a      	b.n	c1c0 <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    c1aa:	9b01      	ldr	r3, [sp, #4]
    c1ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c1ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c1b2:	2101      	movs	r1, #1
    c1b4:	fa01 f303 	lsl.w	r3, r1, r3
    c1b8:	43db      	mvns	r3, r3
    c1ba:	401a      	ands	r2, r3
    c1bc:	9b01      	ldr	r3, [sp, #4]
    c1be:	661a      	str	r2, [r3, #96]	; 0x60
}
    c1c0:	bf00      	nop
    c1c2:	b002      	add	sp, #8
    c1c4:	4770      	bx	lr

0000c1c6 <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    c1c6:	b082      	sub	sp, #8
    c1c8:	9001      	str	r0, [sp, #4]
    c1ca:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    c1cc:	9b01      	ldr	r3, [sp, #4]
    c1ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c1d0:	9b00      	ldr	r3, [sp, #0]
    c1d2:	43db      	mvns	r3, r3
    c1d4:	401a      	ands	r2, r3
    c1d6:	9b00      	ldr	r3, [sp, #0]
    c1d8:	431a      	orrs	r2, r3
    c1da:	9b01      	ldr	r3, [sp, #4]
    c1dc:	661a      	str	r2, [r3, #96]	; 0x60
}
    c1de:	bf00      	nop
    c1e0:	b002      	add	sp, #8
    c1e2:	4770      	bx	lr

0000c1e4 <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    c1e4:	b082      	sub	sp, #8
    c1e6:	9001      	str	r0, [sp, #4]
    c1e8:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    c1ea:	9b01      	ldr	r3, [sp, #4]
    c1ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c1ee:	9b00      	ldr	r3, [sp, #0]
    c1f0:	43db      	mvns	r3, r3
    c1f2:	401a      	ands	r2, r3
    c1f4:	9b01      	ldr	r3, [sp, #4]
    c1f6:	661a      	str	r2, [r3, #96]	; 0x60
}
    c1f8:	bf00      	nop
    c1fa:	b002      	add	sp, #8
    c1fc:	4770      	bx	lr

0000c1fe <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    c1fe:	b082      	sub	sp, #8
    c200:	9001      	str	r0, [sp, #4]
    c202:	460b      	mov	r3, r1
    c204:	f88d 3003 	strb.w	r3, [sp, #3]
    c208:	4613      	mov	r3, r2
    c20a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c20e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c212:	2b00      	cmp	r3, #0
    c214:	d00b      	beq.n	c22e <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c216:	9b01      	ldr	r3, [sp, #4]
    c218:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c21a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c21e:	00db      	lsls	r3, r3, #3
    c220:	2101      	movs	r1, #1
    c222:	fa01 f303 	lsl.w	r3, r1, r3
    c226:	431a      	orrs	r2, r3
    c228:	9b01      	ldr	r3, [sp, #4]
    c22a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c22c:	e00b      	b.n	c246 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c22e:	9b01      	ldr	r3, [sp, #4]
    c230:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c232:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c236:	00db      	lsls	r3, r3, #3
    c238:	2101      	movs	r1, #1
    c23a:	fa01 f303 	lsl.w	r3, r1, r3
    c23e:	43db      	mvns	r3, r3
    c240:	401a      	ands	r2, r3
    c242:	9b01      	ldr	r3, [sp, #4]
    c244:	665a      	str	r2, [r3, #100]	; 0x64
}
    c246:	bf00      	nop
    c248:	b002      	add	sp, #8
    c24a:	4770      	bx	lr

0000c24c <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    c24c:	b082      	sub	sp, #8
    c24e:	9001      	str	r0, [sp, #4]
    c250:	460b      	mov	r3, r1
    c252:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    c256:	9b01      	ldr	r3, [sp, #4]
    c258:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c25a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c25e:	00db      	lsls	r3, r3, #3
    c260:	fa22 f303 	lsr.w	r3, r2, r3
    c264:	f003 0301 	and.w	r3, r3, #1
    c268:	2b00      	cmp	r3, #0
    c26a:	bf14      	ite	ne
    c26c:	2301      	movne	r3, #1
    c26e:	2300      	moveq	r3, #0
    c270:	b2db      	uxtb	r3, r3
}
    c272:	4618      	mov	r0, r3
    c274:	b002      	add	sp, #8
    c276:	4770      	bx	lr

0000c278 <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    c278:	b082      	sub	sp, #8
    c27a:	9001      	str	r0, [sp, #4]
    c27c:	460b      	mov	r3, r1
    c27e:	f88d 3003 	strb.w	r3, [sp, #3]
    c282:	4613      	mov	r3, r2
    c284:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    c288:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c28c:	2b00      	cmp	r3, #0
    c28e:	d00b      	beq.n	c2a8 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c290:	9b01      	ldr	r3, [sp, #4]
    c292:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c294:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c298:	00db      	lsls	r3, r3, #3
    c29a:	2102      	movs	r1, #2
    c29c:	fa01 f303 	lsl.w	r3, r1, r3
    c2a0:	431a      	orrs	r2, r3
    c2a2:	9b01      	ldr	r3, [sp, #4]
    c2a4:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c2a6:	e00b      	b.n	c2c0 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c2a8:	9b01      	ldr	r3, [sp, #4]
    c2aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c2ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c2b0:	00db      	lsls	r3, r3, #3
    c2b2:	2102      	movs	r1, #2
    c2b4:	fa01 f303 	lsl.w	r3, r1, r3
    c2b8:	43db      	mvns	r3, r3
    c2ba:	401a      	ands	r2, r3
    c2bc:	9b01      	ldr	r3, [sp, #4]
    c2be:	665a      	str	r2, [r3, #100]	; 0x64
}
    c2c0:	bf00      	nop
    c2c2:	b002      	add	sp, #8
    c2c4:	4770      	bx	lr

0000c2c6 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    c2c6:	b082      	sub	sp, #8
    c2c8:	9001      	str	r0, [sp, #4]
    c2ca:	460b      	mov	r3, r1
    c2cc:	f88d 3003 	strb.w	r3, [sp, #3]
    c2d0:	4613      	mov	r3, r2
    c2d2:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c2d6:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c2da:	2b00      	cmp	r3, #0
    c2dc:	d00b      	beq.n	c2f6 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c2de:	9b01      	ldr	r3, [sp, #4]
    c2e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c2e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c2e6:	00db      	lsls	r3, r3, #3
    c2e8:	2110      	movs	r1, #16
    c2ea:	fa01 f303 	lsl.w	r3, r1, r3
    c2ee:	431a      	orrs	r2, r3
    c2f0:	9b01      	ldr	r3, [sp, #4]
    c2f2:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c2f4:	e00b      	b.n	c30e <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c2f6:	9b01      	ldr	r3, [sp, #4]
    c2f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c2fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c2fe:	00db      	lsls	r3, r3, #3
    c300:	2110      	movs	r1, #16
    c302:	fa01 f303 	lsl.w	r3, r1, r3
    c306:	43db      	mvns	r3, r3
    c308:	401a      	ands	r2, r3
    c30a:	9b01      	ldr	r3, [sp, #4]
    c30c:	665a      	str	r2, [r3, #100]	; 0x64
}
    c30e:	bf00      	nop
    c310:	b002      	add	sp, #8
    c312:	4770      	bx	lr

0000c314 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    c314:	b082      	sub	sp, #8
    c316:	9001      	str	r0, [sp, #4]
    c318:	460b      	mov	r3, r1
    c31a:	f88d 3003 	strb.w	r3, [sp, #3]
    c31e:	4613      	mov	r3, r2
    c320:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c324:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c328:	2b00      	cmp	r3, #0
    c32a:	d00b      	beq.n	c344 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c32c:	9b01      	ldr	r3, [sp, #4]
    c32e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c330:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c334:	00db      	lsls	r3, r3, #3
    c336:	2120      	movs	r1, #32
    c338:	fa01 f303 	lsl.w	r3, r1, r3
    c33c:	431a      	orrs	r2, r3
    c33e:	9b01      	ldr	r3, [sp, #4]
    c340:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c342:	e00b      	b.n	c35c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c344:	9b01      	ldr	r3, [sp, #4]
    c346:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c348:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c34c:	00db      	lsls	r3, r3, #3
    c34e:	2120      	movs	r1, #32
    c350:	fa01 f303 	lsl.w	r3, r1, r3
    c354:	43db      	mvns	r3, r3
    c356:	401a      	ands	r2, r3
    c358:	9b01      	ldr	r3, [sp, #4]
    c35a:	665a      	str	r2, [r3, #100]	; 0x64
}
    c35c:	bf00      	nop
    c35e:	b002      	add	sp, #8
    c360:	4770      	bx	lr

0000c362 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    c362:	b082      	sub	sp, #8
    c364:	9001      	str	r0, [sp, #4]
    c366:	460b      	mov	r3, r1
    c368:	f88d 3003 	strb.w	r3, [sp, #3]
    c36c:	4613      	mov	r3, r2
    c36e:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c372:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c376:	2b00      	cmp	r3, #0
    c378:	d00b      	beq.n	c392 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c37a:	9b01      	ldr	r3, [sp, #4]
    c37c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c37e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c382:	00db      	lsls	r3, r3, #3
    c384:	2180      	movs	r1, #128	; 0x80
    c386:	fa01 f303 	lsl.w	r3, r1, r3
    c38a:	431a      	orrs	r2, r3
    c38c:	9b01      	ldr	r3, [sp, #4]
    c38e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c390:	e00b      	b.n	c3aa <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c392:	9b01      	ldr	r3, [sp, #4]
    c394:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c396:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c39a:	00db      	lsls	r3, r3, #3
    c39c:	2180      	movs	r1, #128	; 0x80
    c39e:	fa01 f303 	lsl.w	r3, r1, r3
    c3a2:	43db      	mvns	r3, r3
    c3a4:	401a      	ands	r2, r3
    c3a6:	9b01      	ldr	r3, [sp, #4]
    c3a8:	665a      	str	r2, [r3, #100]	; 0x64
}
    c3aa:	bf00      	nop
    c3ac:	b002      	add	sp, #8
    c3ae:	4770      	bx	lr

0000c3b0 <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    c3b0:	b082      	sub	sp, #8
    c3b2:	9001      	str	r0, [sp, #4]
    c3b4:	460b      	mov	r3, r1
    c3b6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    c3ba:	9b01      	ldr	r3, [sp, #4]
    c3bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c3be:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    c3c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c3c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c3ca:	431a      	orrs	r2, r3
    c3cc:	9b01      	ldr	r3, [sp, #4]
    c3ce:	669a      	str	r2, [r3, #104]	; 0x68
}
    c3d0:	bf00      	nop
    c3d2:	b002      	add	sp, #8
    c3d4:	4770      	bx	lr

0000c3d6 <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    c3d6:	b082      	sub	sp, #8
    c3d8:	9001      	str	r0, [sp, #4]
    c3da:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    c3dc:	9b01      	ldr	r3, [sp, #4]
    c3de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c3e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    c3e4:	9b00      	ldr	r3, [sp, #0]
    c3e6:	b2db      	uxtb	r3, r3
    c3e8:	019b      	lsls	r3, r3, #6
    c3ea:	b2db      	uxtb	r3, r3
    c3ec:	431a      	orrs	r2, r3
    c3ee:	9b01      	ldr	r3, [sp, #4]
    c3f0:	669a      	str	r2, [r3, #104]	; 0x68
}
    c3f2:	bf00      	nop
    c3f4:	b002      	add	sp, #8
    c3f6:	4770      	bx	lr

0000c3f8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    c3f8:	b082      	sub	sp, #8
    c3fa:	9001      	str	r0, [sp, #4]
    c3fc:	460b      	mov	r3, r1
    c3fe:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    c402:	9b01      	ldr	r3, [sp, #4]
    c404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c406:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    c40a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c40e:	041b      	lsls	r3, r3, #16
    c410:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    c414:	431a      	orrs	r2, r3
    c416:	9b01      	ldr	r3, [sp, #4]
    c418:	669a      	str	r2, [r3, #104]	; 0x68
}
    c41a:	bf00      	nop
    c41c:	b002      	add	sp, #8
    c41e:	4770      	bx	lr

0000c420 <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    c420:	b082      	sub	sp, #8
    c422:	9001      	str	r0, [sp, #4]
    c424:	460b      	mov	r3, r1
    c426:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    c42a:	9b01      	ldr	r3, [sp, #4]
    c42c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    c42e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    c432:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c436:	2a00      	cmp	r2, #0
    c438:	d001      	beq.n	c43e <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    c43a:	2240      	movs	r2, #64	; 0x40
    c43c:	e000      	b.n	c440 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    c43e:	2200      	movs	r2, #0
    c440:	431a      	orrs	r2, r3
    c442:	9b01      	ldr	r3, [sp, #4]
    c444:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c446:	bf00      	nop
    c448:	b002      	add	sp, #8
    c44a:	4770      	bx	lr

0000c44c <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    c44c:	b082      	sub	sp, #8
    c44e:	9001      	str	r0, [sp, #4]
    c450:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    c452:	9b01      	ldr	r3, [sp, #4]
    c454:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    c456:	9b00      	ldr	r3, [sp, #0]
    c458:	43db      	mvns	r3, r3
    c45a:	401a      	ands	r2, r3
    c45c:	9b01      	ldr	r3, [sp, #4]
    c45e:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c460:	bf00      	nop
    c462:	b002      	add	sp, #8
    c464:	4770      	bx	lr

0000c466 <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    c466:	b082      	sub	sp, #8
    c468:	9001      	str	r0, [sp, #4]
    c46a:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    c46c:	9b01      	ldr	r3, [sp, #4]
    c46e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    c470:	9b00      	ldr	r3, [sp, #0]
    c472:	43db      	mvns	r3, r3
    c474:	401a      	ands	r2, r3
    c476:	9b00      	ldr	r3, [sp, #0]
    c478:	431a      	orrs	r2, r3
    c47a:	9b01      	ldr	r3, [sp, #4]
    c47c:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c47e:	bf00      	nop
    c480:	b002      	add	sp, #8
    c482:	4770      	bx	lr

0000c484 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    c484:	b084      	sub	sp, #16
    c486:	9003      	str	r0, [sp, #12]
    c488:	460b      	mov	r3, r1
    c48a:	9201      	str	r2, [sp, #4]
    c48c:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    c490:	9b01      	ldr	r3, [sp, #4]
    c492:	2b00      	cmp	r3, #0
    c494:	d10b      	bne.n	c4ae <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    c496:	9b03      	ldr	r3, [sp, #12]
    c498:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c49a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c49e:	2101      	movs	r1, #1
    c4a0:	fa01 f303 	lsl.w	r3, r1, r3
    c4a4:	43db      	mvns	r3, r3
    c4a6:	401a      	ands	r2, r3
    c4a8:	9b03      	ldr	r3, [sp, #12]
    c4aa:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    c4ac:	e009      	b.n	c4c2 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    c4ae:	9b03      	ldr	r3, [sp, #12]
    c4b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c4b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c4b6:	2101      	movs	r1, #1
    c4b8:	fa01 f303 	lsl.w	r3, r1, r3
    c4bc:	431a      	orrs	r2, r3
    c4be:	9b03      	ldr	r3, [sp, #12]
    c4c0:	671a      	str	r2, [r3, #112]	; 0x70
}
    c4c2:	bf00      	nop
    c4c4:	b004      	add	sp, #16
    c4c6:	4770      	bx	lr

0000c4c8 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    c4c8:	b082      	sub	sp, #8
    c4ca:	9001      	str	r0, [sp, #4]
    c4cc:	460b      	mov	r3, r1
    c4ce:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    c4d2:	9b01      	ldr	r3, [sp, #4]
    c4d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c4d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c4da:	fa22 f303 	lsr.w	r3, r2, r3
    c4de:	f003 0301 	and.w	r3, r3, #1
    c4e2:	2b01      	cmp	r3, #1
    c4e4:	bf0c      	ite	eq
    c4e6:	2301      	moveq	r3, #1
    c4e8:	2300      	movne	r3, #0
    c4ea:	b2db      	uxtb	r3, r3
}
    c4ec:	4618      	mov	r0, r3
    c4ee:	b002      	add	sp, #8
    c4f0:	4770      	bx	lr

0000c4f2 <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    c4f2:	b082      	sub	sp, #8
    c4f4:	9001      	str	r0, [sp, #4]
    c4f6:	460b      	mov	r3, r1
    c4f8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    c4fc:	9b01      	ldr	r3, [sp, #4]
    c4fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c502:	f023 021f 	bic.w	r2, r3, #31
    c506:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c50a:	f003 031f 	and.w	r3, r3, #31
    c50e:	431a      	orrs	r2, r3
    c510:	9b01      	ldr	r3, [sp, #4]
    c512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c516:	bf00      	nop
    c518:	b002      	add	sp, #8
    c51a:	4770      	bx	lr

0000c51c <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    c51c:	b082      	sub	sp, #8
    c51e:	9001      	str	r0, [sp, #4]
    c520:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    c522:	9b01      	ldr	r3, [sp, #4]
    c524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c528:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    c52c:	9b00      	ldr	r3, [sp, #0]
    c52e:	019b      	lsls	r3, r3, #6
    c530:	b2db      	uxtb	r3, r3
    c532:	431a      	orrs	r2, r3
    c534:	9b01      	ldr	r3, [sp, #4]
    c536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c53a:	bf00      	nop
    c53c:	b002      	add	sp, #8
    c53e:	4770      	bx	lr

0000c540 <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    c540:	b082      	sub	sp, #8
    c542:	9001      	str	r0, [sp, #4]
    c544:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    c546:	9b01      	ldr	r3, [sp, #4]
    c548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c54c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    c550:	9b00      	ldr	r3, [sp, #0]
    c552:	02db      	lsls	r3, r3, #11
    c554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    c558:	431a      	orrs	r2, r3
    c55a:	9b01      	ldr	r3, [sp, #4]
    c55c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c560:	bf00      	nop
    c562:	b002      	add	sp, #8
    c564:	4770      	bx	lr

0000c566 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    c566:	b082      	sub	sp, #8
    c568:	9001      	str	r0, [sp, #4]
    c56a:	460b      	mov	r3, r1
    c56c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    c570:	9b01      	ldr	r3, [sp, #4]
    c572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c576:	f023 0301 	bic.w	r3, r3, #1
    c57a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c57e:	2a00      	cmp	r2, #0
    c580:	d001      	beq.n	c586 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    c582:	2201      	movs	r2, #1
    c584:	e000      	b.n	c588 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    c586:	2200      	movs	r2, #0
    c588:	431a      	orrs	r2, r3
    c58a:	9b01      	ldr	r3, [sp, #4]
    c58c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c590:	bf00      	nop
    c592:	b002      	add	sp, #8
    c594:	4770      	bx	lr

0000c596 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    c596:	b082      	sub	sp, #8
    c598:	9001      	str	r0, [sp, #4]
    c59a:	460b      	mov	r3, r1
    c59c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    c5a0:	9b01      	ldr	r3, [sp, #4]
    c5a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c5a6:	f023 0304 	bic.w	r3, r3, #4
    c5aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c5ae:	2a00      	cmp	r2, #0
    c5b0:	d001      	beq.n	c5b6 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    c5b2:	2204      	movs	r2, #4
    c5b4:	e000      	b.n	c5b8 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    c5b6:	2200      	movs	r2, #0
    c5b8:	431a      	orrs	r2, r3
    c5ba:	9b01      	ldr	r3, [sp, #4]
    c5bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c5c0:	bf00      	nop
    c5c2:	b002      	add	sp, #8
    c5c4:	4770      	bx	lr

0000c5c6 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    c5c6:	b082      	sub	sp, #8
    c5c8:	9001      	str	r0, [sp, #4]
    c5ca:	460b      	mov	r3, r1
    c5cc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    c5d0:	9b01      	ldr	r3, [sp, #4]
    c5d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c5d6:	f023 0310 	bic.w	r3, r3, #16
    c5da:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c5de:	2a00      	cmp	r2, #0
    c5e0:	d001      	beq.n	c5e6 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    c5e2:	2210      	movs	r2, #16
    c5e4:	e000      	b.n	c5e8 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    c5e6:	2200      	movs	r2, #0
    c5e8:	431a      	orrs	r2, r3
    c5ea:	9b01      	ldr	r3, [sp, #4]
    c5ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c5f0:	bf00      	nop
    c5f2:	b002      	add	sp, #8
    c5f4:	4770      	bx	lr

0000c5f6 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    c5f6:	b082      	sub	sp, #8
    c5f8:	9001      	str	r0, [sp, #4]
    c5fa:	460b      	mov	r3, r1
    c5fc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    c600:	9b01      	ldr	r3, [sp, #4]
    c602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c606:	f023 0320 	bic.w	r3, r3, #32
    c60a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c60e:	2a00      	cmp	r2, #0
    c610:	d001      	beq.n	c616 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    c612:	2220      	movs	r2, #32
    c614:	e000      	b.n	c618 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    c616:	2200      	movs	r2, #0
    c618:	431a      	orrs	r2, r3
    c61a:	9b01      	ldr	r3, [sp, #4]
    c61c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c620:	bf00      	nop
    c622:	b002      	add	sp, #8
    c624:	4770      	bx	lr

0000c626 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    c626:	b082      	sub	sp, #8
    c628:	9001      	str	r0, [sp, #4]
    c62a:	460b      	mov	r3, r1
    c62c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    c630:	9b01      	ldr	r3, [sp, #4]
    c632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c63a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c63e:	2a00      	cmp	r2, #0
    c640:	d001      	beq.n	c646 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    c642:	2280      	movs	r2, #128	; 0x80
    c644:	e000      	b.n	c648 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    c646:	2200      	movs	r2, #0
    c648:	431a      	orrs	r2, r3
    c64a:	9b01      	ldr	r3, [sp, #4]
    c64c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c650:	bf00      	nop
    c652:	b002      	add	sp, #8
    c654:	4770      	bx	lr

0000c656 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    c656:	b082      	sub	sp, #8
    c658:	9001      	str	r0, [sp, #4]
    c65a:	460b      	mov	r3, r1
    c65c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    c660:	9b01      	ldr	r3, [sp, #4]
    c662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    c66a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c66e:	2a00      	cmp	r2, #0
    c670:	d002      	beq.n	c678 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    c672:	f44f 7280 	mov.w	r2, #256	; 0x100
    c676:	e000      	b.n	c67a <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    c678:	2200      	movs	r2, #0
    c67a:	431a      	orrs	r2, r3
    c67c:	9b01      	ldr	r3, [sp, #4]
    c67e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c682:	bf00      	nop
    c684:	b002      	add	sp, #8
    c686:	4770      	bx	lr

0000c688 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    c688:	b082      	sub	sp, #8
    c68a:	9001      	str	r0, [sp, #4]
    c68c:	460b      	mov	r3, r1
    c68e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    c692:	9b01      	ldr	r3, [sp, #4]
    c694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    c69c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c6a0:	2a00      	cmp	r2, #0
    c6a2:	d002      	beq.n	c6aa <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    c6a4:	f44f 7200 	mov.w	r2, #512	; 0x200
    c6a8:	e000      	b.n	c6ac <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    c6aa:	2200      	movs	r2, #0
    c6ac:	431a      	orrs	r2, r3
    c6ae:	9b01      	ldr	r3, [sp, #4]
    c6b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c6b4:	bf00      	nop
    c6b6:	b002      	add	sp, #8
    c6b8:	4770      	bx	lr

0000c6ba <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c6ba:	b082      	sub	sp, #8
    c6bc:	9001      	str	r0, [sp, #4]
    c6be:	460b      	mov	r3, r1
    c6c0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    c6c4:	9b01      	ldr	r3, [sp, #4]
    c6c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c6ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    c6ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c6d2:	2a00      	cmp	r2, #0
    c6d4:	d002      	beq.n	c6dc <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    c6d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c6da:	e000      	b.n	c6de <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    c6dc:	2200      	movs	r2, #0
    c6de:	431a      	orrs	r2, r3
    c6e0:	9b01      	ldr	r3, [sp, #4]
    c6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c6e6:	bf00      	nop
    c6e8:	b002      	add	sp, #8
    c6ea:	4770      	bx	lr

0000c6ec <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c6ec:	b082      	sub	sp, #8
    c6ee:	9001      	str	r0, [sp, #4]
    c6f0:	460b      	mov	r3, r1
    c6f2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    c6f6:	9b01      	ldr	r3, [sp, #4]
    c6f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c6fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    c700:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c704:	2a00      	cmp	r2, #0
    c706:	d002      	beq.n	c70e <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    c708:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c70c:	e000      	b.n	c710 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    c70e:	2200      	movs	r2, #0
    c710:	431a      	orrs	r2, r3
    c712:	9b01      	ldr	r3, [sp, #4]
    c714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c718:	bf00      	nop
    c71a:	b002      	add	sp, #8
    c71c:	4770      	bx	lr

0000c71e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c71e:	b082      	sub	sp, #8
    c720:	9001      	str	r0, [sp, #4]
    c722:	460b      	mov	r3, r1
    c724:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    c728:	9b01      	ldr	r3, [sp, #4]
    c72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c72e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    c732:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c736:	2a00      	cmp	r2, #0
    c738:	d002      	beq.n	c740 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    c73a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c73e:	e000      	b.n	c742 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    c740:	2200      	movs	r2, #0
    c742:	431a      	orrs	r2, r3
    c744:	9b01      	ldr	r3, [sp, #4]
    c746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c74a:	bf00      	nop
    c74c:	b002      	add	sp, #8
    c74e:	4770      	bx	lr

0000c750 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c750:	b082      	sub	sp, #8
    c752:	9001      	str	r0, [sp, #4]
    c754:	460b      	mov	r3, r1
    c756:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    c75a:	9b01      	ldr	r3, [sp, #4]
    c75c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    c764:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c768:	2a00      	cmp	r2, #0
    c76a:	d002      	beq.n	c772 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    c76c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c770:	e000      	b.n	c774 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    c772:	2200      	movs	r2, #0
    c774:	431a      	orrs	r2, r3
    c776:	9b01      	ldr	r3, [sp, #4]
    c778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c77c:	bf00      	nop
    c77e:	b002      	add	sp, #8
    c780:	4770      	bx	lr

0000c782 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    c782:	b082      	sub	sp, #8
    c784:	9001      	str	r0, [sp, #4]
    c786:	460b      	mov	r3, r1
    c788:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    c78c:	9b01      	ldr	r3, [sp, #4]
    c78e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c792:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    c796:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c79a:	2a00      	cmp	r2, #0
    c79c:	d002      	beq.n	c7a4 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    c79e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    c7a2:	e000      	b.n	c7a6 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    c7a4:	2200      	movs	r2, #0
    c7a6:	431a      	orrs	r2, r3
    c7a8:	9b01      	ldr	r3, [sp, #4]
    c7aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c7ae:	bf00      	nop
    c7b0:	b002      	add	sp, #8
    c7b2:	4770      	bx	lr

0000c7b4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c7b4:	b082      	sub	sp, #8
    c7b6:	9001      	str	r0, [sp, #4]
    c7b8:	460b      	mov	r3, r1
    c7ba:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    c7be:	9b01      	ldr	r3, [sp, #4]
    c7c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c7c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    c7c8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c7cc:	2a00      	cmp	r2, #0
    c7ce:	d002      	beq.n	c7d6 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    c7d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    c7d4:	e000      	b.n	c7d8 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    c7d6:	2200      	movs	r2, #0
    c7d8:	431a      	orrs	r2, r3
    c7da:	9b01      	ldr	r3, [sp, #4]
    c7dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c7e0:	bf00      	nop
    c7e2:	b002      	add	sp, #8
    c7e4:	4770      	bx	lr

0000c7e6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c7e6:	b082      	sub	sp, #8
    c7e8:	9001      	str	r0, [sp, #4]
    c7ea:	460b      	mov	r3, r1
    c7ec:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    c7f0:	9b01      	ldr	r3, [sp, #4]
    c7f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c7f6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    c7fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c7fe:	2a00      	cmp	r2, #0
    c800:	d002      	beq.n	c808 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    c802:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    c806:	e000      	b.n	c80a <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    c808:	2200      	movs	r2, #0
    c80a:	431a      	orrs	r2, r3
    c80c:	9b01      	ldr	r3, [sp, #4]
    c80e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c812:	bf00      	nop
    c814:	b002      	add	sp, #8
    c816:	4770      	bx	lr

0000c818 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    c818:	b084      	sub	sp, #16
    c81a:	9001      	str	r0, [sp, #4]
    c81c:	460b      	mov	r3, r1
    c81e:	f88d 3003 	strb.w	r3, [sp, #3]
    c822:	4613      	mov	r3, r2
    c824:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    c828:	9b01      	ldr	r3, [sp, #4]
    c82a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c82c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c830:	fa22 f303 	lsr.w	r3, r2, r3
    c834:	b2db      	uxtb	r3, r3
    c836:	f003 0301 	and.w	r3, r3, #1
    c83a:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    c83e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c842:	2b00      	cmp	r3, #0
    c844:	bf14      	ite	ne
    c846:	2301      	movne	r3, #1
    c848:	2300      	moveq	r3, #0
    c84a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    c84e:	f89d 2002 	ldrb.w	r2, [sp, #2]
    c852:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c856:	429a      	cmp	r2, r3
    c858:	d00d      	beq.n	c876 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    c85a:	9b01      	ldr	r3, [sp, #4]
    c85c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c860:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c864:	3308      	adds	r3, #8
    c866:	2101      	movs	r1, #1
    c868:	fa01 f303 	lsl.w	r3, r1, r3
    c86c:	431a      	orrs	r2, r3
    c86e:	9b01      	ldr	r3, [sp, #4]
    c870:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    c874:	e00d      	b.n	c892 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    c876:	9b01      	ldr	r3, [sp, #4]
    c878:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c87c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c880:	3308      	adds	r3, #8
    c882:	2101      	movs	r1, #1
    c884:	fa01 f303 	lsl.w	r3, r1, r3
    c888:	43db      	mvns	r3, r3
    c88a:	401a      	ands	r2, r3
    c88c:	9b01      	ldr	r3, [sp, #4]
    c88e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c892:	bf00      	nop
    c894:	b004      	add	sp, #16
    c896:	4770      	bx	lr

0000c898 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    c898:	b082      	sub	sp, #8
    c89a:	9001      	str	r0, [sp, #4]
    c89c:	460b      	mov	r3, r1
    c89e:	f88d 3003 	strb.w	r3, [sp, #3]
    c8a2:	4613      	mov	r3, r2
    c8a4:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c8a8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c8ac:	2b00      	cmp	r3, #0
    c8ae:	d00c      	beq.n	c8ca <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    c8b0:	9b01      	ldr	r3, [sp, #4]
    c8b2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c8b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c8ba:	2101      	movs	r1, #1
    c8bc:	fa01 f303 	lsl.w	r3, r1, r3
    c8c0:	431a      	orrs	r2, r3
    c8c2:	9b01      	ldr	r3, [sp, #4]
    c8c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    c8c8:	e00c      	b.n	c8e4 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    c8ca:	9b01      	ldr	r3, [sp, #4]
    c8cc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c8d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c8d4:	2101      	movs	r1, #1
    c8d6:	fa01 f303 	lsl.w	r3, r1, r3
    c8da:	43db      	mvns	r3, r3
    c8dc:	401a      	ands	r2, r3
    c8de:	9b01      	ldr	r3, [sp, #4]
    c8e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c8e4:	bf00      	nop
    c8e6:	b002      	add	sp, #8
    c8e8:	4770      	bx	lr

0000c8ea <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    c8ea:	b082      	sub	sp, #8
    c8ec:	9001      	str	r0, [sp, #4]
    c8ee:	460b      	mov	r3, r1
    c8f0:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    c8f4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    c8f8:	9b01      	ldr	r3, [sp, #4]
    c8fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c8fe:	bf00      	nop
    c900:	b002      	add	sp, #8
    c902:	4770      	bx	lr

0000c904 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    c904:	b082      	sub	sp, #8
    c906:	9001      	str	r0, [sp, #4]
    c908:	460b      	mov	r3, r1
    c90a:	f88d 3003 	strb.w	r3, [sp, #3]
    c90e:	4613      	mov	r3, r2
    c910:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c914:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c918:	2b00      	cmp	r3, #0
    c91a:	d00c      	beq.n	c936 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    c91c:	9b01      	ldr	r3, [sp, #4]
    c91e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    c922:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c926:	2101      	movs	r1, #1
    c928:	fa01 f303 	lsl.w	r3, r1, r3
    c92c:	431a      	orrs	r2, r3
    c92e:	9b01      	ldr	r3, [sp, #4]
    c930:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    c934:	e00c      	b.n	c950 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    c936:	9b01      	ldr	r3, [sp, #4]
    c938:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    c93c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c940:	2101      	movs	r1, #1
    c942:	fa01 f303 	lsl.w	r3, r1, r3
    c946:	43db      	mvns	r3, r3
    c948:	401a      	ands	r2, r3
    c94a:	9b01      	ldr	r3, [sp, #4]
    c94c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    c950:	bf00      	nop
    c952:	b002      	add	sp, #8
    c954:	4770      	bx	lr

0000c956 <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    c956:	b082      	sub	sp, #8
    c958:	9001      	str	r0, [sp, #4]
    c95a:	460b      	mov	r3, r1
    c95c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    c960:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c964:	2b00      	cmp	r3, #0
    c966:	d008      	beq.n	c97a <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    c968:	9b01      	ldr	r3, [sp, #4]
    c96a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    c96e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    c972:	9b01      	ldr	r3, [sp, #4]
    c974:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    c978:	e007      	b.n	c98a <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    c97a:	9b01      	ldr	r3, [sp, #4]
    c97c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    c980:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    c984:	9b01      	ldr	r3, [sp, #4]
    c986:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    c98a:	bf00      	nop
    c98c:	b002      	add	sp, #8
    c98e:	4770      	bx	lr

0000c990 <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    c990:	b082      	sub	sp, #8
    c992:	9001      	str	r0, [sp, #4]
    c994:	460b      	mov	r3, r1
    c996:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    c99a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    c99e:	9b01      	ldr	r3, [sp, #4]
    c9a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    c9a4:	bf00      	nop
    c9a6:	b002      	add	sp, #8
    c9a8:	4770      	bx	lr

0000c9aa <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    c9aa:	b082      	sub	sp, #8
    c9ac:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    c9ae:	9b01      	ldr	r3, [sp, #4]
    c9b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    c9b4:	b29b      	uxth	r3, r3
}
    c9b6:	4618      	mov	r0, r3
    c9b8:	b002      	add	sp, #8
    c9ba:	4770      	bx	lr

0000c9bc <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    c9bc:	b082      	sub	sp, #8
    c9be:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    c9c0:	9b01      	ldr	r3, [sp, #4]
    c9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    c9c4:	b29b      	uxth	r3, r3
}
    c9c6:	4618      	mov	r0, r3
    c9c8:	b002      	add	sp, #8
    c9ca:	4770      	bx	lr

0000c9cc <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    c9cc:	b500      	push	{lr}
    c9ce:	b085      	sub	sp, #20
    c9d0:	9001      	str	r0, [sp, #4]
    c9d2:	460b      	mov	r3, r1
    c9d4:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    c9d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c9dc:	085b      	lsrs	r3, r3, #1
    c9de:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c9e2:	9b01      	ldr	r3, [sp, #4]
    c9e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c9e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c9ea:	00db      	lsls	r3, r3, #3
    c9ec:	2101      	movs	r1, #1
    c9ee:	fa01 f303 	lsl.w	r3, r1, r3
    c9f2:	401a      	ands	r2, r3
    c9f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c9f8:	00db      	lsls	r3, r3, #3
    c9fa:	fa22 f303 	lsr.w	r3, r2, r3
    c9fe:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    ca02:	9b01      	ldr	r3, [sp, #4]
    ca04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    ca06:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca0a:	00db      	lsls	r3, r3, #3
    ca0c:	2180      	movs	r1, #128	; 0x80
    ca0e:	fa01 f303 	lsl.w	r3, r1, r3
    ca12:	401a      	ands	r2, r3
    ca14:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca18:	00db      	lsls	r3, r3, #3
    ca1a:	fa22 f303 	lsr.w	r3, r2, r3
    ca1e:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    ca22:	f89d 3009 	ldrb.w	r3, [sp, #9]
    ca26:	2b80      	cmp	r3, #128	; 0x80
    ca28:	d101      	bne.n	ca2e <Ftm_Pwm_Ip_GetChannelMode+0x62>
    ca2a:	2301      	movs	r3, #1
    ca2c:	e000      	b.n	ca30 <Ftm_Pwm_Ip_GetChannelMode+0x64>
    ca2e:	2300      	movs	r3, #0
    ca30:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    ca34:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca38:	4619      	mov	r1, r3
    ca3a:	9801      	ldr	r0, [sp, #4]
    ca3c:	f7ff f99b 	bl	bd76 <Ftm_Pwm_Ip_GetChnEdgeLevel>
    ca40:	4603      	mov	r3, r0
    ca42:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    ca46:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca4a:	4619      	mov	r1, r3
    ca4c:	9801      	ldr	r0, [sp, #4]
    ca4e:	f7ff fa2a 	bl	bea6 <Ftm_Pwm_Ip_GetChnMode>
    ca52:	4603      	mov	r3, r0
    ca54:	009b      	lsls	r3, r3, #2
    ca56:	b2da      	uxtb	r2, r3
    ca58:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca5c:	4313      	orrs	r3, r2
    ca5e:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    ca62:	9801      	ldr	r0, [sp, #4]
    ca64:	f7ff f923 	bl	bcae <Ftm_Pwm_Ip_GetCpwms>
    ca68:	4603      	mov	r3, r0
    ca6a:	b2db      	uxtb	r3, r3
    ca6c:	011b      	lsls	r3, r3, #4
    ca6e:	b2da      	uxtb	r2, r3
    ca70:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca74:	4313      	orrs	r3, r2
    ca76:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    ca7a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ca7e:	015b      	lsls	r3, r3, #5
    ca80:	b2da      	uxtb	r2, r3
    ca82:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca86:	4313      	orrs	r3, r2
    ca88:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    ca8c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    ca90:	019b      	lsls	r3, r3, #6
    ca92:	b2da      	uxtb	r2, r3
    ca94:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca98:	4313      	orrs	r3, r2
    ca9a:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    ca9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    caa2:	2b62      	cmp	r3, #98	; 0x62
    caa4:	d055      	beq.n	cb52 <Ftm_Pwm_Ip_GetChannelMode+0x186>
    caa6:	2b62      	cmp	r3, #98	; 0x62
    caa8:	dc59      	bgt.n	cb5e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    caaa:	2b22      	cmp	r3, #34	; 0x22
    caac:	dc3c      	bgt.n	cb28 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    caae:	2b09      	cmp	r3, #9
    cab0:	db55      	blt.n	cb5e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    cab2:	3b09      	subs	r3, #9
    cab4:	2b19      	cmp	r3, #25
    cab6:	d852      	bhi.n	cb5e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    cab8:	a201      	add	r2, pc, #4	; (adr r2, cac0 <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    caba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cabe:	bf00      	nop
    cac0:	0000cb35 	.word	0x0000cb35
    cac4:	0000cb2f 	.word	0x0000cb2f
    cac8:	0000cb5f 	.word	0x0000cb5f
    cacc:	0000cb5f 	.word	0x0000cb5f
    cad0:	0000cb5f 	.word	0x0000cb5f
    cad4:	0000cb5f 	.word	0x0000cb5f
    cad8:	0000cb5f 	.word	0x0000cb5f
    cadc:	0000cb5f 	.word	0x0000cb5f
    cae0:	0000cb41 	.word	0x0000cb41
    cae4:	0000cb3b 	.word	0x0000cb3b
    cae8:	0000cb5f 	.word	0x0000cb5f
    caec:	0000cb5f 	.word	0x0000cb5f
    caf0:	0000cb5f 	.word	0x0000cb5f
    caf4:	0000cb5f 	.word	0x0000cb5f
    caf8:	0000cb5f 	.word	0x0000cb5f
    cafc:	0000cb5f 	.word	0x0000cb5f
    cb00:	0000cb5f 	.word	0x0000cb5f
    cb04:	0000cb5f 	.word	0x0000cb5f
    cb08:	0000cb5f 	.word	0x0000cb5f
    cb0c:	0000cb5f 	.word	0x0000cb5f
    cb10:	0000cb5f 	.word	0x0000cb5f
    cb14:	0000cb5f 	.word	0x0000cb5f
    cb18:	0000cb5f 	.word	0x0000cb5f
    cb1c:	0000cb5f 	.word	0x0000cb5f
    cb20:	0000cb4d 	.word	0x0000cb4d
    cb24:	0000cb47 	.word	0x0000cb47
    cb28:	2b61      	cmp	r3, #97	; 0x61
    cb2a:	d015      	beq.n	cb58 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    cb2c:	e017      	b.n	cb5e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    cb2e:	230a      	movs	r3, #10
    cb30:	9303      	str	r3, [sp, #12]
            break;
    cb32:	e017      	b.n	cb64 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    cb34:	2309      	movs	r3, #9
    cb36:	9303      	str	r3, [sp, #12]
            break;
    cb38:	e014      	b.n	cb64 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    cb3a:	2312      	movs	r3, #18
    cb3c:	9303      	str	r3, [sp, #12]
            break;
    cb3e:	e011      	b.n	cb64 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    cb40:	2311      	movs	r3, #17
    cb42:	9303      	str	r3, [sp, #12]
            break;
    cb44:	e00e      	b.n	cb64 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    cb46:	2322      	movs	r3, #34	; 0x22
    cb48:	9303      	str	r3, [sp, #12]
            break;
    cb4a:	e00b      	b.n	cb64 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    cb4c:	2321      	movs	r3, #33	; 0x21
    cb4e:	9303      	str	r3, [sp, #12]
            break;
    cb50:	e008      	b.n	cb64 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    cb52:	2362      	movs	r3, #98	; 0x62
    cb54:	9303      	str	r3, [sp, #12]
            break;
    cb56:	e005      	b.n	cb64 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    cb58:	2361      	movs	r3, #97	; 0x61
    cb5a:	9303      	str	r3, [sp, #12]
            break;
    cb5c:	e002      	b.n	cb64 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    cb5e:	23ff      	movs	r3, #255	; 0xff
    cb60:	9303      	str	r3, [sp, #12]
            break;
    cb62:	bf00      	nop
    }

    return ChMode; 
    cb64:	9b03      	ldr	r3, [sp, #12]
}
    cb66:	4618      	mov	r0, r3
    cb68:	b005      	add	sp, #20
    cb6a:	f85d fb04 	ldr.w	pc, [sp], #4

0000cb6e <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    cb6e:	b082      	sub	sp, #8
    cb70:	9001      	str	r0, [sp, #4]
    cb72:	460b      	mov	r3, r1
    cb74:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    cb78:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cb7c:	2b00      	cmp	r3, #0
    cb7e:	d006      	beq.n	cb8e <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    cb80:	9b01      	ldr	r3, [sp, #4]
    cb82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cb84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    cb88:	9b01      	ldr	r3, [sp, #4]
    cb8a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    cb8c:	e00b      	b.n	cba6 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    cb8e:	9b01      	ldr	r3, [sp, #4]
    cb90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cb92:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cb96:	2b00      	cmp	r3, #0
    cb98:	d005      	beq.n	cba6 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    cb9a:	9b01      	ldr	r3, [sp, #4]
    cb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cb9e:	f043 0204 	orr.w	r2, r3, #4
    cba2:	9b01      	ldr	r3, [sp, #4]
    cba4:	655a      	str	r2, [r3, #84]	; 0x54
}
    cba6:	bf00      	nop
    cba8:	b002      	add	sp, #8
    cbaa:	4770      	bx	lr

0000cbac <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    cbac:	b500      	push	{lr}
    cbae:	b085      	sub	sp, #20
    cbb0:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    cbb2:	2100      	movs	r1, #0
    cbb4:	9801      	ldr	r0, [sp, #4]
    cbb6:	f7ff ffda 	bl	cb6e <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    cbba:	9b01      	ldr	r3, [sp, #4]
    cbbc:	681a      	ldr	r2, [r3, #0]
    cbbe:	9b01      	ldr	r3, [sp, #4]
    cbc0:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    cbc2:	9b01      	ldr	r3, [sp, #4]
    cbc4:	2200      	movs	r2, #0
    cbc6:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    cbc8:	9b01      	ldr	r3, [sp, #4]
    cbca:	2200      	movs	r2, #0
    cbcc:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    cbce:	9b01      	ldr	r3, [sp, #4]
    cbd0:	2200      	movs	r2, #0
    cbd2:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    cbd4:	9b01      	ldr	r3, [sp, #4]
    cbd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    cbd8:	9b01      	ldr	r3, [sp, #4]
    cbda:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    cbdc:	9b01      	ldr	r3, [sp, #4]
    cbde:	2204      	movs	r2, #4
    cbe0:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    cbe2:	9b01      	ldr	r3, [sp, #4]
    cbe4:	2200      	movs	r2, #0
    cbe6:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    cbe8:	9b01      	ldr	r3, [sp, #4]
    cbea:	2200      	movs	r2, #0
    cbec:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    cbee:	9b01      	ldr	r3, [sp, #4]
    cbf0:	2200      	movs	r2, #0
    cbf2:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    cbf4:	9b01      	ldr	r3, [sp, #4]
    cbf6:	2200      	movs	r2, #0
    cbf8:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    cbfa:	9b01      	ldr	r3, [sp, #4]
    cbfc:	2200      	movs	r2, #0
    cbfe:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    cc00:	9b01      	ldr	r3, [sp, #4]
    cc02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    cc04:	9b01      	ldr	r3, [sp, #4]
    cc06:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    cc08:	9b01      	ldr	r3, [sp, #4]
    cc0a:	2200      	movs	r2, #0
    cc0c:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    cc0e:	9b01      	ldr	r3, [sp, #4]
    cc10:	2200      	movs	r2, #0
    cc12:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    cc14:	9b01      	ldr	r3, [sp, #4]
    cc16:	2200      	movs	r2, #0
    cc18:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    cc1a:	9b01      	ldr	r3, [sp, #4]
    cc1c:	2200      	movs	r2, #0
    cc1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    cc22:	9b01      	ldr	r3, [sp, #4]
    cc24:	2200      	movs	r2, #0
    cc26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    cc2a:	9b01      	ldr	r3, [sp, #4]
    cc2c:	2200      	movs	r2, #0
    cc2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    cc32:	9b01      	ldr	r3, [sp, #4]
    cc34:	2200      	movs	r2, #0
    cc36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    cc3a:	9b01      	ldr	r3, [sp, #4]
    cc3c:	2200      	movs	r2, #0
    cc3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    cc42:	9b01      	ldr	r3, [sp, #4]
    cc44:	2200      	movs	r2, #0
    cc46:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    cc4a:	9b01      	ldr	r3, [sp, #4]
    cc4c:	2200      	movs	r2, #0
    cc4e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    cc52:	2300      	movs	r3, #0
    cc54:	f88d 300f 	strb.w	r3, [sp, #15]
    cc58:	e014      	b.n	cc84 <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    cc5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc5e:	9a01      	ldr	r2, [sp, #4]
    cc60:	3301      	adds	r3, #1
    cc62:	00db      	lsls	r3, r3, #3
    cc64:	4413      	add	r3, r2
    cc66:	2200      	movs	r2, #0
    cc68:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    cc6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc6e:	9a01      	ldr	r2, [sp, #4]
    cc70:	3301      	adds	r3, #1
    cc72:	00db      	lsls	r3, r3, #3
    cc74:	4413      	add	r3, r2
    cc76:	2200      	movs	r2, #0
    cc78:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    cc7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc7e:	3301      	adds	r3, #1
    cc80:	f88d 300f 	strb.w	r3, [sp, #15]
    cc84:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc88:	2b07      	cmp	r3, #7
    cc8a:	d9e6      	bls.n	cc5a <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    cc8c:	bf00      	nop
    cc8e:	bf00      	nop
    cc90:	b005      	add	sp, #20
    cc92:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc96 <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    cc96:	b084      	sub	sp, #16
    cc98:	9001      	str	r0, [sp, #4]
    cc9a:	460b      	mov	r3, r1
    cc9c:	f88d 3003 	strb.w	r3, [sp, #3]
    cca0:	4613      	mov	r3, r2
    cca2:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    cca6:	2300      	movs	r3, #0
    cca8:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    ccaa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccae:	2b01      	cmp	r3, #1
    ccb0:	d806      	bhi.n	ccc0 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    ccb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccb6:	2210      	movs	r2, #16
    ccb8:	fa02 f303 	lsl.w	r3, r2, r3
    ccbc:	9303      	str	r3, [sp, #12]
    ccbe:	e013      	b.n	cce8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    ccc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccc4:	2b05      	cmp	r3, #5
    ccc6:	d807      	bhi.n	ccd8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    ccc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cccc:	3b02      	subs	r3, #2
    ccce:	2201      	movs	r2, #1
    ccd0:	fa02 f303 	lsl.w	r3, r2, r3
    ccd4:	9303      	str	r3, [sp, #12]
    ccd6:	e007      	b.n	cce8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    ccd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccdc:	3b06      	subs	r3, #6
    ccde:	f44f 7280 	mov.w	r2, #256	; 0x100
    cce2:	fa02 f303 	lsl.w	r3, r2, r3
    cce6:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    cce8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ccec:	2b00      	cmp	r3, #0
    ccee:	d006      	beq.n	ccfe <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    ccf0:	9b01      	ldr	r3, [sp, #4]
    ccf2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    ccf4:	9b03      	ldr	r3, [sp, #12]
    ccf6:	431a      	orrs	r2, r3
    ccf8:	9b01      	ldr	r3, [sp, #4]
    ccfa:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    ccfc:	e006      	b.n	cd0c <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    ccfe:	9b01      	ldr	r3, [sp, #4]
    cd00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    cd02:	9b03      	ldr	r3, [sp, #12]
    cd04:	43db      	mvns	r3, r3
    cd06:	401a      	ands	r2, r3
    cd08:	9b01      	ldr	r3, [sp, #4]
    cd0a:	66da      	str	r2, [r3, #108]	; 0x6c
}
    cd0c:	bf00      	nop
    cd0e:	b004      	add	sp, #16
    cd10:	4770      	bx	lr

0000cd12 <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    cd12:	b082      	sub	sp, #8
    cd14:	9001      	str	r0, [sp, #4]
    cd16:	9100      	str	r1, [sp, #0]
    cd18:	9b00      	ldr	r3, [sp, #0]
    cd1a:	2b03      	cmp	r3, #3
    cd1c:	d82a      	bhi.n	cd74 <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    cd1e:	a201      	add	r2, pc, #4	; (adr r2, cd24 <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    cd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cd24:	0000cd35 	.word	0x0000cd35
    cd28:	0000cd43 	.word	0x0000cd43
    cd2c:	0000cd55 	.word	0x0000cd55
    cd30:	0000cd67 	.word	0x0000cd67
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    cd34:	9b01      	ldr	r3, [sp, #4]
    cd36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cd38:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    cd3c:	9b01      	ldr	r3, [sp, #4]
    cd3e:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cd40:	e019      	b.n	cd76 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    cd42:	9b01      	ldr	r3, [sp, #4]
    cd44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cd46:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    cd4a:	f043 0220 	orr.w	r2, r3, #32
    cd4e:	9b01      	ldr	r3, [sp, #4]
    cd50:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cd52:	e010      	b.n	cd76 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    cd54:	9b01      	ldr	r3, [sp, #4]
    cd56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cd58:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    cd5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    cd60:	9b01      	ldr	r3, [sp, #4]
    cd62:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cd64:	e007      	b.n	cd76 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    cd66:	9b01      	ldr	r3, [sp, #4]
    cd68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cd6a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    cd6e:	9b01      	ldr	r3, [sp, #4]
    cd70:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cd72:	e000      	b.n	cd76 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    cd74:	bf00      	nop
    }
}
    cd76:	bf00      	nop
    cd78:	b002      	add	sp, #8
    cd7a:	4770      	bx	lr

0000cd7c <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    cd7c:	b082      	sub	sp, #8
    cd7e:	9001      	str	r0, [sp, #4]
    cd80:	460b      	mov	r3, r1
    cd82:	f88d 3003 	strb.w	r3, [sp, #3]
    cd86:	4613      	mov	r3, r2
    cd88:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    cd8c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cd90:	2b00      	cmp	r3, #0
    cd92:	d00b      	beq.n	cdac <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    cd94:	9b01      	ldr	r3, [sp, #4]
    cd96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    cd98:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cd9c:	00db      	lsls	r3, r3, #3
    cd9e:	2140      	movs	r1, #64	; 0x40
    cda0:	fa01 f303 	lsl.w	r3, r1, r3
    cda4:	431a      	orrs	r2, r3
    cda6:	9b01      	ldr	r3, [sp, #4]
    cda8:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    cdaa:	e00b      	b.n	cdc4 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    cdac:	9b01      	ldr	r3, [sp, #4]
    cdae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    cdb0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cdb4:	00db      	lsls	r3, r3, #3
    cdb6:	2140      	movs	r1, #64	; 0x40
    cdb8:	fa01 f303 	lsl.w	r3, r1, r3
    cdbc:	43db      	mvns	r3, r3
    cdbe:	401a      	ands	r2, r3
    cdc0:	9b01      	ldr	r3, [sp, #4]
    cdc2:	665a      	str	r2, [r3, #100]	; 0x64
}
    cdc4:	bf00      	nop
    cdc6:	b002      	add	sp, #8
    cdc8:	4770      	bx	lr

0000cdca <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    cdca:	b082      	sub	sp, #8
    cdcc:	9001      	str	r0, [sp, #4]
    cdce:	460b      	mov	r3, r1
    cdd0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    cdd4:	9b01      	ldr	r3, [sp, #4]
    cdd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cdd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    cddc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cde0:	2a00      	cmp	r2, #0
    cde2:	d001      	beq.n	cde8 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    cde4:	2280      	movs	r2, #128	; 0x80
    cde6:	e000      	b.n	cdea <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    cde8:	2200      	movs	r2, #0
    cdea:	431a      	orrs	r2, r3
    cdec:	9b01      	ldr	r3, [sp, #4]
    cdee:	655a      	str	r2, [r3, #84]	; 0x54
}
    cdf0:	bf00      	nop
    cdf2:	b002      	add	sp, #8
    cdf4:	4770      	bx	lr

0000cdf6 <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    cdf6:	b082      	sub	sp, #8
    cdf8:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    cdfa:	9b01      	ldr	r3, [sp, #4]
    cdfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cdfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    ce02:	9b01      	ldr	r3, [sp, #4]
    ce04:	675a      	str	r2, [r3, #116]	; 0x74
}
    ce06:	bf00      	nop
    ce08:	b002      	add	sp, #8
    ce0a:	4770      	bx	lr

0000ce0c <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    ce0c:	b082      	sub	sp, #8
    ce0e:	9001      	str	r0, [sp, #4]
    ce10:	460b      	mov	r3, r1
    ce12:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    ce16:	9b01      	ldr	r3, [sp, #4]
    ce18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ce1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    ce1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ce22:	021b      	lsls	r3, r3, #8
    ce24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ce28:	431a      	orrs	r2, r3
    ce2a:	9b01      	ldr	r3, [sp, #4]
    ce2c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    ce2e:	bf00      	nop
    ce30:	b002      	add	sp, #8
    ce32:	4770      	bx	lr

0000ce34 <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    ce34:	b082      	sub	sp, #8
    ce36:	9001      	str	r0, [sp, #4]
    ce38:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    ce3a:	9b01      	ldr	r3, [sp, #4]
    ce3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ce3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    ce42:	9a00      	ldr	r2, [sp, #0]
    ce44:	2a00      	cmp	r2, #0
    ce46:	d002      	beq.n	ce4e <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    ce48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ce4c:	e000      	b.n	ce50 <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    ce4e:	2200      	movs	r2, #0
    ce50:	431a      	orrs	r2, r3
    ce52:	9b01      	ldr	r3, [sp, #4]
    ce54:	67da      	str	r2, [r3, #124]	; 0x7c
}
    ce56:	bf00      	nop
    ce58:	b002      	add	sp, #8
    ce5a:	4770      	bx	lr

0000ce5c <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    ce5c:	b086      	sub	sp, #24
    ce5e:	9003      	str	r0, [sp, #12]
    ce60:	460b      	mov	r3, r1
    ce62:	9201      	str	r2, [sp, #4]
    ce64:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    ce68:	9b01      	ldr	r3, [sp, #4]
    ce6a:	2b00      	cmp	r3, #0
    ce6c:	bf14      	ite	ne
    ce6e:	2301      	movne	r3, #1
    ce70:	2300      	moveq	r3, #0
    ce72:	b2db      	uxtb	r3, r3
    ce74:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    ce76:	9b03      	ldr	r3, [sp, #12]
    ce78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    ce7c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ce80:	2101      	movs	r1, #1
    ce82:	fa01 f303 	lsl.w	r3, r1, r3
    ce86:	43db      	mvns	r3, r3
    ce88:	401a      	ands	r2, r3
    ce8a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ce8e:	9905      	ldr	r1, [sp, #20]
    ce90:	fa01 f303 	lsl.w	r3, r1, r3
    ce94:	431a      	orrs	r2, r3
    ce96:	9b03      	ldr	r3, [sp, #12]
    ce98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    ce9c:	bf00      	nop
    ce9e:	b006      	add	sp, #24
    cea0:	4770      	bx	lr

0000cea2 <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    cea2:	b084      	sub	sp, #16
    cea4:	9001      	str	r0, [sp, #4]
    cea6:	460b      	mov	r3, r1
    cea8:	f88d 3003 	strb.w	r3, [sp, #3]
    ceac:	4613      	mov	r3, r2
    ceae:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    ceb2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ceb6:	2b00      	cmp	r3, #0
    ceb8:	d001      	beq.n	cebe <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    ceba:	2301      	movs	r3, #1
    cebc:	e000      	b.n	cec0 <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    cebe:	2300      	movs	r3, #0
    cec0:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    cec2:	9b01      	ldr	r3, [sp, #4]
    cec4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    cec6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ceca:	2101      	movs	r1, #1
    cecc:	fa01 f303 	lsl.w	r3, r1, r3
    ced0:	43db      	mvns	r3, r3
    ced2:	401a      	ands	r2, r3
    ced4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ced8:	9903      	ldr	r1, [sp, #12]
    ceda:	fa01 f303 	lsl.w	r3, r1, r3
    cede:	431a      	orrs	r2, r3
    cee0:	9b01      	ldr	r3, [sp, #4]
    cee2:	67da      	str	r2, [r3, #124]	; 0x7c
}
    cee4:	bf00      	nop
    cee6:	b004      	add	sp, #16
    cee8:	4770      	bx	lr

0000ceea <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    ceea:	b084      	sub	sp, #16
    ceec:	9001      	str	r0, [sp, #4]
    ceee:	460b      	mov	r3, r1
    cef0:	f88d 3003 	strb.w	r3, [sp, #3]
    cef4:	4613      	mov	r3, r2
    cef6:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    cefa:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cefe:	2b00      	cmp	r3, #0
    cf00:	d001      	beq.n	cf06 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    cf02:	2301      	movs	r3, #1
    cf04:	e000      	b.n	cf08 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    cf06:	2300      	movs	r3, #0
    cf08:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    cf0a:	9b01      	ldr	r3, [sp, #4]
    cf0c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    cf0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf12:	2110      	movs	r1, #16
    cf14:	fa01 f303 	lsl.w	r3, r1, r3
    cf18:	43db      	mvns	r3, r3
    cf1a:	401a      	ands	r2, r3
    cf1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf20:	9903      	ldr	r1, [sp, #12]
    cf22:	fa01 f303 	lsl.w	r3, r1, r3
    cf26:	011b      	lsls	r3, r3, #4
    cf28:	431a      	orrs	r2, r3
    cf2a:	9b01      	ldr	r3, [sp, #4]
    cf2c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    cf2e:	bf00      	nop
    cf30:	b004      	add	sp, #16
    cf32:	4770      	bx	lr

0000cf34 <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    cf34:	b082      	sub	sp, #8
    cf36:	9001      	str	r0, [sp, #4]
    cf38:	460b      	mov	r3, r1
    cf3a:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    cf3e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    cf46:	409a      	lsls	r2, r3
    cf48:	9b01      	ldr	r3, [sp, #4]
    cf4a:	6a1b      	ldr	r3, [r3, #32]
    cf4c:	431a      	orrs	r2, r3
    cf4e:	9b01      	ldr	r3, [sp, #4]
    cf50:	621a      	str	r2, [r3, #32]
}
    cf52:	bf00      	nop
    cf54:	b002      	add	sp, #8
    cf56:	4770      	bx	lr

0000cf58 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    cf58:	b084      	sub	sp, #16
    cf5a:	4603      	mov	r3, r0
    cf5c:	f88d 3007 	strb.w	r3, [sp, #7]
    cf60:	460b      	mov	r3, r1
    cf62:	f8ad 3004 	strh.w	r3, [sp, #4]
    cf66:	4613      	mov	r3, r2
    cf68:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    cf6c:	2300      	movs	r3, #0
    cf6e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    cf72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cf76:	4a17      	ldr	r2, [pc, #92]	; (cfd4 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cf78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cf7c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    cf80:	429a      	cmp	r2, r3
    cf82:	d107      	bne.n	cf94 <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    cf84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cf88:	4a12      	ldr	r2, [pc, #72]	; (cfd4 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cf8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cf8e:	f8ad 300e 	strh.w	r3, [sp, #14]
    cf92:	e019      	b.n	cfc8 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    cf94:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d104      	bne.n	cfa6 <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    cf9c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    cfa0:	f8ad 300e 	strh.w	r3, [sp, #14]
    cfa4:	e010      	b.n	cfc8 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    cfa6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    cfaa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    cfae:	4413      	add	r3, r2
    cfb0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cfb4:	4907      	ldr	r1, [pc, #28]	; (cfd4 <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cfb6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    cfba:	fb93 f1f2 	sdiv	r1, r3, r2
    cfbe:	fb01 f202 	mul.w	r2, r1, r2
    cfc2:	1a9b      	subs	r3, r3, r2
    cfc4:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    cfc8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    cfcc:	4618      	mov	r0, r3
    cfce:	b004      	add	sp, #16
    cfd0:	4770      	bx	lr
    cfd2:	bf00      	nop
    cfd4:	1fff8e14 	.word	0x1fff8e14

0000cfd8 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    cfd8:	b500      	push	{lr}
    cfda:	b085      	sub	sp, #20
    cfdc:	4603      	mov	r3, r0
    cfde:	9100      	str	r1, [sp, #0]
    cfe0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    cfe4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cfe8:	4a40      	ldr	r2, [pc, #256]	; (d0ec <Ftm_Pwm_Ip_InitPair+0x114>)
    cfea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfee:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    cff0:	2300      	movs	r3, #0
    cff2:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    cff6:	2300      	movs	r3, #0
    cff8:	f88d 300a 	strb.w	r3, [sp, #10]
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    cffc:	9b00      	ldr	r3, [sp, #0]
    cffe:	781b      	ldrb	r3, [r3, #0]
    d000:	005b      	lsls	r3, r3, #1
    d002:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    d006:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d00a:	3301      	adds	r3, #1
    d00c:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    d010:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d014:	9a00      	ldr	r2, [sp, #0]
    d016:	7812      	ldrb	r2, [r2, #0]
    d018:	4610      	mov	r0, r2
    d01a:	9a00      	ldr	r2, [sp, #0]
    d01c:	8951      	ldrh	r1, [r2, #10]
    d01e:	4a34      	ldr	r2, [pc, #208]	; (d0f0 <Ftm_Pwm_Ip_InitPair+0x118>)
    d020:	009b      	lsls	r3, r3, #2
    d022:	4403      	add	r3, r0
    d024:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    d028:	9b00      	ldr	r3, [sp, #0]
    d02a:	7819      	ldrb	r1, [r3, #0]
    d02c:	9b00      	ldr	r3, [sp, #0]
    d02e:	789b      	ldrb	r3, [r3, #2]
    d030:	461a      	mov	r2, r3
    d032:	9803      	ldr	r0, [sp, #12]
    d034:	f7ff f920 	bl	c278 <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    d038:	9b00      	ldr	r3, [sp, #0]
    d03a:	789b      	ldrb	r3, [r3, #2]
    d03c:	2b00      	cmp	r3, #0
    d03e:	d02f      	beq.n	d0a0 <Ftm_Pwm_Ip_InitPair+0xc8>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    d040:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d044:	4619      	mov	r1, r3
    d046:	9803      	ldr	r0, [sp, #12]
    d048:	f7ff fa3e 	bl	c4c8 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    d04c:	4603      	mov	r3, r0
    d04e:	2b01      	cmp	r3, #1
    d050:	d113      	bne.n	d07a <Ftm_Pwm_Ip_InitPair+0xa2>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    d052:	9b00      	ldr	r3, [sp, #0]
    d054:	685b      	ldr	r3, [r3, #4]
    d056:	2b01      	cmp	r3, #1
    d058:	d107      	bne.n	d06a <Ftm_Pwm_Ip_InitPair+0x92>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    d05a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d05e:	2200      	movs	r2, #0
    d060:	4619      	mov	r1, r3
    d062:	9803      	ldr	r0, [sp, #12]
    d064:	f7ff fa0e 	bl	c484 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    d068:	e01a      	b.n	d0a0 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    d06a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d06e:	2201      	movs	r2, #1
    d070:	4619      	mov	r1, r3
    d072:	9803      	ldr	r0, [sp, #12]
    d074:	f7ff fa06 	bl	c484 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    d078:	e012      	b.n	d0a0 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    d07a:	9b00      	ldr	r3, [sp, #0]
    d07c:	685b      	ldr	r3, [r3, #4]
    d07e:	2b01      	cmp	r3, #1
    d080:	d107      	bne.n	d092 <Ftm_Pwm_Ip_InitPair+0xba>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    d082:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d086:	2201      	movs	r2, #1
    d088:	4619      	mov	r1, r3
    d08a:	9803      	ldr	r0, [sp, #12]
    d08c:	f7ff f9fa 	bl	c484 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    d090:	e006      	b.n	d0a0 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    d092:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d096:	2200      	movs	r2, #0
    d098:	4619      	mov	r1, r3
    d09a:	9803      	ldr	r0, [sp, #12]
    d09c:	f7ff f9f2 	bl	c484 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    d0a0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d0a4:	4619      	mov	r1, r3
    d0a6:	9803      	ldr	r0, [sp, #12]
    d0a8:	f7fe fe31 	bl	bd0e <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    d0ac:	9b00      	ldr	r3, [sp, #0]
    d0ae:	7819      	ldrb	r1, [r3, #0]
    d0b0:	9b00      	ldr	r3, [sp, #0]
    d0b2:	7a5b      	ldrb	r3, [r3, #9]
    d0b4:	461a      	mov	r2, r3
    d0b6:	9803      	ldr	r0, [sp, #12]
    d0b8:	f7ff f92c 	bl	c314 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    d0bc:	9b00      	ldr	r3, [sp, #0]
    d0be:	7819      	ldrb	r1, [r3, #0]
    d0c0:	9b00      	ldr	r3, [sp, #0]
    d0c2:	785b      	ldrb	r3, [r3, #1]
    d0c4:	461a      	mov	r2, r3
    d0c6:	9803      	ldr	r0, [sp, #12]
    d0c8:	f7ff f8fd 	bl	c2c6 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    d0cc:	9b00      	ldr	r3, [sp, #0]
    d0ce:	7a1a      	ldrb	r2, [r3, #8]
    d0d0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d0d4:	4619      	mov	r1, r3
    d0d6:	9803      	ldr	r0, [sp, #12]
    d0d8:	f7ff fddd 	bl	cc96 <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    d0dc:	2101      	movs	r1, #1
    d0de:	9803      	ldr	r0, [sp, #12]
    d0e0:	f7ff f814 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    d0e4:	bf00      	nop
    d0e6:	b005      	add	sp, #20
    d0e8:	f85d fb04 	ldr.w	pc, [sp], #4
    d0ec:	0001648c 	.word	0x0001648c
    d0f0:	1fff8e5c 	.word	0x1fff8e5c

0000d0f4 <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    d0f4:	b500      	push	{lr}
    d0f6:	b085      	sub	sp, #20
    d0f8:	4603      	mov	r3, r0
    d0fa:	460a      	mov	r2, r1
    d0fc:	f88d 3007 	strb.w	r3, [sp, #7]
    d100:	4613      	mov	r3, r2
    d102:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d106:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d10a:	4a0a      	ldr	r2, [pc, #40]	; (d134 <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    d10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d110:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    d112:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d116:	2200      	movs	r2, #0
    d118:	4619      	mov	r1, r3
    d11a:	9803      	ldr	r0, [sp, #12]
    d11c:	f7fe feed 	bl	befa <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    d120:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d124:	4619      	mov	r1, r3
    d126:	9803      	ldr	r0, [sp, #12]
    d128:	f7fe ff0a 	bl	bf40 <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    d12c:	bf00      	nop
    d12e:	b005      	add	sp, #20
    d130:	f85d fb04 	ldr.w	pc, [sp], #4
    d134:	0001648c 	.word	0x0001648c

0000d138 <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    d138:	b500      	push	{lr}
    d13a:	b085      	sub	sp, #20
    d13c:	4603      	mov	r3, r0
    d13e:	9100      	str	r1, [sp, #0]
    d140:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d144:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d148:	4a53      	ldr	r2, [pc, #332]	; (d298 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    d14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d14e:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    d150:	9b00      	ldr	r3, [sp, #0]
    d152:	681b      	ldr	r3, [r3, #0]
    d154:	2b00      	cmp	r3, #0
    d156:	d002      	beq.n	d15e <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    d158:	2b01      	cmp	r3, #1
    d15a:	d04c      	beq.n	d1f6 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    d15c:	e097      	b.n	d28e <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    d15e:	9b00      	ldr	r3, [sp, #0]
    d160:	699b      	ldr	r3, [r3, #24]
    d162:	2b00      	cmp	r3, #0
    d164:	bf14      	ite	ne
    d166:	2301      	movne	r3, #1
    d168:	2300      	moveq	r3, #0
    d16a:	b2db      	uxtb	r3, r3
    d16c:	4619      	mov	r1, r3
    d16e:	9803      	ldr	r0, [sp, #12]
    d170:	f7ff faa3 	bl	c6ba <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    d174:	2100      	movs	r1, #0
    d176:	9803      	ldr	r0, [sp, #12]
    d178:	f7ff fb1c 	bl	c7b4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    d17c:	9b00      	ldr	r3, [sp, #0]
    d17e:	691b      	ldr	r3, [r3, #16]
    d180:	2b00      	cmp	r3, #0
    d182:	bf14      	ite	ne
    d184:	2301      	movne	r3, #1
    d186:	2300      	moveq	r3, #0
    d188:	b2db      	uxtb	r3, r3
    d18a:	4619      	mov	r1, r3
    d18c:	9803      	ldr	r0, [sp, #12]
    d18e:	f7ff faad 	bl	c6ec <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    d192:	2100      	movs	r1, #0
    d194:	9803      	ldr	r0, [sp, #12]
    d196:	f7ff fb26 	bl	c7e6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    d19a:	9b00      	ldr	r3, [sp, #0]
    d19c:	695b      	ldr	r3, [r3, #20]
    d19e:	2b00      	cmp	r3, #0
    d1a0:	bf14      	ite	ne
    d1a2:	2301      	movne	r3, #1
    d1a4:	2300      	moveq	r3, #0
    d1a6:	b2db      	uxtb	r3, r3
    d1a8:	4619      	mov	r1, r3
    d1aa:	9803      	ldr	r0, [sp, #12]
    d1ac:	f7ff fab7 	bl	c71e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    d1b0:	2100      	movs	r1, #0
    d1b2:	9803      	ldr	r0, [sp, #12]
    d1b4:	f7ff fb17 	bl	c7e6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d1b8:	9b00      	ldr	r3, [sp, #0]
    d1ba:	69db      	ldr	r3, [r3, #28]
    d1bc:	2b00      	cmp	r3, #0
    d1be:	bf14      	ite	ne
    d1c0:	2301      	movne	r3, #1
    d1c2:	2300      	moveq	r3, #0
    d1c4:	b2db      	uxtb	r3, r3
    d1c6:	4619      	mov	r1, r3
    d1c8:	9803      	ldr	r0, [sp, #12]
    d1ca:	f7ff fa5d 	bl	c688 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    d1ce:	2100      	movs	r1, #0
    d1d0:	9803      	ldr	r0, [sp, #12]
    d1d2:	f7ff fad6 	bl	c782 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d1d6:	9b00      	ldr	r3, [sp, #0]
    d1d8:	6a1b      	ldr	r3, [r3, #32]
    d1da:	2b00      	cmp	r3, #0
    d1dc:	bf14      	ite	ne
    d1de:	2301      	movne	r3, #1
    d1e0:	2300      	moveq	r3, #0
    d1e2:	b2db      	uxtb	r3, r3
    d1e4:	4619      	mov	r1, r3
    d1e6:	9803      	ldr	r0, [sp, #12]
    d1e8:	f7ff fa35 	bl	c656 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    d1ec:	2100      	movs	r1, #0
    d1ee:	9803      	ldr	r0, [sp, #12]
    d1f0:	f7ff faae 	bl	c750 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    d1f4:	e04b      	b.n	d28e <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    d1f6:	2100      	movs	r1, #0
    d1f8:	9803      	ldr	r0, [sp, #12]
    d1fa:	f7ff fa5e 	bl	c6ba <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    d1fe:	9b00      	ldr	r3, [sp, #0]
    d200:	699b      	ldr	r3, [r3, #24]
    d202:	2b00      	cmp	r3, #0
    d204:	bf14      	ite	ne
    d206:	2301      	movne	r3, #1
    d208:	2300      	moveq	r3, #0
    d20a:	b2db      	uxtb	r3, r3
    d20c:	4619      	mov	r1, r3
    d20e:	9803      	ldr	r0, [sp, #12]
    d210:	f7ff fad0 	bl	c7b4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    d214:	2100      	movs	r1, #0
    d216:	9803      	ldr	r0, [sp, #12]
    d218:	f7ff fa68 	bl	c6ec <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    d21c:	9b00      	ldr	r3, [sp, #0]
    d21e:	691b      	ldr	r3, [r3, #16]
    d220:	2b00      	cmp	r3, #0
    d222:	bf14      	ite	ne
    d224:	2301      	movne	r3, #1
    d226:	2300      	moveq	r3, #0
    d228:	b2db      	uxtb	r3, r3
    d22a:	4619      	mov	r1, r3
    d22c:	9803      	ldr	r0, [sp, #12]
    d22e:	f7ff fada 	bl	c7e6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    d232:	2100      	movs	r1, #0
    d234:	9803      	ldr	r0, [sp, #12]
    d236:	f7ff fa72 	bl	c71e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    d23a:	9b00      	ldr	r3, [sp, #0]
    d23c:	695b      	ldr	r3, [r3, #20]
    d23e:	2b00      	cmp	r3, #0
    d240:	bf14      	ite	ne
    d242:	2301      	movne	r3, #1
    d244:	2300      	moveq	r3, #0
    d246:	b2db      	uxtb	r3, r3
    d248:	4619      	mov	r1, r3
    d24a:	9803      	ldr	r0, [sp, #12]
    d24c:	f7ff facb 	bl	c7e6 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    d250:	2100      	movs	r1, #0
    d252:	9803      	ldr	r0, [sp, #12]
    d254:	f7ff fa18 	bl	c688 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d258:	9b00      	ldr	r3, [sp, #0]
    d25a:	69db      	ldr	r3, [r3, #28]
    d25c:	2b00      	cmp	r3, #0
    d25e:	bf14      	ite	ne
    d260:	2301      	movne	r3, #1
    d262:	2300      	moveq	r3, #0
    d264:	b2db      	uxtb	r3, r3
    d266:	4619      	mov	r1, r3
    d268:	9803      	ldr	r0, [sp, #12]
    d26a:	f7ff fa8a 	bl	c782 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    d26e:	2100      	movs	r1, #0
    d270:	9803      	ldr	r0, [sp, #12]
    d272:	f7ff f9f0 	bl	c656 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d276:	9b00      	ldr	r3, [sp, #0]
    d278:	6a1b      	ldr	r3, [r3, #32]
    d27a:	2b00      	cmp	r3, #0
    d27c:	bf14      	ite	ne
    d27e:	2301      	movne	r3, #1
    d280:	2300      	moveq	r3, #0
    d282:	b2db      	uxtb	r3, r3
    d284:	4619      	mov	r1, r3
    d286:	9803      	ldr	r0, [sp, #12]
    d288:	f7ff fa62 	bl	c750 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    d28c:	bf00      	nop
    }
}
    d28e:	bf00      	nop
    d290:	b005      	add	sp, #20
    d292:	f85d fb04 	ldr.w	pc, [sp], #4
    d296:	bf00      	nop
    d298:	0001648c 	.word	0x0001648c

0000d29c <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    d29c:	b500      	push	{lr}
    d29e:	b085      	sub	sp, #20
    d2a0:	4603      	mov	r3, r0
    d2a2:	9100      	str	r1, [sp, #0]
    d2a4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d2a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2ac:	4a19      	ldr	r2, [pc, #100]	; (d314 <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    d2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2b2:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d2b4:	9b00      	ldr	r3, [sp, #0]
    d2b6:	699b      	ldr	r3, [r3, #24]
    d2b8:	2b00      	cmp	r3, #0
    d2ba:	bf14      	ite	ne
    d2bc:	2301      	movne	r3, #1
    d2be:	2300      	moveq	r3, #0
    d2c0:	b2db      	uxtb	r3, r3
    d2c2:	4619      	mov	r1, r3
    d2c4:	9803      	ldr	r0, [sp, #12]
    d2c6:	f7fe fee6 	bl	c096 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d2ca:	9b00      	ldr	r3, [sp, #0]
    d2cc:	691b      	ldr	r3, [r3, #16]
    d2ce:	2b00      	cmp	r3, #0
    d2d0:	bf14      	ite	ne
    d2d2:	2301      	movne	r3, #1
    d2d4:	2300      	moveq	r3, #0
    d2d6:	b2db      	uxtb	r3, r3
    d2d8:	4619      	mov	r1, r3
    d2da:	9803      	ldr	r0, [sp, #12]
    d2dc:	f7ff f973 	bl	c5c6 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d2e0:	9b00      	ldr	r3, [sp, #0]
    d2e2:	695b      	ldr	r3, [r3, #20]
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	bf14      	ite	ne
    d2e8:	2301      	movne	r3, #1
    d2ea:	2300      	moveq	r3, #0
    d2ec:	b2db      	uxtb	r3, r3
    d2ee:	4619      	mov	r1, r3
    d2f0:	9803      	ldr	r0, [sp, #12]
    d2f2:	f7ff f980 	bl	c5f6 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d2f6:	9b00      	ldr	r3, [sp, #0]
    d2f8:	69db      	ldr	r3, [r3, #28]
    d2fa:	2b00      	cmp	r3, #0
    d2fc:	bf14      	ite	ne
    d2fe:	2301      	movne	r3, #1
    d300:	2300      	moveq	r3, #0
    d302:	b2db      	uxtb	r3, r3
    d304:	4619      	mov	r1, r3
    d306:	9803      	ldr	r0, [sp, #12]
    d308:	f7ff f945 	bl	c596 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    d30c:	bf00      	nop
    d30e:	b005      	add	sp, #20
    d310:	f85d fb04 	ldr.w	pc, [sp], #4
    d314:	0001648c 	.word	0x0001648c

0000d318 <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    d318:	b500      	push	{lr}
    d31a:	b087      	sub	sp, #28
    d31c:	4603      	mov	r3, r0
    d31e:	9100      	str	r1, [sp, #0]
    d320:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d324:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d328:	4a42      	ldr	r2, [pc, #264]	; (d434 <Ftm_Pwm_Ip_UpdateSync+0x11c>)
    d32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d32e:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    d330:	2300      	movs	r3, #0
    d332:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    d334:	2300      	movs	r3, #0
    d336:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(SyncCfg != NULL_PTR);
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    d33a:	9b00      	ldr	r3, [sp, #0]
    d33c:	791b      	ldrb	r3, [r3, #4]
    d33e:	2b00      	cmp	r3, #0
    d340:	d107      	bne.n	d352 <Ftm_Pwm_Ip_UpdateSync+0x3a>
    d342:	9b00      	ldr	r3, [sp, #0]
    d344:	795b      	ldrb	r3, [r3, #5]
    d346:	2b00      	cmp	r3, #0
    d348:	d103      	bne.n	d352 <Ftm_Pwm_Ip_UpdateSync+0x3a>
    d34a:	9b00      	ldr	r3, [sp, #0]
    d34c:	799b      	ldrb	r3, [r3, #6]
    d34e:	2b00      	cmp	r3, #0
    d350:	d001      	beq.n	d356 <Ftm_Pwm_Ip_UpdateSync+0x3e>
    d352:	2301      	movs	r3, #1
    d354:	e000      	b.n	d358 <Ftm_Pwm_Ip_UpdateSync+0x40>
    d356:	2300      	movs	r3, #0
    d358:	f88d 300f 	strb.w	r3, [sp, #15]
    d35c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d360:	f003 0301 	and.w	r3, r3, #1
    d364:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    d368:	9b00      	ldr	r3, [sp, #0]
    d36a:	681b      	ldr	r3, [r3, #0]
    d36c:	2b00      	cmp	r3, #0
    d36e:	d105      	bne.n	d37c <Ftm_Pwm_Ip_UpdateSync+0x64>
    d370:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d374:	2b00      	cmp	r3, #0
    d376:	d001      	beq.n	d37c <Ftm_Pwm_Ip_UpdateSync+0x64>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    d378:	2301      	movs	r3, #1
    d37a:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    d37c:	9b00      	ldr	r3, [sp, #0]
    d37e:	6a1b      	ldr	r3, [r3, #32]
    d380:	2b02      	cmp	r3, #2
    d382:	d101      	bne.n	d388 <Ftm_Pwm_Ip_UpdateSync+0x70>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    d384:	2301      	movs	r3, #1
    d386:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    d388:	9b05      	ldr	r3, [sp, #20]
    d38a:	2b00      	cmp	r3, #0
    d38c:	d14c      	bne.n	d428 <Ftm_Pwm_Ip_UpdateSync+0x110>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    d38e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d392:	9900      	ldr	r1, [sp, #0]
    d394:	4618      	mov	r0, r3
    d396:	f7ff fecf 	bl	d138 <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    d39a:	2101      	movs	r1, #1
    d39c:	9804      	ldr	r0, [sp, #16]
    d39e:	f7ff f942 	bl	c626 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    d3a2:	9b00      	ldr	r3, [sp, #0]
    d3a4:	791b      	ldrb	r3, [r3, #4]
    d3a6:	461a      	mov	r2, r3
    d3a8:	2100      	movs	r1, #0
    d3aa:	9804      	ldr	r0, [sp, #16]
    d3ac:	f7fe fe89 	bl	c0c2 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    d3b0:	9b00      	ldr	r3, [sp, #0]
    d3b2:	795b      	ldrb	r3, [r3, #5]
    d3b4:	461a      	mov	r2, r3
    d3b6:	2101      	movs	r1, #1
    d3b8:	9804      	ldr	r0, [sp, #16]
    d3ba:	f7fe fe82 	bl	c0c2 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    d3be:	9b00      	ldr	r3, [sp, #0]
    d3c0:	799b      	ldrb	r3, [r3, #6]
    d3c2:	461a      	mov	r2, r3
    d3c4:	2102      	movs	r1, #2
    d3c6:	9804      	ldr	r0, [sp, #16]
    d3c8:	f7fe fe7b 	bl	c0c2 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    d3cc:	9b00      	ldr	r3, [sp, #0]
    d3ce:	79db      	ldrb	r3, [r3, #7]
    d3d0:	4619      	mov	r1, r3
    d3d2:	9804      	ldr	r0, [sp, #16]
    d3d4:	f7ff f8c7 	bl	c566 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    d3d8:	9b00      	ldr	r3, [sp, #0]
    d3da:	7a1b      	ldrb	r3, [r3, #8]
    d3dc:	4619      	mov	r1, r3
    d3de:	9804      	ldr	r0, [sp, #16]
    d3e0:	f7fe fe43 	bl	c06a <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    d3e4:	9b00      	ldr	r3, [sp, #0]
    d3e6:	7a5b      	ldrb	r3, [r3, #9]
    d3e8:	4619      	mov	r1, r3
    d3ea:	9804      	ldr	r0, [sp, #16]
    d3ec:	f7fe fe27 	bl	c03e <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    d3f0:	9b00      	ldr	r3, [sp, #0]
    d3f2:	7a9b      	ldrb	r3, [r3, #10]
    d3f4:	2b00      	cmp	r3, #0
    d3f6:	d005      	beq.n	d404 <Ftm_Pwm_Ip_UpdateSync+0xec>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    d3f8:	9b00      	ldr	r3, [sp, #0]
    d3fa:	899b      	ldrh	r3, [r3, #12]
    d3fc:	4619      	mov	r1, r3
    d3fe:	9804      	ldr	r0, [sp, #16]
    d400:	f7ff fac6 	bl	c990 <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    d404:	9b00      	ldr	r3, [sp, #0]
    d406:	7a9b      	ldrb	r3, [r3, #10]
    d408:	4619      	mov	r1, r3
    d40a:	9804      	ldr	r0, [sp, #16]
    d40c:	f7ff faa3 	bl	c956 <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    d410:	9b00      	ldr	r3, [sp, #0]
    d412:	7b9b      	ldrb	r3, [r3, #14]
    d414:	4619      	mov	r1, r3
    d416:	9804      	ldr	r0, [sp, #16]
    d418:	f7ff f86b 	bl	c4f2 <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    d41c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d420:	9900      	ldr	r1, [sp, #0]
    d422:	4618      	mov	r0, r3
    d424:	f7ff ff3a 	bl	d29c <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    d428:	9b05      	ldr	r3, [sp, #20]
}
    d42a:	4618      	mov	r0, r3
    d42c:	b007      	add	sp, #28
    d42e:	f85d fb04 	ldr.w	pc, [sp], #4
    d432:	bf00      	nop
    d434:	0001648c 	.word	0x0001648c

0000d438 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d438:	b500      	push	{lr}
    d43a:	b085      	sub	sp, #20
    d43c:	4603      	mov	r3, r0
    d43e:	9100      	str	r1, [sp, #0]
    d440:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d444:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d448:	4a1f      	ldr	r2, [pc, #124]	; (d4c8 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    d44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d44e:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    d450:	9803      	ldr	r0, [sp, #12]
    d452:	f7ff fbab 	bl	cbac <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    d456:	2100      	movs	r1, #0
    d458:	9803      	ldr	r0, [sp, #12]
    d45a:	f7fe fc01 	bl	bc60 <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    d45e:	9803      	ldr	r0, [sp, #12]
    d460:	f7fe fc4a 	bl	bcf8 <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    d464:	9b00      	ldr	r3, [sp, #0]
    d466:	68db      	ldr	r3, [r3, #12]
    d468:	2b00      	cmp	r3, #0
    d46a:	bf14      	ite	ne
    d46c:	2301      	movne	r3, #1
    d46e:	2300      	moveq	r3, #0
    d470:	b2db      	uxtb	r3, r3
    d472:	4619      	mov	r1, r3
    d474:	9803      	ldr	r0, [sp, #12]
    d476:	f7fe fc04 	bl	bc82 <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    d47a:	2100      	movs	r1, #0
    d47c:	9803      	ldr	r0, [sp, #12]
    d47e:	f7fe fdb2 	bl	bfe6 <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    d482:	9b00      	ldr	r3, [sp, #0]
    d484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d486:	4619      	mov	r1, r3
    d488:	9803      	ldr	r0, [sp, #12]
    d48a:	f7ff f847 	bl	c51c <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    d48e:	9b00      	ldr	r3, [sp, #0]
    d490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    d492:	b2db      	uxtb	r3, r3
    d494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d498:	b2db      	uxtb	r3, r3
    d49a:	4619      	mov	r1, r3
    d49c:	9803      	ldr	r0, [sp, #12]
    d49e:	f7fe ff87 	bl	c3b0 <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    d4a2:	9b00      	ldr	r3, [sp, #0]
    d4a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    d4a6:	099b      	lsrs	r3, r3, #6
    d4a8:	b29b      	uxth	r3, r3
    d4aa:	b2db      	uxtb	r3, r3
    d4ac:	4619      	mov	r1, r3
    d4ae:	9803      	ldr	r0, [sp, #12]
    d4b0:	f7fe ffa2 	bl	c3f8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    d4b4:	9b00      	ldr	r3, [sp, #0]
    d4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d4b8:	4619      	mov	r1, r3
    d4ba:	9803      	ldr	r0, [sp, #12]
    d4bc:	f7fe ff8b 	bl	c3d6 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    d4c0:	bf00      	nop
    d4c2:	b005      	add	sp, #20
    d4c4:	f85d fb04 	ldr.w	pc, [sp], #4
    d4c8:	0001648c 	.word	0x0001648c

0000d4cc <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d4cc:	b500      	push	{lr}
    d4ce:	b085      	sub	sp, #20
    d4d0:	4603      	mov	r3, r0
    d4d2:	9100      	str	r1, [sp, #0]
    d4d4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d4d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d4dc:	4a39      	ldr	r2, [pc, #228]	; (d5c4 <Ftm_Pwm_Ip_InitInstance+0xf8>)
    d4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4e2:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    d4e4:	4b38      	ldr	r3, [pc, #224]	; (d5c8 <Ftm_Pwm_Ip_InitInstance+0xfc>)
    d4e6:	9302      	str	r3, [sp, #8]
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    d4e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d4ec:	4619      	mov	r1, r3
    d4ee:	9802      	ldr	r0, [sp, #8]
    d4f0:	f7ff fd20 	bl	cf34 <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    d4f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d4f8:	9900      	ldr	r1, [sp, #0]
    d4fa:	4618      	mov	r0, r3
    d4fc:	f7ff ff9c 	bl	d438 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    d500:	9b00      	ldr	r3, [sp, #0]
    d502:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    d504:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d508:	4611      	mov	r1, r2
    d50a:	4618      	mov	r0, r3
    d50c:	f7ff ff04 	bl	d318 <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    d510:	2100      	movs	r1, #0
    d512:	9803      	ldr	r0, [sp, #12]
    d514:	f7fe fd56 	bl	bfc4 <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    d518:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d51c:	9a00      	ldr	r2, [sp, #0]
    d51e:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    d520:	4a2a      	ldr	r2, [pc, #168]	; (d5cc <Ftm_Pwm_Ip_InitInstance+0x100>)
    d522:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    d526:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d52a:	9a00      	ldr	r2, [sp, #0]
    d52c:	6812      	ldr	r2, [r2, #0]
    d52e:	4928      	ldr	r1, [pc, #160]	; (d5d0 <Ftm_Pwm_Ip_InitInstance+0x104>)
    d530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    d534:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d538:	9a00      	ldr	r2, [sp, #0]
    d53a:	6852      	ldr	r2, [r2, #4]
    d53c:	4925      	ldr	r1, [pc, #148]	; (d5d4 <Ftm_Pwm_Ip_InitInstance+0x108>)
    d53e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    d542:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d546:	9a00      	ldr	r2, [sp, #0]
    d548:	6892      	ldr	r2, [r2, #8]
    d54a:	4923      	ldr	r1, [pc, #140]	; (d5d8 <Ftm_Pwm_Ip_InitInstance+0x10c>)
    d54c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    d550:	9b00      	ldr	r3, [sp, #0]
    d552:	7c1b      	ldrb	r3, [r3, #16]
    d554:	2b00      	cmp	r3, #0
    d556:	d00e      	beq.n	d576 <Ftm_Pwm_Ip_InitInstance+0xaa>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    d558:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d55c:	9a00      	ldr	r2, [sp, #0]
    d55e:	6952      	ldr	r2, [r2, #20]
    d560:	491e      	ldr	r1, [pc, #120]	; (d5dc <Ftm_Pwm_Ip_InitInstance+0x110>)
    d562:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    d566:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d56a:	9a00      	ldr	r2, [sp, #0]
    d56c:	6992      	ldr	r2, [r2, #24]
    d56e:	491b      	ldr	r1, [pc, #108]	; (d5dc <Ftm_Pwm_Ip_InitInstance+0x110>)
    d570:	00db      	lsls	r3, r3, #3
    d572:	440b      	add	r3, r1
    d574:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    d576:	9b00      	ldr	r3, [sp, #0]
    d578:	68db      	ldr	r3, [r3, #12]
    d57a:	2b01      	cmp	r3, #1
    d57c:	d108      	bne.n	d590 <Ftm_Pwm_Ip_InitInstance+0xc4>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    d57e:	9b00      	ldr	r3, [sp, #0]
    d580:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d582:	085b      	lsrs	r3, r3, #1
    d584:	b29b      	uxth	r3, r3
    d586:	4619      	mov	r1, r3
    d588:	9803      	ldr	r0, [sp, #12]
    d58a:	f7fe fbe3 	bl	bd54 <Ftm_Pwm_Ip_SetMod>
    d58e:	e007      	b.n	d5a0 <Ftm_Pwm_Ip_InitInstance+0xd4>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    d590:	9b00      	ldr	r3, [sp, #0]
    d592:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d594:	3b01      	subs	r3, #1
    d596:	b29b      	uxth	r3, r3
    d598:	4619      	mov	r1, r3
    d59a:	9803      	ldr	r0, [sp, #12]
    d59c:	f7fe fbda 	bl	bd54 <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    d5a0:	9b00      	ldr	r3, [sp, #0]
    d5a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    d5a6:	4619      	mov	r1, r3
    d5a8:	9803      	ldr	r0, [sp, #12]
    d5aa:	f7fe ff39 	bl	c420 <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    d5ae:	9b00      	ldr	r3, [sp, #0]
    d5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d5b2:	4619      	mov	r1, r3
    d5b4:	9803      	ldr	r0, [sp, #12]
    d5b6:	f7fe ffc3 	bl	c540 <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    d5ba:	bf00      	nop
    d5bc:	b005      	add	sp, #20
    d5be:	f85d fb04 	ldr.w	pc, [sp], #4
    d5c2:	bf00      	nop
    d5c4:	0001648c 	.word	0x0001648c
    d5c8:	40048000 	.word	0x40048000
    d5cc:	1fff8e14 	.word	0x1fff8e14
    d5d0:	1fff910c 	.word	0x1fff910c
    d5d4:	1fff911c 	.word	0x1fff911c
    d5d8:	1fff912c 	.word	0x1fff912c
    d5dc:	1fff8fbc 	.word	0x1fff8fbc

0000d5e0 <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d5e0:	b500      	push	{lr}
    d5e2:	b085      	sub	sp, #20
    d5e4:	4603      	mov	r3, r0
    d5e6:	9100      	str	r1, [sp, #0]
    d5e8:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d5ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d5f0:	4a1a      	ldr	r2, [pc, #104]	; (d65c <Ftm_Pwm_Ip_InitInstanceStart+0x7c>)
    d5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5f6:	9303      	str	r3, [sp, #12]
    DevAssert(NULL_PTR != UserInstCfg);
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    d5f8:	9b00      	ldr	r3, [sp, #0]
    d5fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    d5fe:	4619      	mov	r1, r3
    d600:	9803      	ldr	r0, [sp, #12]
    d602:	f7ff fc03 	bl	ce0c <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    d606:	9b00      	ldr	r3, [sp, #0]
    d608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d60a:	4619      	mov	r1, r3
    d60c:	9803      	ldr	r0, [sp, #12]
    d60e:	f7ff fc11 	bl	ce34 <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    d612:	9b00      	ldr	r3, [sp, #0]
    d614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d616:	4619      	mov	r1, r3
    d618:	9803      	ldr	r0, [sp, #12]
    d61a:	f7ff fb7a 	bl	cd12 <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    d61e:	2101      	movs	r1, #1
    d620:	9803      	ldr	r0, [sp, #12]
    d622:	f7fe fce0 	bl	bfe6 <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    d626:	2101      	movs	r1, #1
    d628:	9803      	ldr	r0, [sp, #12]
    d62a:	f7fe fcf2 	bl	c012 <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    d62e:	9b00      	ldr	r3, [sp, #0]
    d630:	685b      	ldr	r3, [r3, #4]
    d632:	4619      	mov	r1, r3
    d634:	9803      	ldr	r0, [sp, #12]
    d636:	f7fe fb03 	bl	bc40 <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    d63a:	9b00      	ldr	r3, [sp, #0]
    d63c:	681b      	ldr	r3, [r3, #0]
    d63e:	4619      	mov	r1, r3
    d640:	9803      	ldr	r0, [sp, #12]
    d642:	f7fe fb0d 	bl	bc60 <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    d646:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d64a:	4a05      	ldr	r2, [pc, #20]	; (d660 <Ftm_Pwm_Ip_InitInstanceStart+0x80>)
    d64c:	2101      	movs	r1, #1
    d64e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    d652:	bf00      	nop
    d654:	b005      	add	sp, #20
    d656:	f85d fb04 	ldr.w	pc, [sp], #4
    d65a:	bf00      	nop
    d65c:	0001648c 	.word	0x0001648c
    d660:	1fff8fdc 	.word	0x1fff8fdc

0000d664 <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d664:	b500      	push	{lr}
    d666:	b085      	sub	sp, #20
    d668:	4603      	mov	r3, r0
    d66a:	9100      	str	r1, [sp, #0]
    d66c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d670:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d674:	4a37      	ldr	r2, [pc, #220]	; (d754 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    d676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d67a:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    d67c:	2300      	movs	r3, #0
    d67e:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    d682:	2300      	movs	r3, #0
    d684:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    d688:	9b00      	ldr	r3, [sp, #0]
    d68a:	781b      	ldrb	r3, [r3, #0]
    d68c:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    d690:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d694:	085b      	lsrs	r3, r3, #1
    d696:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    d69a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d69e:	2201      	movs	r2, #1
    d6a0:	4619      	mov	r1, r3
    d6a2:	9803      	ldr	r0, [sp, #12]
    d6a4:	f7fe fe36 	bl	c314 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    d6a8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d6ac:	2201      	movs	r2, #1
    d6ae:	4619      	mov	r1, r3
    d6b0:	9803      	ldr	r0, [sp, #12]
    d6b2:	f7ff fb63 	bl	cd7c <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d6b6:	9b00      	ldr	r3, [sp, #0]
    d6b8:	685b      	ldr	r3, [r3, #4]
    d6ba:	2b22      	cmp	r3, #34	; 0x22
    d6bc:	d003      	beq.n	d6c6 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    d6be:	9b00      	ldr	r3, [sp, #0]
    d6c0:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d6c2:	2b21      	cmp	r3, #33	; 0x21
    d6c4:	d113      	bne.n	d6ee <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    d6c6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d6ca:	005b      	lsls	r3, r3, #1
    d6cc:	b2db      	uxtb	r3, r3
    d6ce:	3301      	adds	r3, #1
    d6d0:	b2d9      	uxtb	r1, r3
    d6d2:	9b00      	ldr	r3, [sp, #0]
    d6d4:	685b      	ldr	r3, [r3, #4]
    d6d6:	461a      	mov	r2, r3
    d6d8:	9803      	ldr	r0, [sp, #12]
    d6da:	f7fe fb76 	bl	bdca <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    d6de:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d6e2:	2201      	movs	r2, #1
    d6e4:	4619      	mov	r1, r3
    d6e6:	9803      	ldr	r0, [sp, #12]
    d6e8:	f7fe fd89 	bl	c1fe <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    d6ec:	e021      	b.n	d732 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d6ee:	9b00      	ldr	r3, [sp, #0]
    d6f0:	685b      	ldr	r3, [r3, #4]
    d6f2:	2b62      	cmp	r3, #98	; 0x62
    d6f4:	d003      	beq.n	d6fe <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    d6f6:	9b00      	ldr	r3, [sp, #0]
    d6f8:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d6fa:	2b61      	cmp	r3, #97	; 0x61
    d6fc:	d119      	bne.n	d732 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    d6fe:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d702:	005b      	lsls	r3, r3, #1
    d704:	b2db      	uxtb	r3, r3
    d706:	3301      	adds	r3, #1
    d708:	b2d9      	uxtb	r1, r3
    d70a:	9b00      	ldr	r3, [sp, #0]
    d70c:	685b      	ldr	r3, [r3, #4]
    d70e:	461a      	mov	r2, r3
    d710:	9803      	ldr	r0, [sp, #12]
    d712:	f7fe fb5a 	bl	bdca <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    d716:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d71a:	2201      	movs	r2, #1
    d71c:	4619      	mov	r1, r3
    d71e:	9803      	ldr	r0, [sp, #12]
    d720:	f7fe fd6d 	bl	c1fe <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    d724:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d728:	2201      	movs	r2, #1
    d72a:	4619      	mov	r1, r3
    d72c:	9803      	ldr	r0, [sp, #12]
    d72e:	f7fe fe18 	bl	c362 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    d732:	9b00      	ldr	r3, [sp, #0]
    d734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d736:	2b00      	cmp	r3, #0
    d738:	d007      	beq.n	d74a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    d73a:	9b00      	ldr	r3, [sp, #0]
    d73c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d73e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d742:	4611      	mov	r1, r2
    d744:	4618      	mov	r0, r3
    d746:	f7ff fc47 	bl	cfd8 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    d74a:	bf00      	nop
    d74c:	b005      	add	sp, #20
    d74e:	f85d fb04 	ldr.w	pc, [sp], #4
    d752:	bf00      	nop
    d754:	0001648c 	.word	0x0001648c

0000d758 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d758:	b500      	push	{lr}
    d75a:	b085      	sub	sp, #20
    d75c:	4603      	mov	r3, r0
    d75e:	9100      	str	r1, [sp, #0]
    d760:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d764:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d768:	4a15      	ldr	r2, [pc, #84]	; (d7c0 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    d76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d76e:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    d770:	9b00      	ldr	r3, [sp, #0]
    d772:	7819      	ldrb	r1, [r3, #0]
    d774:	9b00      	ldr	r3, [sp, #0]
    d776:	7ddb      	ldrb	r3, [r3, #23]
    d778:	461a      	mov	r2, r3
    d77a:	9803      	ldr	r0, [sp, #12]
    d77c:	f7ff fa8b 	bl	cc96 <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    d780:	9b00      	ldr	r3, [sp, #0]
    d782:	7819      	ldrb	r1, [r3, #0]
    d784:	9b00      	ldr	r3, [sp, #0]
    d786:	7e1b      	ldrb	r3, [r3, #24]
    d788:	461a      	mov	r2, r3
    d78a:	9803      	ldr	r0, [sp, #12]
    d78c:	f7ff f8ba 	bl	c904 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    d790:	9b00      	ldr	r3, [sp, #0]
    d792:	7819      	ldrb	r1, [r3, #0]
    d794:	9b00      	ldr	r3, [sp, #0]
    d796:	7d5b      	ldrb	r3, [r3, #21]
    d798:	461a      	mov	r2, r3
    d79a:	9803      	ldr	r0, [sp, #12]
    d79c:	f7ff f87c 	bl	c898 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    d7a0:	9b00      	ldr	r3, [sp, #0]
    d7a2:	7819      	ldrb	r1, [r3, #0]
    d7a4:	9b00      	ldr	r3, [sp, #0]
    d7a6:	7d9b      	ldrb	r3, [r3, #22]
    d7a8:	461a      	mov	r2, r3
    d7aa:	9803      	ldr	r0, [sp, #12]
    d7ac:	f7ff f834 	bl	c818 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    d7b0:	2101      	movs	r1, #1
    d7b2:	9803      	ldr	r0, [sp, #12]
    d7b4:	f7fe fcaa 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    d7b8:	bf00      	nop
    d7ba:	b005      	add	sp, #20
    d7bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d7c0:	0001648c 	.word	0x0001648c

0000d7c4 <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d7c4:	b500      	push	{lr}
    d7c6:	b085      	sub	sp, #20
    d7c8:	4603      	mov	r3, r0
    d7ca:	9100      	str	r1, [sp, #0]
    d7cc:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d7d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d7d4:	4a48      	ldr	r2, [pc, #288]	; (d8f8 <Ftm_Pwm_Ip_InitChannel+0x134>)
    d7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7da:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    d7dc:	2300      	movs	r3, #0
    d7de:	f88d 300b 	strb.w	r3, [sp, #11]
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(NULL_PTR != UserChCfg);
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    d7e2:	9b00      	ldr	r3, [sp, #0]
    d7e4:	781b      	ldrb	r3, [r3, #0]
    d7e6:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    d7ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d7ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7f2:	9900      	ldr	r1, [sp, #0]
    d7f4:	8b48      	ldrh	r0, [r1, #26]
    d7f6:	4941      	ldr	r1, [pc, #260]	; (d8fc <Ftm_Pwm_Ip_InitChannel+0x138>)
    d7f8:	00d2      	lsls	r2, r2, #3
    d7fa:	4413      	add	r3, r2
    d7fc:	4602      	mov	r2, r0
    d7fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    d802:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d806:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d80a:	9a00      	ldr	r2, [sp, #0]
    d80c:	69d2      	ldr	r2, [r2, #28]
    d80e:	483c      	ldr	r0, [pc, #240]	; (d900 <Ftm_Pwm_Ip_InitChannel+0x13c>)
    d810:	00c9      	lsls	r1, r1, #3
    d812:	440b      	add	r3, r1
    d814:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    d818:	9b00      	ldr	r3, [sp, #0]
    d81a:	6a1a      	ldr	r2, [r3, #32]
    d81c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d820:	4619      	mov	r1, r3
    d822:	9803      	ldr	r0, [sp, #12]
    d824:	f7fe fe2e 	bl	c484 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    d828:	9b00      	ldr	r3, [sp, #0]
    d82a:	69da      	ldr	r2, [r3, #28]
    d82c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d830:	4619      	mov	r1, r3
    d832:	9803      	ldr	r0, [sp, #12]
    d834:	f7fe fc80 	bl	c138 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    d838:	9b00      	ldr	r3, [sp, #0]
    d83a:	685a      	ldr	r2, [r3, #4]
    d83c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d840:	4619      	mov	r1, r3
    d842:	9803      	ldr	r0, [sp, #12]
    d844:	f7fe fac1 	bl	bdca <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    d848:	9b00      	ldr	r3, [sp, #0]
    d84a:	685a      	ldr	r2, [r3, #4]
    d84c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d850:	4619      	mov	r1, r3
    d852:	9803      	ldr	r0, [sp, #12]
    d854:	f7fe faf0 	bl	be38 <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    d858:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d85c:	9900      	ldr	r1, [sp, #0]
    d85e:	4618      	mov	r0, r3
    d860:	f7ff ff00 	bl	d664 <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    d864:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d868:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d86c:	4923      	ldr	r1, [pc, #140]	; (d8fc <Ftm_Pwm_Ip_InitChannel+0x138>)
    d86e:	00d2      	lsls	r2, r2, #3
    d870:	4413      	add	r3, r2
    d872:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    d876:	f89d 100b 	ldrb.w	r1, [sp, #11]
    d87a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d87e:	2301      	movs	r3, #1
    d880:	f000 f9c0 	bl	dc04 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    d884:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d888:	9900      	ldr	r1, [sp, #0]
    d88a:	4618      	mov	r0, r3
    d88c:	f7ff ff64 	bl	d758 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    d890:	9b00      	ldr	r3, [sp, #0]
    d892:	7d1b      	ldrb	r3, [r3, #20]
    d894:	2b00      	cmp	r3, #0
    d896:	d005      	beq.n	d8a4 <Ftm_Pwm_Ip_InitChannel+0xe0>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    d898:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d89c:	4619      	mov	r1, r3
    d89e:	9803      	ldr	r0, [sp, #12]
    d8a0:	f7fe fa35 	bl	bd0e <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    d8a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d8a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8ac:	4915      	ldr	r1, [pc, #84]	; (d904 <Ftm_Pwm_Ip_InitChannel+0x140>)
    d8ae:	00d2      	lsls	r2, r2, #3
    d8b0:	4413      	add	r3, r2
    d8b2:	2201      	movs	r2, #1
    d8b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    d8b8:	9b00      	ldr	r3, [sp, #0]
    d8ba:	7a1b      	ldrb	r3, [r3, #8]
    d8bc:	2b00      	cmp	r3, #0
    d8be:	d016      	beq.n	d8ee <Ftm_Pwm_Ip_InitChannel+0x12a>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    d8c0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d8c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8c8:	9a00      	ldr	r2, [sp, #0]
    d8ca:	68d2      	ldr	r2, [r2, #12]
    d8cc:	480e      	ldr	r0, [pc, #56]	; (d908 <Ftm_Pwm_Ip_InitChannel+0x144>)
    d8ce:	00c9      	lsls	r1, r1, #3
    d8d0:	440b      	add	r3, r1
    d8d2:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    d8d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d8da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8de:	9a00      	ldr	r2, [sp, #0]
    d8e0:	6912      	ldr	r2, [r2, #16]
    d8e2:	4809      	ldr	r0, [pc, #36]	; (d908 <Ftm_Pwm_Ip_InitChannel+0x144>)
    d8e4:	00c9      	lsls	r1, r1, #3
    d8e6:	440b      	add	r3, r1
    d8e8:	00db      	lsls	r3, r3, #3
    d8ea:	4403      	add	r3, r0
    d8ec:	605a      	str	r2, [r3, #4]
    }

}
    d8ee:	bf00      	nop
    d8f0:	b005      	add	sp, #20
    d8f2:	f85d fb04 	ldr.w	pc, [sp], #4
    d8f6:	bf00      	nop
    d8f8:	0001648c 	.word	0x0001648c
    d8fc:	1fff8e1c 	.word	0x1fff8e1c
    d900:	1fff908c 	.word	0x1fff908c
    d904:	1fff8fec 	.word	0x1fff8fec
    d908:	1fff8ebc 	.word	0x1fff8ebc

0000d90c <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    d90c:	b500      	push	{lr}
    d90e:	b085      	sub	sp, #20
    d910:	4603      	mov	r3, r0
    d912:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d916:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d91a:	4a17      	ldr	r2, [pc, #92]	; (d978 <Ftm_Pwm_Ip_DeInitInstance+0x6c>)
    d91c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d920:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    d922:	2100      	movs	r1, #0
    d924:	9803      	ldr	r0, [sp, #12]
    d926:	f7fe f99b 	bl	bc60 <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    d92a:	2100      	movs	r1, #0
    d92c:	9803      	ldr	r0, [sp, #12]
    d92e:	f7fe fd63 	bl	c3f8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    d932:	2101      	movs	r1, #1
    d934:	9803      	ldr	r0, [sp, #12]
    d936:	f7fe fd4e 	bl	c3d6 <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    d93a:	2100      	movs	r1, #0
    d93c:	9803      	ldr	r0, [sp, #12]
    d93e:	f7fe fd37 	bl	c3b0 <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    d942:	2100      	movs	r1, #0
    d944:	9803      	ldr	r0, [sp, #12]
    d946:	f7fe fde9 	bl	c51c <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    d94a:	2100      	movs	r1, #0
    d94c:	9803      	ldr	r0, [sp, #12]
    d94e:	f7fe f9bc 	bl	bcca <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    d952:	2100      	movs	r1, #0
    d954:	9803      	ldr	r0, [sp, #12]
    d956:	f7fe f9fd 	bl	bd54 <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    d95a:	2100      	movs	r1, #0
    d95c:	9803      	ldr	r0, [sp, #12]
    d95e:	f7fe f9e8 	bl	bd32 <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    d962:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d966:	4a05      	ldr	r2, [pc, #20]	; (d97c <Ftm_Pwm_Ip_DeInitInstance+0x70>)
    d968:	2100      	movs	r1, #0
    d96a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    d96e:	bf00      	nop
    d970:	b005      	add	sp, #20
    d972:	f85d fb04 	ldr.w	pc, [sp], #4
    d976:	bf00      	nop
    d978:	0001648c 	.word	0x0001648c
    d97c:	1fff8fdc 	.word	0x1fff8fdc

0000d980 <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    d980:	b500      	push	{lr}
    d982:	b085      	sub	sp, #20
    d984:	4603      	mov	r3, r0
    d986:	460a      	mov	r2, r1
    d988:	f88d 3007 	strb.w	r3, [sp, #7]
    d98c:	4613      	mov	r3, r2
    d98e:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d992:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d996:	4a29      	ldr	r2, [pc, #164]	; (da3c <Ftm_Pwm_Ip_DeInitChannel+0xbc>)
    d998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d99c:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    d99e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9a2:	085b      	lsrs	r3, r3, #1
    d9a4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    d9a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d9ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9b0:	4611      	mov	r1, r2
    d9b2:	4618      	mov	r0, r3
    d9b4:	f7ff fb9e 	bl	d0f4 <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    d9b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d9bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9c0:	491f      	ldr	r1, [pc, #124]	; (da40 <Ftm_Pwm_Ip_DeInitChannel+0xc0>)
    d9c2:	00d2      	lsls	r2, r2, #3
    d9c4:	4413      	add	r3, r2
    d9c6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    d9ca:	f89d 1006 	ldrb.w	r1, [sp, #6]
    d9ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d9d2:	2301      	movs	r3, #1
    d9d4:	f000 fa4c 	bl	de70 <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    d9d8:	2100      	movs	r1, #0
    d9da:	9803      	ldr	r0, [sp, #12]
    d9dc:	f7fe fb96 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    d9e0:	2101      	movs	r1, #1
    d9e2:	9803      	ldr	r0, [sp, #12]
    d9e4:	f7fe fb57 	bl	c096 <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    d9e8:	2101      	movs	r1, #1
    d9ea:	9803      	ldr	r0, [sp, #12]
    d9ec:	f7fe fe65 	bl	c6ba <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    d9f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9f4:	2200      	movs	r2, #0
    d9f6:	4619      	mov	r1, r3
    d9f8:	9803      	ldr	r0, [sp, #12]
    d9fa:	f7fe fbbf 	bl	c17c <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    d9fe:	2101      	movs	r1, #1
    da00:	9803      	ldr	r0, [sp, #12]
    da02:	f7fe fb83 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    da06:	f89d 2007 	ldrb.w	r2, [sp, #7]
    da0a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    da0e:	005b      	lsls	r3, r3, #1
    da10:	490c      	ldr	r1, [pc, #48]	; (da44 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    da12:	00d2      	lsls	r2, r2, #3
    da14:	440a      	add	r2, r1
    da16:	4413      	add	r3, r2
    da18:	2200      	movs	r2, #0
    da1a:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    da1c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    da20:	f89d 300b 	ldrb.w	r3, [sp, #11]
    da24:	005b      	lsls	r3, r3, #1
    da26:	3301      	adds	r3, #1
    da28:	4906      	ldr	r1, [pc, #24]	; (da44 <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    da2a:	00d2      	lsls	r2, r2, #3
    da2c:	440a      	add	r2, r1
    da2e:	4413      	add	r3, r2
    da30:	2200      	movs	r2, #0
    da32:	701a      	strb	r2, [r3, #0]

}
    da34:	bf00      	nop
    da36:	b005      	add	sp, #20
    da38:	f85d fb04 	ldr.w	pc, [sp], #4
    da3c:	0001648c 	.word	0x0001648c
    da40:	1fff908c 	.word	0x1fff908c
    da44:	1fff906c 	.word	0x1fff906c

0000da48 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    da48:	b500      	push	{lr}
    da4a:	b085      	sub	sp, #20
    da4c:	4603      	mov	r3, r0
    da4e:	9100      	str	r1, [sp, #0]
    da50:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    da54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da58:	4a15      	ldr	r2, [pc, #84]	; (dab0 <Ftm_Pwm_Ip_InitChFault+0x68>)
    da5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da5e:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    da60:	9b00      	ldr	r3, [sp, #0]
    da62:	7819      	ldrb	r1, [r3, #0]
    da64:	9b00      	ldr	r3, [sp, #0]
    da66:	685b      	ldr	r3, [r3, #4]
    da68:	461a      	mov	r2, r3
    da6a:	9803      	ldr	r0, [sp, #12]
    da6c:	f7ff f9f6 	bl	ce5c <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    da70:	9b00      	ldr	r3, [sp, #0]
    da72:	7819      	ldrb	r1, [r3, #0]
    da74:	9b00      	ldr	r3, [sp, #0]
    da76:	7a1b      	ldrb	r3, [r3, #8]
    da78:	461a      	mov	r2, r3
    da7a:	9803      	ldr	r0, [sp, #12]
    da7c:	f7ff fa35 	bl	ceea <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    da80:	9b00      	ldr	r3, [sp, #0]
    da82:	781b      	ldrb	r3, [r3, #0]
    da84:	2201      	movs	r2, #1
    da86:	4619      	mov	r1, r3
    da88:	9803      	ldr	r0, [sp, #12]
    da8a:	f7ff fa0a 	bl	cea2 <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    da8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da92:	9a00      	ldr	r2, [sp, #0]
    da94:	7812      	ldrb	r2, [r2, #0]
    da96:	4610      	mov	r0, r2
    da98:	9a00      	ldr	r2, [sp, #0]
    da9a:	68d2      	ldr	r2, [r2, #12]
    da9c:	4905      	ldr	r1, [pc, #20]	; (dab4 <Ftm_Pwm_Ip_InitChFault+0x6c>)
    da9e:	009b      	lsls	r3, r3, #2
    daa0:	4403      	add	r3, r0
    daa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    daa6:	bf00      	nop
    daa8:	b005      	add	sp, #20
    daaa:	f85d fb04 	ldr.w	pc, [sp], #4
    daae:	bf00      	nop
    dab0:	0001648c 	.word	0x0001648c
    dab4:	1fff8e7c 	.word	0x1fff8e7c

0000dab8 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    dab8:	b500      	push	{lr}
    daba:	b085      	sub	sp, #20
    dabc:	4603      	mov	r3, r0
    dabe:	9100      	str	r1, [sp, #0]
    dac0:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    dac4:	2300      	movs	r3, #0
    dac6:	f88d 300f 	strb.w	r3, [sp, #15]
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    daca:	4b29      	ldr	r3, [pc, #164]	; (db70 <Ftm_Pwm_Ip_Init+0xb8>)
    dacc:	2200      	movs	r2, #0
    dace:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    dad0:	9b00      	ldr	r3, [sp, #0]
    dad2:	681a      	ldr	r2, [r3, #0]
    dad4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dad8:	4611      	mov	r1, r2
    dada:	4618      	mov	r0, r3
    dadc:	f7ff fcf6 	bl	d4cc <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    dae0:	2300      	movs	r3, #0
    dae2:	f88d 300f 	strb.w	r3, [sp, #15]
    dae6:	e011      	b.n	db0c <Ftm_Pwm_Ip_Init+0x54>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    dae8:	9b00      	ldr	r3, [sp, #0]
    daea:	685a      	ldr	r2, [r3, #4]
    daec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    daf0:	009b      	lsls	r3, r3, #2
    daf2:	4413      	add	r3, r2
    daf4:	681a      	ldr	r2, [r3, #0]
    daf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dafa:	4611      	mov	r1, r2
    dafc:	4618      	mov	r0, r3
    dafe:	f7ff fe61 	bl	d7c4 <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    db02:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db06:	3301      	adds	r3, #1
    db08:	f88d 300f 	strb.w	r3, [sp, #15]
    db0c:	9b00      	ldr	r3, [sp, #0]
    db0e:	7a1b      	ldrb	r3, [r3, #8]
    db10:	f89d 200f 	ldrb.w	r2, [sp, #15]
    db14:	429a      	cmp	r2, r3
    db16:	d3e7      	bcc.n	dae8 <Ftm_Pwm_Ip_Init+0x30>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    db18:	9b00      	ldr	r3, [sp, #0]
    db1a:	7c1b      	ldrb	r3, [r3, #16]
    db1c:	2b00      	cmp	r3, #0
    db1e:	d01b      	beq.n	db58 <Ftm_Pwm_Ip_Init+0xa0>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    db20:	2300      	movs	r3, #0
    db22:	f88d 300f 	strb.w	r3, [sp, #15]
    db26:	e011      	b.n	db4c <Ftm_Pwm_Ip_Init+0x94>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    db28:	9b00      	ldr	r3, [sp, #0]
    db2a:	68da      	ldr	r2, [r3, #12]
    db2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db30:	009b      	lsls	r3, r3, #2
    db32:	4413      	add	r3, r2
    db34:	681a      	ldr	r2, [r3, #0]
    db36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db3a:	4611      	mov	r1, r2
    db3c:	4618      	mov	r0, r3
    db3e:	f7ff ff83 	bl	da48 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    db42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db46:	3301      	adds	r3, #1
    db48:	f88d 300f 	strb.w	r3, [sp, #15]
    db4c:	9b00      	ldr	r3, [sp, #0]
    db4e:	7c1b      	ldrb	r3, [r3, #16]
    db50:	f89d 200f 	ldrb.w	r2, [sp, #15]
    db54:	429a      	cmp	r2, r3
    db56:	d3e7      	bcc.n	db28 <Ftm_Pwm_Ip_Init+0x70>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    db58:	9b00      	ldr	r3, [sp, #0]
    db5a:	681a      	ldr	r2, [r3, #0]
    db5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db60:	4611      	mov	r1, r2
    db62:	4618      	mov	r0, r3
    db64:	f7ff fd3c 	bl	d5e0 <Ftm_Pwm_Ip_InitInstanceStart>
}
    db68:	bf00      	nop
    db6a:	b005      	add	sp, #20
    db6c:	f85d fb04 	ldr.w	pc, [sp], #4
    db70:	1fff8e10 	.word	0x1fff8e10

0000db74 <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    db74:	b500      	push	{lr}
    db76:	b085      	sub	sp, #20
    db78:	4603      	mov	r3, r0
    db7a:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    db7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db82:	4a1e      	ldr	r2, [pc, #120]	; (dbfc <Ftm_Pwm_Ip_DeInit+0x88>)
    db84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db88:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    db8a:	2300      	movs	r3, #0
    db8c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    db90:	9802      	ldr	r0, [sp, #8]
    db92:	f7ff f80b 	bl	cbac <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    db96:	2300      	movs	r3, #0
    db98:	f88d 300f 	strb.w	r3, [sp, #15]
    db9c:	e021      	b.n	dbe2 <Ftm_Pwm_Ip_DeInit+0x6e>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    db9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dba2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dba6:	4916      	ldr	r1, [pc, #88]	; (dc00 <Ftm_Pwm_Ip_DeInit+0x8c>)
    dba8:	00d2      	lsls	r2, r2, #3
    dbaa:	4413      	add	r3, r2
    dbac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    dbb0:	2b00      	cmp	r3, #0
    dbb2:	d011      	beq.n	dbd8 <Ftm_Pwm_Ip_DeInit+0x64>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    dbb4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dbb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbbc:	4611      	mov	r1, r2
    dbbe:	4618      	mov	r0, r3
    dbc0:	f7ff fede 	bl	d980 <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    dbc4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dbc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dbcc:	490c      	ldr	r1, [pc, #48]	; (dc00 <Ftm_Pwm_Ip_DeInit+0x8c>)
    dbce:	00d2      	lsls	r2, r2, #3
    dbd0:	4413      	add	r3, r2
    dbd2:	2200      	movs	r2, #0
    dbd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    dbd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dbdc:	3301      	adds	r3, #1
    dbde:	f88d 300f 	strb.w	r3, [sp, #15]
    dbe2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dbe6:	2b07      	cmp	r3, #7
    dbe8:	d9d9      	bls.n	db9e <Ftm_Pwm_Ip_DeInit+0x2a>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    dbea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbee:	4618      	mov	r0, r3
    dbf0:	f7ff fe8c 	bl	d90c <Ftm_Pwm_Ip_DeInitInstance>
}
    dbf4:	bf00      	nop
    dbf6:	b005      	add	sp, #20
    dbf8:	f85d fb04 	ldr.w	pc, [sp], #4
    dbfc:	0001648c 	.word	0x0001648c
    dc00:	1fff8fec 	.word	0x1fff8fec

0000dc04 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    dc04:	b510      	push	{r4, lr}
    dc06:	b088      	sub	sp, #32
    dc08:	4604      	mov	r4, r0
    dc0a:	4608      	mov	r0, r1
    dc0c:	4611      	mov	r1, r2
    dc0e:	461a      	mov	r2, r3
    dc10:	4623      	mov	r3, r4
    dc12:	f88d 300f 	strb.w	r3, [sp, #15]
    dc16:	4603      	mov	r3, r0
    dc18:	f88d 300e 	strb.w	r3, [sp, #14]
    dc1c:	460b      	mov	r3, r1
    dc1e:	f8ad 300c 	strh.w	r3, [sp, #12]
    dc22:	4613      	mov	r3, r2
    dc24:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    dc28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dc2c:	4a54      	ldr	r2, [pc, #336]	; (dd80 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x17c>)
    dc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc32:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    dc34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    dc38:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    dc3c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc40:	085b      	lsrs	r3, r3, #1
    dc42:	f88d 3019 	strb.w	r3, [sp, #25]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    dc46:	f006 fc07 	bl	14458 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    dc4a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dc4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc52:	494c      	ldr	r1, [pc, #304]	; (dd84 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x180>)
    dc54:	00d2      	lsls	r2, r2, #3
    dc56:	4413      	add	r3, r2
    dc58:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    dc5c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    dc60:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc64:	4619      	mov	r1, r3
    dc66:	9807      	ldr	r0, [sp, #28]
    dc68:	f7fe feb0 	bl	c9cc <Ftm_Pwm_Ip_GetChannelMode>
    dc6c:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    dc6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dc72:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc76:	4944      	ldr	r1, [pc, #272]	; (dd88 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    dc78:	00d2      	lsls	r2, r2, #3
    dc7a:	4413      	add	r3, r2
    dc7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    dc80:	2b02      	cmp	r3, #2
    dc82:	d111      	bne.n	dca8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xa4>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    dc84:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dc88:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc8c:	493e      	ldr	r1, [pc, #248]	; (dd88 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    dc8e:	00d2      	lsls	r2, r2, #3
    dc90:	4413      	add	r3, r2
    dc92:	2201      	movs	r2, #1
    dc94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    dc98:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dc9c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dca0:	2300      	movs	r3, #0
    dca2:	2200      	movs	r2, #0
    dca4:	f000 f8e4 	bl	de70 <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    dca8:	9b05      	ldr	r3, [sp, #20]
    dcaa:	2b0a      	cmp	r3, #10
    dcac:	d008      	beq.n	dcc0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
    dcae:	9b05      	ldr	r3, [sp, #20]
    dcb0:	2b09      	cmp	r3, #9
    dcb2:	d005      	beq.n	dcc0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    dcb4:	9b05      	ldr	r3, [sp, #20]
    dcb6:	2b12      	cmp	r3, #18
    dcb8:	d002      	beq.n	dcc0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    dcba:	9b05      	ldr	r3, [sp, #20]
    dcbc:	2b11      	cmp	r3, #17
    dcbe:	d10c      	bne.n	dcda <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xd6>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    dcc0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    dcc4:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dcc8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dccc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dcd0:	9300      	str	r3, [sp, #0]
    dcd2:	2300      	movs	r3, #0
    dcd4:	f000 f992 	bl	dffc <Ftm_Pwm_Ip_UpdatePwmChannel>
    dcd8:	e04c      	b.n	dd74 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    dcda:	9b05      	ldr	r3, [sp, #20]
    dcdc:	2b22      	cmp	r3, #34	; 0x22
    dcde:	d008      	beq.n	dcf2 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
    dce0:	9b05      	ldr	r3, [sp, #20]
    dce2:	2b62      	cmp	r3, #98	; 0x62
    dce4:	d005      	beq.n	dcf2 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    dce6:	9b05      	ldr	r3, [sp, #20]
    dce8:	2b61      	cmp	r3, #97	; 0x61
    dcea:	d002      	beq.n	dcf2 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    dcec:	9b05      	ldr	r3, [sp, #20]
    dcee:	2b21      	cmp	r3, #33	; 0x21
    dcf0:	d140      	bne.n	dd74 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    dcf2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dcf6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    dcfa:	4924      	ldr	r1, [pc, #144]	; (dd8c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    dcfc:	0092      	lsls	r2, r2, #2
    dcfe:	4413      	add	r3, r2
    dd00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    dd04:	2b00      	cmp	r3, #0
    dd06:	d10d      	bne.n	dd24 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x120>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    dd08:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    dd0c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dd10:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dd14:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd18:	9300      	str	r3, [sp, #0]
    dd1a:	4613      	mov	r3, r2
    dd1c:	2200      	movs	r2, #0
    dd1e:	f000 f96d 	bl	dffc <Ftm_Pwm_Ip_UpdatePwmChannel>
    dd22:	e027      	b.n	dd74 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    dd24:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd28:	f89d 3019 	ldrb.w	r3, [sp, #25]
    dd2c:	4917      	ldr	r1, [pc, #92]	; (dd8c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    dd2e:	0092      	lsls	r2, r2, #2
    dd30:	4413      	add	r3, r2
    dd32:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    dd36:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    dd3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dd3e:	4618      	mov	r0, r3
    dd40:	f7ff f90a 	bl	cf58 <Ftm_Pwm_Ip_CalculatePhaseShift>
    dd44:	4603      	mov	r3, r0
    dd46:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    dd4a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd4e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    dd52:	490e      	ldr	r1, [pc, #56]	; (dd8c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    dd54:	0092      	lsls	r2, r2, #2
    dd56:	4413      	add	r3, r2
    dd58:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    dd5c:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    dd60:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dd64:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dd68:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd6c:	9300      	str	r3, [sp, #0]
    dd6e:	4623      	mov	r3, r4
    dd70:	f000 f944 	bl	dffc <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    dd74:	f006 fb9c 	bl	144b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    dd78:	bf00      	nop
    dd7a:	b008      	add	sp, #32
    dd7c:	bd10      	pop	{r4, pc}
    dd7e:	bf00      	nop
    dd80:	0001648c 	.word	0x0001648c
    dd84:	1fff8e1c 	.word	0x1fff8e1c
    dd88:	1fff8fec 	.word	0x1fff8fec
    dd8c:	1fff8e5c 	.word	0x1fff8e5c

0000dd90 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    dd90:	b510      	push	{r4, lr}
    dd92:	b084      	sub	sp, #16
    dd94:	4604      	mov	r4, r0
    dd96:	4608      	mov	r0, r1
    dd98:	4611      	mov	r1, r2
    dd9a:	461a      	mov	r2, r3
    dd9c:	4623      	mov	r3, r4
    dd9e:	f88d 3007 	strb.w	r3, [sp, #7]
    dda2:	4603      	mov	r3, r0
    dda4:	f88d 3006 	strb.w	r3, [sp, #6]
    dda8:	460b      	mov	r3, r1
    ddaa:	f8ad 3004 	strh.w	r3, [sp, #4]
    ddae:	4613      	mov	r3, r2
    ddb0:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    ddb4:	2300      	movs	r3, #0
    ddb6:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ddba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ddbe:	4a29      	ldr	r2, [pc, #164]	; (de64 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd4>)
    ddc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddc4:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    ddc6:	f006 fb99 	bl	144fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    ddca:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ddce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ddd2:	4925      	ldr	r1, [pc, #148]	; (de68 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    ddd4:	00d2      	lsls	r2, r2, #3
    ddd6:	4413      	add	r3, r2
    ddd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    dddc:	2b02      	cmp	r3, #2
    ddde:	d111      	bne.n	de04 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x74>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    dde0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dde4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dde8:	491f      	ldr	r1, [pc, #124]	; (de68 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    ddea:	00d2      	lsls	r2, r2, #3
    ddec:	4413      	add	r3, r2
    ddee:	2201      	movs	r2, #1
    ddf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    ddf4:	f89d 1006 	ldrb.w	r1, [sp, #6]
    ddf8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ddfc:	2300      	movs	r3, #0
    ddfe:	2200      	movs	r2, #0
    de00:	f000 f836 	bl	de70 <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    de04:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    de08:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de0c:	2200      	movs	r2, #0
    de0e:	4618      	mov	r0, r3
    de10:	f000 f988 	bl	e124 <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    de14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de18:	4914      	ldr	r1, [pc, #80]	; (de6c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xdc>)
    de1a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    de1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    de22:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    de26:	2b00      	cmp	r3, #0
    de28:	d103      	bne.n	de32 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xa2>
    {
        TempDutyCycle = (uint16)0U;
    de2a:	2300      	movs	r3, #0
    de2c:	f8ad 300e 	strh.w	r3, [sp, #14]
    de30:	e003      	b.n	de3a <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xaa>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    de32:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    de36:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    de3a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    de3e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    de42:	f89d 1006 	ldrb.w	r1, [sp, #6]
    de46:	f89d 0007 	ldrb.w	r0, [sp, #7]
    de4a:	f7ff fedb 	bl	dc04 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    de4e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    de52:	4619      	mov	r1, r3
    de54:	9802      	ldr	r0, [sp, #8]
    de56:	f7fe f959 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    de5a:	f006 fb7b 	bl	14554 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    de5e:	bf00      	nop
    de60:	b004      	add	sp, #16
    de62:	bd10      	pop	{r4, pc}
    de64:	0001648c 	.word	0x0001648c
    de68:	1fff8fec 	.word	0x1fff8fec
    de6c:	1fff8e14 	.word	0x1fff8e14

0000de70 <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    de70:	b500      	push	{lr}
    de72:	b089      	sub	sp, #36	; 0x24
    de74:	9200      	str	r2, [sp, #0]
    de76:	461a      	mov	r2, r3
    de78:	4603      	mov	r3, r0
    de7a:	f88d 3007 	strb.w	r3, [sp, #7]
    de7e:	460b      	mov	r3, r1
    de80:	f88d 3006 	strb.w	r3, [sp, #6]
    de84:	4613      	mov	r3, r2
    de86:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    de8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de8e:	4a58      	ldr	r2, [pc, #352]	; (dff0 <Ftm_Pwm_Ip_SwOutputControl+0x180>)
    de90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de94:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    de96:	2300      	movs	r3, #0
    de98:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    de9c:	2300      	movs	r3, #0
    de9e:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    dea2:	2300      	movs	r3, #0
    dea4:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    dea8:	2300      	movs	r3, #0
    deaa:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    deae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    deb2:	4619      	mov	r1, r3
    deb4:	9805      	ldr	r0, [sp, #20]
    deb6:	f7fe fd89 	bl	c9cc <Ftm_Pwm_Ip_GetChannelMode>
    deba:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    debc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dec0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dec4:	494b      	ldr	r1, [pc, #300]	; (dff4 <Ftm_Pwm_Ip_SwOutputControl+0x184>)
    dec6:	00d2      	lsls	r2, r2, #3
    dec8:	4413      	add	r3, r2
    deca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    dece:	2b02      	cmp	r3, #2
    ded0:	d109      	bne.n	dee6 <Ftm_Pwm_Ip_SwOutputControl+0x76>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    ded2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ded6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    deda:	4947      	ldr	r1, [pc, #284]	; (dff8 <Ftm_Pwm_Ip_SwOutputControl+0x188>)
    dedc:	00d2      	lsls	r2, r2, #3
    dede:	4413      	add	r3, r2
    dee0:	2200      	movs	r2, #0
    dee2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    dee6:	9805      	ldr	r0, [sp, #20]
    dee8:	f7fe fd5f 	bl	c9aa <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    deec:	4603      	mov	r3, r0
    deee:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    def2:	9b03      	ldr	r3, [sp, #12]
    def4:	2b22      	cmp	r3, #34	; 0x22
    def6:	d008      	beq.n	df0a <Ftm_Pwm_Ip_SwOutputControl+0x9a>
    def8:	9b03      	ldr	r3, [sp, #12]
    defa:	2b62      	cmp	r3, #98	; 0x62
    defc:	d005      	beq.n	df0a <Ftm_Pwm_Ip_SwOutputControl+0x9a>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    defe:	9b03      	ldr	r3, [sp, #12]
    df00:	2b61      	cmp	r3, #97	; 0x61
    df02:	d002      	beq.n	df0a <Ftm_Pwm_Ip_SwOutputControl+0x9a>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    df04:	9b03      	ldr	r3, [sp, #12]
    df06:	2b21      	cmp	r3, #33	; 0x21
    df08:	d103      	bne.n	df12 <Ftm_Pwm_Ip_SwOutputControl+0xa2>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    df0a:	2303      	movs	r3, #3
    df0c:	f8ad 301c 	strh.w	r3, [sp, #28]
    df10:	e002      	b.n	df18 <Ftm_Pwm_Ip_SwOutputControl+0xa8>
    }
    else
    {
        ChannelMask = (uint16)1U;
    df12:	2301      	movs	r3, #1
    df14:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    df18:	9805      	ldr	r0, [sp, #20]
    df1a:	f7fe fd4f 	bl	c9bc <Ftm_Pwm_Ip_GetPolInstance>
    df1e:	4603      	mov	r3, r0
    df20:	4619      	mov	r1, r3
    df22:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    df26:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df2a:	fa02 f303 	lsl.w	r3, r2, r3
    df2e:	b29b      	uxth	r3, r3
    df30:	400b      	ands	r3, r1
    df32:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    df36:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    df3a:	021b      	lsls	r3, r3, #8
    df3c:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    df40:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    df44:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df48:	3308      	adds	r3, #8
    df4a:	fa02 f303 	lsl.w	r3, r2, r3
    df4e:	b29b      	uxth	r3, r3
    df50:	43db      	mvns	r3, r3
    df52:	b29a      	uxth	r2, r3
    df54:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    df58:	4013      	ands	r3, r2
    df5a:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    df5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    df62:	2b00      	cmp	r3, #0
    df64:	d027      	beq.n	dfb6 <Ftm_Pwm_Ip_SwOutputControl+0x146>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    df66:	9b00      	ldr	r3, [sp, #0]
    df68:	2b01      	cmp	r3, #1
    df6a:	d109      	bne.n	df80 <Ftm_Pwm_Ip_SwOutputControl+0x110>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    df6c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    df70:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df74:	3308      	adds	r3, #8
    df76:	fa02 f303 	lsl.w	r3, r2, r3
    df7a:	f8ad 301a 	strh.w	r3, [sp, #26]
    df7e:	e002      	b.n	df86 <Ftm_Pwm_Ip_SwOutputControl+0x116>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    df80:	2300      	movs	r3, #0
    df82:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    df86:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    df8a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    df8e:	4053      	eors	r3, r2
    df90:	b29a      	uxth	r2, r3
    df92:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    df96:	4313      	orrs	r3, r2
    df98:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    df9c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dfa0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfa4:	fa02 f303 	lsl.w	r3, r2, r3
    dfa8:	b29a      	uxth	r2, r3
    dfaa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    dfae:	4313      	orrs	r3, r2
    dfb0:	f8ad 301e 	strh.w	r3, [sp, #30]
    dfb4:	e00d      	b.n	dfd2 <Ftm_Pwm_Ip_SwOutputControl+0x162>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    dfb6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dfba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfbe:	fa02 f303 	lsl.w	r3, r2, r3
    dfc2:	b29b      	uxth	r3, r3
    dfc4:	43db      	mvns	r3, r3
    dfc6:	b29a      	uxth	r2, r3
    dfc8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    dfcc:	4013      	ands	r3, r2
    dfce:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    dfd2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    dfd6:	4619      	mov	r1, r3
    dfd8:	9805      	ldr	r0, [sp, #20]
    dfda:	f7fe fc86 	bl	c8ea <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    dfde:	2101      	movs	r1, #1
    dfe0:	9805      	ldr	r0, [sp, #20]
    dfe2:	f7fe f893 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    dfe6:	bf00      	nop
    dfe8:	b009      	add	sp, #36	; 0x24
    dfea:	f85d fb04 	ldr.w	pc, [sp], #4
    dfee:	bf00      	nop
    dff0:	0001648c 	.word	0x0001648c
    dff4:	1fff8fec 	.word	0x1fff8fec
    dff8:	1fff8e1c 	.word	0x1fff8e1c

0000dffc <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    dffc:	b510      	push	{r4, lr}
    dffe:	b086      	sub	sp, #24
    e000:	4604      	mov	r4, r0
    e002:	4608      	mov	r0, r1
    e004:	4611      	mov	r1, r2
    e006:	461a      	mov	r2, r3
    e008:	4623      	mov	r3, r4
    e00a:	f88d 3007 	strb.w	r3, [sp, #7]
    e00e:	4603      	mov	r3, r0
    e010:	f88d 3006 	strb.w	r3, [sp, #6]
    e014:	460b      	mov	r3, r1
    e016:	f8ad 3004 	strh.w	r3, [sp, #4]
    e01a:	4613      	mov	r3, r2
    e01c:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e020:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e024:	4a3d      	ldr	r2, [pc, #244]	; (e11c <Ftm_Pwm_Ip_UpdatePwmChannel+0x120>)
    e026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e02a:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    e02c:	2300      	movs	r3, #0
    e02e:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    e030:	2300      	movs	r3, #0
    e032:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    e036:	2300      	movs	r3, #0
    e038:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    e03c:	2300      	movs	r3, #0
    e03e:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    e042:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e046:	085b      	lsrs	r3, r3, #1
    e048:	f88d 3009 	strb.w	r3, [sp, #9]
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    e04c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e050:	4a33      	ldr	r2, [pc, #204]	; (e120 <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>)
    e052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    e056:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    e05a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e05e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e062:	429a      	cmp	r2, r3
    e064:	d805      	bhi.n	e072 <Ftm_Pwm_Ip_UpdatePwmChannel+0x76>
    e066:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e06a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e06e:	429a      	cmp	r2, r3
    e070:	d903      	bls.n	e07a <Ftm_Pwm_Ip_UpdatePwmChannel+0x7e>
    e072:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e076:	2b00      	cmp	r3, #0
    e078:	d108      	bne.n	e08c <Ftm_Pwm_Ip_UpdatePwmChannel+0x90>
    {
        HwFirstEdge = FirstEdge;
    e07a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e07e:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    e082:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    e086:	f8ad 3010 	strh.w	r3, [sp, #16]
    e08a:	e001      	b.n	e090 <Ftm_Pwm_Ip_UpdatePwmChannel+0x94>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    e08c:	2301      	movs	r3, #1
    e08e:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    e090:	9b05      	ldr	r3, [sp, #20]
    e092:	2b00      	cmp	r3, #0
    e094:	d13e      	bne.n	e114 <Ftm_Pwm_Ip_UpdatePwmChannel+0x118>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    e096:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e09a:	4619      	mov	r1, r3
    e09c:	9803      	ldr	r0, [sp, #12]
    e09e:	f7fe f8d5 	bl	c24c <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    e0a2:	4603      	mov	r3, r0
    e0a4:	2b00      	cmp	r3, #0
    e0a6:	d016      	beq.n	e0d6 <Ftm_Pwm_Ip_UpdatePwmChannel+0xda>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    e0a8:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e0ac:	005b      	lsls	r3, r3, #1
    e0ae:	b2db      	uxtb	r3, r3
    e0b0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    e0b4:	4619      	mov	r1, r3
    e0b6:	9803      	ldr	r0, [sp, #12]
    e0b8:	f7fd ff70 	bl	bf9c <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    e0bc:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e0c0:	005b      	lsls	r3, r3, #1
    e0c2:	b2db      	uxtb	r3, r3
    e0c4:	3301      	adds	r3, #1
    e0c6:	b2db      	uxtb	r3, r3
    e0c8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    e0cc:	4619      	mov	r1, r3
    e0ce:	9803      	ldr	r0, [sp, #12]
    e0d0:	f7fd ff64 	bl	bf9c <Ftm_Pwm_Ip_SetChnCountVal>
    e0d4:	e018      	b.n	e108 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    e0d6:	9803      	ldr	r0, [sp, #12]
    e0d8:	f7fd fde9 	bl	bcae <Ftm_Pwm_Ip_GetCpwms>
    e0dc:	4603      	mov	r3, r0
    e0de:	2b01      	cmp	r3, #1
    e0e0:	d10a      	bne.n	e0f8 <Ftm_Pwm_Ip_UpdatePwmChannel+0xfc>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    e0e2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    e0e6:	085b      	lsrs	r3, r3, #1
    e0e8:	b29a      	uxth	r2, r3
    e0ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e0ee:	4619      	mov	r1, r3
    e0f0:	9803      	ldr	r0, [sp, #12]
    e0f2:	f7fd ff53 	bl	bf9c <Ftm_Pwm_Ip_SetChnCountVal>
    e0f6:	e007      	b.n	e108 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    e0f8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    e0fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e100:	4619      	mov	r1, r3
    e102:	9803      	ldr	r0, [sp, #12]
    e104:	f7fd ff4a 	bl	bf9c <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e108:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e10c:	4619      	mov	r1, r3
    e10e:	9803      	ldr	r0, [sp, #12]
    e110:	f7fd fffc 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    e114:	9b05      	ldr	r3, [sp, #20]
}
    e116:	4618      	mov	r0, r3
    e118:	b006      	add	sp, #24
    e11a:	bd10      	pop	{r4, pc}
    e11c:	0001648c 	.word	0x0001648c
    e120:	1fff8e14 	.word	0x1fff8e14

0000e124 <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    e124:	b500      	push	{lr}
    e126:	b085      	sub	sp, #20
    e128:	4603      	mov	r3, r0
    e12a:	9100      	str	r1, [sp, #0]
    e12c:	f88d 3007 	strb.w	r3, [sp, #7]
    e130:	4613      	mov	r3, r2
    e132:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e136:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e13a:	4a16      	ldr	r2, [pc, #88]	; (e194 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x70>)
    e13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e140:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    e142:	2300      	movs	r3, #0
    e144:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    FtmPeriod = NewValue;
    e146:	9b00      	ldr	r3, [sp, #0]
    e148:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    e14a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e14e:	9a00      	ldr	r2, [sp, #0]
    e150:	b291      	uxth	r1, r2
    e152:	4a11      	ldr	r2, [pc, #68]	; (e198 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x74>)
    e154:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    e158:	9802      	ldr	r0, [sp, #8]
    e15a:	f7fd fda8 	bl	bcae <Ftm_Pwm_Ip_GetCpwms>
    e15e:	4603      	mov	r3, r0
    e160:	2b01      	cmp	r3, #1
    e162:	d103      	bne.n	e16c <Ftm_Pwm_Ip_UpdatePwmPeriod+0x48>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    e164:	9b03      	ldr	r3, [sp, #12]
    e166:	085b      	lsrs	r3, r3, #1
    e168:	9303      	str	r3, [sp, #12]
    e16a:	e002      	b.n	e172 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x4e>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    e16c:	9b03      	ldr	r3, [sp, #12]
    e16e:	3b01      	subs	r3, #1
    e170:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    e172:	9b03      	ldr	r3, [sp, #12]
    e174:	b29b      	uxth	r3, r3
    e176:	4619      	mov	r1, r3
    e178:	9802      	ldr	r0, [sp, #8]
    e17a:	f7fd fdeb 	bl	bd54 <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e17e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e182:	4619      	mov	r1, r3
    e184:	9802      	ldr	r0, [sp, #8]
    e186:	f7fd ffc1 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    e18a:	2300      	movs	r3, #0
}
    e18c:	4618      	mov	r0, r3
    e18e:	b005      	add	sp, #20
    e190:	f85d fb04 	ldr.w	pc, [sp], #4
    e194:	0001648c 	.word	0x0001648c
    e198:	1fff8e14 	.word	0x1fff8e14

0000e19c <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    e19c:	b500      	push	{lr}
    e19e:	b085      	sub	sp, #20
    e1a0:	4603      	mov	r3, r0
    e1a2:	460a      	mov	r2, r1
    e1a4:	f88d 3007 	strb.w	r3, [sp, #7]
    e1a8:	4613      	mov	r3, r2
    e1aa:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e1ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1b2:	4a0d      	ldr	r2, [pc, #52]	; (e1e8 <Ftm_Pwm_Ip_GetOutputState+0x4c>)
    e1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1b8:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    e1ba:	f006 fa43 	bl	14644 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    e1be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1c2:	4619      	mov	r1, r3
    e1c4:	9802      	ldr	r0, [sp, #8]
    e1c6:	f7fd fed3 	bl	bf70 <Ftm_Pwm_Ip_GetChOutputValue>
    e1ca:	4603      	mov	r3, r0
    e1cc:	2b00      	cmp	r3, #0
    e1ce:	d002      	beq.n	e1d6 <Ftm_Pwm_Ip_GetOutputState+0x3a>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    e1d0:	2301      	movs	r3, #1
    e1d2:	9303      	str	r3, [sp, #12]
    e1d4:	e001      	b.n	e1da <Ftm_Pwm_Ip_GetOutputState+0x3e>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    e1d6:	2300      	movs	r3, #0
    e1d8:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    e1da:	f006 fa5f 	bl	1469c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    e1de:	9b03      	ldr	r3, [sp, #12]
}
    e1e0:	4618      	mov	r0, r3
    e1e2:	b005      	add	sp, #20
    e1e4:	f85d fb04 	ldr.w	pc, [sp], #4
    e1e8:	0001648c 	.word	0x0001648c

0000e1ec <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    e1ec:	b500      	push	{lr}
    e1ee:	b087      	sub	sp, #28
    e1f0:	4603      	mov	r3, r0
    e1f2:	9100      	str	r1, [sp, #0]
    e1f4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e1f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1fc:	4a38      	ldr	r2, [pc, #224]	; (e2e0 <Ftm_Pwm_Ip_DisableNotification+0xf4>)
    e1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e202:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    e204:	9b00      	ldr	r3, [sp, #0]
    e206:	f88d 3013 	strb.w	r3, [sp, #19]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    e20a:	f006 fa6d 	bl	146e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    e20e:	9b00      	ldr	r3, [sp, #0]
    e210:	2b00      	cmp	r3, #0
    e212:	d014      	beq.n	e23e <Ftm_Pwm_Ip_DisableNotification+0x52>
    e214:	9b00      	ldr	r3, [sp, #0]
    e216:	2b01      	cmp	r3, #1
    e218:	d011      	beq.n	e23e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    e21a:	9b00      	ldr	r3, [sp, #0]
    e21c:	2b02      	cmp	r3, #2
    e21e:	d00e      	beq.n	e23e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    e220:	9b00      	ldr	r3, [sp, #0]
    e222:	2b03      	cmp	r3, #3
    e224:	d00b      	beq.n	e23e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    e226:	9b00      	ldr	r3, [sp, #0]
    e228:	2b04      	cmp	r3, #4
    e22a:	d008      	beq.n	e23e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    e22c:	9b00      	ldr	r3, [sp, #0]
    e22e:	2b05      	cmp	r3, #5
    e230:	d005      	beq.n	e23e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    e232:	9b00      	ldr	r3, [sp, #0]
    e234:	2b06      	cmp	r3, #6
    e236:	d002      	beq.n	e23e <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    e238:	9b00      	ldr	r3, [sp, #0]
    e23a:	2b07      	cmp	r3, #7
    e23c:	d136      	bne.n	e2ac <Ftm_Pwm_Ip_DisableNotification+0xc0>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    e23e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e242:	085b      	lsrs	r3, r3, #1
    e244:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    e248:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e24c:	4619      	mov	r1, r3
    e24e:	9805      	ldr	r0, [sp, #20]
    e250:	f7fe fbbc 	bl	c9cc <Ftm_Pwm_Ip_GetChannelMode>
    e254:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    e256:	f89d 2013 	ldrb.w	r2, [sp, #19]
    e25a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e25e:	4611      	mov	r1, r2
    e260:	4618      	mov	r0, r3
    e262:	f7fe ff47 	bl	d0f4 <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e266:	9b03      	ldr	r3, [sp, #12]
    e268:	2b22      	cmp	r3, #34	; 0x22
    e26a:	d008      	beq.n	e27e <Ftm_Pwm_Ip_DisableNotification+0x92>
    e26c:	9b03      	ldr	r3, [sp, #12]
    e26e:	2b62      	cmp	r3, #98	; 0x62
    e270:	d005      	beq.n	e27e <Ftm_Pwm_Ip_DisableNotification+0x92>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    e272:	9b03      	ldr	r3, [sp, #12]
    e274:	2b61      	cmp	r3, #97	; 0x61
    e276:	d002      	beq.n	e27e <Ftm_Pwm_Ip_DisableNotification+0x92>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    e278:	9b03      	ldr	r3, [sp, #12]
    e27a:	2b21      	cmp	r3, #33	; 0x21
    e27c:	d129      	bne.n	e2d2 <Ftm_Pwm_Ip_DisableNotification+0xe6>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    e27e:	f89d 3012 	ldrb.w	r3, [sp, #18]
    e282:	005b      	lsls	r3, r3, #1
    e284:	b2da      	uxtb	r2, r3
    e286:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e28a:	4611      	mov	r1, r2
    e28c:	4618      	mov	r0, r3
    e28e:	f7fe ff31 	bl	d0f4 <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    e292:	f89d 3012 	ldrb.w	r3, [sp, #18]
    e296:	005b      	lsls	r3, r3, #1
    e298:	b2db      	uxtb	r3, r3
    e29a:	3301      	adds	r3, #1
    e29c:	b2da      	uxtb	r2, r3
    e29e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2a2:	4611      	mov	r1, r2
    e2a4:	4618      	mov	r0, r3
    e2a6:	f7fe ff25 	bl	d0f4 <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e2aa:	e012      	b.n	e2d2 <Ftm_Pwm_Ip_DisableNotification+0xe6>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    e2ac:	9b00      	ldr	r3, [sp, #0]
    e2ae:	2b0a      	cmp	r3, #10
    e2b0:	d107      	bne.n	e2c2 <Ftm_Pwm_Ip_DisableNotification+0xd6>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    e2b2:	2100      	movs	r1, #0
    e2b4:	9805      	ldr	r0, [sp, #20]
    e2b6:	f7fe fd88 	bl	cdca <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    e2ba:	9805      	ldr	r0, [sp, #20]
    e2bc:	f7fe fd9b 	bl	cdf6 <Ftm_Pwm_Ip_ClearFaultFlag>
    e2c0:	e008      	b.n	e2d4 <Ftm_Pwm_Ip_DisableNotification+0xe8>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    e2c2:	9805      	ldr	r0, [sp, #20]
    e2c4:	f7fd fd18 	bl	bcf8 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    e2c8:	2100      	movs	r1, #0
    e2ca:	9805      	ldr	r0, [sp, #20]
    e2cc:	f7fd fcfd 	bl	bcca <Ftm_Pwm_Ip_SetTimerOverflowInt>
    e2d0:	e000      	b.n	e2d4 <Ftm_Pwm_Ip_DisableNotification+0xe8>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e2d2:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    e2d4:	f006 fa34 	bl	14740 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    e2d8:	bf00      	nop
    e2da:	b007      	add	sp, #28
    e2dc:	f85d fb04 	ldr.w	pc, [sp], #4
    e2e0:	0001648c 	.word	0x0001648c

0000e2e4 <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    e2e4:	b500      	push	{lr}
    e2e6:	b087      	sub	sp, #28
    e2e8:	4603      	mov	r3, r0
    e2ea:	460a      	mov	r2, r1
    e2ec:	f88d 3007 	strb.w	r3, [sp, #7]
    e2f0:	4613      	mov	r3, r2
    e2f2:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e2f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2fa:	4a22      	ldr	r2, [pc, #136]	; (e384 <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    e2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e300:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    e302:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e306:	085b      	lsrs	r3, r3, #1
    e308:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    e30c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e310:	4619      	mov	r1, r3
    e312:	9805      	ldr	r0, [sp, #20]
    e314:	f7fe fb5a 	bl	c9cc <Ftm_Pwm_Ip_GetChannelMode>
    e318:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    e31a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e31e:	2201      	movs	r2, #1
    e320:	4619      	mov	r1, r3
    e322:	9805      	ldr	r0, [sp, #20]
    e324:	f7fd fde9 	bl	befa <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e328:	9b03      	ldr	r3, [sp, #12]
    e32a:	2b22      	cmp	r3, #34	; 0x22
    e32c:	d008      	beq.n	e340 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    e32e:	9b03      	ldr	r3, [sp, #12]
    e330:	2b62      	cmp	r3, #98	; 0x62
    e332:	d005      	beq.n	e340 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    e334:	9b03      	ldr	r3, [sp, #12]
    e336:	2b61      	cmp	r3, #97	; 0x61
    e338:	d002      	beq.n	e340 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    e33a:	9b03      	ldr	r3, [sp, #12]
    e33c:	2b21      	cmp	r3, #33	; 0x21
    e33e:	d11d      	bne.n	e37c <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
    e340:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e344:	005b      	lsls	r3, r3, #1
    e346:	b2db      	uxtb	r3, r3
    e348:	3301      	adds	r3, #1
    e34a:	b2db      	uxtb	r3, r3
    e34c:	4619      	mov	r1, r3
    e34e:	9805      	ldr	r0, [sp, #20]
    e350:	f7fd fdf6 	bl	bf40 <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
    e354:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e358:	005b      	lsls	r3, r3, #1
    e35a:	b2db      	uxtb	r3, r3
    e35c:	2201      	movs	r2, #1
    e35e:	4619      	mov	r1, r3
    e360:	9805      	ldr	r0, [sp, #20]
    e362:	f7fd fdca 	bl	befa <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
    e366:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e36a:	005b      	lsls	r3, r3, #1
    e36c:	b2db      	uxtb	r3, r3
    e36e:	3301      	adds	r3, #1
    e370:	b2db      	uxtb	r3, r3
    e372:	2201      	movs	r2, #1
    e374:	4619      	mov	r1, r3
    e376:	9805      	ldr	r0, [sp, #20]
    e378:	f7fd fdbf 	bl	befa <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
    e37c:	bf00      	nop
    e37e:	b007      	add	sp, #28
    e380:	f85d fb04 	ldr.w	pc, [sp], #4
    e384:	0001648c 	.word	0x0001648c

0000e388 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
    e388:	b500      	push	{lr}
    e38a:	b085      	sub	sp, #20
    e38c:	4603      	mov	r3, r0
    e38e:	9100      	str	r1, [sp, #0]
    e390:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e394:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e398:	4a23      	ldr	r2, [pc, #140]	; (e428 <Ftm_Pwm_Ip_EnableNotification+0xa0>)
    e39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e39e:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
    e3a0:	9b00      	ldr	r3, [sp, #0]
    e3a2:	f88d 300b 	strb.w	r3, [sp, #11]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
    e3a6:	f006 f9f1 	bl	1478c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    e3aa:	9b00      	ldr	r3, [sp, #0]
    e3ac:	2b00      	cmp	r3, #0
    e3ae:	d014      	beq.n	e3da <Ftm_Pwm_Ip_EnableNotification+0x52>
    e3b0:	9b00      	ldr	r3, [sp, #0]
    e3b2:	2b01      	cmp	r3, #1
    e3b4:	d011      	beq.n	e3da <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    e3b6:	9b00      	ldr	r3, [sp, #0]
    e3b8:	2b02      	cmp	r3, #2
    e3ba:	d00e      	beq.n	e3da <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    e3bc:	9b00      	ldr	r3, [sp, #0]
    e3be:	2b03      	cmp	r3, #3
    e3c0:	d00b      	beq.n	e3da <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    e3c2:	9b00      	ldr	r3, [sp, #0]
    e3c4:	2b04      	cmp	r3, #4
    e3c6:	d008      	beq.n	e3da <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    e3c8:	9b00      	ldr	r3, [sp, #0]
    e3ca:	2b05      	cmp	r3, #5
    e3cc:	d005      	beq.n	e3da <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    e3ce:	9b00      	ldr	r3, [sp, #0]
    e3d0:	2b06      	cmp	r3, #6
    e3d2:	d002      	beq.n	e3da <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    e3d4:	9b00      	ldr	r3, [sp, #0]
    e3d6:	2b07      	cmp	r3, #7
    e3d8:	d10e      	bne.n	e3f8 <Ftm_Pwm_Ip_EnableNotification+0x70>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
    e3da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3de:	4619      	mov	r1, r3
    e3e0:	9803      	ldr	r0, [sp, #12]
    e3e2:	f7fd fdad 	bl	bf40 <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
    e3e6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    e3ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e3ee:	4611      	mov	r1, r2
    e3f0:	4618      	mov	r0, r3
    e3f2:	f7ff ff77 	bl	e2e4 <Ftm_Pwm_Ip_SetNormalNotificationCase>
    e3f6:	e011      	b.n	e41c <Ftm_Pwm_Ip_EnableNotification+0x94>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    e3f8:	9b00      	ldr	r3, [sp, #0]
    e3fa:	2b0a      	cmp	r3, #10
    e3fc:	d107      	bne.n	e40e <Ftm_Pwm_Ip_EnableNotification+0x86>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    e3fe:	9803      	ldr	r0, [sp, #12]
    e400:	f7fe fcf9 	bl	cdf6 <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
    e404:	2101      	movs	r1, #1
    e406:	9803      	ldr	r0, [sp, #12]
    e408:	f7fe fcdf 	bl	cdca <Ftm_Pwm_Ip_SetFaultInterruptEnable>
    e40c:	e006      	b.n	e41c <Ftm_Pwm_Ip_EnableNotification+0x94>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    e40e:	9803      	ldr	r0, [sp, #12]
    e410:	f7fd fc72 	bl	bcf8 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
    e414:	2101      	movs	r1, #1
    e416:	9803      	ldr	r0, [sp, #12]
    e418:	f7fd fc57 	bl	bcca <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
    e41c:	f006 f9e2 	bl	147e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
    e420:	bf00      	nop
    e422:	b005      	add	sp, #20
    e424:	f85d fb04 	ldr.w	pc, [sp], #4
    e428:	0001648c 	.word	0x0001648c

0000e42c <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
    e42c:	b500      	push	{lr}
    e42e:	b085      	sub	sp, #20
    e430:	4603      	mov	r3, r0
    e432:	9100      	str	r1, [sp, #0]
    e434:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e438:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e43c:	4a0c      	ldr	r2, [pc, #48]	; (e470 <Ftm_Pwm_Ip_SetPowerState+0x44>)
    e43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e442:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
    e444:	9b00      	ldr	r3, [sp, #0]
    e446:	2b01      	cmp	r3, #1
    e448:	d104      	bne.n	e454 <Ftm_Pwm_Ip_SetPowerState+0x28>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    e44a:	2100      	movs	r1, #0
    e44c:	9803      	ldr	r0, [sp, #12]
    e44e:	f7fd fc07 	bl	bc60 <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
    e452:	e008      	b.n	e466 <Ftm_Pwm_Ip_SetPowerState+0x3a>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    e454:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e458:	4a06      	ldr	r2, [pc, #24]	; (e474 <Ftm_Pwm_Ip_SetPowerState+0x48>)
    e45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e45e:	4619      	mov	r1, r3
    e460:	9803      	ldr	r0, [sp, #12]
    e462:	f7fd fbfd 	bl	bc60 <Ftm_Pwm_Ip_SetClockSource>
}
    e466:	bf00      	nop
    e468:	b005      	add	sp, #20
    e46a:	f85d fb04 	ldr.w	pc, [sp], #4
    e46e:	bf00      	nop
    e470:	0001648c 	.word	0x0001648c
    e474:	1fff910c 	.word	0x1fff910c

0000e478 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
    e478:	b500      	push	{lr}
    e47a:	b085      	sub	sp, #20
    e47c:	4603      	mov	r3, r0
    e47e:	9100      	str	r1, [sp, #0]
    e480:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e484:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e488:	4a0e      	ldr	r2, [pc, #56]	; (e4c4 <Ftm_Pwm_Ip_SetClockMode+0x4c>)
    e48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e48e:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
    e490:	9b00      	ldr	r3, [sp, #0]
    e492:	2b01      	cmp	r3, #1
    e494:	d109      	bne.n	e4aa <Ftm_Pwm_Ip_SetClockMode+0x32>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
    e496:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e49a:	4a0b      	ldr	r2, [pc, #44]	; (e4c8 <Ftm_Pwm_Ip_SetClockMode+0x50>)
    e49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4a0:	4619      	mov	r1, r3
    e4a2:	9803      	ldr	r0, [sp, #12]
    e4a4:	f7fd fbcc 	bl	bc40 <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
    e4a8:	e008      	b.n	e4bc <Ftm_Pwm_Ip_SetClockMode+0x44>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    e4aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4ae:	4a07      	ldr	r2, [pc, #28]	; (e4cc <Ftm_Pwm_Ip_SetClockMode+0x54>)
    e4b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4b4:	4619      	mov	r1, r3
    e4b6:	9803      	ldr	r0, [sp, #12]
    e4b8:	f7fd fbc2 	bl	bc40 <Ftm_Pwm_Ip_SetClockPs>
}
    e4bc:	bf00      	nop
    e4be:	b005      	add	sp, #20
    e4c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e4c4:	0001648c 	.word	0x0001648c
    e4c8:	1fff912c 	.word	0x1fff912c
    e4cc:	1fff911c 	.word	0x1fff911c

0000e4d0 <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
    e4d0:	b500      	push	{lr}
    e4d2:	b085      	sub	sp, #20
    e4d4:	4603      	mov	r3, r0
    e4d6:	460a      	mov	r2, r1
    e4d8:	f88d 3007 	strb.w	r3, [sp, #7]
    e4dc:	4613      	mov	r3, r2
    e4de:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e4e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4e6:	4a07      	ldr	r2, [pc, #28]	; (e504 <Ftm_Pwm_Ip_ResetCounter+0x34>)
    e4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ec:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
    e4ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e4f2:	4619      	mov	r1, r3
    e4f4:	9803      	ldr	r0, [sp, #12]
    e4f6:	f7fe f8ae 	bl	c656 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
    e4fa:	bf00      	nop
    e4fc:	b005      	add	sp, #20
    e4fe:	f85d fb04 	ldr.w	pc, [sp], #4
    e502:	bf00      	nop
    e504:	0001648c 	.word	0x0001648c

0000e508 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
    e508:	b084      	sub	sp, #16
    e50a:	4603      	mov	r3, r0
    e50c:	460a      	mov	r2, r1
    e50e:	f88d 3007 	strb.w	r3, [sp, #7]
    e512:	4613      	mov	r3, r2
    e514:	f88d 3006 	strb.w	r3, [sp, #6]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
    e518:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e51c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e520:	4905      	ldr	r1, [pc, #20]	; (e538 <Ftm_Pwm_Ip_GetChannelState+0x30>)
    e522:	00d2      	lsls	r2, r2, #3
    e524:	4413      	add	r3, r2
    e526:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    e52a:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
    e52e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    e532:	4618      	mov	r0, r3
    e534:	b004      	add	sp, #16
    e536:	4770      	bx	lr
    e538:	1fff8e1c 	.word	0x1fff8e1c

0000e53c <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
    e53c:	b500      	push	{lr}
    e53e:	b087      	sub	sp, #28
    e540:	9202      	str	r2, [sp, #8]
    e542:	9301      	str	r3, [sp, #4]
    e544:	4603      	mov	r3, r0
    e546:	f88d 300f 	strb.w	r3, [sp, #15]
    e54a:	460b      	mov	r3, r1
    e54c:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e550:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e554:	4a1f      	ldr	r2, [pc, #124]	; (e5d4 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x98>)
    e556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e55a:	9304      	str	r3, [sp, #16]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
    e55c:	2300      	movs	r3, #0
    e55e:	f88d 3017 	strb.w	r3, [sp, #23]
    e562:	e026      	b.n	e5b2 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x76>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
    e564:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e568:	9a02      	ldr	r2, [sp, #8]
    e56a:	4413      	add	r3, r2
    e56c:	7819      	ldrb	r1, [r3, #0]
    e56e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e572:	005b      	lsls	r3, r3, #1
    e574:	9a01      	ldr	r2, [sp, #4]
    e576:	4413      	add	r3, r2
    e578:	881b      	ldrh	r3, [r3, #0]
    e57a:	461a      	mov	r2, r3
    e57c:	9804      	ldr	r0, [sp, #16]
    e57e:	f7fd fd0d 	bl	bf9c <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
    e582:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e586:	005b      	lsls	r3, r3, #1
    e588:	9a01      	ldr	r2, [sp, #4]
    e58a:	441a      	add	r2, r3
    e58c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e590:	f89d 1017 	ldrb.w	r1, [sp, #23]
    e594:	9802      	ldr	r0, [sp, #8]
    e596:	4401      	add	r1, r0
    e598:	7809      	ldrb	r1, [r1, #0]
    e59a:	4608      	mov	r0, r1
    e59c:	8811      	ldrh	r1, [r2, #0]
    e59e:	4a0e      	ldr	r2, [pc, #56]	; (e5d8 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9c>)
    e5a0:	00db      	lsls	r3, r3, #3
    e5a2:	4403      	add	r3, r0
    e5a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
    e5a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e5ac:	3301      	adds	r3, #1
    e5ae:	f88d 3017 	strb.w	r3, [sp, #23]
    e5b2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e5b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e5ba:	429a      	cmp	r2, r3
    e5bc:	d3d2      	bcc.n	e564 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x28>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e5be:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e5c2:	4619      	mov	r1, r3
    e5c4:	9804      	ldr	r0, [sp, #16]
    e5c6:	f7fd fda1 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    e5ca:	bf00      	nop
    e5cc:	b007      	add	sp, #28
    e5ce:	f85d fb04 	ldr.w	pc, [sp], #4
    e5d2:	bf00      	nop
    e5d4:	0001648c 	.word	0x0001648c
    e5d8:	1fff8e1c 	.word	0x1fff8e1c

0000e5dc <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
    e5dc:	b500      	push	{lr}
    e5de:	b085      	sub	sp, #20
    e5e0:	4603      	mov	r3, r0
    e5e2:	9100      	str	r1, [sp, #0]
    e5e4:	f88d 3007 	strb.w	r3, [sp, #7]
    e5e8:	4613      	mov	r3, r2
    e5ea:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e5ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e5f2:	4a0b      	ldr	r2, [pc, #44]	; (e620 <Ftm_Pwm_Ip_MaskOutputChannels+0x44>)
    e5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5f8:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
    e5fa:	f006 f96b 	bl	148d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
    e5fe:	9900      	ldr	r1, [sp, #0]
    e600:	9803      	ldr	r0, [sp, #12]
    e602:	f7fd fde0 	bl	c1c6 <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e606:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e60a:	4619      	mov	r1, r3
    e60c:	9803      	ldr	r0, [sp, #12]
    e60e:	f7fd fd7d 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
    e612:	f006 f98b 	bl	1492c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
    e616:	bf00      	nop
    e618:	b005      	add	sp, #20
    e61a:	f85d fb04 	ldr.w	pc, [sp], #4
    e61e:	bf00      	nop
    e620:	0001648c 	.word	0x0001648c

0000e624 <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
    e624:	b500      	push	{lr}
    e626:	b085      	sub	sp, #20
    e628:	4603      	mov	r3, r0
    e62a:	9100      	str	r1, [sp, #0]
    e62c:	f88d 3007 	strb.w	r3, [sp, #7]
    e630:	4613      	mov	r3, r2
    e632:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e636:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e63a:	4a0b      	ldr	r2, [pc, #44]	; (e668 <Ftm_Pwm_Ip_UnMaskOutputChannels+0x44>)
    e63c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e640:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
    e642:	f006 f999 	bl	14978 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
    e646:	9900      	ldr	r1, [sp, #0]
    e648:	9803      	ldr	r0, [sp, #12]
    e64a:	f7fd fdcb 	bl	c1e4 <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e64e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e652:	4619      	mov	r1, r3
    e654:	9803      	ldr	r0, [sp, #12]
    e656:	f7fd fd59 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
    e65a:	f006 f9b9 	bl	149d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
    e65e:	bf00      	nop
    e660:	b005      	add	sp, #20
    e662:	f85d fb04 	ldr.w	pc, [sp], #4
    e666:	bf00      	nop
    e668:	0001648c 	.word	0x0001648c

0000e66c <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
    e66c:	b510      	push	{r4, lr}
    e66e:	b084      	sub	sp, #16
    e670:	4604      	mov	r4, r0
    e672:	4608      	mov	r0, r1
    e674:	4611      	mov	r1, r2
    e676:	461a      	mov	r2, r3
    e678:	4623      	mov	r3, r4
    e67a:	f88d 3007 	strb.w	r3, [sp, #7]
    e67e:	4603      	mov	r3, r0
    e680:	f88d 3006 	strb.w	r3, [sp, #6]
    e684:	460b      	mov	r3, r1
    e686:	f8ad 3004 	strh.w	r3, [sp, #4]
    e68a:	4613      	mov	r3, r2
    e68c:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e690:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e694:	4a2e      	ldr	r2, [pc, #184]	; (e750 <Ftm_Pwm_Ip_SetPhaseShift+0xe4>)
    e696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e69a:	9303      	str	r3, [sp, #12]
    {
        RetVal = FALSE;
    }
    DevAssert(RetVal != FALSE);
#endif
    PairChId = Channel >> 1U;
    e69c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e6a0:	085b      	lsrs	r3, r3, #1
    e6a2:	f88d 300b 	strb.w	r3, [sp, #11]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    e6a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e6aa:	492a      	ldr	r1, [pc, #168]	; (e754 <Ftm_Pwm_Ip_SetPhaseShift+0xe8>)
    e6ac:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e6b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
    e6b4:	f006 f9b2 	bl	14a1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    e6b8:	9803      	ldr	r0, [sp, #12]
    e6ba:	f7fd faf8 	bl	bcae <Ftm_Pwm_Ip_GetCpwms>
    e6be:	4603      	mov	r3, r0
    e6c0:	2b01      	cmp	r3, #1
    e6c2:	d108      	bne.n	e6d6 <Ftm_Pwm_Ip_SetPhaseShift+0x6a>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
    e6c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e6c8:	085b      	lsrs	r3, r3, #1
    e6ca:	b29b      	uxth	r3, r3
    e6cc:	4619      	mov	r1, r3
    e6ce:	9803      	ldr	r0, [sp, #12]
    e6d0:	f7fd fb40 	bl	bd54 <Ftm_Pwm_Ip_SetMod>
    e6d4:	e007      	b.n	e6e6 <Ftm_Pwm_Ip_SetPhaseShift+0x7a>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
    e6d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e6da:	3b01      	subs	r3, #1
    e6dc:	b29b      	uxth	r3, r3
    e6de:	4619      	mov	r1, r3
    e6e0:	9803      	ldr	r0, [sp, #12]
    e6e2:	f7fd fb37 	bl	bd54 <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
    e6e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e6ea:	005b      	lsls	r3, r3, #1
    e6ec:	b2db      	uxtb	r3, r3
    e6ee:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e6f2:	4619      	mov	r1, r3
    e6f4:	9803      	ldr	r0, [sp, #12]
    e6f6:	f7fd fc51 	bl	bf9c <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
    e6fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e6fe:	085b      	lsrs	r3, r3, #1
    e700:	f8ad 3008 	strh.w	r3, [sp, #8]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
    e704:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e708:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e70c:	4912      	ldr	r1, [pc, #72]	; (e758 <Ftm_Pwm_Ip_SetPhaseShift+0xec>)
    e70e:	00d2      	lsls	r2, r2, #3
    e710:	4413      	add	r3, r2
    e712:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    e716:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
    e71a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e71e:	005b      	lsls	r3, r3, #1
    e720:	b2db      	uxtb	r3, r3
    e722:	3301      	adds	r3, #1
    e724:	b2d9      	uxtb	r1, r3
    e726:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e72a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e72e:	4413      	add	r3, r2
    e730:	b29b      	uxth	r3, r3
    e732:	461a      	mov	r2, r3
    e734:	9803      	ldr	r0, [sp, #12]
    e736:	f7fd fc31 	bl	bf9c <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e73a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e73e:	4619      	mov	r1, r3
    e740:	9803      	ldr	r0, [sp, #12]
    e742:	f7fd fce3 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
    e746:	f006 f995 	bl	14a74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
    e74a:	bf00      	nop
    e74c:	b004      	add	sp, #16
    e74e:	bd10      	pop	{r4, pc}
    e750:	0001648c 	.word	0x0001648c
    e754:	1fff8e14 	.word	0x1fff8e14
    e758:	1fff8e1c 	.word	0x1fff8e1c

0000e75c <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
    e75c:	b510      	push	{r4, lr}
    e75e:	b086      	sub	sp, #24
    e760:	4604      	mov	r4, r0
    e762:	4608      	mov	r0, r1
    e764:	4611      	mov	r1, r2
    e766:	461a      	mov	r2, r3
    e768:	4623      	mov	r3, r4
    e76a:	f88d 300f 	strb.w	r3, [sp, #15]
    e76e:	4603      	mov	r3, r0
    e770:	f88d 300e 	strb.w	r3, [sp, #14]
    e774:	460b      	mov	r3, r1
    e776:	f8ad 300c 	strh.w	r3, [sp, #12]
    e77a:	4613      	mov	r3, r2
    e77c:	f8ad 300a 	strh.w	r3, [sp, #10]
        }
    }
    DevAssert(RetVal != FALSE);

#endif
    PairId = Channel >> 1U;
    e780:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e784:	085b      	lsrs	r3, r3, #1
    e786:	f88d 3016 	strb.w	r3, [sp, #22]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
    e78a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e78e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    e792:	492d      	ldr	r1, [pc, #180]	; (e848 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xec>)
    e794:	0092      	lsls	r2, r2, #2
    e796:	4413      	add	r3, r2
    e798:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    e79c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    e7a0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e7a4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e7a8:	4928      	ldr	r1, [pc, #160]	; (e84c <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf0>)
    e7aa:	00d2      	lsls	r2, r2, #3
    e7ac:	4413      	add	r3, r2
    e7ae:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    e7b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
    e7b6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e7ba:	f8ad 3014 	strh.w	r3, [sp, #20]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
    e7be:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    e7c2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    e7c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e7ca:	4618      	mov	r0, r3
    e7cc:	f7fe fbc4 	bl	cf58 <Ftm_Pwm_Ip_CalculatePhaseShift>
    e7d0:	4603      	mov	r3, r0
    e7d2:	f8ad 3012 	strh.w	r3, [sp, #18]

    if (TRUE == SyncUpdate)
    e7d6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e7da:	2b00      	cmp	r3, #0
    e7dc:	d003      	beq.n	e7e6 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x8a>
    {
        SoftwareTrigger = FALSE;
    e7de:	2300      	movs	r3, #0
    e7e0:	f88d 3017 	strb.w	r3, [sp, #23]
    e7e4:	e002      	b.n	e7ec <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
    }
    else
    {
        SoftwareTrigger = TRUE;
    e7e6:	2301      	movs	r3, #1
    e7e8:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    e7ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e7f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e7f4:	4916      	ldr	r1, [pc, #88]	; (e850 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    e7f6:	00d2      	lsls	r2, r2, #3
    e7f8:	4413      	add	r3, r2
    e7fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    e7fe:	2b02      	cmp	r3, #2
    e800:	d111      	bne.n	e826 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xca>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    e802:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e806:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e80a:	4911      	ldr	r1, [pc, #68]	; (e850 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    e80c:	00d2      	lsls	r2, r2, #3
    e80e:	4413      	add	r3, r2
    e810:	2201      	movs	r2, #1
    e812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    e816:	f89d 100e 	ldrb.w	r1, [sp, #14]
    e81a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    e81e:	2300      	movs	r3, #0
    e820:	2200      	movs	r2, #0
    e822:	f7ff fb25 	bl	de70 <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    e826:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    e82a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e82e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    e832:	f89d 000f 	ldrb.w	r0, [sp, #15]
    e836:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e83a:	9300      	str	r3, [sp, #0]
    e83c:	4623      	mov	r3, r4
    e83e:	f7ff fbdd 	bl	dffc <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
    e842:	bf00      	nop
    e844:	b006      	add	sp, #24
    e846:	bd10      	pop	{r4, pc}
    e848:	1fff8e5c 	.word	0x1fff8e5c
    e84c:	1fff8e1c 	.word	0x1fff8e1c
    e850:	1fff8fec 	.word	0x1fff8fec

0000e854 <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
    e854:	b500      	push	{lr}
    e856:	b085      	sub	sp, #20
    e858:	4603      	mov	r3, r0
    e85a:	9100      	str	r1, [sp, #0]
    e85c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e860:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e864:	4a07      	ldr	r2, [pc, #28]	; (e884 <Ftm_Pwm_Ip_DisableTrigger+0x30>)
    e866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e86a:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
    e86c:	f006 f928 	bl	14ac0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
    e870:	9900      	ldr	r1, [sp, #0]
    e872:	9803      	ldr	r0, [sp, #12]
    e874:	f7fd fdea 	bl	c44c <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
    e878:	f006 f94e 	bl	14b18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
    e87c:	bf00      	nop
    e87e:	b005      	add	sp, #20
    e880:	f85d fb04 	ldr.w	pc, [sp], #4
    e884:	0001648c 	.word	0x0001648c

0000e888 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
    e888:	b500      	push	{lr}
    e88a:	b085      	sub	sp, #20
    e88c:	4603      	mov	r3, r0
    e88e:	9100      	str	r1, [sp, #0]
    e890:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e894:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e898:	4a07      	ldr	r2, [pc, #28]	; (e8b8 <Ftm_Pwm_Ip_EnableTrigger+0x30>)
    e89a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e89e:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
    e8a0:	f006 f960 	bl	14b64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
    e8a4:	9900      	ldr	r1, [sp, #0]
    e8a6:	9803      	ldr	r0, [sp, #12]
    e8a8:	f7fd fddd 	bl	c466 <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
    e8ac:	f006 f986 	bl	14bbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
    e8b0:	bf00      	nop
    e8b2:	b005      	add	sp, #20
    e8b4:	f85d fb04 	ldr.w	pc, [sp], #4
    e8b8:	0001648c 	.word	0x0001648c

0000e8bc <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
    e8bc:	b500      	push	{lr}
    e8be:	b085      	sub	sp, #20
    e8c0:	4603      	mov	r3, r0
    e8c2:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e8c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e8ca:	4a08      	ldr	r2, [pc, #32]	; (e8ec <Ftm_Pwm_Ip_SyncUpdate+0x30>)
    e8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8d0:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
    e8d2:	f006 f999 	bl	14c08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    e8d6:	2101      	movs	r1, #1
    e8d8:	9803      	ldr	r0, [sp, #12]
    e8da:	f7fd fc17 	bl	c10c <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
    e8de:	f006 f9bf 	bl	14c60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
    e8e2:	bf00      	nop
    e8e4:	b005      	add	sp, #20
    e8e6:	f85d fb04 	ldr.w	pc, [sp], #4
    e8ea:	bf00      	nop
    e8ec:	0001648c 	.word	0x0001648c

0000e8f0 <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
    e8f0:	b500      	push	{lr}
    e8f2:	b085      	sub	sp, #20
    e8f4:	4603      	mov	r3, r0
    e8f6:	f88d 3007 	strb.w	r3, [sp, #7]
    e8fa:	460b      	mov	r3, r1
    e8fc:	f88d 3006 	strb.w	r3, [sp, #6]
    e900:	4613      	mov	r3, r2
    e902:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e906:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e90a:	4a17      	ldr	r2, [pc, #92]	; (e968 <Ftm_Pwm_Ip_SetChannelDeadTime+0x78>)
    e90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e910:	9303      	str	r3, [sp, #12]
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
    e912:	f006 f9cb 	bl	14cac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
    e916:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e91a:	2b3f      	cmp	r3, #63	; 0x3f
    e91c:	d80b      	bhi.n	e936 <Ftm_Pwm_Ip_SetChannelDeadTime+0x46>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
    e91e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e922:	b2db      	uxtb	r3, r3
    e924:	4619      	mov	r1, r3
    e926:	9803      	ldr	r0, [sp, #12]
    e928:	f7fd fd42 	bl	c3b0 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    e92c:	2100      	movs	r1, #0
    e92e:	9803      	ldr	r0, [sp, #12]
    e930:	f7fd fd62 	bl	c3f8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    e934:	e012      	b.n	e95c <Ftm_Pwm_Ip_SetChannelDeadTime+0x6c>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
    e936:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e93a:	b2db      	uxtb	r3, r3
    e93c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e940:	b2db      	uxtb	r3, r3
    e942:	4619      	mov	r1, r3
    e944:	9803      	ldr	r0, [sp, #12]
    e946:	f7fd fd33 	bl	c3b0 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
    e94a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e94e:	099b      	lsrs	r3, r3, #6
    e950:	b29b      	uxth	r3, r3
    e952:	b2db      	uxtb	r3, r3
    e954:	4619      	mov	r1, r3
    e956:	9803      	ldr	r0, [sp, #12]
    e958:	f7fd fd4e 	bl	c3f8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
    e95c:	f006 f9d2 	bl	14d04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
    e960:	bf00      	nop
    e962:	b005      	add	sp, #20
    e964:	f85d fb04 	ldr.w	pc, [sp], #4
    e968:	0001648c 	.word	0x0001648c

0000e96c <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
    e96c:	b082      	sub	sp, #8
    e96e:	9001      	str	r0, [sp, #4]
    e970:	460b      	mov	r3, r1
    e972:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
    e976:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
    e97a:	4618      	mov	r0, r3
    e97c:	b002      	add	sp, #8
    e97e:	4770      	bx	lr

0000e980 <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
    e980:	b510      	push	{r4, lr}
    e982:	b084      	sub	sp, #16
    e984:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    e986:	2300      	movs	r3, #0
    e988:	9302      	str	r3, [sp, #8]
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
    e98a:	493e      	ldr	r1, [pc, #248]	; (ea84 <Pwm_Init+0x104>)
    e98c:	9a02      	ldr	r2, [sp, #8]
    e98e:	4613      	mov	r3, r2
    e990:	009b      	lsls	r3, r3, #2
    e992:	4413      	add	r3, r2
    e994:	009b      	lsls	r3, r3, #2
    e996:	440b      	add	r3, r1
    e998:	9a01      	ldr	r2, [sp, #4]
    e99a:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    e99c:	2300      	movs	r3, #0
    e99e:	f88d 300f 	strb.w	r3, [sp, #15]
    e9a2:	e017      	b.n	e9d4 <Pwm_Init+0x54>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
    e9a4:	4937      	ldr	r1, [pc, #220]	; (ea84 <Pwm_Init+0x104>)
    e9a6:	9a02      	ldr	r2, [sp, #8]
    e9a8:	4613      	mov	r3, r2
    e9aa:	009b      	lsls	r3, r3, #2
    e9ac:	4413      	add	r3, r2
    e9ae:	009b      	lsls	r3, r3, #2
    e9b0:	440b      	add	r3, r1
    e9b2:	681b      	ldr	r3, [r3, #0]
    e9b4:	68d9      	ldr	r1, [r3, #12]
    e9b6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e9ba:	4613      	mov	r3, r2
    e9bc:	005b      	lsls	r3, r3, #1
    e9be:	4413      	add	r3, r2
    e9c0:	009b      	lsls	r3, r3, #2
    e9c2:	440b      	add	r3, r1
    e9c4:	4618      	mov	r0, r3
    e9c6:	f000 f9cd 	bl	ed64 <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    e9ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e9ce:	3301      	adds	r3, #1
    e9d0:	f88d 300f 	strb.w	r3, [sp, #15]
    e9d4:	492b      	ldr	r1, [pc, #172]	; (ea84 <Pwm_Init+0x104>)
    e9d6:	9a02      	ldr	r2, [sp, #8]
    e9d8:	4613      	mov	r3, r2
    e9da:	009b      	lsls	r3, r3, #2
    e9dc:	4413      	add	r3, r2
    e9de:	009b      	lsls	r3, r3, #2
    e9e0:	440b      	add	r3, r1
    e9e2:	681b      	ldr	r3, [r3, #0]
    e9e4:	7a1b      	ldrb	r3, [r3, #8]
    e9e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e9ea:	429a      	cmp	r2, r3
    e9ec:	d3da      	bcc.n	e9a4 <Pwm_Init+0x24>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    e9ee:	2300      	movs	r3, #0
    e9f0:	f88d 300f 	strb.w	r3, [sp, #15]
    e9f4:	e034      	b.n	ea60 <Pwm_Init+0xe0>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
    e9f6:	4923      	ldr	r1, [pc, #140]	; (ea84 <Pwm_Init+0x104>)
    e9f8:	9a02      	ldr	r2, [sp, #8]
    e9fa:	4613      	mov	r3, r2
    e9fc:	009b      	lsls	r3, r3, #2
    e9fe:	4413      	add	r3, r2
    ea00:	009b      	lsls	r3, r3, #2
    ea02:	440b      	add	r3, r1
    ea04:	681b      	ldr	r3, [r3, #0]
    ea06:	6859      	ldr	r1, [r3, #4]
    ea08:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ea0c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ea10:	4613      	mov	r3, r2
    ea12:	005b      	lsls	r3, r3, #1
    ea14:	4413      	add	r3, r2
    ea16:	00db      	lsls	r3, r3, #3
    ea18:	4419      	add	r1, r3
    ea1a:	4c1a      	ldr	r4, [pc, #104]	; (ea84 <Pwm_Init+0x104>)
    ea1c:	9a02      	ldr	r2, [sp, #8]
    ea1e:	4613      	mov	r3, r2
    ea20:	009b      	lsls	r3, r3, #2
    ea22:	4413      	add	r3, r2
    ea24:	4403      	add	r3, r0
    ea26:	3302      	adds	r3, #2
    ea28:	009b      	lsls	r3, r3, #2
    ea2a:	4423      	add	r3, r4
    ea2c:	6059      	str	r1, [r3, #4]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
    ea2e:	4915      	ldr	r1, [pc, #84]	; (ea84 <Pwm_Init+0x104>)
    ea30:	9a02      	ldr	r2, [sp, #8]
    ea32:	4613      	mov	r3, r2
    ea34:	009b      	lsls	r3, r3, #2
    ea36:	4413      	add	r3, r2
    ea38:	009b      	lsls	r3, r3, #2
    ea3a:	440b      	add	r3, r1
    ea3c:	681b      	ldr	r3, [r3, #0]
    ea3e:	6859      	ldr	r1, [r3, #4]
    ea40:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ea44:	4613      	mov	r3, r2
    ea46:	005b      	lsls	r3, r3, #1
    ea48:	4413      	add	r3, r2
    ea4a:	00db      	lsls	r3, r3, #3
    ea4c:	3308      	adds	r3, #8
    ea4e:	440b      	add	r3, r1
    ea50:	4618      	mov	r0, r3
    ea52:	f000 f965 	bl	ed20 <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    ea56:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ea5a:	3301      	adds	r3, #1
    ea5c:	f88d 300f 	strb.w	r3, [sp, #15]
    ea60:	4908      	ldr	r1, [pc, #32]	; (ea84 <Pwm_Init+0x104>)
    ea62:	9a02      	ldr	r2, [sp, #8]
    ea64:	4613      	mov	r3, r2
    ea66:	009b      	lsls	r3, r3, #2
    ea68:	4413      	add	r3, r2
    ea6a:	009b      	lsls	r3, r3, #2
    ea6c:	440b      	add	r3, r1
    ea6e:	681b      	ldr	r3, [r3, #0]
    ea70:	781b      	ldrb	r3, [r3, #0]
    ea72:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ea76:	429a      	cmp	r2, r3
    ea78:	d3bd      	bcc.n	e9f6 <Pwm_Init+0x76>
#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
#endif
}
    ea7a:	bf00      	nop
    ea7c:	bf00      	nop
    ea7e:	b004      	add	sp, #16
    ea80:	bd10      	pop	{r4, pc}
    ea82:	bf00      	nop
    ea84:	1fff8b38 	.word	0x1fff8b38

0000ea88 <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
    ea88:	b500      	push	{lr}
    ea8a:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ea8c:	2300      	movs	r3, #0
    ea8e:	9302      	str	r3, [sp, #8]
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    ea90:	2300      	movs	r3, #0
    ea92:	f88d 300f 	strb.w	r3, [sp, #15]
    ea96:	e02a      	b.n	eaee <Pwm_DeInit+0x66>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
    ea98:	4945      	ldr	r1, [pc, #276]	; (ebb0 <Pwm_DeInit+0x128>)
    ea9a:	9a02      	ldr	r2, [sp, #8]
    ea9c:	4613      	mov	r3, r2
    ea9e:	009b      	lsls	r3, r3, #2
    eaa0:	4413      	add	r3, r2
    eaa2:	009b      	lsls	r3, r3, #2
    eaa4:	440b      	add	r3, r1
    eaa6:	330c      	adds	r3, #12
    eaa8:	6819      	ldr	r1, [r3, #0]
    eaaa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eaae:	4613      	mov	r3, r2
    eab0:	005b      	lsls	r3, r3, #1
    eab2:	4413      	add	r3, r2
    eab4:	00db      	lsls	r3, r3, #3
    eab6:	440b      	add	r3, r1
    eab8:	f103 0008 	add.w	r0, r3, #8
    eabc:	493c      	ldr	r1, [pc, #240]	; (ebb0 <Pwm_DeInit+0x128>)
    eabe:	9a02      	ldr	r2, [sp, #8]
    eac0:	4613      	mov	r3, r2
    eac2:	009b      	lsls	r3, r3, #2
    eac4:	4413      	add	r3, r2
    eac6:	009b      	lsls	r3, r3, #2
    eac8:	440b      	add	r3, r1
    eaca:	330c      	adds	r3, #12
    eacc:	6819      	ldr	r1, [r3, #0]
    eace:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ead2:	4613      	mov	r3, r2
    ead4:	005b      	lsls	r3, r3, #1
    ead6:	4413      	add	r3, r2
    ead8:	00db      	lsls	r3, r3, #3
    eada:	440b      	add	r3, r1
    eadc:	695b      	ldr	r3, [r3, #20]
    eade:	4619      	mov	r1, r3
    eae0:	f000 f996 	bl	ee10 <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    eae4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eae8:	3301      	adds	r3, #1
    eaea:	f88d 300f 	strb.w	r3, [sp, #15]
    eaee:	4930      	ldr	r1, [pc, #192]	; (ebb0 <Pwm_DeInit+0x128>)
    eaf0:	9a02      	ldr	r2, [sp, #8]
    eaf2:	4613      	mov	r3, r2
    eaf4:	009b      	lsls	r3, r3, #2
    eaf6:	4413      	add	r3, r2
    eaf8:	009b      	lsls	r3, r3, #2
    eafa:	440b      	add	r3, r1
    eafc:	681b      	ldr	r3, [r3, #0]
    eafe:	781b      	ldrb	r3, [r3, #0]
    eb00:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eb04:	429a      	cmp	r2, r3
    eb06:	d3c7      	bcc.n	ea98 <Pwm_DeInit+0x10>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
    eb08:	4929      	ldr	r1, [pc, #164]	; (ebb0 <Pwm_DeInit+0x128>)
    eb0a:	9a02      	ldr	r2, [sp, #8]
    eb0c:	4613      	mov	r3, r2
    eb0e:	009b      	lsls	r3, r3, #2
    eb10:	4413      	add	r3, r2
    eb12:	009b      	lsls	r3, r3, #2
    eb14:	440b      	add	r3, r1
    eb16:	681b      	ldr	r3, [r3, #0]
    eb18:	9301      	str	r3, [sp, #4]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    eb1a:	2300      	movs	r3, #0
    eb1c:	f88d 300f 	strb.w	r3, [sp, #15]
    eb20:	e010      	b.n	eb44 <Pwm_DeInit+0xbc>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
    eb22:	9b01      	ldr	r3, [sp, #4]
    eb24:	68d9      	ldr	r1, [r3, #12]
    eb26:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eb2a:	4613      	mov	r3, r2
    eb2c:	005b      	lsls	r3, r3, #1
    eb2e:	4413      	add	r3, r2
    eb30:	009b      	lsls	r3, r3, #2
    eb32:	440b      	add	r3, r1
    eb34:	4618      	mov	r0, r3
    eb36:	f000 f98b 	bl	ee50 <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    eb3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eb3e:	3301      	adds	r3, #1
    eb40:	f88d 300f 	strb.w	r3, [sp, #15]
    eb44:	491a      	ldr	r1, [pc, #104]	; (ebb0 <Pwm_DeInit+0x128>)
    eb46:	9a02      	ldr	r2, [sp, #8]
    eb48:	4613      	mov	r3, r2
    eb4a:	009b      	lsls	r3, r3, #2
    eb4c:	4413      	add	r3, r2
    eb4e:	009b      	lsls	r3, r3, #2
    eb50:	440b      	add	r3, r1
    eb52:	681b      	ldr	r3, [r3, #0]
    eb54:	7a1b      	ldrb	r3, [r3, #8]
    eb56:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eb5a:	429a      	cmp	r2, r3
    eb5c:	d3e1      	bcc.n	eb22 <Pwm_DeInit+0x9a>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
    eb5e:	4914      	ldr	r1, [pc, #80]	; (ebb0 <Pwm_DeInit+0x128>)
    eb60:	9a02      	ldr	r2, [sp, #8]
    eb62:	4613      	mov	r3, r2
    eb64:	009b      	lsls	r3, r3, #2
    eb66:	4413      	add	r3, r2
    eb68:	009b      	lsls	r3, r3, #2
    eb6a:	440b      	add	r3, r1
    eb6c:	2200      	movs	r2, #0
    eb6e:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    eb70:	2300      	movs	r3, #0
    eb72:	f88d 300f 	strb.w	r3, [sp, #15]
    eb76:	e011      	b.n	eb9c <Pwm_DeInit+0x114>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
    eb78:	f89d 100f 	ldrb.w	r1, [sp, #15]
    eb7c:	480c      	ldr	r0, [pc, #48]	; (ebb0 <Pwm_DeInit+0x128>)
    eb7e:	9a02      	ldr	r2, [sp, #8]
    eb80:	4613      	mov	r3, r2
    eb82:	009b      	lsls	r3, r3, #2
    eb84:	4413      	add	r3, r2
    eb86:	440b      	add	r3, r1
    eb88:	3302      	adds	r3, #2
    eb8a:	009b      	lsls	r3, r3, #2
    eb8c:	4403      	add	r3, r0
    eb8e:	2200      	movs	r2, #0
    eb90:	605a      	str	r2, [r3, #4]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    eb92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eb96:	3301      	adds	r3, #1
    eb98:	f88d 300f 	strb.w	r3, [sp, #15]
    eb9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eba0:	2b00      	cmp	r3, #0
    eba2:	d0e9      	beq.n	eb78 <Pwm_DeInit+0xf0>
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
#endif

}
    eba4:	bf00      	nop
    eba6:	bf00      	nop
    eba8:	b005      	add	sp, #20
    ebaa:	f85d fb04 	ldr.w	pc, [sp], #4
    ebae:	bf00      	nop
    ebb0:	1fff8b38 	.word	0x1fff8b38

0000ebb4 <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
    ebb4:	b500      	push	{lr}
    ebb6:	b087      	sub	sp, #28
    ebb8:	4603      	mov	r3, r0
    ebba:	460a      	mov	r2, r1
    ebbc:	f88d 3007 	strb.w	r3, [sp, #7]
    ebc0:	4613      	mov	r3, r2
    ebc2:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
    ebc6:	2300      	movs	r3, #0
    ebc8:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ebcc:	2300      	movs	r3, #0
    ebce:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    ebd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ebd4:	4619      	mov	r1, r3
    ebd6:	9804      	ldr	r0, [sp, #16]
    ebd8:	f7ff fec8 	bl	e96c <Pwm_GetPartitionChannelIdx>
    ebdc:	4603      	mov	r3, r0
    ebde:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    ebe2:	490f      	ldr	r1, [pc, #60]	; (ec20 <Pwm_SetDutyCycle+0x6c>)
    ebe4:	9a04      	ldr	r2, [sp, #16]
    ebe6:	4613      	mov	r3, r2
    ebe8:	009b      	lsls	r3, r3, #2
    ebea:	4413      	add	r3, r2
    ebec:	009b      	lsls	r3, r3, #2
    ebee:	440b      	add	r3, r1
    ebf0:	330c      	adds	r3, #12
    ebf2:	6819      	ldr	r1, [r3, #0]
    ebf4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ebf8:	4613      	mov	r3, r2
    ebfa:	005b      	lsls	r3, r3, #1
    ebfc:	4413      	add	r3, r2
    ebfe:	00db      	lsls	r3, r3, #3
    ec00:	440b      	add	r3, r1
    ec02:	f103 0208 	add.w	r2, r3, #8
    ec06:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ec0a:	4611      	mov	r1, r2
    ec0c:	4618      	mov	r0, r3
    ec0e:	f000 f93b 	bl	ee88 <Pwm_Ipw_SetDutyCycle>
    ec12:	4603      	mov	r3, r0
    ec14:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    ec18:	bf00      	nop
    ec1a:	b007      	add	sp, #28
    ec1c:	f85d fb04 	ldr.w	pc, [sp], #4
    ec20:	1fff8b38 	.word	0x1fff8b38

0000ec24 <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
    ec24:	b500      	push	{lr}
    ec26:	b085      	sub	sp, #20
    ec28:	4603      	mov	r3, r0
    ec2a:	f88d 3007 	strb.w	r3, [sp, #7]
    ec2e:	460b      	mov	r3, r1
    ec30:	f8ad 3004 	strh.w	r3, [sp, #4]
    ec34:	4613      	mov	r3, r2
    ec36:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ec3a:	2300      	movs	r3, #0
    ec3c:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    ec3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec42:	4619      	mov	r1, r3
    ec44:	9803      	ldr	r0, [sp, #12]
    ec46:	f7ff fe91 	bl	e96c <Pwm_GetPartitionChannelIdx>
    ec4a:	4603      	mov	r3, r0
    ec4c:	f88d 300b 	strb.w	r3, [sp, #11]
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    ec50:	490e      	ldr	r1, [pc, #56]	; (ec8c <Pwm_SetPeriodAndDuty+0x68>)
    ec52:	9a03      	ldr	r2, [sp, #12]
    ec54:	4613      	mov	r3, r2
    ec56:	009b      	lsls	r3, r3, #2
    ec58:	4413      	add	r3, r2
    ec5a:	009b      	lsls	r3, r3, #2
    ec5c:	440b      	add	r3, r1
    ec5e:	330c      	adds	r3, #12
    ec60:	6819      	ldr	r1, [r3, #0]
    ec62:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ec66:	4613      	mov	r3, r2
    ec68:	005b      	lsls	r3, r3, #1
    ec6a:	4413      	add	r3, r2
    ec6c:	00db      	lsls	r3, r3, #3
    ec6e:	440b      	add	r3, r1
    ec70:	f103 0208 	add.w	r2, r3, #8
    ec74:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ec78:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ec7c:	4618      	mov	r0, r3
    ec7e:	f000 f94f 	bl	ef20 <Pwm_Ipw_SetPeriodAndDuty>
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    ec82:	bf00      	nop
    ec84:	b005      	add	sp, #20
    ec86:	f85d fb04 	ldr.w	pc, [sp], #4
    ec8a:	bf00      	nop
    ec8c:	1fff8b38 	.word	0x1fff8b38

0000ec90 <Pwm_SetOutputToIdle>:
*
* @implements   Pwm_SetOutputToIdle_Activity
*
*/
void Pwm_SetOutputToIdle(Pwm_ChannelType ChannelNumber)
{
    ec90:	b500      	push	{lr}
    ec92:	b085      	sub	sp, #20
    ec94:	4603      	mov	r3, r0
    ec96:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ec9a:	2300      	movs	r3, #0
    ec9c:	9303      	str	r3, [sp, #12]
#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETOUTPUTTOIDLE_ID))
    {
#endif

        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    ec9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eca2:	4619      	mov	r1, r3
    eca4:	9803      	ldr	r0, [sp, #12]
    eca6:	f7ff fe61 	bl	e96c <Pwm_GetPartitionChannelIdx>
    ecaa:	4603      	mov	r3, r0
    ecac:	f88d 300b 	strb.w	r3, [sp, #11]
        if((Std_ReturnType)E_OK == Pwm_ValidateSetOutPutToIdle(CoreId, PartitionChannelIdx))
        {
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

            /* All validations passed. Here starts the actual functional code of the function */
            Pwm_Ipw_SetOutputToIdle((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].ChannelIdleState, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    ecb0:	491a      	ldr	r1, [pc, #104]	; (ed1c <Pwm_SetOutputToIdle+0x8c>)
    ecb2:	9a03      	ldr	r2, [sp, #12]
    ecb4:	4613      	mov	r3, r2
    ecb6:	009b      	lsls	r3, r3, #2
    ecb8:	4413      	add	r3, r2
    ecba:	009b      	lsls	r3, r3, #2
    ecbc:	440b      	add	r3, r1
    ecbe:	330c      	adds	r3, #12
    ecc0:	6819      	ldr	r1, [r3, #0]
    ecc2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ecc6:	4613      	mov	r3, r2
    ecc8:	005b      	lsls	r3, r3, #1
    ecca:	4413      	add	r3, r2
    eccc:	00db      	lsls	r3, r3, #3
    ecce:	440b      	add	r3, r1
    ecd0:	6958      	ldr	r0, [r3, #20]
    ecd2:	4912      	ldr	r1, [pc, #72]	; (ed1c <Pwm_SetOutputToIdle+0x8c>)
    ecd4:	9a03      	ldr	r2, [sp, #12]
    ecd6:	4613      	mov	r3, r2
    ecd8:	009b      	lsls	r3, r3, #2
    ecda:	4413      	add	r3, r2
    ecdc:	009b      	lsls	r3, r3, #2
    ecde:	440b      	add	r3, r1
    ece0:	330c      	adds	r3, #12
    ece2:	6819      	ldr	r1, [r3, #0]
    ece4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ece8:	4613      	mov	r3, r2
    ecea:	005b      	lsls	r3, r3, #1
    ecec:	4413      	add	r3, r2
    ecee:	00db      	lsls	r3, r3, #3
    ecf0:	440b      	add	r3, r1
    ecf2:	3308      	adds	r3, #8
    ecf4:	4619      	mov	r1, r3
    ecf6:	f000 f959 	bl	efac <Pwm_Ipw_SetOutputToIdle>

            /* Mark the channel in idle output mode */
            Pwm_aState[CoreId].PwmChannelIdleState[PartitionChannelIdx] = TRUE;
    ecfa:	f89d 100b 	ldrb.w	r1, [sp, #11]
    ecfe:	4807      	ldr	r0, [pc, #28]	; (ed1c <Pwm_SetOutputToIdle+0x8c>)
    ed00:	9a03      	ldr	r2, [sp, #12]
    ed02:	4613      	mov	r3, r2
    ed04:	009b      	lsls	r3, r3, #2
    ed06:	4413      	add	r3, r2
    ed08:	009b      	lsls	r3, r3, #2
    ed0a:	4403      	add	r3, r0
    ed0c:	440b      	add	r3, r1
    ed0e:	3310      	adds	r3, #16
    ed10:	2201      	movs	r2, #1
    ed12:	701a      	strb	r2, [r3, #0]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    ed14:	bf00      	nop
    ed16:	b005      	add	sp, #20
    ed18:	f85d fb04 	ldr.w	pc, [sp], #4
    ed1c:	1fff8b38 	.word	0x1fff8b38

0000ed20 <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
    ed20:	b410      	push	{r4}
    ed22:	b083      	sub	sp, #12
    ed24:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
    ed26:	9b01      	ldr	r3, [sp, #4]
    ed28:	681b      	ldr	r3, [r3, #0]
    ed2a:	2b00      	cmp	r3, #0
    ed2c:	d010      	beq.n	ed50 <Pwm_Ipw_Init+0x30>
    ed2e:	2b01      	cmp	r3, #1
    ed30:	d110      	bne.n	ed54 <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
    ed32:	9b01      	ldr	r3, [sp, #4]
    ed34:	7a1b      	ldrb	r3, [r3, #8]
    ed36:	461c      	mov	r4, r3
    ed38:	9b01      	ldr	r3, [sp, #4]
    ed3a:	685b      	ldr	r3, [r3, #4]
    ed3c:	781b      	ldrb	r3, [r3, #0]
    ed3e:	4618      	mov	r0, r3
    ed40:	9b01      	ldr	r3, [sp, #4]
    ed42:	8959      	ldrh	r1, [r3, #10]
    ed44:	4a06      	ldr	r2, [pc, #24]	; (ed60 <Pwm_Ipw_Init+0x40>)
    ed46:	00e3      	lsls	r3, r4, #3
    ed48:	4403      	add	r3, r0
    ed4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    ed4e:	e002      	b.n	ed56 <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ed50:	bf00      	nop
    ed52:	e000      	b.n	ed56 <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
    ed54:	bf00      	nop
    }
}
    ed56:	bf00      	nop
    ed58:	b003      	add	sp, #12
    ed5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ed5e:	4770      	bx	lr
    ed60:	1fff91bc 	.word	0x1fff91bc

0000ed64 <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    ed64:	b500      	push	{lr}
    ed66:	b085      	sub	sp, #20
    ed68:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
    ed6a:	2300      	movs	r3, #0
    ed6c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
    ed70:	2300      	movs	r3, #0
    ed72:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
    ed76:	9b01      	ldr	r3, [sp, #4]
    ed78:	685b      	ldr	r3, [r3, #4]
    ed7a:	2b00      	cmp	r3, #0
    ed7c:	d03c      	beq.n	edf8 <Pwm_Ipw_InitInstance+0x94>
    ed7e:	2b01      	cmp	r3, #1
    ed80:	d13c      	bne.n	edfc <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    ed82:	9b01      	ldr	r3, [sp, #4]
    ed84:	689b      	ldr	r3, [r3, #8]
    ed86:	2b00      	cmp	r3, #0
    ed88:	d03a      	beq.n	ee00 <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
    ed8a:	9b01      	ldr	r3, [sp, #4]
    ed8c:	781a      	ldrb	r2, [r3, #0]
    ed8e:	9b01      	ldr	r3, [sp, #4]
    ed90:	689b      	ldr	r3, [r3, #8]
    ed92:	4619      	mov	r1, r3
    ed94:	4610      	mov	r0, r2
    ed96:	f7fe fe8f 	bl	dab8 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    ed9a:	2300      	movs	r3, #0
    ed9c:	f88d 300f 	strb.w	r3, [sp, #15]
    eda0:	e022      	b.n	ede8 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
    eda2:	9b01      	ldr	r3, [sp, #4]
    eda4:	689b      	ldr	r3, [r3, #8]
    eda6:	685a      	ldr	r2, [r3, #4]
    eda8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    edac:	009b      	lsls	r3, r3, #2
    edae:	4413      	add	r3, r2
    edb0:	681b      	ldr	r3, [r3, #0]
    edb2:	781b      	ldrb	r3, [r3, #0]
    edb4:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
    edb8:	9b01      	ldr	r3, [sp, #4]
    edba:	689b      	ldr	r3, [r3, #8]
    edbc:	685a      	ldr	r2, [r3, #4]
    edbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    edc2:	009b      	lsls	r3, r3, #2
    edc4:	4413      	add	r3, r2
    edc6:	681a      	ldr	r2, [r3, #0]
    edc8:	9b01      	ldr	r3, [sp, #4]
    edca:	781b      	ldrb	r3, [r3, #0]
    edcc:	4619      	mov	r1, r3
    edce:	f89d 300e 	ldrb.w	r3, [sp, #14]
    edd2:	6a12      	ldr	r2, [r2, #32]
    edd4:	480d      	ldr	r0, [pc, #52]	; (ee0c <Pwm_Ipw_InitInstance+0xa8>)
    edd6:	00c9      	lsls	r1, r1, #3
    edd8:	440b      	add	r3, r1
    edda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    edde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ede2:	3301      	adds	r3, #1
    ede4:	f88d 300f 	strb.w	r3, [sp, #15]
    ede8:	9b01      	ldr	r3, [sp, #4]
    edea:	689b      	ldr	r3, [r3, #8]
    edec:	7a1b      	ldrb	r3, [r3, #8]
    edee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    edf2:	429a      	cmp	r2, r3
    edf4:	d3d5      	bcc.n	eda2 <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
    edf6:	e003      	b.n	ee00 <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    edf8:	bf00      	nop
    edfa:	e002      	b.n	ee02 <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
    edfc:	bf00      	nop
    edfe:	e000      	b.n	ee02 <Pwm_Ipw_InitInstance+0x9e>
            break;
    ee00:	bf00      	nop
    }
}
    ee02:	bf00      	nop
    ee04:	b005      	add	sp, #20
    ee06:	f85d fb04 	ldr.w	pc, [sp], #4
    ee0a:	bf00      	nop
    ee0c:	1fff913c 	.word	0x1fff913c

0000ee10 <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
    ee10:	b082      	sub	sp, #8
    ee12:	9001      	str	r0, [sp, #4]
    ee14:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
    ee16:	9b01      	ldr	r3, [sp, #4]
    ee18:	681b      	ldr	r3, [r3, #0]
    ee1a:	2b00      	cmp	r3, #0
    ee1c:	d00f      	beq.n	ee3e <Pwm_Ipw_DeInit+0x2e>
    ee1e:	2b01      	cmp	r3, #1
    ee20:	d10f      	bne.n	ee42 <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    ee22:	9b01      	ldr	r3, [sp, #4]
    ee24:	7a1b      	ldrb	r3, [r3, #8]
    ee26:	4618      	mov	r0, r3
    ee28:	9b01      	ldr	r3, [sp, #4]
    ee2a:	685b      	ldr	r3, [r3, #4]
    ee2c:	781b      	ldrb	r3, [r3, #0]
    ee2e:	4619      	mov	r1, r3
    ee30:	4a06      	ldr	r2, [pc, #24]	; (ee4c <Pwm_Ipw_DeInit+0x3c>)
    ee32:	00c3      	lsls	r3, r0, #3
    ee34:	440b      	add	r3, r1
    ee36:	2100      	movs	r1, #0
    ee38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    ee3c:	e002      	b.n	ee44 <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ee3e:	bf00      	nop
    ee40:	e000      	b.n	ee44 <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
    ee42:	bf00      	nop
    }
    (void) ChannelIdleState;

}
    ee44:	bf00      	nop
    ee46:	b002      	add	sp, #8
    ee48:	4770      	bx	lr
    ee4a:	bf00      	nop
    ee4c:	1fff91bc 	.word	0x1fff91bc

0000ee50 <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    ee50:	b500      	push	{lr}
    ee52:	b083      	sub	sp, #12
    ee54:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
    ee56:	9b01      	ldr	r3, [sp, #4]
    ee58:	685b      	ldr	r3, [r3, #4]
    ee5a:	2b00      	cmp	r3, #0
    ee5c:	d00b      	beq.n	ee76 <Pwm_Ipw_DeInitInstance+0x26>
    ee5e:	2b01      	cmp	r3, #1
    ee60:	d10b      	bne.n	ee7a <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    ee62:	9b01      	ldr	r3, [sp, #4]
    ee64:	689b      	ldr	r3, [r3, #8]
    ee66:	2b00      	cmp	r3, #0
    ee68:	d009      	beq.n	ee7e <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
    ee6a:	9b01      	ldr	r3, [sp, #4]
    ee6c:	781b      	ldrb	r3, [r3, #0]
    ee6e:	4618      	mov	r0, r3
    ee70:	f7fe fe80 	bl	db74 <Ftm_Pwm_Ip_DeInit>
            }
            break;
    ee74:	e003      	b.n	ee7e <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    ee76:	bf00      	nop
    ee78:	e002      	b.n	ee80 <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
    ee7a:	bf00      	nop
    ee7c:	e000      	b.n	ee80 <Pwm_Ipw_DeInitInstance+0x30>
            break;
    ee7e:	bf00      	nop
    }
}
    ee80:	bf00      	nop
    ee82:	b003      	add	sp, #12
    ee84:	f85d fb04 	ldr.w	pc, [sp], #4

0000ee88 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
    ee88:	b500      	push	{lr}
    ee8a:	b085      	sub	sp, #20
    ee8c:	4603      	mov	r3, r0
    ee8e:	9100      	str	r1, [sp, #0]
    ee90:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
    ee94:	2300      	movs	r3, #0
    ee96:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    ee9a:	2300      	movs	r3, #0
    ee9c:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
    eea0:	9b00      	ldr	r3, [sp, #0]
    eea2:	681b      	ldr	r3, [r3, #0]
    eea4:	2b00      	cmp	r3, #0
    eea6:	d02c      	beq.n	ef02 <Pwm_Ipw_SetDutyCycle+0x7a>
    eea8:	2b01      	cmp	r3, #1
    eeaa:	d12c      	bne.n	ef06 <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    eeac:	9b00      	ldr	r3, [sp, #0]
    eeae:	685b      	ldr	r3, [r3, #4]
    eeb0:	2b00      	cmp	r3, #0
    eeb2:	d02a      	beq.n	ef0a <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
    eeb4:	9b00      	ldr	r3, [sp, #0]
    eeb6:	7a1b      	ldrb	r3, [r3, #8]
    eeb8:	461a      	mov	r2, r3
    eeba:	4b17      	ldr	r3, [pc, #92]	; (ef18 <Pwm_Ipw_SetDutyCycle+0x90>)
    eebc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    eec0:	461a      	mov	r2, r3
    eec2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    eec6:	fb02 f303 	mul.w	r3, r2, r3
    eeca:	0bdb      	lsrs	r3, r3, #15
    eecc:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    eed0:	9b00      	ldr	r3, [sp, #0]
    eed2:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    eed4:	9b00      	ldr	r3, [sp, #0]
    eed6:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    eed8:	7819      	ldrb	r1, [r3, #0]
    eeda:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    eede:	2301      	movs	r3, #1
    eee0:	f7fe fe90 	bl	dc04 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    eee4:	9b00      	ldr	r3, [sp, #0]
    eee6:	7a1b      	ldrb	r3, [r3, #8]
    eee8:	4618      	mov	r0, r3
    eeea:	9b00      	ldr	r3, [sp, #0]
    eeec:	685b      	ldr	r3, [r3, #4]
    eeee:	781b      	ldrb	r3, [r3, #0]
    eef0:	461a      	mov	r2, r3
    eef2:	490a      	ldr	r1, [pc, #40]	; (ef1c <Pwm_Ipw_SetDutyCycle+0x94>)
    eef4:	00c3      	lsls	r3, r0, #3
    eef6:	4413      	add	r3, r2
    eef8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    eefc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    ef00:	e003      	b.n	ef0a <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ef02:	bf00      	nop
    ef04:	e002      	b.n	ef0c <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
    ef06:	bf00      	nop
    ef08:	e000      	b.n	ef0c <Pwm_Ipw_SetDutyCycle+0x84>
            break;
    ef0a:	bf00      	nop
    }

    return RetVal;
    ef0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    ef10:	4618      	mov	r0, r3
    ef12:	b005      	add	sp, #20
    ef14:	f85d fb04 	ldr.w	pc, [sp], #4
    ef18:	1fff8e14 	.word	0x1fff8e14
    ef1c:	1fff91bc 	.word	0x1fff91bc

0000ef20 <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
    ef20:	b510      	push	{r4, lr}
    ef22:	b086      	sub	sp, #24
    ef24:	4603      	mov	r3, r0
    ef26:	9202      	str	r2, [sp, #8]
    ef28:	f8ad 300e 	strh.w	r3, [sp, #14]
    ef2c:	460b      	mov	r3, r1
    ef2e:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    ef32:	2300      	movs	r3, #0
    ef34:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
    ef38:	9b02      	ldr	r3, [sp, #8]
    ef3a:	681b      	ldr	r3, [r3, #0]
    ef3c:	2b00      	cmp	r3, #0
    ef3e:	d02a      	beq.n	ef96 <Pwm_Ipw_SetPeriodAndDuty+0x76>
    ef40:	2b01      	cmp	r3, #1
    ef42:	d12a      	bne.n	ef9a <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    ef44:	9b02      	ldr	r3, [sp, #8]
    ef46:	685b      	ldr	r3, [r3, #4]
    ef48:	2b00      	cmp	r3, #0
    ef4a:	d028      	beq.n	ef9e <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
    ef4c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ef50:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ef54:	fb02 f303 	mul.w	r3, r2, r3
    ef58:	0bdb      	lsrs	r3, r3, #15
    ef5a:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    ef5e:	9b02      	ldr	r3, [sp, #8]
    ef60:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    ef62:	9b02      	ldr	r3, [sp, #8]
    ef64:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    ef66:	7819      	ldrb	r1, [r3, #0]
    ef68:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ef6c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ef70:	2401      	movs	r4, #1
    ef72:	9400      	str	r4, [sp, #0]
    ef74:	f7fe ff0c 	bl	dd90 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    ef78:	9b02      	ldr	r3, [sp, #8]
    ef7a:	7a1b      	ldrb	r3, [r3, #8]
    ef7c:	4618      	mov	r0, r3
    ef7e:	9b02      	ldr	r3, [sp, #8]
    ef80:	685b      	ldr	r3, [r3, #4]
    ef82:	781b      	ldrb	r3, [r3, #0]
    ef84:	461a      	mov	r2, r3
    ef86:	4908      	ldr	r1, [pc, #32]	; (efa8 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
    ef88:	00c3      	lsls	r3, r0, #3
    ef8a:	4413      	add	r3, r2
    ef8c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ef90:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    ef94:	e003      	b.n	ef9e <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ef96:	bf00      	nop
    ef98:	e002      	b.n	efa0 <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
    ef9a:	bf00      	nop
    ef9c:	e000      	b.n	efa0 <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
    ef9e:	bf00      	nop
    }
}
    efa0:	bf00      	nop
    efa2:	b006      	add	sp, #24
    efa4:	bd10      	pop	{r4, pc}
    efa6:	bf00      	nop
    efa8:	1fff91bc 	.word	0x1fff91bc

0000efac <Pwm_Ipw_SetOutputToIdle>:
*
* @return       void
*
*/
void Pwm_Ipw_SetOutputToIdle(const Pwm_OutputStateType IdleState, const Pwm_IpwChannelConfigType * const IpConfig)
{
    efac:	b500      	push	{lr}
    efae:	b085      	sub	sp, #20
    efb0:	9001      	str	r0, [sp, #4]
    efb2:	9100      	str	r1, [sp, #0]
#if (PWM_FTM_USED == STD_ON)
    uint8 Instance  =  IpConfig->ChannelInstanceId;
    efb4:	9b00      	ldr	r3, [sp, #0]
    efb6:	7a1b      	ldrb	r3, [r3, #8]
    efb8:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Channel   =  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId;
    efbc:	9b00      	ldr	r3, [sp, #0]
    efbe:	685b      	ldr	r3, [r3, #4]
    efc0:	781b      	ldrb	r3, [r3, #0]
    efc2:	f88d 300e 	strb.w	r3, [sp, #14]
#endif

    switch(IpConfig->ChannelType)
    efc6:	9b00      	ldr	r3, [sp, #0]
    efc8:	681b      	ldr	r3, [r3, #0]
    efca:	2b00      	cmp	r3, #0
    efcc:	d02e      	beq.n	f02c <Pwm_Ipw_SetOutputToIdle+0x80>
    efce:	2b01      	cmp	r3, #1
    efd0:	d12e      	bne.n	f030 <Pwm_Ipw_SetOutputToIdle+0x84>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if ((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    efd2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    efd6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    efda:	4919      	ldr	r1, [pc, #100]	; (f040 <Pwm_Ipw_SetOutputToIdle+0x94>)
    efdc:	00d2      	lsls	r2, r2, #3
    efde:	4413      	add	r3, r2
    efe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    efe4:	2b01      	cmp	r3, #1
    efe6:	d125      	bne.n	f034 <Pwm_Ipw_SetOutputToIdle+0x88>
            {
                /* update new state of channel */
                Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE;
    efe8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    efec:	f89d 300e 	ldrb.w	r3, [sp, #14]
    eff0:	4913      	ldr	r1, [pc, #76]	; (f040 <Pwm_Ipw_SetOutputToIdle+0x94>)
    eff2:	00d2      	lsls	r2, r2, #3
    eff4:	4413      	add	r3, r2
    eff6:	2202      	movs	r2, #2
    eff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                
                Ftm_Pwm_Ip_SwOutputControl(Instance,
                                           Channel,
                                           ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->InitOut,
    effc:	9b00      	ldr	r3, [sp, #0]
    effe:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_SwOutputControl(Instance,
    f000:	69da      	ldr	r2, [r3, #28]
    f002:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f006:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f00a:	2301      	movs	r3, #1
    f00c:	f7fe ff30 	bl	de70 <Ftm_Pwm_Ip_SwOutputControl>
                                           TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    f010:	9b00      	ldr	r3, [sp, #0]
    f012:	7a1b      	ldrb	r3, [r3, #8]
    f014:	4618      	mov	r0, r3
    f016:	9b00      	ldr	r3, [sp, #0]
    f018:	685b      	ldr	r3, [r3, #4]
    f01a:	781b      	ldrb	r3, [r3, #0]
    f01c:	4619      	mov	r1, r3
    f01e:	4a09      	ldr	r2, [pc, #36]	; (f044 <Pwm_Ipw_SetOutputToIdle+0x98>)
    f020:	00c3      	lsls	r3, r0, #3
    f022:	440b      	add	r3, r1
    f024:	2100      	movs	r1, #0
    f026:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            else
            {
                /* Do Nothing */
            }
            break;
    f02a:	e003      	b.n	f034 <Pwm_Ipw_SetOutputToIdle+0x88>
            /* Nothing to do. this feature is not supported for Flexio */
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    f02c:	bf00      	nop
    f02e:	e002      	b.n	f036 <Pwm_Ipw_SetOutputToIdle+0x8a>
        default:
            /* Nothing to do. */
            break;
    f030:	bf00      	nop
    f032:	e000      	b.n	f036 <Pwm_Ipw_SetOutputToIdle+0x8a>
            break;
    f034:	bf00      	nop
    }

    (void) IdleState;

}
    f036:	bf00      	nop
    f038:	b005      	add	sp, #20
    f03a:	f85d fb04 	ldr.w	pc, [sp], #4
    f03e:	bf00      	nop
    f040:	1fff8fec 	.word	0x1fff8fec
    f044:	1fff91bc 	.word	0x1fff91bc

0000f048 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
    f048:	b084      	sub	sp, #16
    f04a:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
    f04c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f050:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
    f052:	9b01      	ldr	r3, [sp, #4]
    f054:	681b      	ldr	r3, [r3, #0]
    f056:	2b01      	cmp	r3, #1
    f058:	d103      	bne.n	f062 <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
    f05a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    f05e:	9303      	str	r3, [sp, #12]
            break;
    f060:	e000      	b.n	f064 <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
    f062:	bf00      	nop
    }

    return RetVal;
    f064:	9b03      	ldr	r3, [sp, #12]
}
    f066:	4618      	mov	r0, r3
    f068:	b004      	add	sp, #16
    f06a:	4770      	bx	lr

0000f06c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    f06c:	b500      	push	{lr}
    f06e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f070:	f7f2 fb82 	bl	1778 <Sys_GetCoreID>
    f074:	4603      	mov	r3, r0
    f076:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    f078:	4a10      	ldr	r2, [pc, #64]	; (f0bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    f07a:	9b01      	ldr	r3, [sp, #4]
    f07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f080:	2b00      	cmp	r3, #0
    f082:	d10d      	bne.n	f0a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f084:	f7f1 fc24 	bl	8d0 <Adc_schm_read_msr>
    f088:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f08a:	9b00      	ldr	r3, [sp, #0]
    f08c:	f003 0301 	and.w	r3, r3, #1
    f090:	2b00      	cmp	r3, #0
    f092:	d100      	bne.n	f096 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f094:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    f096:	490a      	ldr	r1, [pc, #40]	; (f0c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    f098:	9b01      	ldr	r3, [sp, #4]
    f09a:	9a00      	ldr	r2, [sp, #0]
    f09c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    f0a0:	4a06      	ldr	r2, [pc, #24]	; (f0bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    f0a2:	9b01      	ldr	r3, [sp, #4]
    f0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0a8:	1c5a      	adds	r2, r3, #1
    f0aa:	4904      	ldr	r1, [pc, #16]	; (f0bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    f0ac:	9b01      	ldr	r3, [sp, #4]
    f0ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f0b2:	bf00      	nop
    f0b4:	b003      	add	sp, #12
    f0b6:	f85d fb04 	ldr.w	pc, [sp], #4
    f0ba:	bf00      	nop
    f0bc:	1fff9200 	.word	0x1fff9200
    f0c0:	1fff91fc 	.word	0x1fff91fc

0000f0c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    f0c4:	b500      	push	{lr}
    f0c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0c8:	f7f2 fb56 	bl	1778 <Sys_GetCoreID>
    f0cc:	4603      	mov	r3, r0
    f0ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    f0d0:	4a0d      	ldr	r2, [pc, #52]	; (f108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    f0d2:	9b01      	ldr	r3, [sp, #4]
    f0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0d8:	1e5a      	subs	r2, r3, #1
    f0da:	490b      	ldr	r1, [pc, #44]	; (f108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    f0dc:	9b01      	ldr	r3, [sp, #4]
    f0de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    f0e2:	4a0a      	ldr	r2, [pc, #40]	; (f10c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    f0e4:	9b01      	ldr	r3, [sp, #4]
    f0e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ea:	f003 0301 	and.w	r3, r3, #1
    f0ee:	2b00      	cmp	r3, #0
    f0f0:	d106      	bne.n	f100 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    f0f2:	4a05      	ldr	r2, [pc, #20]	; (f108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    f0f4:	9b01      	ldr	r3, [sp, #4]
    f0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0fa:	2b00      	cmp	r3, #0
    f0fc:	d100      	bne.n	f100 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f0fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f100:	bf00      	nop
    f102:	b003      	add	sp, #12
    f104:	f85d fb04 	ldr.w	pc, [sp], #4
    f108:	1fff9200 	.word	0x1fff9200
    f10c:	1fff91fc 	.word	0x1fff91fc

0000f110 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    f110:	b500      	push	{lr}
    f112:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f114:	f7f2 fb30 	bl	1778 <Sys_GetCoreID>
    f118:	4603      	mov	r3, r0
    f11a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    f11c:	4a10      	ldr	r2, [pc, #64]	; (f160 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    f11e:	9b01      	ldr	r3, [sp, #4]
    f120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f124:	2b00      	cmp	r3, #0
    f126:	d10d      	bne.n	f144 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f128:	f7f1 fbd2 	bl	8d0 <Adc_schm_read_msr>
    f12c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f12e:	9b00      	ldr	r3, [sp, #0]
    f130:	f003 0301 	and.w	r3, r3, #1
    f134:	2b00      	cmp	r3, #0
    f136:	d100      	bne.n	f13a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f138:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    f13a:	490a      	ldr	r1, [pc, #40]	; (f164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    f13c:	9b01      	ldr	r3, [sp, #4]
    f13e:	9a00      	ldr	r2, [sp, #0]
    f140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    f144:	4a06      	ldr	r2, [pc, #24]	; (f160 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    f146:	9b01      	ldr	r3, [sp, #4]
    f148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f14c:	1c5a      	adds	r2, r3, #1
    f14e:	4904      	ldr	r1, [pc, #16]	; (f160 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    f150:	9b01      	ldr	r3, [sp, #4]
    f152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f156:	bf00      	nop
    f158:	b003      	add	sp, #12
    f15a:	f85d fb04 	ldr.w	pc, [sp], #4
    f15e:	bf00      	nop
    f160:	1fff9208 	.word	0x1fff9208
    f164:	1fff9204 	.word	0x1fff9204

0000f168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    f168:	b500      	push	{lr}
    f16a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f16c:	f7f2 fb04 	bl	1778 <Sys_GetCoreID>
    f170:	4603      	mov	r3, r0
    f172:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    f174:	4a0d      	ldr	r2, [pc, #52]	; (f1ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    f176:	9b01      	ldr	r3, [sp, #4]
    f178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f17c:	1e5a      	subs	r2, r3, #1
    f17e:	490b      	ldr	r1, [pc, #44]	; (f1ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    f180:	9b01      	ldr	r3, [sp, #4]
    f182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    f186:	4a0a      	ldr	r2, [pc, #40]	; (f1b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    f188:	9b01      	ldr	r3, [sp, #4]
    f18a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f18e:	f003 0301 	and.w	r3, r3, #1
    f192:	2b00      	cmp	r3, #0
    f194:	d106      	bne.n	f1a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    f196:	4a05      	ldr	r2, [pc, #20]	; (f1ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    f198:	9b01      	ldr	r3, [sp, #4]
    f19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f19e:	2b00      	cmp	r3, #0
    f1a0:	d100      	bne.n	f1a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f1a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f1a4:	bf00      	nop
    f1a6:	b003      	add	sp, #12
    f1a8:	f85d fb04 	ldr.w	pc, [sp], #4
    f1ac:	1fff9208 	.word	0x1fff9208
    f1b0:	1fff9204 	.word	0x1fff9204

0000f1b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    f1b4:	b500      	push	{lr}
    f1b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1b8:	f7f2 fade 	bl	1778 <Sys_GetCoreID>
    f1bc:	4603      	mov	r3, r0
    f1be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    f1c0:	4a10      	ldr	r2, [pc, #64]	; (f204 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    f1c2:	9b01      	ldr	r3, [sp, #4]
    f1c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1c8:	2b00      	cmp	r3, #0
    f1ca:	d10d      	bne.n	f1e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f1cc:	f7f1 fb80 	bl	8d0 <Adc_schm_read_msr>
    f1d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f1d2:	9b00      	ldr	r3, [sp, #0]
    f1d4:	f003 0301 	and.w	r3, r3, #1
    f1d8:	2b00      	cmp	r3, #0
    f1da:	d100      	bne.n	f1de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    f1de:	490a      	ldr	r1, [pc, #40]	; (f208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    f1e0:	9b01      	ldr	r3, [sp, #4]
    f1e2:	9a00      	ldr	r2, [sp, #0]
    f1e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    f1e8:	4a06      	ldr	r2, [pc, #24]	; (f204 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    f1ea:	9b01      	ldr	r3, [sp, #4]
    f1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1f0:	1c5a      	adds	r2, r3, #1
    f1f2:	4904      	ldr	r1, [pc, #16]	; (f204 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    f1f4:	9b01      	ldr	r3, [sp, #4]
    f1f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f1fa:	bf00      	nop
    f1fc:	b003      	add	sp, #12
    f1fe:	f85d fb04 	ldr.w	pc, [sp], #4
    f202:	bf00      	nop
    f204:	1fff9210 	.word	0x1fff9210
    f208:	1fff920c 	.word	0x1fff920c

0000f20c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    f20c:	b500      	push	{lr}
    f20e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f210:	f7f2 fab2 	bl	1778 <Sys_GetCoreID>
    f214:	4603      	mov	r3, r0
    f216:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    f218:	4a0d      	ldr	r2, [pc, #52]	; (f250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f21a:	9b01      	ldr	r3, [sp, #4]
    f21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f220:	1e5a      	subs	r2, r3, #1
    f222:	490b      	ldr	r1, [pc, #44]	; (f250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f224:	9b01      	ldr	r3, [sp, #4]
    f226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    f22a:	4a0a      	ldr	r2, [pc, #40]	; (f254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    f22c:	9b01      	ldr	r3, [sp, #4]
    f22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f232:	f003 0301 	and.w	r3, r3, #1
    f236:	2b00      	cmp	r3, #0
    f238:	d106      	bne.n	f248 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    f23a:	4a05      	ldr	r2, [pc, #20]	; (f250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f23c:	9b01      	ldr	r3, [sp, #4]
    f23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f242:	2b00      	cmp	r3, #0
    f244:	d100      	bne.n	f248 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f246:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f248:	bf00      	nop
    f24a:	b003      	add	sp, #12
    f24c:	f85d fb04 	ldr.w	pc, [sp], #4
    f250:	1fff9210 	.word	0x1fff9210
    f254:	1fff920c 	.word	0x1fff920c

0000f258 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    f258:	b500      	push	{lr}
    f25a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f25c:	f7f2 fa8c 	bl	1778 <Sys_GetCoreID>
    f260:	4603      	mov	r3, r0
    f262:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    f264:	4a10      	ldr	r2, [pc, #64]	; (f2a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f266:	9b01      	ldr	r3, [sp, #4]
    f268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f26c:	2b00      	cmp	r3, #0
    f26e:	d10d      	bne.n	f28c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f270:	f7f1 fb2e 	bl	8d0 <Adc_schm_read_msr>
    f274:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f276:	9b00      	ldr	r3, [sp, #0]
    f278:	f003 0301 	and.w	r3, r3, #1
    f27c:	2b00      	cmp	r3, #0
    f27e:	d100      	bne.n	f282 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f280:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    f282:	490a      	ldr	r1, [pc, #40]	; (f2ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    f284:	9b01      	ldr	r3, [sp, #4]
    f286:	9a00      	ldr	r2, [sp, #0]
    f288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    f28c:	4a06      	ldr	r2, [pc, #24]	; (f2a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f28e:	9b01      	ldr	r3, [sp, #4]
    f290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f294:	1c5a      	adds	r2, r3, #1
    f296:	4904      	ldr	r1, [pc, #16]	; (f2a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f298:	9b01      	ldr	r3, [sp, #4]
    f29a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f29e:	bf00      	nop
    f2a0:	b003      	add	sp, #12
    f2a2:	f85d fb04 	ldr.w	pc, [sp], #4
    f2a6:	bf00      	nop
    f2a8:	1fff9218 	.word	0x1fff9218
    f2ac:	1fff9214 	.word	0x1fff9214

0000f2b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    f2b0:	b500      	push	{lr}
    f2b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2b4:	f7f2 fa60 	bl	1778 <Sys_GetCoreID>
    f2b8:	4603      	mov	r3, r0
    f2ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    f2bc:	4a0d      	ldr	r2, [pc, #52]	; (f2f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f2be:	9b01      	ldr	r3, [sp, #4]
    f2c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2c4:	1e5a      	subs	r2, r3, #1
    f2c6:	490b      	ldr	r1, [pc, #44]	; (f2f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f2c8:	9b01      	ldr	r3, [sp, #4]
    f2ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    f2ce:	4a0a      	ldr	r2, [pc, #40]	; (f2f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    f2d0:	9b01      	ldr	r3, [sp, #4]
    f2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2d6:	f003 0301 	and.w	r3, r3, #1
    f2da:	2b00      	cmp	r3, #0
    f2dc:	d106      	bne.n	f2ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    f2de:	4a05      	ldr	r2, [pc, #20]	; (f2f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f2e0:	9b01      	ldr	r3, [sp, #4]
    f2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2e6:	2b00      	cmp	r3, #0
    f2e8:	d100      	bne.n	f2ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f2ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f2ec:	bf00      	nop
    f2ee:	b003      	add	sp, #12
    f2f0:	f85d fb04 	ldr.w	pc, [sp], #4
    f2f4:	1fff9218 	.word	0x1fff9218
    f2f8:	1fff9214 	.word	0x1fff9214

0000f2fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    f2fc:	b500      	push	{lr}
    f2fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f300:	f7f2 fa3a 	bl	1778 <Sys_GetCoreID>
    f304:	4603      	mov	r3, r0
    f306:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    f308:	4a10      	ldr	r2, [pc, #64]	; (f34c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f30a:	9b01      	ldr	r3, [sp, #4]
    f30c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f310:	2b00      	cmp	r3, #0
    f312:	d10d      	bne.n	f330 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f314:	f7f1 fadc 	bl	8d0 <Adc_schm_read_msr>
    f318:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f31a:	9b00      	ldr	r3, [sp, #0]
    f31c:	f003 0301 	and.w	r3, r3, #1
    f320:	2b00      	cmp	r3, #0
    f322:	d100      	bne.n	f326 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f324:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    f326:	490a      	ldr	r1, [pc, #40]	; (f350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    f328:	9b01      	ldr	r3, [sp, #4]
    f32a:	9a00      	ldr	r2, [sp, #0]
    f32c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    f330:	4a06      	ldr	r2, [pc, #24]	; (f34c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f332:	9b01      	ldr	r3, [sp, #4]
    f334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f338:	1c5a      	adds	r2, r3, #1
    f33a:	4904      	ldr	r1, [pc, #16]	; (f34c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f33c:	9b01      	ldr	r3, [sp, #4]
    f33e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f342:	bf00      	nop
    f344:	b003      	add	sp, #12
    f346:	f85d fb04 	ldr.w	pc, [sp], #4
    f34a:	bf00      	nop
    f34c:	1fff9220 	.word	0x1fff9220
    f350:	1fff921c 	.word	0x1fff921c

0000f354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    f354:	b500      	push	{lr}
    f356:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f358:	f7f2 fa0e 	bl	1778 <Sys_GetCoreID>
    f35c:	4603      	mov	r3, r0
    f35e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    f360:	4a0d      	ldr	r2, [pc, #52]	; (f398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f362:	9b01      	ldr	r3, [sp, #4]
    f364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f368:	1e5a      	subs	r2, r3, #1
    f36a:	490b      	ldr	r1, [pc, #44]	; (f398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f36c:	9b01      	ldr	r3, [sp, #4]
    f36e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    f372:	4a0a      	ldr	r2, [pc, #40]	; (f39c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    f374:	9b01      	ldr	r3, [sp, #4]
    f376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f37a:	f003 0301 	and.w	r3, r3, #1
    f37e:	2b00      	cmp	r3, #0
    f380:	d106      	bne.n	f390 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    f382:	4a05      	ldr	r2, [pc, #20]	; (f398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f384:	9b01      	ldr	r3, [sp, #4]
    f386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f38a:	2b00      	cmp	r3, #0
    f38c:	d100      	bne.n	f390 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f38e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f390:	bf00      	nop
    f392:	b003      	add	sp, #12
    f394:	f85d fb04 	ldr.w	pc, [sp], #4
    f398:	1fff9220 	.word	0x1fff9220
    f39c:	1fff921c 	.word	0x1fff921c

0000f3a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    f3a0:	b500      	push	{lr}
    f3a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3a4:	f7f2 f9e8 	bl	1778 <Sys_GetCoreID>
    f3a8:	4603      	mov	r3, r0
    f3aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    f3ac:	4a10      	ldr	r2, [pc, #64]	; (f3f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f3ae:	9b01      	ldr	r3, [sp, #4]
    f3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3b4:	2b00      	cmp	r3, #0
    f3b6:	d10d      	bne.n	f3d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f3b8:	f7f1 fa8a 	bl	8d0 <Adc_schm_read_msr>
    f3bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f3be:	9b00      	ldr	r3, [sp, #0]
    f3c0:	f003 0301 	and.w	r3, r3, #1
    f3c4:	2b00      	cmp	r3, #0
    f3c6:	d100      	bne.n	f3ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f3c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    f3ca:	490a      	ldr	r1, [pc, #40]	; (f3f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    f3cc:	9b01      	ldr	r3, [sp, #4]
    f3ce:	9a00      	ldr	r2, [sp, #0]
    f3d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    f3d4:	4a06      	ldr	r2, [pc, #24]	; (f3f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f3d6:	9b01      	ldr	r3, [sp, #4]
    f3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3dc:	1c5a      	adds	r2, r3, #1
    f3de:	4904      	ldr	r1, [pc, #16]	; (f3f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f3e0:	9b01      	ldr	r3, [sp, #4]
    f3e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f3e6:	bf00      	nop
    f3e8:	b003      	add	sp, #12
    f3ea:	f85d fb04 	ldr.w	pc, [sp], #4
    f3ee:	bf00      	nop
    f3f0:	1fff9228 	.word	0x1fff9228
    f3f4:	1fff9224 	.word	0x1fff9224

0000f3f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    f3f8:	b500      	push	{lr}
    f3fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3fc:	f7f2 f9bc 	bl	1778 <Sys_GetCoreID>
    f400:	4603      	mov	r3, r0
    f402:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    f404:	4a0d      	ldr	r2, [pc, #52]	; (f43c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f406:	9b01      	ldr	r3, [sp, #4]
    f408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f40c:	1e5a      	subs	r2, r3, #1
    f40e:	490b      	ldr	r1, [pc, #44]	; (f43c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f410:	9b01      	ldr	r3, [sp, #4]
    f412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    f416:	4a0a      	ldr	r2, [pc, #40]	; (f440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    f418:	9b01      	ldr	r3, [sp, #4]
    f41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f41e:	f003 0301 	and.w	r3, r3, #1
    f422:	2b00      	cmp	r3, #0
    f424:	d106      	bne.n	f434 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    f426:	4a05      	ldr	r2, [pc, #20]	; (f43c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f428:	9b01      	ldr	r3, [sp, #4]
    f42a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f42e:	2b00      	cmp	r3, #0
    f430:	d100      	bne.n	f434 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f432:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f434:	bf00      	nop
    f436:	b003      	add	sp, #12
    f438:	f85d fb04 	ldr.w	pc, [sp], #4
    f43c:	1fff9228 	.word	0x1fff9228
    f440:	1fff9224 	.word	0x1fff9224

0000f444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    f444:	b500      	push	{lr}
    f446:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f448:	f7f2 f996 	bl	1778 <Sys_GetCoreID>
    f44c:	4603      	mov	r3, r0
    f44e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    f450:	4a10      	ldr	r2, [pc, #64]	; (f494 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f452:	9b01      	ldr	r3, [sp, #4]
    f454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f458:	2b00      	cmp	r3, #0
    f45a:	d10d      	bne.n	f478 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f45c:	f7f1 fa38 	bl	8d0 <Adc_schm_read_msr>
    f460:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f462:	9b00      	ldr	r3, [sp, #0]
    f464:	f003 0301 	and.w	r3, r3, #1
    f468:	2b00      	cmp	r3, #0
    f46a:	d100      	bne.n	f46e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f46c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    f46e:	490a      	ldr	r1, [pc, #40]	; (f498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    f470:	9b01      	ldr	r3, [sp, #4]
    f472:	9a00      	ldr	r2, [sp, #0]
    f474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    f478:	4a06      	ldr	r2, [pc, #24]	; (f494 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f47a:	9b01      	ldr	r3, [sp, #4]
    f47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f480:	1c5a      	adds	r2, r3, #1
    f482:	4904      	ldr	r1, [pc, #16]	; (f494 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f484:	9b01      	ldr	r3, [sp, #4]
    f486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f48a:	bf00      	nop
    f48c:	b003      	add	sp, #12
    f48e:	f85d fb04 	ldr.w	pc, [sp], #4
    f492:	bf00      	nop
    f494:	1fff9230 	.word	0x1fff9230
    f498:	1fff922c 	.word	0x1fff922c

0000f49c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    f49c:	b500      	push	{lr}
    f49e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4a0:	f7f2 f96a 	bl	1778 <Sys_GetCoreID>
    f4a4:	4603      	mov	r3, r0
    f4a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    f4a8:	4a0d      	ldr	r2, [pc, #52]	; (f4e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f4aa:	9b01      	ldr	r3, [sp, #4]
    f4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4b0:	1e5a      	subs	r2, r3, #1
    f4b2:	490b      	ldr	r1, [pc, #44]	; (f4e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f4b4:	9b01      	ldr	r3, [sp, #4]
    f4b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    f4ba:	4a0a      	ldr	r2, [pc, #40]	; (f4e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    f4bc:	9b01      	ldr	r3, [sp, #4]
    f4be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4c2:	f003 0301 	and.w	r3, r3, #1
    f4c6:	2b00      	cmp	r3, #0
    f4c8:	d106      	bne.n	f4d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    f4ca:	4a05      	ldr	r2, [pc, #20]	; (f4e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f4cc:	9b01      	ldr	r3, [sp, #4]
    f4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4d2:	2b00      	cmp	r3, #0
    f4d4:	d100      	bne.n	f4d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f4d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f4d8:	bf00      	nop
    f4da:	b003      	add	sp, #12
    f4dc:	f85d fb04 	ldr.w	pc, [sp], #4
    f4e0:	1fff9230 	.word	0x1fff9230
    f4e4:	1fff922c 	.word	0x1fff922c

0000f4e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    f4e8:	b500      	push	{lr}
    f4ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4ec:	f7f2 f944 	bl	1778 <Sys_GetCoreID>
    f4f0:	4603      	mov	r3, r0
    f4f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    f4f4:	4a10      	ldr	r2, [pc, #64]	; (f538 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f4f6:	9b01      	ldr	r3, [sp, #4]
    f4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4fc:	2b00      	cmp	r3, #0
    f4fe:	d10d      	bne.n	f51c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f500:	f7f1 f9e6 	bl	8d0 <Adc_schm_read_msr>
    f504:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f506:	9b00      	ldr	r3, [sp, #0]
    f508:	f003 0301 	and.w	r3, r3, #1
    f50c:	2b00      	cmp	r3, #0
    f50e:	d100      	bne.n	f512 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f510:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    f512:	490a      	ldr	r1, [pc, #40]	; (f53c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    f514:	9b01      	ldr	r3, [sp, #4]
    f516:	9a00      	ldr	r2, [sp, #0]
    f518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    f51c:	4a06      	ldr	r2, [pc, #24]	; (f538 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f51e:	9b01      	ldr	r3, [sp, #4]
    f520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f524:	1c5a      	adds	r2, r3, #1
    f526:	4904      	ldr	r1, [pc, #16]	; (f538 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f528:	9b01      	ldr	r3, [sp, #4]
    f52a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f52e:	bf00      	nop
    f530:	b003      	add	sp, #12
    f532:	f85d fb04 	ldr.w	pc, [sp], #4
    f536:	bf00      	nop
    f538:	1fff9238 	.word	0x1fff9238
    f53c:	1fff9234 	.word	0x1fff9234

0000f540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    f540:	b500      	push	{lr}
    f542:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f544:	f7f2 f918 	bl	1778 <Sys_GetCoreID>
    f548:	4603      	mov	r3, r0
    f54a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    f54c:	4a0d      	ldr	r2, [pc, #52]	; (f584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f54e:	9b01      	ldr	r3, [sp, #4]
    f550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f554:	1e5a      	subs	r2, r3, #1
    f556:	490b      	ldr	r1, [pc, #44]	; (f584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f558:	9b01      	ldr	r3, [sp, #4]
    f55a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    f55e:	4a0a      	ldr	r2, [pc, #40]	; (f588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    f560:	9b01      	ldr	r3, [sp, #4]
    f562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f566:	f003 0301 	and.w	r3, r3, #1
    f56a:	2b00      	cmp	r3, #0
    f56c:	d106      	bne.n	f57c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    f56e:	4a05      	ldr	r2, [pc, #20]	; (f584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f570:	9b01      	ldr	r3, [sp, #4]
    f572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f576:	2b00      	cmp	r3, #0
    f578:	d100      	bne.n	f57c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f57a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f57c:	bf00      	nop
    f57e:	b003      	add	sp, #12
    f580:	f85d fb04 	ldr.w	pc, [sp], #4
    f584:	1fff9238 	.word	0x1fff9238
    f588:	1fff9234 	.word	0x1fff9234

0000f58c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    f58c:	b500      	push	{lr}
    f58e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f590:	f7f2 f8f2 	bl	1778 <Sys_GetCoreID>
    f594:	4603      	mov	r3, r0
    f596:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    f598:	4a10      	ldr	r2, [pc, #64]	; (f5dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f59a:	9b01      	ldr	r3, [sp, #4]
    f59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5a0:	2b00      	cmp	r3, #0
    f5a2:	d10d      	bne.n	f5c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f5a4:	f7f1 f994 	bl	8d0 <Adc_schm_read_msr>
    f5a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f5aa:	9b00      	ldr	r3, [sp, #0]
    f5ac:	f003 0301 	and.w	r3, r3, #1
    f5b0:	2b00      	cmp	r3, #0
    f5b2:	d100      	bne.n	f5b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f5b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    f5b6:	490a      	ldr	r1, [pc, #40]	; (f5e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    f5b8:	9b01      	ldr	r3, [sp, #4]
    f5ba:	9a00      	ldr	r2, [sp, #0]
    f5bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    f5c0:	4a06      	ldr	r2, [pc, #24]	; (f5dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f5c2:	9b01      	ldr	r3, [sp, #4]
    f5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5c8:	1c5a      	adds	r2, r3, #1
    f5ca:	4904      	ldr	r1, [pc, #16]	; (f5dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f5cc:	9b01      	ldr	r3, [sp, #4]
    f5ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f5d2:	bf00      	nop
    f5d4:	b003      	add	sp, #12
    f5d6:	f85d fb04 	ldr.w	pc, [sp], #4
    f5da:	bf00      	nop
    f5dc:	1fff9240 	.word	0x1fff9240
    f5e0:	1fff923c 	.word	0x1fff923c

0000f5e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    f5e4:	b500      	push	{lr}
    f5e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5e8:	f7f2 f8c6 	bl	1778 <Sys_GetCoreID>
    f5ec:	4603      	mov	r3, r0
    f5ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    f5f0:	4a0d      	ldr	r2, [pc, #52]	; (f628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f5f2:	9b01      	ldr	r3, [sp, #4]
    f5f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5f8:	1e5a      	subs	r2, r3, #1
    f5fa:	490b      	ldr	r1, [pc, #44]	; (f628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f5fc:	9b01      	ldr	r3, [sp, #4]
    f5fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    f602:	4a0a      	ldr	r2, [pc, #40]	; (f62c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    f604:	9b01      	ldr	r3, [sp, #4]
    f606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f60a:	f003 0301 	and.w	r3, r3, #1
    f60e:	2b00      	cmp	r3, #0
    f610:	d106      	bne.n	f620 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    f612:	4a05      	ldr	r2, [pc, #20]	; (f628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f614:	9b01      	ldr	r3, [sp, #4]
    f616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f61a:	2b00      	cmp	r3, #0
    f61c:	d100      	bne.n	f620 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f61e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f620:	bf00      	nop
    f622:	b003      	add	sp, #12
    f624:	f85d fb04 	ldr.w	pc, [sp], #4
    f628:	1fff9240 	.word	0x1fff9240
    f62c:	1fff923c 	.word	0x1fff923c

0000f630 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    f630:	b500      	push	{lr}
    f632:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f634:	f7f2 f8a0 	bl	1778 <Sys_GetCoreID>
    f638:	4603      	mov	r3, r0
    f63a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    f63c:	4a10      	ldr	r2, [pc, #64]	; (f680 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f63e:	9b01      	ldr	r3, [sp, #4]
    f640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f644:	2b00      	cmp	r3, #0
    f646:	d10d      	bne.n	f664 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f648:	f7f1 f942 	bl	8d0 <Adc_schm_read_msr>
    f64c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f64e:	9b00      	ldr	r3, [sp, #0]
    f650:	f003 0301 	and.w	r3, r3, #1
    f654:	2b00      	cmp	r3, #0
    f656:	d100      	bne.n	f65a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f658:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    f65a:	490a      	ldr	r1, [pc, #40]	; (f684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    f65c:	9b01      	ldr	r3, [sp, #4]
    f65e:	9a00      	ldr	r2, [sp, #0]
    f660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    f664:	4a06      	ldr	r2, [pc, #24]	; (f680 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f666:	9b01      	ldr	r3, [sp, #4]
    f668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f66c:	1c5a      	adds	r2, r3, #1
    f66e:	4904      	ldr	r1, [pc, #16]	; (f680 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f670:	9b01      	ldr	r3, [sp, #4]
    f672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f676:	bf00      	nop
    f678:	b003      	add	sp, #12
    f67a:	f85d fb04 	ldr.w	pc, [sp], #4
    f67e:	bf00      	nop
    f680:	1fff9248 	.word	0x1fff9248
    f684:	1fff9244 	.word	0x1fff9244

0000f688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    f688:	b500      	push	{lr}
    f68a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f68c:	f7f2 f874 	bl	1778 <Sys_GetCoreID>
    f690:	4603      	mov	r3, r0
    f692:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    f694:	4a0d      	ldr	r2, [pc, #52]	; (f6cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f696:	9b01      	ldr	r3, [sp, #4]
    f698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f69c:	1e5a      	subs	r2, r3, #1
    f69e:	490b      	ldr	r1, [pc, #44]	; (f6cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f6a0:	9b01      	ldr	r3, [sp, #4]
    f6a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    f6a6:	4a0a      	ldr	r2, [pc, #40]	; (f6d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    f6a8:	9b01      	ldr	r3, [sp, #4]
    f6aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6ae:	f003 0301 	and.w	r3, r3, #1
    f6b2:	2b00      	cmp	r3, #0
    f6b4:	d106      	bne.n	f6c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    f6b6:	4a05      	ldr	r2, [pc, #20]	; (f6cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f6b8:	9b01      	ldr	r3, [sp, #4]
    f6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6be:	2b00      	cmp	r3, #0
    f6c0:	d100      	bne.n	f6c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f6c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f6c4:	bf00      	nop
    f6c6:	b003      	add	sp, #12
    f6c8:	f85d fb04 	ldr.w	pc, [sp], #4
    f6cc:	1fff9248 	.word	0x1fff9248
    f6d0:	1fff9244 	.word	0x1fff9244

0000f6d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    f6d4:	b500      	push	{lr}
    f6d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6d8:	f7f2 f84e 	bl	1778 <Sys_GetCoreID>
    f6dc:	4603      	mov	r3, r0
    f6de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    f6e0:	4a10      	ldr	r2, [pc, #64]	; (f724 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f6e2:	9b01      	ldr	r3, [sp, #4]
    f6e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6e8:	2b00      	cmp	r3, #0
    f6ea:	d10d      	bne.n	f708 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f6ec:	f7f1 f8f0 	bl	8d0 <Adc_schm_read_msr>
    f6f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f6f2:	9b00      	ldr	r3, [sp, #0]
    f6f4:	f003 0301 	and.w	r3, r3, #1
    f6f8:	2b00      	cmp	r3, #0
    f6fa:	d100      	bne.n	f6fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f6fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    f6fe:	490a      	ldr	r1, [pc, #40]	; (f728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    f700:	9b01      	ldr	r3, [sp, #4]
    f702:	9a00      	ldr	r2, [sp, #0]
    f704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    f708:	4a06      	ldr	r2, [pc, #24]	; (f724 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f70a:	9b01      	ldr	r3, [sp, #4]
    f70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f710:	1c5a      	adds	r2, r3, #1
    f712:	4904      	ldr	r1, [pc, #16]	; (f724 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f714:	9b01      	ldr	r3, [sp, #4]
    f716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f71a:	bf00      	nop
    f71c:	b003      	add	sp, #12
    f71e:	f85d fb04 	ldr.w	pc, [sp], #4
    f722:	bf00      	nop
    f724:	1fff9250 	.word	0x1fff9250
    f728:	1fff924c 	.word	0x1fff924c

0000f72c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    f72c:	b500      	push	{lr}
    f72e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f730:	f7f2 f822 	bl	1778 <Sys_GetCoreID>
    f734:	4603      	mov	r3, r0
    f736:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    f738:	4a0d      	ldr	r2, [pc, #52]	; (f770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f73a:	9b01      	ldr	r3, [sp, #4]
    f73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f740:	1e5a      	subs	r2, r3, #1
    f742:	490b      	ldr	r1, [pc, #44]	; (f770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f744:	9b01      	ldr	r3, [sp, #4]
    f746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    f74a:	4a0a      	ldr	r2, [pc, #40]	; (f774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    f74c:	9b01      	ldr	r3, [sp, #4]
    f74e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f752:	f003 0301 	and.w	r3, r3, #1
    f756:	2b00      	cmp	r3, #0
    f758:	d106      	bne.n	f768 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    f75a:	4a05      	ldr	r2, [pc, #20]	; (f770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f75c:	9b01      	ldr	r3, [sp, #4]
    f75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f762:	2b00      	cmp	r3, #0
    f764:	d100      	bne.n	f768 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f766:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f768:	bf00      	nop
    f76a:	b003      	add	sp, #12
    f76c:	f85d fb04 	ldr.w	pc, [sp], #4
    f770:	1fff9250 	.word	0x1fff9250
    f774:	1fff924c 	.word	0x1fff924c

0000f778 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    f778:	b500      	push	{lr}
    f77a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f77c:	f7f1 fffc 	bl	1778 <Sys_GetCoreID>
    f780:	4603      	mov	r3, r0
    f782:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    f784:	4a10      	ldr	r2, [pc, #64]	; (f7c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f786:	9b01      	ldr	r3, [sp, #4]
    f788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f78c:	2b00      	cmp	r3, #0
    f78e:	d10d      	bne.n	f7ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f790:	f7f1 f89e 	bl	8d0 <Adc_schm_read_msr>
    f794:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f796:	9b00      	ldr	r3, [sp, #0]
    f798:	f003 0301 	and.w	r3, r3, #1
    f79c:	2b00      	cmp	r3, #0
    f79e:	d100      	bne.n	f7a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f7a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    f7a2:	490a      	ldr	r1, [pc, #40]	; (f7cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    f7a4:	9b01      	ldr	r3, [sp, #4]
    f7a6:	9a00      	ldr	r2, [sp, #0]
    f7a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    f7ac:	4a06      	ldr	r2, [pc, #24]	; (f7c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f7ae:	9b01      	ldr	r3, [sp, #4]
    f7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7b4:	1c5a      	adds	r2, r3, #1
    f7b6:	4904      	ldr	r1, [pc, #16]	; (f7c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f7b8:	9b01      	ldr	r3, [sp, #4]
    f7ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f7be:	bf00      	nop
    f7c0:	b003      	add	sp, #12
    f7c2:	f85d fb04 	ldr.w	pc, [sp], #4
    f7c6:	bf00      	nop
    f7c8:	1fff9258 	.word	0x1fff9258
    f7cc:	1fff9254 	.word	0x1fff9254

0000f7d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    f7d0:	b500      	push	{lr}
    f7d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7d4:	f7f1 ffd0 	bl	1778 <Sys_GetCoreID>
    f7d8:	4603      	mov	r3, r0
    f7da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    f7dc:	4a0d      	ldr	r2, [pc, #52]	; (f814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f7de:	9b01      	ldr	r3, [sp, #4]
    f7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7e4:	1e5a      	subs	r2, r3, #1
    f7e6:	490b      	ldr	r1, [pc, #44]	; (f814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f7e8:	9b01      	ldr	r3, [sp, #4]
    f7ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    f7ee:	4a0a      	ldr	r2, [pc, #40]	; (f818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    f7f0:	9b01      	ldr	r3, [sp, #4]
    f7f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7f6:	f003 0301 	and.w	r3, r3, #1
    f7fa:	2b00      	cmp	r3, #0
    f7fc:	d106      	bne.n	f80c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    f7fe:	4a05      	ldr	r2, [pc, #20]	; (f814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f800:	9b01      	ldr	r3, [sp, #4]
    f802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f806:	2b00      	cmp	r3, #0
    f808:	d100      	bne.n	f80c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f80a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f80c:	bf00      	nop
    f80e:	b003      	add	sp, #12
    f810:	f85d fb04 	ldr.w	pc, [sp], #4
    f814:	1fff9258 	.word	0x1fff9258
    f818:	1fff9254 	.word	0x1fff9254

0000f81c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    f81c:	b500      	push	{lr}
    f81e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f820:	f7f1 ffaa 	bl	1778 <Sys_GetCoreID>
    f824:	4603      	mov	r3, r0
    f826:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    f828:	4a10      	ldr	r2, [pc, #64]	; (f86c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f82a:	9b01      	ldr	r3, [sp, #4]
    f82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f830:	2b00      	cmp	r3, #0
    f832:	d10d      	bne.n	f850 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f834:	f7f1 f84c 	bl	8d0 <Adc_schm_read_msr>
    f838:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f83a:	9b00      	ldr	r3, [sp, #0]
    f83c:	f003 0301 	and.w	r3, r3, #1
    f840:	2b00      	cmp	r3, #0
    f842:	d100      	bne.n	f846 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f844:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    f846:	490a      	ldr	r1, [pc, #40]	; (f870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    f848:	9b01      	ldr	r3, [sp, #4]
    f84a:	9a00      	ldr	r2, [sp, #0]
    f84c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    f850:	4a06      	ldr	r2, [pc, #24]	; (f86c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f852:	9b01      	ldr	r3, [sp, #4]
    f854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f858:	1c5a      	adds	r2, r3, #1
    f85a:	4904      	ldr	r1, [pc, #16]	; (f86c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f85c:	9b01      	ldr	r3, [sp, #4]
    f85e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f862:	bf00      	nop
    f864:	b003      	add	sp, #12
    f866:	f85d fb04 	ldr.w	pc, [sp], #4
    f86a:	bf00      	nop
    f86c:	1fff9260 	.word	0x1fff9260
    f870:	1fff925c 	.word	0x1fff925c

0000f874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    f874:	b500      	push	{lr}
    f876:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f878:	f7f1 ff7e 	bl	1778 <Sys_GetCoreID>
    f87c:	4603      	mov	r3, r0
    f87e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    f880:	4a0d      	ldr	r2, [pc, #52]	; (f8b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f882:	9b01      	ldr	r3, [sp, #4]
    f884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f888:	1e5a      	subs	r2, r3, #1
    f88a:	490b      	ldr	r1, [pc, #44]	; (f8b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f88c:	9b01      	ldr	r3, [sp, #4]
    f88e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    f892:	4a0a      	ldr	r2, [pc, #40]	; (f8bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    f894:	9b01      	ldr	r3, [sp, #4]
    f896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f89a:	f003 0301 	and.w	r3, r3, #1
    f89e:	2b00      	cmp	r3, #0
    f8a0:	d106      	bne.n	f8b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    f8a2:	4a05      	ldr	r2, [pc, #20]	; (f8b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f8a4:	9b01      	ldr	r3, [sp, #4]
    f8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8aa:	2b00      	cmp	r3, #0
    f8ac:	d100      	bne.n	f8b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f8ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f8b0:	bf00      	nop
    f8b2:	b003      	add	sp, #12
    f8b4:	f85d fb04 	ldr.w	pc, [sp], #4
    f8b8:	1fff9260 	.word	0x1fff9260
    f8bc:	1fff925c 	.word	0x1fff925c

0000f8c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    f8c0:	b500      	push	{lr}
    f8c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8c4:	f7f1 ff58 	bl	1778 <Sys_GetCoreID>
    f8c8:	4603      	mov	r3, r0
    f8ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    f8cc:	4a10      	ldr	r2, [pc, #64]	; (f910 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f8ce:	9b01      	ldr	r3, [sp, #4]
    f8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8d4:	2b00      	cmp	r3, #0
    f8d6:	d10d      	bne.n	f8f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f8d8:	f7f0 fffa 	bl	8d0 <Adc_schm_read_msr>
    f8dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f8de:	9b00      	ldr	r3, [sp, #0]
    f8e0:	f003 0301 	and.w	r3, r3, #1
    f8e4:	2b00      	cmp	r3, #0
    f8e6:	d100      	bne.n	f8ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f8e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    f8ea:	490a      	ldr	r1, [pc, #40]	; (f914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    f8ec:	9b01      	ldr	r3, [sp, #4]
    f8ee:	9a00      	ldr	r2, [sp, #0]
    f8f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    f8f4:	4a06      	ldr	r2, [pc, #24]	; (f910 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f8f6:	9b01      	ldr	r3, [sp, #4]
    f8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8fc:	1c5a      	adds	r2, r3, #1
    f8fe:	4904      	ldr	r1, [pc, #16]	; (f910 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f900:	9b01      	ldr	r3, [sp, #4]
    f902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f906:	bf00      	nop
    f908:	b003      	add	sp, #12
    f90a:	f85d fb04 	ldr.w	pc, [sp], #4
    f90e:	bf00      	nop
    f910:	1fff9268 	.word	0x1fff9268
    f914:	1fff9264 	.word	0x1fff9264

0000f918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    f918:	b500      	push	{lr}
    f91a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f91c:	f7f1 ff2c 	bl	1778 <Sys_GetCoreID>
    f920:	4603      	mov	r3, r0
    f922:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    f924:	4a0d      	ldr	r2, [pc, #52]	; (f95c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f926:	9b01      	ldr	r3, [sp, #4]
    f928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f92c:	1e5a      	subs	r2, r3, #1
    f92e:	490b      	ldr	r1, [pc, #44]	; (f95c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f930:	9b01      	ldr	r3, [sp, #4]
    f932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    f936:	4a0a      	ldr	r2, [pc, #40]	; (f960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    f938:	9b01      	ldr	r3, [sp, #4]
    f93a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f93e:	f003 0301 	and.w	r3, r3, #1
    f942:	2b00      	cmp	r3, #0
    f944:	d106      	bne.n	f954 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    f946:	4a05      	ldr	r2, [pc, #20]	; (f95c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f948:	9b01      	ldr	r3, [sp, #4]
    f94a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f94e:	2b00      	cmp	r3, #0
    f950:	d100      	bne.n	f954 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f952:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f954:	bf00      	nop
    f956:	b003      	add	sp, #12
    f958:	f85d fb04 	ldr.w	pc, [sp], #4
    f95c:	1fff9268 	.word	0x1fff9268
    f960:	1fff9264 	.word	0x1fff9264

0000f964 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    f964:	b500      	push	{lr}
    f966:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f968:	f7f1 ff06 	bl	1778 <Sys_GetCoreID>
    f96c:	4603      	mov	r3, r0
    f96e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    f970:	4a10      	ldr	r2, [pc, #64]	; (f9b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f972:	9b01      	ldr	r3, [sp, #4]
    f974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f978:	2b00      	cmp	r3, #0
    f97a:	d10d      	bne.n	f998 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f97c:	f7f0 ffa8 	bl	8d0 <Adc_schm_read_msr>
    f980:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f982:	9b00      	ldr	r3, [sp, #0]
    f984:	f003 0301 	and.w	r3, r3, #1
    f988:	2b00      	cmp	r3, #0
    f98a:	d100      	bne.n	f98e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f98c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    f98e:	490a      	ldr	r1, [pc, #40]	; (f9b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    f990:	9b01      	ldr	r3, [sp, #4]
    f992:	9a00      	ldr	r2, [sp, #0]
    f994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    f998:	4a06      	ldr	r2, [pc, #24]	; (f9b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f99a:	9b01      	ldr	r3, [sp, #4]
    f99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9a0:	1c5a      	adds	r2, r3, #1
    f9a2:	4904      	ldr	r1, [pc, #16]	; (f9b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f9a4:	9b01      	ldr	r3, [sp, #4]
    f9a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f9aa:	bf00      	nop
    f9ac:	b003      	add	sp, #12
    f9ae:	f85d fb04 	ldr.w	pc, [sp], #4
    f9b2:	bf00      	nop
    f9b4:	1fff9270 	.word	0x1fff9270
    f9b8:	1fff926c 	.word	0x1fff926c

0000f9bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    f9bc:	b500      	push	{lr}
    f9be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9c0:	f7f1 feda 	bl	1778 <Sys_GetCoreID>
    f9c4:	4603      	mov	r3, r0
    f9c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    f9c8:	4a0d      	ldr	r2, [pc, #52]	; (fa00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    f9ca:	9b01      	ldr	r3, [sp, #4]
    f9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9d0:	1e5a      	subs	r2, r3, #1
    f9d2:	490b      	ldr	r1, [pc, #44]	; (fa00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    f9d4:	9b01      	ldr	r3, [sp, #4]
    f9d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    f9da:	4a0a      	ldr	r2, [pc, #40]	; (fa04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    f9dc:	9b01      	ldr	r3, [sp, #4]
    f9de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9e2:	f003 0301 	and.w	r3, r3, #1
    f9e6:	2b00      	cmp	r3, #0
    f9e8:	d106      	bne.n	f9f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    f9ea:	4a05      	ldr	r2, [pc, #20]	; (fa00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    f9ec:	9b01      	ldr	r3, [sp, #4]
    f9ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9f2:	2b00      	cmp	r3, #0
    f9f4:	d100      	bne.n	f9f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f9f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f9f8:	bf00      	nop
    f9fa:	b003      	add	sp, #12
    f9fc:	f85d fb04 	ldr.w	pc, [sp], #4
    fa00:	1fff9270 	.word	0x1fff9270
    fa04:	1fff926c 	.word	0x1fff926c

0000fa08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    fa08:	b500      	push	{lr}
    fa0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa0c:	f7f1 feb4 	bl	1778 <Sys_GetCoreID>
    fa10:	4603      	mov	r3, r0
    fa12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    fa14:	4a10      	ldr	r2, [pc, #64]	; (fa58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    fa16:	9b01      	ldr	r3, [sp, #4]
    fa18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa1c:	2b00      	cmp	r3, #0
    fa1e:	d10d      	bne.n	fa3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa20:	f7f0 ff56 	bl	8d0 <Adc_schm_read_msr>
    fa24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa26:	9b00      	ldr	r3, [sp, #0]
    fa28:	f003 0301 	and.w	r3, r3, #1
    fa2c:	2b00      	cmp	r3, #0
    fa2e:	d100      	bne.n	fa32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    fa32:	490a      	ldr	r1, [pc, #40]	; (fa5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    fa34:	9b01      	ldr	r3, [sp, #4]
    fa36:	9a00      	ldr	r2, [sp, #0]
    fa38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    fa3c:	4a06      	ldr	r2, [pc, #24]	; (fa58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    fa3e:	9b01      	ldr	r3, [sp, #4]
    fa40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa44:	1c5a      	adds	r2, r3, #1
    fa46:	4904      	ldr	r1, [pc, #16]	; (fa58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    fa48:	9b01      	ldr	r3, [sp, #4]
    fa4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa4e:	bf00      	nop
    fa50:	b003      	add	sp, #12
    fa52:	f85d fb04 	ldr.w	pc, [sp], #4
    fa56:	bf00      	nop
    fa58:	1fff9278 	.word	0x1fff9278
    fa5c:	1fff9274 	.word	0x1fff9274

0000fa60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    fa60:	b500      	push	{lr}
    fa62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa64:	f7f1 fe88 	bl	1778 <Sys_GetCoreID>
    fa68:	4603      	mov	r3, r0
    fa6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    fa6c:	4a0d      	ldr	r2, [pc, #52]	; (faa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    fa6e:	9b01      	ldr	r3, [sp, #4]
    fa70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa74:	1e5a      	subs	r2, r3, #1
    fa76:	490b      	ldr	r1, [pc, #44]	; (faa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    fa78:	9b01      	ldr	r3, [sp, #4]
    fa7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    fa7e:	4a0a      	ldr	r2, [pc, #40]	; (faa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    fa80:	9b01      	ldr	r3, [sp, #4]
    fa82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa86:	f003 0301 	and.w	r3, r3, #1
    fa8a:	2b00      	cmp	r3, #0
    fa8c:	d106      	bne.n	fa9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    fa8e:	4a05      	ldr	r2, [pc, #20]	; (faa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    fa90:	9b01      	ldr	r3, [sp, #4]
    fa92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa96:	2b00      	cmp	r3, #0
    fa98:	d100      	bne.n	fa9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fa9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa9c:	bf00      	nop
    fa9e:	b003      	add	sp, #12
    faa0:	f85d fb04 	ldr.w	pc, [sp], #4
    faa4:	1fff9278 	.word	0x1fff9278
    faa8:	1fff9274 	.word	0x1fff9274

0000faac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    faac:	b500      	push	{lr}
    faae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fab0:	f7f1 fe62 	bl	1778 <Sys_GetCoreID>
    fab4:	4603      	mov	r3, r0
    fab6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    fab8:	4a10      	ldr	r2, [pc, #64]	; (fafc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    faba:	9b01      	ldr	r3, [sp, #4]
    fabc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fac0:	2b00      	cmp	r3, #0
    fac2:	d10d      	bne.n	fae0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fac4:	f7f0 ff04 	bl	8d0 <Adc_schm_read_msr>
    fac8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    faca:	9b00      	ldr	r3, [sp, #0]
    facc:	f003 0301 	and.w	r3, r3, #1
    fad0:	2b00      	cmp	r3, #0
    fad2:	d100      	bne.n	fad6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fad4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    fad6:	490a      	ldr	r1, [pc, #40]	; (fb00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    fad8:	9b01      	ldr	r3, [sp, #4]
    fada:	9a00      	ldr	r2, [sp, #0]
    fadc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    fae0:	4a06      	ldr	r2, [pc, #24]	; (fafc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    fae2:	9b01      	ldr	r3, [sp, #4]
    fae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fae8:	1c5a      	adds	r2, r3, #1
    faea:	4904      	ldr	r1, [pc, #16]	; (fafc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    faec:	9b01      	ldr	r3, [sp, #4]
    faee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    faf2:	bf00      	nop
    faf4:	b003      	add	sp, #12
    faf6:	f85d fb04 	ldr.w	pc, [sp], #4
    fafa:	bf00      	nop
    fafc:	1fff9280 	.word	0x1fff9280
    fb00:	1fff927c 	.word	0x1fff927c

0000fb04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    fb04:	b500      	push	{lr}
    fb06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb08:	f7f1 fe36 	bl	1778 <Sys_GetCoreID>
    fb0c:	4603      	mov	r3, r0
    fb0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    fb10:	4a0d      	ldr	r2, [pc, #52]	; (fb48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    fb12:	9b01      	ldr	r3, [sp, #4]
    fb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb18:	1e5a      	subs	r2, r3, #1
    fb1a:	490b      	ldr	r1, [pc, #44]	; (fb48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    fb1c:	9b01      	ldr	r3, [sp, #4]
    fb1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    fb22:	4a0a      	ldr	r2, [pc, #40]	; (fb4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    fb24:	9b01      	ldr	r3, [sp, #4]
    fb26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb2a:	f003 0301 	and.w	r3, r3, #1
    fb2e:	2b00      	cmp	r3, #0
    fb30:	d106      	bne.n	fb40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    fb32:	4a05      	ldr	r2, [pc, #20]	; (fb48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    fb34:	9b01      	ldr	r3, [sp, #4]
    fb36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb3a:	2b00      	cmp	r3, #0
    fb3c:	d100      	bne.n	fb40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb40:	bf00      	nop
    fb42:	b003      	add	sp, #12
    fb44:	f85d fb04 	ldr.w	pc, [sp], #4
    fb48:	1fff9280 	.word	0x1fff9280
    fb4c:	1fff927c 	.word	0x1fff927c

0000fb50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    fb50:	b500      	push	{lr}
    fb52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb54:	f7f1 fe10 	bl	1778 <Sys_GetCoreID>
    fb58:	4603      	mov	r3, r0
    fb5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    fb5c:	4a10      	ldr	r2, [pc, #64]	; (fba0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    fb5e:	9b01      	ldr	r3, [sp, #4]
    fb60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb64:	2b00      	cmp	r3, #0
    fb66:	d10d      	bne.n	fb84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb68:	f7f0 feb2 	bl	8d0 <Adc_schm_read_msr>
    fb6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb6e:	9b00      	ldr	r3, [sp, #0]
    fb70:	f003 0301 	and.w	r3, r3, #1
    fb74:	2b00      	cmp	r3, #0
    fb76:	d100      	bne.n	fb7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    fb7a:	490a      	ldr	r1, [pc, #40]	; (fba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    fb7c:	9b01      	ldr	r3, [sp, #4]
    fb7e:	9a00      	ldr	r2, [sp, #0]
    fb80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    fb84:	4a06      	ldr	r2, [pc, #24]	; (fba0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    fb86:	9b01      	ldr	r3, [sp, #4]
    fb88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb8c:	1c5a      	adds	r2, r3, #1
    fb8e:	4904      	ldr	r1, [pc, #16]	; (fba0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    fb90:	9b01      	ldr	r3, [sp, #4]
    fb92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb96:	bf00      	nop
    fb98:	b003      	add	sp, #12
    fb9a:	f85d fb04 	ldr.w	pc, [sp], #4
    fb9e:	bf00      	nop
    fba0:	1fff9288 	.word	0x1fff9288
    fba4:	1fff9284 	.word	0x1fff9284

0000fba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    fba8:	b500      	push	{lr}
    fbaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbac:	f7f1 fde4 	bl	1778 <Sys_GetCoreID>
    fbb0:	4603      	mov	r3, r0
    fbb2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    fbb4:	4a0d      	ldr	r2, [pc, #52]	; (fbec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    fbb6:	9b01      	ldr	r3, [sp, #4]
    fbb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbbc:	1e5a      	subs	r2, r3, #1
    fbbe:	490b      	ldr	r1, [pc, #44]	; (fbec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    fbc0:	9b01      	ldr	r3, [sp, #4]
    fbc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    fbc6:	4a0a      	ldr	r2, [pc, #40]	; (fbf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    fbc8:	9b01      	ldr	r3, [sp, #4]
    fbca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbce:	f003 0301 	and.w	r3, r3, #1
    fbd2:	2b00      	cmp	r3, #0
    fbd4:	d106      	bne.n	fbe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    fbd6:	4a05      	ldr	r2, [pc, #20]	; (fbec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    fbd8:	9b01      	ldr	r3, [sp, #4]
    fbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbde:	2b00      	cmp	r3, #0
    fbe0:	d100      	bne.n	fbe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fbe2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fbe4:	bf00      	nop
    fbe6:	b003      	add	sp, #12
    fbe8:	f85d fb04 	ldr.w	pc, [sp], #4
    fbec:	1fff9288 	.word	0x1fff9288
    fbf0:	1fff9284 	.word	0x1fff9284

0000fbf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    fbf4:	b500      	push	{lr}
    fbf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbf8:	f7f1 fdbe 	bl	1778 <Sys_GetCoreID>
    fbfc:	4603      	mov	r3, r0
    fbfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    fc00:	4a10      	ldr	r2, [pc, #64]	; (fc44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    fc02:	9b01      	ldr	r3, [sp, #4]
    fc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc08:	2b00      	cmp	r3, #0
    fc0a:	d10d      	bne.n	fc28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc0c:	f7f0 fe60 	bl	8d0 <Adc_schm_read_msr>
    fc10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc12:	9b00      	ldr	r3, [sp, #0]
    fc14:	f003 0301 	and.w	r3, r3, #1
    fc18:	2b00      	cmp	r3, #0
    fc1a:	d100      	bne.n	fc1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    fc1e:	490a      	ldr	r1, [pc, #40]	; (fc48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    fc20:	9b01      	ldr	r3, [sp, #4]
    fc22:	9a00      	ldr	r2, [sp, #0]
    fc24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    fc28:	4a06      	ldr	r2, [pc, #24]	; (fc44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    fc2a:	9b01      	ldr	r3, [sp, #4]
    fc2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc30:	1c5a      	adds	r2, r3, #1
    fc32:	4904      	ldr	r1, [pc, #16]	; (fc44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    fc34:	9b01      	ldr	r3, [sp, #4]
    fc36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc3a:	bf00      	nop
    fc3c:	b003      	add	sp, #12
    fc3e:	f85d fb04 	ldr.w	pc, [sp], #4
    fc42:	bf00      	nop
    fc44:	1fff9290 	.word	0x1fff9290
    fc48:	1fff928c 	.word	0x1fff928c

0000fc4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    fc4c:	b500      	push	{lr}
    fc4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc50:	f7f1 fd92 	bl	1778 <Sys_GetCoreID>
    fc54:	4603      	mov	r3, r0
    fc56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    fc58:	4a0d      	ldr	r2, [pc, #52]	; (fc90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fc5a:	9b01      	ldr	r3, [sp, #4]
    fc5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc60:	1e5a      	subs	r2, r3, #1
    fc62:	490b      	ldr	r1, [pc, #44]	; (fc90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fc64:	9b01      	ldr	r3, [sp, #4]
    fc66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    fc6a:	4a0a      	ldr	r2, [pc, #40]	; (fc94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    fc6c:	9b01      	ldr	r3, [sp, #4]
    fc6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc72:	f003 0301 	and.w	r3, r3, #1
    fc76:	2b00      	cmp	r3, #0
    fc78:	d106      	bne.n	fc88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    fc7a:	4a05      	ldr	r2, [pc, #20]	; (fc90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fc7c:	9b01      	ldr	r3, [sp, #4]
    fc7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc82:	2b00      	cmp	r3, #0
    fc84:	d100      	bne.n	fc88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc88:	bf00      	nop
    fc8a:	b003      	add	sp, #12
    fc8c:	f85d fb04 	ldr.w	pc, [sp], #4
    fc90:	1fff9290 	.word	0x1fff9290
    fc94:	1fff928c 	.word	0x1fff928c

0000fc98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    fc98:	b500      	push	{lr}
    fc9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc9c:	f7f1 fd6c 	bl	1778 <Sys_GetCoreID>
    fca0:	4603      	mov	r3, r0
    fca2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    fca4:	4a10      	ldr	r2, [pc, #64]	; (fce8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fca6:	9b01      	ldr	r3, [sp, #4]
    fca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcac:	2b00      	cmp	r3, #0
    fcae:	d10d      	bne.n	fccc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fcb0:	f7f0 fe0e 	bl	8d0 <Adc_schm_read_msr>
    fcb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fcb6:	9b00      	ldr	r3, [sp, #0]
    fcb8:	f003 0301 	and.w	r3, r3, #1
    fcbc:	2b00      	cmp	r3, #0
    fcbe:	d100      	bne.n	fcc2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fcc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    fcc2:	490a      	ldr	r1, [pc, #40]	; (fcec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    fcc4:	9b01      	ldr	r3, [sp, #4]
    fcc6:	9a00      	ldr	r2, [sp, #0]
    fcc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    fccc:	4a06      	ldr	r2, [pc, #24]	; (fce8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fcce:	9b01      	ldr	r3, [sp, #4]
    fcd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcd4:	1c5a      	adds	r2, r3, #1
    fcd6:	4904      	ldr	r1, [pc, #16]	; (fce8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fcd8:	9b01      	ldr	r3, [sp, #4]
    fcda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fcde:	bf00      	nop
    fce0:	b003      	add	sp, #12
    fce2:	f85d fb04 	ldr.w	pc, [sp], #4
    fce6:	bf00      	nop
    fce8:	1fff9298 	.word	0x1fff9298
    fcec:	1fff9294 	.word	0x1fff9294

0000fcf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    fcf0:	b500      	push	{lr}
    fcf2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcf4:	f7f1 fd40 	bl	1778 <Sys_GetCoreID>
    fcf8:	4603      	mov	r3, r0
    fcfa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    fcfc:	4a0d      	ldr	r2, [pc, #52]	; (fd34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    fcfe:	9b01      	ldr	r3, [sp, #4]
    fd00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd04:	1e5a      	subs	r2, r3, #1
    fd06:	490b      	ldr	r1, [pc, #44]	; (fd34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    fd08:	9b01      	ldr	r3, [sp, #4]
    fd0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    fd0e:	4a0a      	ldr	r2, [pc, #40]	; (fd38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    fd10:	9b01      	ldr	r3, [sp, #4]
    fd12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd16:	f003 0301 	and.w	r3, r3, #1
    fd1a:	2b00      	cmp	r3, #0
    fd1c:	d106      	bne.n	fd2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    fd1e:	4a05      	ldr	r2, [pc, #20]	; (fd34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    fd20:	9b01      	ldr	r3, [sp, #4]
    fd22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd26:	2b00      	cmp	r3, #0
    fd28:	d100      	bne.n	fd2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd2c:	bf00      	nop
    fd2e:	b003      	add	sp, #12
    fd30:	f85d fb04 	ldr.w	pc, [sp], #4
    fd34:	1fff9298 	.word	0x1fff9298
    fd38:	1fff9294 	.word	0x1fff9294

0000fd3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    fd3c:	b500      	push	{lr}
    fd3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd40:	f7f1 fd1a 	bl	1778 <Sys_GetCoreID>
    fd44:	4603      	mov	r3, r0
    fd46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    fd48:	4a10      	ldr	r2, [pc, #64]	; (fd8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fd4a:	9b01      	ldr	r3, [sp, #4]
    fd4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd50:	2b00      	cmp	r3, #0
    fd52:	d10d      	bne.n	fd70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd54:	f7f0 fdbc 	bl	8d0 <Adc_schm_read_msr>
    fd58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd5a:	9b00      	ldr	r3, [sp, #0]
    fd5c:	f003 0301 	and.w	r3, r3, #1
    fd60:	2b00      	cmp	r3, #0
    fd62:	d100      	bne.n	fd66 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    fd66:	490a      	ldr	r1, [pc, #40]	; (fd90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    fd68:	9b01      	ldr	r3, [sp, #4]
    fd6a:	9a00      	ldr	r2, [sp, #0]
    fd6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    fd70:	4a06      	ldr	r2, [pc, #24]	; (fd8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fd72:	9b01      	ldr	r3, [sp, #4]
    fd74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd78:	1c5a      	adds	r2, r3, #1
    fd7a:	4904      	ldr	r1, [pc, #16]	; (fd8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fd7c:	9b01      	ldr	r3, [sp, #4]
    fd7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd82:	bf00      	nop
    fd84:	b003      	add	sp, #12
    fd86:	f85d fb04 	ldr.w	pc, [sp], #4
    fd8a:	bf00      	nop
    fd8c:	1fff92a0 	.word	0x1fff92a0
    fd90:	1fff929c 	.word	0x1fff929c

0000fd94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    fd94:	b500      	push	{lr}
    fd96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd98:	f7f1 fcee 	bl	1778 <Sys_GetCoreID>
    fd9c:	4603      	mov	r3, r0
    fd9e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    fda0:	4a0d      	ldr	r2, [pc, #52]	; (fdd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fda2:	9b01      	ldr	r3, [sp, #4]
    fda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fda8:	1e5a      	subs	r2, r3, #1
    fdaa:	490b      	ldr	r1, [pc, #44]	; (fdd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fdac:	9b01      	ldr	r3, [sp, #4]
    fdae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    fdb2:	4a0a      	ldr	r2, [pc, #40]	; (fddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    fdb4:	9b01      	ldr	r3, [sp, #4]
    fdb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdba:	f003 0301 	and.w	r3, r3, #1
    fdbe:	2b00      	cmp	r3, #0
    fdc0:	d106      	bne.n	fdd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    fdc2:	4a05      	ldr	r2, [pc, #20]	; (fdd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fdc4:	9b01      	ldr	r3, [sp, #4]
    fdc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdca:	2b00      	cmp	r3, #0
    fdcc:	d100      	bne.n	fdd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fdce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fdd0:	bf00      	nop
    fdd2:	b003      	add	sp, #12
    fdd4:	f85d fb04 	ldr.w	pc, [sp], #4
    fdd8:	1fff92a0 	.word	0x1fff92a0
    fddc:	1fff929c 	.word	0x1fff929c

0000fde0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    fde0:	b500      	push	{lr}
    fde2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fde4:	f7f1 fcc8 	bl	1778 <Sys_GetCoreID>
    fde8:	4603      	mov	r3, r0
    fdea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    fdec:	4a10      	ldr	r2, [pc, #64]	; (fe30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fdee:	9b01      	ldr	r3, [sp, #4]
    fdf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdf4:	2b00      	cmp	r3, #0
    fdf6:	d10d      	bne.n	fe14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fdf8:	f7f0 fd6a 	bl	8d0 <Adc_schm_read_msr>
    fdfc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fdfe:	9b00      	ldr	r3, [sp, #0]
    fe00:	f003 0301 	and.w	r3, r3, #1
    fe04:	2b00      	cmp	r3, #0
    fe06:	d100      	bne.n	fe0a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe08:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    fe0a:	490a      	ldr	r1, [pc, #40]	; (fe34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    fe0c:	9b01      	ldr	r3, [sp, #4]
    fe0e:	9a00      	ldr	r2, [sp, #0]
    fe10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    fe14:	4a06      	ldr	r2, [pc, #24]	; (fe30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fe16:	9b01      	ldr	r3, [sp, #4]
    fe18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe1c:	1c5a      	adds	r2, r3, #1
    fe1e:	4904      	ldr	r1, [pc, #16]	; (fe30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fe20:	9b01      	ldr	r3, [sp, #4]
    fe22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe26:	bf00      	nop
    fe28:	b003      	add	sp, #12
    fe2a:	f85d fb04 	ldr.w	pc, [sp], #4
    fe2e:	bf00      	nop
    fe30:	1fff92a8 	.word	0x1fff92a8
    fe34:	1fff92a4 	.word	0x1fff92a4

0000fe38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    fe38:	b500      	push	{lr}
    fe3a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe3c:	f7f1 fc9c 	bl	1778 <Sys_GetCoreID>
    fe40:	4603      	mov	r3, r0
    fe42:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    fe44:	4a0d      	ldr	r2, [pc, #52]	; (fe7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fe46:	9b01      	ldr	r3, [sp, #4]
    fe48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe4c:	1e5a      	subs	r2, r3, #1
    fe4e:	490b      	ldr	r1, [pc, #44]	; (fe7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fe50:	9b01      	ldr	r3, [sp, #4]
    fe52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    fe56:	4a0a      	ldr	r2, [pc, #40]	; (fe80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    fe58:	9b01      	ldr	r3, [sp, #4]
    fe5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe5e:	f003 0301 	and.w	r3, r3, #1
    fe62:	2b00      	cmp	r3, #0
    fe64:	d106      	bne.n	fe74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    fe66:	4a05      	ldr	r2, [pc, #20]	; (fe7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fe68:	9b01      	ldr	r3, [sp, #4]
    fe6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe6e:	2b00      	cmp	r3, #0
    fe70:	d100      	bne.n	fe74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe72:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe74:	bf00      	nop
    fe76:	b003      	add	sp, #12
    fe78:	f85d fb04 	ldr.w	pc, [sp], #4
    fe7c:	1fff92a8 	.word	0x1fff92a8
    fe80:	1fff92a4 	.word	0x1fff92a4

0000fe84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    fe84:	b500      	push	{lr}
    fe86:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe88:	f7f1 fc76 	bl	1778 <Sys_GetCoreID>
    fe8c:	4603      	mov	r3, r0
    fe8e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    fe90:	4a10      	ldr	r2, [pc, #64]	; (fed4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    fe92:	9b01      	ldr	r3, [sp, #4]
    fe94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe98:	2b00      	cmp	r3, #0
    fe9a:	d10d      	bne.n	feb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe9c:	f7f0 fd18 	bl	8d0 <Adc_schm_read_msr>
    fea0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fea2:	9b00      	ldr	r3, [sp, #0]
    fea4:	f003 0301 	and.w	r3, r3, #1
    fea8:	2b00      	cmp	r3, #0
    feaa:	d100      	bne.n	feae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    feac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    feae:	490a      	ldr	r1, [pc, #40]	; (fed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    feb0:	9b01      	ldr	r3, [sp, #4]
    feb2:	9a00      	ldr	r2, [sp, #0]
    feb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    feb8:	4a06      	ldr	r2, [pc, #24]	; (fed4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    feba:	9b01      	ldr	r3, [sp, #4]
    febc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fec0:	1c5a      	adds	r2, r3, #1
    fec2:	4904      	ldr	r1, [pc, #16]	; (fed4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    fec4:	9b01      	ldr	r3, [sp, #4]
    fec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    feca:	bf00      	nop
    fecc:	b003      	add	sp, #12
    fece:	f85d fb04 	ldr.w	pc, [sp], #4
    fed2:	bf00      	nop
    fed4:	1fff92b0 	.word	0x1fff92b0
    fed8:	1fff92ac 	.word	0x1fff92ac

0000fedc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    fedc:	b500      	push	{lr}
    fede:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fee0:	f7f1 fc4a 	bl	1778 <Sys_GetCoreID>
    fee4:	4603      	mov	r3, r0
    fee6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    fee8:	4a0d      	ldr	r2, [pc, #52]	; (ff20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    feea:	9b01      	ldr	r3, [sp, #4]
    feec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fef0:	1e5a      	subs	r2, r3, #1
    fef2:	490b      	ldr	r1, [pc, #44]	; (ff20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    fef4:	9b01      	ldr	r3, [sp, #4]
    fef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    fefa:	4a0a      	ldr	r2, [pc, #40]	; (ff24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    fefc:	9b01      	ldr	r3, [sp, #4]
    fefe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff02:	f003 0301 	and.w	r3, r3, #1
    ff06:	2b00      	cmp	r3, #0
    ff08:	d106      	bne.n	ff18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    ff0a:	4a05      	ldr	r2, [pc, #20]	; (ff20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    ff0c:	9b01      	ldr	r3, [sp, #4]
    ff0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff12:	2b00      	cmp	r3, #0
    ff14:	d100      	bne.n	ff18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff18:	bf00      	nop
    ff1a:	b003      	add	sp, #12
    ff1c:	f85d fb04 	ldr.w	pc, [sp], #4
    ff20:	1fff92b0 	.word	0x1fff92b0
    ff24:	1fff92ac 	.word	0x1fff92ac

0000ff28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    ff28:	b500      	push	{lr}
    ff2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff2c:	f7f1 fc24 	bl	1778 <Sys_GetCoreID>
    ff30:	4603      	mov	r3, r0
    ff32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    ff34:	4a10      	ldr	r2, [pc, #64]	; (ff78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ff36:	9b01      	ldr	r3, [sp, #4]
    ff38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff3c:	2b00      	cmp	r3, #0
    ff3e:	d10d      	bne.n	ff5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff40:	f7f0 fcc6 	bl	8d0 <Adc_schm_read_msr>
    ff44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff46:	9b00      	ldr	r3, [sp, #0]
    ff48:	f003 0301 	and.w	r3, r3, #1
    ff4c:	2b00      	cmp	r3, #0
    ff4e:	d100      	bne.n	ff52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    ff52:	490a      	ldr	r1, [pc, #40]	; (ff7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    ff54:	9b01      	ldr	r3, [sp, #4]
    ff56:	9a00      	ldr	r2, [sp, #0]
    ff58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    ff5c:	4a06      	ldr	r2, [pc, #24]	; (ff78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ff5e:	9b01      	ldr	r3, [sp, #4]
    ff60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff64:	1c5a      	adds	r2, r3, #1
    ff66:	4904      	ldr	r1, [pc, #16]	; (ff78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ff68:	9b01      	ldr	r3, [sp, #4]
    ff6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff6e:	bf00      	nop
    ff70:	b003      	add	sp, #12
    ff72:	f85d fb04 	ldr.w	pc, [sp], #4
    ff76:	bf00      	nop
    ff78:	1fff92b8 	.word	0x1fff92b8
    ff7c:	1fff92b4 	.word	0x1fff92b4

0000ff80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    ff80:	b500      	push	{lr}
    ff82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff84:	f7f1 fbf8 	bl	1778 <Sys_GetCoreID>
    ff88:	4603      	mov	r3, r0
    ff8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    ff8c:	4a0d      	ldr	r2, [pc, #52]	; (ffc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    ff8e:	9b01      	ldr	r3, [sp, #4]
    ff90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff94:	1e5a      	subs	r2, r3, #1
    ff96:	490b      	ldr	r1, [pc, #44]	; (ffc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    ff98:	9b01      	ldr	r3, [sp, #4]
    ff9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    ff9e:	4a0a      	ldr	r2, [pc, #40]	; (ffc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    ffa0:	9b01      	ldr	r3, [sp, #4]
    ffa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffa6:	f003 0301 	and.w	r3, r3, #1
    ffaa:	2b00      	cmp	r3, #0
    ffac:	d106      	bne.n	ffbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    ffae:	4a05      	ldr	r2, [pc, #20]	; (ffc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    ffb0:	9b01      	ldr	r3, [sp, #4]
    ffb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffb6:	2b00      	cmp	r3, #0
    ffb8:	d100      	bne.n	ffbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ffba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ffbc:	bf00      	nop
    ffbe:	b003      	add	sp, #12
    ffc0:	f85d fb04 	ldr.w	pc, [sp], #4
    ffc4:	1fff92b8 	.word	0x1fff92b8
    ffc8:	1fff92b4 	.word	0x1fff92b4

0000ffcc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    ffcc:	b500      	push	{lr}
    ffce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffd0:	f7f1 fbd2 	bl	1778 <Sys_GetCoreID>
    ffd4:	4603      	mov	r3, r0
    ffd6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    ffd8:	4a10      	ldr	r2, [pc, #64]	; (1001c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    ffda:	9b01      	ldr	r3, [sp, #4]
    ffdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffe0:	2b00      	cmp	r3, #0
    ffe2:	d10d      	bne.n	10000 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ffe4:	f7f0 fc74 	bl	8d0 <Adc_schm_read_msr>
    ffe8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ffea:	9b00      	ldr	r3, [sp, #0]
    ffec:	f003 0301 	and.w	r3, r3, #1
    fff0:	2b00      	cmp	r3, #0
    fff2:	d100      	bne.n	fff6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fff4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    fff6:	490a      	ldr	r1, [pc, #40]	; (10020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
    fff8:	9b01      	ldr	r3, [sp, #4]
    fffa:	9a00      	ldr	r2, [sp, #0]
    fffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   10000:	4a06      	ldr	r2, [pc, #24]	; (1001c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10002:	9b01      	ldr	r3, [sp, #4]
   10004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10008:	1c5a      	adds	r2, r3, #1
   1000a:	4904      	ldr	r1, [pc, #16]	; (1001c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   1000c:	9b01      	ldr	r3, [sp, #4]
   1000e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10012:	bf00      	nop
   10014:	b003      	add	sp, #12
   10016:	f85d fb04 	ldr.w	pc, [sp], #4
   1001a:	bf00      	nop
   1001c:	1fff92c0 	.word	0x1fff92c0
   10020:	1fff92bc 	.word	0x1fff92bc

00010024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   10024:	b500      	push	{lr}
   10026:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10028:	f7f1 fba6 	bl	1778 <Sys_GetCoreID>
   1002c:	4603      	mov	r3, r0
   1002e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   10030:	4a0d      	ldr	r2, [pc, #52]	; (10068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10032:	9b01      	ldr	r3, [sp, #4]
   10034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10038:	1e5a      	subs	r2, r3, #1
   1003a:	490b      	ldr	r1, [pc, #44]	; (10068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   1003c:	9b01      	ldr	r3, [sp, #4]
   1003e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   10042:	4a0a      	ldr	r2, [pc, #40]	; (1006c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   10044:	9b01      	ldr	r3, [sp, #4]
   10046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1004a:	f003 0301 	and.w	r3, r3, #1
   1004e:	2b00      	cmp	r3, #0
   10050:	d106      	bne.n	10060 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   10052:	4a05      	ldr	r2, [pc, #20]	; (10068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10054:	9b01      	ldr	r3, [sp, #4]
   10056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1005a:	2b00      	cmp	r3, #0
   1005c:	d100      	bne.n	10060 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1005e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10060:	bf00      	nop
   10062:	b003      	add	sp, #12
   10064:	f85d fb04 	ldr.w	pc, [sp], #4
   10068:	1fff92c0 	.word	0x1fff92c0
   1006c:	1fff92bc 	.word	0x1fff92bc

00010070 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10070:	b500      	push	{lr}
   10072:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10074:	f7f1 fb80 	bl	1778 <Sys_GetCoreID>
   10078:	4603      	mov	r3, r0
   1007a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   1007c:	4a10      	ldr	r2, [pc, #64]	; (100c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   1007e:	9b01      	ldr	r3, [sp, #4]
   10080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10084:	2b00      	cmp	r3, #0
   10086:	d10d      	bne.n	100a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10088:	f7f0 fc22 	bl	8d0 <Adc_schm_read_msr>
   1008c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1008e:	9b00      	ldr	r3, [sp, #0]
   10090:	f003 0301 	and.w	r3, r3, #1
   10094:	2b00      	cmp	r3, #0
   10096:	d100      	bne.n	1009a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10098:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   1009a:	490a      	ldr	r1, [pc, #40]	; (100c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   1009c:	9b01      	ldr	r3, [sp, #4]
   1009e:	9a00      	ldr	r2, [sp, #0]
   100a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   100a4:	4a06      	ldr	r2, [pc, #24]	; (100c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   100a6:	9b01      	ldr	r3, [sp, #4]
   100a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100ac:	1c5a      	adds	r2, r3, #1
   100ae:	4904      	ldr	r1, [pc, #16]	; (100c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   100b0:	9b01      	ldr	r3, [sp, #4]
   100b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   100b6:	bf00      	nop
   100b8:	b003      	add	sp, #12
   100ba:	f85d fb04 	ldr.w	pc, [sp], #4
   100be:	bf00      	nop
   100c0:	1fff92c8 	.word	0x1fff92c8
   100c4:	1fff92c4 	.word	0x1fff92c4

000100c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   100c8:	b500      	push	{lr}
   100ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100cc:	f7f1 fb54 	bl	1778 <Sys_GetCoreID>
   100d0:	4603      	mov	r3, r0
   100d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   100d4:	4a0d      	ldr	r2, [pc, #52]	; (1010c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   100d6:	9b01      	ldr	r3, [sp, #4]
   100d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100dc:	1e5a      	subs	r2, r3, #1
   100de:	490b      	ldr	r1, [pc, #44]	; (1010c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   100e0:	9b01      	ldr	r3, [sp, #4]
   100e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   100e6:	4a0a      	ldr	r2, [pc, #40]	; (10110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   100e8:	9b01      	ldr	r3, [sp, #4]
   100ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100ee:	f003 0301 	and.w	r3, r3, #1
   100f2:	2b00      	cmp	r3, #0
   100f4:	d106      	bne.n	10104 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   100f6:	4a05      	ldr	r2, [pc, #20]	; (1010c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   100f8:	9b01      	ldr	r3, [sp, #4]
   100fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100fe:	2b00      	cmp	r3, #0
   10100:	d100      	bne.n	10104 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10102:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10104:	bf00      	nop
   10106:	b003      	add	sp, #12
   10108:	f85d fb04 	ldr.w	pc, [sp], #4
   1010c:	1fff92c8 	.word	0x1fff92c8
   10110:	1fff92c4 	.word	0x1fff92c4

00010114 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10114:	b500      	push	{lr}
   10116:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10118:	f7f1 fb2e 	bl	1778 <Sys_GetCoreID>
   1011c:	4603      	mov	r3, r0
   1011e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   10120:	4a10      	ldr	r2, [pc, #64]	; (10164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10122:	9b01      	ldr	r3, [sp, #4]
   10124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10128:	2b00      	cmp	r3, #0
   1012a:	d10d      	bne.n	10148 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1012c:	f7f0 fbd0 	bl	8d0 <Adc_schm_read_msr>
   10130:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10132:	9b00      	ldr	r3, [sp, #0]
   10134:	f003 0301 	and.w	r3, r3, #1
   10138:	2b00      	cmp	r3, #0
   1013a:	d100      	bne.n	1013e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1013c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   1013e:	490a      	ldr	r1, [pc, #40]	; (10168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   10140:	9b01      	ldr	r3, [sp, #4]
   10142:	9a00      	ldr	r2, [sp, #0]
   10144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   10148:	4a06      	ldr	r2, [pc, #24]	; (10164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   1014a:	9b01      	ldr	r3, [sp, #4]
   1014c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10150:	1c5a      	adds	r2, r3, #1
   10152:	4904      	ldr	r1, [pc, #16]	; (10164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10154:	9b01      	ldr	r3, [sp, #4]
   10156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1015a:	bf00      	nop
   1015c:	b003      	add	sp, #12
   1015e:	f85d fb04 	ldr.w	pc, [sp], #4
   10162:	bf00      	nop
   10164:	1fff92d0 	.word	0x1fff92d0
   10168:	1fff92cc 	.word	0x1fff92cc

0001016c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   1016c:	b500      	push	{lr}
   1016e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10170:	f7f1 fb02 	bl	1778 <Sys_GetCoreID>
   10174:	4603      	mov	r3, r0
   10176:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   10178:	4a0d      	ldr	r2, [pc, #52]	; (101b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   1017a:	9b01      	ldr	r3, [sp, #4]
   1017c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10180:	1e5a      	subs	r2, r3, #1
   10182:	490b      	ldr	r1, [pc, #44]	; (101b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10184:	9b01      	ldr	r3, [sp, #4]
   10186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   1018a:	4a0a      	ldr	r2, [pc, #40]	; (101b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   1018c:	9b01      	ldr	r3, [sp, #4]
   1018e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10192:	f003 0301 	and.w	r3, r3, #1
   10196:	2b00      	cmp	r3, #0
   10198:	d106      	bne.n	101a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   1019a:	4a05      	ldr	r2, [pc, #20]	; (101b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   1019c:	9b01      	ldr	r3, [sp, #4]
   1019e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101a2:	2b00      	cmp	r3, #0
   101a4:	d100      	bne.n	101a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   101a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   101a8:	bf00      	nop
   101aa:	b003      	add	sp, #12
   101ac:	f85d fb04 	ldr.w	pc, [sp], #4
   101b0:	1fff92d0 	.word	0x1fff92d0
   101b4:	1fff92cc 	.word	0x1fff92cc

000101b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   101b8:	b500      	push	{lr}
   101ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101bc:	f7f1 fadc 	bl	1778 <Sys_GetCoreID>
   101c0:	4603      	mov	r3, r0
   101c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   101c4:	4a10      	ldr	r2, [pc, #64]	; (10208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   101c6:	9b01      	ldr	r3, [sp, #4]
   101c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101cc:	2b00      	cmp	r3, #0
   101ce:	d10d      	bne.n	101ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   101d0:	f7f0 fb7e 	bl	8d0 <Adc_schm_read_msr>
   101d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   101d6:	9b00      	ldr	r3, [sp, #0]
   101d8:	f003 0301 	and.w	r3, r3, #1
   101dc:	2b00      	cmp	r3, #0
   101de:	d100      	bne.n	101e2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   101e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   101e2:	490a      	ldr	r1, [pc, #40]	; (1020c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   101e4:	9b01      	ldr	r3, [sp, #4]
   101e6:	9a00      	ldr	r2, [sp, #0]
   101e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   101ec:	4a06      	ldr	r2, [pc, #24]	; (10208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   101ee:	9b01      	ldr	r3, [sp, #4]
   101f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101f4:	1c5a      	adds	r2, r3, #1
   101f6:	4904      	ldr	r1, [pc, #16]	; (10208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   101f8:	9b01      	ldr	r3, [sp, #4]
   101fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   101fe:	bf00      	nop
   10200:	b003      	add	sp, #12
   10202:	f85d fb04 	ldr.w	pc, [sp], #4
   10206:	bf00      	nop
   10208:	1fff92d8 	.word	0x1fff92d8
   1020c:	1fff92d4 	.word	0x1fff92d4

00010210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10210:	b500      	push	{lr}
   10212:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10214:	f7f1 fab0 	bl	1778 <Sys_GetCoreID>
   10218:	4603      	mov	r3, r0
   1021a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   1021c:	4a0d      	ldr	r2, [pc, #52]	; (10254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   1021e:	9b01      	ldr	r3, [sp, #4]
   10220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10224:	1e5a      	subs	r2, r3, #1
   10226:	490b      	ldr	r1, [pc, #44]	; (10254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10228:	9b01      	ldr	r3, [sp, #4]
   1022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   1022e:	4a0a      	ldr	r2, [pc, #40]	; (10258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   10230:	9b01      	ldr	r3, [sp, #4]
   10232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10236:	f003 0301 	and.w	r3, r3, #1
   1023a:	2b00      	cmp	r3, #0
   1023c:	d106      	bne.n	1024c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   1023e:	4a05      	ldr	r2, [pc, #20]	; (10254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10240:	9b01      	ldr	r3, [sp, #4]
   10242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10246:	2b00      	cmp	r3, #0
   10248:	d100      	bne.n	1024c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1024a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1024c:	bf00      	nop
   1024e:	b003      	add	sp, #12
   10250:	f85d fb04 	ldr.w	pc, [sp], #4
   10254:	1fff92d8 	.word	0x1fff92d8
   10258:	1fff92d4 	.word	0x1fff92d4

0001025c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   1025c:	b500      	push	{lr}
   1025e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10260:	f7f1 fa8a 	bl	1778 <Sys_GetCoreID>
   10264:	4603      	mov	r3, r0
   10266:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   10268:	4a10      	ldr	r2, [pc, #64]	; (102ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   1026a:	9b01      	ldr	r3, [sp, #4]
   1026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10270:	2b00      	cmp	r3, #0
   10272:	d10d      	bne.n	10290 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10274:	f7f0 fb2c 	bl	8d0 <Adc_schm_read_msr>
   10278:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1027a:	9b00      	ldr	r3, [sp, #0]
   1027c:	f003 0301 	and.w	r3, r3, #1
   10280:	2b00      	cmp	r3, #0
   10282:	d100      	bne.n	10286 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10284:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   10286:	490a      	ldr	r1, [pc, #40]	; (102b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   10288:	9b01      	ldr	r3, [sp, #4]
   1028a:	9a00      	ldr	r2, [sp, #0]
   1028c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   10290:	4a06      	ldr	r2, [pc, #24]	; (102ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10292:	9b01      	ldr	r3, [sp, #4]
   10294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10298:	1c5a      	adds	r2, r3, #1
   1029a:	4904      	ldr	r1, [pc, #16]	; (102ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   1029c:	9b01      	ldr	r3, [sp, #4]
   1029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   102a2:	bf00      	nop
   102a4:	b003      	add	sp, #12
   102a6:	f85d fb04 	ldr.w	pc, [sp], #4
   102aa:	bf00      	nop
   102ac:	1fff92e0 	.word	0x1fff92e0
   102b0:	1fff92dc 	.word	0x1fff92dc

000102b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   102b4:	b500      	push	{lr}
   102b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102b8:	f7f1 fa5e 	bl	1778 <Sys_GetCoreID>
   102bc:	4603      	mov	r3, r0
   102be:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   102c0:	4a0d      	ldr	r2, [pc, #52]	; (102f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   102c2:	9b01      	ldr	r3, [sp, #4]
   102c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102c8:	1e5a      	subs	r2, r3, #1
   102ca:	490b      	ldr	r1, [pc, #44]	; (102f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   102cc:	9b01      	ldr	r3, [sp, #4]
   102ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   102d2:	4a0a      	ldr	r2, [pc, #40]	; (102fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   102d4:	9b01      	ldr	r3, [sp, #4]
   102d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102da:	f003 0301 	and.w	r3, r3, #1
   102de:	2b00      	cmp	r3, #0
   102e0:	d106      	bne.n	102f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   102e2:	4a05      	ldr	r2, [pc, #20]	; (102f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   102e4:	9b01      	ldr	r3, [sp, #4]
   102e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102ea:	2b00      	cmp	r3, #0
   102ec:	d100      	bne.n	102f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   102ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   102f0:	bf00      	nop
   102f2:	b003      	add	sp, #12
   102f4:	f85d fb04 	ldr.w	pc, [sp], #4
   102f8:	1fff92e0 	.word	0x1fff92e0
   102fc:	1fff92dc 	.word	0x1fff92dc

00010300 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   10300:	b500      	push	{lr}
   10302:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10304:	f7f1 fa38 	bl	1778 <Sys_GetCoreID>
   10308:	4603      	mov	r3, r0
   1030a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   1030c:	4a10      	ldr	r2, [pc, #64]	; (10350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1030e:	9b01      	ldr	r3, [sp, #4]
   10310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10314:	2b00      	cmp	r3, #0
   10316:	d10d      	bne.n	10334 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10318:	f7f0 fada 	bl	8d0 <Adc_schm_read_msr>
   1031c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1031e:	9b00      	ldr	r3, [sp, #0]
   10320:	f003 0301 	and.w	r3, r3, #1
   10324:	2b00      	cmp	r3, #0
   10326:	d100      	bne.n	1032a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10328:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   1032a:	490a      	ldr	r1, [pc, #40]	; (10354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   1032c:	9b01      	ldr	r3, [sp, #4]
   1032e:	9a00      	ldr	r2, [sp, #0]
   10330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   10334:	4a06      	ldr	r2, [pc, #24]	; (10350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   10336:	9b01      	ldr	r3, [sp, #4]
   10338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1033c:	1c5a      	adds	r2, r3, #1
   1033e:	4904      	ldr	r1, [pc, #16]	; (10350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   10340:	9b01      	ldr	r3, [sp, #4]
   10342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10346:	bf00      	nop
   10348:	b003      	add	sp, #12
   1034a:	f85d fb04 	ldr.w	pc, [sp], #4
   1034e:	bf00      	nop
   10350:	1fff92e8 	.word	0x1fff92e8
   10354:	1fff92e4 	.word	0x1fff92e4

00010358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   10358:	b500      	push	{lr}
   1035a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1035c:	f7f1 fa0c 	bl	1778 <Sys_GetCoreID>
   10360:	4603      	mov	r3, r0
   10362:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   10364:	4a0d      	ldr	r2, [pc, #52]	; (1039c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   10366:	9b01      	ldr	r3, [sp, #4]
   10368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1036c:	1e5a      	subs	r2, r3, #1
   1036e:	490b      	ldr	r1, [pc, #44]	; (1039c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   10370:	9b01      	ldr	r3, [sp, #4]
   10372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   10376:	4a0a      	ldr	r2, [pc, #40]	; (103a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   10378:	9b01      	ldr	r3, [sp, #4]
   1037a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1037e:	f003 0301 	and.w	r3, r3, #1
   10382:	2b00      	cmp	r3, #0
   10384:	d106      	bne.n	10394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   10386:	4a05      	ldr	r2, [pc, #20]	; (1039c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   10388:	9b01      	ldr	r3, [sp, #4]
   1038a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1038e:	2b00      	cmp	r3, #0
   10390:	d100      	bne.n	10394 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10392:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10394:	bf00      	nop
   10396:	b003      	add	sp, #12
   10398:	f85d fb04 	ldr.w	pc, [sp], #4
   1039c:	1fff92e8 	.word	0x1fff92e8
   103a0:	1fff92e4 	.word	0x1fff92e4

000103a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   103a4:	b500      	push	{lr}
   103a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103a8:	f7f1 f9e6 	bl	1778 <Sys_GetCoreID>
   103ac:	4603      	mov	r3, r0
   103ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   103b0:	4a10      	ldr	r2, [pc, #64]	; (103f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   103b2:	9b01      	ldr	r3, [sp, #4]
   103b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103b8:	2b00      	cmp	r3, #0
   103ba:	d10d      	bne.n	103d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   103bc:	f7f0 fa88 	bl	8d0 <Adc_schm_read_msr>
   103c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   103c2:	9b00      	ldr	r3, [sp, #0]
   103c4:	f003 0301 	and.w	r3, r3, #1
   103c8:	2b00      	cmp	r3, #0
   103ca:	d100      	bne.n	103ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   103cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   103ce:	490a      	ldr	r1, [pc, #40]	; (103f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   103d0:	9b01      	ldr	r3, [sp, #4]
   103d2:	9a00      	ldr	r2, [sp, #0]
   103d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   103d8:	4a06      	ldr	r2, [pc, #24]	; (103f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   103da:	9b01      	ldr	r3, [sp, #4]
   103dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103e0:	1c5a      	adds	r2, r3, #1
   103e2:	4904      	ldr	r1, [pc, #16]	; (103f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   103e4:	9b01      	ldr	r3, [sp, #4]
   103e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   103ea:	bf00      	nop
   103ec:	b003      	add	sp, #12
   103ee:	f85d fb04 	ldr.w	pc, [sp], #4
   103f2:	bf00      	nop
   103f4:	1fff92f0 	.word	0x1fff92f0
   103f8:	1fff92ec 	.word	0x1fff92ec

000103fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   103fc:	b500      	push	{lr}
   103fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10400:	f7f1 f9ba 	bl	1778 <Sys_GetCoreID>
   10404:	4603      	mov	r3, r0
   10406:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   10408:	4a0d      	ldr	r2, [pc, #52]	; (10440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   1040a:	9b01      	ldr	r3, [sp, #4]
   1040c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10410:	1e5a      	subs	r2, r3, #1
   10412:	490b      	ldr	r1, [pc, #44]	; (10440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   10414:	9b01      	ldr	r3, [sp, #4]
   10416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   1041a:	4a0a      	ldr	r2, [pc, #40]	; (10444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   1041c:	9b01      	ldr	r3, [sp, #4]
   1041e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10422:	f003 0301 	and.w	r3, r3, #1
   10426:	2b00      	cmp	r3, #0
   10428:	d106      	bne.n	10438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   1042a:	4a05      	ldr	r2, [pc, #20]	; (10440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   1042c:	9b01      	ldr	r3, [sp, #4]
   1042e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10432:	2b00      	cmp	r3, #0
   10434:	d100      	bne.n	10438 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10436:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10438:	bf00      	nop
   1043a:	b003      	add	sp, #12
   1043c:	f85d fb04 	ldr.w	pc, [sp], #4
   10440:	1fff92f0 	.word	0x1fff92f0
   10444:	1fff92ec 	.word	0x1fff92ec

00010448 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   10448:	b500      	push	{lr}
   1044a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1044c:	f7f1 f994 	bl	1778 <Sys_GetCoreID>
   10450:	4603      	mov	r3, r0
   10452:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   10454:	4a10      	ldr	r2, [pc, #64]	; (10498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   10456:	9b01      	ldr	r3, [sp, #4]
   10458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1045c:	2b00      	cmp	r3, #0
   1045e:	d10d      	bne.n	1047c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10460:	f7f0 fa36 	bl	8d0 <Adc_schm_read_msr>
   10464:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10466:	9b00      	ldr	r3, [sp, #0]
   10468:	f003 0301 	and.w	r3, r3, #1
   1046c:	2b00      	cmp	r3, #0
   1046e:	d100      	bne.n	10472 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10470:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   10472:	490a      	ldr	r1, [pc, #40]	; (1049c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   10474:	9b01      	ldr	r3, [sp, #4]
   10476:	9a00      	ldr	r2, [sp, #0]
   10478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   1047c:	4a06      	ldr	r2, [pc, #24]	; (10498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   1047e:	9b01      	ldr	r3, [sp, #4]
   10480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10484:	1c5a      	adds	r2, r3, #1
   10486:	4904      	ldr	r1, [pc, #16]	; (10498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   10488:	9b01      	ldr	r3, [sp, #4]
   1048a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1048e:	bf00      	nop
   10490:	b003      	add	sp, #12
   10492:	f85d fb04 	ldr.w	pc, [sp], #4
   10496:	bf00      	nop
   10498:	1fff92f8 	.word	0x1fff92f8
   1049c:	1fff92f4 	.word	0x1fff92f4

000104a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   104a0:	b500      	push	{lr}
   104a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104a4:	f7f1 f968 	bl	1778 <Sys_GetCoreID>
   104a8:	4603      	mov	r3, r0
   104aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   104ac:	4a0d      	ldr	r2, [pc, #52]	; (104e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   104ae:	9b01      	ldr	r3, [sp, #4]
   104b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104b4:	1e5a      	subs	r2, r3, #1
   104b6:	490b      	ldr	r1, [pc, #44]	; (104e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   104b8:	9b01      	ldr	r3, [sp, #4]
   104ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   104be:	4a0a      	ldr	r2, [pc, #40]	; (104e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   104c0:	9b01      	ldr	r3, [sp, #4]
   104c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104c6:	f003 0301 	and.w	r3, r3, #1
   104ca:	2b00      	cmp	r3, #0
   104cc:	d106      	bne.n	104dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   104ce:	4a05      	ldr	r2, [pc, #20]	; (104e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   104d0:	9b01      	ldr	r3, [sp, #4]
   104d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104d6:	2b00      	cmp	r3, #0
   104d8:	d100      	bne.n	104dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   104da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   104dc:	bf00      	nop
   104de:	b003      	add	sp, #12
   104e0:	f85d fb04 	ldr.w	pc, [sp], #4
   104e4:	1fff92f8 	.word	0x1fff92f8
   104e8:	1fff92f4 	.word	0x1fff92f4

000104ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   104ec:	b500      	push	{lr}
   104ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104f0:	f7f1 f942 	bl	1778 <Sys_GetCoreID>
   104f4:	4603      	mov	r3, r0
   104f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   104f8:	4a10      	ldr	r2, [pc, #64]	; (1053c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   104fa:	9b01      	ldr	r3, [sp, #4]
   104fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10500:	2b00      	cmp	r3, #0
   10502:	d10d      	bne.n	10520 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10504:	f7f0 f9e4 	bl	8d0 <Adc_schm_read_msr>
   10508:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1050a:	9b00      	ldr	r3, [sp, #0]
   1050c:	f003 0301 	and.w	r3, r3, #1
   10510:	2b00      	cmp	r3, #0
   10512:	d100      	bne.n	10516 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10514:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   10516:	490a      	ldr	r1, [pc, #40]	; (10540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   10518:	9b01      	ldr	r3, [sp, #4]
   1051a:	9a00      	ldr	r2, [sp, #0]
   1051c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   10520:	4a06      	ldr	r2, [pc, #24]	; (1053c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   10522:	9b01      	ldr	r3, [sp, #4]
   10524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10528:	1c5a      	adds	r2, r3, #1
   1052a:	4904      	ldr	r1, [pc, #16]	; (1053c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   1052c:	9b01      	ldr	r3, [sp, #4]
   1052e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10532:	bf00      	nop
   10534:	b003      	add	sp, #12
   10536:	f85d fb04 	ldr.w	pc, [sp], #4
   1053a:	bf00      	nop
   1053c:	1fff9300 	.word	0x1fff9300
   10540:	1fff92fc 	.word	0x1fff92fc

00010544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   10544:	b500      	push	{lr}
   10546:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10548:	f7f1 f916 	bl	1778 <Sys_GetCoreID>
   1054c:	4603      	mov	r3, r0
   1054e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   10550:	4a0d      	ldr	r2, [pc, #52]	; (10588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   10552:	9b01      	ldr	r3, [sp, #4]
   10554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10558:	1e5a      	subs	r2, r3, #1
   1055a:	490b      	ldr	r1, [pc, #44]	; (10588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   1055c:	9b01      	ldr	r3, [sp, #4]
   1055e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   10562:	4a0a      	ldr	r2, [pc, #40]	; (1058c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   10564:	9b01      	ldr	r3, [sp, #4]
   10566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1056a:	f003 0301 	and.w	r3, r3, #1
   1056e:	2b00      	cmp	r3, #0
   10570:	d106      	bne.n	10580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   10572:	4a05      	ldr	r2, [pc, #20]	; (10588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   10574:	9b01      	ldr	r3, [sp, #4]
   10576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1057a:	2b00      	cmp	r3, #0
   1057c:	d100      	bne.n	10580 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1057e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10580:	bf00      	nop
   10582:	b003      	add	sp, #12
   10584:	f85d fb04 	ldr.w	pc, [sp], #4
   10588:	1fff9300 	.word	0x1fff9300
   1058c:	1fff92fc 	.word	0x1fff92fc

00010590 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   10590:	b500      	push	{lr}
   10592:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10594:	f7f1 f8f0 	bl	1778 <Sys_GetCoreID>
   10598:	4603      	mov	r3, r0
   1059a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   1059c:	4a10      	ldr	r2, [pc, #64]	; (105e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   1059e:	9b01      	ldr	r3, [sp, #4]
   105a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105a4:	2b00      	cmp	r3, #0
   105a6:	d10d      	bne.n	105c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   105a8:	f7f0 f992 	bl	8d0 <Adc_schm_read_msr>
   105ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   105ae:	9b00      	ldr	r3, [sp, #0]
   105b0:	f003 0301 	and.w	r3, r3, #1
   105b4:	2b00      	cmp	r3, #0
   105b6:	d100      	bne.n	105ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   105b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   105ba:	490a      	ldr	r1, [pc, #40]	; (105e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   105bc:	9b01      	ldr	r3, [sp, #4]
   105be:	9a00      	ldr	r2, [sp, #0]
   105c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   105c4:	4a06      	ldr	r2, [pc, #24]	; (105e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   105c6:	9b01      	ldr	r3, [sp, #4]
   105c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105cc:	1c5a      	adds	r2, r3, #1
   105ce:	4904      	ldr	r1, [pc, #16]	; (105e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   105d0:	9b01      	ldr	r3, [sp, #4]
   105d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   105d6:	bf00      	nop
   105d8:	b003      	add	sp, #12
   105da:	f85d fb04 	ldr.w	pc, [sp], #4
   105de:	bf00      	nop
   105e0:	1fff9308 	.word	0x1fff9308
   105e4:	1fff9304 	.word	0x1fff9304

000105e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   105e8:	b500      	push	{lr}
   105ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105ec:	f7f1 f8c4 	bl	1778 <Sys_GetCoreID>
   105f0:	4603      	mov	r3, r0
   105f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   105f4:	4a0d      	ldr	r2, [pc, #52]	; (1062c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   105f6:	9b01      	ldr	r3, [sp, #4]
   105f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105fc:	1e5a      	subs	r2, r3, #1
   105fe:	490b      	ldr	r1, [pc, #44]	; (1062c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   10600:	9b01      	ldr	r3, [sp, #4]
   10602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   10606:	4a0a      	ldr	r2, [pc, #40]	; (10630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   10608:	9b01      	ldr	r3, [sp, #4]
   1060a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1060e:	f003 0301 	and.w	r3, r3, #1
   10612:	2b00      	cmp	r3, #0
   10614:	d106      	bne.n	10624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   10616:	4a05      	ldr	r2, [pc, #20]	; (1062c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   10618:	9b01      	ldr	r3, [sp, #4]
   1061a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1061e:	2b00      	cmp	r3, #0
   10620:	d100      	bne.n	10624 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10622:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10624:	bf00      	nop
   10626:	b003      	add	sp, #12
   10628:	f85d fb04 	ldr.w	pc, [sp], #4
   1062c:	1fff9308 	.word	0x1fff9308
   10630:	1fff9304 	.word	0x1fff9304

00010634 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   10634:	b500      	push	{lr}
   10636:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10638:	f7f1 f89e 	bl	1778 <Sys_GetCoreID>
   1063c:	4603      	mov	r3, r0
   1063e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   10640:	4a10      	ldr	r2, [pc, #64]	; (10684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   10642:	9b01      	ldr	r3, [sp, #4]
   10644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10648:	2b00      	cmp	r3, #0
   1064a:	d10d      	bne.n	10668 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1064c:	f7f0 f940 	bl	8d0 <Adc_schm_read_msr>
   10650:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10652:	9b00      	ldr	r3, [sp, #0]
   10654:	f003 0301 	and.w	r3, r3, #1
   10658:	2b00      	cmp	r3, #0
   1065a:	d100      	bne.n	1065e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1065c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   1065e:	490a      	ldr	r1, [pc, #40]	; (10688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   10660:	9b01      	ldr	r3, [sp, #4]
   10662:	9a00      	ldr	r2, [sp, #0]
   10664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   10668:	4a06      	ldr	r2, [pc, #24]	; (10684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   1066a:	9b01      	ldr	r3, [sp, #4]
   1066c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10670:	1c5a      	adds	r2, r3, #1
   10672:	4904      	ldr	r1, [pc, #16]	; (10684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   10674:	9b01      	ldr	r3, [sp, #4]
   10676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1067a:	bf00      	nop
   1067c:	b003      	add	sp, #12
   1067e:	f85d fb04 	ldr.w	pc, [sp], #4
   10682:	bf00      	nop
   10684:	1fff9310 	.word	0x1fff9310
   10688:	1fff930c 	.word	0x1fff930c

0001068c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   1068c:	b500      	push	{lr}
   1068e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10690:	f7f1 f872 	bl	1778 <Sys_GetCoreID>
   10694:	4603      	mov	r3, r0
   10696:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   10698:	4a0d      	ldr	r2, [pc, #52]	; (106d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   1069a:	9b01      	ldr	r3, [sp, #4]
   1069c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106a0:	1e5a      	subs	r2, r3, #1
   106a2:	490b      	ldr	r1, [pc, #44]	; (106d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   106a4:	9b01      	ldr	r3, [sp, #4]
   106a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   106aa:	4a0a      	ldr	r2, [pc, #40]	; (106d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   106ac:	9b01      	ldr	r3, [sp, #4]
   106ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106b2:	f003 0301 	and.w	r3, r3, #1
   106b6:	2b00      	cmp	r3, #0
   106b8:	d106      	bne.n	106c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   106ba:	4a05      	ldr	r2, [pc, #20]	; (106d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   106bc:	9b01      	ldr	r3, [sp, #4]
   106be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106c2:	2b00      	cmp	r3, #0
   106c4:	d100      	bne.n	106c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   106c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   106c8:	bf00      	nop
   106ca:	b003      	add	sp, #12
   106cc:	f85d fb04 	ldr.w	pc, [sp], #4
   106d0:	1fff9310 	.word	0x1fff9310
   106d4:	1fff930c 	.word	0x1fff930c

000106d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   106d8:	b500      	push	{lr}
   106da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106dc:	f7f1 f84c 	bl	1778 <Sys_GetCoreID>
   106e0:	4603      	mov	r3, r0
   106e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   106e4:	4a10      	ldr	r2, [pc, #64]	; (10728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   106e6:	9b01      	ldr	r3, [sp, #4]
   106e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106ec:	2b00      	cmp	r3, #0
   106ee:	d10d      	bne.n	1070c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   106f0:	f7f0 f8ee 	bl	8d0 <Adc_schm_read_msr>
   106f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   106f6:	9b00      	ldr	r3, [sp, #0]
   106f8:	f003 0301 	and.w	r3, r3, #1
   106fc:	2b00      	cmp	r3, #0
   106fe:	d100      	bne.n	10702 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10700:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   10702:	490a      	ldr	r1, [pc, #40]	; (1072c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   10704:	9b01      	ldr	r3, [sp, #4]
   10706:	9a00      	ldr	r2, [sp, #0]
   10708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   1070c:	4a06      	ldr	r2, [pc, #24]	; (10728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   1070e:	9b01      	ldr	r3, [sp, #4]
   10710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10714:	1c5a      	adds	r2, r3, #1
   10716:	4904      	ldr	r1, [pc, #16]	; (10728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   10718:	9b01      	ldr	r3, [sp, #4]
   1071a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1071e:	bf00      	nop
   10720:	b003      	add	sp, #12
   10722:	f85d fb04 	ldr.w	pc, [sp], #4
   10726:	bf00      	nop
   10728:	1fff9318 	.word	0x1fff9318
   1072c:	1fff9314 	.word	0x1fff9314

00010730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   10730:	b500      	push	{lr}
   10732:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10734:	f7f1 f820 	bl	1778 <Sys_GetCoreID>
   10738:	4603      	mov	r3, r0
   1073a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   1073c:	4a0d      	ldr	r2, [pc, #52]	; (10774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   1073e:	9b01      	ldr	r3, [sp, #4]
   10740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10744:	1e5a      	subs	r2, r3, #1
   10746:	490b      	ldr	r1, [pc, #44]	; (10774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   10748:	9b01      	ldr	r3, [sp, #4]
   1074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   1074e:	4a0a      	ldr	r2, [pc, #40]	; (10778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   10750:	9b01      	ldr	r3, [sp, #4]
   10752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10756:	f003 0301 	and.w	r3, r3, #1
   1075a:	2b00      	cmp	r3, #0
   1075c:	d106      	bne.n	1076c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   1075e:	4a05      	ldr	r2, [pc, #20]	; (10774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   10760:	9b01      	ldr	r3, [sp, #4]
   10762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10766:	2b00      	cmp	r3, #0
   10768:	d100      	bne.n	1076c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1076a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1076c:	bf00      	nop
   1076e:	b003      	add	sp, #12
   10770:	f85d fb04 	ldr.w	pc, [sp], #4
   10774:	1fff9318 	.word	0x1fff9318
   10778:	1fff9314 	.word	0x1fff9314

0001077c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   1077c:	b500      	push	{lr}
   1077e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10780:	f7f0 fffa 	bl	1778 <Sys_GetCoreID>
   10784:	4603      	mov	r3, r0
   10786:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   10788:	4a10      	ldr	r2, [pc, #64]	; (107cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   1078a:	9b01      	ldr	r3, [sp, #4]
   1078c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10790:	2b00      	cmp	r3, #0
   10792:	d10d      	bne.n	107b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10794:	f7f0 f89c 	bl	8d0 <Adc_schm_read_msr>
   10798:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1079a:	9b00      	ldr	r3, [sp, #0]
   1079c:	f003 0301 	and.w	r3, r3, #1
   107a0:	2b00      	cmp	r3, #0
   107a2:	d100      	bne.n	107a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   107a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   107a6:	490a      	ldr	r1, [pc, #40]	; (107d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   107a8:	9b01      	ldr	r3, [sp, #4]
   107aa:	9a00      	ldr	r2, [sp, #0]
   107ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   107b0:	4a06      	ldr	r2, [pc, #24]	; (107cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   107b2:	9b01      	ldr	r3, [sp, #4]
   107b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107b8:	1c5a      	adds	r2, r3, #1
   107ba:	4904      	ldr	r1, [pc, #16]	; (107cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   107bc:	9b01      	ldr	r3, [sp, #4]
   107be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   107c2:	bf00      	nop
   107c4:	b003      	add	sp, #12
   107c6:	f85d fb04 	ldr.w	pc, [sp], #4
   107ca:	bf00      	nop
   107cc:	1fff9320 	.word	0x1fff9320
   107d0:	1fff931c 	.word	0x1fff931c

000107d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   107d4:	b500      	push	{lr}
   107d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107d8:	f7f0 ffce 	bl	1778 <Sys_GetCoreID>
   107dc:	4603      	mov	r3, r0
   107de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   107e0:	4a0d      	ldr	r2, [pc, #52]	; (10818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   107e2:	9b01      	ldr	r3, [sp, #4]
   107e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107e8:	1e5a      	subs	r2, r3, #1
   107ea:	490b      	ldr	r1, [pc, #44]	; (10818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   107ec:	9b01      	ldr	r3, [sp, #4]
   107ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   107f2:	4a0a      	ldr	r2, [pc, #40]	; (1081c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   107f4:	9b01      	ldr	r3, [sp, #4]
   107f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107fa:	f003 0301 	and.w	r3, r3, #1
   107fe:	2b00      	cmp	r3, #0
   10800:	d106      	bne.n	10810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   10802:	4a05      	ldr	r2, [pc, #20]	; (10818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   10804:	9b01      	ldr	r3, [sp, #4]
   10806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1080a:	2b00      	cmp	r3, #0
   1080c:	d100      	bne.n	10810 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1080e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10810:	bf00      	nop
   10812:	b003      	add	sp, #12
   10814:	f85d fb04 	ldr.w	pc, [sp], #4
   10818:	1fff9320 	.word	0x1fff9320
   1081c:	1fff931c 	.word	0x1fff931c

00010820 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   10820:	b500      	push	{lr}
   10822:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10824:	f7f0 ffa8 	bl	1778 <Sys_GetCoreID>
   10828:	4603      	mov	r3, r0
   1082a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   1082c:	4a10      	ldr	r2, [pc, #64]	; (10870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   1082e:	9b01      	ldr	r3, [sp, #4]
   10830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10834:	2b00      	cmp	r3, #0
   10836:	d10d      	bne.n	10854 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10838:	f7f0 f84a 	bl	8d0 <Adc_schm_read_msr>
   1083c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1083e:	9b00      	ldr	r3, [sp, #0]
   10840:	f003 0301 	and.w	r3, r3, #1
   10844:	2b00      	cmp	r3, #0
   10846:	d100      	bne.n	1084a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10848:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   1084a:	490a      	ldr	r1, [pc, #40]	; (10874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   1084c:	9b01      	ldr	r3, [sp, #4]
   1084e:	9a00      	ldr	r2, [sp, #0]
   10850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   10854:	4a06      	ldr	r2, [pc, #24]	; (10870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   10856:	9b01      	ldr	r3, [sp, #4]
   10858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1085c:	1c5a      	adds	r2, r3, #1
   1085e:	4904      	ldr	r1, [pc, #16]	; (10870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   10860:	9b01      	ldr	r3, [sp, #4]
   10862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10866:	bf00      	nop
   10868:	b003      	add	sp, #12
   1086a:	f85d fb04 	ldr.w	pc, [sp], #4
   1086e:	bf00      	nop
   10870:	1fff9328 	.word	0x1fff9328
   10874:	1fff9324 	.word	0x1fff9324

00010878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   10878:	b500      	push	{lr}
   1087a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1087c:	f7f0 ff7c 	bl	1778 <Sys_GetCoreID>
   10880:	4603      	mov	r3, r0
   10882:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   10884:	4a0d      	ldr	r2, [pc, #52]	; (108bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   10886:	9b01      	ldr	r3, [sp, #4]
   10888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1088c:	1e5a      	subs	r2, r3, #1
   1088e:	490b      	ldr	r1, [pc, #44]	; (108bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   10890:	9b01      	ldr	r3, [sp, #4]
   10892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   10896:	4a0a      	ldr	r2, [pc, #40]	; (108c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   10898:	9b01      	ldr	r3, [sp, #4]
   1089a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1089e:	f003 0301 	and.w	r3, r3, #1
   108a2:	2b00      	cmp	r3, #0
   108a4:	d106      	bne.n	108b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   108a6:	4a05      	ldr	r2, [pc, #20]	; (108bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   108a8:	9b01      	ldr	r3, [sp, #4]
   108aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108ae:	2b00      	cmp	r3, #0
   108b0:	d100      	bne.n	108b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   108b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   108b4:	bf00      	nop
   108b6:	b003      	add	sp, #12
   108b8:	f85d fb04 	ldr.w	pc, [sp], #4
   108bc:	1fff9328 	.word	0x1fff9328
   108c0:	1fff9324 	.word	0x1fff9324

000108c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   108c4:	b500      	push	{lr}
   108c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108c8:	f7f0 ff56 	bl	1778 <Sys_GetCoreID>
   108cc:	4603      	mov	r3, r0
   108ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   108d0:	4a10      	ldr	r2, [pc, #64]	; (10914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   108d2:	9b01      	ldr	r3, [sp, #4]
   108d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108d8:	2b00      	cmp	r3, #0
   108da:	d10d      	bne.n	108f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   108dc:	f7ef fff8 	bl	8d0 <Adc_schm_read_msr>
   108e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   108e2:	9b00      	ldr	r3, [sp, #0]
   108e4:	f003 0301 	and.w	r3, r3, #1
   108e8:	2b00      	cmp	r3, #0
   108ea:	d100      	bne.n	108ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   108ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   108ee:	490a      	ldr	r1, [pc, #40]	; (10918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   108f0:	9b01      	ldr	r3, [sp, #4]
   108f2:	9a00      	ldr	r2, [sp, #0]
   108f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   108f8:	4a06      	ldr	r2, [pc, #24]	; (10914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   108fa:	9b01      	ldr	r3, [sp, #4]
   108fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10900:	1c5a      	adds	r2, r3, #1
   10902:	4904      	ldr	r1, [pc, #16]	; (10914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   10904:	9b01      	ldr	r3, [sp, #4]
   10906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1090a:	bf00      	nop
   1090c:	b003      	add	sp, #12
   1090e:	f85d fb04 	ldr.w	pc, [sp], #4
   10912:	bf00      	nop
   10914:	1fff9330 	.word	0x1fff9330
   10918:	1fff932c 	.word	0x1fff932c

0001091c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   1091c:	b500      	push	{lr}
   1091e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10920:	f7f0 ff2a 	bl	1778 <Sys_GetCoreID>
   10924:	4603      	mov	r3, r0
   10926:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   10928:	4a0d      	ldr	r2, [pc, #52]	; (10960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   1092a:	9b01      	ldr	r3, [sp, #4]
   1092c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10930:	1e5a      	subs	r2, r3, #1
   10932:	490b      	ldr	r1, [pc, #44]	; (10960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   10934:	9b01      	ldr	r3, [sp, #4]
   10936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   1093a:	4a0a      	ldr	r2, [pc, #40]	; (10964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   1093c:	9b01      	ldr	r3, [sp, #4]
   1093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10942:	f003 0301 	and.w	r3, r3, #1
   10946:	2b00      	cmp	r3, #0
   10948:	d106      	bne.n	10958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   1094a:	4a05      	ldr	r2, [pc, #20]	; (10960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   1094c:	9b01      	ldr	r3, [sp, #4]
   1094e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10952:	2b00      	cmp	r3, #0
   10954:	d100      	bne.n	10958 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10956:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10958:	bf00      	nop
   1095a:	b003      	add	sp, #12
   1095c:	f85d fb04 	ldr.w	pc, [sp], #4
   10960:	1fff9330 	.word	0x1fff9330
   10964:	1fff932c 	.word	0x1fff932c

00010968 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   10968:	b500      	push	{lr}
   1096a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1096c:	f7f0 ff04 	bl	1778 <Sys_GetCoreID>
   10970:	4603      	mov	r3, r0
   10972:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   10974:	4a10      	ldr	r2, [pc, #64]	; (109b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   10976:	9b01      	ldr	r3, [sp, #4]
   10978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1097c:	2b00      	cmp	r3, #0
   1097e:	d10d      	bne.n	1099c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10980:	f7ef ffa6 	bl	8d0 <Adc_schm_read_msr>
   10984:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10986:	9b00      	ldr	r3, [sp, #0]
   10988:	f003 0301 	and.w	r3, r3, #1
   1098c:	2b00      	cmp	r3, #0
   1098e:	d100      	bne.n	10992 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10990:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   10992:	490a      	ldr	r1, [pc, #40]	; (109bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   10994:	9b01      	ldr	r3, [sp, #4]
   10996:	9a00      	ldr	r2, [sp, #0]
   10998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   1099c:	4a06      	ldr	r2, [pc, #24]	; (109b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   1099e:	9b01      	ldr	r3, [sp, #4]
   109a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109a4:	1c5a      	adds	r2, r3, #1
   109a6:	4904      	ldr	r1, [pc, #16]	; (109b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   109a8:	9b01      	ldr	r3, [sp, #4]
   109aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   109ae:	bf00      	nop
   109b0:	b003      	add	sp, #12
   109b2:	f85d fb04 	ldr.w	pc, [sp], #4
   109b6:	bf00      	nop
   109b8:	1fff9338 	.word	0x1fff9338
   109bc:	1fff9334 	.word	0x1fff9334

000109c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   109c0:	b500      	push	{lr}
   109c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109c4:	f7f0 fed8 	bl	1778 <Sys_GetCoreID>
   109c8:	4603      	mov	r3, r0
   109ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   109cc:	4a0d      	ldr	r2, [pc, #52]	; (10a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   109ce:	9b01      	ldr	r3, [sp, #4]
   109d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109d4:	1e5a      	subs	r2, r3, #1
   109d6:	490b      	ldr	r1, [pc, #44]	; (10a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   109d8:	9b01      	ldr	r3, [sp, #4]
   109da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   109de:	4a0a      	ldr	r2, [pc, #40]	; (10a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   109e0:	9b01      	ldr	r3, [sp, #4]
   109e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109e6:	f003 0301 	and.w	r3, r3, #1
   109ea:	2b00      	cmp	r3, #0
   109ec:	d106      	bne.n	109fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   109ee:	4a05      	ldr	r2, [pc, #20]	; (10a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   109f0:	9b01      	ldr	r3, [sp, #4]
   109f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109f6:	2b00      	cmp	r3, #0
   109f8:	d100      	bne.n	109fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   109fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   109fc:	bf00      	nop
   109fe:	b003      	add	sp, #12
   10a00:	f85d fb04 	ldr.w	pc, [sp], #4
   10a04:	1fff9338 	.word	0x1fff9338
   10a08:	1fff9334 	.word	0x1fff9334

00010a0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   10a0c:	b500      	push	{lr}
   10a0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a10:	f7f0 feb2 	bl	1778 <Sys_GetCoreID>
   10a14:	4603      	mov	r3, r0
   10a16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   10a18:	4a10      	ldr	r2, [pc, #64]	; (10a5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   10a1a:	9b01      	ldr	r3, [sp, #4]
   10a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a20:	2b00      	cmp	r3, #0
   10a22:	d10d      	bne.n	10a40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a24:	f7ef ff54 	bl	8d0 <Adc_schm_read_msr>
   10a28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a2a:	9b00      	ldr	r3, [sp, #0]
   10a2c:	f003 0301 	and.w	r3, r3, #1
   10a30:	2b00      	cmp	r3, #0
   10a32:	d100      	bne.n	10a36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   10a36:	490a      	ldr	r1, [pc, #40]	; (10a60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   10a38:	9b01      	ldr	r3, [sp, #4]
   10a3a:	9a00      	ldr	r2, [sp, #0]
   10a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   10a40:	4a06      	ldr	r2, [pc, #24]	; (10a5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   10a42:	9b01      	ldr	r3, [sp, #4]
   10a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a48:	1c5a      	adds	r2, r3, #1
   10a4a:	4904      	ldr	r1, [pc, #16]	; (10a5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   10a4c:	9b01      	ldr	r3, [sp, #4]
   10a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a52:	bf00      	nop
   10a54:	b003      	add	sp, #12
   10a56:	f85d fb04 	ldr.w	pc, [sp], #4
   10a5a:	bf00      	nop
   10a5c:	1fff9340 	.word	0x1fff9340
   10a60:	1fff933c 	.word	0x1fff933c

00010a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   10a64:	b500      	push	{lr}
   10a66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a68:	f7f0 fe86 	bl	1778 <Sys_GetCoreID>
   10a6c:	4603      	mov	r3, r0
   10a6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   10a70:	4a0d      	ldr	r2, [pc, #52]	; (10aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   10a72:	9b01      	ldr	r3, [sp, #4]
   10a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a78:	1e5a      	subs	r2, r3, #1
   10a7a:	490b      	ldr	r1, [pc, #44]	; (10aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   10a7c:	9b01      	ldr	r3, [sp, #4]
   10a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   10a82:	4a0a      	ldr	r2, [pc, #40]	; (10aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   10a84:	9b01      	ldr	r3, [sp, #4]
   10a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a8a:	f003 0301 	and.w	r3, r3, #1
   10a8e:	2b00      	cmp	r3, #0
   10a90:	d106      	bne.n	10aa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   10a92:	4a05      	ldr	r2, [pc, #20]	; (10aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   10a94:	9b01      	ldr	r3, [sp, #4]
   10a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a9a:	2b00      	cmp	r3, #0
   10a9c:	d100      	bne.n	10aa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10aa0:	bf00      	nop
   10aa2:	b003      	add	sp, #12
   10aa4:	f85d fb04 	ldr.w	pc, [sp], #4
   10aa8:	1fff9340 	.word	0x1fff9340
   10aac:	1fff933c 	.word	0x1fff933c

00010ab0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   10ab0:	b500      	push	{lr}
   10ab2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ab4:	f7f0 fe60 	bl	1778 <Sys_GetCoreID>
   10ab8:	4603      	mov	r3, r0
   10aba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   10abc:	4a10      	ldr	r2, [pc, #64]	; (10b00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   10abe:	9b01      	ldr	r3, [sp, #4]
   10ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ac4:	2b00      	cmp	r3, #0
   10ac6:	d10d      	bne.n	10ae4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ac8:	f7ef ff02 	bl	8d0 <Adc_schm_read_msr>
   10acc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ace:	9b00      	ldr	r3, [sp, #0]
   10ad0:	f003 0301 	and.w	r3, r3, #1
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d100      	bne.n	10ada <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ad8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   10ada:	490a      	ldr	r1, [pc, #40]	; (10b04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   10adc:	9b01      	ldr	r3, [sp, #4]
   10ade:	9a00      	ldr	r2, [sp, #0]
   10ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   10ae4:	4a06      	ldr	r2, [pc, #24]	; (10b00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   10ae6:	9b01      	ldr	r3, [sp, #4]
   10ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aec:	1c5a      	adds	r2, r3, #1
   10aee:	4904      	ldr	r1, [pc, #16]	; (10b00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   10af0:	9b01      	ldr	r3, [sp, #4]
   10af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10af6:	bf00      	nop
   10af8:	b003      	add	sp, #12
   10afa:	f85d fb04 	ldr.w	pc, [sp], #4
   10afe:	bf00      	nop
   10b00:	1fff9348 	.word	0x1fff9348
   10b04:	1fff9344 	.word	0x1fff9344

00010b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   10b08:	b500      	push	{lr}
   10b0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b0c:	f7f0 fe34 	bl	1778 <Sys_GetCoreID>
   10b10:	4603      	mov	r3, r0
   10b12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   10b14:	4a0d      	ldr	r2, [pc, #52]	; (10b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   10b16:	9b01      	ldr	r3, [sp, #4]
   10b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b1c:	1e5a      	subs	r2, r3, #1
   10b1e:	490b      	ldr	r1, [pc, #44]	; (10b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   10b20:	9b01      	ldr	r3, [sp, #4]
   10b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   10b26:	4a0a      	ldr	r2, [pc, #40]	; (10b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   10b28:	9b01      	ldr	r3, [sp, #4]
   10b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b2e:	f003 0301 	and.w	r3, r3, #1
   10b32:	2b00      	cmp	r3, #0
   10b34:	d106      	bne.n	10b44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   10b36:	4a05      	ldr	r2, [pc, #20]	; (10b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   10b38:	9b01      	ldr	r3, [sp, #4]
   10b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b3e:	2b00      	cmp	r3, #0
   10b40:	d100      	bne.n	10b44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b44:	bf00      	nop
   10b46:	b003      	add	sp, #12
   10b48:	f85d fb04 	ldr.w	pc, [sp], #4
   10b4c:	1fff9348 	.word	0x1fff9348
   10b50:	1fff9344 	.word	0x1fff9344

00010b54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   10b54:	b500      	push	{lr}
   10b56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b58:	f7f0 fe0e 	bl	1778 <Sys_GetCoreID>
   10b5c:	4603      	mov	r3, r0
   10b5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   10b60:	4a10      	ldr	r2, [pc, #64]	; (10ba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   10b62:	9b01      	ldr	r3, [sp, #4]
   10b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b68:	2b00      	cmp	r3, #0
   10b6a:	d10d      	bne.n	10b88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b6c:	f7ef feb0 	bl	8d0 <Adc_schm_read_msr>
   10b70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b72:	9b00      	ldr	r3, [sp, #0]
   10b74:	f003 0301 	and.w	r3, r3, #1
   10b78:	2b00      	cmp	r3, #0
   10b7a:	d100      	bne.n	10b7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   10b7e:	490a      	ldr	r1, [pc, #40]	; (10ba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   10b80:	9b01      	ldr	r3, [sp, #4]
   10b82:	9a00      	ldr	r2, [sp, #0]
   10b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   10b88:	4a06      	ldr	r2, [pc, #24]	; (10ba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   10b8a:	9b01      	ldr	r3, [sp, #4]
   10b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b90:	1c5a      	adds	r2, r3, #1
   10b92:	4904      	ldr	r1, [pc, #16]	; (10ba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   10b94:	9b01      	ldr	r3, [sp, #4]
   10b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10b9a:	bf00      	nop
   10b9c:	b003      	add	sp, #12
   10b9e:	f85d fb04 	ldr.w	pc, [sp], #4
   10ba2:	bf00      	nop
   10ba4:	1fff9350 	.word	0x1fff9350
   10ba8:	1fff934c 	.word	0x1fff934c

00010bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   10bac:	b500      	push	{lr}
   10bae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bb0:	f7f0 fde2 	bl	1778 <Sys_GetCoreID>
   10bb4:	4603      	mov	r3, r0
   10bb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   10bb8:	4a0d      	ldr	r2, [pc, #52]	; (10bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   10bba:	9b01      	ldr	r3, [sp, #4]
   10bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bc0:	1e5a      	subs	r2, r3, #1
   10bc2:	490b      	ldr	r1, [pc, #44]	; (10bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   10bc4:	9b01      	ldr	r3, [sp, #4]
   10bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   10bca:	4a0a      	ldr	r2, [pc, #40]	; (10bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   10bcc:	9b01      	ldr	r3, [sp, #4]
   10bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bd2:	f003 0301 	and.w	r3, r3, #1
   10bd6:	2b00      	cmp	r3, #0
   10bd8:	d106      	bne.n	10be8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   10bda:	4a05      	ldr	r2, [pc, #20]	; (10bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   10bdc:	9b01      	ldr	r3, [sp, #4]
   10bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10be2:	2b00      	cmp	r3, #0
   10be4:	d100      	bne.n	10be8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10be6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10be8:	bf00      	nop
   10bea:	b003      	add	sp, #12
   10bec:	f85d fb04 	ldr.w	pc, [sp], #4
   10bf0:	1fff9350 	.word	0x1fff9350
   10bf4:	1fff934c 	.word	0x1fff934c

00010bf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   10bf8:	b500      	push	{lr}
   10bfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bfc:	f7f0 fdbc 	bl	1778 <Sys_GetCoreID>
   10c00:	4603      	mov	r3, r0
   10c02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   10c04:	4a10      	ldr	r2, [pc, #64]	; (10c48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   10c06:	9b01      	ldr	r3, [sp, #4]
   10c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c0c:	2b00      	cmp	r3, #0
   10c0e:	d10d      	bne.n	10c2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c10:	f7ef fe5e 	bl	8d0 <Adc_schm_read_msr>
   10c14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c16:	9b00      	ldr	r3, [sp, #0]
   10c18:	f003 0301 	and.w	r3, r3, #1
   10c1c:	2b00      	cmp	r3, #0
   10c1e:	d100      	bne.n	10c22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   10c22:	490a      	ldr	r1, [pc, #40]	; (10c4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   10c24:	9b01      	ldr	r3, [sp, #4]
   10c26:	9a00      	ldr	r2, [sp, #0]
   10c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   10c2c:	4a06      	ldr	r2, [pc, #24]	; (10c48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   10c2e:	9b01      	ldr	r3, [sp, #4]
   10c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c34:	1c5a      	adds	r2, r3, #1
   10c36:	4904      	ldr	r1, [pc, #16]	; (10c48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   10c38:	9b01      	ldr	r3, [sp, #4]
   10c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c3e:	bf00      	nop
   10c40:	b003      	add	sp, #12
   10c42:	f85d fb04 	ldr.w	pc, [sp], #4
   10c46:	bf00      	nop
   10c48:	1fff9358 	.word	0x1fff9358
   10c4c:	1fff9354 	.word	0x1fff9354

00010c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   10c50:	b500      	push	{lr}
   10c52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c54:	f7f0 fd90 	bl	1778 <Sys_GetCoreID>
   10c58:	4603      	mov	r3, r0
   10c5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   10c5c:	4a0d      	ldr	r2, [pc, #52]	; (10c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10c5e:	9b01      	ldr	r3, [sp, #4]
   10c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c64:	1e5a      	subs	r2, r3, #1
   10c66:	490b      	ldr	r1, [pc, #44]	; (10c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10c68:	9b01      	ldr	r3, [sp, #4]
   10c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   10c6e:	4a0a      	ldr	r2, [pc, #40]	; (10c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   10c70:	9b01      	ldr	r3, [sp, #4]
   10c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c76:	f003 0301 	and.w	r3, r3, #1
   10c7a:	2b00      	cmp	r3, #0
   10c7c:	d106      	bne.n	10c8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   10c7e:	4a05      	ldr	r2, [pc, #20]	; (10c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10c80:	9b01      	ldr	r3, [sp, #4]
   10c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c86:	2b00      	cmp	r3, #0
   10c88:	d100      	bne.n	10c8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c8c:	bf00      	nop
   10c8e:	b003      	add	sp, #12
   10c90:	f85d fb04 	ldr.w	pc, [sp], #4
   10c94:	1fff9358 	.word	0x1fff9358
   10c98:	1fff9354 	.word	0x1fff9354

00010c9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   10c9c:	b500      	push	{lr}
   10c9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ca0:	f7f0 fd6a 	bl	1778 <Sys_GetCoreID>
   10ca4:	4603      	mov	r3, r0
   10ca6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   10ca8:	4a10      	ldr	r2, [pc, #64]	; (10cec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10caa:	9b01      	ldr	r3, [sp, #4]
   10cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cb0:	2b00      	cmp	r3, #0
   10cb2:	d10d      	bne.n	10cd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10cb4:	f7ef fe0c 	bl	8d0 <Adc_schm_read_msr>
   10cb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10cba:	9b00      	ldr	r3, [sp, #0]
   10cbc:	f003 0301 	and.w	r3, r3, #1
   10cc0:	2b00      	cmp	r3, #0
   10cc2:	d100      	bne.n	10cc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10cc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   10cc6:	490a      	ldr	r1, [pc, #40]	; (10cf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   10cc8:	9b01      	ldr	r3, [sp, #4]
   10cca:	9a00      	ldr	r2, [sp, #0]
   10ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   10cd0:	4a06      	ldr	r2, [pc, #24]	; (10cec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10cd2:	9b01      	ldr	r3, [sp, #4]
   10cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cd8:	1c5a      	adds	r2, r3, #1
   10cda:	4904      	ldr	r1, [pc, #16]	; (10cec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10cdc:	9b01      	ldr	r3, [sp, #4]
   10cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ce2:	bf00      	nop
   10ce4:	b003      	add	sp, #12
   10ce6:	f85d fb04 	ldr.w	pc, [sp], #4
   10cea:	bf00      	nop
   10cec:	1fff9360 	.word	0x1fff9360
   10cf0:	1fff935c 	.word	0x1fff935c

00010cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   10cf4:	b500      	push	{lr}
   10cf6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10cf8:	f7f0 fd3e 	bl	1778 <Sys_GetCoreID>
   10cfc:	4603      	mov	r3, r0
   10cfe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   10d00:	4a0d      	ldr	r2, [pc, #52]	; (10d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10d02:	9b01      	ldr	r3, [sp, #4]
   10d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d08:	1e5a      	subs	r2, r3, #1
   10d0a:	490b      	ldr	r1, [pc, #44]	; (10d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10d0c:	9b01      	ldr	r3, [sp, #4]
   10d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   10d12:	4a0a      	ldr	r2, [pc, #40]	; (10d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   10d14:	9b01      	ldr	r3, [sp, #4]
   10d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d1a:	f003 0301 	and.w	r3, r3, #1
   10d1e:	2b00      	cmp	r3, #0
   10d20:	d106      	bne.n	10d30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   10d22:	4a05      	ldr	r2, [pc, #20]	; (10d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10d24:	9b01      	ldr	r3, [sp, #4]
   10d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d2a:	2b00      	cmp	r3, #0
   10d2c:	d100      	bne.n	10d30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d30:	bf00      	nop
   10d32:	b003      	add	sp, #12
   10d34:	f85d fb04 	ldr.w	pc, [sp], #4
   10d38:	1fff9360 	.word	0x1fff9360
   10d3c:	1fff935c 	.word	0x1fff935c

00010d40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   10d40:	b500      	push	{lr}
   10d42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d44:	f7f0 fd18 	bl	1778 <Sys_GetCoreID>
   10d48:	4603      	mov	r3, r0
   10d4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   10d4c:	4a10      	ldr	r2, [pc, #64]	; (10d90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10d4e:	9b01      	ldr	r3, [sp, #4]
   10d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d54:	2b00      	cmp	r3, #0
   10d56:	d10d      	bne.n	10d74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d58:	f7ef fdba 	bl	8d0 <Adc_schm_read_msr>
   10d5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d5e:	9b00      	ldr	r3, [sp, #0]
   10d60:	f003 0301 	and.w	r3, r3, #1
   10d64:	2b00      	cmp	r3, #0
   10d66:	d100      	bne.n	10d6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   10d6a:	490a      	ldr	r1, [pc, #40]	; (10d94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   10d6c:	9b01      	ldr	r3, [sp, #4]
   10d6e:	9a00      	ldr	r2, [sp, #0]
   10d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   10d74:	4a06      	ldr	r2, [pc, #24]	; (10d90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10d76:	9b01      	ldr	r3, [sp, #4]
   10d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d7c:	1c5a      	adds	r2, r3, #1
   10d7e:	4904      	ldr	r1, [pc, #16]	; (10d90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10d80:	9b01      	ldr	r3, [sp, #4]
   10d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d86:	bf00      	nop
   10d88:	b003      	add	sp, #12
   10d8a:	f85d fb04 	ldr.w	pc, [sp], #4
   10d8e:	bf00      	nop
   10d90:	1fff9368 	.word	0x1fff9368
   10d94:	1fff9364 	.word	0x1fff9364

00010d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   10d98:	b500      	push	{lr}
   10d9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d9c:	f7f0 fcec 	bl	1778 <Sys_GetCoreID>
   10da0:	4603      	mov	r3, r0
   10da2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   10da4:	4a0d      	ldr	r2, [pc, #52]	; (10ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10da6:	9b01      	ldr	r3, [sp, #4]
   10da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dac:	1e5a      	subs	r2, r3, #1
   10dae:	490b      	ldr	r1, [pc, #44]	; (10ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10db0:	9b01      	ldr	r3, [sp, #4]
   10db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   10db6:	4a0a      	ldr	r2, [pc, #40]	; (10de0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   10db8:	9b01      	ldr	r3, [sp, #4]
   10dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dbe:	f003 0301 	and.w	r3, r3, #1
   10dc2:	2b00      	cmp	r3, #0
   10dc4:	d106      	bne.n	10dd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   10dc6:	4a05      	ldr	r2, [pc, #20]	; (10ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10dc8:	9b01      	ldr	r3, [sp, #4]
   10dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dce:	2b00      	cmp	r3, #0
   10dd0:	d100      	bne.n	10dd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10dd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10dd4:	bf00      	nop
   10dd6:	b003      	add	sp, #12
   10dd8:	f85d fb04 	ldr.w	pc, [sp], #4
   10ddc:	1fff9368 	.word	0x1fff9368
   10de0:	1fff9364 	.word	0x1fff9364

00010de4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   10de4:	b500      	push	{lr}
   10de6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10de8:	f7f0 fcc6 	bl	1778 <Sys_GetCoreID>
   10dec:	4603      	mov	r3, r0
   10dee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   10df0:	4a10      	ldr	r2, [pc, #64]	; (10e34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10df2:	9b01      	ldr	r3, [sp, #4]
   10df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10df8:	2b00      	cmp	r3, #0
   10dfa:	d10d      	bne.n	10e18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10dfc:	f7ef fd68 	bl	8d0 <Adc_schm_read_msr>
   10e00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e02:	9b00      	ldr	r3, [sp, #0]
   10e04:	f003 0301 	and.w	r3, r3, #1
   10e08:	2b00      	cmp	r3, #0
   10e0a:	d100      	bne.n	10e0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   10e0e:	490a      	ldr	r1, [pc, #40]	; (10e38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   10e10:	9b01      	ldr	r3, [sp, #4]
   10e12:	9a00      	ldr	r2, [sp, #0]
   10e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   10e18:	4a06      	ldr	r2, [pc, #24]	; (10e34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10e1a:	9b01      	ldr	r3, [sp, #4]
   10e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e20:	1c5a      	adds	r2, r3, #1
   10e22:	4904      	ldr	r1, [pc, #16]	; (10e34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10e24:	9b01      	ldr	r3, [sp, #4]
   10e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e2a:	bf00      	nop
   10e2c:	b003      	add	sp, #12
   10e2e:	f85d fb04 	ldr.w	pc, [sp], #4
   10e32:	bf00      	nop
   10e34:	1fff9370 	.word	0x1fff9370
   10e38:	1fff936c 	.word	0x1fff936c

00010e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   10e3c:	b500      	push	{lr}
   10e3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e40:	f7f0 fc9a 	bl	1778 <Sys_GetCoreID>
   10e44:	4603      	mov	r3, r0
   10e46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   10e48:	4a0d      	ldr	r2, [pc, #52]	; (10e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10e4a:	9b01      	ldr	r3, [sp, #4]
   10e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e50:	1e5a      	subs	r2, r3, #1
   10e52:	490b      	ldr	r1, [pc, #44]	; (10e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10e54:	9b01      	ldr	r3, [sp, #4]
   10e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   10e5a:	4a0a      	ldr	r2, [pc, #40]	; (10e84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   10e5c:	9b01      	ldr	r3, [sp, #4]
   10e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e62:	f003 0301 	and.w	r3, r3, #1
   10e66:	2b00      	cmp	r3, #0
   10e68:	d106      	bne.n	10e78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   10e6a:	4a05      	ldr	r2, [pc, #20]	; (10e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10e6c:	9b01      	ldr	r3, [sp, #4]
   10e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e72:	2b00      	cmp	r3, #0
   10e74:	d100      	bne.n	10e78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e78:	bf00      	nop
   10e7a:	b003      	add	sp, #12
   10e7c:	f85d fb04 	ldr.w	pc, [sp], #4
   10e80:	1fff9370 	.word	0x1fff9370
   10e84:	1fff936c 	.word	0x1fff936c

00010e88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   10e88:	b500      	push	{lr}
   10e8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e8c:	f7f0 fc74 	bl	1778 <Sys_GetCoreID>
   10e90:	4603      	mov	r3, r0
   10e92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   10e94:	4a10      	ldr	r2, [pc, #64]	; (10ed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10e96:	9b01      	ldr	r3, [sp, #4]
   10e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e9c:	2b00      	cmp	r3, #0
   10e9e:	d10d      	bne.n	10ebc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ea0:	f7ef fd16 	bl	8d0 <Adc_schm_read_msr>
   10ea4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ea6:	9b00      	ldr	r3, [sp, #0]
   10ea8:	f003 0301 	and.w	r3, r3, #1
   10eac:	2b00      	cmp	r3, #0
   10eae:	d100      	bne.n	10eb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10eb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   10eb2:	490a      	ldr	r1, [pc, #40]	; (10edc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   10eb4:	9b01      	ldr	r3, [sp, #4]
   10eb6:	9a00      	ldr	r2, [sp, #0]
   10eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   10ebc:	4a06      	ldr	r2, [pc, #24]	; (10ed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10ebe:	9b01      	ldr	r3, [sp, #4]
   10ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ec4:	1c5a      	adds	r2, r3, #1
   10ec6:	4904      	ldr	r1, [pc, #16]	; (10ed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10ec8:	9b01      	ldr	r3, [sp, #4]
   10eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ece:	bf00      	nop
   10ed0:	b003      	add	sp, #12
   10ed2:	f85d fb04 	ldr.w	pc, [sp], #4
   10ed6:	bf00      	nop
   10ed8:	1fff9378 	.word	0x1fff9378
   10edc:	1fff9374 	.word	0x1fff9374

00010ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   10ee0:	b500      	push	{lr}
   10ee2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ee4:	f7f0 fc48 	bl	1778 <Sys_GetCoreID>
   10ee8:	4603      	mov	r3, r0
   10eea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   10eec:	4a0d      	ldr	r2, [pc, #52]	; (10f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10eee:	9b01      	ldr	r3, [sp, #4]
   10ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ef4:	1e5a      	subs	r2, r3, #1
   10ef6:	490b      	ldr	r1, [pc, #44]	; (10f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10ef8:	9b01      	ldr	r3, [sp, #4]
   10efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   10efe:	4a0a      	ldr	r2, [pc, #40]	; (10f28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   10f00:	9b01      	ldr	r3, [sp, #4]
   10f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f06:	f003 0301 	and.w	r3, r3, #1
   10f0a:	2b00      	cmp	r3, #0
   10f0c:	d106      	bne.n	10f1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   10f0e:	4a05      	ldr	r2, [pc, #20]	; (10f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10f10:	9b01      	ldr	r3, [sp, #4]
   10f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f16:	2b00      	cmp	r3, #0
   10f18:	d100      	bne.n	10f1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f1c:	bf00      	nop
   10f1e:	b003      	add	sp, #12
   10f20:	f85d fb04 	ldr.w	pc, [sp], #4
   10f24:	1fff9378 	.word	0x1fff9378
   10f28:	1fff9374 	.word	0x1fff9374

00010f2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   10f2c:	b500      	push	{lr}
   10f2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f30:	f7f0 fc22 	bl	1778 <Sys_GetCoreID>
   10f34:	4603      	mov	r3, r0
   10f36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   10f38:	4a10      	ldr	r2, [pc, #64]	; (10f7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10f3a:	9b01      	ldr	r3, [sp, #4]
   10f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f40:	2b00      	cmp	r3, #0
   10f42:	d10d      	bne.n	10f60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f44:	f7ef fcc4 	bl	8d0 <Adc_schm_read_msr>
   10f48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f4a:	9b00      	ldr	r3, [sp, #0]
   10f4c:	f003 0301 	and.w	r3, r3, #1
   10f50:	2b00      	cmp	r3, #0
   10f52:	d100      	bne.n	10f56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   10f56:	490a      	ldr	r1, [pc, #40]	; (10f80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   10f58:	9b01      	ldr	r3, [sp, #4]
   10f5a:	9a00      	ldr	r2, [sp, #0]
   10f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   10f60:	4a06      	ldr	r2, [pc, #24]	; (10f7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10f62:	9b01      	ldr	r3, [sp, #4]
   10f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f68:	1c5a      	adds	r2, r3, #1
   10f6a:	4904      	ldr	r1, [pc, #16]	; (10f7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10f6c:	9b01      	ldr	r3, [sp, #4]
   10f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f72:	bf00      	nop
   10f74:	b003      	add	sp, #12
   10f76:	f85d fb04 	ldr.w	pc, [sp], #4
   10f7a:	bf00      	nop
   10f7c:	1fff9380 	.word	0x1fff9380
   10f80:	1fff937c 	.word	0x1fff937c

00010f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   10f84:	b500      	push	{lr}
   10f86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f88:	f7f0 fbf6 	bl	1778 <Sys_GetCoreID>
   10f8c:	4603      	mov	r3, r0
   10f8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   10f90:	4a0d      	ldr	r2, [pc, #52]	; (10fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10f92:	9b01      	ldr	r3, [sp, #4]
   10f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f98:	1e5a      	subs	r2, r3, #1
   10f9a:	490b      	ldr	r1, [pc, #44]	; (10fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10f9c:	9b01      	ldr	r3, [sp, #4]
   10f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   10fa2:	4a0a      	ldr	r2, [pc, #40]	; (10fcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   10fa4:	9b01      	ldr	r3, [sp, #4]
   10fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10faa:	f003 0301 	and.w	r3, r3, #1
   10fae:	2b00      	cmp	r3, #0
   10fb0:	d106      	bne.n	10fc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   10fb2:	4a05      	ldr	r2, [pc, #20]	; (10fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10fb4:	9b01      	ldr	r3, [sp, #4]
   10fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fba:	2b00      	cmp	r3, #0
   10fbc:	d100      	bne.n	10fc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10fbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10fc0:	bf00      	nop
   10fc2:	b003      	add	sp, #12
   10fc4:	f85d fb04 	ldr.w	pc, [sp], #4
   10fc8:	1fff9380 	.word	0x1fff9380
   10fcc:	1fff937c 	.word	0x1fff937c

00010fd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   10fd0:	b500      	push	{lr}
   10fd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fd4:	f7f0 fbd0 	bl	1778 <Sys_GetCoreID>
   10fd8:	4603      	mov	r3, r0
   10fda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   10fdc:	4a10      	ldr	r2, [pc, #64]	; (11020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   10fde:	9b01      	ldr	r3, [sp, #4]
   10fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fe4:	2b00      	cmp	r3, #0
   10fe6:	d10d      	bne.n	11004 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10fe8:	f7ef fc72 	bl	8d0 <Adc_schm_read_msr>
   10fec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10fee:	9b00      	ldr	r3, [sp, #0]
   10ff0:	f003 0301 	and.w	r3, r3, #1
   10ff4:	2b00      	cmp	r3, #0
   10ff6:	d100      	bne.n	10ffa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ff8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   10ffa:	490a      	ldr	r1, [pc, #40]	; (11024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   10ffc:	9b01      	ldr	r3, [sp, #4]
   10ffe:	9a00      	ldr	r2, [sp, #0]
   11000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   11004:	4a06      	ldr	r2, [pc, #24]	; (11020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11006:	9b01      	ldr	r3, [sp, #4]
   11008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1100c:	1c5a      	adds	r2, r3, #1
   1100e:	4904      	ldr	r1, [pc, #16]	; (11020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11010:	9b01      	ldr	r3, [sp, #4]
   11012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11016:	bf00      	nop
   11018:	b003      	add	sp, #12
   1101a:	f85d fb04 	ldr.w	pc, [sp], #4
   1101e:	bf00      	nop
   11020:	1fff9388 	.word	0x1fff9388
   11024:	1fff9384 	.word	0x1fff9384

00011028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11028:	b500      	push	{lr}
   1102a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1102c:	f7f0 fba4 	bl	1778 <Sys_GetCoreID>
   11030:	4603      	mov	r3, r0
   11032:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   11034:	4a0d      	ldr	r2, [pc, #52]	; (1106c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11036:	9b01      	ldr	r3, [sp, #4]
   11038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1103c:	1e5a      	subs	r2, r3, #1
   1103e:	490b      	ldr	r1, [pc, #44]	; (1106c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11040:	9b01      	ldr	r3, [sp, #4]
   11042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   11046:	4a0a      	ldr	r2, [pc, #40]	; (11070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   11048:	9b01      	ldr	r3, [sp, #4]
   1104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1104e:	f003 0301 	and.w	r3, r3, #1
   11052:	2b00      	cmp	r3, #0
   11054:	d106      	bne.n	11064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   11056:	4a05      	ldr	r2, [pc, #20]	; (1106c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11058:	9b01      	ldr	r3, [sp, #4]
   1105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1105e:	2b00      	cmp	r3, #0
   11060:	d100      	bne.n	11064 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11062:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11064:	bf00      	nop
   11066:	b003      	add	sp, #12
   11068:	f85d fb04 	ldr.w	pc, [sp], #4
   1106c:	1fff9388 	.word	0x1fff9388
   11070:	1fff9384 	.word	0x1fff9384

00011074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   11074:	b500      	push	{lr}
   11076:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11078:	f7f0 fb7e 	bl	1778 <Sys_GetCoreID>
   1107c:	4603      	mov	r3, r0
   1107e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   11080:	4a10      	ldr	r2, [pc, #64]	; (110c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   11082:	9b01      	ldr	r3, [sp, #4]
   11084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11088:	2b00      	cmp	r3, #0
   1108a:	d10d      	bne.n	110a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1108c:	f7ef fc20 	bl	8d0 <Adc_schm_read_msr>
   11090:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11092:	9b00      	ldr	r3, [sp, #0]
   11094:	f003 0301 	and.w	r3, r3, #1
   11098:	2b00      	cmp	r3, #0
   1109a:	d100      	bne.n	1109e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1109c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   1109e:	490a      	ldr	r1, [pc, #40]	; (110c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   110a0:	9b01      	ldr	r3, [sp, #4]
   110a2:	9a00      	ldr	r2, [sp, #0]
   110a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   110a8:	4a06      	ldr	r2, [pc, #24]	; (110c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   110aa:	9b01      	ldr	r3, [sp, #4]
   110ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110b0:	1c5a      	adds	r2, r3, #1
   110b2:	4904      	ldr	r1, [pc, #16]	; (110c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   110b4:	9b01      	ldr	r3, [sp, #4]
   110b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   110ba:	bf00      	nop
   110bc:	b003      	add	sp, #12
   110be:	f85d fb04 	ldr.w	pc, [sp], #4
   110c2:	bf00      	nop
   110c4:	1fff9390 	.word	0x1fff9390
   110c8:	1fff938c 	.word	0x1fff938c

000110cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   110cc:	b500      	push	{lr}
   110ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110d0:	f7f0 fb52 	bl	1778 <Sys_GetCoreID>
   110d4:	4603      	mov	r3, r0
   110d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   110d8:	4a0d      	ldr	r2, [pc, #52]	; (11110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   110da:	9b01      	ldr	r3, [sp, #4]
   110dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110e0:	1e5a      	subs	r2, r3, #1
   110e2:	490b      	ldr	r1, [pc, #44]	; (11110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   110e4:	9b01      	ldr	r3, [sp, #4]
   110e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   110ea:	4a0a      	ldr	r2, [pc, #40]	; (11114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   110ec:	9b01      	ldr	r3, [sp, #4]
   110ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110f2:	f003 0301 	and.w	r3, r3, #1
   110f6:	2b00      	cmp	r3, #0
   110f8:	d106      	bne.n	11108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   110fa:	4a05      	ldr	r2, [pc, #20]	; (11110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   110fc:	9b01      	ldr	r3, [sp, #4]
   110fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11102:	2b00      	cmp	r3, #0
   11104:	d100      	bne.n	11108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11106:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11108:	bf00      	nop
   1110a:	b003      	add	sp, #12
   1110c:	f85d fb04 	ldr.w	pc, [sp], #4
   11110:	1fff9390 	.word	0x1fff9390
   11114:	1fff938c 	.word	0x1fff938c

00011118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11118:	b500      	push	{lr}
   1111a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1111c:	f7f0 fb2c 	bl	1778 <Sys_GetCoreID>
   11120:	4603      	mov	r3, r0
   11122:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   11124:	4a10      	ldr	r2, [pc, #64]	; (11168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11126:	9b01      	ldr	r3, [sp, #4]
   11128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1112c:	2b00      	cmp	r3, #0
   1112e:	d10d      	bne.n	1114c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11130:	f7ef fbce 	bl	8d0 <Adc_schm_read_msr>
   11134:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11136:	9b00      	ldr	r3, [sp, #0]
   11138:	f003 0301 	and.w	r3, r3, #1
   1113c:	2b00      	cmp	r3, #0
   1113e:	d100      	bne.n	11142 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11140:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   11142:	490a      	ldr	r1, [pc, #40]	; (1116c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   11144:	9b01      	ldr	r3, [sp, #4]
   11146:	9a00      	ldr	r2, [sp, #0]
   11148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   1114c:	4a06      	ldr	r2, [pc, #24]	; (11168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   1114e:	9b01      	ldr	r3, [sp, #4]
   11150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11154:	1c5a      	adds	r2, r3, #1
   11156:	4904      	ldr	r1, [pc, #16]	; (11168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11158:	9b01      	ldr	r3, [sp, #4]
   1115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1115e:	bf00      	nop
   11160:	b003      	add	sp, #12
   11162:	f85d fb04 	ldr.w	pc, [sp], #4
   11166:	bf00      	nop
   11168:	1fff9398 	.word	0x1fff9398
   1116c:	1fff9394 	.word	0x1fff9394

00011170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11170:	b500      	push	{lr}
   11172:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11174:	f7f0 fb00 	bl	1778 <Sys_GetCoreID>
   11178:	4603      	mov	r3, r0
   1117a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   1117c:	4a0d      	ldr	r2, [pc, #52]	; (111b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   1117e:	9b01      	ldr	r3, [sp, #4]
   11180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11184:	1e5a      	subs	r2, r3, #1
   11186:	490b      	ldr	r1, [pc, #44]	; (111b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11188:	9b01      	ldr	r3, [sp, #4]
   1118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   1118e:	4a0a      	ldr	r2, [pc, #40]	; (111b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   11190:	9b01      	ldr	r3, [sp, #4]
   11192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11196:	f003 0301 	and.w	r3, r3, #1
   1119a:	2b00      	cmp	r3, #0
   1119c:	d106      	bne.n	111ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   1119e:	4a05      	ldr	r2, [pc, #20]	; (111b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   111a0:	9b01      	ldr	r3, [sp, #4]
   111a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111a6:	2b00      	cmp	r3, #0
   111a8:	d100      	bne.n	111ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   111aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   111ac:	bf00      	nop
   111ae:	b003      	add	sp, #12
   111b0:	f85d fb04 	ldr.w	pc, [sp], #4
   111b4:	1fff9398 	.word	0x1fff9398
   111b8:	1fff9394 	.word	0x1fff9394

000111bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   111bc:	b500      	push	{lr}
   111be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111c0:	f7f0 fada 	bl	1778 <Sys_GetCoreID>
   111c4:	4603      	mov	r3, r0
   111c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   111c8:	4a10      	ldr	r2, [pc, #64]	; (1120c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   111ca:	9b01      	ldr	r3, [sp, #4]
   111cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111d0:	2b00      	cmp	r3, #0
   111d2:	d10d      	bne.n	111f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   111d4:	f7ef fb7c 	bl	8d0 <Adc_schm_read_msr>
   111d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   111da:	9b00      	ldr	r3, [sp, #0]
   111dc:	f003 0301 	and.w	r3, r3, #1
   111e0:	2b00      	cmp	r3, #0
   111e2:	d100      	bne.n	111e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   111e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   111e6:	490a      	ldr	r1, [pc, #40]	; (11210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   111e8:	9b01      	ldr	r3, [sp, #4]
   111ea:	9a00      	ldr	r2, [sp, #0]
   111ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   111f0:	4a06      	ldr	r2, [pc, #24]	; (1120c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   111f2:	9b01      	ldr	r3, [sp, #4]
   111f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111f8:	1c5a      	adds	r2, r3, #1
   111fa:	4904      	ldr	r1, [pc, #16]	; (1120c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   111fc:	9b01      	ldr	r3, [sp, #4]
   111fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11202:	bf00      	nop
   11204:	b003      	add	sp, #12
   11206:	f85d fb04 	ldr.w	pc, [sp], #4
   1120a:	bf00      	nop
   1120c:	1fff93a0 	.word	0x1fff93a0
   11210:	1fff939c 	.word	0x1fff939c

00011214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   11214:	b500      	push	{lr}
   11216:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11218:	f7f0 faae 	bl	1778 <Sys_GetCoreID>
   1121c:	4603      	mov	r3, r0
   1121e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   11220:	4a0d      	ldr	r2, [pc, #52]	; (11258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11222:	9b01      	ldr	r3, [sp, #4]
   11224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11228:	1e5a      	subs	r2, r3, #1
   1122a:	490b      	ldr	r1, [pc, #44]	; (11258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1122c:	9b01      	ldr	r3, [sp, #4]
   1122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   11232:	4a0a      	ldr	r2, [pc, #40]	; (1125c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   11234:	9b01      	ldr	r3, [sp, #4]
   11236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1123a:	f003 0301 	and.w	r3, r3, #1
   1123e:	2b00      	cmp	r3, #0
   11240:	d106      	bne.n	11250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   11242:	4a05      	ldr	r2, [pc, #20]	; (11258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11244:	9b01      	ldr	r3, [sp, #4]
   11246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1124a:	2b00      	cmp	r3, #0
   1124c:	d100      	bne.n	11250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1124e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11250:	bf00      	nop
   11252:	b003      	add	sp, #12
   11254:	f85d fb04 	ldr.w	pc, [sp], #4
   11258:	1fff93a0 	.word	0x1fff93a0
   1125c:	1fff939c 	.word	0x1fff939c

00011260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   11260:	b500      	push	{lr}
   11262:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11264:	f7f0 fa88 	bl	1778 <Sys_GetCoreID>
   11268:	4603      	mov	r3, r0
   1126a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   1126c:	4a10      	ldr	r2, [pc, #64]	; (112b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1126e:	9b01      	ldr	r3, [sp, #4]
   11270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11274:	2b00      	cmp	r3, #0
   11276:	d10d      	bne.n	11294 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11278:	f7ef fb2a 	bl	8d0 <Adc_schm_read_msr>
   1127c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1127e:	9b00      	ldr	r3, [sp, #0]
   11280:	f003 0301 	and.w	r3, r3, #1
   11284:	2b00      	cmp	r3, #0
   11286:	d100      	bne.n	1128a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11288:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   1128a:	490a      	ldr	r1, [pc, #40]	; (112b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   1128c:	9b01      	ldr	r3, [sp, #4]
   1128e:	9a00      	ldr	r2, [sp, #0]
   11290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   11294:	4a06      	ldr	r2, [pc, #24]	; (112b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11296:	9b01      	ldr	r3, [sp, #4]
   11298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1129c:	1c5a      	adds	r2, r3, #1
   1129e:	4904      	ldr	r1, [pc, #16]	; (112b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   112a0:	9b01      	ldr	r3, [sp, #4]
   112a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   112a6:	bf00      	nop
   112a8:	b003      	add	sp, #12
   112aa:	f85d fb04 	ldr.w	pc, [sp], #4
   112ae:	bf00      	nop
   112b0:	1fff93a8 	.word	0x1fff93a8
   112b4:	1fff93a4 	.word	0x1fff93a4

000112b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   112b8:	b500      	push	{lr}
   112ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112bc:	f7f0 fa5c 	bl	1778 <Sys_GetCoreID>
   112c0:	4603      	mov	r3, r0
   112c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   112c4:	4a0d      	ldr	r2, [pc, #52]	; (112fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   112c6:	9b01      	ldr	r3, [sp, #4]
   112c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112cc:	1e5a      	subs	r2, r3, #1
   112ce:	490b      	ldr	r1, [pc, #44]	; (112fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   112d0:	9b01      	ldr	r3, [sp, #4]
   112d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   112d6:	4a0a      	ldr	r2, [pc, #40]	; (11300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   112d8:	9b01      	ldr	r3, [sp, #4]
   112da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112de:	f003 0301 	and.w	r3, r3, #1
   112e2:	2b00      	cmp	r3, #0
   112e4:	d106      	bne.n	112f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   112e6:	4a05      	ldr	r2, [pc, #20]	; (112fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   112e8:	9b01      	ldr	r3, [sp, #4]
   112ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112ee:	2b00      	cmp	r3, #0
   112f0:	d100      	bne.n	112f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   112f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   112f4:	bf00      	nop
   112f6:	b003      	add	sp, #12
   112f8:	f85d fb04 	ldr.w	pc, [sp], #4
   112fc:	1fff93a8 	.word	0x1fff93a8
   11300:	1fff93a4 	.word	0x1fff93a4

00011304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   11304:	b500      	push	{lr}
   11306:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11308:	f7f0 fa36 	bl	1778 <Sys_GetCoreID>
   1130c:	4603      	mov	r3, r0
   1130e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   11310:	4a10      	ldr	r2, [pc, #64]	; (11354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   11312:	9b01      	ldr	r3, [sp, #4]
   11314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11318:	2b00      	cmp	r3, #0
   1131a:	d10d      	bne.n	11338 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1131c:	f7ef fad8 	bl	8d0 <Adc_schm_read_msr>
   11320:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11322:	9b00      	ldr	r3, [sp, #0]
   11324:	f003 0301 	and.w	r3, r3, #1
   11328:	2b00      	cmp	r3, #0
   1132a:	d100      	bne.n	1132e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1132c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   1132e:	490a      	ldr	r1, [pc, #40]	; (11358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   11330:	9b01      	ldr	r3, [sp, #4]
   11332:	9a00      	ldr	r2, [sp, #0]
   11334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   11338:	4a06      	ldr	r2, [pc, #24]	; (11354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1133a:	9b01      	ldr	r3, [sp, #4]
   1133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11340:	1c5a      	adds	r2, r3, #1
   11342:	4904      	ldr	r1, [pc, #16]	; (11354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   11344:	9b01      	ldr	r3, [sp, #4]
   11346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1134a:	bf00      	nop
   1134c:	b003      	add	sp, #12
   1134e:	f85d fb04 	ldr.w	pc, [sp], #4
   11352:	bf00      	nop
   11354:	1fff93b0 	.word	0x1fff93b0
   11358:	1fff93ac 	.word	0x1fff93ac

0001135c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   1135c:	b500      	push	{lr}
   1135e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11360:	f7f0 fa0a 	bl	1778 <Sys_GetCoreID>
   11364:	4603      	mov	r3, r0
   11366:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   11368:	4a0d      	ldr	r2, [pc, #52]	; (113a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   1136a:	9b01      	ldr	r3, [sp, #4]
   1136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11370:	1e5a      	subs	r2, r3, #1
   11372:	490b      	ldr	r1, [pc, #44]	; (113a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   11374:	9b01      	ldr	r3, [sp, #4]
   11376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   1137a:	4a0a      	ldr	r2, [pc, #40]	; (113a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   1137c:	9b01      	ldr	r3, [sp, #4]
   1137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11382:	f003 0301 	and.w	r3, r3, #1
   11386:	2b00      	cmp	r3, #0
   11388:	d106      	bne.n	11398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   1138a:	4a05      	ldr	r2, [pc, #20]	; (113a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   1138c:	9b01      	ldr	r3, [sp, #4]
   1138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11392:	2b00      	cmp	r3, #0
   11394:	d100      	bne.n	11398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11396:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11398:	bf00      	nop
   1139a:	b003      	add	sp, #12
   1139c:	f85d fb04 	ldr.w	pc, [sp], #4
   113a0:	1fff93b0 	.word	0x1fff93b0
   113a4:	1fff93ac 	.word	0x1fff93ac

000113a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   113a8:	b500      	push	{lr}
   113aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113ac:	f7f0 f9e4 	bl	1778 <Sys_GetCoreID>
   113b0:	4603      	mov	r3, r0
   113b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   113b4:	4a10      	ldr	r2, [pc, #64]	; (113f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   113b6:	9b01      	ldr	r3, [sp, #4]
   113b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113bc:	2b00      	cmp	r3, #0
   113be:	d10d      	bne.n	113dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   113c0:	f7ef fa86 	bl	8d0 <Adc_schm_read_msr>
   113c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   113c6:	9b00      	ldr	r3, [sp, #0]
   113c8:	f003 0301 	and.w	r3, r3, #1
   113cc:	2b00      	cmp	r3, #0
   113ce:	d100      	bne.n	113d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   113d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   113d2:	490a      	ldr	r1, [pc, #40]	; (113fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   113d4:	9b01      	ldr	r3, [sp, #4]
   113d6:	9a00      	ldr	r2, [sp, #0]
   113d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   113dc:	4a06      	ldr	r2, [pc, #24]	; (113f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   113de:	9b01      	ldr	r3, [sp, #4]
   113e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113e4:	1c5a      	adds	r2, r3, #1
   113e6:	4904      	ldr	r1, [pc, #16]	; (113f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   113e8:	9b01      	ldr	r3, [sp, #4]
   113ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   113ee:	bf00      	nop
   113f0:	b003      	add	sp, #12
   113f2:	f85d fb04 	ldr.w	pc, [sp], #4
   113f6:	bf00      	nop
   113f8:	1fff93b8 	.word	0x1fff93b8
   113fc:	1fff93b4 	.word	0x1fff93b4

00011400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   11400:	b500      	push	{lr}
   11402:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11404:	f7f0 f9b8 	bl	1778 <Sys_GetCoreID>
   11408:	4603      	mov	r3, r0
   1140a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   1140c:	4a0d      	ldr	r2, [pc, #52]	; (11444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   1140e:	9b01      	ldr	r3, [sp, #4]
   11410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11414:	1e5a      	subs	r2, r3, #1
   11416:	490b      	ldr	r1, [pc, #44]	; (11444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   11418:	9b01      	ldr	r3, [sp, #4]
   1141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   1141e:	4a0a      	ldr	r2, [pc, #40]	; (11448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   11420:	9b01      	ldr	r3, [sp, #4]
   11422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11426:	f003 0301 	and.w	r3, r3, #1
   1142a:	2b00      	cmp	r3, #0
   1142c:	d106      	bne.n	1143c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   1142e:	4a05      	ldr	r2, [pc, #20]	; (11444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   11430:	9b01      	ldr	r3, [sp, #4]
   11432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11436:	2b00      	cmp	r3, #0
   11438:	d100      	bne.n	1143c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1143a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1143c:	bf00      	nop
   1143e:	b003      	add	sp, #12
   11440:	f85d fb04 	ldr.w	pc, [sp], #4
   11444:	1fff93b8 	.word	0x1fff93b8
   11448:	1fff93b4 	.word	0x1fff93b4

0001144c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   1144c:	b500      	push	{lr}
   1144e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11450:	f7f0 f992 	bl	1778 <Sys_GetCoreID>
   11454:	4603      	mov	r3, r0
   11456:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   11458:	4a10      	ldr	r2, [pc, #64]	; (1149c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1145a:	9b01      	ldr	r3, [sp, #4]
   1145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11460:	2b00      	cmp	r3, #0
   11462:	d10d      	bne.n	11480 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11464:	f7ef fa34 	bl	8d0 <Adc_schm_read_msr>
   11468:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1146a:	9b00      	ldr	r3, [sp, #0]
   1146c:	f003 0301 	and.w	r3, r3, #1
   11470:	2b00      	cmp	r3, #0
   11472:	d100      	bne.n	11476 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11474:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   11476:	490a      	ldr	r1, [pc, #40]	; (114a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   11478:	9b01      	ldr	r3, [sp, #4]
   1147a:	9a00      	ldr	r2, [sp, #0]
   1147c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   11480:	4a06      	ldr	r2, [pc, #24]	; (1149c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   11482:	9b01      	ldr	r3, [sp, #4]
   11484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11488:	1c5a      	adds	r2, r3, #1
   1148a:	4904      	ldr	r1, [pc, #16]	; (1149c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1148c:	9b01      	ldr	r3, [sp, #4]
   1148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11492:	bf00      	nop
   11494:	b003      	add	sp, #12
   11496:	f85d fb04 	ldr.w	pc, [sp], #4
   1149a:	bf00      	nop
   1149c:	1fff93c0 	.word	0x1fff93c0
   114a0:	1fff93bc 	.word	0x1fff93bc

000114a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   114a4:	b500      	push	{lr}
   114a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114a8:	f7f0 f966 	bl	1778 <Sys_GetCoreID>
   114ac:	4603      	mov	r3, r0
   114ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   114b0:	4a0d      	ldr	r2, [pc, #52]	; (114e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   114b2:	9b01      	ldr	r3, [sp, #4]
   114b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114b8:	1e5a      	subs	r2, r3, #1
   114ba:	490b      	ldr	r1, [pc, #44]	; (114e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   114bc:	9b01      	ldr	r3, [sp, #4]
   114be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   114c2:	4a0a      	ldr	r2, [pc, #40]	; (114ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   114c4:	9b01      	ldr	r3, [sp, #4]
   114c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114ca:	f003 0301 	and.w	r3, r3, #1
   114ce:	2b00      	cmp	r3, #0
   114d0:	d106      	bne.n	114e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   114d2:	4a05      	ldr	r2, [pc, #20]	; (114e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   114d4:	9b01      	ldr	r3, [sp, #4]
   114d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114da:	2b00      	cmp	r3, #0
   114dc:	d100      	bne.n	114e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   114de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   114e0:	bf00      	nop
   114e2:	b003      	add	sp, #12
   114e4:	f85d fb04 	ldr.w	pc, [sp], #4
   114e8:	1fff93c0 	.word	0x1fff93c0
   114ec:	1fff93bc 	.word	0x1fff93bc

000114f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   114f0:	b500      	push	{lr}
   114f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114f4:	f7f0 f940 	bl	1778 <Sys_GetCoreID>
   114f8:	4603      	mov	r3, r0
   114fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   114fc:	4a10      	ldr	r2, [pc, #64]	; (11540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   114fe:	9b01      	ldr	r3, [sp, #4]
   11500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11504:	2b00      	cmp	r3, #0
   11506:	d10d      	bne.n	11524 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11508:	f7ef f9e2 	bl	8d0 <Adc_schm_read_msr>
   1150c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1150e:	9b00      	ldr	r3, [sp, #0]
   11510:	f003 0301 	and.w	r3, r3, #1
   11514:	2b00      	cmp	r3, #0
   11516:	d100      	bne.n	1151a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11518:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   1151a:	490a      	ldr	r1, [pc, #40]	; (11544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   1151c:	9b01      	ldr	r3, [sp, #4]
   1151e:	9a00      	ldr	r2, [sp, #0]
   11520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   11524:	4a06      	ldr	r2, [pc, #24]	; (11540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   11526:	9b01      	ldr	r3, [sp, #4]
   11528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1152c:	1c5a      	adds	r2, r3, #1
   1152e:	4904      	ldr	r1, [pc, #16]	; (11540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   11530:	9b01      	ldr	r3, [sp, #4]
   11532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11536:	bf00      	nop
   11538:	b003      	add	sp, #12
   1153a:	f85d fb04 	ldr.w	pc, [sp], #4
   1153e:	bf00      	nop
   11540:	1fff93c8 	.word	0x1fff93c8
   11544:	1fff93c4 	.word	0x1fff93c4

00011548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   11548:	b500      	push	{lr}
   1154a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1154c:	f7f0 f914 	bl	1778 <Sys_GetCoreID>
   11550:	4603      	mov	r3, r0
   11552:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   11554:	4a0d      	ldr	r2, [pc, #52]	; (1158c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   11556:	9b01      	ldr	r3, [sp, #4]
   11558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1155c:	1e5a      	subs	r2, r3, #1
   1155e:	490b      	ldr	r1, [pc, #44]	; (1158c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   11560:	9b01      	ldr	r3, [sp, #4]
   11562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   11566:	4a0a      	ldr	r2, [pc, #40]	; (11590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   11568:	9b01      	ldr	r3, [sp, #4]
   1156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1156e:	f003 0301 	and.w	r3, r3, #1
   11572:	2b00      	cmp	r3, #0
   11574:	d106      	bne.n	11584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   11576:	4a05      	ldr	r2, [pc, #20]	; (1158c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   11578:	9b01      	ldr	r3, [sp, #4]
   1157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1157e:	2b00      	cmp	r3, #0
   11580:	d100      	bne.n	11584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11582:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11584:	bf00      	nop
   11586:	b003      	add	sp, #12
   11588:	f85d fb04 	ldr.w	pc, [sp], #4
   1158c:	1fff93c8 	.word	0x1fff93c8
   11590:	1fff93c4 	.word	0x1fff93c4

00011594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   11594:	b500      	push	{lr}
   11596:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11598:	f7f0 f8ee 	bl	1778 <Sys_GetCoreID>
   1159c:	4603      	mov	r3, r0
   1159e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   115a0:	4a10      	ldr	r2, [pc, #64]	; (115e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   115a2:	9b01      	ldr	r3, [sp, #4]
   115a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115a8:	2b00      	cmp	r3, #0
   115aa:	d10d      	bne.n	115c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   115ac:	f7ef f990 	bl	8d0 <Adc_schm_read_msr>
   115b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   115b2:	9b00      	ldr	r3, [sp, #0]
   115b4:	f003 0301 	and.w	r3, r3, #1
   115b8:	2b00      	cmp	r3, #0
   115ba:	d100      	bne.n	115be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   115bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   115be:	490a      	ldr	r1, [pc, #40]	; (115e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   115c0:	9b01      	ldr	r3, [sp, #4]
   115c2:	9a00      	ldr	r2, [sp, #0]
   115c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   115c8:	4a06      	ldr	r2, [pc, #24]	; (115e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   115ca:	9b01      	ldr	r3, [sp, #4]
   115cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115d0:	1c5a      	adds	r2, r3, #1
   115d2:	4904      	ldr	r1, [pc, #16]	; (115e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   115d4:	9b01      	ldr	r3, [sp, #4]
   115d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   115da:	bf00      	nop
   115dc:	b003      	add	sp, #12
   115de:	f85d fb04 	ldr.w	pc, [sp], #4
   115e2:	bf00      	nop
   115e4:	1fff93d0 	.word	0x1fff93d0
   115e8:	1fff93cc 	.word	0x1fff93cc

000115ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   115ec:	b500      	push	{lr}
   115ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115f0:	f7f0 f8c2 	bl	1778 <Sys_GetCoreID>
   115f4:	4603      	mov	r3, r0
   115f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   115f8:	4a0d      	ldr	r2, [pc, #52]	; (11630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   115fa:	9b01      	ldr	r3, [sp, #4]
   115fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11600:	1e5a      	subs	r2, r3, #1
   11602:	490b      	ldr	r1, [pc, #44]	; (11630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   11604:	9b01      	ldr	r3, [sp, #4]
   11606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   1160a:	4a0a      	ldr	r2, [pc, #40]	; (11634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   1160c:	9b01      	ldr	r3, [sp, #4]
   1160e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11612:	f003 0301 	and.w	r3, r3, #1
   11616:	2b00      	cmp	r3, #0
   11618:	d106      	bne.n	11628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   1161a:	4a05      	ldr	r2, [pc, #20]	; (11630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   1161c:	9b01      	ldr	r3, [sp, #4]
   1161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11622:	2b00      	cmp	r3, #0
   11624:	d100      	bne.n	11628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11626:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11628:	bf00      	nop
   1162a:	b003      	add	sp, #12
   1162c:	f85d fb04 	ldr.w	pc, [sp], #4
   11630:	1fff93d0 	.word	0x1fff93d0
   11634:	1fff93cc 	.word	0x1fff93cc

00011638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   11638:	b500      	push	{lr}
   1163a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1163c:	f7f0 f89c 	bl	1778 <Sys_GetCoreID>
   11640:	4603      	mov	r3, r0
   11642:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   11644:	4a10      	ldr	r2, [pc, #64]	; (11688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   11646:	9b01      	ldr	r3, [sp, #4]
   11648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1164c:	2b00      	cmp	r3, #0
   1164e:	d10d      	bne.n	1166c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11650:	f7ef f93e 	bl	8d0 <Adc_schm_read_msr>
   11654:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11656:	9b00      	ldr	r3, [sp, #0]
   11658:	f003 0301 	and.w	r3, r3, #1
   1165c:	2b00      	cmp	r3, #0
   1165e:	d100      	bne.n	11662 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11660:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   11662:	490a      	ldr	r1, [pc, #40]	; (1168c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   11664:	9b01      	ldr	r3, [sp, #4]
   11666:	9a00      	ldr	r2, [sp, #0]
   11668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   1166c:	4a06      	ldr	r2, [pc, #24]	; (11688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1166e:	9b01      	ldr	r3, [sp, #4]
   11670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11674:	1c5a      	adds	r2, r3, #1
   11676:	4904      	ldr	r1, [pc, #16]	; (11688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   11678:	9b01      	ldr	r3, [sp, #4]
   1167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1167e:	bf00      	nop
   11680:	b003      	add	sp, #12
   11682:	f85d fb04 	ldr.w	pc, [sp], #4
   11686:	bf00      	nop
   11688:	1fff93d8 	.word	0x1fff93d8
   1168c:	1fff93d4 	.word	0x1fff93d4

00011690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   11690:	b500      	push	{lr}
   11692:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11694:	f7f0 f870 	bl	1778 <Sys_GetCoreID>
   11698:	4603      	mov	r3, r0
   1169a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   1169c:	4a0d      	ldr	r2, [pc, #52]	; (116d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   1169e:	9b01      	ldr	r3, [sp, #4]
   116a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116a4:	1e5a      	subs	r2, r3, #1
   116a6:	490b      	ldr	r1, [pc, #44]	; (116d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   116a8:	9b01      	ldr	r3, [sp, #4]
   116aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   116ae:	4a0a      	ldr	r2, [pc, #40]	; (116d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   116b0:	9b01      	ldr	r3, [sp, #4]
   116b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116b6:	f003 0301 	and.w	r3, r3, #1
   116ba:	2b00      	cmp	r3, #0
   116bc:	d106      	bne.n	116cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   116be:	4a05      	ldr	r2, [pc, #20]	; (116d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   116c0:	9b01      	ldr	r3, [sp, #4]
   116c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116c6:	2b00      	cmp	r3, #0
   116c8:	d100      	bne.n	116cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   116ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   116cc:	bf00      	nop
   116ce:	b003      	add	sp, #12
   116d0:	f85d fb04 	ldr.w	pc, [sp], #4
   116d4:	1fff93d8 	.word	0x1fff93d8
   116d8:	1fff93d4 	.word	0x1fff93d4

000116dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   116dc:	b500      	push	{lr}
   116de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116e0:	f7f0 f84a 	bl	1778 <Sys_GetCoreID>
   116e4:	4603      	mov	r3, r0
   116e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   116e8:	4a10      	ldr	r2, [pc, #64]	; (1172c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   116ea:	9b01      	ldr	r3, [sp, #4]
   116ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116f0:	2b00      	cmp	r3, #0
   116f2:	d10d      	bne.n	11710 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   116f4:	f7ef f8ec 	bl	8d0 <Adc_schm_read_msr>
   116f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   116fa:	9b00      	ldr	r3, [sp, #0]
   116fc:	f003 0301 	and.w	r3, r3, #1
   11700:	2b00      	cmp	r3, #0
   11702:	d100      	bne.n	11706 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11704:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   11706:	490a      	ldr	r1, [pc, #40]	; (11730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   11708:	9b01      	ldr	r3, [sp, #4]
   1170a:	9a00      	ldr	r2, [sp, #0]
   1170c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   11710:	4a06      	ldr	r2, [pc, #24]	; (1172c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   11712:	9b01      	ldr	r3, [sp, #4]
   11714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11718:	1c5a      	adds	r2, r3, #1
   1171a:	4904      	ldr	r1, [pc, #16]	; (1172c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   1171c:	9b01      	ldr	r3, [sp, #4]
   1171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11722:	bf00      	nop
   11724:	b003      	add	sp, #12
   11726:	f85d fb04 	ldr.w	pc, [sp], #4
   1172a:	bf00      	nop
   1172c:	1fff93e0 	.word	0x1fff93e0
   11730:	1fff93dc 	.word	0x1fff93dc

00011734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   11734:	b500      	push	{lr}
   11736:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11738:	f7f0 f81e 	bl	1778 <Sys_GetCoreID>
   1173c:	4603      	mov	r3, r0
   1173e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   11740:	4a0d      	ldr	r2, [pc, #52]	; (11778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   11742:	9b01      	ldr	r3, [sp, #4]
   11744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11748:	1e5a      	subs	r2, r3, #1
   1174a:	490b      	ldr	r1, [pc, #44]	; (11778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   1174c:	9b01      	ldr	r3, [sp, #4]
   1174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   11752:	4a0a      	ldr	r2, [pc, #40]	; (1177c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   11754:	9b01      	ldr	r3, [sp, #4]
   11756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1175a:	f003 0301 	and.w	r3, r3, #1
   1175e:	2b00      	cmp	r3, #0
   11760:	d106      	bne.n	11770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   11762:	4a05      	ldr	r2, [pc, #20]	; (11778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   11764:	9b01      	ldr	r3, [sp, #4]
   11766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1176a:	2b00      	cmp	r3, #0
   1176c:	d100      	bne.n	11770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1176e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11770:	bf00      	nop
   11772:	b003      	add	sp, #12
   11774:	f85d fb04 	ldr.w	pc, [sp], #4
   11778:	1fff93e0 	.word	0x1fff93e0
   1177c:	1fff93dc 	.word	0x1fff93dc

00011780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   11780:	b500      	push	{lr}
   11782:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11784:	f7ef fff8 	bl	1778 <Sys_GetCoreID>
   11788:	4603      	mov	r3, r0
   1178a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   1178c:	4a10      	ldr	r2, [pc, #64]	; (117d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   1178e:	9b01      	ldr	r3, [sp, #4]
   11790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11794:	2b00      	cmp	r3, #0
   11796:	d10d      	bne.n	117b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11798:	f7ef f89a 	bl	8d0 <Adc_schm_read_msr>
   1179c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1179e:	9b00      	ldr	r3, [sp, #0]
   117a0:	f003 0301 	and.w	r3, r3, #1
   117a4:	2b00      	cmp	r3, #0
   117a6:	d100      	bne.n	117aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   117a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   117aa:	490a      	ldr	r1, [pc, #40]	; (117d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   117ac:	9b01      	ldr	r3, [sp, #4]
   117ae:	9a00      	ldr	r2, [sp, #0]
   117b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   117b4:	4a06      	ldr	r2, [pc, #24]	; (117d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   117b6:	9b01      	ldr	r3, [sp, #4]
   117b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117bc:	1c5a      	adds	r2, r3, #1
   117be:	4904      	ldr	r1, [pc, #16]	; (117d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   117c0:	9b01      	ldr	r3, [sp, #4]
   117c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   117c6:	bf00      	nop
   117c8:	b003      	add	sp, #12
   117ca:	f85d fb04 	ldr.w	pc, [sp], #4
   117ce:	bf00      	nop
   117d0:	1fff93e8 	.word	0x1fff93e8
   117d4:	1fff93e4 	.word	0x1fff93e4

000117d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   117d8:	b500      	push	{lr}
   117da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117dc:	f7ef ffcc 	bl	1778 <Sys_GetCoreID>
   117e0:	4603      	mov	r3, r0
   117e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   117e4:	4a0d      	ldr	r2, [pc, #52]	; (1181c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   117e6:	9b01      	ldr	r3, [sp, #4]
   117e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117ec:	1e5a      	subs	r2, r3, #1
   117ee:	490b      	ldr	r1, [pc, #44]	; (1181c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   117f0:	9b01      	ldr	r3, [sp, #4]
   117f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   117f6:	4a0a      	ldr	r2, [pc, #40]	; (11820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   117f8:	9b01      	ldr	r3, [sp, #4]
   117fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117fe:	f003 0301 	and.w	r3, r3, #1
   11802:	2b00      	cmp	r3, #0
   11804:	d106      	bne.n	11814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   11806:	4a05      	ldr	r2, [pc, #20]	; (1181c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   11808:	9b01      	ldr	r3, [sp, #4]
   1180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1180e:	2b00      	cmp	r3, #0
   11810:	d100      	bne.n	11814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11812:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11814:	bf00      	nop
   11816:	b003      	add	sp, #12
   11818:	f85d fb04 	ldr.w	pc, [sp], #4
   1181c:	1fff93e8 	.word	0x1fff93e8
   11820:	1fff93e4 	.word	0x1fff93e4

00011824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   11824:	b500      	push	{lr}
   11826:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11828:	f7ef ffa6 	bl	1778 <Sys_GetCoreID>
   1182c:	4603      	mov	r3, r0
   1182e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   11830:	4a10      	ldr	r2, [pc, #64]	; (11874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   11832:	9b01      	ldr	r3, [sp, #4]
   11834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11838:	2b00      	cmp	r3, #0
   1183a:	d10d      	bne.n	11858 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1183c:	f7ef f848 	bl	8d0 <Adc_schm_read_msr>
   11840:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11842:	9b00      	ldr	r3, [sp, #0]
   11844:	f003 0301 	and.w	r3, r3, #1
   11848:	2b00      	cmp	r3, #0
   1184a:	d100      	bne.n	1184e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1184c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   1184e:	490a      	ldr	r1, [pc, #40]	; (11878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   11850:	9b01      	ldr	r3, [sp, #4]
   11852:	9a00      	ldr	r2, [sp, #0]
   11854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   11858:	4a06      	ldr	r2, [pc, #24]	; (11874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1185a:	9b01      	ldr	r3, [sp, #4]
   1185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11860:	1c5a      	adds	r2, r3, #1
   11862:	4904      	ldr	r1, [pc, #16]	; (11874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   11864:	9b01      	ldr	r3, [sp, #4]
   11866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1186a:	bf00      	nop
   1186c:	b003      	add	sp, #12
   1186e:	f85d fb04 	ldr.w	pc, [sp], #4
   11872:	bf00      	nop
   11874:	1fff93f0 	.word	0x1fff93f0
   11878:	1fff93ec 	.word	0x1fff93ec

0001187c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   1187c:	b500      	push	{lr}
   1187e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11880:	f7ef ff7a 	bl	1778 <Sys_GetCoreID>
   11884:	4603      	mov	r3, r0
   11886:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   11888:	4a0d      	ldr	r2, [pc, #52]	; (118c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   1188a:	9b01      	ldr	r3, [sp, #4]
   1188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11890:	1e5a      	subs	r2, r3, #1
   11892:	490b      	ldr	r1, [pc, #44]	; (118c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   11894:	9b01      	ldr	r3, [sp, #4]
   11896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   1189a:	4a0a      	ldr	r2, [pc, #40]	; (118c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   1189c:	9b01      	ldr	r3, [sp, #4]
   1189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118a2:	f003 0301 	and.w	r3, r3, #1
   118a6:	2b00      	cmp	r3, #0
   118a8:	d106      	bne.n	118b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   118aa:	4a05      	ldr	r2, [pc, #20]	; (118c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   118ac:	9b01      	ldr	r3, [sp, #4]
   118ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118b2:	2b00      	cmp	r3, #0
   118b4:	d100      	bne.n	118b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   118b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   118b8:	bf00      	nop
   118ba:	b003      	add	sp, #12
   118bc:	f85d fb04 	ldr.w	pc, [sp], #4
   118c0:	1fff93f0 	.word	0x1fff93f0
   118c4:	1fff93ec 	.word	0x1fff93ec

000118c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   118c8:	b500      	push	{lr}
   118ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118cc:	f7ef ff54 	bl	1778 <Sys_GetCoreID>
   118d0:	4603      	mov	r3, r0
   118d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   118d4:	4a10      	ldr	r2, [pc, #64]	; (11918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   118d6:	9b01      	ldr	r3, [sp, #4]
   118d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118dc:	2b00      	cmp	r3, #0
   118de:	d10d      	bne.n	118fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   118e0:	f7ee fff6 	bl	8d0 <Adc_schm_read_msr>
   118e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   118e6:	9b00      	ldr	r3, [sp, #0]
   118e8:	f003 0301 	and.w	r3, r3, #1
   118ec:	2b00      	cmp	r3, #0
   118ee:	d100      	bne.n	118f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   118f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   118f2:	490a      	ldr	r1, [pc, #40]	; (1191c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   118f4:	9b01      	ldr	r3, [sp, #4]
   118f6:	9a00      	ldr	r2, [sp, #0]
   118f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   118fc:	4a06      	ldr	r2, [pc, #24]	; (11918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   118fe:	9b01      	ldr	r3, [sp, #4]
   11900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11904:	1c5a      	adds	r2, r3, #1
   11906:	4904      	ldr	r1, [pc, #16]	; (11918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   11908:	9b01      	ldr	r3, [sp, #4]
   1190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1190e:	bf00      	nop
   11910:	b003      	add	sp, #12
   11912:	f85d fb04 	ldr.w	pc, [sp], #4
   11916:	bf00      	nop
   11918:	1fff93f8 	.word	0x1fff93f8
   1191c:	1fff93f4 	.word	0x1fff93f4

00011920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   11920:	b500      	push	{lr}
   11922:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11924:	f7ef ff28 	bl	1778 <Sys_GetCoreID>
   11928:	4603      	mov	r3, r0
   1192a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   1192c:	4a0d      	ldr	r2, [pc, #52]	; (11964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   1192e:	9b01      	ldr	r3, [sp, #4]
   11930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11934:	1e5a      	subs	r2, r3, #1
   11936:	490b      	ldr	r1, [pc, #44]	; (11964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   11938:	9b01      	ldr	r3, [sp, #4]
   1193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   1193e:	4a0a      	ldr	r2, [pc, #40]	; (11968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   11940:	9b01      	ldr	r3, [sp, #4]
   11942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11946:	f003 0301 	and.w	r3, r3, #1
   1194a:	2b00      	cmp	r3, #0
   1194c:	d106      	bne.n	1195c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   1194e:	4a05      	ldr	r2, [pc, #20]	; (11964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   11950:	9b01      	ldr	r3, [sp, #4]
   11952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11956:	2b00      	cmp	r3, #0
   11958:	d100      	bne.n	1195c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1195a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1195c:	bf00      	nop
   1195e:	b003      	add	sp, #12
   11960:	f85d fb04 	ldr.w	pc, [sp], #4
   11964:	1fff93f8 	.word	0x1fff93f8
   11968:	1fff93f4 	.word	0x1fff93f4

0001196c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   1196c:	b500      	push	{lr}
   1196e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11970:	f7ef ff02 	bl	1778 <Sys_GetCoreID>
   11974:	4603      	mov	r3, r0
   11976:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   11978:	4a10      	ldr	r2, [pc, #64]	; (119bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   1197a:	9b01      	ldr	r3, [sp, #4]
   1197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11980:	2b00      	cmp	r3, #0
   11982:	d10d      	bne.n	119a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11984:	f7ee ffa4 	bl	8d0 <Adc_schm_read_msr>
   11988:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1198a:	9b00      	ldr	r3, [sp, #0]
   1198c:	f003 0301 	and.w	r3, r3, #1
   11990:	2b00      	cmp	r3, #0
   11992:	d100      	bne.n	11996 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11994:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   11996:	490a      	ldr	r1, [pc, #40]	; (119c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   11998:	9b01      	ldr	r3, [sp, #4]
   1199a:	9a00      	ldr	r2, [sp, #0]
   1199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   119a0:	4a06      	ldr	r2, [pc, #24]	; (119bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   119a2:	9b01      	ldr	r3, [sp, #4]
   119a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119a8:	1c5a      	adds	r2, r3, #1
   119aa:	4904      	ldr	r1, [pc, #16]	; (119bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   119ac:	9b01      	ldr	r3, [sp, #4]
   119ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   119b2:	bf00      	nop
   119b4:	b003      	add	sp, #12
   119b6:	f85d fb04 	ldr.w	pc, [sp], #4
   119ba:	bf00      	nop
   119bc:	1fff9400 	.word	0x1fff9400
   119c0:	1fff93fc 	.word	0x1fff93fc

000119c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   119c4:	b500      	push	{lr}
   119c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119c8:	f7ef fed6 	bl	1778 <Sys_GetCoreID>
   119cc:	4603      	mov	r3, r0
   119ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   119d0:	4a0d      	ldr	r2, [pc, #52]	; (11a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   119d2:	9b01      	ldr	r3, [sp, #4]
   119d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119d8:	1e5a      	subs	r2, r3, #1
   119da:	490b      	ldr	r1, [pc, #44]	; (11a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   119dc:	9b01      	ldr	r3, [sp, #4]
   119de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   119e2:	4a0a      	ldr	r2, [pc, #40]	; (11a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   119e4:	9b01      	ldr	r3, [sp, #4]
   119e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119ea:	f003 0301 	and.w	r3, r3, #1
   119ee:	2b00      	cmp	r3, #0
   119f0:	d106      	bne.n	11a00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   119f2:	4a05      	ldr	r2, [pc, #20]	; (11a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   119f4:	9b01      	ldr	r3, [sp, #4]
   119f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119fa:	2b00      	cmp	r3, #0
   119fc:	d100      	bne.n	11a00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   119fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a00:	bf00      	nop
   11a02:	b003      	add	sp, #12
   11a04:	f85d fb04 	ldr.w	pc, [sp], #4
   11a08:	1fff9400 	.word	0x1fff9400
   11a0c:	1fff93fc 	.word	0x1fff93fc

00011a10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   11a10:	b500      	push	{lr}
   11a12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a14:	f7ef feb0 	bl	1778 <Sys_GetCoreID>
   11a18:	4603      	mov	r3, r0
   11a1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   11a1c:	4a10      	ldr	r2, [pc, #64]	; (11a60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   11a1e:	9b01      	ldr	r3, [sp, #4]
   11a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a24:	2b00      	cmp	r3, #0
   11a26:	d10d      	bne.n	11a44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a28:	f7ee ff52 	bl	8d0 <Adc_schm_read_msr>
   11a2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a2e:	9b00      	ldr	r3, [sp, #0]
   11a30:	f003 0301 	and.w	r3, r3, #1
   11a34:	2b00      	cmp	r3, #0
   11a36:	d100      	bne.n	11a3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   11a3a:	490a      	ldr	r1, [pc, #40]	; (11a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   11a3c:	9b01      	ldr	r3, [sp, #4]
   11a3e:	9a00      	ldr	r2, [sp, #0]
   11a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   11a44:	4a06      	ldr	r2, [pc, #24]	; (11a60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   11a46:	9b01      	ldr	r3, [sp, #4]
   11a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a4c:	1c5a      	adds	r2, r3, #1
   11a4e:	4904      	ldr	r1, [pc, #16]	; (11a60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   11a50:	9b01      	ldr	r3, [sp, #4]
   11a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a56:	bf00      	nop
   11a58:	b003      	add	sp, #12
   11a5a:	f85d fb04 	ldr.w	pc, [sp], #4
   11a5e:	bf00      	nop
   11a60:	1fff9408 	.word	0x1fff9408
   11a64:	1fff9404 	.word	0x1fff9404

00011a68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   11a68:	b500      	push	{lr}
   11a6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a6c:	f7ef fe84 	bl	1778 <Sys_GetCoreID>
   11a70:	4603      	mov	r3, r0
   11a72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   11a74:	4a0d      	ldr	r2, [pc, #52]	; (11aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   11a76:	9b01      	ldr	r3, [sp, #4]
   11a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a7c:	1e5a      	subs	r2, r3, #1
   11a7e:	490b      	ldr	r1, [pc, #44]	; (11aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   11a80:	9b01      	ldr	r3, [sp, #4]
   11a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   11a86:	4a0a      	ldr	r2, [pc, #40]	; (11ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   11a88:	9b01      	ldr	r3, [sp, #4]
   11a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a8e:	f003 0301 	and.w	r3, r3, #1
   11a92:	2b00      	cmp	r3, #0
   11a94:	d106      	bne.n	11aa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   11a96:	4a05      	ldr	r2, [pc, #20]	; (11aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   11a98:	9b01      	ldr	r3, [sp, #4]
   11a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a9e:	2b00      	cmp	r3, #0
   11aa0:	d100      	bne.n	11aa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11aa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11aa4:	bf00      	nop
   11aa6:	b003      	add	sp, #12
   11aa8:	f85d fb04 	ldr.w	pc, [sp], #4
   11aac:	1fff9408 	.word	0x1fff9408
   11ab0:	1fff9404 	.word	0x1fff9404

00011ab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   11ab4:	b500      	push	{lr}
   11ab6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ab8:	f7ef fe5e 	bl	1778 <Sys_GetCoreID>
   11abc:	4603      	mov	r3, r0
   11abe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   11ac0:	4a10      	ldr	r2, [pc, #64]	; (11b04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   11ac2:	9b01      	ldr	r3, [sp, #4]
   11ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ac8:	2b00      	cmp	r3, #0
   11aca:	d10d      	bne.n	11ae8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11acc:	f7ee ff00 	bl	8d0 <Adc_schm_read_msr>
   11ad0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ad2:	9b00      	ldr	r3, [sp, #0]
   11ad4:	f003 0301 	and.w	r3, r3, #1
   11ad8:	2b00      	cmp	r3, #0
   11ada:	d100      	bne.n	11ade <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11adc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   11ade:	490a      	ldr	r1, [pc, #40]	; (11b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   11ae0:	9b01      	ldr	r3, [sp, #4]
   11ae2:	9a00      	ldr	r2, [sp, #0]
   11ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   11ae8:	4a06      	ldr	r2, [pc, #24]	; (11b04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   11aea:	9b01      	ldr	r3, [sp, #4]
   11aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11af0:	1c5a      	adds	r2, r3, #1
   11af2:	4904      	ldr	r1, [pc, #16]	; (11b04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   11af4:	9b01      	ldr	r3, [sp, #4]
   11af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11afa:	bf00      	nop
   11afc:	b003      	add	sp, #12
   11afe:	f85d fb04 	ldr.w	pc, [sp], #4
   11b02:	bf00      	nop
   11b04:	1fff9410 	.word	0x1fff9410
   11b08:	1fff940c 	.word	0x1fff940c

00011b0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   11b0c:	b500      	push	{lr}
   11b0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b10:	f7ef fe32 	bl	1778 <Sys_GetCoreID>
   11b14:	4603      	mov	r3, r0
   11b16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   11b18:	4a0d      	ldr	r2, [pc, #52]	; (11b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   11b1a:	9b01      	ldr	r3, [sp, #4]
   11b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b20:	1e5a      	subs	r2, r3, #1
   11b22:	490b      	ldr	r1, [pc, #44]	; (11b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   11b24:	9b01      	ldr	r3, [sp, #4]
   11b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   11b2a:	4a0a      	ldr	r2, [pc, #40]	; (11b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   11b2c:	9b01      	ldr	r3, [sp, #4]
   11b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b32:	f003 0301 	and.w	r3, r3, #1
   11b36:	2b00      	cmp	r3, #0
   11b38:	d106      	bne.n	11b48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   11b3a:	4a05      	ldr	r2, [pc, #20]	; (11b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   11b3c:	9b01      	ldr	r3, [sp, #4]
   11b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b42:	2b00      	cmp	r3, #0
   11b44:	d100      	bne.n	11b48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b48:	bf00      	nop
   11b4a:	b003      	add	sp, #12
   11b4c:	f85d fb04 	ldr.w	pc, [sp], #4
   11b50:	1fff9410 	.word	0x1fff9410
   11b54:	1fff940c 	.word	0x1fff940c

00011b58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   11b58:	b500      	push	{lr}
   11b5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b5c:	f7ef fe0c 	bl	1778 <Sys_GetCoreID>
   11b60:	4603      	mov	r3, r0
   11b62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   11b64:	4a10      	ldr	r2, [pc, #64]	; (11ba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   11b66:	9b01      	ldr	r3, [sp, #4]
   11b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b6c:	2b00      	cmp	r3, #0
   11b6e:	d10d      	bne.n	11b8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b70:	f7ee feae 	bl	8d0 <Adc_schm_read_msr>
   11b74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b76:	9b00      	ldr	r3, [sp, #0]
   11b78:	f003 0301 	and.w	r3, r3, #1
   11b7c:	2b00      	cmp	r3, #0
   11b7e:	d100      	bne.n	11b82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   11b82:	490a      	ldr	r1, [pc, #40]	; (11bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   11b84:	9b01      	ldr	r3, [sp, #4]
   11b86:	9a00      	ldr	r2, [sp, #0]
   11b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   11b8c:	4a06      	ldr	r2, [pc, #24]	; (11ba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   11b8e:	9b01      	ldr	r3, [sp, #4]
   11b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b94:	1c5a      	adds	r2, r3, #1
   11b96:	4904      	ldr	r1, [pc, #16]	; (11ba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   11b98:	9b01      	ldr	r3, [sp, #4]
   11b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b9e:	bf00      	nop
   11ba0:	b003      	add	sp, #12
   11ba2:	f85d fb04 	ldr.w	pc, [sp], #4
   11ba6:	bf00      	nop
   11ba8:	1fff9418 	.word	0x1fff9418
   11bac:	1fff9414 	.word	0x1fff9414

00011bb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   11bb0:	b500      	push	{lr}
   11bb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bb4:	f7ef fde0 	bl	1778 <Sys_GetCoreID>
   11bb8:	4603      	mov	r3, r0
   11bba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   11bbc:	4a0d      	ldr	r2, [pc, #52]	; (11bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   11bbe:	9b01      	ldr	r3, [sp, #4]
   11bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bc4:	1e5a      	subs	r2, r3, #1
   11bc6:	490b      	ldr	r1, [pc, #44]	; (11bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   11bc8:	9b01      	ldr	r3, [sp, #4]
   11bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   11bce:	4a0a      	ldr	r2, [pc, #40]	; (11bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   11bd0:	9b01      	ldr	r3, [sp, #4]
   11bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bd6:	f003 0301 	and.w	r3, r3, #1
   11bda:	2b00      	cmp	r3, #0
   11bdc:	d106      	bne.n	11bec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   11bde:	4a05      	ldr	r2, [pc, #20]	; (11bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   11be0:	9b01      	ldr	r3, [sp, #4]
   11be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11be6:	2b00      	cmp	r3, #0
   11be8:	d100      	bne.n	11bec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11bea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11bec:	bf00      	nop
   11bee:	b003      	add	sp, #12
   11bf0:	f85d fb04 	ldr.w	pc, [sp], #4
   11bf4:	1fff9418 	.word	0x1fff9418
   11bf8:	1fff9414 	.word	0x1fff9414

00011bfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   11bfc:	b500      	push	{lr}
   11bfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c00:	f7ef fdba 	bl	1778 <Sys_GetCoreID>
   11c04:	4603      	mov	r3, r0
   11c06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   11c08:	4a10      	ldr	r2, [pc, #64]	; (11c4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   11c0a:	9b01      	ldr	r3, [sp, #4]
   11c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c10:	2b00      	cmp	r3, #0
   11c12:	d10d      	bne.n	11c30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c14:	f7ee fe5c 	bl	8d0 <Adc_schm_read_msr>
   11c18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c1a:	9b00      	ldr	r3, [sp, #0]
   11c1c:	f003 0301 	and.w	r3, r3, #1
   11c20:	2b00      	cmp	r3, #0
   11c22:	d100      	bne.n	11c26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   11c26:	490a      	ldr	r1, [pc, #40]	; (11c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   11c28:	9b01      	ldr	r3, [sp, #4]
   11c2a:	9a00      	ldr	r2, [sp, #0]
   11c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   11c30:	4a06      	ldr	r2, [pc, #24]	; (11c4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   11c32:	9b01      	ldr	r3, [sp, #4]
   11c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c38:	1c5a      	adds	r2, r3, #1
   11c3a:	4904      	ldr	r1, [pc, #16]	; (11c4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   11c3c:	9b01      	ldr	r3, [sp, #4]
   11c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c42:	bf00      	nop
   11c44:	b003      	add	sp, #12
   11c46:	f85d fb04 	ldr.w	pc, [sp], #4
   11c4a:	bf00      	nop
   11c4c:	1fff9420 	.word	0x1fff9420
   11c50:	1fff941c 	.word	0x1fff941c

00011c54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   11c54:	b500      	push	{lr}
   11c56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c58:	f7ef fd8e 	bl	1778 <Sys_GetCoreID>
   11c5c:	4603      	mov	r3, r0
   11c5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   11c60:	4a0d      	ldr	r2, [pc, #52]	; (11c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11c62:	9b01      	ldr	r3, [sp, #4]
   11c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c68:	1e5a      	subs	r2, r3, #1
   11c6a:	490b      	ldr	r1, [pc, #44]	; (11c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11c6c:	9b01      	ldr	r3, [sp, #4]
   11c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   11c72:	4a0a      	ldr	r2, [pc, #40]	; (11c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   11c74:	9b01      	ldr	r3, [sp, #4]
   11c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c7a:	f003 0301 	and.w	r3, r3, #1
   11c7e:	2b00      	cmp	r3, #0
   11c80:	d106      	bne.n	11c90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   11c82:	4a05      	ldr	r2, [pc, #20]	; (11c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11c84:	9b01      	ldr	r3, [sp, #4]
   11c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c8a:	2b00      	cmp	r3, #0
   11c8c:	d100      	bne.n	11c90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c90:	bf00      	nop
   11c92:	b003      	add	sp, #12
   11c94:	f85d fb04 	ldr.w	pc, [sp], #4
   11c98:	1fff9420 	.word	0x1fff9420
   11c9c:	1fff941c 	.word	0x1fff941c

00011ca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   11ca0:	b500      	push	{lr}
   11ca2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ca4:	f7ef fd68 	bl	1778 <Sys_GetCoreID>
   11ca8:	4603      	mov	r3, r0
   11caa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   11cac:	4a10      	ldr	r2, [pc, #64]	; (11cf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11cae:	9b01      	ldr	r3, [sp, #4]
   11cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cb4:	2b00      	cmp	r3, #0
   11cb6:	d10d      	bne.n	11cd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11cb8:	f7ee fe0a 	bl	8d0 <Adc_schm_read_msr>
   11cbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11cbe:	9b00      	ldr	r3, [sp, #0]
   11cc0:	f003 0301 	and.w	r3, r3, #1
   11cc4:	2b00      	cmp	r3, #0
   11cc6:	d100      	bne.n	11cca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11cc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   11cca:	490a      	ldr	r1, [pc, #40]	; (11cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   11ccc:	9b01      	ldr	r3, [sp, #4]
   11cce:	9a00      	ldr	r2, [sp, #0]
   11cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   11cd4:	4a06      	ldr	r2, [pc, #24]	; (11cf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11cd6:	9b01      	ldr	r3, [sp, #4]
   11cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cdc:	1c5a      	adds	r2, r3, #1
   11cde:	4904      	ldr	r1, [pc, #16]	; (11cf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11ce0:	9b01      	ldr	r3, [sp, #4]
   11ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ce6:	bf00      	nop
   11ce8:	b003      	add	sp, #12
   11cea:	f85d fb04 	ldr.w	pc, [sp], #4
   11cee:	bf00      	nop
   11cf0:	1fff9428 	.word	0x1fff9428
   11cf4:	1fff9424 	.word	0x1fff9424

00011cf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   11cf8:	b500      	push	{lr}
   11cfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cfc:	f7ef fd3c 	bl	1778 <Sys_GetCoreID>
   11d00:	4603      	mov	r3, r0
   11d02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   11d04:	4a0d      	ldr	r2, [pc, #52]	; (11d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11d06:	9b01      	ldr	r3, [sp, #4]
   11d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d0c:	1e5a      	subs	r2, r3, #1
   11d0e:	490b      	ldr	r1, [pc, #44]	; (11d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11d10:	9b01      	ldr	r3, [sp, #4]
   11d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   11d16:	4a0a      	ldr	r2, [pc, #40]	; (11d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   11d18:	9b01      	ldr	r3, [sp, #4]
   11d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d1e:	f003 0301 	and.w	r3, r3, #1
   11d22:	2b00      	cmp	r3, #0
   11d24:	d106      	bne.n	11d34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   11d26:	4a05      	ldr	r2, [pc, #20]	; (11d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11d28:	9b01      	ldr	r3, [sp, #4]
   11d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d2e:	2b00      	cmp	r3, #0
   11d30:	d100      	bne.n	11d34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d34:	bf00      	nop
   11d36:	b003      	add	sp, #12
   11d38:	f85d fb04 	ldr.w	pc, [sp], #4
   11d3c:	1fff9428 	.word	0x1fff9428
   11d40:	1fff9424 	.word	0x1fff9424

00011d44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   11d44:	b500      	push	{lr}
   11d46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d48:	f7ef fd16 	bl	1778 <Sys_GetCoreID>
   11d4c:	4603      	mov	r3, r0
   11d4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   11d50:	4a10      	ldr	r2, [pc, #64]	; (11d94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11d52:	9b01      	ldr	r3, [sp, #4]
   11d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d58:	2b00      	cmp	r3, #0
   11d5a:	d10d      	bne.n	11d78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d5c:	f7ee fdb8 	bl	8d0 <Adc_schm_read_msr>
   11d60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d62:	9b00      	ldr	r3, [sp, #0]
   11d64:	f003 0301 	and.w	r3, r3, #1
   11d68:	2b00      	cmp	r3, #0
   11d6a:	d100      	bne.n	11d6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   11d6e:	490a      	ldr	r1, [pc, #40]	; (11d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   11d70:	9b01      	ldr	r3, [sp, #4]
   11d72:	9a00      	ldr	r2, [sp, #0]
   11d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   11d78:	4a06      	ldr	r2, [pc, #24]	; (11d94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11d7a:	9b01      	ldr	r3, [sp, #4]
   11d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d80:	1c5a      	adds	r2, r3, #1
   11d82:	4904      	ldr	r1, [pc, #16]	; (11d94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11d84:	9b01      	ldr	r3, [sp, #4]
   11d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d8a:	bf00      	nop
   11d8c:	b003      	add	sp, #12
   11d8e:	f85d fb04 	ldr.w	pc, [sp], #4
   11d92:	bf00      	nop
   11d94:	1fff9430 	.word	0x1fff9430
   11d98:	1fff942c 	.word	0x1fff942c

00011d9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   11d9c:	b500      	push	{lr}
   11d9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11da0:	f7ef fcea 	bl	1778 <Sys_GetCoreID>
   11da4:	4603      	mov	r3, r0
   11da6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   11da8:	4a0d      	ldr	r2, [pc, #52]	; (11de0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11daa:	9b01      	ldr	r3, [sp, #4]
   11dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11db0:	1e5a      	subs	r2, r3, #1
   11db2:	490b      	ldr	r1, [pc, #44]	; (11de0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11db4:	9b01      	ldr	r3, [sp, #4]
   11db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   11dba:	4a0a      	ldr	r2, [pc, #40]	; (11de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   11dbc:	9b01      	ldr	r3, [sp, #4]
   11dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dc2:	f003 0301 	and.w	r3, r3, #1
   11dc6:	2b00      	cmp	r3, #0
   11dc8:	d106      	bne.n	11dd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   11dca:	4a05      	ldr	r2, [pc, #20]	; (11de0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11dcc:	9b01      	ldr	r3, [sp, #4]
   11dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dd2:	2b00      	cmp	r3, #0
   11dd4:	d100      	bne.n	11dd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11dd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11dd8:	bf00      	nop
   11dda:	b003      	add	sp, #12
   11ddc:	f85d fb04 	ldr.w	pc, [sp], #4
   11de0:	1fff9430 	.word	0x1fff9430
   11de4:	1fff942c 	.word	0x1fff942c

00011de8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   11de8:	b500      	push	{lr}
   11dea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11dec:	f7ef fcc4 	bl	1778 <Sys_GetCoreID>
   11df0:	4603      	mov	r3, r0
   11df2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   11df4:	4a10      	ldr	r2, [pc, #64]	; (11e38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11df6:	9b01      	ldr	r3, [sp, #4]
   11df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dfc:	2b00      	cmp	r3, #0
   11dfe:	d10d      	bne.n	11e1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e00:	f7ee fd66 	bl	8d0 <Adc_schm_read_msr>
   11e04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e06:	9b00      	ldr	r3, [sp, #0]
   11e08:	f003 0301 	and.w	r3, r3, #1
   11e0c:	2b00      	cmp	r3, #0
   11e0e:	d100      	bne.n	11e12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   11e12:	490a      	ldr	r1, [pc, #40]	; (11e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   11e14:	9b01      	ldr	r3, [sp, #4]
   11e16:	9a00      	ldr	r2, [sp, #0]
   11e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   11e1c:	4a06      	ldr	r2, [pc, #24]	; (11e38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11e1e:	9b01      	ldr	r3, [sp, #4]
   11e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e24:	1c5a      	adds	r2, r3, #1
   11e26:	4904      	ldr	r1, [pc, #16]	; (11e38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11e28:	9b01      	ldr	r3, [sp, #4]
   11e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e2e:	bf00      	nop
   11e30:	b003      	add	sp, #12
   11e32:	f85d fb04 	ldr.w	pc, [sp], #4
   11e36:	bf00      	nop
   11e38:	1fff9438 	.word	0x1fff9438
   11e3c:	1fff9434 	.word	0x1fff9434

00011e40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   11e40:	b500      	push	{lr}
   11e42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e44:	f7ef fc98 	bl	1778 <Sys_GetCoreID>
   11e48:	4603      	mov	r3, r0
   11e4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   11e4c:	4a0d      	ldr	r2, [pc, #52]	; (11e84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11e4e:	9b01      	ldr	r3, [sp, #4]
   11e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e54:	1e5a      	subs	r2, r3, #1
   11e56:	490b      	ldr	r1, [pc, #44]	; (11e84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11e58:	9b01      	ldr	r3, [sp, #4]
   11e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   11e5e:	4a0a      	ldr	r2, [pc, #40]	; (11e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   11e60:	9b01      	ldr	r3, [sp, #4]
   11e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e66:	f003 0301 	and.w	r3, r3, #1
   11e6a:	2b00      	cmp	r3, #0
   11e6c:	d106      	bne.n	11e7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   11e6e:	4a05      	ldr	r2, [pc, #20]	; (11e84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11e70:	9b01      	ldr	r3, [sp, #4]
   11e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e76:	2b00      	cmp	r3, #0
   11e78:	d100      	bne.n	11e7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e7c:	bf00      	nop
   11e7e:	b003      	add	sp, #12
   11e80:	f85d fb04 	ldr.w	pc, [sp], #4
   11e84:	1fff9438 	.word	0x1fff9438
   11e88:	1fff9434 	.word	0x1fff9434

00011e8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   11e8c:	b500      	push	{lr}
   11e8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e90:	f7ef fc72 	bl	1778 <Sys_GetCoreID>
   11e94:	4603      	mov	r3, r0
   11e96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   11e98:	4a10      	ldr	r2, [pc, #64]	; (11edc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11e9a:	9b01      	ldr	r3, [sp, #4]
   11e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ea0:	2b00      	cmp	r3, #0
   11ea2:	d10d      	bne.n	11ec0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ea4:	f7ee fd14 	bl	8d0 <Adc_schm_read_msr>
   11ea8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11eaa:	9b00      	ldr	r3, [sp, #0]
   11eac:	f003 0301 	and.w	r3, r3, #1
   11eb0:	2b00      	cmp	r3, #0
   11eb2:	d100      	bne.n	11eb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11eb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   11eb6:	490a      	ldr	r1, [pc, #40]	; (11ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   11eb8:	9b01      	ldr	r3, [sp, #4]
   11eba:	9a00      	ldr	r2, [sp, #0]
   11ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   11ec0:	4a06      	ldr	r2, [pc, #24]	; (11edc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11ec2:	9b01      	ldr	r3, [sp, #4]
   11ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ec8:	1c5a      	adds	r2, r3, #1
   11eca:	4904      	ldr	r1, [pc, #16]	; (11edc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11ecc:	9b01      	ldr	r3, [sp, #4]
   11ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ed2:	bf00      	nop
   11ed4:	b003      	add	sp, #12
   11ed6:	f85d fb04 	ldr.w	pc, [sp], #4
   11eda:	bf00      	nop
   11edc:	1fff9440 	.word	0x1fff9440
   11ee0:	1fff943c 	.word	0x1fff943c

00011ee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   11ee4:	b500      	push	{lr}
   11ee6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ee8:	f7ef fc46 	bl	1778 <Sys_GetCoreID>
   11eec:	4603      	mov	r3, r0
   11eee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   11ef0:	4a0d      	ldr	r2, [pc, #52]	; (11f28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11ef2:	9b01      	ldr	r3, [sp, #4]
   11ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ef8:	1e5a      	subs	r2, r3, #1
   11efa:	490b      	ldr	r1, [pc, #44]	; (11f28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11efc:	9b01      	ldr	r3, [sp, #4]
   11efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   11f02:	4a0a      	ldr	r2, [pc, #40]	; (11f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   11f04:	9b01      	ldr	r3, [sp, #4]
   11f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f0a:	f003 0301 	and.w	r3, r3, #1
   11f0e:	2b00      	cmp	r3, #0
   11f10:	d106      	bne.n	11f20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   11f12:	4a05      	ldr	r2, [pc, #20]	; (11f28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11f14:	9b01      	ldr	r3, [sp, #4]
   11f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f1a:	2b00      	cmp	r3, #0
   11f1c:	d100      	bne.n	11f20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f20:	bf00      	nop
   11f22:	b003      	add	sp, #12
   11f24:	f85d fb04 	ldr.w	pc, [sp], #4
   11f28:	1fff9440 	.word	0x1fff9440
   11f2c:	1fff943c 	.word	0x1fff943c

00011f30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   11f30:	b500      	push	{lr}
   11f32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f34:	f7ef fc20 	bl	1778 <Sys_GetCoreID>
   11f38:	4603      	mov	r3, r0
   11f3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   11f3c:	4a10      	ldr	r2, [pc, #64]	; (11f80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11f3e:	9b01      	ldr	r3, [sp, #4]
   11f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f44:	2b00      	cmp	r3, #0
   11f46:	d10d      	bne.n	11f64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f48:	f7ee fcc2 	bl	8d0 <Adc_schm_read_msr>
   11f4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f4e:	9b00      	ldr	r3, [sp, #0]
   11f50:	f003 0301 	and.w	r3, r3, #1
   11f54:	2b00      	cmp	r3, #0
   11f56:	d100      	bne.n	11f5a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   11f5a:	490a      	ldr	r1, [pc, #40]	; (11f84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   11f5c:	9b01      	ldr	r3, [sp, #4]
   11f5e:	9a00      	ldr	r2, [sp, #0]
   11f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   11f64:	4a06      	ldr	r2, [pc, #24]	; (11f80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11f66:	9b01      	ldr	r3, [sp, #4]
   11f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f6c:	1c5a      	adds	r2, r3, #1
   11f6e:	4904      	ldr	r1, [pc, #16]	; (11f80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11f70:	9b01      	ldr	r3, [sp, #4]
   11f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f76:	bf00      	nop
   11f78:	b003      	add	sp, #12
   11f7a:	f85d fb04 	ldr.w	pc, [sp], #4
   11f7e:	bf00      	nop
   11f80:	1fff9448 	.word	0x1fff9448
   11f84:	1fff9444 	.word	0x1fff9444

00011f88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   11f88:	b500      	push	{lr}
   11f8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f8c:	f7ef fbf4 	bl	1778 <Sys_GetCoreID>
   11f90:	4603      	mov	r3, r0
   11f92:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   11f94:	4a0d      	ldr	r2, [pc, #52]	; (11fcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11f96:	9b01      	ldr	r3, [sp, #4]
   11f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f9c:	1e5a      	subs	r2, r3, #1
   11f9e:	490b      	ldr	r1, [pc, #44]	; (11fcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11fa0:	9b01      	ldr	r3, [sp, #4]
   11fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   11fa6:	4a0a      	ldr	r2, [pc, #40]	; (11fd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   11fa8:	9b01      	ldr	r3, [sp, #4]
   11faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fae:	f003 0301 	and.w	r3, r3, #1
   11fb2:	2b00      	cmp	r3, #0
   11fb4:	d106      	bne.n	11fc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   11fb6:	4a05      	ldr	r2, [pc, #20]	; (11fcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11fb8:	9b01      	ldr	r3, [sp, #4]
   11fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fbe:	2b00      	cmp	r3, #0
   11fc0:	d100      	bne.n	11fc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11fc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11fc4:	bf00      	nop
   11fc6:	b003      	add	sp, #12
   11fc8:	f85d fb04 	ldr.w	pc, [sp], #4
   11fcc:	1fff9448 	.word	0x1fff9448
   11fd0:	1fff9444 	.word	0x1fff9444

00011fd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   11fd4:	b500      	push	{lr}
   11fd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fd8:	f7ef fbce 	bl	1778 <Sys_GetCoreID>
   11fdc:	4603      	mov	r3, r0
   11fde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   11fe0:	4a10      	ldr	r2, [pc, #64]	; (12024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   11fe2:	9b01      	ldr	r3, [sp, #4]
   11fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fe8:	2b00      	cmp	r3, #0
   11fea:	d10d      	bne.n	12008 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11fec:	f7ee fc70 	bl	8d0 <Adc_schm_read_msr>
   11ff0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ff2:	9b00      	ldr	r3, [sp, #0]
   11ff4:	f003 0301 	and.w	r3, r3, #1
   11ff8:	2b00      	cmp	r3, #0
   11ffa:	d100      	bne.n	11ffe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ffc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   11ffe:	490a      	ldr	r1, [pc, #40]	; (12028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   12000:	9b01      	ldr	r3, [sp, #4]
   12002:	9a00      	ldr	r2, [sp, #0]
   12004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   12008:	4a06      	ldr	r2, [pc, #24]	; (12024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   1200a:	9b01      	ldr	r3, [sp, #4]
   1200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12010:	1c5a      	adds	r2, r3, #1
   12012:	4904      	ldr	r1, [pc, #16]	; (12024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12014:	9b01      	ldr	r3, [sp, #4]
   12016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1201a:	bf00      	nop
   1201c:	b003      	add	sp, #12
   1201e:	f85d fb04 	ldr.w	pc, [sp], #4
   12022:	bf00      	nop
   12024:	1fff9450 	.word	0x1fff9450
   12028:	1fff944c 	.word	0x1fff944c

0001202c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   1202c:	b500      	push	{lr}
   1202e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12030:	f7ef fba2 	bl	1778 <Sys_GetCoreID>
   12034:	4603      	mov	r3, r0
   12036:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   12038:	4a0d      	ldr	r2, [pc, #52]	; (12070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   1203a:	9b01      	ldr	r3, [sp, #4]
   1203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12040:	1e5a      	subs	r2, r3, #1
   12042:	490b      	ldr	r1, [pc, #44]	; (12070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12044:	9b01      	ldr	r3, [sp, #4]
   12046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   1204a:	4a0a      	ldr	r2, [pc, #40]	; (12074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   1204c:	9b01      	ldr	r3, [sp, #4]
   1204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12052:	f003 0301 	and.w	r3, r3, #1
   12056:	2b00      	cmp	r3, #0
   12058:	d106      	bne.n	12068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   1205a:	4a05      	ldr	r2, [pc, #20]	; (12070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   1205c:	9b01      	ldr	r3, [sp, #4]
   1205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12062:	2b00      	cmp	r3, #0
   12064:	d100      	bne.n	12068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12066:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12068:	bf00      	nop
   1206a:	b003      	add	sp, #12
   1206c:	f85d fb04 	ldr.w	pc, [sp], #4
   12070:	1fff9450 	.word	0x1fff9450
   12074:	1fff944c 	.word	0x1fff944c

00012078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12078:	b500      	push	{lr}
   1207a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1207c:	f7ef fb7c 	bl	1778 <Sys_GetCoreID>
   12080:	4603      	mov	r3, r0
   12082:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   12084:	4a10      	ldr	r2, [pc, #64]	; (120c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   12086:	9b01      	ldr	r3, [sp, #4]
   12088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1208c:	2b00      	cmp	r3, #0
   1208e:	d10d      	bne.n	120ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12090:	f7ee fc1e 	bl	8d0 <Adc_schm_read_msr>
   12094:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12096:	9b00      	ldr	r3, [sp, #0]
   12098:	f003 0301 	and.w	r3, r3, #1
   1209c:	2b00      	cmp	r3, #0
   1209e:	d100      	bne.n	120a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   120a2:	490a      	ldr	r1, [pc, #40]	; (120cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   120a4:	9b01      	ldr	r3, [sp, #4]
   120a6:	9a00      	ldr	r2, [sp, #0]
   120a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   120ac:	4a06      	ldr	r2, [pc, #24]	; (120c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   120ae:	9b01      	ldr	r3, [sp, #4]
   120b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120b4:	1c5a      	adds	r2, r3, #1
   120b6:	4904      	ldr	r1, [pc, #16]	; (120c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   120b8:	9b01      	ldr	r3, [sp, #4]
   120ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   120be:	bf00      	nop
   120c0:	b003      	add	sp, #12
   120c2:	f85d fb04 	ldr.w	pc, [sp], #4
   120c6:	bf00      	nop
   120c8:	1fff9458 	.word	0x1fff9458
   120cc:	1fff9454 	.word	0x1fff9454

000120d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   120d0:	b500      	push	{lr}
   120d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120d4:	f7ef fb50 	bl	1778 <Sys_GetCoreID>
   120d8:	4603      	mov	r3, r0
   120da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   120dc:	4a0d      	ldr	r2, [pc, #52]	; (12114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   120de:	9b01      	ldr	r3, [sp, #4]
   120e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120e4:	1e5a      	subs	r2, r3, #1
   120e6:	490b      	ldr	r1, [pc, #44]	; (12114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   120e8:	9b01      	ldr	r3, [sp, #4]
   120ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   120ee:	4a0a      	ldr	r2, [pc, #40]	; (12118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   120f0:	9b01      	ldr	r3, [sp, #4]
   120f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120f6:	f003 0301 	and.w	r3, r3, #1
   120fa:	2b00      	cmp	r3, #0
   120fc:	d106      	bne.n	1210c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   120fe:	4a05      	ldr	r2, [pc, #20]	; (12114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12100:	9b01      	ldr	r3, [sp, #4]
   12102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12106:	2b00      	cmp	r3, #0
   12108:	d100      	bne.n	1210c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1210a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1210c:	bf00      	nop
   1210e:	b003      	add	sp, #12
   12110:	f85d fb04 	ldr.w	pc, [sp], #4
   12114:	1fff9458 	.word	0x1fff9458
   12118:	1fff9454 	.word	0x1fff9454

0001211c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   1211c:	b500      	push	{lr}
   1211e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12120:	f7ef fb2a 	bl	1778 <Sys_GetCoreID>
   12124:	4603      	mov	r3, r0
   12126:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   12128:	4a10      	ldr	r2, [pc, #64]	; (1216c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   1212a:	9b01      	ldr	r3, [sp, #4]
   1212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12130:	2b00      	cmp	r3, #0
   12132:	d10d      	bne.n	12150 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12134:	f7ee fbcc 	bl	8d0 <Adc_schm_read_msr>
   12138:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1213a:	9b00      	ldr	r3, [sp, #0]
   1213c:	f003 0301 	and.w	r3, r3, #1
   12140:	2b00      	cmp	r3, #0
   12142:	d100      	bne.n	12146 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12144:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   12146:	490a      	ldr	r1, [pc, #40]	; (12170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   12148:	9b01      	ldr	r3, [sp, #4]
   1214a:	9a00      	ldr	r2, [sp, #0]
   1214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   12150:	4a06      	ldr	r2, [pc, #24]	; (1216c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12152:	9b01      	ldr	r3, [sp, #4]
   12154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12158:	1c5a      	adds	r2, r3, #1
   1215a:	4904      	ldr	r1, [pc, #16]	; (1216c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   1215c:	9b01      	ldr	r3, [sp, #4]
   1215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12162:	bf00      	nop
   12164:	b003      	add	sp, #12
   12166:	f85d fb04 	ldr.w	pc, [sp], #4
   1216a:	bf00      	nop
   1216c:	1fff9460 	.word	0x1fff9460
   12170:	1fff945c 	.word	0x1fff945c

00012174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12174:	b500      	push	{lr}
   12176:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12178:	f7ef fafe 	bl	1778 <Sys_GetCoreID>
   1217c:	4603      	mov	r3, r0
   1217e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   12180:	4a0d      	ldr	r2, [pc, #52]	; (121b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12182:	9b01      	ldr	r3, [sp, #4]
   12184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12188:	1e5a      	subs	r2, r3, #1
   1218a:	490b      	ldr	r1, [pc, #44]	; (121b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   1218c:	9b01      	ldr	r3, [sp, #4]
   1218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   12192:	4a0a      	ldr	r2, [pc, #40]	; (121bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   12194:	9b01      	ldr	r3, [sp, #4]
   12196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1219a:	f003 0301 	and.w	r3, r3, #1
   1219e:	2b00      	cmp	r3, #0
   121a0:	d106      	bne.n	121b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   121a2:	4a05      	ldr	r2, [pc, #20]	; (121b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   121a4:	9b01      	ldr	r3, [sp, #4]
   121a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121aa:	2b00      	cmp	r3, #0
   121ac:	d100      	bne.n	121b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   121ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   121b0:	bf00      	nop
   121b2:	b003      	add	sp, #12
   121b4:	f85d fb04 	ldr.w	pc, [sp], #4
   121b8:	1fff9460 	.word	0x1fff9460
   121bc:	1fff945c 	.word	0x1fff945c

000121c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   121c0:	b500      	push	{lr}
   121c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121c4:	f7ef fad8 	bl	1778 <Sys_GetCoreID>
   121c8:	4603      	mov	r3, r0
   121ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   121cc:	4a10      	ldr	r2, [pc, #64]	; (12210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   121ce:	9b01      	ldr	r3, [sp, #4]
   121d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121d4:	2b00      	cmp	r3, #0
   121d6:	d10d      	bne.n	121f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   121d8:	f7ee fb7a 	bl	8d0 <Adc_schm_read_msr>
   121dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   121de:	9b00      	ldr	r3, [sp, #0]
   121e0:	f003 0301 	and.w	r3, r3, #1
   121e4:	2b00      	cmp	r3, #0
   121e6:	d100      	bne.n	121ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   121e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   121ea:	490a      	ldr	r1, [pc, #40]	; (12214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   121ec:	9b01      	ldr	r3, [sp, #4]
   121ee:	9a00      	ldr	r2, [sp, #0]
   121f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   121f4:	4a06      	ldr	r2, [pc, #24]	; (12210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   121f6:	9b01      	ldr	r3, [sp, #4]
   121f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121fc:	1c5a      	adds	r2, r3, #1
   121fe:	4904      	ldr	r1, [pc, #16]	; (12210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12200:	9b01      	ldr	r3, [sp, #4]
   12202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12206:	bf00      	nop
   12208:	b003      	add	sp, #12
   1220a:	f85d fb04 	ldr.w	pc, [sp], #4
   1220e:	bf00      	nop
   12210:	1fff9468 	.word	0x1fff9468
   12214:	1fff9464 	.word	0x1fff9464

00012218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12218:	b500      	push	{lr}
   1221a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1221c:	f7ef faac 	bl	1778 <Sys_GetCoreID>
   12220:	4603      	mov	r3, r0
   12222:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   12224:	4a0d      	ldr	r2, [pc, #52]	; (1225c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12226:	9b01      	ldr	r3, [sp, #4]
   12228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1222c:	1e5a      	subs	r2, r3, #1
   1222e:	490b      	ldr	r1, [pc, #44]	; (1225c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12230:	9b01      	ldr	r3, [sp, #4]
   12232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   12236:	4a0a      	ldr	r2, [pc, #40]	; (12260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   12238:	9b01      	ldr	r3, [sp, #4]
   1223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1223e:	f003 0301 	and.w	r3, r3, #1
   12242:	2b00      	cmp	r3, #0
   12244:	d106      	bne.n	12254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   12246:	4a05      	ldr	r2, [pc, #20]	; (1225c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12248:	9b01      	ldr	r3, [sp, #4]
   1224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1224e:	2b00      	cmp	r3, #0
   12250:	d100      	bne.n	12254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12252:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12254:	bf00      	nop
   12256:	b003      	add	sp, #12
   12258:	f85d fb04 	ldr.w	pc, [sp], #4
   1225c:	1fff9468 	.word	0x1fff9468
   12260:	1fff9464 	.word	0x1fff9464

00012264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   12264:	b500      	push	{lr}
   12266:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12268:	f7ef fa86 	bl	1778 <Sys_GetCoreID>
   1226c:	4603      	mov	r3, r0
   1226e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   12270:	4a10      	ldr	r2, [pc, #64]	; (122b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   12272:	9b01      	ldr	r3, [sp, #4]
   12274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12278:	2b00      	cmp	r3, #0
   1227a:	d10d      	bne.n	12298 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1227c:	f7ee fb28 	bl	8d0 <Adc_schm_read_msr>
   12280:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12282:	9b00      	ldr	r3, [sp, #0]
   12284:	f003 0301 	and.w	r3, r3, #1
   12288:	2b00      	cmp	r3, #0
   1228a:	d100      	bne.n	1228e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1228c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   1228e:	490a      	ldr	r1, [pc, #40]	; (122b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   12290:	9b01      	ldr	r3, [sp, #4]
   12292:	9a00      	ldr	r2, [sp, #0]
   12294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   12298:	4a06      	ldr	r2, [pc, #24]	; (122b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1229a:	9b01      	ldr	r3, [sp, #4]
   1229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122a0:	1c5a      	adds	r2, r3, #1
   122a2:	4904      	ldr	r1, [pc, #16]	; (122b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   122a4:	9b01      	ldr	r3, [sp, #4]
   122a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   122aa:	bf00      	nop
   122ac:	b003      	add	sp, #12
   122ae:	f85d fb04 	ldr.w	pc, [sp], #4
   122b2:	bf00      	nop
   122b4:	1fff9470 	.word	0x1fff9470
   122b8:	1fff946c 	.word	0x1fff946c

000122bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   122bc:	b500      	push	{lr}
   122be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122c0:	f7ef fa5a 	bl	1778 <Sys_GetCoreID>
   122c4:	4603      	mov	r3, r0
   122c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   122c8:	4a0d      	ldr	r2, [pc, #52]	; (12300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   122ca:	9b01      	ldr	r3, [sp, #4]
   122cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122d0:	1e5a      	subs	r2, r3, #1
   122d2:	490b      	ldr	r1, [pc, #44]	; (12300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   122d4:	9b01      	ldr	r3, [sp, #4]
   122d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   122da:	4a0a      	ldr	r2, [pc, #40]	; (12304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   122dc:	9b01      	ldr	r3, [sp, #4]
   122de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122e2:	f003 0301 	and.w	r3, r3, #1
   122e6:	2b00      	cmp	r3, #0
   122e8:	d106      	bne.n	122f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   122ea:	4a05      	ldr	r2, [pc, #20]	; (12300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   122ec:	9b01      	ldr	r3, [sp, #4]
   122ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122f2:	2b00      	cmp	r3, #0
   122f4:	d100      	bne.n	122f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   122f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   122f8:	bf00      	nop
   122fa:	b003      	add	sp, #12
   122fc:	f85d fb04 	ldr.w	pc, [sp], #4
   12300:	1fff9470 	.word	0x1fff9470
   12304:	1fff946c 	.word	0x1fff946c

00012308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   12308:	b500      	push	{lr}
   1230a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1230c:	f7ef fa34 	bl	1778 <Sys_GetCoreID>
   12310:	4603      	mov	r3, r0
   12312:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   12314:	4a10      	ldr	r2, [pc, #64]	; (12358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   12316:	9b01      	ldr	r3, [sp, #4]
   12318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1231c:	2b00      	cmp	r3, #0
   1231e:	d10d      	bne.n	1233c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12320:	f7ee fad6 	bl	8d0 <Adc_schm_read_msr>
   12324:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12326:	9b00      	ldr	r3, [sp, #0]
   12328:	f003 0301 	and.w	r3, r3, #1
   1232c:	2b00      	cmp	r3, #0
   1232e:	d100      	bne.n	12332 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12330:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   12332:	490a      	ldr	r1, [pc, #40]	; (1235c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   12334:	9b01      	ldr	r3, [sp, #4]
   12336:	9a00      	ldr	r2, [sp, #0]
   12338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   1233c:	4a06      	ldr	r2, [pc, #24]	; (12358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1233e:	9b01      	ldr	r3, [sp, #4]
   12340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12344:	1c5a      	adds	r2, r3, #1
   12346:	4904      	ldr	r1, [pc, #16]	; (12358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   12348:	9b01      	ldr	r3, [sp, #4]
   1234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1234e:	bf00      	nop
   12350:	b003      	add	sp, #12
   12352:	f85d fb04 	ldr.w	pc, [sp], #4
   12356:	bf00      	nop
   12358:	1fff9478 	.word	0x1fff9478
   1235c:	1fff9474 	.word	0x1fff9474

00012360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   12360:	b500      	push	{lr}
   12362:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12364:	f7ef fa08 	bl	1778 <Sys_GetCoreID>
   12368:	4603      	mov	r3, r0
   1236a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   1236c:	4a0d      	ldr	r2, [pc, #52]	; (123a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   1236e:	9b01      	ldr	r3, [sp, #4]
   12370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12374:	1e5a      	subs	r2, r3, #1
   12376:	490b      	ldr	r1, [pc, #44]	; (123a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   12378:	9b01      	ldr	r3, [sp, #4]
   1237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   1237e:	4a0a      	ldr	r2, [pc, #40]	; (123a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   12380:	9b01      	ldr	r3, [sp, #4]
   12382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12386:	f003 0301 	and.w	r3, r3, #1
   1238a:	2b00      	cmp	r3, #0
   1238c:	d106      	bne.n	1239c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   1238e:	4a05      	ldr	r2, [pc, #20]	; (123a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   12390:	9b01      	ldr	r3, [sp, #4]
   12392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12396:	2b00      	cmp	r3, #0
   12398:	d100      	bne.n	1239c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1239a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1239c:	bf00      	nop
   1239e:	b003      	add	sp, #12
   123a0:	f85d fb04 	ldr.w	pc, [sp], #4
   123a4:	1fff9478 	.word	0x1fff9478
   123a8:	1fff9474 	.word	0x1fff9474

000123ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   123ac:	b500      	push	{lr}
   123ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123b0:	f7ef f9e2 	bl	1778 <Sys_GetCoreID>
   123b4:	4603      	mov	r3, r0
   123b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   123b8:	4a10      	ldr	r2, [pc, #64]	; (123fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   123ba:	9b01      	ldr	r3, [sp, #4]
   123bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123c0:	2b00      	cmp	r3, #0
   123c2:	d10d      	bne.n	123e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   123c4:	f7ee fa84 	bl	8d0 <Adc_schm_read_msr>
   123c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   123ca:	9b00      	ldr	r3, [sp, #0]
   123cc:	f003 0301 	and.w	r3, r3, #1
   123d0:	2b00      	cmp	r3, #0
   123d2:	d100      	bne.n	123d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   123d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   123d6:	490a      	ldr	r1, [pc, #40]	; (12400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   123d8:	9b01      	ldr	r3, [sp, #4]
   123da:	9a00      	ldr	r2, [sp, #0]
   123dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   123e0:	4a06      	ldr	r2, [pc, #24]	; (123fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   123e2:	9b01      	ldr	r3, [sp, #4]
   123e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123e8:	1c5a      	adds	r2, r3, #1
   123ea:	4904      	ldr	r1, [pc, #16]	; (123fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   123ec:	9b01      	ldr	r3, [sp, #4]
   123ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   123f2:	bf00      	nop
   123f4:	b003      	add	sp, #12
   123f6:	f85d fb04 	ldr.w	pc, [sp], #4
   123fa:	bf00      	nop
   123fc:	1fff9480 	.word	0x1fff9480
   12400:	1fff947c 	.word	0x1fff947c

00012404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   12404:	b500      	push	{lr}
   12406:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12408:	f7ef f9b6 	bl	1778 <Sys_GetCoreID>
   1240c:	4603      	mov	r3, r0
   1240e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   12410:	4a0d      	ldr	r2, [pc, #52]	; (12448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   12412:	9b01      	ldr	r3, [sp, #4]
   12414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12418:	1e5a      	subs	r2, r3, #1
   1241a:	490b      	ldr	r1, [pc, #44]	; (12448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1241c:	9b01      	ldr	r3, [sp, #4]
   1241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   12422:	4a0a      	ldr	r2, [pc, #40]	; (1244c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   12424:	9b01      	ldr	r3, [sp, #4]
   12426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1242a:	f003 0301 	and.w	r3, r3, #1
   1242e:	2b00      	cmp	r3, #0
   12430:	d106      	bne.n	12440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   12432:	4a05      	ldr	r2, [pc, #20]	; (12448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   12434:	9b01      	ldr	r3, [sp, #4]
   12436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1243a:	2b00      	cmp	r3, #0
   1243c:	d100      	bne.n	12440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1243e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12440:	bf00      	nop
   12442:	b003      	add	sp, #12
   12444:	f85d fb04 	ldr.w	pc, [sp], #4
   12448:	1fff9480 	.word	0x1fff9480
   1244c:	1fff947c 	.word	0x1fff947c

00012450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   12450:	b500      	push	{lr}
   12452:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12454:	f7ef f990 	bl	1778 <Sys_GetCoreID>
   12458:	4603      	mov	r3, r0
   1245a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   1245c:	4a10      	ldr	r2, [pc, #64]	; (124a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1245e:	9b01      	ldr	r3, [sp, #4]
   12460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12464:	2b00      	cmp	r3, #0
   12466:	d10d      	bne.n	12484 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12468:	f7ee fa32 	bl	8d0 <Adc_schm_read_msr>
   1246c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1246e:	9b00      	ldr	r3, [sp, #0]
   12470:	f003 0301 	and.w	r3, r3, #1
   12474:	2b00      	cmp	r3, #0
   12476:	d100      	bne.n	1247a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12478:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   1247a:	490a      	ldr	r1, [pc, #40]	; (124a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   1247c:	9b01      	ldr	r3, [sp, #4]
   1247e:	9a00      	ldr	r2, [sp, #0]
   12480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   12484:	4a06      	ldr	r2, [pc, #24]	; (124a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   12486:	9b01      	ldr	r3, [sp, #4]
   12488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1248c:	1c5a      	adds	r2, r3, #1
   1248e:	4904      	ldr	r1, [pc, #16]	; (124a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   12490:	9b01      	ldr	r3, [sp, #4]
   12492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12496:	bf00      	nop
   12498:	b003      	add	sp, #12
   1249a:	f85d fb04 	ldr.w	pc, [sp], #4
   1249e:	bf00      	nop
   124a0:	1fff9488 	.word	0x1fff9488
   124a4:	1fff9484 	.word	0x1fff9484

000124a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   124a8:	b500      	push	{lr}
   124aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124ac:	f7ef f964 	bl	1778 <Sys_GetCoreID>
   124b0:	4603      	mov	r3, r0
   124b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   124b4:	4a0d      	ldr	r2, [pc, #52]	; (124ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   124b6:	9b01      	ldr	r3, [sp, #4]
   124b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124bc:	1e5a      	subs	r2, r3, #1
   124be:	490b      	ldr	r1, [pc, #44]	; (124ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   124c0:	9b01      	ldr	r3, [sp, #4]
   124c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   124c6:	4a0a      	ldr	r2, [pc, #40]	; (124f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   124c8:	9b01      	ldr	r3, [sp, #4]
   124ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124ce:	f003 0301 	and.w	r3, r3, #1
   124d2:	2b00      	cmp	r3, #0
   124d4:	d106      	bne.n	124e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   124d6:	4a05      	ldr	r2, [pc, #20]	; (124ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   124d8:	9b01      	ldr	r3, [sp, #4]
   124da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124de:	2b00      	cmp	r3, #0
   124e0:	d100      	bne.n	124e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   124e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   124e4:	bf00      	nop
   124e6:	b003      	add	sp, #12
   124e8:	f85d fb04 	ldr.w	pc, [sp], #4
   124ec:	1fff9488 	.word	0x1fff9488
   124f0:	1fff9484 	.word	0x1fff9484

000124f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   124f4:	b500      	push	{lr}
   124f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124f8:	f7ef f93e 	bl	1778 <Sys_GetCoreID>
   124fc:	4603      	mov	r3, r0
   124fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   12500:	4a10      	ldr	r2, [pc, #64]	; (12544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   12502:	9b01      	ldr	r3, [sp, #4]
   12504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12508:	2b00      	cmp	r3, #0
   1250a:	d10d      	bne.n	12528 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1250c:	f7ee f9e0 	bl	8d0 <Adc_schm_read_msr>
   12510:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12512:	9b00      	ldr	r3, [sp, #0]
   12514:	f003 0301 	and.w	r3, r3, #1
   12518:	2b00      	cmp	r3, #0
   1251a:	d100      	bne.n	1251e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1251c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   1251e:	490a      	ldr	r1, [pc, #40]	; (12548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   12520:	9b01      	ldr	r3, [sp, #4]
   12522:	9a00      	ldr	r2, [sp, #0]
   12524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   12528:	4a06      	ldr	r2, [pc, #24]	; (12544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1252a:	9b01      	ldr	r3, [sp, #4]
   1252c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12530:	1c5a      	adds	r2, r3, #1
   12532:	4904      	ldr	r1, [pc, #16]	; (12544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   12534:	9b01      	ldr	r3, [sp, #4]
   12536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1253a:	bf00      	nop
   1253c:	b003      	add	sp, #12
   1253e:	f85d fb04 	ldr.w	pc, [sp], #4
   12542:	bf00      	nop
   12544:	1fff9490 	.word	0x1fff9490
   12548:	1fff948c 	.word	0x1fff948c

0001254c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   1254c:	b500      	push	{lr}
   1254e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12550:	f7ef f912 	bl	1778 <Sys_GetCoreID>
   12554:	4603      	mov	r3, r0
   12556:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   12558:	4a0d      	ldr	r2, [pc, #52]	; (12590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   1255a:	9b01      	ldr	r3, [sp, #4]
   1255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12560:	1e5a      	subs	r2, r3, #1
   12562:	490b      	ldr	r1, [pc, #44]	; (12590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   12564:	9b01      	ldr	r3, [sp, #4]
   12566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   1256a:	4a0a      	ldr	r2, [pc, #40]	; (12594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   1256c:	9b01      	ldr	r3, [sp, #4]
   1256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12572:	f003 0301 	and.w	r3, r3, #1
   12576:	2b00      	cmp	r3, #0
   12578:	d106      	bne.n	12588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   1257a:	4a05      	ldr	r2, [pc, #20]	; (12590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   1257c:	9b01      	ldr	r3, [sp, #4]
   1257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12582:	2b00      	cmp	r3, #0
   12584:	d100      	bne.n	12588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12586:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12588:	bf00      	nop
   1258a:	b003      	add	sp, #12
   1258c:	f85d fb04 	ldr.w	pc, [sp], #4
   12590:	1fff9490 	.word	0x1fff9490
   12594:	1fff948c 	.word	0x1fff948c

00012598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   12598:	b500      	push	{lr}
   1259a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1259c:	f7ef f8ec 	bl	1778 <Sys_GetCoreID>
   125a0:	4603      	mov	r3, r0
   125a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   125a4:	4a10      	ldr	r2, [pc, #64]	; (125e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   125a6:	9b01      	ldr	r3, [sp, #4]
   125a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125ac:	2b00      	cmp	r3, #0
   125ae:	d10d      	bne.n	125cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   125b0:	f7ee f98e 	bl	8d0 <Adc_schm_read_msr>
   125b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   125b6:	9b00      	ldr	r3, [sp, #0]
   125b8:	f003 0301 	and.w	r3, r3, #1
   125bc:	2b00      	cmp	r3, #0
   125be:	d100      	bne.n	125c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   125c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   125c2:	490a      	ldr	r1, [pc, #40]	; (125ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   125c4:	9b01      	ldr	r3, [sp, #4]
   125c6:	9a00      	ldr	r2, [sp, #0]
   125c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   125cc:	4a06      	ldr	r2, [pc, #24]	; (125e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   125ce:	9b01      	ldr	r3, [sp, #4]
   125d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125d4:	1c5a      	adds	r2, r3, #1
   125d6:	4904      	ldr	r1, [pc, #16]	; (125e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   125d8:	9b01      	ldr	r3, [sp, #4]
   125da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   125de:	bf00      	nop
   125e0:	b003      	add	sp, #12
   125e2:	f85d fb04 	ldr.w	pc, [sp], #4
   125e6:	bf00      	nop
   125e8:	1fff9498 	.word	0x1fff9498
   125ec:	1fff9494 	.word	0x1fff9494

000125f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   125f0:	b500      	push	{lr}
   125f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125f4:	f7ef f8c0 	bl	1778 <Sys_GetCoreID>
   125f8:	4603      	mov	r3, r0
   125fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   125fc:	4a0d      	ldr	r2, [pc, #52]	; (12634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   125fe:	9b01      	ldr	r3, [sp, #4]
   12600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12604:	1e5a      	subs	r2, r3, #1
   12606:	490b      	ldr	r1, [pc, #44]	; (12634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   12608:	9b01      	ldr	r3, [sp, #4]
   1260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   1260e:	4a0a      	ldr	r2, [pc, #40]	; (12638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   12610:	9b01      	ldr	r3, [sp, #4]
   12612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12616:	f003 0301 	and.w	r3, r3, #1
   1261a:	2b00      	cmp	r3, #0
   1261c:	d106      	bne.n	1262c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   1261e:	4a05      	ldr	r2, [pc, #20]	; (12634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   12620:	9b01      	ldr	r3, [sp, #4]
   12622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12626:	2b00      	cmp	r3, #0
   12628:	d100      	bne.n	1262c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1262a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1262c:	bf00      	nop
   1262e:	b003      	add	sp, #12
   12630:	f85d fb04 	ldr.w	pc, [sp], #4
   12634:	1fff9498 	.word	0x1fff9498
   12638:	1fff9494 	.word	0x1fff9494

0001263c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   1263c:	b500      	push	{lr}
   1263e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12640:	f7ef f89a 	bl	1778 <Sys_GetCoreID>
   12644:	4603      	mov	r3, r0
   12646:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   12648:	4a10      	ldr	r2, [pc, #64]	; (1268c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1264a:	9b01      	ldr	r3, [sp, #4]
   1264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12650:	2b00      	cmp	r3, #0
   12652:	d10d      	bne.n	12670 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12654:	f7ee f93c 	bl	8d0 <Adc_schm_read_msr>
   12658:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1265a:	9b00      	ldr	r3, [sp, #0]
   1265c:	f003 0301 	and.w	r3, r3, #1
   12660:	2b00      	cmp	r3, #0
   12662:	d100      	bne.n	12666 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12664:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   12666:	490a      	ldr	r1, [pc, #40]	; (12690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   12668:	9b01      	ldr	r3, [sp, #4]
   1266a:	9a00      	ldr	r2, [sp, #0]
   1266c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   12670:	4a06      	ldr	r2, [pc, #24]	; (1268c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   12672:	9b01      	ldr	r3, [sp, #4]
   12674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12678:	1c5a      	adds	r2, r3, #1
   1267a:	4904      	ldr	r1, [pc, #16]	; (1268c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1267c:	9b01      	ldr	r3, [sp, #4]
   1267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12682:	bf00      	nop
   12684:	b003      	add	sp, #12
   12686:	f85d fb04 	ldr.w	pc, [sp], #4
   1268a:	bf00      	nop
   1268c:	1fff94a0 	.word	0x1fff94a0
   12690:	1fff949c 	.word	0x1fff949c

00012694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   12694:	b500      	push	{lr}
   12696:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12698:	f7ef f86e 	bl	1778 <Sys_GetCoreID>
   1269c:	4603      	mov	r3, r0
   1269e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   126a0:	4a0d      	ldr	r2, [pc, #52]	; (126d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   126a2:	9b01      	ldr	r3, [sp, #4]
   126a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126a8:	1e5a      	subs	r2, r3, #1
   126aa:	490b      	ldr	r1, [pc, #44]	; (126d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   126ac:	9b01      	ldr	r3, [sp, #4]
   126ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   126b2:	4a0a      	ldr	r2, [pc, #40]	; (126dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   126b4:	9b01      	ldr	r3, [sp, #4]
   126b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126ba:	f003 0301 	and.w	r3, r3, #1
   126be:	2b00      	cmp	r3, #0
   126c0:	d106      	bne.n	126d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   126c2:	4a05      	ldr	r2, [pc, #20]	; (126d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   126c4:	9b01      	ldr	r3, [sp, #4]
   126c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126ca:	2b00      	cmp	r3, #0
   126cc:	d100      	bne.n	126d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   126ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   126d0:	bf00      	nop
   126d2:	b003      	add	sp, #12
   126d4:	f85d fb04 	ldr.w	pc, [sp], #4
   126d8:	1fff94a0 	.word	0x1fff94a0
   126dc:	1fff949c 	.word	0x1fff949c

000126e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   126e0:	b500      	push	{lr}
   126e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126e4:	f7ef f848 	bl	1778 <Sys_GetCoreID>
   126e8:	4603      	mov	r3, r0
   126ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   126ec:	4a10      	ldr	r2, [pc, #64]	; (12730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   126ee:	9b01      	ldr	r3, [sp, #4]
   126f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126f4:	2b00      	cmp	r3, #0
   126f6:	d10d      	bne.n	12714 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   126f8:	f7ee f8ea 	bl	8d0 <Adc_schm_read_msr>
   126fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   126fe:	9b00      	ldr	r3, [sp, #0]
   12700:	f003 0301 	and.w	r3, r3, #1
   12704:	2b00      	cmp	r3, #0
   12706:	d100      	bne.n	1270a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12708:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   1270a:	490a      	ldr	r1, [pc, #40]	; (12734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   1270c:	9b01      	ldr	r3, [sp, #4]
   1270e:	9a00      	ldr	r2, [sp, #0]
   12710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   12714:	4a06      	ldr	r2, [pc, #24]	; (12730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   12716:	9b01      	ldr	r3, [sp, #4]
   12718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1271c:	1c5a      	adds	r2, r3, #1
   1271e:	4904      	ldr	r1, [pc, #16]	; (12730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   12720:	9b01      	ldr	r3, [sp, #4]
   12722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12726:	bf00      	nop
   12728:	b003      	add	sp, #12
   1272a:	f85d fb04 	ldr.w	pc, [sp], #4
   1272e:	bf00      	nop
   12730:	1fff94a8 	.word	0x1fff94a8
   12734:	1fff94a4 	.word	0x1fff94a4

00012738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   12738:	b500      	push	{lr}
   1273a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1273c:	f7ef f81c 	bl	1778 <Sys_GetCoreID>
   12740:	4603      	mov	r3, r0
   12742:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   12744:	4a0d      	ldr	r2, [pc, #52]	; (1277c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   12746:	9b01      	ldr	r3, [sp, #4]
   12748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1274c:	1e5a      	subs	r2, r3, #1
   1274e:	490b      	ldr	r1, [pc, #44]	; (1277c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   12750:	9b01      	ldr	r3, [sp, #4]
   12752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   12756:	4a0a      	ldr	r2, [pc, #40]	; (12780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   12758:	9b01      	ldr	r3, [sp, #4]
   1275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1275e:	f003 0301 	and.w	r3, r3, #1
   12762:	2b00      	cmp	r3, #0
   12764:	d106      	bne.n	12774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   12766:	4a05      	ldr	r2, [pc, #20]	; (1277c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   12768:	9b01      	ldr	r3, [sp, #4]
   1276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1276e:	2b00      	cmp	r3, #0
   12770:	d100      	bne.n	12774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12772:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12774:	bf00      	nop
   12776:	b003      	add	sp, #12
   12778:	f85d fb04 	ldr.w	pc, [sp], #4
   1277c:	1fff94a8 	.word	0x1fff94a8
   12780:	1fff94a4 	.word	0x1fff94a4

00012784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   12784:	b500      	push	{lr}
   12786:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12788:	f7ee fff6 	bl	1778 <Sys_GetCoreID>
   1278c:	4603      	mov	r3, r0
   1278e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   12790:	4a10      	ldr	r2, [pc, #64]	; (127d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   12792:	9b01      	ldr	r3, [sp, #4]
   12794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12798:	2b00      	cmp	r3, #0
   1279a:	d10d      	bne.n	127b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1279c:	f7ee f898 	bl	8d0 <Adc_schm_read_msr>
   127a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127a2:	9b00      	ldr	r3, [sp, #0]
   127a4:	f003 0301 	and.w	r3, r3, #1
   127a8:	2b00      	cmp	r3, #0
   127aa:	d100      	bne.n	127ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   127ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   127ae:	490a      	ldr	r1, [pc, #40]	; (127d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   127b0:	9b01      	ldr	r3, [sp, #4]
   127b2:	9a00      	ldr	r2, [sp, #0]
   127b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   127b8:	4a06      	ldr	r2, [pc, #24]	; (127d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   127ba:	9b01      	ldr	r3, [sp, #4]
   127bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127c0:	1c5a      	adds	r2, r3, #1
   127c2:	4904      	ldr	r1, [pc, #16]	; (127d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   127c4:	9b01      	ldr	r3, [sp, #4]
   127c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   127ca:	bf00      	nop
   127cc:	b003      	add	sp, #12
   127ce:	f85d fb04 	ldr.w	pc, [sp], #4
   127d2:	bf00      	nop
   127d4:	1fff94b0 	.word	0x1fff94b0
   127d8:	1fff94ac 	.word	0x1fff94ac

000127dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   127dc:	b500      	push	{lr}
   127de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127e0:	f7ee ffca 	bl	1778 <Sys_GetCoreID>
   127e4:	4603      	mov	r3, r0
   127e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   127e8:	4a0d      	ldr	r2, [pc, #52]	; (12820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   127ea:	9b01      	ldr	r3, [sp, #4]
   127ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127f0:	1e5a      	subs	r2, r3, #1
   127f2:	490b      	ldr	r1, [pc, #44]	; (12820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   127f4:	9b01      	ldr	r3, [sp, #4]
   127f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   127fa:	4a0a      	ldr	r2, [pc, #40]	; (12824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   127fc:	9b01      	ldr	r3, [sp, #4]
   127fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12802:	f003 0301 	and.w	r3, r3, #1
   12806:	2b00      	cmp	r3, #0
   12808:	d106      	bne.n	12818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   1280a:	4a05      	ldr	r2, [pc, #20]	; (12820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   1280c:	9b01      	ldr	r3, [sp, #4]
   1280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12812:	2b00      	cmp	r3, #0
   12814:	d100      	bne.n	12818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12816:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12818:	bf00      	nop
   1281a:	b003      	add	sp, #12
   1281c:	f85d fb04 	ldr.w	pc, [sp], #4
   12820:	1fff94b0 	.word	0x1fff94b0
   12824:	1fff94ac 	.word	0x1fff94ac

00012828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   12828:	b500      	push	{lr}
   1282a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1282c:	f7ee ffa4 	bl	1778 <Sys_GetCoreID>
   12830:	4603      	mov	r3, r0
   12832:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   12834:	4a10      	ldr	r2, [pc, #64]	; (12878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   12836:	9b01      	ldr	r3, [sp, #4]
   12838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1283c:	2b00      	cmp	r3, #0
   1283e:	d10d      	bne.n	1285c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12840:	f7ee f846 	bl	8d0 <Adc_schm_read_msr>
   12844:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12846:	9b00      	ldr	r3, [sp, #0]
   12848:	f003 0301 	and.w	r3, r3, #1
   1284c:	2b00      	cmp	r3, #0
   1284e:	d100      	bne.n	12852 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12850:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   12852:	490a      	ldr	r1, [pc, #40]	; (1287c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   12854:	9b01      	ldr	r3, [sp, #4]
   12856:	9a00      	ldr	r2, [sp, #0]
   12858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   1285c:	4a06      	ldr	r2, [pc, #24]	; (12878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   1285e:	9b01      	ldr	r3, [sp, #4]
   12860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12864:	1c5a      	adds	r2, r3, #1
   12866:	4904      	ldr	r1, [pc, #16]	; (12878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   12868:	9b01      	ldr	r3, [sp, #4]
   1286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1286e:	bf00      	nop
   12870:	b003      	add	sp, #12
   12872:	f85d fb04 	ldr.w	pc, [sp], #4
   12876:	bf00      	nop
   12878:	1fff94b8 	.word	0x1fff94b8
   1287c:	1fff94b4 	.word	0x1fff94b4

00012880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   12880:	b500      	push	{lr}
   12882:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12884:	f7ee ff78 	bl	1778 <Sys_GetCoreID>
   12888:	4603      	mov	r3, r0
   1288a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   1288c:	4a0d      	ldr	r2, [pc, #52]	; (128c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   1288e:	9b01      	ldr	r3, [sp, #4]
   12890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12894:	1e5a      	subs	r2, r3, #1
   12896:	490b      	ldr	r1, [pc, #44]	; (128c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   12898:	9b01      	ldr	r3, [sp, #4]
   1289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   1289e:	4a0a      	ldr	r2, [pc, #40]	; (128c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   128a0:	9b01      	ldr	r3, [sp, #4]
   128a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128a6:	f003 0301 	and.w	r3, r3, #1
   128aa:	2b00      	cmp	r3, #0
   128ac:	d106      	bne.n	128bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   128ae:	4a05      	ldr	r2, [pc, #20]	; (128c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   128b0:	9b01      	ldr	r3, [sp, #4]
   128b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128b6:	2b00      	cmp	r3, #0
   128b8:	d100      	bne.n	128bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   128ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   128bc:	bf00      	nop
   128be:	b003      	add	sp, #12
   128c0:	f85d fb04 	ldr.w	pc, [sp], #4
   128c4:	1fff94b8 	.word	0x1fff94b8
   128c8:	1fff94b4 	.word	0x1fff94b4

000128cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   128cc:	b500      	push	{lr}
   128ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128d0:	f7ee ff52 	bl	1778 <Sys_GetCoreID>
   128d4:	4603      	mov	r3, r0
   128d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   128d8:	4a10      	ldr	r2, [pc, #64]	; (1291c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   128da:	9b01      	ldr	r3, [sp, #4]
   128dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128e0:	2b00      	cmp	r3, #0
   128e2:	d10d      	bne.n	12900 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   128e4:	f7ed fff4 	bl	8d0 <Adc_schm_read_msr>
   128e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   128ea:	9b00      	ldr	r3, [sp, #0]
   128ec:	f003 0301 	and.w	r3, r3, #1
   128f0:	2b00      	cmp	r3, #0
   128f2:	d100      	bne.n	128f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   128f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   128f6:	490a      	ldr	r1, [pc, #40]	; (12920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   128f8:	9b01      	ldr	r3, [sp, #4]
   128fa:	9a00      	ldr	r2, [sp, #0]
   128fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   12900:	4a06      	ldr	r2, [pc, #24]	; (1291c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   12902:	9b01      	ldr	r3, [sp, #4]
   12904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12908:	1c5a      	adds	r2, r3, #1
   1290a:	4904      	ldr	r1, [pc, #16]	; (1291c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   1290c:	9b01      	ldr	r3, [sp, #4]
   1290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12912:	bf00      	nop
   12914:	b003      	add	sp, #12
   12916:	f85d fb04 	ldr.w	pc, [sp], #4
   1291a:	bf00      	nop
   1291c:	1fff94c0 	.word	0x1fff94c0
   12920:	1fff94bc 	.word	0x1fff94bc

00012924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   12924:	b500      	push	{lr}
   12926:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12928:	f7ee ff26 	bl	1778 <Sys_GetCoreID>
   1292c:	4603      	mov	r3, r0
   1292e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   12930:	4a0d      	ldr	r2, [pc, #52]	; (12968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   12932:	9b01      	ldr	r3, [sp, #4]
   12934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12938:	1e5a      	subs	r2, r3, #1
   1293a:	490b      	ldr	r1, [pc, #44]	; (12968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1293c:	9b01      	ldr	r3, [sp, #4]
   1293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   12942:	4a0a      	ldr	r2, [pc, #40]	; (1296c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   12944:	9b01      	ldr	r3, [sp, #4]
   12946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1294a:	f003 0301 	and.w	r3, r3, #1
   1294e:	2b00      	cmp	r3, #0
   12950:	d106      	bne.n	12960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   12952:	4a05      	ldr	r2, [pc, #20]	; (12968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   12954:	9b01      	ldr	r3, [sp, #4]
   12956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1295a:	2b00      	cmp	r3, #0
   1295c:	d100      	bne.n	12960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1295e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12960:	bf00      	nop
   12962:	b003      	add	sp, #12
   12964:	f85d fb04 	ldr.w	pc, [sp], #4
   12968:	1fff94c0 	.word	0x1fff94c0
   1296c:	1fff94bc 	.word	0x1fff94bc

00012970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   12970:	b500      	push	{lr}
   12972:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12974:	f7ee ff00 	bl	1778 <Sys_GetCoreID>
   12978:	4603      	mov	r3, r0
   1297a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   1297c:	4a10      	ldr	r2, [pc, #64]	; (129c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   1297e:	9b01      	ldr	r3, [sp, #4]
   12980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12984:	2b00      	cmp	r3, #0
   12986:	d10d      	bne.n	129a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12988:	f7ed ffa2 	bl	8d0 <Adc_schm_read_msr>
   1298c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1298e:	9b00      	ldr	r3, [sp, #0]
   12990:	f003 0301 	and.w	r3, r3, #1
   12994:	2b00      	cmp	r3, #0
   12996:	d100      	bne.n	1299a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12998:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   1299a:	490a      	ldr	r1, [pc, #40]	; (129c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   1299c:	9b01      	ldr	r3, [sp, #4]
   1299e:	9a00      	ldr	r2, [sp, #0]
   129a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   129a4:	4a06      	ldr	r2, [pc, #24]	; (129c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   129a6:	9b01      	ldr	r3, [sp, #4]
   129a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129ac:	1c5a      	adds	r2, r3, #1
   129ae:	4904      	ldr	r1, [pc, #16]	; (129c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   129b0:	9b01      	ldr	r3, [sp, #4]
   129b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   129b6:	bf00      	nop
   129b8:	b003      	add	sp, #12
   129ba:	f85d fb04 	ldr.w	pc, [sp], #4
   129be:	bf00      	nop
   129c0:	1fff94c8 	.word	0x1fff94c8
   129c4:	1fff94c4 	.word	0x1fff94c4

000129c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   129c8:	b500      	push	{lr}
   129ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129cc:	f7ee fed4 	bl	1778 <Sys_GetCoreID>
   129d0:	4603      	mov	r3, r0
   129d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   129d4:	4a0d      	ldr	r2, [pc, #52]	; (12a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   129d6:	9b01      	ldr	r3, [sp, #4]
   129d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129dc:	1e5a      	subs	r2, r3, #1
   129de:	490b      	ldr	r1, [pc, #44]	; (12a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   129e0:	9b01      	ldr	r3, [sp, #4]
   129e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   129e6:	4a0a      	ldr	r2, [pc, #40]	; (12a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   129e8:	9b01      	ldr	r3, [sp, #4]
   129ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129ee:	f003 0301 	and.w	r3, r3, #1
   129f2:	2b00      	cmp	r3, #0
   129f4:	d106      	bne.n	12a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   129f6:	4a05      	ldr	r2, [pc, #20]	; (12a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   129f8:	9b01      	ldr	r3, [sp, #4]
   129fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129fe:	2b00      	cmp	r3, #0
   12a00:	d100      	bne.n	12a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a04:	bf00      	nop
   12a06:	b003      	add	sp, #12
   12a08:	f85d fb04 	ldr.w	pc, [sp], #4
   12a0c:	1fff94c8 	.word	0x1fff94c8
   12a10:	1fff94c4 	.word	0x1fff94c4

00012a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   12a14:	b500      	push	{lr}
   12a16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a18:	f7ee feae 	bl	1778 <Sys_GetCoreID>
   12a1c:	4603      	mov	r3, r0
   12a1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   12a20:	4a10      	ldr	r2, [pc, #64]	; (12a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   12a22:	9b01      	ldr	r3, [sp, #4]
   12a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a28:	2b00      	cmp	r3, #0
   12a2a:	d10d      	bne.n	12a48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a2c:	f7ed ff50 	bl	8d0 <Adc_schm_read_msr>
   12a30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a32:	9b00      	ldr	r3, [sp, #0]
   12a34:	f003 0301 	and.w	r3, r3, #1
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d100      	bne.n	12a3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   12a3e:	490a      	ldr	r1, [pc, #40]	; (12a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   12a40:	9b01      	ldr	r3, [sp, #4]
   12a42:	9a00      	ldr	r2, [sp, #0]
   12a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   12a48:	4a06      	ldr	r2, [pc, #24]	; (12a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   12a4a:	9b01      	ldr	r3, [sp, #4]
   12a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a50:	1c5a      	adds	r2, r3, #1
   12a52:	4904      	ldr	r1, [pc, #16]	; (12a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   12a54:	9b01      	ldr	r3, [sp, #4]
   12a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a5a:	bf00      	nop
   12a5c:	b003      	add	sp, #12
   12a5e:	f85d fb04 	ldr.w	pc, [sp], #4
   12a62:	bf00      	nop
   12a64:	1fff94d0 	.word	0x1fff94d0
   12a68:	1fff94cc 	.word	0x1fff94cc

00012a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   12a6c:	b500      	push	{lr}
   12a6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a70:	f7ee fe82 	bl	1778 <Sys_GetCoreID>
   12a74:	4603      	mov	r3, r0
   12a76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   12a78:	4a0d      	ldr	r2, [pc, #52]	; (12ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   12a7a:	9b01      	ldr	r3, [sp, #4]
   12a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a80:	1e5a      	subs	r2, r3, #1
   12a82:	490b      	ldr	r1, [pc, #44]	; (12ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   12a84:	9b01      	ldr	r3, [sp, #4]
   12a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   12a8a:	4a0a      	ldr	r2, [pc, #40]	; (12ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   12a8c:	9b01      	ldr	r3, [sp, #4]
   12a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a92:	f003 0301 	and.w	r3, r3, #1
   12a96:	2b00      	cmp	r3, #0
   12a98:	d106      	bne.n	12aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   12a9a:	4a05      	ldr	r2, [pc, #20]	; (12ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   12a9c:	9b01      	ldr	r3, [sp, #4]
   12a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aa2:	2b00      	cmp	r3, #0
   12aa4:	d100      	bne.n	12aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12aa6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12aa8:	bf00      	nop
   12aaa:	b003      	add	sp, #12
   12aac:	f85d fb04 	ldr.w	pc, [sp], #4
   12ab0:	1fff94d0 	.word	0x1fff94d0
   12ab4:	1fff94cc 	.word	0x1fff94cc

00012ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   12ab8:	b500      	push	{lr}
   12aba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12abc:	f7ee fe5c 	bl	1778 <Sys_GetCoreID>
   12ac0:	4603      	mov	r3, r0
   12ac2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   12ac4:	4a10      	ldr	r2, [pc, #64]	; (12b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   12ac6:	9b01      	ldr	r3, [sp, #4]
   12ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12acc:	2b00      	cmp	r3, #0
   12ace:	d10d      	bne.n	12aec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ad0:	f7ed fefe 	bl	8d0 <Adc_schm_read_msr>
   12ad4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ad6:	9b00      	ldr	r3, [sp, #0]
   12ad8:	f003 0301 	and.w	r3, r3, #1
   12adc:	2b00      	cmp	r3, #0
   12ade:	d100      	bne.n	12ae2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ae0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   12ae2:	490a      	ldr	r1, [pc, #40]	; (12b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   12ae4:	9b01      	ldr	r3, [sp, #4]
   12ae6:	9a00      	ldr	r2, [sp, #0]
   12ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   12aec:	4a06      	ldr	r2, [pc, #24]	; (12b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   12aee:	9b01      	ldr	r3, [sp, #4]
   12af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12af4:	1c5a      	adds	r2, r3, #1
   12af6:	4904      	ldr	r1, [pc, #16]	; (12b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   12af8:	9b01      	ldr	r3, [sp, #4]
   12afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12afe:	bf00      	nop
   12b00:	b003      	add	sp, #12
   12b02:	f85d fb04 	ldr.w	pc, [sp], #4
   12b06:	bf00      	nop
   12b08:	1fff94d8 	.word	0x1fff94d8
   12b0c:	1fff94d4 	.word	0x1fff94d4

00012b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   12b10:	b500      	push	{lr}
   12b12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b14:	f7ee fe30 	bl	1778 <Sys_GetCoreID>
   12b18:	4603      	mov	r3, r0
   12b1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   12b1c:	4a0d      	ldr	r2, [pc, #52]	; (12b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12b1e:	9b01      	ldr	r3, [sp, #4]
   12b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b24:	1e5a      	subs	r2, r3, #1
   12b26:	490b      	ldr	r1, [pc, #44]	; (12b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12b28:	9b01      	ldr	r3, [sp, #4]
   12b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   12b2e:	4a0a      	ldr	r2, [pc, #40]	; (12b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   12b30:	9b01      	ldr	r3, [sp, #4]
   12b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b36:	f003 0301 	and.w	r3, r3, #1
   12b3a:	2b00      	cmp	r3, #0
   12b3c:	d106      	bne.n	12b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   12b3e:	4a05      	ldr	r2, [pc, #20]	; (12b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12b40:	9b01      	ldr	r3, [sp, #4]
   12b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b46:	2b00      	cmp	r3, #0
   12b48:	d100      	bne.n	12b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b4c:	bf00      	nop
   12b4e:	b003      	add	sp, #12
   12b50:	f85d fb04 	ldr.w	pc, [sp], #4
   12b54:	1fff94d8 	.word	0x1fff94d8
   12b58:	1fff94d4 	.word	0x1fff94d4

00012b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   12b5c:	b500      	push	{lr}
   12b5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b60:	f7ee fe0a 	bl	1778 <Sys_GetCoreID>
   12b64:	4603      	mov	r3, r0
   12b66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   12b68:	4a10      	ldr	r2, [pc, #64]	; (12bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   12b6a:	9b01      	ldr	r3, [sp, #4]
   12b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b70:	2b00      	cmp	r3, #0
   12b72:	d10d      	bne.n	12b90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b74:	f7ed feac 	bl	8d0 <Adc_schm_read_msr>
   12b78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b7a:	9b00      	ldr	r3, [sp, #0]
   12b7c:	f003 0301 	and.w	r3, r3, #1
   12b80:	2b00      	cmp	r3, #0
   12b82:	d100      	bne.n	12b86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   12b86:	490a      	ldr	r1, [pc, #40]	; (12bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   12b88:	9b01      	ldr	r3, [sp, #4]
   12b8a:	9a00      	ldr	r2, [sp, #0]
   12b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   12b90:	4a06      	ldr	r2, [pc, #24]	; (12bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   12b92:	9b01      	ldr	r3, [sp, #4]
   12b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b98:	1c5a      	adds	r2, r3, #1
   12b9a:	4904      	ldr	r1, [pc, #16]	; (12bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   12b9c:	9b01      	ldr	r3, [sp, #4]
   12b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ba2:	bf00      	nop
   12ba4:	b003      	add	sp, #12
   12ba6:	f85d fb04 	ldr.w	pc, [sp], #4
   12baa:	bf00      	nop
   12bac:	1fff94e0 	.word	0x1fff94e0
   12bb0:	1fff94dc 	.word	0x1fff94dc

00012bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   12bb4:	b500      	push	{lr}
   12bb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bb8:	f7ee fdde 	bl	1778 <Sys_GetCoreID>
   12bbc:	4603      	mov	r3, r0
   12bbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   12bc0:	4a0d      	ldr	r2, [pc, #52]	; (12bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   12bc2:	9b01      	ldr	r3, [sp, #4]
   12bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bc8:	1e5a      	subs	r2, r3, #1
   12bca:	490b      	ldr	r1, [pc, #44]	; (12bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   12bcc:	9b01      	ldr	r3, [sp, #4]
   12bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   12bd2:	4a0a      	ldr	r2, [pc, #40]	; (12bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   12bd4:	9b01      	ldr	r3, [sp, #4]
   12bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bda:	f003 0301 	and.w	r3, r3, #1
   12bde:	2b00      	cmp	r3, #0
   12be0:	d106      	bne.n	12bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   12be2:	4a05      	ldr	r2, [pc, #20]	; (12bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   12be4:	9b01      	ldr	r3, [sp, #4]
   12be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bea:	2b00      	cmp	r3, #0
   12bec:	d100      	bne.n	12bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12bee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12bf0:	bf00      	nop
   12bf2:	b003      	add	sp, #12
   12bf4:	f85d fb04 	ldr.w	pc, [sp], #4
   12bf8:	1fff94e0 	.word	0x1fff94e0
   12bfc:	1fff94dc 	.word	0x1fff94dc

00012c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   12c00:	b500      	push	{lr}
   12c02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c04:	f7ee fdb8 	bl	1778 <Sys_GetCoreID>
   12c08:	4603      	mov	r3, r0
   12c0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   12c0c:	4a10      	ldr	r2, [pc, #64]	; (12c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   12c0e:	9b01      	ldr	r3, [sp, #4]
   12c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c14:	2b00      	cmp	r3, #0
   12c16:	d10d      	bne.n	12c34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c18:	f7ed fe5a 	bl	8d0 <Adc_schm_read_msr>
   12c1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c1e:	9b00      	ldr	r3, [sp, #0]
   12c20:	f003 0301 	and.w	r3, r3, #1
   12c24:	2b00      	cmp	r3, #0
   12c26:	d100      	bne.n	12c2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   12c2a:	490a      	ldr	r1, [pc, #40]	; (12c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   12c2c:	9b01      	ldr	r3, [sp, #4]
   12c2e:	9a00      	ldr	r2, [sp, #0]
   12c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   12c34:	4a06      	ldr	r2, [pc, #24]	; (12c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   12c36:	9b01      	ldr	r3, [sp, #4]
   12c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c3c:	1c5a      	adds	r2, r3, #1
   12c3e:	4904      	ldr	r1, [pc, #16]	; (12c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   12c40:	9b01      	ldr	r3, [sp, #4]
   12c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c46:	bf00      	nop
   12c48:	b003      	add	sp, #12
   12c4a:	f85d fb04 	ldr.w	pc, [sp], #4
   12c4e:	bf00      	nop
   12c50:	1fff94e8 	.word	0x1fff94e8
   12c54:	1fff94e4 	.word	0x1fff94e4

00012c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   12c58:	b500      	push	{lr}
   12c5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c5c:	f7ee fd8c 	bl	1778 <Sys_GetCoreID>
   12c60:	4603      	mov	r3, r0
   12c62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   12c64:	4a0d      	ldr	r2, [pc, #52]	; (12c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12c66:	9b01      	ldr	r3, [sp, #4]
   12c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c6c:	1e5a      	subs	r2, r3, #1
   12c6e:	490b      	ldr	r1, [pc, #44]	; (12c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12c70:	9b01      	ldr	r3, [sp, #4]
   12c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   12c76:	4a0a      	ldr	r2, [pc, #40]	; (12ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   12c78:	9b01      	ldr	r3, [sp, #4]
   12c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c7e:	f003 0301 	and.w	r3, r3, #1
   12c82:	2b00      	cmp	r3, #0
   12c84:	d106      	bne.n	12c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   12c86:	4a05      	ldr	r2, [pc, #20]	; (12c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12c88:	9b01      	ldr	r3, [sp, #4]
   12c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c8e:	2b00      	cmp	r3, #0
   12c90:	d100      	bne.n	12c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c94:	bf00      	nop
   12c96:	b003      	add	sp, #12
   12c98:	f85d fb04 	ldr.w	pc, [sp], #4
   12c9c:	1fff94e8 	.word	0x1fff94e8
   12ca0:	1fff94e4 	.word	0x1fff94e4

00012ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   12ca4:	b500      	push	{lr}
   12ca6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ca8:	f7ee fd66 	bl	1778 <Sys_GetCoreID>
   12cac:	4603      	mov	r3, r0
   12cae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   12cb0:	4a10      	ldr	r2, [pc, #64]	; (12cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12cb2:	9b01      	ldr	r3, [sp, #4]
   12cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cb8:	2b00      	cmp	r3, #0
   12cba:	d10d      	bne.n	12cd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12cbc:	f7ed fe08 	bl	8d0 <Adc_schm_read_msr>
   12cc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12cc2:	9b00      	ldr	r3, [sp, #0]
   12cc4:	f003 0301 	and.w	r3, r3, #1
   12cc8:	2b00      	cmp	r3, #0
   12cca:	d100      	bne.n	12cce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ccc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   12cce:	490a      	ldr	r1, [pc, #40]	; (12cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   12cd0:	9b01      	ldr	r3, [sp, #4]
   12cd2:	9a00      	ldr	r2, [sp, #0]
   12cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   12cd8:	4a06      	ldr	r2, [pc, #24]	; (12cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12cda:	9b01      	ldr	r3, [sp, #4]
   12cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ce0:	1c5a      	adds	r2, r3, #1
   12ce2:	4904      	ldr	r1, [pc, #16]	; (12cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12ce4:	9b01      	ldr	r3, [sp, #4]
   12ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12cea:	bf00      	nop
   12cec:	b003      	add	sp, #12
   12cee:	f85d fb04 	ldr.w	pc, [sp], #4
   12cf2:	bf00      	nop
   12cf4:	1fff94f0 	.word	0x1fff94f0
   12cf8:	1fff94ec 	.word	0x1fff94ec

00012cfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   12cfc:	b500      	push	{lr}
   12cfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d00:	f7ee fd3a 	bl	1778 <Sys_GetCoreID>
   12d04:	4603      	mov	r3, r0
   12d06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   12d08:	4a0d      	ldr	r2, [pc, #52]	; (12d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12d0a:	9b01      	ldr	r3, [sp, #4]
   12d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d10:	1e5a      	subs	r2, r3, #1
   12d12:	490b      	ldr	r1, [pc, #44]	; (12d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12d14:	9b01      	ldr	r3, [sp, #4]
   12d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   12d1a:	4a0a      	ldr	r2, [pc, #40]	; (12d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   12d1c:	9b01      	ldr	r3, [sp, #4]
   12d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d22:	f003 0301 	and.w	r3, r3, #1
   12d26:	2b00      	cmp	r3, #0
   12d28:	d106      	bne.n	12d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   12d2a:	4a05      	ldr	r2, [pc, #20]	; (12d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12d2c:	9b01      	ldr	r3, [sp, #4]
   12d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d32:	2b00      	cmp	r3, #0
   12d34:	d100      	bne.n	12d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d38:	bf00      	nop
   12d3a:	b003      	add	sp, #12
   12d3c:	f85d fb04 	ldr.w	pc, [sp], #4
   12d40:	1fff94f0 	.word	0x1fff94f0
   12d44:	1fff94ec 	.word	0x1fff94ec

00012d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   12d48:	b500      	push	{lr}
   12d4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d4c:	f7ee fd14 	bl	1778 <Sys_GetCoreID>
   12d50:	4603      	mov	r3, r0
   12d52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   12d54:	4a10      	ldr	r2, [pc, #64]	; (12d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12d56:	9b01      	ldr	r3, [sp, #4]
   12d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d5c:	2b00      	cmp	r3, #0
   12d5e:	d10d      	bne.n	12d7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d60:	f7ed fdb6 	bl	8d0 <Adc_schm_read_msr>
   12d64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d66:	9b00      	ldr	r3, [sp, #0]
   12d68:	f003 0301 	and.w	r3, r3, #1
   12d6c:	2b00      	cmp	r3, #0
   12d6e:	d100      	bne.n	12d72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   12d72:	490a      	ldr	r1, [pc, #40]	; (12d9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   12d74:	9b01      	ldr	r3, [sp, #4]
   12d76:	9a00      	ldr	r2, [sp, #0]
   12d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   12d7c:	4a06      	ldr	r2, [pc, #24]	; (12d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12d7e:	9b01      	ldr	r3, [sp, #4]
   12d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d84:	1c5a      	adds	r2, r3, #1
   12d86:	4904      	ldr	r1, [pc, #16]	; (12d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12d88:	9b01      	ldr	r3, [sp, #4]
   12d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d8e:	bf00      	nop
   12d90:	b003      	add	sp, #12
   12d92:	f85d fb04 	ldr.w	pc, [sp], #4
   12d96:	bf00      	nop
   12d98:	1fff94f8 	.word	0x1fff94f8
   12d9c:	1fff94f4 	.word	0x1fff94f4

00012da0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   12da0:	b500      	push	{lr}
   12da2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12da4:	f7ee fce8 	bl	1778 <Sys_GetCoreID>
   12da8:	4603      	mov	r3, r0
   12daa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   12dac:	4a0d      	ldr	r2, [pc, #52]	; (12de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12dae:	9b01      	ldr	r3, [sp, #4]
   12db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12db4:	1e5a      	subs	r2, r3, #1
   12db6:	490b      	ldr	r1, [pc, #44]	; (12de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12db8:	9b01      	ldr	r3, [sp, #4]
   12dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   12dbe:	4a0a      	ldr	r2, [pc, #40]	; (12de8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   12dc0:	9b01      	ldr	r3, [sp, #4]
   12dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dc6:	f003 0301 	and.w	r3, r3, #1
   12dca:	2b00      	cmp	r3, #0
   12dcc:	d106      	bne.n	12ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   12dce:	4a05      	ldr	r2, [pc, #20]	; (12de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12dd0:	9b01      	ldr	r3, [sp, #4]
   12dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dd6:	2b00      	cmp	r3, #0
   12dd8:	d100      	bne.n	12ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12dda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ddc:	bf00      	nop
   12dde:	b003      	add	sp, #12
   12de0:	f85d fb04 	ldr.w	pc, [sp], #4
   12de4:	1fff94f8 	.word	0x1fff94f8
   12de8:	1fff94f4 	.word	0x1fff94f4

00012dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   12dec:	b500      	push	{lr}
   12dee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12df0:	f7ee fcc2 	bl	1778 <Sys_GetCoreID>
   12df4:	4603      	mov	r3, r0
   12df6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   12df8:	4a10      	ldr	r2, [pc, #64]	; (12e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12dfa:	9b01      	ldr	r3, [sp, #4]
   12dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e00:	2b00      	cmp	r3, #0
   12e02:	d10d      	bne.n	12e20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e04:	f7ed fd64 	bl	8d0 <Adc_schm_read_msr>
   12e08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e0a:	9b00      	ldr	r3, [sp, #0]
   12e0c:	f003 0301 	and.w	r3, r3, #1
   12e10:	2b00      	cmp	r3, #0
   12e12:	d100      	bne.n	12e16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   12e16:	490a      	ldr	r1, [pc, #40]	; (12e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   12e18:	9b01      	ldr	r3, [sp, #4]
   12e1a:	9a00      	ldr	r2, [sp, #0]
   12e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   12e20:	4a06      	ldr	r2, [pc, #24]	; (12e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12e22:	9b01      	ldr	r3, [sp, #4]
   12e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e28:	1c5a      	adds	r2, r3, #1
   12e2a:	4904      	ldr	r1, [pc, #16]	; (12e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12e2c:	9b01      	ldr	r3, [sp, #4]
   12e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e32:	bf00      	nop
   12e34:	b003      	add	sp, #12
   12e36:	f85d fb04 	ldr.w	pc, [sp], #4
   12e3a:	bf00      	nop
   12e3c:	1fff9500 	.word	0x1fff9500
   12e40:	1fff94fc 	.word	0x1fff94fc

00012e44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   12e44:	b500      	push	{lr}
   12e46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e48:	f7ee fc96 	bl	1778 <Sys_GetCoreID>
   12e4c:	4603      	mov	r3, r0
   12e4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   12e50:	4a0d      	ldr	r2, [pc, #52]	; (12e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12e52:	9b01      	ldr	r3, [sp, #4]
   12e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e58:	1e5a      	subs	r2, r3, #1
   12e5a:	490b      	ldr	r1, [pc, #44]	; (12e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12e5c:	9b01      	ldr	r3, [sp, #4]
   12e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   12e62:	4a0a      	ldr	r2, [pc, #40]	; (12e8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   12e64:	9b01      	ldr	r3, [sp, #4]
   12e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e6a:	f003 0301 	and.w	r3, r3, #1
   12e6e:	2b00      	cmp	r3, #0
   12e70:	d106      	bne.n	12e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   12e72:	4a05      	ldr	r2, [pc, #20]	; (12e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12e74:	9b01      	ldr	r3, [sp, #4]
   12e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e7a:	2b00      	cmp	r3, #0
   12e7c:	d100      	bne.n	12e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e80:	bf00      	nop
   12e82:	b003      	add	sp, #12
   12e84:	f85d fb04 	ldr.w	pc, [sp], #4
   12e88:	1fff9500 	.word	0x1fff9500
   12e8c:	1fff94fc 	.word	0x1fff94fc

00012e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   12e90:	b500      	push	{lr}
   12e92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e94:	f7ee fc70 	bl	1778 <Sys_GetCoreID>
   12e98:	4603      	mov	r3, r0
   12e9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   12e9c:	4a10      	ldr	r2, [pc, #64]	; (12ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12e9e:	9b01      	ldr	r3, [sp, #4]
   12ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ea4:	2b00      	cmp	r3, #0
   12ea6:	d10d      	bne.n	12ec4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ea8:	f7ed fd12 	bl	8d0 <Adc_schm_read_msr>
   12eac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12eae:	9b00      	ldr	r3, [sp, #0]
   12eb0:	f003 0301 	and.w	r3, r3, #1
   12eb4:	2b00      	cmp	r3, #0
   12eb6:	d100      	bne.n	12eba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12eb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   12eba:	490a      	ldr	r1, [pc, #40]	; (12ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   12ebc:	9b01      	ldr	r3, [sp, #4]
   12ebe:	9a00      	ldr	r2, [sp, #0]
   12ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   12ec4:	4a06      	ldr	r2, [pc, #24]	; (12ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12ec6:	9b01      	ldr	r3, [sp, #4]
   12ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ecc:	1c5a      	adds	r2, r3, #1
   12ece:	4904      	ldr	r1, [pc, #16]	; (12ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12ed0:	9b01      	ldr	r3, [sp, #4]
   12ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ed6:	bf00      	nop
   12ed8:	b003      	add	sp, #12
   12eda:	f85d fb04 	ldr.w	pc, [sp], #4
   12ede:	bf00      	nop
   12ee0:	1fff9508 	.word	0x1fff9508
   12ee4:	1fff9504 	.word	0x1fff9504

00012ee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   12ee8:	b500      	push	{lr}
   12eea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12eec:	f7ee fc44 	bl	1778 <Sys_GetCoreID>
   12ef0:	4603      	mov	r3, r0
   12ef2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   12ef4:	4a0d      	ldr	r2, [pc, #52]	; (12f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12ef6:	9b01      	ldr	r3, [sp, #4]
   12ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12efc:	1e5a      	subs	r2, r3, #1
   12efe:	490b      	ldr	r1, [pc, #44]	; (12f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12f00:	9b01      	ldr	r3, [sp, #4]
   12f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   12f06:	4a0a      	ldr	r2, [pc, #40]	; (12f30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   12f08:	9b01      	ldr	r3, [sp, #4]
   12f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f0e:	f003 0301 	and.w	r3, r3, #1
   12f12:	2b00      	cmp	r3, #0
   12f14:	d106      	bne.n	12f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   12f16:	4a05      	ldr	r2, [pc, #20]	; (12f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12f18:	9b01      	ldr	r3, [sp, #4]
   12f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f1e:	2b00      	cmp	r3, #0
   12f20:	d100      	bne.n	12f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f24:	bf00      	nop
   12f26:	b003      	add	sp, #12
   12f28:	f85d fb04 	ldr.w	pc, [sp], #4
   12f2c:	1fff9508 	.word	0x1fff9508
   12f30:	1fff9504 	.word	0x1fff9504

00012f34 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   12f34:	b500      	push	{lr}
   12f36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f38:	f7ee fc1e 	bl	1778 <Sys_GetCoreID>
   12f3c:	4603      	mov	r3, r0
   12f3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
   12f40:	4a10      	ldr	r2, [pc, #64]	; (12f84 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12f42:	9b01      	ldr	r3, [sp, #4]
   12f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f48:	2b00      	cmp	r3, #0
   12f4a:	d10d      	bne.n	12f68 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f4c:	f7ed fcc9 	bl	8e2 <Dio_schm_read_msr>
   12f50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f52:	9b00      	ldr	r3, [sp, #0]
   12f54:	f003 0301 	and.w	r3, r3, #1
   12f58:	2b00      	cmp	r3, #0
   12f5a:	d100      	bne.n	12f5e <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   12f5e:	490a      	ldr	r1, [pc, #40]	; (12f88 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
   12f60:	9b01      	ldr	r3, [sp, #4]
   12f62:	9a00      	ldr	r2, [sp, #0]
   12f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
   12f68:	4a06      	ldr	r2, [pc, #24]	; (12f84 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12f6a:	9b01      	ldr	r3, [sp, #4]
   12f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f70:	1c5a      	adds	r2, r3, #1
   12f72:	4904      	ldr	r1, [pc, #16]	; (12f84 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12f74:	9b01      	ldr	r3, [sp, #4]
   12f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f7a:	bf00      	nop
   12f7c:	b003      	add	sp, #12
   12f7e:	f85d fb04 	ldr.w	pc, [sp], #4
   12f82:	bf00      	nop
   12f84:	1fff9510 	.word	0x1fff9510
   12f88:	1fff950c 	.word	0x1fff950c

00012f8c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   12f8c:	b500      	push	{lr}
   12f8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f90:	f7ee fbf2 	bl	1778 <Sys_GetCoreID>
   12f94:	4603      	mov	r3, r0
   12f96:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
   12f98:	4a0d      	ldr	r2, [pc, #52]	; (12fd0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12f9a:	9b01      	ldr	r3, [sp, #4]
   12f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fa0:	1e5a      	subs	r2, r3, #1
   12fa2:	490b      	ldr	r1, [pc, #44]	; (12fd0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12fa4:	9b01      	ldr	r3, [sp, #4]
   12fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   12faa:	4a0a      	ldr	r2, [pc, #40]	; (12fd4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
   12fac:	9b01      	ldr	r3, [sp, #4]
   12fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fb2:	f003 0301 	and.w	r3, r3, #1
   12fb6:	2b00      	cmp	r3, #0
   12fb8:	d106      	bne.n	12fc8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
   12fba:	4a05      	ldr	r2, [pc, #20]	; (12fd0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12fbc:	9b01      	ldr	r3, [sp, #4]
   12fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	d100      	bne.n	12fc8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12fc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12fc8:	bf00      	nop
   12fca:	b003      	add	sp, #12
   12fcc:	f85d fb04 	ldr.w	pc, [sp], #4
   12fd0:	1fff9510 	.word	0x1fff9510
   12fd4:	1fff950c 	.word	0x1fff950c

00012fd8 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   12fd8:	b500      	push	{lr}
   12fda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fdc:	f7ee fbcc 	bl	1778 <Sys_GetCoreID>
   12fe0:	4603      	mov	r3, r0
   12fe2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
   12fe4:	4a10      	ldr	r2, [pc, #64]	; (13028 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   12fe6:	9b01      	ldr	r3, [sp, #4]
   12fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fec:	2b00      	cmp	r3, #0
   12fee:	d10d      	bne.n	1300c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ff0:	f7ed fc77 	bl	8e2 <Dio_schm_read_msr>
   12ff4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ff6:	9b00      	ldr	r3, [sp, #0]
   12ff8:	f003 0301 	and.w	r3, r3, #1
   12ffc:	2b00      	cmp	r3, #0
   12ffe:	d100      	bne.n	13002 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13000:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   13002:	490a      	ldr	r1, [pc, #40]	; (1302c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
   13004:	9b01      	ldr	r3, [sp, #4]
   13006:	9a00      	ldr	r2, [sp, #0]
   13008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
   1300c:	4a06      	ldr	r2, [pc, #24]	; (13028 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   1300e:	9b01      	ldr	r3, [sp, #4]
   13010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13014:	1c5a      	adds	r2, r3, #1
   13016:	4904      	ldr	r1, [pc, #16]	; (13028 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   13018:	9b01      	ldr	r3, [sp, #4]
   1301a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1301e:	bf00      	nop
   13020:	b003      	add	sp, #12
   13022:	f85d fb04 	ldr.w	pc, [sp], #4
   13026:	bf00      	nop
   13028:	1fff9518 	.word	0x1fff9518
   1302c:	1fff9514 	.word	0x1fff9514

00013030 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   13030:	b500      	push	{lr}
   13032:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13034:	f7ee fba0 	bl	1778 <Sys_GetCoreID>
   13038:	4603      	mov	r3, r0
   1303a:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
   1303c:	4a0d      	ldr	r2, [pc, #52]	; (13074 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   1303e:	9b01      	ldr	r3, [sp, #4]
   13040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13044:	1e5a      	subs	r2, r3, #1
   13046:	490b      	ldr	r1, [pc, #44]	; (13074 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   13048:	9b01      	ldr	r3, [sp, #4]
   1304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1304e:	4a0a      	ldr	r2, [pc, #40]	; (13078 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
   13050:	9b01      	ldr	r3, [sp, #4]
   13052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13056:	f003 0301 	and.w	r3, r3, #1
   1305a:	2b00      	cmp	r3, #0
   1305c:	d106      	bne.n	1306c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
   1305e:	4a05      	ldr	r2, [pc, #20]	; (13074 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   13060:	9b01      	ldr	r3, [sp, #4]
   13062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13066:	2b00      	cmp	r3, #0
   13068:	d100      	bne.n	1306c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1306a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1306c:	bf00      	nop
   1306e:	b003      	add	sp, #12
   13070:	f85d fb04 	ldr.w	pc, [sp], #4
   13074:	1fff9518 	.word	0x1fff9518
   13078:	1fff9514 	.word	0x1fff9514

0001307c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   1307c:	b500      	push	{lr}
   1307e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13080:	f7ee fb7a 	bl	1778 <Sys_GetCoreID>
   13084:	4603      	mov	r3, r0
   13086:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   13088:	4a10      	ldr	r2, [pc, #64]	; (130cc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   1308a:	9b01      	ldr	r3, [sp, #4]
   1308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13090:	2b00      	cmp	r3, #0
   13092:	d10d      	bne.n	130b0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13094:	f7ed fc2e 	bl	8f4 <Mcu_schm_read_msr>
   13098:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1309a:	9b00      	ldr	r3, [sp, #0]
   1309c:	f003 0301 	and.w	r3, r3, #1
   130a0:	2b00      	cmp	r3, #0
   130a2:	d100      	bne.n	130a6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   130a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   130a6:	490a      	ldr	r1, [pc, #40]	; (130d0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   130a8:	9b01      	ldr	r3, [sp, #4]
   130aa:	9a00      	ldr	r2, [sp, #0]
   130ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   130b0:	4a06      	ldr	r2, [pc, #24]	; (130cc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   130b2:	9b01      	ldr	r3, [sp, #4]
   130b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130b8:	1c5a      	adds	r2, r3, #1
   130ba:	4904      	ldr	r1, [pc, #16]	; (130cc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   130bc:	9b01      	ldr	r3, [sp, #4]
   130be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   130c2:	bf00      	nop
   130c4:	b003      	add	sp, #12
   130c6:	f85d fb04 	ldr.w	pc, [sp], #4
   130ca:	bf00      	nop
   130cc:	1fff9520 	.word	0x1fff9520
   130d0:	1fff951c 	.word	0x1fff951c

000130d4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   130d4:	b500      	push	{lr}
   130d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130d8:	f7ee fb4e 	bl	1778 <Sys_GetCoreID>
   130dc:	4603      	mov	r3, r0
   130de:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   130e0:	4a0d      	ldr	r2, [pc, #52]	; (13118 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   130e2:	9b01      	ldr	r3, [sp, #4]
   130e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130e8:	1e5a      	subs	r2, r3, #1
   130ea:	490b      	ldr	r1, [pc, #44]	; (13118 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   130ec:	9b01      	ldr	r3, [sp, #4]
   130ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   130f2:	4a0a      	ldr	r2, [pc, #40]	; (1311c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   130f4:	9b01      	ldr	r3, [sp, #4]
   130f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130fa:	f003 0301 	and.w	r3, r3, #1
   130fe:	2b00      	cmp	r3, #0
   13100:	d106      	bne.n	13110 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   13102:	4a05      	ldr	r2, [pc, #20]	; (13118 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   13104:	9b01      	ldr	r3, [sp, #4]
   13106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1310a:	2b00      	cmp	r3, #0
   1310c:	d100      	bne.n	13110 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1310e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13110:	bf00      	nop
   13112:	b003      	add	sp, #12
   13114:	f85d fb04 	ldr.w	pc, [sp], #4
   13118:	1fff9520 	.word	0x1fff9520
   1311c:	1fff951c 	.word	0x1fff951c

00013120 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   13120:	b500      	push	{lr}
   13122:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13124:	f7ee fb28 	bl	1778 <Sys_GetCoreID>
   13128:	4603      	mov	r3, r0
   1312a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   1312c:	4a10      	ldr	r2, [pc, #64]	; (13170 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   1312e:	9b01      	ldr	r3, [sp, #4]
   13130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13134:	2b00      	cmp	r3, #0
   13136:	d10d      	bne.n	13154 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13138:	f7ed fbdc 	bl	8f4 <Mcu_schm_read_msr>
   1313c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1313e:	9b00      	ldr	r3, [sp, #0]
   13140:	f003 0301 	and.w	r3, r3, #1
   13144:	2b00      	cmp	r3, #0
   13146:	d100      	bne.n	1314a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13148:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1314a:	490a      	ldr	r1, [pc, #40]	; (13174 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   1314c:	9b01      	ldr	r3, [sp, #4]
   1314e:	9a00      	ldr	r2, [sp, #0]
   13150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   13154:	4a06      	ldr	r2, [pc, #24]	; (13170 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   13156:	9b01      	ldr	r3, [sp, #4]
   13158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1315c:	1c5a      	adds	r2, r3, #1
   1315e:	4904      	ldr	r1, [pc, #16]	; (13170 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   13160:	9b01      	ldr	r3, [sp, #4]
   13162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13166:	bf00      	nop
   13168:	b003      	add	sp, #12
   1316a:	f85d fb04 	ldr.w	pc, [sp], #4
   1316e:	bf00      	nop
   13170:	1fff9528 	.word	0x1fff9528
   13174:	1fff9524 	.word	0x1fff9524

00013178 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   13178:	b500      	push	{lr}
   1317a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1317c:	f7ee fafc 	bl	1778 <Sys_GetCoreID>
   13180:	4603      	mov	r3, r0
   13182:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   13184:	4a0d      	ldr	r2, [pc, #52]	; (131bc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   13186:	9b01      	ldr	r3, [sp, #4]
   13188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1318c:	1e5a      	subs	r2, r3, #1
   1318e:	490b      	ldr	r1, [pc, #44]	; (131bc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   13190:	9b01      	ldr	r3, [sp, #4]
   13192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   13196:	4a0a      	ldr	r2, [pc, #40]	; (131c0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   13198:	9b01      	ldr	r3, [sp, #4]
   1319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1319e:	f003 0301 	and.w	r3, r3, #1
   131a2:	2b00      	cmp	r3, #0
   131a4:	d106      	bne.n	131b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   131a6:	4a05      	ldr	r2, [pc, #20]	; (131bc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   131a8:	9b01      	ldr	r3, [sp, #4]
   131aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131ae:	2b00      	cmp	r3, #0
   131b0:	d100      	bne.n	131b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   131b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   131b4:	bf00      	nop
   131b6:	b003      	add	sp, #12
   131b8:	f85d fb04 	ldr.w	pc, [sp], #4
   131bc:	1fff9528 	.word	0x1fff9528
   131c0:	1fff9524 	.word	0x1fff9524

000131c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   131c4:	b500      	push	{lr}
   131c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131c8:	f7ee fad6 	bl	1778 <Sys_GetCoreID>
   131cc:	4603      	mov	r3, r0
   131ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   131d0:	4a10      	ldr	r2, [pc, #64]	; (13214 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   131d2:	9b01      	ldr	r3, [sp, #4]
   131d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131d8:	2b00      	cmp	r3, #0
   131da:	d10d      	bne.n	131f8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   131dc:	f7ed fb8a 	bl	8f4 <Mcu_schm_read_msr>
   131e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   131e2:	9b00      	ldr	r3, [sp, #0]
   131e4:	f003 0301 	and.w	r3, r3, #1
   131e8:	2b00      	cmp	r3, #0
   131ea:	d100      	bne.n	131ee <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   131ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   131ee:	490a      	ldr	r1, [pc, #40]	; (13218 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   131f0:	9b01      	ldr	r3, [sp, #4]
   131f2:	9a00      	ldr	r2, [sp, #0]
   131f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   131f8:	4a06      	ldr	r2, [pc, #24]	; (13214 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   131fa:	9b01      	ldr	r3, [sp, #4]
   131fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13200:	1c5a      	adds	r2, r3, #1
   13202:	4904      	ldr	r1, [pc, #16]	; (13214 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   13204:	9b01      	ldr	r3, [sp, #4]
   13206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1320a:	bf00      	nop
   1320c:	b003      	add	sp, #12
   1320e:	f85d fb04 	ldr.w	pc, [sp], #4
   13212:	bf00      	nop
   13214:	1fff9530 	.word	0x1fff9530
   13218:	1fff952c 	.word	0x1fff952c

0001321c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   1321c:	b500      	push	{lr}
   1321e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13220:	f7ee faaa 	bl	1778 <Sys_GetCoreID>
   13224:	4603      	mov	r3, r0
   13226:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   13228:	4a0d      	ldr	r2, [pc, #52]	; (13260 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   1322a:	9b01      	ldr	r3, [sp, #4]
   1322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13230:	1e5a      	subs	r2, r3, #1
   13232:	490b      	ldr	r1, [pc, #44]	; (13260 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   13234:	9b01      	ldr	r3, [sp, #4]
   13236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   1323a:	4a0a      	ldr	r2, [pc, #40]	; (13264 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   1323c:	9b01      	ldr	r3, [sp, #4]
   1323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13242:	f003 0301 	and.w	r3, r3, #1
   13246:	2b00      	cmp	r3, #0
   13248:	d106      	bne.n	13258 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   1324a:	4a05      	ldr	r2, [pc, #20]	; (13260 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   1324c:	9b01      	ldr	r3, [sp, #4]
   1324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13252:	2b00      	cmp	r3, #0
   13254:	d100      	bne.n	13258 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13256:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13258:	bf00      	nop
   1325a:	b003      	add	sp, #12
   1325c:	f85d fb04 	ldr.w	pc, [sp], #4
   13260:	1fff9530 	.word	0x1fff9530
   13264:	1fff952c 	.word	0x1fff952c

00013268 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   13268:	b500      	push	{lr}
   1326a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1326c:	f7ee fa84 	bl	1778 <Sys_GetCoreID>
   13270:	4603      	mov	r3, r0
   13272:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   13274:	4a10      	ldr	r2, [pc, #64]	; (132b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   13276:	9b01      	ldr	r3, [sp, #4]
   13278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1327c:	2b00      	cmp	r3, #0
   1327e:	d10d      	bne.n	1329c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13280:	f7ed fb41 	bl	906 <Port_schm_read_msr>
   13284:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13286:	9b00      	ldr	r3, [sp, #0]
   13288:	f003 0301 	and.w	r3, r3, #1
   1328c:	2b00      	cmp	r3, #0
   1328e:	d100      	bne.n	13292 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13290:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   13292:	490a      	ldr	r1, [pc, #40]	; (132bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   13294:	9b01      	ldr	r3, [sp, #4]
   13296:	9a00      	ldr	r2, [sp, #0]
   13298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   1329c:	4a06      	ldr	r2, [pc, #24]	; (132b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   1329e:	9b01      	ldr	r3, [sp, #4]
   132a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132a4:	1c5a      	adds	r2, r3, #1
   132a6:	4904      	ldr	r1, [pc, #16]	; (132b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   132a8:	9b01      	ldr	r3, [sp, #4]
   132aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   132ae:	bf00      	nop
   132b0:	b003      	add	sp, #12
   132b2:	f85d fb04 	ldr.w	pc, [sp], #4
   132b6:	bf00      	nop
   132b8:	1fff9538 	.word	0x1fff9538
   132bc:	1fff9534 	.word	0x1fff9534

000132c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   132c0:	b500      	push	{lr}
   132c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132c4:	f7ee fa58 	bl	1778 <Sys_GetCoreID>
   132c8:	4603      	mov	r3, r0
   132ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   132cc:	4a0d      	ldr	r2, [pc, #52]	; (13304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   132ce:	9b01      	ldr	r3, [sp, #4]
   132d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132d4:	1e5a      	subs	r2, r3, #1
   132d6:	490b      	ldr	r1, [pc, #44]	; (13304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   132d8:	9b01      	ldr	r3, [sp, #4]
   132da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   132de:	4a0a      	ldr	r2, [pc, #40]	; (13308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   132e0:	9b01      	ldr	r3, [sp, #4]
   132e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132e6:	f003 0301 	and.w	r3, r3, #1
   132ea:	2b00      	cmp	r3, #0
   132ec:	d106      	bne.n	132fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   132ee:	4a05      	ldr	r2, [pc, #20]	; (13304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   132f0:	9b01      	ldr	r3, [sp, #4]
   132f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132f6:	2b00      	cmp	r3, #0
   132f8:	d100      	bne.n	132fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   132fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   132fc:	bf00      	nop
   132fe:	b003      	add	sp, #12
   13300:	f85d fb04 	ldr.w	pc, [sp], #4
   13304:	1fff9538 	.word	0x1fff9538
   13308:	1fff9534 	.word	0x1fff9534

0001330c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   1330c:	b500      	push	{lr}
   1330e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13310:	f7ee fa32 	bl	1778 <Sys_GetCoreID>
   13314:	4603      	mov	r3, r0
   13316:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   13318:	4a10      	ldr	r2, [pc, #64]	; (1335c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   1331a:	9b01      	ldr	r3, [sp, #4]
   1331c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13320:	2b00      	cmp	r3, #0
   13322:	d10d      	bne.n	13340 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13324:	f7ed faef 	bl	906 <Port_schm_read_msr>
   13328:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1332a:	9b00      	ldr	r3, [sp, #0]
   1332c:	f003 0301 	and.w	r3, r3, #1
   13330:	2b00      	cmp	r3, #0
   13332:	d100      	bne.n	13336 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13334:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   13336:	490a      	ldr	r1, [pc, #40]	; (13360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   13338:	9b01      	ldr	r3, [sp, #4]
   1333a:	9a00      	ldr	r2, [sp, #0]
   1333c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   13340:	4a06      	ldr	r2, [pc, #24]	; (1335c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   13342:	9b01      	ldr	r3, [sp, #4]
   13344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13348:	1c5a      	adds	r2, r3, #1
   1334a:	4904      	ldr	r1, [pc, #16]	; (1335c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   1334c:	9b01      	ldr	r3, [sp, #4]
   1334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13352:	bf00      	nop
   13354:	b003      	add	sp, #12
   13356:	f85d fb04 	ldr.w	pc, [sp], #4
   1335a:	bf00      	nop
   1335c:	1fff9540 	.word	0x1fff9540
   13360:	1fff953c 	.word	0x1fff953c

00013364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   13364:	b500      	push	{lr}
   13366:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13368:	f7ee fa06 	bl	1778 <Sys_GetCoreID>
   1336c:	4603      	mov	r3, r0
   1336e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   13370:	4a0d      	ldr	r2, [pc, #52]	; (133a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   13372:	9b01      	ldr	r3, [sp, #4]
   13374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13378:	1e5a      	subs	r2, r3, #1
   1337a:	490b      	ldr	r1, [pc, #44]	; (133a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   1337c:	9b01      	ldr	r3, [sp, #4]
   1337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   13382:	4a0a      	ldr	r2, [pc, #40]	; (133ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   13384:	9b01      	ldr	r3, [sp, #4]
   13386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1338a:	f003 0301 	and.w	r3, r3, #1
   1338e:	2b00      	cmp	r3, #0
   13390:	d106      	bne.n	133a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   13392:	4a05      	ldr	r2, [pc, #20]	; (133a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   13394:	9b01      	ldr	r3, [sp, #4]
   13396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1339a:	2b00      	cmp	r3, #0
   1339c:	d100      	bne.n	133a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1339e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133a0:	bf00      	nop
   133a2:	b003      	add	sp, #12
   133a4:	f85d fb04 	ldr.w	pc, [sp], #4
   133a8:	1fff9540 	.word	0x1fff9540
   133ac:	1fff953c 	.word	0x1fff953c

000133b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   133b0:	b500      	push	{lr}
   133b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133b4:	f7ee f9e0 	bl	1778 <Sys_GetCoreID>
   133b8:	4603      	mov	r3, r0
   133ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   133bc:	4a10      	ldr	r2, [pc, #64]	; (13400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   133be:	9b01      	ldr	r3, [sp, #4]
   133c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133c4:	2b00      	cmp	r3, #0
   133c6:	d10d      	bne.n	133e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   133c8:	f7ed fa9d 	bl	906 <Port_schm_read_msr>
   133cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   133ce:	9b00      	ldr	r3, [sp, #0]
   133d0:	f003 0301 	and.w	r3, r3, #1
   133d4:	2b00      	cmp	r3, #0
   133d6:	d100      	bne.n	133da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   133d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   133da:	490a      	ldr	r1, [pc, #40]	; (13404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   133dc:	9b01      	ldr	r3, [sp, #4]
   133de:	9a00      	ldr	r2, [sp, #0]
   133e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   133e4:	4a06      	ldr	r2, [pc, #24]	; (13400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   133e6:	9b01      	ldr	r3, [sp, #4]
   133e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133ec:	1c5a      	adds	r2, r3, #1
   133ee:	4904      	ldr	r1, [pc, #16]	; (13400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   133f0:	9b01      	ldr	r3, [sp, #4]
   133f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   133f6:	bf00      	nop
   133f8:	b003      	add	sp, #12
   133fa:	f85d fb04 	ldr.w	pc, [sp], #4
   133fe:	bf00      	nop
   13400:	1fff9548 	.word	0x1fff9548
   13404:	1fff9544 	.word	0x1fff9544

00013408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   13408:	b500      	push	{lr}
   1340a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1340c:	f7ee f9b4 	bl	1778 <Sys_GetCoreID>
   13410:	4603      	mov	r3, r0
   13412:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   13414:	4a0d      	ldr	r2, [pc, #52]	; (1344c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   13416:	9b01      	ldr	r3, [sp, #4]
   13418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1341c:	1e5a      	subs	r2, r3, #1
   1341e:	490b      	ldr	r1, [pc, #44]	; (1344c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   13420:	9b01      	ldr	r3, [sp, #4]
   13422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   13426:	4a0a      	ldr	r2, [pc, #40]	; (13450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   13428:	9b01      	ldr	r3, [sp, #4]
   1342a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1342e:	f003 0301 	and.w	r3, r3, #1
   13432:	2b00      	cmp	r3, #0
   13434:	d106      	bne.n	13444 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   13436:	4a05      	ldr	r2, [pc, #20]	; (1344c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   13438:	9b01      	ldr	r3, [sp, #4]
   1343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1343e:	2b00      	cmp	r3, #0
   13440:	d100      	bne.n	13444 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13442:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13444:	bf00      	nop
   13446:	b003      	add	sp, #12
   13448:	f85d fb04 	ldr.w	pc, [sp], #4
   1344c:	1fff9548 	.word	0x1fff9548
   13450:	1fff9544 	.word	0x1fff9544

00013454 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   13454:	b500      	push	{lr}
   13456:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13458:	f7ee f98e 	bl	1778 <Sys_GetCoreID>
   1345c:	4603      	mov	r3, r0
   1345e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   13460:	4a10      	ldr	r2, [pc, #64]	; (134a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   13462:	9b01      	ldr	r3, [sp, #4]
   13464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13468:	2b00      	cmp	r3, #0
   1346a:	d10d      	bne.n	13488 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1346c:	f7ed fa4b 	bl	906 <Port_schm_read_msr>
   13470:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13472:	9b00      	ldr	r3, [sp, #0]
   13474:	f003 0301 	and.w	r3, r3, #1
   13478:	2b00      	cmp	r3, #0
   1347a:	d100      	bne.n	1347e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1347c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1347e:	490a      	ldr	r1, [pc, #40]	; (134a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   13480:	9b01      	ldr	r3, [sp, #4]
   13482:	9a00      	ldr	r2, [sp, #0]
   13484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   13488:	4a06      	ldr	r2, [pc, #24]	; (134a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   1348a:	9b01      	ldr	r3, [sp, #4]
   1348c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13490:	1c5a      	adds	r2, r3, #1
   13492:	4904      	ldr	r1, [pc, #16]	; (134a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   13494:	9b01      	ldr	r3, [sp, #4]
   13496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1349a:	bf00      	nop
   1349c:	b003      	add	sp, #12
   1349e:	f85d fb04 	ldr.w	pc, [sp], #4
   134a2:	bf00      	nop
   134a4:	1fff9550 	.word	0x1fff9550
   134a8:	1fff954c 	.word	0x1fff954c

000134ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   134ac:	b500      	push	{lr}
   134ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134b0:	f7ee f962 	bl	1778 <Sys_GetCoreID>
   134b4:	4603      	mov	r3, r0
   134b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   134b8:	4a0d      	ldr	r2, [pc, #52]	; (134f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   134ba:	9b01      	ldr	r3, [sp, #4]
   134bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134c0:	1e5a      	subs	r2, r3, #1
   134c2:	490b      	ldr	r1, [pc, #44]	; (134f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   134c4:	9b01      	ldr	r3, [sp, #4]
   134c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   134ca:	4a0a      	ldr	r2, [pc, #40]	; (134f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   134cc:	9b01      	ldr	r3, [sp, #4]
   134ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134d2:	f003 0301 	and.w	r3, r3, #1
   134d6:	2b00      	cmp	r3, #0
   134d8:	d106      	bne.n	134e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   134da:	4a05      	ldr	r2, [pc, #20]	; (134f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   134dc:	9b01      	ldr	r3, [sp, #4]
   134de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134e2:	2b00      	cmp	r3, #0
   134e4:	d100      	bne.n	134e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   134e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   134e8:	bf00      	nop
   134ea:	b003      	add	sp, #12
   134ec:	f85d fb04 	ldr.w	pc, [sp], #4
   134f0:	1fff9550 	.word	0x1fff9550
   134f4:	1fff954c 	.word	0x1fff954c

000134f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   134f8:	b500      	push	{lr}
   134fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134fc:	f7ee f93c 	bl	1778 <Sys_GetCoreID>
   13500:	4603      	mov	r3, r0
   13502:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   13504:	4a10      	ldr	r2, [pc, #64]	; (13548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   13506:	9b01      	ldr	r3, [sp, #4]
   13508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1350c:	2b00      	cmp	r3, #0
   1350e:	d10d      	bne.n	1352c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13510:	f7ed f9f9 	bl	906 <Port_schm_read_msr>
   13514:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13516:	9b00      	ldr	r3, [sp, #0]
   13518:	f003 0301 	and.w	r3, r3, #1
   1351c:	2b00      	cmp	r3, #0
   1351e:	d100      	bne.n	13522 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13520:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   13522:	490a      	ldr	r1, [pc, #40]	; (1354c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   13524:	9b01      	ldr	r3, [sp, #4]
   13526:	9a00      	ldr	r2, [sp, #0]
   13528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   1352c:	4a06      	ldr	r2, [pc, #24]	; (13548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   1352e:	9b01      	ldr	r3, [sp, #4]
   13530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13534:	1c5a      	adds	r2, r3, #1
   13536:	4904      	ldr	r1, [pc, #16]	; (13548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   13538:	9b01      	ldr	r3, [sp, #4]
   1353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1353e:	bf00      	nop
   13540:	b003      	add	sp, #12
   13542:	f85d fb04 	ldr.w	pc, [sp], #4
   13546:	bf00      	nop
   13548:	1fff9558 	.word	0x1fff9558
   1354c:	1fff9554 	.word	0x1fff9554

00013550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   13550:	b500      	push	{lr}
   13552:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13554:	f7ee f910 	bl	1778 <Sys_GetCoreID>
   13558:	4603      	mov	r3, r0
   1355a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   1355c:	4a0d      	ldr	r2, [pc, #52]	; (13594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   1355e:	9b01      	ldr	r3, [sp, #4]
   13560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13564:	1e5a      	subs	r2, r3, #1
   13566:	490b      	ldr	r1, [pc, #44]	; (13594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   13568:	9b01      	ldr	r3, [sp, #4]
   1356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1356e:	4a0a      	ldr	r2, [pc, #40]	; (13598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   13570:	9b01      	ldr	r3, [sp, #4]
   13572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13576:	f003 0301 	and.w	r3, r3, #1
   1357a:	2b00      	cmp	r3, #0
   1357c:	d106      	bne.n	1358c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   1357e:	4a05      	ldr	r2, [pc, #20]	; (13594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   13580:	9b01      	ldr	r3, [sp, #4]
   13582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13586:	2b00      	cmp	r3, #0
   13588:	d100      	bne.n	1358c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1358a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1358c:	bf00      	nop
   1358e:	b003      	add	sp, #12
   13590:	f85d fb04 	ldr.w	pc, [sp], #4
   13594:	1fff9558 	.word	0x1fff9558
   13598:	1fff9554 	.word	0x1fff9554

0001359c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   1359c:	b500      	push	{lr}
   1359e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135a0:	f7ee f8ea 	bl	1778 <Sys_GetCoreID>
   135a4:	4603      	mov	r3, r0
   135a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   135a8:	4a10      	ldr	r2, [pc, #64]	; (135ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   135aa:	9b01      	ldr	r3, [sp, #4]
   135ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135b0:	2b00      	cmp	r3, #0
   135b2:	d10d      	bne.n	135d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   135b4:	f7ed f9a7 	bl	906 <Port_schm_read_msr>
   135b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   135ba:	9b00      	ldr	r3, [sp, #0]
   135bc:	f003 0301 	and.w	r3, r3, #1
   135c0:	2b00      	cmp	r3, #0
   135c2:	d100      	bne.n	135c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   135c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   135c6:	490a      	ldr	r1, [pc, #40]	; (135f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   135c8:	9b01      	ldr	r3, [sp, #4]
   135ca:	9a00      	ldr	r2, [sp, #0]
   135cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   135d0:	4a06      	ldr	r2, [pc, #24]	; (135ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   135d2:	9b01      	ldr	r3, [sp, #4]
   135d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135d8:	1c5a      	adds	r2, r3, #1
   135da:	4904      	ldr	r1, [pc, #16]	; (135ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   135dc:	9b01      	ldr	r3, [sp, #4]
   135de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   135e2:	bf00      	nop
   135e4:	b003      	add	sp, #12
   135e6:	f85d fb04 	ldr.w	pc, [sp], #4
   135ea:	bf00      	nop
   135ec:	1fff9560 	.word	0x1fff9560
   135f0:	1fff955c 	.word	0x1fff955c

000135f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   135f4:	b500      	push	{lr}
   135f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135f8:	f7ee f8be 	bl	1778 <Sys_GetCoreID>
   135fc:	4603      	mov	r3, r0
   135fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   13600:	4a0d      	ldr	r2, [pc, #52]	; (13638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   13602:	9b01      	ldr	r3, [sp, #4]
   13604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13608:	1e5a      	subs	r2, r3, #1
   1360a:	490b      	ldr	r1, [pc, #44]	; (13638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   1360c:	9b01      	ldr	r3, [sp, #4]
   1360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   13612:	4a0a      	ldr	r2, [pc, #40]	; (1363c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   13614:	9b01      	ldr	r3, [sp, #4]
   13616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1361a:	f003 0301 	and.w	r3, r3, #1
   1361e:	2b00      	cmp	r3, #0
   13620:	d106      	bne.n	13630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   13622:	4a05      	ldr	r2, [pc, #20]	; (13638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   13624:	9b01      	ldr	r3, [sp, #4]
   13626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1362a:	2b00      	cmp	r3, #0
   1362c:	d100      	bne.n	13630 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1362e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13630:	bf00      	nop
   13632:	b003      	add	sp, #12
   13634:	f85d fb04 	ldr.w	pc, [sp], #4
   13638:	1fff9560 	.word	0x1fff9560
   1363c:	1fff955c 	.word	0x1fff955c

00013640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   13640:	b500      	push	{lr}
   13642:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13644:	f7ee f898 	bl	1778 <Sys_GetCoreID>
   13648:	4603      	mov	r3, r0
   1364a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   1364c:	4a10      	ldr	r2, [pc, #64]	; (13690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   1364e:	9b01      	ldr	r3, [sp, #4]
   13650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13654:	2b00      	cmp	r3, #0
   13656:	d10d      	bne.n	13674 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13658:	f7ed f955 	bl	906 <Port_schm_read_msr>
   1365c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1365e:	9b00      	ldr	r3, [sp, #0]
   13660:	f003 0301 	and.w	r3, r3, #1
   13664:	2b00      	cmp	r3, #0
   13666:	d100      	bne.n	1366a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13668:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   1366a:	490a      	ldr	r1, [pc, #40]	; (13694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   1366c:	9b01      	ldr	r3, [sp, #4]
   1366e:	9a00      	ldr	r2, [sp, #0]
   13670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   13674:	4a06      	ldr	r2, [pc, #24]	; (13690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   13676:	9b01      	ldr	r3, [sp, #4]
   13678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1367c:	1c5a      	adds	r2, r3, #1
   1367e:	4904      	ldr	r1, [pc, #16]	; (13690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   13680:	9b01      	ldr	r3, [sp, #4]
   13682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13686:	bf00      	nop
   13688:	b003      	add	sp, #12
   1368a:	f85d fb04 	ldr.w	pc, [sp], #4
   1368e:	bf00      	nop
   13690:	1fff9568 	.word	0x1fff9568
   13694:	1fff9564 	.word	0x1fff9564

00013698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   13698:	b500      	push	{lr}
   1369a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1369c:	f7ee f86c 	bl	1778 <Sys_GetCoreID>
   136a0:	4603      	mov	r3, r0
   136a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   136a4:	4a0d      	ldr	r2, [pc, #52]	; (136dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   136a6:	9b01      	ldr	r3, [sp, #4]
   136a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ac:	1e5a      	subs	r2, r3, #1
   136ae:	490b      	ldr	r1, [pc, #44]	; (136dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   136b0:	9b01      	ldr	r3, [sp, #4]
   136b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   136b6:	4a0a      	ldr	r2, [pc, #40]	; (136e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   136b8:	9b01      	ldr	r3, [sp, #4]
   136ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136be:	f003 0301 	and.w	r3, r3, #1
   136c2:	2b00      	cmp	r3, #0
   136c4:	d106      	bne.n	136d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   136c6:	4a05      	ldr	r2, [pc, #20]	; (136dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   136c8:	9b01      	ldr	r3, [sp, #4]
   136ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ce:	2b00      	cmp	r3, #0
   136d0:	d100      	bne.n	136d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   136d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   136d4:	bf00      	nop
   136d6:	b003      	add	sp, #12
   136d8:	f85d fb04 	ldr.w	pc, [sp], #4
   136dc:	1fff9568 	.word	0x1fff9568
   136e0:	1fff9564 	.word	0x1fff9564

000136e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   136e4:	b500      	push	{lr}
   136e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136e8:	f7ee f846 	bl	1778 <Sys_GetCoreID>
   136ec:	4603      	mov	r3, r0
   136ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   136f0:	4a10      	ldr	r2, [pc, #64]	; (13734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   136f2:	9b01      	ldr	r3, [sp, #4]
   136f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136f8:	2b00      	cmp	r3, #0
   136fa:	d10d      	bne.n	13718 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   136fc:	f7ed f903 	bl	906 <Port_schm_read_msr>
   13700:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13702:	9b00      	ldr	r3, [sp, #0]
   13704:	f003 0301 	and.w	r3, r3, #1
   13708:	2b00      	cmp	r3, #0
   1370a:	d100      	bne.n	1370e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1370c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   1370e:	490a      	ldr	r1, [pc, #40]	; (13738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   13710:	9b01      	ldr	r3, [sp, #4]
   13712:	9a00      	ldr	r2, [sp, #0]
   13714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   13718:	4a06      	ldr	r2, [pc, #24]	; (13734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1371a:	9b01      	ldr	r3, [sp, #4]
   1371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13720:	1c5a      	adds	r2, r3, #1
   13722:	4904      	ldr	r1, [pc, #16]	; (13734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   13724:	9b01      	ldr	r3, [sp, #4]
   13726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1372a:	bf00      	nop
   1372c:	b003      	add	sp, #12
   1372e:	f85d fb04 	ldr.w	pc, [sp], #4
   13732:	bf00      	nop
   13734:	1fff9570 	.word	0x1fff9570
   13738:	1fff956c 	.word	0x1fff956c

0001373c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   1373c:	b500      	push	{lr}
   1373e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13740:	f7ee f81a 	bl	1778 <Sys_GetCoreID>
   13744:	4603      	mov	r3, r0
   13746:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   13748:	4a0d      	ldr	r2, [pc, #52]	; (13780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   1374a:	9b01      	ldr	r3, [sp, #4]
   1374c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13750:	1e5a      	subs	r2, r3, #1
   13752:	490b      	ldr	r1, [pc, #44]	; (13780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   13754:	9b01      	ldr	r3, [sp, #4]
   13756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   1375a:	4a0a      	ldr	r2, [pc, #40]	; (13784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   1375c:	9b01      	ldr	r3, [sp, #4]
   1375e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13762:	f003 0301 	and.w	r3, r3, #1
   13766:	2b00      	cmp	r3, #0
   13768:	d106      	bne.n	13778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   1376a:	4a05      	ldr	r2, [pc, #20]	; (13780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   1376c:	9b01      	ldr	r3, [sp, #4]
   1376e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13772:	2b00      	cmp	r3, #0
   13774:	d100      	bne.n	13778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13776:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13778:	bf00      	nop
   1377a:	b003      	add	sp, #12
   1377c:	f85d fb04 	ldr.w	pc, [sp], #4
   13780:	1fff9570 	.word	0x1fff9570
   13784:	1fff956c 	.word	0x1fff956c

00013788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   13788:	b500      	push	{lr}
   1378a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1378c:	f7ed fff4 	bl	1778 <Sys_GetCoreID>
   13790:	4603      	mov	r3, r0
   13792:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   13794:	4a10      	ldr	r2, [pc, #64]	; (137d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   13796:	9b01      	ldr	r3, [sp, #4]
   13798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1379c:	2b00      	cmp	r3, #0
   1379e:	d10d      	bne.n	137bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137a0:	f7ed f8b1 	bl	906 <Port_schm_read_msr>
   137a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   137a6:	9b00      	ldr	r3, [sp, #0]
   137a8:	f003 0301 	and.w	r3, r3, #1
   137ac:	2b00      	cmp	r3, #0
   137ae:	d100      	bne.n	137b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   137b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   137b2:	490a      	ldr	r1, [pc, #40]	; (137dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   137b4:	9b01      	ldr	r3, [sp, #4]
   137b6:	9a00      	ldr	r2, [sp, #0]
   137b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   137bc:	4a06      	ldr	r2, [pc, #24]	; (137d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   137be:	9b01      	ldr	r3, [sp, #4]
   137c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137c4:	1c5a      	adds	r2, r3, #1
   137c6:	4904      	ldr	r1, [pc, #16]	; (137d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   137c8:	9b01      	ldr	r3, [sp, #4]
   137ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   137ce:	bf00      	nop
   137d0:	b003      	add	sp, #12
   137d2:	f85d fb04 	ldr.w	pc, [sp], #4
   137d6:	bf00      	nop
   137d8:	1fff9578 	.word	0x1fff9578
   137dc:	1fff9574 	.word	0x1fff9574

000137e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   137e0:	b500      	push	{lr}
   137e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137e4:	f7ed ffc8 	bl	1778 <Sys_GetCoreID>
   137e8:	4603      	mov	r3, r0
   137ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   137ec:	4a0d      	ldr	r2, [pc, #52]	; (13824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   137ee:	9b01      	ldr	r3, [sp, #4]
   137f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137f4:	1e5a      	subs	r2, r3, #1
   137f6:	490b      	ldr	r1, [pc, #44]	; (13824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   137f8:	9b01      	ldr	r3, [sp, #4]
   137fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   137fe:	4a0a      	ldr	r2, [pc, #40]	; (13828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   13800:	9b01      	ldr	r3, [sp, #4]
   13802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13806:	f003 0301 	and.w	r3, r3, #1
   1380a:	2b00      	cmp	r3, #0
   1380c:	d106      	bne.n	1381c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   1380e:	4a05      	ldr	r2, [pc, #20]	; (13824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   13810:	9b01      	ldr	r3, [sp, #4]
   13812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13816:	2b00      	cmp	r3, #0
   13818:	d100      	bne.n	1381c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1381a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1381c:	bf00      	nop
   1381e:	b003      	add	sp, #12
   13820:	f85d fb04 	ldr.w	pc, [sp], #4
   13824:	1fff9578 	.word	0x1fff9578
   13828:	1fff9574 	.word	0x1fff9574

0001382c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   1382c:	b500      	push	{lr}
   1382e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13830:	f7ed ffa2 	bl	1778 <Sys_GetCoreID>
   13834:	4603      	mov	r3, r0
   13836:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   13838:	4a10      	ldr	r2, [pc, #64]	; (1387c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   1383a:	9b01      	ldr	r3, [sp, #4]
   1383c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13840:	2b00      	cmp	r3, #0
   13842:	d10d      	bne.n	13860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13844:	f7ed f85f 	bl	906 <Port_schm_read_msr>
   13848:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1384a:	9b00      	ldr	r3, [sp, #0]
   1384c:	f003 0301 	and.w	r3, r3, #1
   13850:	2b00      	cmp	r3, #0
   13852:	d100      	bne.n	13856 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13854:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   13856:	490a      	ldr	r1, [pc, #40]	; (13880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   13858:	9b01      	ldr	r3, [sp, #4]
   1385a:	9a00      	ldr	r2, [sp, #0]
   1385c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   13860:	4a06      	ldr	r2, [pc, #24]	; (1387c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   13862:	9b01      	ldr	r3, [sp, #4]
   13864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13868:	1c5a      	adds	r2, r3, #1
   1386a:	4904      	ldr	r1, [pc, #16]	; (1387c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   1386c:	9b01      	ldr	r3, [sp, #4]
   1386e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13872:	bf00      	nop
   13874:	b003      	add	sp, #12
   13876:	f85d fb04 	ldr.w	pc, [sp], #4
   1387a:	bf00      	nop
   1387c:	1fff9580 	.word	0x1fff9580
   13880:	1fff957c 	.word	0x1fff957c

00013884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   13884:	b500      	push	{lr}
   13886:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13888:	f7ed ff76 	bl	1778 <Sys_GetCoreID>
   1388c:	4603      	mov	r3, r0
   1388e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   13890:	4a0d      	ldr	r2, [pc, #52]	; (138c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   13892:	9b01      	ldr	r3, [sp, #4]
   13894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13898:	1e5a      	subs	r2, r3, #1
   1389a:	490b      	ldr	r1, [pc, #44]	; (138c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   1389c:	9b01      	ldr	r3, [sp, #4]
   1389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   138a2:	4a0a      	ldr	r2, [pc, #40]	; (138cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   138a4:	9b01      	ldr	r3, [sp, #4]
   138a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138aa:	f003 0301 	and.w	r3, r3, #1
   138ae:	2b00      	cmp	r3, #0
   138b0:	d106      	bne.n	138c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   138b2:	4a05      	ldr	r2, [pc, #20]	; (138c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   138b4:	9b01      	ldr	r3, [sp, #4]
   138b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138ba:	2b00      	cmp	r3, #0
   138bc:	d100      	bne.n	138c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   138be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   138c0:	bf00      	nop
   138c2:	b003      	add	sp, #12
   138c4:	f85d fb04 	ldr.w	pc, [sp], #4
   138c8:	1fff9580 	.word	0x1fff9580
   138cc:	1fff957c 	.word	0x1fff957c

000138d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   138d0:	b500      	push	{lr}
   138d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138d4:	f7ed ff50 	bl	1778 <Sys_GetCoreID>
   138d8:	4603      	mov	r3, r0
   138da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   138dc:	4a10      	ldr	r2, [pc, #64]	; (13920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   138de:	9b01      	ldr	r3, [sp, #4]
   138e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138e4:	2b00      	cmp	r3, #0
   138e6:	d10d      	bne.n	13904 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   138e8:	f7ed f80d 	bl	906 <Port_schm_read_msr>
   138ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   138ee:	9b00      	ldr	r3, [sp, #0]
   138f0:	f003 0301 	and.w	r3, r3, #1
   138f4:	2b00      	cmp	r3, #0
   138f6:	d100      	bne.n	138fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   138f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   138fa:	490a      	ldr	r1, [pc, #40]	; (13924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   138fc:	9b01      	ldr	r3, [sp, #4]
   138fe:	9a00      	ldr	r2, [sp, #0]
   13900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   13904:	4a06      	ldr	r2, [pc, #24]	; (13920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   13906:	9b01      	ldr	r3, [sp, #4]
   13908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1390c:	1c5a      	adds	r2, r3, #1
   1390e:	4904      	ldr	r1, [pc, #16]	; (13920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   13910:	9b01      	ldr	r3, [sp, #4]
   13912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13916:	bf00      	nop
   13918:	b003      	add	sp, #12
   1391a:	f85d fb04 	ldr.w	pc, [sp], #4
   1391e:	bf00      	nop
   13920:	1fff9588 	.word	0x1fff9588
   13924:	1fff9584 	.word	0x1fff9584

00013928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   13928:	b500      	push	{lr}
   1392a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1392c:	f7ed ff24 	bl	1778 <Sys_GetCoreID>
   13930:	4603      	mov	r3, r0
   13932:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   13934:	4a0d      	ldr	r2, [pc, #52]	; (1396c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   13936:	9b01      	ldr	r3, [sp, #4]
   13938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1393c:	1e5a      	subs	r2, r3, #1
   1393e:	490b      	ldr	r1, [pc, #44]	; (1396c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   13940:	9b01      	ldr	r3, [sp, #4]
   13942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   13946:	4a0a      	ldr	r2, [pc, #40]	; (13970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   13948:	9b01      	ldr	r3, [sp, #4]
   1394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1394e:	f003 0301 	and.w	r3, r3, #1
   13952:	2b00      	cmp	r3, #0
   13954:	d106      	bne.n	13964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   13956:	4a05      	ldr	r2, [pc, #20]	; (1396c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   13958:	9b01      	ldr	r3, [sp, #4]
   1395a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1395e:	2b00      	cmp	r3, #0
   13960:	d100      	bne.n	13964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13962:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13964:	bf00      	nop
   13966:	b003      	add	sp, #12
   13968:	f85d fb04 	ldr.w	pc, [sp], #4
   1396c:	1fff9588 	.word	0x1fff9588
   13970:	1fff9584 	.word	0x1fff9584

00013974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   13974:	b500      	push	{lr}
   13976:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13978:	f7ed fefe 	bl	1778 <Sys_GetCoreID>
   1397c:	4603      	mov	r3, r0
   1397e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   13980:	4a10      	ldr	r2, [pc, #64]	; (139c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   13982:	9b01      	ldr	r3, [sp, #4]
   13984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13988:	2b00      	cmp	r3, #0
   1398a:	d10d      	bne.n	139a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1398c:	f7ec ffbb 	bl	906 <Port_schm_read_msr>
   13990:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13992:	9b00      	ldr	r3, [sp, #0]
   13994:	f003 0301 	and.w	r3, r3, #1
   13998:	2b00      	cmp	r3, #0
   1399a:	d100      	bne.n	1399e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1399c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   1399e:	490a      	ldr	r1, [pc, #40]	; (139c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   139a0:	9b01      	ldr	r3, [sp, #4]
   139a2:	9a00      	ldr	r2, [sp, #0]
   139a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   139a8:	4a06      	ldr	r2, [pc, #24]	; (139c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   139aa:	9b01      	ldr	r3, [sp, #4]
   139ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139b0:	1c5a      	adds	r2, r3, #1
   139b2:	4904      	ldr	r1, [pc, #16]	; (139c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   139b4:	9b01      	ldr	r3, [sp, #4]
   139b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   139ba:	bf00      	nop
   139bc:	b003      	add	sp, #12
   139be:	f85d fb04 	ldr.w	pc, [sp], #4
   139c2:	bf00      	nop
   139c4:	1fff9590 	.word	0x1fff9590
   139c8:	1fff958c 	.word	0x1fff958c

000139cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   139cc:	b500      	push	{lr}
   139ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139d0:	f7ed fed2 	bl	1778 <Sys_GetCoreID>
   139d4:	4603      	mov	r3, r0
   139d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   139d8:	4a0d      	ldr	r2, [pc, #52]	; (13a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   139da:	9b01      	ldr	r3, [sp, #4]
   139dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139e0:	1e5a      	subs	r2, r3, #1
   139e2:	490b      	ldr	r1, [pc, #44]	; (13a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   139e4:	9b01      	ldr	r3, [sp, #4]
   139e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   139ea:	4a0a      	ldr	r2, [pc, #40]	; (13a14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   139ec:	9b01      	ldr	r3, [sp, #4]
   139ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139f2:	f003 0301 	and.w	r3, r3, #1
   139f6:	2b00      	cmp	r3, #0
   139f8:	d106      	bne.n	13a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   139fa:	4a05      	ldr	r2, [pc, #20]	; (13a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   139fc:	9b01      	ldr	r3, [sp, #4]
   139fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a02:	2b00      	cmp	r3, #0
   13a04:	d100      	bne.n	13a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a08:	bf00      	nop
   13a0a:	b003      	add	sp, #12
   13a0c:	f85d fb04 	ldr.w	pc, [sp], #4
   13a10:	1fff9590 	.word	0x1fff9590
   13a14:	1fff958c 	.word	0x1fff958c

00013a18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   13a18:	b500      	push	{lr}
   13a1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a1c:	f7ed feac 	bl	1778 <Sys_GetCoreID>
   13a20:	4603      	mov	r3, r0
   13a22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   13a24:	4a10      	ldr	r2, [pc, #64]	; (13a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   13a26:	9b01      	ldr	r3, [sp, #4]
   13a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a2c:	2b00      	cmp	r3, #0
   13a2e:	d10d      	bne.n	13a4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a30:	f7ec ff69 	bl	906 <Port_schm_read_msr>
   13a34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a36:	9b00      	ldr	r3, [sp, #0]
   13a38:	f003 0301 	and.w	r3, r3, #1
   13a3c:	2b00      	cmp	r3, #0
   13a3e:	d100      	bne.n	13a42 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   13a42:	490a      	ldr	r1, [pc, #40]	; (13a6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   13a44:	9b01      	ldr	r3, [sp, #4]
   13a46:	9a00      	ldr	r2, [sp, #0]
   13a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   13a4c:	4a06      	ldr	r2, [pc, #24]	; (13a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   13a4e:	9b01      	ldr	r3, [sp, #4]
   13a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a54:	1c5a      	adds	r2, r3, #1
   13a56:	4904      	ldr	r1, [pc, #16]	; (13a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   13a58:	9b01      	ldr	r3, [sp, #4]
   13a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a5e:	bf00      	nop
   13a60:	b003      	add	sp, #12
   13a62:	f85d fb04 	ldr.w	pc, [sp], #4
   13a66:	bf00      	nop
   13a68:	1fff9598 	.word	0x1fff9598
   13a6c:	1fff9594 	.word	0x1fff9594

00013a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   13a70:	b500      	push	{lr}
   13a72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a74:	f7ed fe80 	bl	1778 <Sys_GetCoreID>
   13a78:	4603      	mov	r3, r0
   13a7a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   13a7c:	4a0d      	ldr	r2, [pc, #52]	; (13ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13a7e:	9b01      	ldr	r3, [sp, #4]
   13a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a84:	1e5a      	subs	r2, r3, #1
   13a86:	490b      	ldr	r1, [pc, #44]	; (13ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13a88:	9b01      	ldr	r3, [sp, #4]
   13a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   13a8e:	4a0a      	ldr	r2, [pc, #40]	; (13ab8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   13a90:	9b01      	ldr	r3, [sp, #4]
   13a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a96:	f003 0301 	and.w	r3, r3, #1
   13a9a:	2b00      	cmp	r3, #0
   13a9c:	d106      	bne.n	13aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   13a9e:	4a05      	ldr	r2, [pc, #20]	; (13ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13aa0:	9b01      	ldr	r3, [sp, #4]
   13aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aa6:	2b00      	cmp	r3, #0
   13aa8:	d100      	bne.n	13aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13aaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13aac:	bf00      	nop
   13aae:	b003      	add	sp, #12
   13ab0:	f85d fb04 	ldr.w	pc, [sp], #4
   13ab4:	1fff9598 	.word	0x1fff9598
   13ab8:	1fff9594 	.word	0x1fff9594

00013abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   13abc:	b500      	push	{lr}
   13abe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ac0:	f7ed fe5a 	bl	1778 <Sys_GetCoreID>
   13ac4:	4603      	mov	r3, r0
   13ac6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   13ac8:	4a10      	ldr	r2, [pc, #64]	; (13b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   13aca:	9b01      	ldr	r3, [sp, #4]
   13acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ad0:	2b00      	cmp	r3, #0
   13ad2:	d10d      	bne.n	13af0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ad4:	f7ec ff17 	bl	906 <Port_schm_read_msr>
   13ad8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ada:	9b00      	ldr	r3, [sp, #0]
   13adc:	f003 0301 	and.w	r3, r3, #1
   13ae0:	2b00      	cmp	r3, #0
   13ae2:	d100      	bne.n	13ae6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ae4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   13ae6:	490a      	ldr	r1, [pc, #40]	; (13b10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   13ae8:	9b01      	ldr	r3, [sp, #4]
   13aea:	9a00      	ldr	r2, [sp, #0]
   13aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   13af0:	4a06      	ldr	r2, [pc, #24]	; (13b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   13af2:	9b01      	ldr	r3, [sp, #4]
   13af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13af8:	1c5a      	adds	r2, r3, #1
   13afa:	4904      	ldr	r1, [pc, #16]	; (13b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   13afc:	9b01      	ldr	r3, [sp, #4]
   13afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b02:	bf00      	nop
   13b04:	b003      	add	sp, #12
   13b06:	f85d fb04 	ldr.w	pc, [sp], #4
   13b0a:	bf00      	nop
   13b0c:	1fff95a0 	.word	0x1fff95a0
   13b10:	1fff959c 	.word	0x1fff959c

00013b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   13b14:	b500      	push	{lr}
   13b16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b18:	f7ed fe2e 	bl	1778 <Sys_GetCoreID>
   13b1c:	4603      	mov	r3, r0
   13b1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   13b20:	4a0d      	ldr	r2, [pc, #52]	; (13b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   13b22:	9b01      	ldr	r3, [sp, #4]
   13b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b28:	1e5a      	subs	r2, r3, #1
   13b2a:	490b      	ldr	r1, [pc, #44]	; (13b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   13b2c:	9b01      	ldr	r3, [sp, #4]
   13b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   13b32:	4a0a      	ldr	r2, [pc, #40]	; (13b5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   13b34:	9b01      	ldr	r3, [sp, #4]
   13b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b3a:	f003 0301 	and.w	r3, r3, #1
   13b3e:	2b00      	cmp	r3, #0
   13b40:	d106      	bne.n	13b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   13b42:	4a05      	ldr	r2, [pc, #20]	; (13b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   13b44:	9b01      	ldr	r3, [sp, #4]
   13b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b4a:	2b00      	cmp	r3, #0
   13b4c:	d100      	bne.n	13b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b50:	bf00      	nop
   13b52:	b003      	add	sp, #12
   13b54:	f85d fb04 	ldr.w	pc, [sp], #4
   13b58:	1fff95a0 	.word	0x1fff95a0
   13b5c:	1fff959c 	.word	0x1fff959c

00013b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   13b60:	b500      	push	{lr}
   13b62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b64:	f7ed fe08 	bl	1778 <Sys_GetCoreID>
   13b68:	4603      	mov	r3, r0
   13b6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   13b6c:	4a10      	ldr	r2, [pc, #64]	; (13bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   13b6e:	9b01      	ldr	r3, [sp, #4]
   13b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b74:	2b00      	cmp	r3, #0
   13b76:	d10d      	bne.n	13b94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b78:	f7ec fec5 	bl	906 <Port_schm_read_msr>
   13b7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b7e:	9b00      	ldr	r3, [sp, #0]
   13b80:	f003 0301 	and.w	r3, r3, #1
   13b84:	2b00      	cmp	r3, #0
   13b86:	d100      	bne.n	13b8a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   13b8a:	490a      	ldr	r1, [pc, #40]	; (13bb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   13b8c:	9b01      	ldr	r3, [sp, #4]
   13b8e:	9a00      	ldr	r2, [sp, #0]
   13b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   13b94:	4a06      	ldr	r2, [pc, #24]	; (13bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   13b96:	9b01      	ldr	r3, [sp, #4]
   13b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b9c:	1c5a      	adds	r2, r3, #1
   13b9e:	4904      	ldr	r1, [pc, #16]	; (13bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   13ba0:	9b01      	ldr	r3, [sp, #4]
   13ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ba6:	bf00      	nop
   13ba8:	b003      	add	sp, #12
   13baa:	f85d fb04 	ldr.w	pc, [sp], #4
   13bae:	bf00      	nop
   13bb0:	1fff95a8 	.word	0x1fff95a8
   13bb4:	1fff95a4 	.word	0x1fff95a4

00013bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   13bb8:	b500      	push	{lr}
   13bba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bbc:	f7ed fddc 	bl	1778 <Sys_GetCoreID>
   13bc0:	4603      	mov	r3, r0
   13bc2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   13bc4:	4a0d      	ldr	r2, [pc, #52]	; (13bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   13bc6:	9b01      	ldr	r3, [sp, #4]
   13bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bcc:	1e5a      	subs	r2, r3, #1
   13bce:	490b      	ldr	r1, [pc, #44]	; (13bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   13bd0:	9b01      	ldr	r3, [sp, #4]
   13bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   13bd6:	4a0a      	ldr	r2, [pc, #40]	; (13c00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   13bd8:	9b01      	ldr	r3, [sp, #4]
   13bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bde:	f003 0301 	and.w	r3, r3, #1
   13be2:	2b00      	cmp	r3, #0
   13be4:	d106      	bne.n	13bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   13be6:	4a05      	ldr	r2, [pc, #20]	; (13bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   13be8:	9b01      	ldr	r3, [sp, #4]
   13bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bee:	2b00      	cmp	r3, #0
   13bf0:	d100      	bne.n	13bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13bf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13bf4:	bf00      	nop
   13bf6:	b003      	add	sp, #12
   13bf8:	f85d fb04 	ldr.w	pc, [sp], #4
   13bfc:	1fff95a8 	.word	0x1fff95a8
   13c00:	1fff95a4 	.word	0x1fff95a4

00013c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   13c04:	b500      	push	{lr}
   13c06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c08:	f7ed fdb6 	bl	1778 <Sys_GetCoreID>
   13c0c:	4603      	mov	r3, r0
   13c0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   13c10:	4a10      	ldr	r2, [pc, #64]	; (13c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   13c12:	9b01      	ldr	r3, [sp, #4]
   13c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c18:	2b00      	cmp	r3, #0
   13c1a:	d10d      	bne.n	13c38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c1c:	f7ec fe73 	bl	906 <Port_schm_read_msr>
   13c20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c22:	9b00      	ldr	r3, [sp, #0]
   13c24:	f003 0301 	and.w	r3, r3, #1
   13c28:	2b00      	cmp	r3, #0
   13c2a:	d100      	bne.n	13c2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   13c2e:	490a      	ldr	r1, [pc, #40]	; (13c58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   13c30:	9b01      	ldr	r3, [sp, #4]
   13c32:	9a00      	ldr	r2, [sp, #0]
   13c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   13c38:	4a06      	ldr	r2, [pc, #24]	; (13c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   13c3a:	9b01      	ldr	r3, [sp, #4]
   13c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c40:	1c5a      	adds	r2, r3, #1
   13c42:	4904      	ldr	r1, [pc, #16]	; (13c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   13c44:	9b01      	ldr	r3, [sp, #4]
   13c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c4a:	bf00      	nop
   13c4c:	b003      	add	sp, #12
   13c4e:	f85d fb04 	ldr.w	pc, [sp], #4
   13c52:	bf00      	nop
   13c54:	1fff95b0 	.word	0x1fff95b0
   13c58:	1fff95ac 	.word	0x1fff95ac

00013c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   13c5c:	b500      	push	{lr}
   13c5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c60:	f7ed fd8a 	bl	1778 <Sys_GetCoreID>
   13c64:	4603      	mov	r3, r0
   13c66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   13c68:	4a0d      	ldr	r2, [pc, #52]	; (13ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13c6a:	9b01      	ldr	r3, [sp, #4]
   13c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c70:	1e5a      	subs	r2, r3, #1
   13c72:	490b      	ldr	r1, [pc, #44]	; (13ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13c74:	9b01      	ldr	r3, [sp, #4]
   13c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   13c7a:	4a0a      	ldr	r2, [pc, #40]	; (13ca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   13c7c:	9b01      	ldr	r3, [sp, #4]
   13c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c82:	f003 0301 	and.w	r3, r3, #1
   13c86:	2b00      	cmp	r3, #0
   13c88:	d106      	bne.n	13c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   13c8a:	4a05      	ldr	r2, [pc, #20]	; (13ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13c8c:	9b01      	ldr	r3, [sp, #4]
   13c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c92:	2b00      	cmp	r3, #0
   13c94:	d100      	bne.n	13c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c98:	bf00      	nop
   13c9a:	b003      	add	sp, #12
   13c9c:	f85d fb04 	ldr.w	pc, [sp], #4
   13ca0:	1fff95b0 	.word	0x1fff95b0
   13ca4:	1fff95ac 	.word	0x1fff95ac

00013ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   13ca8:	b500      	push	{lr}
   13caa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cac:	f7ed fd64 	bl	1778 <Sys_GetCoreID>
   13cb0:	4603      	mov	r3, r0
   13cb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   13cb4:	4a10      	ldr	r2, [pc, #64]	; (13cf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13cb6:	9b01      	ldr	r3, [sp, #4]
   13cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cbc:	2b00      	cmp	r3, #0
   13cbe:	d10d      	bne.n	13cdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13cc0:	f7ec fe21 	bl	906 <Port_schm_read_msr>
   13cc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13cc6:	9b00      	ldr	r3, [sp, #0]
   13cc8:	f003 0301 	and.w	r3, r3, #1
   13ccc:	2b00      	cmp	r3, #0
   13cce:	d100      	bne.n	13cd2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13cd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   13cd2:	490a      	ldr	r1, [pc, #40]	; (13cfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   13cd4:	9b01      	ldr	r3, [sp, #4]
   13cd6:	9a00      	ldr	r2, [sp, #0]
   13cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   13cdc:	4a06      	ldr	r2, [pc, #24]	; (13cf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13cde:	9b01      	ldr	r3, [sp, #4]
   13ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ce4:	1c5a      	adds	r2, r3, #1
   13ce6:	4904      	ldr	r1, [pc, #16]	; (13cf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13ce8:	9b01      	ldr	r3, [sp, #4]
   13cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13cee:	bf00      	nop
   13cf0:	b003      	add	sp, #12
   13cf2:	f85d fb04 	ldr.w	pc, [sp], #4
   13cf6:	bf00      	nop
   13cf8:	1fff95b8 	.word	0x1fff95b8
   13cfc:	1fff95b4 	.word	0x1fff95b4

00013d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   13d00:	b500      	push	{lr}
   13d02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d04:	f7ed fd38 	bl	1778 <Sys_GetCoreID>
   13d08:	4603      	mov	r3, r0
   13d0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   13d0c:	4a0d      	ldr	r2, [pc, #52]	; (13d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13d0e:	9b01      	ldr	r3, [sp, #4]
   13d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d14:	1e5a      	subs	r2, r3, #1
   13d16:	490b      	ldr	r1, [pc, #44]	; (13d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13d18:	9b01      	ldr	r3, [sp, #4]
   13d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   13d1e:	4a0a      	ldr	r2, [pc, #40]	; (13d48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   13d20:	9b01      	ldr	r3, [sp, #4]
   13d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d26:	f003 0301 	and.w	r3, r3, #1
   13d2a:	2b00      	cmp	r3, #0
   13d2c:	d106      	bne.n	13d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   13d2e:	4a05      	ldr	r2, [pc, #20]	; (13d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13d30:	9b01      	ldr	r3, [sp, #4]
   13d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d36:	2b00      	cmp	r3, #0
   13d38:	d100      	bne.n	13d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d3c:	bf00      	nop
   13d3e:	b003      	add	sp, #12
   13d40:	f85d fb04 	ldr.w	pc, [sp], #4
   13d44:	1fff95b8 	.word	0x1fff95b8
   13d48:	1fff95b4 	.word	0x1fff95b4

00013d4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   13d4c:	b500      	push	{lr}
   13d4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d50:	f7ed fd12 	bl	1778 <Sys_GetCoreID>
   13d54:	4603      	mov	r3, r0
   13d56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   13d58:	4a10      	ldr	r2, [pc, #64]	; (13d9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13d5a:	9b01      	ldr	r3, [sp, #4]
   13d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d60:	2b00      	cmp	r3, #0
   13d62:	d10d      	bne.n	13d80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d64:	f7ec fdcf 	bl	906 <Port_schm_read_msr>
   13d68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d6a:	9b00      	ldr	r3, [sp, #0]
   13d6c:	f003 0301 	and.w	r3, r3, #1
   13d70:	2b00      	cmp	r3, #0
   13d72:	d100      	bne.n	13d76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   13d76:	490a      	ldr	r1, [pc, #40]	; (13da0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   13d78:	9b01      	ldr	r3, [sp, #4]
   13d7a:	9a00      	ldr	r2, [sp, #0]
   13d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   13d80:	4a06      	ldr	r2, [pc, #24]	; (13d9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13d82:	9b01      	ldr	r3, [sp, #4]
   13d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d88:	1c5a      	adds	r2, r3, #1
   13d8a:	4904      	ldr	r1, [pc, #16]	; (13d9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13d8c:	9b01      	ldr	r3, [sp, #4]
   13d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d92:	bf00      	nop
   13d94:	b003      	add	sp, #12
   13d96:	f85d fb04 	ldr.w	pc, [sp], #4
   13d9a:	bf00      	nop
   13d9c:	1fff95c0 	.word	0x1fff95c0
   13da0:	1fff95bc 	.word	0x1fff95bc

00013da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   13da4:	b500      	push	{lr}
   13da6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13da8:	f7ed fce6 	bl	1778 <Sys_GetCoreID>
   13dac:	4603      	mov	r3, r0
   13dae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   13db0:	4a0d      	ldr	r2, [pc, #52]	; (13de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13db2:	9b01      	ldr	r3, [sp, #4]
   13db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13db8:	1e5a      	subs	r2, r3, #1
   13dba:	490b      	ldr	r1, [pc, #44]	; (13de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13dbc:	9b01      	ldr	r3, [sp, #4]
   13dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   13dc2:	4a0a      	ldr	r2, [pc, #40]	; (13dec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   13dc4:	9b01      	ldr	r3, [sp, #4]
   13dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dca:	f003 0301 	and.w	r3, r3, #1
   13dce:	2b00      	cmp	r3, #0
   13dd0:	d106      	bne.n	13de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   13dd2:	4a05      	ldr	r2, [pc, #20]	; (13de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13dd4:	9b01      	ldr	r3, [sp, #4]
   13dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dda:	2b00      	cmp	r3, #0
   13ddc:	d100      	bne.n	13de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13dde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13de0:	bf00      	nop
   13de2:	b003      	add	sp, #12
   13de4:	f85d fb04 	ldr.w	pc, [sp], #4
   13de8:	1fff95c0 	.word	0x1fff95c0
   13dec:	1fff95bc 	.word	0x1fff95bc

00013df0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   13df0:	b500      	push	{lr}
   13df2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13df4:	f7ed fcc0 	bl	1778 <Sys_GetCoreID>
   13df8:	4603      	mov	r3, r0
   13dfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   13dfc:	4a10      	ldr	r2, [pc, #64]	; (13e40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13dfe:	9b01      	ldr	r3, [sp, #4]
   13e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e04:	2b00      	cmp	r3, #0
   13e06:	d10d      	bne.n	13e24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e08:	f7ec fd7d 	bl	906 <Port_schm_read_msr>
   13e0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e0e:	9b00      	ldr	r3, [sp, #0]
   13e10:	f003 0301 	and.w	r3, r3, #1
   13e14:	2b00      	cmp	r3, #0
   13e16:	d100      	bne.n	13e1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   13e1a:	490a      	ldr	r1, [pc, #40]	; (13e44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   13e1c:	9b01      	ldr	r3, [sp, #4]
   13e1e:	9a00      	ldr	r2, [sp, #0]
   13e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   13e24:	4a06      	ldr	r2, [pc, #24]	; (13e40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13e26:	9b01      	ldr	r3, [sp, #4]
   13e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e2c:	1c5a      	adds	r2, r3, #1
   13e2e:	4904      	ldr	r1, [pc, #16]	; (13e40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13e30:	9b01      	ldr	r3, [sp, #4]
   13e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e36:	bf00      	nop
   13e38:	b003      	add	sp, #12
   13e3a:	f85d fb04 	ldr.w	pc, [sp], #4
   13e3e:	bf00      	nop
   13e40:	1fff95c8 	.word	0x1fff95c8
   13e44:	1fff95c4 	.word	0x1fff95c4

00013e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   13e48:	b500      	push	{lr}
   13e4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e4c:	f7ed fc94 	bl	1778 <Sys_GetCoreID>
   13e50:	4603      	mov	r3, r0
   13e52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   13e54:	4a0d      	ldr	r2, [pc, #52]	; (13e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13e56:	9b01      	ldr	r3, [sp, #4]
   13e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e5c:	1e5a      	subs	r2, r3, #1
   13e5e:	490b      	ldr	r1, [pc, #44]	; (13e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13e60:	9b01      	ldr	r3, [sp, #4]
   13e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   13e66:	4a0a      	ldr	r2, [pc, #40]	; (13e90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   13e68:	9b01      	ldr	r3, [sp, #4]
   13e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e6e:	f003 0301 	and.w	r3, r3, #1
   13e72:	2b00      	cmp	r3, #0
   13e74:	d106      	bne.n	13e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   13e76:	4a05      	ldr	r2, [pc, #20]	; (13e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13e78:	9b01      	ldr	r3, [sp, #4]
   13e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e7e:	2b00      	cmp	r3, #0
   13e80:	d100      	bne.n	13e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e84:	bf00      	nop
   13e86:	b003      	add	sp, #12
   13e88:	f85d fb04 	ldr.w	pc, [sp], #4
   13e8c:	1fff95c8 	.word	0x1fff95c8
   13e90:	1fff95c4 	.word	0x1fff95c4

00013e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   13e94:	b500      	push	{lr}
   13e96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e98:	f7ed fc6e 	bl	1778 <Sys_GetCoreID>
   13e9c:	4603      	mov	r3, r0
   13e9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   13ea0:	4a10      	ldr	r2, [pc, #64]	; (13ee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13ea2:	9b01      	ldr	r3, [sp, #4]
   13ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ea8:	2b00      	cmp	r3, #0
   13eaa:	d10d      	bne.n	13ec8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13eac:	f7ec fd2b 	bl	906 <Port_schm_read_msr>
   13eb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13eb2:	9b00      	ldr	r3, [sp, #0]
   13eb4:	f003 0301 	and.w	r3, r3, #1
   13eb8:	2b00      	cmp	r3, #0
   13eba:	d100      	bne.n	13ebe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ebc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   13ebe:	490a      	ldr	r1, [pc, #40]	; (13ee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   13ec0:	9b01      	ldr	r3, [sp, #4]
   13ec2:	9a00      	ldr	r2, [sp, #0]
   13ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   13ec8:	4a06      	ldr	r2, [pc, #24]	; (13ee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13eca:	9b01      	ldr	r3, [sp, #4]
   13ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ed0:	1c5a      	adds	r2, r3, #1
   13ed2:	4904      	ldr	r1, [pc, #16]	; (13ee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13ed4:	9b01      	ldr	r3, [sp, #4]
   13ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13eda:	bf00      	nop
   13edc:	b003      	add	sp, #12
   13ede:	f85d fb04 	ldr.w	pc, [sp], #4
   13ee2:	bf00      	nop
   13ee4:	1fff95d0 	.word	0x1fff95d0
   13ee8:	1fff95cc 	.word	0x1fff95cc

00013eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   13eec:	b500      	push	{lr}
   13eee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ef0:	f7ed fc42 	bl	1778 <Sys_GetCoreID>
   13ef4:	4603      	mov	r3, r0
   13ef6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   13ef8:	4a0d      	ldr	r2, [pc, #52]	; (13f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13efa:	9b01      	ldr	r3, [sp, #4]
   13efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f00:	1e5a      	subs	r2, r3, #1
   13f02:	490b      	ldr	r1, [pc, #44]	; (13f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13f04:	9b01      	ldr	r3, [sp, #4]
   13f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   13f0a:	4a0a      	ldr	r2, [pc, #40]	; (13f34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   13f0c:	9b01      	ldr	r3, [sp, #4]
   13f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f12:	f003 0301 	and.w	r3, r3, #1
   13f16:	2b00      	cmp	r3, #0
   13f18:	d106      	bne.n	13f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   13f1a:	4a05      	ldr	r2, [pc, #20]	; (13f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13f1c:	9b01      	ldr	r3, [sp, #4]
   13f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f22:	2b00      	cmp	r3, #0
   13f24:	d100      	bne.n	13f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f28:	bf00      	nop
   13f2a:	b003      	add	sp, #12
   13f2c:	f85d fb04 	ldr.w	pc, [sp], #4
   13f30:	1fff95d0 	.word	0x1fff95d0
   13f34:	1fff95cc 	.word	0x1fff95cc

00013f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   13f38:	b500      	push	{lr}
   13f3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f3c:	f7ed fc1c 	bl	1778 <Sys_GetCoreID>
   13f40:	4603      	mov	r3, r0
   13f42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   13f44:	4a10      	ldr	r2, [pc, #64]	; (13f88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13f46:	9b01      	ldr	r3, [sp, #4]
   13f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	d10d      	bne.n	13f6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f50:	f7ec fcd9 	bl	906 <Port_schm_read_msr>
   13f54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f56:	9b00      	ldr	r3, [sp, #0]
   13f58:	f003 0301 	and.w	r3, r3, #1
   13f5c:	2b00      	cmp	r3, #0
   13f5e:	d100      	bne.n	13f62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   13f62:	490a      	ldr	r1, [pc, #40]	; (13f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   13f64:	9b01      	ldr	r3, [sp, #4]
   13f66:	9a00      	ldr	r2, [sp, #0]
   13f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   13f6c:	4a06      	ldr	r2, [pc, #24]	; (13f88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13f6e:	9b01      	ldr	r3, [sp, #4]
   13f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f74:	1c5a      	adds	r2, r3, #1
   13f76:	4904      	ldr	r1, [pc, #16]	; (13f88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13f78:	9b01      	ldr	r3, [sp, #4]
   13f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f7e:	bf00      	nop
   13f80:	b003      	add	sp, #12
   13f82:	f85d fb04 	ldr.w	pc, [sp], #4
   13f86:	bf00      	nop
   13f88:	1fff95d8 	.word	0x1fff95d8
   13f8c:	1fff95d4 	.word	0x1fff95d4

00013f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   13f90:	b500      	push	{lr}
   13f92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f94:	f7ed fbf0 	bl	1778 <Sys_GetCoreID>
   13f98:	4603      	mov	r3, r0
   13f9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   13f9c:	4a0d      	ldr	r2, [pc, #52]	; (13fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13f9e:	9b01      	ldr	r3, [sp, #4]
   13fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fa4:	1e5a      	subs	r2, r3, #1
   13fa6:	490b      	ldr	r1, [pc, #44]	; (13fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13fa8:	9b01      	ldr	r3, [sp, #4]
   13faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   13fae:	4a0a      	ldr	r2, [pc, #40]	; (13fd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   13fb0:	9b01      	ldr	r3, [sp, #4]
   13fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fb6:	f003 0301 	and.w	r3, r3, #1
   13fba:	2b00      	cmp	r3, #0
   13fbc:	d106      	bne.n	13fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   13fbe:	4a05      	ldr	r2, [pc, #20]	; (13fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13fc0:	9b01      	ldr	r3, [sp, #4]
   13fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fc6:	2b00      	cmp	r3, #0
   13fc8:	d100      	bne.n	13fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13fca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13fcc:	bf00      	nop
   13fce:	b003      	add	sp, #12
   13fd0:	f85d fb04 	ldr.w	pc, [sp], #4
   13fd4:	1fff95d8 	.word	0x1fff95d8
   13fd8:	1fff95d4 	.word	0x1fff95d4

00013fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   13fdc:	b500      	push	{lr}
   13fde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fe0:	f7ed fbca 	bl	1778 <Sys_GetCoreID>
   13fe4:	4603      	mov	r3, r0
   13fe6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   13fe8:	4a10      	ldr	r2, [pc, #64]	; (1402c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   13fea:	9b01      	ldr	r3, [sp, #4]
   13fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ff0:	2b00      	cmp	r3, #0
   13ff2:	d10d      	bne.n	14010 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ff4:	f7ec fc87 	bl	906 <Port_schm_read_msr>
   13ff8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ffa:	9b00      	ldr	r3, [sp, #0]
   13ffc:	f003 0301 	and.w	r3, r3, #1
   14000:	2b00      	cmp	r3, #0
   14002:	d100      	bne.n	14006 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14004:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   14006:	490a      	ldr	r1, [pc, #40]	; (14030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   14008:	9b01      	ldr	r3, [sp, #4]
   1400a:	9a00      	ldr	r2, [sp, #0]
   1400c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   14010:	4a06      	ldr	r2, [pc, #24]	; (1402c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   14012:	9b01      	ldr	r3, [sp, #4]
   14014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14018:	1c5a      	adds	r2, r3, #1
   1401a:	4904      	ldr	r1, [pc, #16]	; (1402c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   1401c:	9b01      	ldr	r3, [sp, #4]
   1401e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14022:	bf00      	nop
   14024:	b003      	add	sp, #12
   14026:	f85d fb04 	ldr.w	pc, [sp], #4
   1402a:	bf00      	nop
   1402c:	1fff95e0 	.word	0x1fff95e0
   14030:	1fff95dc 	.word	0x1fff95dc

00014034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   14034:	b500      	push	{lr}
   14036:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14038:	f7ed fb9e 	bl	1778 <Sys_GetCoreID>
   1403c:	4603      	mov	r3, r0
   1403e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   14040:	4a0d      	ldr	r2, [pc, #52]	; (14078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   14042:	9b01      	ldr	r3, [sp, #4]
   14044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14048:	1e5a      	subs	r2, r3, #1
   1404a:	490b      	ldr	r1, [pc, #44]	; (14078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1404c:	9b01      	ldr	r3, [sp, #4]
   1404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   14052:	4a0a      	ldr	r2, [pc, #40]	; (1407c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   14054:	9b01      	ldr	r3, [sp, #4]
   14056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1405a:	f003 0301 	and.w	r3, r3, #1
   1405e:	2b00      	cmp	r3, #0
   14060:	d106      	bne.n	14070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   14062:	4a05      	ldr	r2, [pc, #20]	; (14078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   14064:	9b01      	ldr	r3, [sp, #4]
   14066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1406a:	2b00      	cmp	r3, #0
   1406c:	d100      	bne.n	14070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1406e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14070:	bf00      	nop
   14072:	b003      	add	sp, #12
   14074:	f85d fb04 	ldr.w	pc, [sp], #4
   14078:	1fff95e0 	.word	0x1fff95e0
   1407c:	1fff95dc 	.word	0x1fff95dc

00014080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   14080:	b500      	push	{lr}
   14082:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14084:	f7ed fb78 	bl	1778 <Sys_GetCoreID>
   14088:	4603      	mov	r3, r0
   1408a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   1408c:	4a10      	ldr	r2, [pc, #64]	; (140d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   1408e:	9b01      	ldr	r3, [sp, #4]
   14090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14094:	2b00      	cmp	r3, #0
   14096:	d10d      	bne.n	140b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14098:	f7ec fc35 	bl	906 <Port_schm_read_msr>
   1409c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1409e:	9b00      	ldr	r3, [sp, #0]
   140a0:	f003 0301 	and.w	r3, r3, #1
   140a4:	2b00      	cmp	r3, #0
   140a6:	d100      	bne.n	140aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   140a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   140aa:	490a      	ldr	r1, [pc, #40]	; (140d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   140ac:	9b01      	ldr	r3, [sp, #4]
   140ae:	9a00      	ldr	r2, [sp, #0]
   140b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   140b4:	4a06      	ldr	r2, [pc, #24]	; (140d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   140b6:	9b01      	ldr	r3, [sp, #4]
   140b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140bc:	1c5a      	adds	r2, r3, #1
   140be:	4904      	ldr	r1, [pc, #16]	; (140d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   140c0:	9b01      	ldr	r3, [sp, #4]
   140c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   140c6:	bf00      	nop
   140c8:	b003      	add	sp, #12
   140ca:	f85d fb04 	ldr.w	pc, [sp], #4
   140ce:	bf00      	nop
   140d0:	1fff95e8 	.word	0x1fff95e8
   140d4:	1fff95e4 	.word	0x1fff95e4

000140d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   140d8:	b500      	push	{lr}
   140da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140dc:	f7ed fb4c 	bl	1778 <Sys_GetCoreID>
   140e0:	4603      	mov	r3, r0
   140e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   140e4:	4a0d      	ldr	r2, [pc, #52]	; (1411c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   140e6:	9b01      	ldr	r3, [sp, #4]
   140e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140ec:	1e5a      	subs	r2, r3, #1
   140ee:	490b      	ldr	r1, [pc, #44]	; (1411c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   140f0:	9b01      	ldr	r3, [sp, #4]
   140f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   140f6:	4a0a      	ldr	r2, [pc, #40]	; (14120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   140f8:	9b01      	ldr	r3, [sp, #4]
   140fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140fe:	f003 0301 	and.w	r3, r3, #1
   14102:	2b00      	cmp	r3, #0
   14104:	d106      	bne.n	14114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   14106:	4a05      	ldr	r2, [pc, #20]	; (1411c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   14108:	9b01      	ldr	r3, [sp, #4]
   1410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1410e:	2b00      	cmp	r3, #0
   14110:	d100      	bne.n	14114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14112:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14114:	bf00      	nop
   14116:	b003      	add	sp, #12
   14118:	f85d fb04 	ldr.w	pc, [sp], #4
   1411c:	1fff95e8 	.word	0x1fff95e8
   14120:	1fff95e4 	.word	0x1fff95e4

00014124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   14124:	b500      	push	{lr}
   14126:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14128:	f7ed fb26 	bl	1778 <Sys_GetCoreID>
   1412c:	4603      	mov	r3, r0
   1412e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   14130:	4a10      	ldr	r2, [pc, #64]	; (14174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   14132:	9b01      	ldr	r3, [sp, #4]
   14134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14138:	2b00      	cmp	r3, #0
   1413a:	d10d      	bne.n	14158 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1413c:	f7ec fbe3 	bl	906 <Port_schm_read_msr>
   14140:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14142:	9b00      	ldr	r3, [sp, #0]
   14144:	f003 0301 	and.w	r3, r3, #1
   14148:	2b00      	cmp	r3, #0
   1414a:	d100      	bne.n	1414e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1414c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   1414e:	490a      	ldr	r1, [pc, #40]	; (14178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   14150:	9b01      	ldr	r3, [sp, #4]
   14152:	9a00      	ldr	r2, [sp, #0]
   14154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   14158:	4a06      	ldr	r2, [pc, #24]	; (14174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1415a:	9b01      	ldr	r3, [sp, #4]
   1415c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14160:	1c5a      	adds	r2, r3, #1
   14162:	4904      	ldr	r1, [pc, #16]	; (14174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   14164:	9b01      	ldr	r3, [sp, #4]
   14166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1416a:	bf00      	nop
   1416c:	b003      	add	sp, #12
   1416e:	f85d fb04 	ldr.w	pc, [sp], #4
   14172:	bf00      	nop
   14174:	1fff95f0 	.word	0x1fff95f0
   14178:	1fff95ec 	.word	0x1fff95ec

0001417c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   1417c:	b500      	push	{lr}
   1417e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14180:	f7ed fafa 	bl	1778 <Sys_GetCoreID>
   14184:	4603      	mov	r3, r0
   14186:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   14188:	4a0d      	ldr	r2, [pc, #52]	; (141c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   1418a:	9b01      	ldr	r3, [sp, #4]
   1418c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14190:	1e5a      	subs	r2, r3, #1
   14192:	490b      	ldr	r1, [pc, #44]	; (141c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   14194:	9b01      	ldr	r3, [sp, #4]
   14196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   1419a:	4a0a      	ldr	r2, [pc, #40]	; (141c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   1419c:	9b01      	ldr	r3, [sp, #4]
   1419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141a2:	f003 0301 	and.w	r3, r3, #1
   141a6:	2b00      	cmp	r3, #0
   141a8:	d106      	bne.n	141b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   141aa:	4a05      	ldr	r2, [pc, #20]	; (141c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   141ac:	9b01      	ldr	r3, [sp, #4]
   141ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141b2:	2b00      	cmp	r3, #0
   141b4:	d100      	bne.n	141b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   141b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   141b8:	bf00      	nop
   141ba:	b003      	add	sp, #12
   141bc:	f85d fb04 	ldr.w	pc, [sp], #4
   141c0:	1fff95f0 	.word	0x1fff95f0
   141c4:	1fff95ec 	.word	0x1fff95ec

000141c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   141c8:	b500      	push	{lr}
   141ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141cc:	f7ed fad4 	bl	1778 <Sys_GetCoreID>
   141d0:	4603      	mov	r3, r0
   141d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   141d4:	4a10      	ldr	r2, [pc, #64]	; (14218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   141d6:	9b01      	ldr	r3, [sp, #4]
   141d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141dc:	2b00      	cmp	r3, #0
   141de:	d10d      	bne.n	141fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   141e0:	f7ec fb91 	bl	906 <Port_schm_read_msr>
   141e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   141e6:	9b00      	ldr	r3, [sp, #0]
   141e8:	f003 0301 	and.w	r3, r3, #1
   141ec:	2b00      	cmp	r3, #0
   141ee:	d100      	bne.n	141f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   141f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   141f2:	490a      	ldr	r1, [pc, #40]	; (1421c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   141f4:	9b01      	ldr	r3, [sp, #4]
   141f6:	9a00      	ldr	r2, [sp, #0]
   141f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   141fc:	4a06      	ldr	r2, [pc, #24]	; (14218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   141fe:	9b01      	ldr	r3, [sp, #4]
   14200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14204:	1c5a      	adds	r2, r3, #1
   14206:	4904      	ldr	r1, [pc, #16]	; (14218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   14208:	9b01      	ldr	r3, [sp, #4]
   1420a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1420e:	bf00      	nop
   14210:	b003      	add	sp, #12
   14212:	f85d fb04 	ldr.w	pc, [sp], #4
   14216:	bf00      	nop
   14218:	1fff95f8 	.word	0x1fff95f8
   1421c:	1fff95f4 	.word	0x1fff95f4

00014220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   14220:	b500      	push	{lr}
   14222:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14224:	f7ed faa8 	bl	1778 <Sys_GetCoreID>
   14228:	4603      	mov	r3, r0
   1422a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   1422c:	4a0d      	ldr	r2, [pc, #52]	; (14264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   1422e:	9b01      	ldr	r3, [sp, #4]
   14230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14234:	1e5a      	subs	r2, r3, #1
   14236:	490b      	ldr	r1, [pc, #44]	; (14264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   14238:	9b01      	ldr	r3, [sp, #4]
   1423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   1423e:	4a0a      	ldr	r2, [pc, #40]	; (14268 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   14240:	9b01      	ldr	r3, [sp, #4]
   14242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14246:	f003 0301 	and.w	r3, r3, #1
   1424a:	2b00      	cmp	r3, #0
   1424c:	d106      	bne.n	1425c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   1424e:	4a05      	ldr	r2, [pc, #20]	; (14264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   14250:	9b01      	ldr	r3, [sp, #4]
   14252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14256:	2b00      	cmp	r3, #0
   14258:	d100      	bne.n	1425c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1425a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1425c:	bf00      	nop
   1425e:	b003      	add	sp, #12
   14260:	f85d fb04 	ldr.w	pc, [sp], #4
   14264:	1fff95f8 	.word	0x1fff95f8
   14268:	1fff95f4 	.word	0x1fff95f4

0001426c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   1426c:	b500      	push	{lr}
   1426e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14270:	f7ed fa82 	bl	1778 <Sys_GetCoreID>
   14274:	4603      	mov	r3, r0
   14276:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   14278:	4a10      	ldr	r2, [pc, #64]	; (142bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   1427a:	9b01      	ldr	r3, [sp, #4]
   1427c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14280:	2b00      	cmp	r3, #0
   14282:	d10d      	bne.n	142a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14284:	f7ec fb3f 	bl	906 <Port_schm_read_msr>
   14288:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1428a:	9b00      	ldr	r3, [sp, #0]
   1428c:	f003 0301 	and.w	r3, r3, #1
   14290:	2b00      	cmp	r3, #0
   14292:	d100      	bne.n	14296 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14294:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   14296:	490a      	ldr	r1, [pc, #40]	; (142c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   14298:	9b01      	ldr	r3, [sp, #4]
   1429a:	9a00      	ldr	r2, [sp, #0]
   1429c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   142a0:	4a06      	ldr	r2, [pc, #24]	; (142bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   142a2:	9b01      	ldr	r3, [sp, #4]
   142a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142a8:	1c5a      	adds	r2, r3, #1
   142aa:	4904      	ldr	r1, [pc, #16]	; (142bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   142ac:	9b01      	ldr	r3, [sp, #4]
   142ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   142b2:	bf00      	nop
   142b4:	b003      	add	sp, #12
   142b6:	f85d fb04 	ldr.w	pc, [sp], #4
   142ba:	bf00      	nop
   142bc:	1fff9600 	.word	0x1fff9600
   142c0:	1fff95fc 	.word	0x1fff95fc

000142c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   142c4:	b500      	push	{lr}
   142c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142c8:	f7ed fa56 	bl	1778 <Sys_GetCoreID>
   142cc:	4603      	mov	r3, r0
   142ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   142d0:	4a0d      	ldr	r2, [pc, #52]	; (14308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   142d2:	9b01      	ldr	r3, [sp, #4]
   142d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142d8:	1e5a      	subs	r2, r3, #1
   142da:	490b      	ldr	r1, [pc, #44]	; (14308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   142dc:	9b01      	ldr	r3, [sp, #4]
   142de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   142e2:	4a0a      	ldr	r2, [pc, #40]	; (1430c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   142e4:	9b01      	ldr	r3, [sp, #4]
   142e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142ea:	f003 0301 	and.w	r3, r3, #1
   142ee:	2b00      	cmp	r3, #0
   142f0:	d106      	bne.n	14300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   142f2:	4a05      	ldr	r2, [pc, #20]	; (14308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   142f4:	9b01      	ldr	r3, [sp, #4]
   142f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142fa:	2b00      	cmp	r3, #0
   142fc:	d100      	bne.n	14300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   142fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14300:	bf00      	nop
   14302:	b003      	add	sp, #12
   14304:	f85d fb04 	ldr.w	pc, [sp], #4
   14308:	1fff9600 	.word	0x1fff9600
   1430c:	1fff95fc 	.word	0x1fff95fc

00014310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   14310:	b500      	push	{lr}
   14312:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14314:	f7ed fa30 	bl	1778 <Sys_GetCoreID>
   14318:	4603      	mov	r3, r0
   1431a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   1431c:	4a10      	ldr	r2, [pc, #64]	; (14360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   1431e:	9b01      	ldr	r3, [sp, #4]
   14320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14324:	2b00      	cmp	r3, #0
   14326:	d10d      	bne.n	14344 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14328:	f7ec faed 	bl	906 <Port_schm_read_msr>
   1432c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1432e:	9b00      	ldr	r3, [sp, #0]
   14330:	f003 0301 	and.w	r3, r3, #1
   14334:	2b00      	cmp	r3, #0
   14336:	d100      	bne.n	1433a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14338:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   1433a:	490a      	ldr	r1, [pc, #40]	; (14364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   1433c:	9b01      	ldr	r3, [sp, #4]
   1433e:	9a00      	ldr	r2, [sp, #0]
   14340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   14344:	4a06      	ldr	r2, [pc, #24]	; (14360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   14346:	9b01      	ldr	r3, [sp, #4]
   14348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1434c:	1c5a      	adds	r2, r3, #1
   1434e:	4904      	ldr	r1, [pc, #16]	; (14360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   14350:	9b01      	ldr	r3, [sp, #4]
   14352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14356:	bf00      	nop
   14358:	b003      	add	sp, #12
   1435a:	f85d fb04 	ldr.w	pc, [sp], #4
   1435e:	bf00      	nop
   14360:	1fff9608 	.word	0x1fff9608
   14364:	1fff9604 	.word	0x1fff9604

00014368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   14368:	b500      	push	{lr}
   1436a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1436c:	f7ed fa04 	bl	1778 <Sys_GetCoreID>
   14370:	4603      	mov	r3, r0
   14372:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   14374:	4a0d      	ldr	r2, [pc, #52]	; (143ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   14376:	9b01      	ldr	r3, [sp, #4]
   14378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1437c:	1e5a      	subs	r2, r3, #1
   1437e:	490b      	ldr	r1, [pc, #44]	; (143ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   14380:	9b01      	ldr	r3, [sp, #4]
   14382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   14386:	4a0a      	ldr	r2, [pc, #40]	; (143b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   14388:	9b01      	ldr	r3, [sp, #4]
   1438a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1438e:	f003 0301 	and.w	r3, r3, #1
   14392:	2b00      	cmp	r3, #0
   14394:	d106      	bne.n	143a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   14396:	4a05      	ldr	r2, [pc, #20]	; (143ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   14398:	9b01      	ldr	r3, [sp, #4]
   1439a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1439e:	2b00      	cmp	r3, #0
   143a0:	d100      	bne.n	143a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   143a4:	bf00      	nop
   143a6:	b003      	add	sp, #12
   143a8:	f85d fb04 	ldr.w	pc, [sp], #4
   143ac:	1fff9608 	.word	0x1fff9608
   143b0:	1fff9604 	.word	0x1fff9604

000143b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   143b4:	b500      	push	{lr}
   143b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143b8:	f7ed f9de 	bl	1778 <Sys_GetCoreID>
   143bc:	4603      	mov	r3, r0
   143be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   143c0:	4a10      	ldr	r2, [pc, #64]	; (14404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   143c2:	9b01      	ldr	r3, [sp, #4]
   143c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143c8:	2b00      	cmp	r3, #0
   143ca:	d10d      	bne.n	143e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   143cc:	f7ec fa9b 	bl	906 <Port_schm_read_msr>
   143d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   143d2:	9b00      	ldr	r3, [sp, #0]
   143d4:	f003 0301 	and.w	r3, r3, #1
   143d8:	2b00      	cmp	r3, #0
   143da:	d100      	bne.n	143de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   143dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   143de:	490a      	ldr	r1, [pc, #40]	; (14408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   143e0:	9b01      	ldr	r3, [sp, #4]
   143e2:	9a00      	ldr	r2, [sp, #0]
   143e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   143e8:	4a06      	ldr	r2, [pc, #24]	; (14404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   143ea:	9b01      	ldr	r3, [sp, #4]
   143ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143f0:	1c5a      	adds	r2, r3, #1
   143f2:	4904      	ldr	r1, [pc, #16]	; (14404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   143f4:	9b01      	ldr	r3, [sp, #4]
   143f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   143fa:	bf00      	nop
   143fc:	b003      	add	sp, #12
   143fe:	f85d fb04 	ldr.w	pc, [sp], #4
   14402:	bf00      	nop
   14404:	1fff9610 	.word	0x1fff9610
   14408:	1fff960c 	.word	0x1fff960c

0001440c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   1440c:	b500      	push	{lr}
   1440e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14410:	f7ed f9b2 	bl	1778 <Sys_GetCoreID>
   14414:	4603      	mov	r3, r0
   14416:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   14418:	4a0d      	ldr	r2, [pc, #52]	; (14450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1441a:	9b01      	ldr	r3, [sp, #4]
   1441c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14420:	1e5a      	subs	r2, r3, #1
   14422:	490b      	ldr	r1, [pc, #44]	; (14450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   14424:	9b01      	ldr	r3, [sp, #4]
   14426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   1442a:	4a0a      	ldr	r2, [pc, #40]	; (14454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   1442c:	9b01      	ldr	r3, [sp, #4]
   1442e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14432:	f003 0301 	and.w	r3, r3, #1
   14436:	2b00      	cmp	r3, #0
   14438:	d106      	bne.n	14448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   1443a:	4a05      	ldr	r2, [pc, #20]	; (14450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1443c:	9b01      	ldr	r3, [sp, #4]
   1443e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14442:	2b00      	cmp	r3, #0
   14444:	d100      	bne.n	14448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14446:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14448:	bf00      	nop
   1444a:	b003      	add	sp, #12
   1444c:	f85d fb04 	ldr.w	pc, [sp], #4
   14450:	1fff9610 	.word	0x1fff9610
   14454:	1fff960c 	.word	0x1fff960c

00014458 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   14458:	b500      	push	{lr}
   1445a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1445c:	f7ed f98c 	bl	1778 <Sys_GetCoreID>
   14460:	4603      	mov	r3, r0
   14462:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId])
   14464:	4a10      	ldr	r2, [pc, #64]	; (144a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   14466:	9b01      	ldr	r3, [sp, #4]
   14468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1446c:	2b00      	cmp	r3, #0
   1446e:	d10d      	bne.n	1448c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14470:	f7ec fa52 	bl	918 <Pwm_schm_read_msr>
   14474:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14476:	9b00      	ldr	r3, [sp, #0]
   14478:	f003 0301 	and.w	r3, r3, #1
   1447c:	2b00      	cmp	r3, #0
   1447e:	d100      	bne.n	14482 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14480:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   14482:	490a      	ldr	r1, [pc, #40]	; (144ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
   14484:	9b01      	ldr	r3, [sp, #4]
   14486:	9a00      	ldr	r2, [sp, #0]
   14488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]++;
   1448c:	4a06      	ldr	r2, [pc, #24]	; (144a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   1448e:	9b01      	ldr	r3, [sp, #4]
   14490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14494:	1c5a      	adds	r2, r3, #1
   14496:	4904      	ldr	r1, [pc, #16]	; (144a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   14498:	9b01      	ldr	r3, [sp, #4]
   1449a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1449e:	bf00      	nop
   144a0:	b003      	add	sp, #12
   144a2:	f85d fb04 	ldr.w	pc, [sp], #4
   144a6:	bf00      	nop
   144a8:	1fff9618 	.word	0x1fff9618
   144ac:	1fff9614 	.word	0x1fff9614

000144b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   144b0:	b500      	push	{lr}
   144b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144b4:	f7ed f960 	bl	1778 <Sys_GetCoreID>
   144b8:	4603      	mov	r3, r0
   144ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]--;
   144bc:	4a0d      	ldr	r2, [pc, #52]	; (144f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   144be:	9b01      	ldr	r3, [sp, #4]
   144c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144c4:	1e5a      	subs	r2, r3, #1
   144c6:	490b      	ldr	r1, [pc, #44]	; (144f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   144c8:	9b01      	ldr	r3, [sp, #4]
   144ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   144ce:	4a0a      	ldr	r2, [pc, #40]	; (144f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
   144d0:	9b01      	ldr	r3, [sp, #4]
   144d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144d6:	f003 0301 	and.w	r3, r3, #1
   144da:	2b00      	cmp	r3, #0
   144dc:	d106      	bne.n	144ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
   144de:	4a05      	ldr	r2, [pc, #20]	; (144f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   144e0:	9b01      	ldr	r3, [sp, #4]
   144e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144e6:	2b00      	cmp	r3, #0
   144e8:	d100      	bne.n	144ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   144ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   144ec:	bf00      	nop
   144ee:	b003      	add	sp, #12
   144f0:	f85d fb04 	ldr.w	pc, [sp], #4
   144f4:	1fff9618 	.word	0x1fff9618
   144f8:	1fff9614 	.word	0x1fff9614

000144fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   144fc:	b500      	push	{lr}
   144fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14500:	f7ed f93a 	bl	1778 <Sys_GetCoreID>
   14504:	4603      	mov	r3, r0
   14506:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId])
   14508:	4a10      	ldr	r2, [pc, #64]	; (1454c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   1450a:	9b01      	ldr	r3, [sp, #4]
   1450c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14510:	2b00      	cmp	r3, #0
   14512:	d10d      	bne.n	14530 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14514:	f7ec fa00 	bl	918 <Pwm_schm_read_msr>
   14518:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1451a:	9b00      	ldr	r3, [sp, #0]
   1451c:	f003 0301 	and.w	r3, r3, #1
   14520:	2b00      	cmp	r3, #0
   14522:	d100      	bne.n	14526 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14524:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   14526:	490a      	ldr	r1, [pc, #40]	; (14550 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
   14528:	9b01      	ldr	r3, [sp, #4]
   1452a:	9a00      	ldr	r2, [sp, #0]
   1452c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]++;
   14530:	4a06      	ldr	r2, [pc, #24]	; (1454c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   14532:	9b01      	ldr	r3, [sp, #4]
   14534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14538:	1c5a      	adds	r2, r3, #1
   1453a:	4904      	ldr	r1, [pc, #16]	; (1454c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   1453c:	9b01      	ldr	r3, [sp, #4]
   1453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14542:	bf00      	nop
   14544:	b003      	add	sp, #12
   14546:	f85d fb04 	ldr.w	pc, [sp], #4
   1454a:	bf00      	nop
   1454c:	1fff9620 	.word	0x1fff9620
   14550:	1fff961c 	.word	0x1fff961c

00014554 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   14554:	b500      	push	{lr}
   14556:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14558:	f7ed f90e 	bl	1778 <Sys_GetCoreID>
   1455c:	4603      	mov	r3, r0
   1455e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]--;
   14560:	4a0d      	ldr	r2, [pc, #52]	; (14598 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   14562:	9b01      	ldr	r3, [sp, #4]
   14564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14568:	1e5a      	subs	r2, r3, #1
   1456a:	490b      	ldr	r1, [pc, #44]	; (14598 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   1456c:	9b01      	ldr	r3, [sp, #4]
   1456e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   14572:	4a0a      	ldr	r2, [pc, #40]	; (1459c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
   14574:	9b01      	ldr	r3, [sp, #4]
   14576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1457a:	f003 0301 	and.w	r3, r3, #1
   1457e:	2b00      	cmp	r3, #0
   14580:	d106      	bne.n	14590 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
   14582:	4a05      	ldr	r2, [pc, #20]	; (14598 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   14584:	9b01      	ldr	r3, [sp, #4]
   14586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1458a:	2b00      	cmp	r3, #0
   1458c:	d100      	bne.n	14590 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1458e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14590:	bf00      	nop
   14592:	b003      	add	sp, #12
   14594:	f85d fb04 	ldr.w	pc, [sp], #4
   14598:	1fff9620 	.word	0x1fff9620
   1459c:	1fff961c 	.word	0x1fff961c

000145a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   145a0:	b500      	push	{lr}
   145a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145a4:	f7ed f8e8 	bl	1778 <Sys_GetCoreID>
   145a8:	4603      	mov	r3, r0
   145aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId])
   145ac:	4a10      	ldr	r2, [pc, #64]	; (145f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   145ae:	9b01      	ldr	r3, [sp, #4]
   145b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145b4:	2b00      	cmp	r3, #0
   145b6:	d10d      	bne.n	145d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   145b8:	f7ec f9ae 	bl	918 <Pwm_schm_read_msr>
   145bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   145be:	9b00      	ldr	r3, [sp, #0]
   145c0:	f003 0301 	and.w	r3, r3, #1
   145c4:	2b00      	cmp	r3, #0
   145c6:	d100      	bne.n	145ca <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   145c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   145ca:	490a      	ldr	r1, [pc, #40]	; (145f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
   145cc:	9b01      	ldr	r3, [sp, #4]
   145ce:	9a00      	ldr	r2, [sp, #0]
   145d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]++;
   145d4:	4a06      	ldr	r2, [pc, #24]	; (145f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   145d6:	9b01      	ldr	r3, [sp, #4]
   145d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145dc:	1c5a      	adds	r2, r3, #1
   145de:	4904      	ldr	r1, [pc, #16]	; (145f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   145e0:	9b01      	ldr	r3, [sp, #4]
   145e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   145e6:	bf00      	nop
   145e8:	b003      	add	sp, #12
   145ea:	f85d fb04 	ldr.w	pc, [sp], #4
   145ee:	bf00      	nop
   145f0:	1fff9628 	.word	0x1fff9628
   145f4:	1fff9624 	.word	0x1fff9624

000145f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   145f8:	b500      	push	{lr}
   145fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145fc:	f7ed f8bc 	bl	1778 <Sys_GetCoreID>
   14600:	4603      	mov	r3, r0
   14602:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]--;
   14604:	4a0d      	ldr	r2, [pc, #52]	; (1463c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   14606:	9b01      	ldr	r3, [sp, #4]
   14608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1460c:	1e5a      	subs	r2, r3, #1
   1460e:	490b      	ldr	r1, [pc, #44]	; (1463c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   14610:	9b01      	ldr	r3, [sp, #4]
   14612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   14616:	4a0a      	ldr	r2, [pc, #40]	; (14640 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
   14618:	9b01      	ldr	r3, [sp, #4]
   1461a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1461e:	f003 0301 	and.w	r3, r3, #1
   14622:	2b00      	cmp	r3, #0
   14624:	d106      	bne.n	14634 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
   14626:	4a05      	ldr	r2, [pc, #20]	; (1463c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   14628:	9b01      	ldr	r3, [sp, #4]
   1462a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1462e:	2b00      	cmp	r3, #0
   14630:	d100      	bne.n	14634 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14632:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14634:	bf00      	nop
   14636:	b003      	add	sp, #12
   14638:	f85d fb04 	ldr.w	pc, [sp], #4
   1463c:	1fff9628 	.word	0x1fff9628
   14640:	1fff9624 	.word	0x1fff9624

00014644 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   14644:	b500      	push	{lr}
   14646:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14648:	f7ed f896 	bl	1778 <Sys_GetCoreID>
   1464c:	4603      	mov	r3, r0
   1464e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId])
   14650:	4a10      	ldr	r2, [pc, #64]	; (14694 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   14652:	9b01      	ldr	r3, [sp, #4]
   14654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14658:	2b00      	cmp	r3, #0
   1465a:	d10d      	bne.n	14678 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1465c:	f7ec f95c 	bl	918 <Pwm_schm_read_msr>
   14660:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14662:	9b00      	ldr	r3, [sp, #0]
   14664:	f003 0301 	and.w	r3, r3, #1
   14668:	2b00      	cmp	r3, #0
   1466a:	d100      	bne.n	1466e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1466c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1466e:	490a      	ldr	r1, [pc, #40]	; (14698 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
   14670:	9b01      	ldr	r3, [sp, #4]
   14672:	9a00      	ldr	r2, [sp, #0]
   14674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]++;
   14678:	4a06      	ldr	r2, [pc, #24]	; (14694 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   1467a:	9b01      	ldr	r3, [sp, #4]
   1467c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14680:	1c5a      	adds	r2, r3, #1
   14682:	4904      	ldr	r1, [pc, #16]	; (14694 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   14684:	9b01      	ldr	r3, [sp, #4]
   14686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1468a:	bf00      	nop
   1468c:	b003      	add	sp, #12
   1468e:	f85d fb04 	ldr.w	pc, [sp], #4
   14692:	bf00      	nop
   14694:	1fff9630 	.word	0x1fff9630
   14698:	1fff962c 	.word	0x1fff962c

0001469c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   1469c:	b500      	push	{lr}
   1469e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146a0:	f7ed f86a 	bl	1778 <Sys_GetCoreID>
   146a4:	4603      	mov	r3, r0
   146a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]--;
   146a8:	4a0d      	ldr	r2, [pc, #52]	; (146e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   146aa:	9b01      	ldr	r3, [sp, #4]
   146ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146b0:	1e5a      	subs	r2, r3, #1
   146b2:	490b      	ldr	r1, [pc, #44]	; (146e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   146b4:	9b01      	ldr	r3, [sp, #4]
   146b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   146ba:	4a0a      	ldr	r2, [pc, #40]	; (146e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
   146bc:	9b01      	ldr	r3, [sp, #4]
   146be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146c2:	f003 0301 	and.w	r3, r3, #1
   146c6:	2b00      	cmp	r3, #0
   146c8:	d106      	bne.n	146d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
   146ca:	4a05      	ldr	r2, [pc, #20]	; (146e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   146cc:	9b01      	ldr	r3, [sp, #4]
   146ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146d2:	2b00      	cmp	r3, #0
   146d4:	d100      	bne.n	146d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   146d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   146d8:	bf00      	nop
   146da:	b003      	add	sp, #12
   146dc:	f85d fb04 	ldr.w	pc, [sp], #4
   146e0:	1fff9630 	.word	0x1fff9630
   146e4:	1fff962c 	.word	0x1fff962c

000146e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   146e8:	b500      	push	{lr}
   146ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146ec:	f7ed f844 	bl	1778 <Sys_GetCoreID>
   146f0:	4603      	mov	r3, r0
   146f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId])
   146f4:	4a10      	ldr	r2, [pc, #64]	; (14738 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   146f6:	9b01      	ldr	r3, [sp, #4]
   146f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146fc:	2b00      	cmp	r3, #0
   146fe:	d10d      	bne.n	1471c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14700:	f7ec f90a 	bl	918 <Pwm_schm_read_msr>
   14704:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14706:	9b00      	ldr	r3, [sp, #0]
   14708:	f003 0301 	and.w	r3, r3, #1
   1470c:	2b00      	cmp	r3, #0
   1470e:	d100      	bne.n	14712 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14710:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   14712:	490a      	ldr	r1, [pc, #40]	; (1473c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
   14714:	9b01      	ldr	r3, [sp, #4]
   14716:	9a00      	ldr	r2, [sp, #0]
   14718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]++;
   1471c:	4a06      	ldr	r2, [pc, #24]	; (14738 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   1471e:	9b01      	ldr	r3, [sp, #4]
   14720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14724:	1c5a      	adds	r2, r3, #1
   14726:	4904      	ldr	r1, [pc, #16]	; (14738 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   14728:	9b01      	ldr	r3, [sp, #4]
   1472a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1472e:	bf00      	nop
   14730:	b003      	add	sp, #12
   14732:	f85d fb04 	ldr.w	pc, [sp], #4
   14736:	bf00      	nop
   14738:	1fff9638 	.word	0x1fff9638
   1473c:	1fff9634 	.word	0x1fff9634

00014740 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   14740:	b500      	push	{lr}
   14742:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14744:	f7ed f818 	bl	1778 <Sys_GetCoreID>
   14748:	4603      	mov	r3, r0
   1474a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]--;
   1474c:	4a0d      	ldr	r2, [pc, #52]	; (14784 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   1474e:	9b01      	ldr	r3, [sp, #4]
   14750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14754:	1e5a      	subs	r2, r3, #1
   14756:	490b      	ldr	r1, [pc, #44]	; (14784 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   14758:	9b01      	ldr	r3, [sp, #4]
   1475a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   1475e:	4a0a      	ldr	r2, [pc, #40]	; (14788 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
   14760:	9b01      	ldr	r3, [sp, #4]
   14762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14766:	f003 0301 	and.w	r3, r3, #1
   1476a:	2b00      	cmp	r3, #0
   1476c:	d106      	bne.n	1477c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
   1476e:	4a05      	ldr	r2, [pc, #20]	; (14784 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   14770:	9b01      	ldr	r3, [sp, #4]
   14772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14776:	2b00      	cmp	r3, #0
   14778:	d100      	bne.n	1477c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1477a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1477c:	bf00      	nop
   1477e:	b003      	add	sp, #12
   14780:	f85d fb04 	ldr.w	pc, [sp], #4
   14784:	1fff9638 	.word	0x1fff9638
   14788:	1fff9634 	.word	0x1fff9634

0001478c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   1478c:	b500      	push	{lr}
   1478e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14790:	f7ec fff2 	bl	1778 <Sys_GetCoreID>
   14794:	4603      	mov	r3, r0
   14796:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId])
   14798:	4a10      	ldr	r2, [pc, #64]	; (147dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   1479a:	9b01      	ldr	r3, [sp, #4]
   1479c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147a0:	2b00      	cmp	r3, #0
   147a2:	d10d      	bne.n	147c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   147a4:	f7ec f8b8 	bl	918 <Pwm_schm_read_msr>
   147a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   147aa:	9b00      	ldr	r3, [sp, #0]
   147ac:	f003 0301 	and.w	r3, r3, #1
   147b0:	2b00      	cmp	r3, #0
   147b2:	d100      	bne.n	147b6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   147b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   147b6:	490a      	ldr	r1, [pc, #40]	; (147e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
   147b8:	9b01      	ldr	r3, [sp, #4]
   147ba:	9a00      	ldr	r2, [sp, #0]
   147bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]++;
   147c0:	4a06      	ldr	r2, [pc, #24]	; (147dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   147c2:	9b01      	ldr	r3, [sp, #4]
   147c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147c8:	1c5a      	adds	r2, r3, #1
   147ca:	4904      	ldr	r1, [pc, #16]	; (147dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   147cc:	9b01      	ldr	r3, [sp, #4]
   147ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   147d2:	bf00      	nop
   147d4:	b003      	add	sp, #12
   147d6:	f85d fb04 	ldr.w	pc, [sp], #4
   147da:	bf00      	nop
   147dc:	1fff9640 	.word	0x1fff9640
   147e0:	1fff963c 	.word	0x1fff963c

000147e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   147e4:	b500      	push	{lr}
   147e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147e8:	f7ec ffc6 	bl	1778 <Sys_GetCoreID>
   147ec:	4603      	mov	r3, r0
   147ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]--;
   147f0:	4a0d      	ldr	r2, [pc, #52]	; (14828 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   147f2:	9b01      	ldr	r3, [sp, #4]
   147f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147f8:	1e5a      	subs	r2, r3, #1
   147fa:	490b      	ldr	r1, [pc, #44]	; (14828 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   147fc:	9b01      	ldr	r3, [sp, #4]
   147fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   14802:	4a0a      	ldr	r2, [pc, #40]	; (1482c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
   14804:	9b01      	ldr	r3, [sp, #4]
   14806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1480a:	f003 0301 	and.w	r3, r3, #1
   1480e:	2b00      	cmp	r3, #0
   14810:	d106      	bne.n	14820 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
   14812:	4a05      	ldr	r2, [pc, #20]	; (14828 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   14814:	9b01      	ldr	r3, [sp, #4]
   14816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1481a:	2b00      	cmp	r3, #0
   1481c:	d100      	bne.n	14820 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1481e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14820:	bf00      	nop
   14822:	b003      	add	sp, #12
   14824:	f85d fb04 	ldr.w	pc, [sp], #4
   14828:	1fff9640 	.word	0x1fff9640
   1482c:	1fff963c 	.word	0x1fff963c

00014830 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   14830:	b500      	push	{lr}
   14832:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14834:	f7ec ffa0 	bl	1778 <Sys_GetCoreID>
   14838:	4603      	mov	r3, r0
   1483a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId])
   1483c:	4a10      	ldr	r2, [pc, #64]	; (14880 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   1483e:	9b01      	ldr	r3, [sp, #4]
   14840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14844:	2b00      	cmp	r3, #0
   14846:	d10d      	bne.n	14864 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14848:	f7ec f866 	bl	918 <Pwm_schm_read_msr>
   1484c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1484e:	9b00      	ldr	r3, [sp, #0]
   14850:	f003 0301 	and.w	r3, r3, #1
   14854:	2b00      	cmp	r3, #0
   14856:	d100      	bne.n	1485a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14858:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   1485a:	490a      	ldr	r1, [pc, #40]	; (14884 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
   1485c:	9b01      	ldr	r3, [sp, #4]
   1485e:	9a00      	ldr	r2, [sp, #0]
   14860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]++;
   14864:	4a06      	ldr	r2, [pc, #24]	; (14880 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   14866:	9b01      	ldr	r3, [sp, #4]
   14868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1486c:	1c5a      	adds	r2, r3, #1
   1486e:	4904      	ldr	r1, [pc, #16]	; (14880 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   14870:	9b01      	ldr	r3, [sp, #4]
   14872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14876:	bf00      	nop
   14878:	b003      	add	sp, #12
   1487a:	f85d fb04 	ldr.w	pc, [sp], #4
   1487e:	bf00      	nop
   14880:	1fff9648 	.word	0x1fff9648
   14884:	1fff9644 	.word	0x1fff9644

00014888 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   14888:	b500      	push	{lr}
   1488a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1488c:	f7ec ff74 	bl	1778 <Sys_GetCoreID>
   14890:	4603      	mov	r3, r0
   14892:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]--;
   14894:	4a0d      	ldr	r2, [pc, #52]	; (148cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   14896:	9b01      	ldr	r3, [sp, #4]
   14898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1489c:	1e5a      	subs	r2, r3, #1
   1489e:	490b      	ldr	r1, [pc, #44]	; (148cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   148a0:	9b01      	ldr	r3, [sp, #4]
   148a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   148a6:	4a0a      	ldr	r2, [pc, #40]	; (148d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
   148a8:	9b01      	ldr	r3, [sp, #4]
   148aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148ae:	f003 0301 	and.w	r3, r3, #1
   148b2:	2b00      	cmp	r3, #0
   148b4:	d106      	bne.n	148c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
   148b6:	4a05      	ldr	r2, [pc, #20]	; (148cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   148b8:	9b01      	ldr	r3, [sp, #4]
   148ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148be:	2b00      	cmp	r3, #0
   148c0:	d100      	bne.n	148c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   148c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   148c4:	bf00      	nop
   148c6:	b003      	add	sp, #12
   148c8:	f85d fb04 	ldr.w	pc, [sp], #4
   148cc:	1fff9648 	.word	0x1fff9648
   148d0:	1fff9644 	.word	0x1fff9644

000148d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   148d4:	b500      	push	{lr}
   148d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148d8:	f7ec ff4e 	bl	1778 <Sys_GetCoreID>
   148dc:	4603      	mov	r3, r0
   148de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId])
   148e0:	4a10      	ldr	r2, [pc, #64]	; (14924 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   148e2:	9b01      	ldr	r3, [sp, #4]
   148e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148e8:	2b00      	cmp	r3, #0
   148ea:	d10d      	bne.n	14908 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   148ec:	f7ec f814 	bl	918 <Pwm_schm_read_msr>
   148f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   148f2:	9b00      	ldr	r3, [sp, #0]
   148f4:	f003 0301 	and.w	r3, r3, #1
   148f8:	2b00      	cmp	r3, #0
   148fa:	d100      	bne.n	148fe <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   148fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   148fe:	490a      	ldr	r1, [pc, #40]	; (14928 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
   14900:	9b01      	ldr	r3, [sp, #4]
   14902:	9a00      	ldr	r2, [sp, #0]
   14904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]++;
   14908:	4a06      	ldr	r2, [pc, #24]	; (14924 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   1490a:	9b01      	ldr	r3, [sp, #4]
   1490c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14910:	1c5a      	adds	r2, r3, #1
   14912:	4904      	ldr	r1, [pc, #16]	; (14924 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   14914:	9b01      	ldr	r3, [sp, #4]
   14916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1491a:	bf00      	nop
   1491c:	b003      	add	sp, #12
   1491e:	f85d fb04 	ldr.w	pc, [sp], #4
   14922:	bf00      	nop
   14924:	1fff9650 	.word	0x1fff9650
   14928:	1fff964c 	.word	0x1fff964c

0001492c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   1492c:	b500      	push	{lr}
   1492e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14930:	f7ec ff22 	bl	1778 <Sys_GetCoreID>
   14934:	4603      	mov	r3, r0
   14936:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]--;
   14938:	4a0d      	ldr	r2, [pc, #52]	; (14970 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   1493a:	9b01      	ldr	r3, [sp, #4]
   1493c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14940:	1e5a      	subs	r2, r3, #1
   14942:	490b      	ldr	r1, [pc, #44]	; (14970 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   14944:	9b01      	ldr	r3, [sp, #4]
   14946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   1494a:	4a0a      	ldr	r2, [pc, #40]	; (14974 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
   1494c:	9b01      	ldr	r3, [sp, #4]
   1494e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14952:	f003 0301 	and.w	r3, r3, #1
   14956:	2b00      	cmp	r3, #0
   14958:	d106      	bne.n	14968 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
   1495a:	4a05      	ldr	r2, [pc, #20]	; (14970 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   1495c:	9b01      	ldr	r3, [sp, #4]
   1495e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14962:	2b00      	cmp	r3, #0
   14964:	d100      	bne.n	14968 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14966:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14968:	bf00      	nop
   1496a:	b003      	add	sp, #12
   1496c:	f85d fb04 	ldr.w	pc, [sp], #4
   14970:	1fff9650 	.word	0x1fff9650
   14974:	1fff964c 	.word	0x1fff964c

00014978 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   14978:	b500      	push	{lr}
   1497a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1497c:	f7ec fefc 	bl	1778 <Sys_GetCoreID>
   14980:	4603      	mov	r3, r0
   14982:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId])
   14984:	4a10      	ldr	r2, [pc, #64]	; (149c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   14986:	9b01      	ldr	r3, [sp, #4]
   14988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1498c:	2b00      	cmp	r3, #0
   1498e:	d10d      	bne.n	149ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14990:	f7eb ffc2 	bl	918 <Pwm_schm_read_msr>
   14994:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14996:	9b00      	ldr	r3, [sp, #0]
   14998:	f003 0301 	and.w	r3, r3, #1
   1499c:	2b00      	cmp	r3, #0
   1499e:	d100      	bne.n	149a2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   149a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   149a2:	490a      	ldr	r1, [pc, #40]	; (149cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
   149a4:	9b01      	ldr	r3, [sp, #4]
   149a6:	9a00      	ldr	r2, [sp, #0]
   149a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]++;
   149ac:	4a06      	ldr	r2, [pc, #24]	; (149c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   149ae:	9b01      	ldr	r3, [sp, #4]
   149b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149b4:	1c5a      	adds	r2, r3, #1
   149b6:	4904      	ldr	r1, [pc, #16]	; (149c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   149b8:	9b01      	ldr	r3, [sp, #4]
   149ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   149be:	bf00      	nop
   149c0:	b003      	add	sp, #12
   149c2:	f85d fb04 	ldr.w	pc, [sp], #4
   149c6:	bf00      	nop
   149c8:	1fff9658 	.word	0x1fff9658
   149cc:	1fff9654 	.word	0x1fff9654

000149d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   149d0:	b500      	push	{lr}
   149d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149d4:	f7ec fed0 	bl	1778 <Sys_GetCoreID>
   149d8:	4603      	mov	r3, r0
   149da:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]--;
   149dc:	4a0d      	ldr	r2, [pc, #52]	; (14a14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   149de:	9b01      	ldr	r3, [sp, #4]
   149e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149e4:	1e5a      	subs	r2, r3, #1
   149e6:	490b      	ldr	r1, [pc, #44]	; (14a14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   149e8:	9b01      	ldr	r3, [sp, #4]
   149ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   149ee:	4a0a      	ldr	r2, [pc, #40]	; (14a18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
   149f0:	9b01      	ldr	r3, [sp, #4]
   149f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149f6:	f003 0301 	and.w	r3, r3, #1
   149fa:	2b00      	cmp	r3, #0
   149fc:	d106      	bne.n	14a0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
   149fe:	4a05      	ldr	r2, [pc, #20]	; (14a14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   14a00:	9b01      	ldr	r3, [sp, #4]
   14a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a06:	2b00      	cmp	r3, #0
   14a08:	d100      	bne.n	14a0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a0c:	bf00      	nop
   14a0e:	b003      	add	sp, #12
   14a10:	f85d fb04 	ldr.w	pc, [sp], #4
   14a14:	1fff9658 	.word	0x1fff9658
   14a18:	1fff9654 	.word	0x1fff9654

00014a1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   14a1c:	b500      	push	{lr}
   14a1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a20:	f7ec feaa 	bl	1778 <Sys_GetCoreID>
   14a24:	4603      	mov	r3, r0
   14a26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId])
   14a28:	4a10      	ldr	r2, [pc, #64]	; (14a6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   14a2a:	9b01      	ldr	r3, [sp, #4]
   14a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a30:	2b00      	cmp	r3, #0
   14a32:	d10d      	bne.n	14a50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a34:	f7eb ff70 	bl	918 <Pwm_schm_read_msr>
   14a38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a3a:	9b00      	ldr	r3, [sp, #0]
   14a3c:	f003 0301 	and.w	r3, r3, #1
   14a40:	2b00      	cmp	r3, #0
   14a42:	d100      	bne.n	14a46 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   14a46:	490a      	ldr	r1, [pc, #40]	; (14a70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
   14a48:	9b01      	ldr	r3, [sp, #4]
   14a4a:	9a00      	ldr	r2, [sp, #0]
   14a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]++;
   14a50:	4a06      	ldr	r2, [pc, #24]	; (14a6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   14a52:	9b01      	ldr	r3, [sp, #4]
   14a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a58:	1c5a      	adds	r2, r3, #1
   14a5a:	4904      	ldr	r1, [pc, #16]	; (14a6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   14a5c:	9b01      	ldr	r3, [sp, #4]
   14a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a62:	bf00      	nop
   14a64:	b003      	add	sp, #12
   14a66:	f85d fb04 	ldr.w	pc, [sp], #4
   14a6a:	bf00      	nop
   14a6c:	1fff9660 	.word	0x1fff9660
   14a70:	1fff965c 	.word	0x1fff965c

00014a74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   14a74:	b500      	push	{lr}
   14a76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a78:	f7ec fe7e 	bl	1778 <Sys_GetCoreID>
   14a7c:	4603      	mov	r3, r0
   14a7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]--;
   14a80:	4a0d      	ldr	r2, [pc, #52]	; (14ab8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   14a82:	9b01      	ldr	r3, [sp, #4]
   14a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a88:	1e5a      	subs	r2, r3, #1
   14a8a:	490b      	ldr	r1, [pc, #44]	; (14ab8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   14a8c:	9b01      	ldr	r3, [sp, #4]
   14a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   14a92:	4a0a      	ldr	r2, [pc, #40]	; (14abc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
   14a94:	9b01      	ldr	r3, [sp, #4]
   14a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a9a:	f003 0301 	and.w	r3, r3, #1
   14a9e:	2b00      	cmp	r3, #0
   14aa0:	d106      	bne.n	14ab0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
   14aa2:	4a05      	ldr	r2, [pc, #20]	; (14ab8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   14aa4:	9b01      	ldr	r3, [sp, #4]
   14aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aaa:	2b00      	cmp	r3, #0
   14aac:	d100      	bne.n	14ab0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14aae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ab0:	bf00      	nop
   14ab2:	b003      	add	sp, #12
   14ab4:	f85d fb04 	ldr.w	pc, [sp], #4
   14ab8:	1fff9660 	.word	0x1fff9660
   14abc:	1fff965c 	.word	0x1fff965c

00014ac0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   14ac0:	b500      	push	{lr}
   14ac2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ac4:	f7ec fe58 	bl	1778 <Sys_GetCoreID>
   14ac8:	4603      	mov	r3, r0
   14aca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId])
   14acc:	4a10      	ldr	r2, [pc, #64]	; (14b10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   14ace:	9b01      	ldr	r3, [sp, #4]
   14ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ad4:	2b00      	cmp	r3, #0
   14ad6:	d10d      	bne.n	14af4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ad8:	f7eb ff1e 	bl	918 <Pwm_schm_read_msr>
   14adc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ade:	9b00      	ldr	r3, [sp, #0]
   14ae0:	f003 0301 	and.w	r3, r3, #1
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	d100      	bne.n	14aea <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ae8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   14aea:	490a      	ldr	r1, [pc, #40]	; (14b14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
   14aec:	9b01      	ldr	r3, [sp, #4]
   14aee:	9a00      	ldr	r2, [sp, #0]
   14af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]++;
   14af4:	4a06      	ldr	r2, [pc, #24]	; (14b10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   14af6:	9b01      	ldr	r3, [sp, #4]
   14af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14afc:	1c5a      	adds	r2, r3, #1
   14afe:	4904      	ldr	r1, [pc, #16]	; (14b10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   14b00:	9b01      	ldr	r3, [sp, #4]
   14b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b06:	bf00      	nop
   14b08:	b003      	add	sp, #12
   14b0a:	f85d fb04 	ldr.w	pc, [sp], #4
   14b0e:	bf00      	nop
   14b10:	1fff9668 	.word	0x1fff9668
   14b14:	1fff9664 	.word	0x1fff9664

00014b18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   14b18:	b500      	push	{lr}
   14b1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b1c:	f7ec fe2c 	bl	1778 <Sys_GetCoreID>
   14b20:	4603      	mov	r3, r0
   14b22:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]--;
   14b24:	4a0d      	ldr	r2, [pc, #52]	; (14b5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   14b26:	9b01      	ldr	r3, [sp, #4]
   14b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b2c:	1e5a      	subs	r2, r3, #1
   14b2e:	490b      	ldr	r1, [pc, #44]	; (14b5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   14b30:	9b01      	ldr	r3, [sp, #4]
   14b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   14b36:	4a0a      	ldr	r2, [pc, #40]	; (14b60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
   14b38:	9b01      	ldr	r3, [sp, #4]
   14b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b3e:	f003 0301 	and.w	r3, r3, #1
   14b42:	2b00      	cmp	r3, #0
   14b44:	d106      	bne.n	14b54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
   14b46:	4a05      	ldr	r2, [pc, #20]	; (14b5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   14b48:	9b01      	ldr	r3, [sp, #4]
   14b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b4e:	2b00      	cmp	r3, #0
   14b50:	d100      	bne.n	14b54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b54:	bf00      	nop
   14b56:	b003      	add	sp, #12
   14b58:	f85d fb04 	ldr.w	pc, [sp], #4
   14b5c:	1fff9668 	.word	0x1fff9668
   14b60:	1fff9664 	.word	0x1fff9664

00014b64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   14b64:	b500      	push	{lr}
   14b66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b68:	f7ec fe06 	bl	1778 <Sys_GetCoreID>
   14b6c:	4603      	mov	r3, r0
   14b6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId])
   14b70:	4a10      	ldr	r2, [pc, #64]	; (14bb4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   14b72:	9b01      	ldr	r3, [sp, #4]
   14b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b78:	2b00      	cmp	r3, #0
   14b7a:	d10d      	bne.n	14b98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b7c:	f7eb fecc 	bl	918 <Pwm_schm_read_msr>
   14b80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b82:	9b00      	ldr	r3, [sp, #0]
   14b84:	f003 0301 	and.w	r3, r3, #1
   14b88:	2b00      	cmp	r3, #0
   14b8a:	d100      	bne.n	14b8e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   14b8e:	490a      	ldr	r1, [pc, #40]	; (14bb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
   14b90:	9b01      	ldr	r3, [sp, #4]
   14b92:	9a00      	ldr	r2, [sp, #0]
   14b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]++;
   14b98:	4a06      	ldr	r2, [pc, #24]	; (14bb4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   14b9a:	9b01      	ldr	r3, [sp, #4]
   14b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ba0:	1c5a      	adds	r2, r3, #1
   14ba2:	4904      	ldr	r1, [pc, #16]	; (14bb4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   14ba4:	9b01      	ldr	r3, [sp, #4]
   14ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14baa:	bf00      	nop
   14bac:	b003      	add	sp, #12
   14bae:	f85d fb04 	ldr.w	pc, [sp], #4
   14bb2:	bf00      	nop
   14bb4:	1fff9670 	.word	0x1fff9670
   14bb8:	1fff966c 	.word	0x1fff966c

00014bbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   14bbc:	b500      	push	{lr}
   14bbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14bc0:	f7ec fdda 	bl	1778 <Sys_GetCoreID>
   14bc4:	4603      	mov	r3, r0
   14bc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]--;
   14bc8:	4a0d      	ldr	r2, [pc, #52]	; (14c00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   14bca:	9b01      	ldr	r3, [sp, #4]
   14bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bd0:	1e5a      	subs	r2, r3, #1
   14bd2:	490b      	ldr	r1, [pc, #44]	; (14c00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   14bd4:	9b01      	ldr	r3, [sp, #4]
   14bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   14bda:	4a0a      	ldr	r2, [pc, #40]	; (14c04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
   14bdc:	9b01      	ldr	r3, [sp, #4]
   14bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14be2:	f003 0301 	and.w	r3, r3, #1
   14be6:	2b00      	cmp	r3, #0
   14be8:	d106      	bne.n	14bf8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
   14bea:	4a05      	ldr	r2, [pc, #20]	; (14c00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   14bec:	9b01      	ldr	r3, [sp, #4]
   14bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bf2:	2b00      	cmp	r3, #0
   14bf4:	d100      	bne.n	14bf8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14bf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14bf8:	bf00      	nop
   14bfa:	b003      	add	sp, #12
   14bfc:	f85d fb04 	ldr.w	pc, [sp], #4
   14c00:	1fff9670 	.word	0x1fff9670
   14c04:	1fff966c 	.word	0x1fff966c

00014c08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   14c08:	b500      	push	{lr}
   14c0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c0c:	f7ec fdb4 	bl	1778 <Sys_GetCoreID>
   14c10:	4603      	mov	r3, r0
   14c12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId])
   14c14:	4a10      	ldr	r2, [pc, #64]	; (14c58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   14c16:	9b01      	ldr	r3, [sp, #4]
   14c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c1c:	2b00      	cmp	r3, #0
   14c1e:	d10d      	bne.n	14c3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c20:	f7eb fe7a 	bl	918 <Pwm_schm_read_msr>
   14c24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c26:	9b00      	ldr	r3, [sp, #0]
   14c28:	f003 0301 	and.w	r3, r3, #1
   14c2c:	2b00      	cmp	r3, #0
   14c2e:	d100      	bne.n	14c32 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   14c32:	490a      	ldr	r1, [pc, #40]	; (14c5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
   14c34:	9b01      	ldr	r3, [sp, #4]
   14c36:	9a00      	ldr	r2, [sp, #0]
   14c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]++;
   14c3c:	4a06      	ldr	r2, [pc, #24]	; (14c58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   14c3e:	9b01      	ldr	r3, [sp, #4]
   14c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c44:	1c5a      	adds	r2, r3, #1
   14c46:	4904      	ldr	r1, [pc, #16]	; (14c58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   14c48:	9b01      	ldr	r3, [sp, #4]
   14c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c4e:	bf00      	nop
   14c50:	b003      	add	sp, #12
   14c52:	f85d fb04 	ldr.w	pc, [sp], #4
   14c56:	bf00      	nop
   14c58:	1fff9678 	.word	0x1fff9678
   14c5c:	1fff9674 	.word	0x1fff9674

00014c60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   14c60:	b500      	push	{lr}
   14c62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c64:	f7ec fd88 	bl	1778 <Sys_GetCoreID>
   14c68:	4603      	mov	r3, r0
   14c6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]--;
   14c6c:	4a0d      	ldr	r2, [pc, #52]	; (14ca4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14c6e:	9b01      	ldr	r3, [sp, #4]
   14c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c74:	1e5a      	subs	r2, r3, #1
   14c76:	490b      	ldr	r1, [pc, #44]	; (14ca4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14c78:	9b01      	ldr	r3, [sp, #4]
   14c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   14c7e:	4a0a      	ldr	r2, [pc, #40]	; (14ca8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
   14c80:	9b01      	ldr	r3, [sp, #4]
   14c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c86:	f003 0301 	and.w	r3, r3, #1
   14c8a:	2b00      	cmp	r3, #0
   14c8c:	d106      	bne.n	14c9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
   14c8e:	4a05      	ldr	r2, [pc, #20]	; (14ca4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14c90:	9b01      	ldr	r3, [sp, #4]
   14c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c96:	2b00      	cmp	r3, #0
   14c98:	d100      	bne.n	14c9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c9c:	bf00      	nop
   14c9e:	b003      	add	sp, #12
   14ca0:	f85d fb04 	ldr.w	pc, [sp], #4
   14ca4:	1fff9678 	.word	0x1fff9678
   14ca8:	1fff9674 	.word	0x1fff9674

00014cac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   14cac:	b500      	push	{lr}
   14cae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cb0:	f7ec fd62 	bl	1778 <Sys_GetCoreID>
   14cb4:	4603      	mov	r3, r0
   14cb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId])
   14cb8:	4a10      	ldr	r2, [pc, #64]	; (14cfc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14cba:	9b01      	ldr	r3, [sp, #4]
   14cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cc0:	2b00      	cmp	r3, #0
   14cc2:	d10d      	bne.n	14ce0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14cc4:	f7eb fe28 	bl	918 <Pwm_schm_read_msr>
   14cc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14cca:	9b00      	ldr	r3, [sp, #0]
   14ccc:	f003 0301 	and.w	r3, r3, #1
   14cd0:	2b00      	cmp	r3, #0
   14cd2:	d100      	bne.n	14cd6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14cd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   14cd6:	490a      	ldr	r1, [pc, #40]	; (14d00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
   14cd8:	9b01      	ldr	r3, [sp, #4]
   14cda:	9a00      	ldr	r2, [sp, #0]
   14cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]++;
   14ce0:	4a06      	ldr	r2, [pc, #24]	; (14cfc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14ce2:	9b01      	ldr	r3, [sp, #4]
   14ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ce8:	1c5a      	adds	r2, r3, #1
   14cea:	4904      	ldr	r1, [pc, #16]	; (14cfc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14cec:	9b01      	ldr	r3, [sp, #4]
   14cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14cf2:	bf00      	nop
   14cf4:	b003      	add	sp, #12
   14cf6:	f85d fb04 	ldr.w	pc, [sp], #4
   14cfa:	bf00      	nop
   14cfc:	1fff9680 	.word	0x1fff9680
   14d00:	1fff967c 	.word	0x1fff967c

00014d04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   14d04:	b500      	push	{lr}
   14d06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d08:	f7ec fd36 	bl	1778 <Sys_GetCoreID>
   14d0c:	4603      	mov	r3, r0
   14d0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]--;
   14d10:	4a0d      	ldr	r2, [pc, #52]	; (14d48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14d12:	9b01      	ldr	r3, [sp, #4]
   14d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d18:	1e5a      	subs	r2, r3, #1
   14d1a:	490b      	ldr	r1, [pc, #44]	; (14d48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14d1c:	9b01      	ldr	r3, [sp, #4]
   14d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   14d22:	4a0a      	ldr	r2, [pc, #40]	; (14d4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
   14d24:	9b01      	ldr	r3, [sp, #4]
   14d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d2a:	f003 0301 	and.w	r3, r3, #1
   14d2e:	2b00      	cmp	r3, #0
   14d30:	d106      	bne.n	14d40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
   14d32:	4a05      	ldr	r2, [pc, #20]	; (14d48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14d34:	9b01      	ldr	r3, [sp, #4]
   14d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d3a:	2b00      	cmp	r3, #0
   14d3c:	d100      	bne.n	14d40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d40:	bf00      	nop
   14d42:	b003      	add	sp, #12
   14d44:	f85d fb04 	ldr.w	pc, [sp], #4
   14d48:	1fff9680 	.word	0x1fff9680
   14d4c:	1fff967c 	.word	0x1fff967c

00014d50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   14d50:	b500      	push	{lr}
   14d52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d54:	f7ec fd10 	bl	1778 <Sys_GetCoreID>
   14d58:	4603      	mov	r3, r0
   14d5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId])
   14d5c:	4a10      	ldr	r2, [pc, #64]	; (14da0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14d5e:	9b01      	ldr	r3, [sp, #4]
   14d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d64:	2b00      	cmp	r3, #0
   14d66:	d10d      	bne.n	14d84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d68:	f7eb fdd6 	bl	918 <Pwm_schm_read_msr>
   14d6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d6e:	9b00      	ldr	r3, [sp, #0]
   14d70:	f003 0301 	and.w	r3, r3, #1
   14d74:	2b00      	cmp	r3, #0
   14d76:	d100      	bne.n	14d7a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   14d7a:	490a      	ldr	r1, [pc, #40]	; (14da4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
   14d7c:	9b01      	ldr	r3, [sp, #4]
   14d7e:	9a00      	ldr	r2, [sp, #0]
   14d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]++;
   14d84:	4a06      	ldr	r2, [pc, #24]	; (14da0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14d86:	9b01      	ldr	r3, [sp, #4]
   14d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d8c:	1c5a      	adds	r2, r3, #1
   14d8e:	4904      	ldr	r1, [pc, #16]	; (14da0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14d90:	9b01      	ldr	r3, [sp, #4]
   14d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d96:	bf00      	nop
   14d98:	b003      	add	sp, #12
   14d9a:	f85d fb04 	ldr.w	pc, [sp], #4
   14d9e:	bf00      	nop
   14da0:	1fff9688 	.word	0x1fff9688
   14da4:	1fff9684 	.word	0x1fff9684

00014da8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   14da8:	b500      	push	{lr}
   14daa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dac:	f7ec fce4 	bl	1778 <Sys_GetCoreID>
   14db0:	4603      	mov	r3, r0
   14db2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]--;
   14db4:	4a0d      	ldr	r2, [pc, #52]	; (14dec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14db6:	9b01      	ldr	r3, [sp, #4]
   14db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dbc:	1e5a      	subs	r2, r3, #1
   14dbe:	490b      	ldr	r1, [pc, #44]	; (14dec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14dc0:	9b01      	ldr	r3, [sp, #4]
   14dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   14dc6:	4a0a      	ldr	r2, [pc, #40]	; (14df0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
   14dc8:	9b01      	ldr	r3, [sp, #4]
   14dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dce:	f003 0301 	and.w	r3, r3, #1
   14dd2:	2b00      	cmp	r3, #0
   14dd4:	d106      	bne.n	14de4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
   14dd6:	4a05      	ldr	r2, [pc, #20]	; (14dec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14dd8:	9b01      	ldr	r3, [sp, #4]
   14dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dde:	2b00      	cmp	r3, #0
   14de0:	d100      	bne.n	14de4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14de2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14de4:	bf00      	nop
   14de6:	b003      	add	sp, #12
   14de8:	f85d fb04 	ldr.w	pc, [sp], #4
   14dec:	1fff9688 	.word	0x1fff9688
   14df0:	1fff9684 	.word	0x1fff9684

00014df4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   14df4:	b500      	push	{lr}
   14df6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14df8:	f7ec fcbe 	bl	1778 <Sys_GetCoreID>
   14dfc:	4603      	mov	r3, r0
   14dfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId])
   14e00:	4a10      	ldr	r2, [pc, #64]	; (14e44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14e02:	9b01      	ldr	r3, [sp, #4]
   14e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e08:	2b00      	cmp	r3, #0
   14e0a:	d10d      	bne.n	14e28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e0c:	f7eb fd84 	bl	918 <Pwm_schm_read_msr>
   14e10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e12:	9b00      	ldr	r3, [sp, #0]
   14e14:	f003 0301 	and.w	r3, r3, #1
   14e18:	2b00      	cmp	r3, #0
   14e1a:	d100      	bne.n	14e1e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   14e1e:	490a      	ldr	r1, [pc, #40]	; (14e48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
   14e20:	9b01      	ldr	r3, [sp, #4]
   14e22:	9a00      	ldr	r2, [sp, #0]
   14e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]++;
   14e28:	4a06      	ldr	r2, [pc, #24]	; (14e44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14e2a:	9b01      	ldr	r3, [sp, #4]
   14e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e30:	1c5a      	adds	r2, r3, #1
   14e32:	4904      	ldr	r1, [pc, #16]	; (14e44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14e34:	9b01      	ldr	r3, [sp, #4]
   14e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e3a:	bf00      	nop
   14e3c:	b003      	add	sp, #12
   14e3e:	f85d fb04 	ldr.w	pc, [sp], #4
   14e42:	bf00      	nop
   14e44:	1fff9690 	.word	0x1fff9690
   14e48:	1fff968c 	.word	0x1fff968c

00014e4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   14e4c:	b500      	push	{lr}
   14e4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e50:	f7ec fc92 	bl	1778 <Sys_GetCoreID>
   14e54:	4603      	mov	r3, r0
   14e56:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]--;
   14e58:	4a0d      	ldr	r2, [pc, #52]	; (14e90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14e5a:	9b01      	ldr	r3, [sp, #4]
   14e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e60:	1e5a      	subs	r2, r3, #1
   14e62:	490b      	ldr	r1, [pc, #44]	; (14e90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14e64:	9b01      	ldr	r3, [sp, #4]
   14e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   14e6a:	4a0a      	ldr	r2, [pc, #40]	; (14e94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
   14e6c:	9b01      	ldr	r3, [sp, #4]
   14e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e72:	f003 0301 	and.w	r3, r3, #1
   14e76:	2b00      	cmp	r3, #0
   14e78:	d106      	bne.n	14e88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
   14e7a:	4a05      	ldr	r2, [pc, #20]	; (14e90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14e7c:	9b01      	ldr	r3, [sp, #4]
   14e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e82:	2b00      	cmp	r3, #0
   14e84:	d100      	bne.n	14e88 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e88:	bf00      	nop
   14e8a:	b003      	add	sp, #12
   14e8c:	f85d fb04 	ldr.w	pc, [sp], #4
   14e90:	1fff9690 	.word	0x1fff9690
   14e94:	1fff968c 	.word	0x1fff968c

00014e98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   14e98:	b500      	push	{lr}
   14e9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e9c:	f7ec fc6c 	bl	1778 <Sys_GetCoreID>
   14ea0:	4603      	mov	r3, r0
   14ea2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId])
   14ea4:	4a10      	ldr	r2, [pc, #64]	; (14ee8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14ea6:	9b01      	ldr	r3, [sp, #4]
   14ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eac:	2b00      	cmp	r3, #0
   14eae:	d10d      	bne.n	14ecc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14eb0:	f7eb fd32 	bl	918 <Pwm_schm_read_msr>
   14eb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14eb6:	9b00      	ldr	r3, [sp, #0]
   14eb8:	f003 0301 	and.w	r3, r3, #1
   14ebc:	2b00      	cmp	r3, #0
   14ebe:	d100      	bne.n	14ec2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ec0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   14ec2:	490a      	ldr	r1, [pc, #40]	; (14eec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
   14ec4:	9b01      	ldr	r3, [sp, #4]
   14ec6:	9a00      	ldr	r2, [sp, #0]
   14ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]++;
   14ecc:	4a06      	ldr	r2, [pc, #24]	; (14ee8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14ece:	9b01      	ldr	r3, [sp, #4]
   14ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ed4:	1c5a      	adds	r2, r3, #1
   14ed6:	4904      	ldr	r1, [pc, #16]	; (14ee8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14ed8:	9b01      	ldr	r3, [sp, #4]
   14eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ede:	bf00      	nop
   14ee0:	b003      	add	sp, #12
   14ee2:	f85d fb04 	ldr.w	pc, [sp], #4
   14ee6:	bf00      	nop
   14ee8:	1fff9698 	.word	0x1fff9698
   14eec:	1fff9694 	.word	0x1fff9694

00014ef0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   14ef0:	b500      	push	{lr}
   14ef2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ef4:	f7ec fc40 	bl	1778 <Sys_GetCoreID>
   14ef8:	4603      	mov	r3, r0
   14efa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]--;
   14efc:	4a0d      	ldr	r2, [pc, #52]	; (14f34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14efe:	9b01      	ldr	r3, [sp, #4]
   14f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f04:	1e5a      	subs	r2, r3, #1
   14f06:	490b      	ldr	r1, [pc, #44]	; (14f34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14f08:	9b01      	ldr	r3, [sp, #4]
   14f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   14f0e:	4a0a      	ldr	r2, [pc, #40]	; (14f38 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
   14f10:	9b01      	ldr	r3, [sp, #4]
   14f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f16:	f003 0301 	and.w	r3, r3, #1
   14f1a:	2b00      	cmp	r3, #0
   14f1c:	d106      	bne.n	14f2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
   14f1e:	4a05      	ldr	r2, [pc, #20]	; (14f34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14f20:	9b01      	ldr	r3, [sp, #4]
   14f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f26:	2b00      	cmp	r3, #0
   14f28:	d100      	bne.n	14f2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f2c:	bf00      	nop
   14f2e:	b003      	add	sp, #12
   14f30:	f85d fb04 	ldr.w	pc, [sp], #4
   14f34:	1fff9698 	.word	0x1fff9698
   14f38:	1fff9694 	.word	0x1fff9694

00014f3c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   14f3c:	b500      	push	{lr}
   14f3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f40:	f7ec fc1a 	bl	1778 <Sys_GetCoreID>
   14f44:	4603      	mov	r3, r0
   14f46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId])
   14f48:	4a10      	ldr	r2, [pc, #64]	; (14f8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14f4a:	9b01      	ldr	r3, [sp, #4]
   14f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f50:	2b00      	cmp	r3, #0
   14f52:	d10d      	bne.n	14f70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f54:	f7eb fce0 	bl	918 <Pwm_schm_read_msr>
   14f58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f5a:	9b00      	ldr	r3, [sp, #0]
   14f5c:	f003 0301 	and.w	r3, r3, #1
   14f60:	2b00      	cmp	r3, #0
   14f62:	d100      	bne.n	14f66 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   14f66:	490a      	ldr	r1, [pc, #40]	; (14f90 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
   14f68:	9b01      	ldr	r3, [sp, #4]
   14f6a:	9a00      	ldr	r2, [sp, #0]
   14f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]++;
   14f70:	4a06      	ldr	r2, [pc, #24]	; (14f8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14f72:	9b01      	ldr	r3, [sp, #4]
   14f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f78:	1c5a      	adds	r2, r3, #1
   14f7a:	4904      	ldr	r1, [pc, #16]	; (14f8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14f7c:	9b01      	ldr	r3, [sp, #4]
   14f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f82:	bf00      	nop
   14f84:	b003      	add	sp, #12
   14f86:	f85d fb04 	ldr.w	pc, [sp], #4
   14f8a:	bf00      	nop
   14f8c:	1fff96a0 	.word	0x1fff96a0
   14f90:	1fff969c 	.word	0x1fff969c

00014f94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   14f94:	b500      	push	{lr}
   14f96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f98:	f7ec fbee 	bl	1778 <Sys_GetCoreID>
   14f9c:	4603      	mov	r3, r0
   14f9e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]--;
   14fa0:	4a0d      	ldr	r2, [pc, #52]	; (14fd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14fa2:	9b01      	ldr	r3, [sp, #4]
   14fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fa8:	1e5a      	subs	r2, r3, #1
   14faa:	490b      	ldr	r1, [pc, #44]	; (14fd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14fac:	9b01      	ldr	r3, [sp, #4]
   14fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   14fb2:	4a0a      	ldr	r2, [pc, #40]	; (14fdc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
   14fb4:	9b01      	ldr	r3, [sp, #4]
   14fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fba:	f003 0301 	and.w	r3, r3, #1
   14fbe:	2b00      	cmp	r3, #0
   14fc0:	d106      	bne.n	14fd0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
   14fc2:	4a05      	ldr	r2, [pc, #20]	; (14fd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14fc4:	9b01      	ldr	r3, [sp, #4]
   14fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fca:	2b00      	cmp	r3, #0
   14fcc:	d100      	bne.n	14fd0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14fce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14fd0:	bf00      	nop
   14fd2:	b003      	add	sp, #12
   14fd4:	f85d fb04 	ldr.w	pc, [sp], #4
   14fd8:	1fff96a0 	.word	0x1fff96a0
   14fdc:	1fff969c 	.word	0x1fff969c

00014fe0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   14fe0:	b500      	push	{lr}
   14fe2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fe4:	f7ec fbc8 	bl	1778 <Sys_GetCoreID>
   14fe8:	4603      	mov	r3, r0
   14fea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId])
   14fec:	4a10      	ldr	r2, [pc, #64]	; (15030 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   14fee:	9b01      	ldr	r3, [sp, #4]
   14ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ff4:	2b00      	cmp	r3, #0
   14ff6:	d10d      	bne.n	15014 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ff8:	f7eb fc8e 	bl	918 <Pwm_schm_read_msr>
   14ffc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ffe:	9b00      	ldr	r3, [sp, #0]
   15000:	f003 0301 	and.w	r3, r3, #1
   15004:	2b00      	cmp	r3, #0
   15006:	d100      	bne.n	1500a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15008:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   1500a:	490a      	ldr	r1, [pc, #40]	; (15034 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
   1500c:	9b01      	ldr	r3, [sp, #4]
   1500e:	9a00      	ldr	r2, [sp, #0]
   15010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]++;
   15014:	4a06      	ldr	r2, [pc, #24]	; (15030 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   15016:	9b01      	ldr	r3, [sp, #4]
   15018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1501c:	1c5a      	adds	r2, r3, #1
   1501e:	4904      	ldr	r1, [pc, #16]	; (15030 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   15020:	9b01      	ldr	r3, [sp, #4]
   15022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15026:	bf00      	nop
   15028:	b003      	add	sp, #12
   1502a:	f85d fb04 	ldr.w	pc, [sp], #4
   1502e:	bf00      	nop
   15030:	1fff96a8 	.word	0x1fff96a8
   15034:	1fff96a4 	.word	0x1fff96a4

00015038 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   15038:	b500      	push	{lr}
   1503a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1503c:	f7ec fb9c 	bl	1778 <Sys_GetCoreID>
   15040:	4603      	mov	r3, r0
   15042:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]--;
   15044:	4a0d      	ldr	r2, [pc, #52]	; (1507c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   15046:	9b01      	ldr	r3, [sp, #4]
   15048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1504c:	1e5a      	subs	r2, r3, #1
   1504e:	490b      	ldr	r1, [pc, #44]	; (1507c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   15050:	9b01      	ldr	r3, [sp, #4]
   15052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   15056:	4a0a      	ldr	r2, [pc, #40]	; (15080 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
   15058:	9b01      	ldr	r3, [sp, #4]
   1505a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1505e:	f003 0301 	and.w	r3, r3, #1
   15062:	2b00      	cmp	r3, #0
   15064:	d106      	bne.n	15074 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
   15066:	4a05      	ldr	r2, [pc, #20]	; (1507c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   15068:	9b01      	ldr	r3, [sp, #4]
   1506a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1506e:	2b00      	cmp	r3, #0
   15070:	d100      	bne.n	15074 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15072:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15074:	bf00      	nop
   15076:	b003      	add	sp, #12
   15078:	f85d fb04 	ldr.w	pc, [sp], #4
   1507c:	1fff96a8 	.word	0x1fff96a8
   15080:	1fff96a4 	.word	0x1fff96a4

00015084 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   15084:	b500      	push	{lr}
   15086:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15088:	f7ec fb76 	bl	1778 <Sys_GetCoreID>
   1508c:	4603      	mov	r3, r0
   1508e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId])
   15090:	4a10      	ldr	r2, [pc, #64]	; (150d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   15092:	9b01      	ldr	r3, [sp, #4]
   15094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15098:	2b00      	cmp	r3, #0
   1509a:	d10d      	bne.n	150b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1509c:	f7eb fc3c 	bl	918 <Pwm_schm_read_msr>
   150a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   150a2:	9b00      	ldr	r3, [sp, #0]
   150a4:	f003 0301 	and.w	r3, r3, #1
   150a8:	2b00      	cmp	r3, #0
   150aa:	d100      	bne.n	150ae <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   150ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   150ae:	490a      	ldr	r1, [pc, #40]	; (150d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
   150b0:	9b01      	ldr	r3, [sp, #4]
   150b2:	9a00      	ldr	r2, [sp, #0]
   150b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]++;
   150b8:	4a06      	ldr	r2, [pc, #24]	; (150d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   150ba:	9b01      	ldr	r3, [sp, #4]
   150bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150c0:	1c5a      	adds	r2, r3, #1
   150c2:	4904      	ldr	r1, [pc, #16]	; (150d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   150c4:	9b01      	ldr	r3, [sp, #4]
   150c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   150ca:	bf00      	nop
   150cc:	b003      	add	sp, #12
   150ce:	f85d fb04 	ldr.w	pc, [sp], #4
   150d2:	bf00      	nop
   150d4:	1fff96b0 	.word	0x1fff96b0
   150d8:	1fff96ac 	.word	0x1fff96ac

000150dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   150dc:	b500      	push	{lr}
   150de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150e0:	f7ec fb4a 	bl	1778 <Sys_GetCoreID>
   150e4:	4603      	mov	r3, r0
   150e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]--;
   150e8:	4a0d      	ldr	r2, [pc, #52]	; (15120 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   150ea:	9b01      	ldr	r3, [sp, #4]
   150ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150f0:	1e5a      	subs	r2, r3, #1
   150f2:	490b      	ldr	r1, [pc, #44]	; (15120 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   150f4:	9b01      	ldr	r3, [sp, #4]
   150f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   150fa:	4a0a      	ldr	r2, [pc, #40]	; (15124 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
   150fc:	9b01      	ldr	r3, [sp, #4]
   150fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15102:	f003 0301 	and.w	r3, r3, #1
   15106:	2b00      	cmp	r3, #0
   15108:	d106      	bne.n	15118 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
   1510a:	4a05      	ldr	r2, [pc, #20]	; (15120 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   1510c:	9b01      	ldr	r3, [sp, #4]
   1510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15112:	2b00      	cmp	r3, #0
   15114:	d100      	bne.n	15118 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15116:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15118:	bf00      	nop
   1511a:	b003      	add	sp, #12
   1511c:	f85d fb04 	ldr.w	pc, [sp], #4
   15120:	1fff96b0 	.word	0x1fff96b0
   15124:	1fff96ac 	.word	0x1fff96ac

00015128 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   15128:	b500      	push	{lr}
   1512a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1512c:	f7ec fb24 	bl	1778 <Sys_GetCoreID>
   15130:	4603      	mov	r3, r0
   15132:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId])
   15134:	4a10      	ldr	r2, [pc, #64]	; (15178 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   15136:	9b01      	ldr	r3, [sp, #4]
   15138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1513c:	2b00      	cmp	r3, #0
   1513e:	d10d      	bne.n	1515c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15140:	f7eb fbea 	bl	918 <Pwm_schm_read_msr>
   15144:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15146:	9b00      	ldr	r3, [sp, #0]
   15148:	f003 0301 	and.w	r3, r3, #1
   1514c:	2b00      	cmp	r3, #0
   1514e:	d100      	bne.n	15152 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15150:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   15152:	490a      	ldr	r1, [pc, #40]	; (1517c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
   15154:	9b01      	ldr	r3, [sp, #4]
   15156:	9a00      	ldr	r2, [sp, #0]
   15158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]++;
   1515c:	4a06      	ldr	r2, [pc, #24]	; (15178 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   1515e:	9b01      	ldr	r3, [sp, #4]
   15160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15164:	1c5a      	adds	r2, r3, #1
   15166:	4904      	ldr	r1, [pc, #16]	; (15178 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   15168:	9b01      	ldr	r3, [sp, #4]
   1516a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1516e:	bf00      	nop
   15170:	b003      	add	sp, #12
   15172:	f85d fb04 	ldr.w	pc, [sp], #4
   15176:	bf00      	nop
   15178:	1fff96b8 	.word	0x1fff96b8
   1517c:	1fff96b4 	.word	0x1fff96b4

00015180 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   15180:	b500      	push	{lr}
   15182:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15184:	f7ec faf8 	bl	1778 <Sys_GetCoreID>
   15188:	4603      	mov	r3, r0
   1518a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]--;
   1518c:	4a0d      	ldr	r2, [pc, #52]	; (151c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   1518e:	9b01      	ldr	r3, [sp, #4]
   15190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15194:	1e5a      	subs	r2, r3, #1
   15196:	490b      	ldr	r1, [pc, #44]	; (151c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   15198:	9b01      	ldr	r3, [sp, #4]
   1519a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   1519e:	4a0a      	ldr	r2, [pc, #40]	; (151c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
   151a0:	9b01      	ldr	r3, [sp, #4]
   151a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151a6:	f003 0301 	and.w	r3, r3, #1
   151aa:	2b00      	cmp	r3, #0
   151ac:	d106      	bne.n	151bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
   151ae:	4a05      	ldr	r2, [pc, #20]	; (151c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   151b0:	9b01      	ldr	r3, [sp, #4]
   151b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151b6:	2b00      	cmp	r3, #0
   151b8:	d100      	bne.n	151bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   151ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   151bc:	bf00      	nop
   151be:	b003      	add	sp, #12
   151c0:	f85d fb04 	ldr.w	pc, [sp], #4
   151c4:	1fff96b8 	.word	0x1fff96b8
   151c8:	1fff96b4 	.word	0x1fff96b4

000151cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   151cc:	b500      	push	{lr}
   151ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151d0:	f7ec fad2 	bl	1778 <Sys_GetCoreID>
   151d4:	4603      	mov	r3, r0
   151d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId])
   151d8:	4a10      	ldr	r2, [pc, #64]	; (1521c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   151da:	9b01      	ldr	r3, [sp, #4]
   151dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151e0:	2b00      	cmp	r3, #0
   151e2:	d10d      	bne.n	15200 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   151e4:	f7eb fb98 	bl	918 <Pwm_schm_read_msr>
   151e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   151ea:	9b00      	ldr	r3, [sp, #0]
   151ec:	f003 0301 	and.w	r3, r3, #1
   151f0:	2b00      	cmp	r3, #0
   151f2:	d100      	bne.n	151f6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   151f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   151f6:	490a      	ldr	r1, [pc, #40]	; (15220 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
   151f8:	9b01      	ldr	r3, [sp, #4]
   151fa:	9a00      	ldr	r2, [sp, #0]
   151fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]++;
   15200:	4a06      	ldr	r2, [pc, #24]	; (1521c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   15202:	9b01      	ldr	r3, [sp, #4]
   15204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15208:	1c5a      	adds	r2, r3, #1
   1520a:	4904      	ldr	r1, [pc, #16]	; (1521c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   1520c:	9b01      	ldr	r3, [sp, #4]
   1520e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15212:	bf00      	nop
   15214:	b003      	add	sp, #12
   15216:	f85d fb04 	ldr.w	pc, [sp], #4
   1521a:	bf00      	nop
   1521c:	1fff96c0 	.word	0x1fff96c0
   15220:	1fff96bc 	.word	0x1fff96bc

00015224 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   15224:	b500      	push	{lr}
   15226:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15228:	f7ec faa6 	bl	1778 <Sys_GetCoreID>
   1522c:	4603      	mov	r3, r0
   1522e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]--;
   15230:	4a0d      	ldr	r2, [pc, #52]	; (15268 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   15232:	9b01      	ldr	r3, [sp, #4]
   15234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15238:	1e5a      	subs	r2, r3, #1
   1523a:	490b      	ldr	r1, [pc, #44]	; (15268 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   1523c:	9b01      	ldr	r3, [sp, #4]
   1523e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   15242:	4a0a      	ldr	r2, [pc, #40]	; (1526c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
   15244:	9b01      	ldr	r3, [sp, #4]
   15246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1524a:	f003 0301 	and.w	r3, r3, #1
   1524e:	2b00      	cmp	r3, #0
   15250:	d106      	bne.n	15260 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
   15252:	4a05      	ldr	r2, [pc, #20]	; (15268 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   15254:	9b01      	ldr	r3, [sp, #4]
   15256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1525a:	2b00      	cmp	r3, #0
   1525c:	d100      	bne.n	15260 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1525e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15260:	bf00      	nop
   15262:	b003      	add	sp, #12
   15264:	f85d fb04 	ldr.w	pc, [sp], #4
   15268:	1fff96c0 	.word	0x1fff96c0
   1526c:	1fff96bc 	.word	0x1fff96bc

00015270 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   15270:	b500      	push	{lr}
   15272:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15274:	f7ec fa80 	bl	1778 <Sys_GetCoreID>
   15278:	4603      	mov	r3, r0
   1527a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId])
   1527c:	4a10      	ldr	r2, [pc, #64]	; (152c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   1527e:	9b01      	ldr	r3, [sp, #4]
   15280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15284:	2b00      	cmp	r3, #0
   15286:	d10d      	bne.n	152a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15288:	f7eb fb46 	bl	918 <Pwm_schm_read_msr>
   1528c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1528e:	9b00      	ldr	r3, [sp, #0]
   15290:	f003 0301 	and.w	r3, r3, #1
   15294:	2b00      	cmp	r3, #0
   15296:	d100      	bne.n	1529a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15298:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   1529a:	490a      	ldr	r1, [pc, #40]	; (152c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
   1529c:	9b01      	ldr	r3, [sp, #4]
   1529e:	9a00      	ldr	r2, [sp, #0]
   152a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]++;
   152a4:	4a06      	ldr	r2, [pc, #24]	; (152c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   152a6:	9b01      	ldr	r3, [sp, #4]
   152a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152ac:	1c5a      	adds	r2, r3, #1
   152ae:	4904      	ldr	r1, [pc, #16]	; (152c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   152b0:	9b01      	ldr	r3, [sp, #4]
   152b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   152b6:	bf00      	nop
   152b8:	b003      	add	sp, #12
   152ba:	f85d fb04 	ldr.w	pc, [sp], #4
   152be:	bf00      	nop
   152c0:	1fff96c8 	.word	0x1fff96c8
   152c4:	1fff96c4 	.word	0x1fff96c4

000152c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   152c8:	b500      	push	{lr}
   152ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152cc:	f7ec fa54 	bl	1778 <Sys_GetCoreID>
   152d0:	4603      	mov	r3, r0
   152d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]--;
   152d4:	4a0d      	ldr	r2, [pc, #52]	; (1530c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   152d6:	9b01      	ldr	r3, [sp, #4]
   152d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152dc:	1e5a      	subs	r2, r3, #1
   152de:	490b      	ldr	r1, [pc, #44]	; (1530c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   152e0:	9b01      	ldr	r3, [sp, #4]
   152e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   152e6:	4a0a      	ldr	r2, [pc, #40]	; (15310 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
   152e8:	9b01      	ldr	r3, [sp, #4]
   152ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152ee:	f003 0301 	and.w	r3, r3, #1
   152f2:	2b00      	cmp	r3, #0
   152f4:	d106      	bne.n	15304 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
   152f6:	4a05      	ldr	r2, [pc, #20]	; (1530c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   152f8:	9b01      	ldr	r3, [sp, #4]
   152fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152fe:	2b00      	cmp	r3, #0
   15300:	d100      	bne.n	15304 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15302:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15304:	bf00      	nop
   15306:	b003      	add	sp, #12
   15308:	f85d fb04 	ldr.w	pc, [sp], #4
   1530c:	1fff96c8 	.word	0x1fff96c8
   15310:	1fff96c4 	.word	0x1fff96c4

00015314 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   15314:	b500      	push	{lr}
   15316:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15318:	f7ec fa2e 	bl	1778 <Sys_GetCoreID>
   1531c:	4603      	mov	r3, r0
   1531e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId])
   15320:	4a10      	ldr	r2, [pc, #64]	; (15364 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   15322:	9b01      	ldr	r3, [sp, #4]
   15324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15328:	2b00      	cmp	r3, #0
   1532a:	d10d      	bne.n	15348 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1532c:	f7eb faf4 	bl	918 <Pwm_schm_read_msr>
   15330:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15332:	9b00      	ldr	r3, [sp, #0]
   15334:	f003 0301 	and.w	r3, r3, #1
   15338:	2b00      	cmp	r3, #0
   1533a:	d100      	bne.n	1533e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1533c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   1533e:	490a      	ldr	r1, [pc, #40]	; (15368 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
   15340:	9b01      	ldr	r3, [sp, #4]
   15342:	9a00      	ldr	r2, [sp, #0]
   15344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]++;
   15348:	4a06      	ldr	r2, [pc, #24]	; (15364 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   1534a:	9b01      	ldr	r3, [sp, #4]
   1534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15350:	1c5a      	adds	r2, r3, #1
   15352:	4904      	ldr	r1, [pc, #16]	; (15364 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   15354:	9b01      	ldr	r3, [sp, #4]
   15356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1535a:	bf00      	nop
   1535c:	b003      	add	sp, #12
   1535e:	f85d fb04 	ldr.w	pc, [sp], #4
   15362:	bf00      	nop
   15364:	1fff96d0 	.word	0x1fff96d0
   15368:	1fff96cc 	.word	0x1fff96cc

0001536c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   1536c:	b500      	push	{lr}
   1536e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15370:	f7ec fa02 	bl	1778 <Sys_GetCoreID>
   15374:	4603      	mov	r3, r0
   15376:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]--;
   15378:	4a0d      	ldr	r2, [pc, #52]	; (153b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   1537a:	9b01      	ldr	r3, [sp, #4]
   1537c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15380:	1e5a      	subs	r2, r3, #1
   15382:	490b      	ldr	r1, [pc, #44]	; (153b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   15384:	9b01      	ldr	r3, [sp, #4]
   15386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   1538a:	4a0a      	ldr	r2, [pc, #40]	; (153b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
   1538c:	9b01      	ldr	r3, [sp, #4]
   1538e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15392:	f003 0301 	and.w	r3, r3, #1
   15396:	2b00      	cmp	r3, #0
   15398:	d106      	bne.n	153a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
   1539a:	4a05      	ldr	r2, [pc, #20]	; (153b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   1539c:	9b01      	ldr	r3, [sp, #4]
   1539e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153a2:	2b00      	cmp	r3, #0
   153a4:	d100      	bne.n	153a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   153a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   153a8:	bf00      	nop
   153aa:	b003      	add	sp, #12
   153ac:	f85d fb04 	ldr.w	pc, [sp], #4
   153b0:	1fff96d0 	.word	0x1fff96d0
   153b4:	1fff96cc 	.word	0x1fff96cc

000153b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   153b8:	b500      	push	{lr}
   153ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153bc:	f7ec f9dc 	bl	1778 <Sys_GetCoreID>
   153c0:	4603      	mov	r3, r0
   153c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId])
   153c4:	4a10      	ldr	r2, [pc, #64]	; (15408 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   153c6:	9b01      	ldr	r3, [sp, #4]
   153c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153cc:	2b00      	cmp	r3, #0
   153ce:	d10d      	bne.n	153ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   153d0:	f7eb faa2 	bl	918 <Pwm_schm_read_msr>
   153d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   153d6:	9b00      	ldr	r3, [sp, #0]
   153d8:	f003 0301 	and.w	r3, r3, #1
   153dc:	2b00      	cmp	r3, #0
   153de:	d100      	bne.n	153e2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   153e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   153e2:	490a      	ldr	r1, [pc, #40]	; (1540c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
   153e4:	9b01      	ldr	r3, [sp, #4]
   153e6:	9a00      	ldr	r2, [sp, #0]
   153e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]++;
   153ec:	4a06      	ldr	r2, [pc, #24]	; (15408 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   153ee:	9b01      	ldr	r3, [sp, #4]
   153f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153f4:	1c5a      	adds	r2, r3, #1
   153f6:	4904      	ldr	r1, [pc, #16]	; (15408 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   153f8:	9b01      	ldr	r3, [sp, #4]
   153fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   153fe:	bf00      	nop
   15400:	b003      	add	sp, #12
   15402:	f85d fb04 	ldr.w	pc, [sp], #4
   15406:	bf00      	nop
   15408:	1fff96d8 	.word	0x1fff96d8
   1540c:	1fff96d4 	.word	0x1fff96d4

00015410 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   15410:	b500      	push	{lr}
   15412:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15414:	f7ec f9b0 	bl	1778 <Sys_GetCoreID>
   15418:	4603      	mov	r3, r0
   1541a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]--;
   1541c:	4a0d      	ldr	r2, [pc, #52]	; (15454 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   1541e:	9b01      	ldr	r3, [sp, #4]
   15420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15424:	1e5a      	subs	r2, r3, #1
   15426:	490b      	ldr	r1, [pc, #44]	; (15454 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   15428:	9b01      	ldr	r3, [sp, #4]
   1542a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   1542e:	4a0a      	ldr	r2, [pc, #40]	; (15458 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
   15430:	9b01      	ldr	r3, [sp, #4]
   15432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15436:	f003 0301 	and.w	r3, r3, #1
   1543a:	2b00      	cmp	r3, #0
   1543c:	d106      	bne.n	1544c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
   1543e:	4a05      	ldr	r2, [pc, #20]	; (15454 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   15440:	9b01      	ldr	r3, [sp, #4]
   15442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15446:	2b00      	cmp	r3, #0
   15448:	d100      	bne.n	1544c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1544a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1544c:	bf00      	nop
   1544e:	b003      	add	sp, #12
   15450:	f85d fb04 	ldr.w	pc, [sp], #4
   15454:	1fff96d8 	.word	0x1fff96d8
   15458:	1fff96d4 	.word	0x1fff96d4

0001545c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   1545c:	b500      	push	{lr}
   1545e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15460:	f7ec f98a 	bl	1778 <Sys_GetCoreID>
   15464:	4603      	mov	r3, r0
   15466:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId])
   15468:	4a10      	ldr	r2, [pc, #64]	; (154ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   1546a:	9b01      	ldr	r3, [sp, #4]
   1546c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15470:	2b00      	cmp	r3, #0
   15472:	d10d      	bne.n	15490 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15474:	f7eb fa50 	bl	918 <Pwm_schm_read_msr>
   15478:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1547a:	9b00      	ldr	r3, [sp, #0]
   1547c:	f003 0301 	and.w	r3, r3, #1
   15480:	2b00      	cmp	r3, #0
   15482:	d100      	bne.n	15486 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15484:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   15486:	490a      	ldr	r1, [pc, #40]	; (154b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
   15488:	9b01      	ldr	r3, [sp, #4]
   1548a:	9a00      	ldr	r2, [sp, #0]
   1548c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]++;
   15490:	4a06      	ldr	r2, [pc, #24]	; (154ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   15492:	9b01      	ldr	r3, [sp, #4]
   15494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15498:	1c5a      	adds	r2, r3, #1
   1549a:	4904      	ldr	r1, [pc, #16]	; (154ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   1549c:	9b01      	ldr	r3, [sp, #4]
   1549e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   154a2:	bf00      	nop
   154a4:	b003      	add	sp, #12
   154a6:	f85d fb04 	ldr.w	pc, [sp], #4
   154aa:	bf00      	nop
   154ac:	1fff96e0 	.word	0x1fff96e0
   154b0:	1fff96dc 	.word	0x1fff96dc

000154b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   154b4:	b500      	push	{lr}
   154b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154b8:	f7ec f95e 	bl	1778 <Sys_GetCoreID>
   154bc:	4603      	mov	r3, r0
   154be:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]--;
   154c0:	4a0d      	ldr	r2, [pc, #52]	; (154f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   154c2:	9b01      	ldr	r3, [sp, #4]
   154c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154c8:	1e5a      	subs	r2, r3, #1
   154ca:	490b      	ldr	r1, [pc, #44]	; (154f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   154cc:	9b01      	ldr	r3, [sp, #4]
   154ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   154d2:	4a0a      	ldr	r2, [pc, #40]	; (154fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
   154d4:	9b01      	ldr	r3, [sp, #4]
   154d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154da:	f003 0301 	and.w	r3, r3, #1
   154de:	2b00      	cmp	r3, #0
   154e0:	d106      	bne.n	154f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
   154e2:	4a05      	ldr	r2, [pc, #20]	; (154f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   154e4:	9b01      	ldr	r3, [sp, #4]
   154e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154ea:	2b00      	cmp	r3, #0
   154ec:	d100      	bne.n	154f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   154ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   154f0:	bf00      	nop
   154f2:	b003      	add	sp, #12
   154f4:	f85d fb04 	ldr.w	pc, [sp], #4
   154f8:	1fff96e0 	.word	0x1fff96e0
   154fc:	1fff96dc 	.word	0x1fff96dc

00015500 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   15500:	b500      	push	{lr}
   15502:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15504:	f7ec f938 	bl	1778 <Sys_GetCoreID>
   15508:	4603      	mov	r3, r0
   1550a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId])
   1550c:	4a10      	ldr	r2, [pc, #64]	; (15550 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   1550e:	9b01      	ldr	r3, [sp, #4]
   15510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15514:	2b00      	cmp	r3, #0
   15516:	d10d      	bne.n	15534 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15518:	f7eb f9fe 	bl	918 <Pwm_schm_read_msr>
   1551c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1551e:	9b00      	ldr	r3, [sp, #0]
   15520:	f003 0301 	and.w	r3, r3, #1
   15524:	2b00      	cmp	r3, #0
   15526:	d100      	bne.n	1552a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15528:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   1552a:	490a      	ldr	r1, [pc, #40]	; (15554 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
   1552c:	9b01      	ldr	r3, [sp, #4]
   1552e:	9a00      	ldr	r2, [sp, #0]
   15530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]++;
   15534:	4a06      	ldr	r2, [pc, #24]	; (15550 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   15536:	9b01      	ldr	r3, [sp, #4]
   15538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1553c:	1c5a      	adds	r2, r3, #1
   1553e:	4904      	ldr	r1, [pc, #16]	; (15550 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   15540:	9b01      	ldr	r3, [sp, #4]
   15542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15546:	bf00      	nop
   15548:	b003      	add	sp, #12
   1554a:	f85d fb04 	ldr.w	pc, [sp], #4
   1554e:	bf00      	nop
   15550:	1fff96e8 	.word	0x1fff96e8
   15554:	1fff96e4 	.word	0x1fff96e4

00015558 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   15558:	b500      	push	{lr}
   1555a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1555c:	f7ec f90c 	bl	1778 <Sys_GetCoreID>
   15560:	4603      	mov	r3, r0
   15562:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]--;
   15564:	4a0d      	ldr	r2, [pc, #52]	; (1559c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   15566:	9b01      	ldr	r3, [sp, #4]
   15568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1556c:	1e5a      	subs	r2, r3, #1
   1556e:	490b      	ldr	r1, [pc, #44]	; (1559c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   15570:	9b01      	ldr	r3, [sp, #4]
   15572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   15576:	4a0a      	ldr	r2, [pc, #40]	; (155a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
   15578:	9b01      	ldr	r3, [sp, #4]
   1557a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1557e:	f003 0301 	and.w	r3, r3, #1
   15582:	2b00      	cmp	r3, #0
   15584:	d106      	bne.n	15594 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
   15586:	4a05      	ldr	r2, [pc, #20]	; (1559c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   15588:	9b01      	ldr	r3, [sp, #4]
   1558a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1558e:	2b00      	cmp	r3, #0
   15590:	d100      	bne.n	15594 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15592:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15594:	bf00      	nop
   15596:	b003      	add	sp, #12
   15598:	f85d fb04 	ldr.w	pc, [sp], #4
   1559c:	1fff96e8 	.word	0x1fff96e8
   155a0:	1fff96e4 	.word	0x1fff96e4

000155a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   155a4:	b500      	push	{lr}
   155a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155a8:	f7ec f8e6 	bl	1778 <Sys_GetCoreID>
   155ac:	4603      	mov	r3, r0
   155ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId])
   155b0:	4a10      	ldr	r2, [pc, #64]	; (155f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   155b2:	9b01      	ldr	r3, [sp, #4]
   155b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155b8:	2b00      	cmp	r3, #0
   155ba:	d10d      	bne.n	155d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   155bc:	f7eb f9ac 	bl	918 <Pwm_schm_read_msr>
   155c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   155c2:	9b00      	ldr	r3, [sp, #0]
   155c4:	f003 0301 	and.w	r3, r3, #1
   155c8:	2b00      	cmp	r3, #0
   155ca:	d100      	bne.n	155ce <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   155cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   155ce:	490a      	ldr	r1, [pc, #40]	; (155f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
   155d0:	9b01      	ldr	r3, [sp, #4]
   155d2:	9a00      	ldr	r2, [sp, #0]
   155d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]++;
   155d8:	4a06      	ldr	r2, [pc, #24]	; (155f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   155da:	9b01      	ldr	r3, [sp, #4]
   155dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155e0:	1c5a      	adds	r2, r3, #1
   155e2:	4904      	ldr	r1, [pc, #16]	; (155f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   155e4:	9b01      	ldr	r3, [sp, #4]
   155e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   155ea:	bf00      	nop
   155ec:	b003      	add	sp, #12
   155ee:	f85d fb04 	ldr.w	pc, [sp], #4
   155f2:	bf00      	nop
   155f4:	1fff96f0 	.word	0x1fff96f0
   155f8:	1fff96ec 	.word	0x1fff96ec

000155fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   155fc:	b500      	push	{lr}
   155fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15600:	f7ec f8ba 	bl	1778 <Sys_GetCoreID>
   15604:	4603      	mov	r3, r0
   15606:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]--;
   15608:	4a0d      	ldr	r2, [pc, #52]	; (15640 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   1560a:	9b01      	ldr	r3, [sp, #4]
   1560c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15610:	1e5a      	subs	r2, r3, #1
   15612:	490b      	ldr	r1, [pc, #44]	; (15640 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   15614:	9b01      	ldr	r3, [sp, #4]
   15616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   1561a:	4a0a      	ldr	r2, [pc, #40]	; (15644 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
   1561c:	9b01      	ldr	r3, [sp, #4]
   1561e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15622:	f003 0301 	and.w	r3, r3, #1
   15626:	2b00      	cmp	r3, #0
   15628:	d106      	bne.n	15638 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
   1562a:	4a05      	ldr	r2, [pc, #20]	; (15640 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   1562c:	9b01      	ldr	r3, [sp, #4]
   1562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15632:	2b00      	cmp	r3, #0
   15634:	d100      	bne.n	15638 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15636:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15638:	bf00      	nop
   1563a:	b003      	add	sp, #12
   1563c:	f85d fb04 	ldr.w	pc, [sp], #4
   15640:	1fff96f0 	.word	0x1fff96f0
   15644:	1fff96ec 	.word	0x1fff96ec

00015648 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   15648:	b500      	push	{lr}
   1564a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1564c:	f7ec f894 	bl	1778 <Sys_GetCoreID>
   15650:	4603      	mov	r3, r0
   15652:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId])
   15654:	4a10      	ldr	r2, [pc, #64]	; (15698 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   15656:	9b01      	ldr	r3, [sp, #4]
   15658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1565c:	2b00      	cmp	r3, #0
   1565e:	d10d      	bne.n	1567c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15660:	f7eb f95a 	bl	918 <Pwm_schm_read_msr>
   15664:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15666:	9b00      	ldr	r3, [sp, #0]
   15668:	f003 0301 	and.w	r3, r3, #1
   1566c:	2b00      	cmp	r3, #0
   1566e:	d100      	bne.n	15672 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15670:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   15672:	490a      	ldr	r1, [pc, #40]	; (1569c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
   15674:	9b01      	ldr	r3, [sp, #4]
   15676:	9a00      	ldr	r2, [sp, #0]
   15678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]++;
   1567c:	4a06      	ldr	r2, [pc, #24]	; (15698 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   1567e:	9b01      	ldr	r3, [sp, #4]
   15680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15684:	1c5a      	adds	r2, r3, #1
   15686:	4904      	ldr	r1, [pc, #16]	; (15698 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   15688:	9b01      	ldr	r3, [sp, #4]
   1568a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1568e:	bf00      	nop
   15690:	b003      	add	sp, #12
   15692:	f85d fb04 	ldr.w	pc, [sp], #4
   15696:	bf00      	nop
   15698:	1fff96f8 	.word	0x1fff96f8
   1569c:	1fff96f4 	.word	0x1fff96f4

000156a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   156a0:	b500      	push	{lr}
   156a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156a4:	f7ec f868 	bl	1778 <Sys_GetCoreID>
   156a8:	4603      	mov	r3, r0
   156aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]--;
   156ac:	4a0d      	ldr	r2, [pc, #52]	; (156e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   156ae:	9b01      	ldr	r3, [sp, #4]
   156b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156b4:	1e5a      	subs	r2, r3, #1
   156b6:	490b      	ldr	r1, [pc, #44]	; (156e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   156b8:	9b01      	ldr	r3, [sp, #4]
   156ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   156be:	4a0a      	ldr	r2, [pc, #40]	; (156e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
   156c0:	9b01      	ldr	r3, [sp, #4]
   156c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156c6:	f003 0301 	and.w	r3, r3, #1
   156ca:	2b00      	cmp	r3, #0
   156cc:	d106      	bne.n	156dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
   156ce:	4a05      	ldr	r2, [pc, #20]	; (156e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   156d0:	9b01      	ldr	r3, [sp, #4]
   156d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156d6:	2b00      	cmp	r3, #0
   156d8:	d100      	bne.n	156dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   156da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   156dc:	bf00      	nop
   156de:	b003      	add	sp, #12
   156e0:	f85d fb04 	ldr.w	pc, [sp], #4
   156e4:	1fff96f8 	.word	0x1fff96f8
   156e8:	1fff96f4 	.word	0x1fff96f4

000156ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   156ec:	b500      	push	{lr}
   156ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156f0:	f7ec f842 	bl	1778 <Sys_GetCoreID>
   156f4:	4603      	mov	r3, r0
   156f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId])
   156f8:	4a10      	ldr	r2, [pc, #64]	; (1573c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   156fa:	9b01      	ldr	r3, [sp, #4]
   156fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15700:	2b00      	cmp	r3, #0
   15702:	d10d      	bne.n	15720 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15704:	f7eb f908 	bl	918 <Pwm_schm_read_msr>
   15708:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1570a:	9b00      	ldr	r3, [sp, #0]
   1570c:	f003 0301 	and.w	r3, r3, #1
   15710:	2b00      	cmp	r3, #0
   15712:	d100      	bne.n	15716 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15714:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   15716:	490a      	ldr	r1, [pc, #40]	; (15740 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
   15718:	9b01      	ldr	r3, [sp, #4]
   1571a:	9a00      	ldr	r2, [sp, #0]
   1571c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]++;
   15720:	4a06      	ldr	r2, [pc, #24]	; (1573c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   15722:	9b01      	ldr	r3, [sp, #4]
   15724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15728:	1c5a      	adds	r2, r3, #1
   1572a:	4904      	ldr	r1, [pc, #16]	; (1573c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   1572c:	9b01      	ldr	r3, [sp, #4]
   1572e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15732:	bf00      	nop
   15734:	b003      	add	sp, #12
   15736:	f85d fb04 	ldr.w	pc, [sp], #4
   1573a:	bf00      	nop
   1573c:	1fff9700 	.word	0x1fff9700
   15740:	1fff96fc 	.word	0x1fff96fc

00015744 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   15744:	b500      	push	{lr}
   15746:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15748:	f7ec f816 	bl	1778 <Sys_GetCoreID>
   1574c:	4603      	mov	r3, r0
   1574e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]--;
   15750:	4a0d      	ldr	r2, [pc, #52]	; (15788 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   15752:	9b01      	ldr	r3, [sp, #4]
   15754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15758:	1e5a      	subs	r2, r3, #1
   1575a:	490b      	ldr	r1, [pc, #44]	; (15788 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   1575c:	9b01      	ldr	r3, [sp, #4]
   1575e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   15762:	4a0a      	ldr	r2, [pc, #40]	; (1578c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
   15764:	9b01      	ldr	r3, [sp, #4]
   15766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1576a:	f003 0301 	and.w	r3, r3, #1
   1576e:	2b00      	cmp	r3, #0
   15770:	d106      	bne.n	15780 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
   15772:	4a05      	ldr	r2, [pc, #20]	; (15788 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   15774:	9b01      	ldr	r3, [sp, #4]
   15776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1577a:	2b00      	cmp	r3, #0
   1577c:	d100      	bne.n	15780 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1577e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15780:	bf00      	nop
   15782:	b003      	add	sp, #12
   15784:	f85d fb04 	ldr.w	pc, [sp], #4
   15788:	1fff9700 	.word	0x1fff9700
   1578c:	1fff96fc 	.word	0x1fff96fc

00015790 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   15790:	b500      	push	{lr}
   15792:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15794:	f7eb fff0 	bl	1778 <Sys_GetCoreID>
   15798:	4603      	mov	r3, r0
   1579a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId])
   1579c:	4a10      	ldr	r2, [pc, #64]	; (157e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   1579e:	9b01      	ldr	r3, [sp, #4]
   157a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157a4:	2b00      	cmp	r3, #0
   157a6:	d10d      	bne.n	157c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   157a8:	f7eb f8b6 	bl	918 <Pwm_schm_read_msr>
   157ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   157ae:	9b00      	ldr	r3, [sp, #0]
   157b0:	f003 0301 	and.w	r3, r3, #1
   157b4:	2b00      	cmp	r3, #0
   157b6:	d100      	bne.n	157ba <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   157b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   157ba:	490a      	ldr	r1, [pc, #40]	; (157e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
   157bc:	9b01      	ldr	r3, [sp, #4]
   157be:	9a00      	ldr	r2, [sp, #0]
   157c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]++;
   157c4:	4a06      	ldr	r2, [pc, #24]	; (157e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   157c6:	9b01      	ldr	r3, [sp, #4]
   157c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157cc:	1c5a      	adds	r2, r3, #1
   157ce:	4904      	ldr	r1, [pc, #16]	; (157e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   157d0:	9b01      	ldr	r3, [sp, #4]
   157d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   157d6:	bf00      	nop
   157d8:	b003      	add	sp, #12
   157da:	f85d fb04 	ldr.w	pc, [sp], #4
   157de:	bf00      	nop
   157e0:	1fff9708 	.word	0x1fff9708
   157e4:	1fff9704 	.word	0x1fff9704

000157e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   157e8:	b500      	push	{lr}
   157ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157ec:	f7eb ffc4 	bl	1778 <Sys_GetCoreID>
   157f0:	4603      	mov	r3, r0
   157f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]--;
   157f4:	4a0d      	ldr	r2, [pc, #52]	; (1582c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   157f6:	9b01      	ldr	r3, [sp, #4]
   157f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157fc:	1e5a      	subs	r2, r3, #1
   157fe:	490b      	ldr	r1, [pc, #44]	; (1582c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   15800:	9b01      	ldr	r3, [sp, #4]
   15802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   15806:	4a0a      	ldr	r2, [pc, #40]	; (15830 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
   15808:	9b01      	ldr	r3, [sp, #4]
   1580a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1580e:	f003 0301 	and.w	r3, r3, #1
   15812:	2b00      	cmp	r3, #0
   15814:	d106      	bne.n	15824 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
   15816:	4a05      	ldr	r2, [pc, #20]	; (1582c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   15818:	9b01      	ldr	r3, [sp, #4]
   1581a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1581e:	2b00      	cmp	r3, #0
   15820:	d100      	bne.n	15824 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15822:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15824:	bf00      	nop
   15826:	b003      	add	sp, #12
   15828:	f85d fb04 	ldr.w	pc, [sp], #4
   1582c:	1fff9708 	.word	0x1fff9708
   15830:	1fff9704 	.word	0x1fff9704

00015834 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   15834:	b500      	push	{lr}
   15836:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15838:	f7eb ff9e 	bl	1778 <Sys_GetCoreID>
   1583c:	4603      	mov	r3, r0
   1583e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId])
   15840:	4a10      	ldr	r2, [pc, #64]	; (15884 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   15842:	9b01      	ldr	r3, [sp, #4]
   15844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15848:	2b00      	cmp	r3, #0
   1584a:	d10d      	bne.n	15868 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1584c:	f7eb f864 	bl	918 <Pwm_schm_read_msr>
   15850:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15852:	9b00      	ldr	r3, [sp, #0]
   15854:	f003 0301 	and.w	r3, r3, #1
   15858:	2b00      	cmp	r3, #0
   1585a:	d100      	bne.n	1585e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1585c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   1585e:	490a      	ldr	r1, [pc, #40]	; (15888 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
   15860:	9b01      	ldr	r3, [sp, #4]
   15862:	9a00      	ldr	r2, [sp, #0]
   15864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]++;
   15868:	4a06      	ldr	r2, [pc, #24]	; (15884 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   1586a:	9b01      	ldr	r3, [sp, #4]
   1586c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15870:	1c5a      	adds	r2, r3, #1
   15872:	4904      	ldr	r1, [pc, #16]	; (15884 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   15874:	9b01      	ldr	r3, [sp, #4]
   15876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1587a:	bf00      	nop
   1587c:	b003      	add	sp, #12
   1587e:	f85d fb04 	ldr.w	pc, [sp], #4
   15882:	bf00      	nop
   15884:	1fff9710 	.word	0x1fff9710
   15888:	1fff970c 	.word	0x1fff970c

0001588c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   1588c:	b500      	push	{lr}
   1588e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15890:	f7eb ff72 	bl	1778 <Sys_GetCoreID>
   15894:	4603      	mov	r3, r0
   15896:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]--;
   15898:	4a0d      	ldr	r2, [pc, #52]	; (158d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   1589a:	9b01      	ldr	r3, [sp, #4]
   1589c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158a0:	1e5a      	subs	r2, r3, #1
   158a2:	490b      	ldr	r1, [pc, #44]	; (158d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   158a4:	9b01      	ldr	r3, [sp, #4]
   158a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   158aa:	4a0a      	ldr	r2, [pc, #40]	; (158d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
   158ac:	9b01      	ldr	r3, [sp, #4]
   158ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158b2:	f003 0301 	and.w	r3, r3, #1
   158b6:	2b00      	cmp	r3, #0
   158b8:	d106      	bne.n	158c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
   158ba:	4a05      	ldr	r2, [pc, #20]	; (158d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   158bc:	9b01      	ldr	r3, [sp, #4]
   158be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158c2:	2b00      	cmp	r3, #0
   158c4:	d100      	bne.n	158c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   158c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   158c8:	bf00      	nop
   158ca:	b003      	add	sp, #12
   158cc:	f85d fb04 	ldr.w	pc, [sp], #4
   158d0:	1fff9710 	.word	0x1fff9710
   158d4:	1fff970c 	.word	0x1fff970c

000158d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   158d8:	b500      	push	{lr}
   158da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158dc:	f7eb ff4c 	bl	1778 <Sys_GetCoreID>
   158e0:	4603      	mov	r3, r0
   158e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId])
   158e4:	4a10      	ldr	r2, [pc, #64]	; (15928 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   158e6:	9b01      	ldr	r3, [sp, #4]
   158e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158ec:	2b00      	cmp	r3, #0
   158ee:	d10d      	bne.n	1590c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   158f0:	f7eb f812 	bl	918 <Pwm_schm_read_msr>
   158f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   158f6:	9b00      	ldr	r3, [sp, #0]
   158f8:	f003 0301 	and.w	r3, r3, #1
   158fc:	2b00      	cmp	r3, #0
   158fe:	d100      	bne.n	15902 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15900:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   15902:	490a      	ldr	r1, [pc, #40]	; (1592c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
   15904:	9b01      	ldr	r3, [sp, #4]
   15906:	9a00      	ldr	r2, [sp, #0]
   15908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]++;
   1590c:	4a06      	ldr	r2, [pc, #24]	; (15928 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   1590e:	9b01      	ldr	r3, [sp, #4]
   15910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15914:	1c5a      	adds	r2, r3, #1
   15916:	4904      	ldr	r1, [pc, #16]	; (15928 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   15918:	9b01      	ldr	r3, [sp, #4]
   1591a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1591e:	bf00      	nop
   15920:	b003      	add	sp, #12
   15922:	f85d fb04 	ldr.w	pc, [sp], #4
   15926:	bf00      	nop
   15928:	1fff9718 	.word	0x1fff9718
   1592c:	1fff9714 	.word	0x1fff9714

00015930 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   15930:	b500      	push	{lr}
   15932:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15934:	f7eb ff20 	bl	1778 <Sys_GetCoreID>
   15938:	4603      	mov	r3, r0
   1593a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]--;
   1593c:	4a0d      	ldr	r2, [pc, #52]	; (15974 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   1593e:	9b01      	ldr	r3, [sp, #4]
   15940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15944:	1e5a      	subs	r2, r3, #1
   15946:	490b      	ldr	r1, [pc, #44]	; (15974 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   15948:	9b01      	ldr	r3, [sp, #4]
   1594a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   1594e:	4a0a      	ldr	r2, [pc, #40]	; (15978 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
   15950:	9b01      	ldr	r3, [sp, #4]
   15952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15956:	f003 0301 	and.w	r3, r3, #1
   1595a:	2b00      	cmp	r3, #0
   1595c:	d106      	bne.n	1596c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
   1595e:	4a05      	ldr	r2, [pc, #20]	; (15974 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   15960:	9b01      	ldr	r3, [sp, #4]
   15962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15966:	2b00      	cmp	r3, #0
   15968:	d100      	bne.n	1596c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1596a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1596c:	bf00      	nop
   1596e:	b003      	add	sp, #12
   15970:	f85d fb04 	ldr.w	pc, [sp], #4
   15974:	1fff9718 	.word	0x1fff9718
   15978:	1fff9714 	.word	0x1fff9714

0001597c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   1597c:	b500      	push	{lr}
   1597e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15980:	f7eb fefa 	bl	1778 <Sys_GetCoreID>
   15984:	4603      	mov	r3, r0
   15986:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId])
   15988:	4a10      	ldr	r2, [pc, #64]	; (159cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   1598a:	9b01      	ldr	r3, [sp, #4]
   1598c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15990:	2b00      	cmp	r3, #0
   15992:	d10d      	bne.n	159b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15994:	f7ea ffc0 	bl	918 <Pwm_schm_read_msr>
   15998:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1599a:	9b00      	ldr	r3, [sp, #0]
   1599c:	f003 0301 	and.w	r3, r3, #1
   159a0:	2b00      	cmp	r3, #0
   159a2:	d100      	bne.n	159a6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   159a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   159a6:	490a      	ldr	r1, [pc, #40]	; (159d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
   159a8:	9b01      	ldr	r3, [sp, #4]
   159aa:	9a00      	ldr	r2, [sp, #0]
   159ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]++;
   159b0:	4a06      	ldr	r2, [pc, #24]	; (159cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   159b2:	9b01      	ldr	r3, [sp, #4]
   159b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159b8:	1c5a      	adds	r2, r3, #1
   159ba:	4904      	ldr	r1, [pc, #16]	; (159cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   159bc:	9b01      	ldr	r3, [sp, #4]
   159be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   159c2:	bf00      	nop
   159c4:	b003      	add	sp, #12
   159c6:	f85d fb04 	ldr.w	pc, [sp], #4
   159ca:	bf00      	nop
   159cc:	1fff9720 	.word	0x1fff9720
   159d0:	1fff971c 	.word	0x1fff971c

000159d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   159d4:	b500      	push	{lr}
   159d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159d8:	f7eb fece 	bl	1778 <Sys_GetCoreID>
   159dc:	4603      	mov	r3, r0
   159de:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]--;
   159e0:	4a0d      	ldr	r2, [pc, #52]	; (15a18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   159e2:	9b01      	ldr	r3, [sp, #4]
   159e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159e8:	1e5a      	subs	r2, r3, #1
   159ea:	490b      	ldr	r1, [pc, #44]	; (15a18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   159ec:	9b01      	ldr	r3, [sp, #4]
   159ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   159f2:	4a0a      	ldr	r2, [pc, #40]	; (15a1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
   159f4:	9b01      	ldr	r3, [sp, #4]
   159f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159fa:	f003 0301 	and.w	r3, r3, #1
   159fe:	2b00      	cmp	r3, #0
   15a00:	d106      	bne.n	15a10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
   15a02:	4a05      	ldr	r2, [pc, #20]	; (15a18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   15a04:	9b01      	ldr	r3, [sp, #4]
   15a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a0a:	2b00      	cmp	r3, #0
   15a0c:	d100      	bne.n	15a10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a10:	bf00      	nop
   15a12:	b003      	add	sp, #12
   15a14:	f85d fb04 	ldr.w	pc, [sp], #4
   15a18:	1fff9720 	.word	0x1fff9720
   15a1c:	1fff971c 	.word	0x1fff971c

00015a20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   15a20:	b500      	push	{lr}
   15a22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a24:	f7eb fea8 	bl	1778 <Sys_GetCoreID>
   15a28:	4603      	mov	r3, r0
   15a2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId])
   15a2c:	4a10      	ldr	r2, [pc, #64]	; (15a70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   15a2e:	9b01      	ldr	r3, [sp, #4]
   15a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a34:	2b00      	cmp	r3, #0
   15a36:	d10d      	bne.n	15a54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a38:	f7ea ff6e 	bl	918 <Pwm_schm_read_msr>
   15a3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a3e:	9b00      	ldr	r3, [sp, #0]
   15a40:	f003 0301 	and.w	r3, r3, #1
   15a44:	2b00      	cmp	r3, #0
   15a46:	d100      	bne.n	15a4a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   15a4a:	490a      	ldr	r1, [pc, #40]	; (15a74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
   15a4c:	9b01      	ldr	r3, [sp, #4]
   15a4e:	9a00      	ldr	r2, [sp, #0]
   15a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]++;
   15a54:	4a06      	ldr	r2, [pc, #24]	; (15a70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   15a56:	9b01      	ldr	r3, [sp, #4]
   15a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a5c:	1c5a      	adds	r2, r3, #1
   15a5e:	4904      	ldr	r1, [pc, #16]	; (15a70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   15a60:	9b01      	ldr	r3, [sp, #4]
   15a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a66:	bf00      	nop
   15a68:	b003      	add	sp, #12
   15a6a:	f85d fb04 	ldr.w	pc, [sp], #4
   15a6e:	bf00      	nop
   15a70:	1fff9728 	.word	0x1fff9728
   15a74:	1fff9724 	.word	0x1fff9724

00015a78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   15a78:	b500      	push	{lr}
   15a7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a7c:	f7eb fe7c 	bl	1778 <Sys_GetCoreID>
   15a80:	4603      	mov	r3, r0
   15a82:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]--;
   15a84:	4a0d      	ldr	r2, [pc, #52]	; (15abc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   15a86:	9b01      	ldr	r3, [sp, #4]
   15a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a8c:	1e5a      	subs	r2, r3, #1
   15a8e:	490b      	ldr	r1, [pc, #44]	; (15abc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   15a90:	9b01      	ldr	r3, [sp, #4]
   15a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   15a96:	4a0a      	ldr	r2, [pc, #40]	; (15ac0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
   15a98:	9b01      	ldr	r3, [sp, #4]
   15a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a9e:	f003 0301 	and.w	r3, r3, #1
   15aa2:	2b00      	cmp	r3, #0
   15aa4:	d106      	bne.n	15ab4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
   15aa6:	4a05      	ldr	r2, [pc, #20]	; (15abc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   15aa8:	9b01      	ldr	r3, [sp, #4]
   15aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15aae:	2b00      	cmp	r3, #0
   15ab0:	d100      	bne.n	15ab4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15ab2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15ab4:	bf00      	nop
   15ab6:	b003      	add	sp, #12
   15ab8:	f85d fb04 	ldr.w	pc, [sp], #4
   15abc:	1fff9728 	.word	0x1fff9728
   15ac0:	1fff9724 	.word	0x1fff9724

00015ac4 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   15ac4:	bf00      	nop
   15ac6:	4770      	bx	lr

00015ac8 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   15ac8:	b510      	push	{r4, lr}
   15aca:	b084      	sub	sp, #16
   15acc:	4604      	mov	r4, r0
   15ace:	4608      	mov	r0, r1
   15ad0:	4611      	mov	r1, r2
   15ad2:	461a      	mov	r2, r3
   15ad4:	4623      	mov	r3, r4
   15ad6:	f8ad 3006 	strh.w	r3, [sp, #6]
   15ada:	4603      	mov	r3, r0
   15adc:	f88d 3005 	strb.w	r3, [sp, #5]
   15ae0:	460b      	mov	r3, r1
   15ae2:	f88d 3004 	strb.w	r3, [sp, #4]
   15ae6:	4613      	mov	r3, r2
   15ae8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15aec:	f7eb fe44 	bl	1778 <Sys_GetCoreID>
   15af0:	4603      	mov	r3, r0
   15af2:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
   15af4:	490d      	ldr	r1, [pc, #52]	; (15b2c <Det_ReportError+0x64>)
   15af6:	9b03      	ldr	r3, [sp, #12]
   15af8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15afc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   15b00:	4a0b      	ldr	r2, [pc, #44]	; (15b30 <Det_ReportError+0x68>)
   15b02:	9b03      	ldr	r3, [sp, #12]
   15b04:	4413      	add	r3, r2
   15b06:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15b0a:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   15b0c:	4a09      	ldr	r2, [pc, #36]	; (15b34 <Det_ReportError+0x6c>)
   15b0e:	9b03      	ldr	r3, [sp, #12]
   15b10:	4413      	add	r3, r2
   15b12:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15b16:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   15b18:	4a07      	ldr	r2, [pc, #28]	; (15b38 <Det_ReportError+0x70>)
   15b1a:	9b03      	ldr	r3, [sp, #12]
   15b1c:	4413      	add	r3, r2
   15b1e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   15b22:	701a      	strb	r2, [r3, #0]

    return E_OK;
   15b24:	2300      	movs	r3, #0
}
   15b26:	4618      	mov	r0, r3
   15b28:	b004      	add	sp, #16
   15b2a:	bd10      	pop	{r4, pc}
   15b2c:	1fff9754 	.word	0x1fff9754
   15b30:	1fff972c 	.word	0x1fff972c
   15b34:	1fff9730 	.word	0x1fff9730
   15b38:	1fff9734 	.word	0x1fff9734

00015b3c <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   15b3c:	b510      	push	{r4, lr}
   15b3e:	b084      	sub	sp, #16
   15b40:	4604      	mov	r4, r0
   15b42:	4608      	mov	r0, r1
   15b44:	4611      	mov	r1, r2
   15b46:	461a      	mov	r2, r3
   15b48:	4623      	mov	r3, r4
   15b4a:	f8ad 3006 	strh.w	r3, [sp, #6]
   15b4e:	4603      	mov	r3, r0
   15b50:	f88d 3005 	strb.w	r3, [sp, #5]
   15b54:	460b      	mov	r3, r1
   15b56:	f88d 3004 	strb.w	r3, [sp, #4]
   15b5a:	4613      	mov	r3, r2
   15b5c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b60:	f7eb fe0a 	bl	1778 <Sys_GetCoreID>
   15b64:	4603      	mov	r3, r0
   15b66:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   15b68:	490d      	ldr	r1, [pc, #52]	; (15ba0 <Det_ReportRuntimeError+0x64>)
   15b6a:	9b03      	ldr	r3, [sp, #12]
   15b6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15b70:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   15b74:	4a0b      	ldr	r2, [pc, #44]	; (15ba4 <Det_ReportRuntimeError+0x68>)
   15b76:	9b03      	ldr	r3, [sp, #12]
   15b78:	4413      	add	r3, r2
   15b7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15b7e:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   15b80:	4a09      	ldr	r2, [pc, #36]	; (15ba8 <Det_ReportRuntimeError+0x6c>)
   15b82:	9b03      	ldr	r3, [sp, #12]
   15b84:	4413      	add	r3, r2
   15b86:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15b8a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   15b8c:	4a07      	ldr	r2, [pc, #28]	; (15bac <Det_ReportRuntimeError+0x70>)
   15b8e:	9b03      	ldr	r3, [sp, #12]
   15b90:	4413      	add	r3, r2
   15b92:	f89d 2003 	ldrb.w	r2, [sp, #3]
   15b96:	701a      	strb	r2, [r3, #0]

    return E_OK;
   15b98:	2300      	movs	r3, #0
}
   15b9a:	4618      	mov	r0, r3
   15b9c:	b004      	add	sp, #16
   15b9e:	bd10      	pop	{r4, pc}
   15ba0:	1fff9758 	.word	0x1fff9758
   15ba4:	1fff9738 	.word	0x1fff9738
   15ba8:	1fff973c 	.word	0x1fff973c
   15bac:	1fff9740 	.word	0x1fff9740

00015bb0 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   15bb0:	b510      	push	{r4, lr}
   15bb2:	b084      	sub	sp, #16
   15bb4:	4604      	mov	r4, r0
   15bb6:	4608      	mov	r0, r1
   15bb8:	4611      	mov	r1, r2
   15bba:	461a      	mov	r2, r3
   15bbc:	4623      	mov	r3, r4
   15bbe:	f8ad 3006 	strh.w	r3, [sp, #6]
   15bc2:	4603      	mov	r3, r0
   15bc4:	f88d 3005 	strb.w	r3, [sp, #5]
   15bc8:	460b      	mov	r3, r1
   15bca:	f88d 3004 	strb.w	r3, [sp, #4]
   15bce:	4613      	mov	r3, r2
   15bd0:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15bd4:	f7eb fdd0 	bl	1778 <Sys_GetCoreID>
   15bd8:	4603      	mov	r3, r0
   15bda:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   15bdc:	490d      	ldr	r1, [pc, #52]	; (15c14 <Det_ReportTransientFault+0x64>)
   15bde:	9b03      	ldr	r3, [sp, #12]
   15be0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15be4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   15be8:	4a0b      	ldr	r2, [pc, #44]	; (15c18 <Det_ReportTransientFault+0x68>)
   15bea:	9b03      	ldr	r3, [sp, #12]
   15bec:	4413      	add	r3, r2
   15bee:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15bf2:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   15bf4:	4a09      	ldr	r2, [pc, #36]	; (15c1c <Det_ReportTransientFault+0x6c>)
   15bf6:	9b03      	ldr	r3, [sp, #12]
   15bf8:	4413      	add	r3, r2
   15bfa:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15bfe:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   15c00:	4a07      	ldr	r2, [pc, #28]	; (15c20 <Det_ReportTransientFault+0x70>)
   15c02:	9b03      	ldr	r3, [sp, #12]
   15c04:	4413      	add	r3, r2
   15c06:	f89d 2003 	ldrb.w	r2, [sp, #3]
   15c0a:	701a      	strb	r2, [r3, #0]

    return E_OK;
   15c0c:	2300      	movs	r3, #0
}
   15c0e:	4618      	mov	r0, r3
   15c10:	b004      	add	sp, #16
   15c12:	bd10      	pop	{r4, pc}
   15c14:	1fff9750 	.word	0x1fff9750
   15c18:	1fff9744 	.word	0x1fff9744
   15c1c:	1fff9748 	.word	0x1fff9748
   15c20:	1fff974c 	.word	0x1fff974c

00015c24 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   15c24:	bf00      	nop
   15c26:	4770      	bx	lr

00015c28 <Fls_ACEraseRomEnd>:
   15c28:	20746f50 	.word	0x20746f50
   15c2c:	65722031 	.word	0x65722031
   15c30:	74736973 	.word	0x74736973
   15c34:	65636e61 	.word	0x65636e61
   15c38:	6c617620 	.word	0x6c617620
   15c3c:	69206575 	.word	0x69206575
   15c40:	686f206e 	.word	0x686f206e
   15c44:	203a736d 	.word	0x203a736d
   15c48:	000a6425 	.word	0x000a6425
   15c4c:	20746f50 	.word	0x20746f50
   15c50:	65722032 	.word	0x65722032
   15c54:	74736973 	.word	0x74736973
   15c58:	65636e61 	.word	0x65636e61
   15c5c:	6c617620 	.word	0x6c617620
   15c60:	69206575 	.word	0x69206575
   15c64:	686f206e 	.word	0x686f206e
   15c68:	203a736d 	.word	0x203a736d
   15c6c:	000a6425 	.word	0x000a6425
   15c70:	20746f50 	.word	0x20746f50
   15c74:	65722031 	.word	0x65722031
   15c78:	74736973 	.word	0x74736973
   15c7c:	65636e61 	.word	0x65636e61
   15c80:	6c617620 	.word	0x6c617620
   15c84:	69206575 	.word	0x69206575
   15c88:	686f206e 	.word	0x686f206e
   15c8c:	203a736d 	.word	0x203a736d
   15c90:	202c6425 	.word	0x202c6425
   15c94:	20746f50 	.word	0x20746f50
   15c98:	65722032 	.word	0x65722032
   15c9c:	74736973 	.word	0x74736973
   15ca0:	65636e61 	.word	0x65636e61
   15ca4:	6c617620 	.word	0x6c617620
   15ca8:	69206575 	.word	0x69206575
   15cac:	686f206e 	.word	0x686f206e
   15cb0:	203a736d 	.word	0x203a736d
   15cb4:	000a6425 	.word	0x000a6425
   15cb8:	6d726554 	.word	0x6d726554
   15cbc:	6c616e69 	.word	0x6c616e69
   15cc0:	00000000 	.word	0x00000000
   15cc4:	4c554e28 	.word	0x4c554e28
   15cc8:	0000294c 	.word	0x0000294c

00015ccc <Clock_Ip_au8DividerCallbackIndex>:
   15ccc:	0e0d0c00 06030201 0a070409 000b0805     ................

00015cdc <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00015cec <Clock_Ip_au8XoscCallbackIndex>:
   15cec:	00000100 00000000 00000000 00000000     ................

00015cfc <Clock_Ip_au8IrcoscCallbackIndex>:
   15cfc:	03020100 00000004 00000000 00000000     ................

00015d0c <Clock_Ip_au8GateCallbackIndex>:
   15d0c:	06010200 01040301 00000500 00000000     ................

00015d1c <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00015d2c <Clock_Ip_au8PllCallbackIndex>:
   15d2c:	00000100 00000000 00000000 00000000     ................

00015d3c <Clock_Ip_au8SelectorCallbackIndex>:
   15d3c:	0a090800 03020109 07060504 00000000     ................

00015d4c <Clock_Ip_au8PcfsCallbackIndex>:
	...

00015d5c <Clock_Ip_au8CmuCallbackIndex>:
	...

00015d6c <Clock_Ip_au8ClockFeatures>:
	...
   15d7c:	01000000 00000000 00000000 00000002     ................
   15d8c:	00000000 00000300 00000000 00040000     ................
   15d9c:	00000000 05000000 00000000 00000000     ................
   15dac:	00000006 00000000 00000100 00000000     ................
   15dbc:	00010000 00000000 04000000 00000000     ................
   15dcc:	00000000 00000005 00000001 00000401     ................
   15ddc:	00000200 00050100 00030000 04020000     ................
   15dec:	04000000 02000000 00000005 00000005     ................
   15dfc:	00000403 00000600 00050300 00070000     ................
   15e0c:	05000000 00000000 00000000 00000006     ................
	...
   15e4c:	00050000 00000000 06000000 00000100     ................
   15e5c:	00000000 00030007 00000000 00000000     ................
   15e6c:	00000000 00060000 00000000 07000000     ................
   15e7c:	00000100 00000000 00030008 00000000     ................
	...
   15e94:	00090000 00000000 0a000000 00000100     ................
   15ea4:	00000000 0003000b 00000000 00000000     ................
   15eb4:	00000000 000c0000 00000000 0d000000     ................
   15ec4:	00000100 00000000 0003000e 00000000     ................
   15ed4:	00000800 00000000 00090000 00000000     ................
   15ee4:	0a000000 00000000 00000000 0000000b     ................
   15ef4:	00000000 00000b01 00000000 000b0200     ................
   15f04:	00000000 0b030000 00000000 00000000     ................
	...
   15f1c:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   15f2c:	01000000 00000000 00000000 00000007     ................
   15f3c:	00007300 00000700 00320000 00090000     .s........2.....
   15f4c:	02000000 07000000 00000000 00000021     ............!...
   15f5c:	00000009 00000400 00000900 00030000     ................
   15f6c:	00070000 61000000 07000000 00000000     .......a........
   15f7c:	00000024 00000007 00002500 00000700     $........%......
   15f8c:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   15f9c:	00000000 00000020 38000004 00003800     .... ......8.8..
   15fac:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   15fbc:	04000000 00260000 00000026 66000004     ......&.&......f
   15fcc:	00006600 00000400 00370037 00040000     .f......7.7.....
   15fdc:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   15fec:	2e000004 00002e00 00000200 00404040     ............@@@.
   15ffc:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   1600c:	0000006b 6c000004 00006c00 00000900     k......l.l......
   1601c:	00010000 00090000 00000000 07000000     ................
   1602c:	00000000 00000036 00000007 00003100     ....6........1..
   1603c:	00000700 00490000 00070000 4a000000     ......I........J
   1604c:	07000000 00000000 0000004b 00000007     ........K.......
   1605c:	00004c00 00000700 004d0000 00070000     .L........M.....
   1606c:	3d000000 03000000 00000000 00000000     ...=............

0001607c <Clock_Ip_au16SelectorEntryHardwareValue>:
   1607c:	01010a03 01010001 04040002 02000603     ................
   1608c:	00010810 02020100 00000000 00000007     ................
   1609c:	00000009 00000000 00000c0e 00000000     ................
	...

000160d4 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   160d4:	00020000 00000300 00000601 00000000     ................
	...

00016104 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   16104:	00000700 00000000 02020000 01010303     ................
   16114:	03020606 00000000 00000000 00000000     ................
	...

00016134 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   16134:	00000001 00000000 02020000 01010303     ................
   16144:	03020606 00000000 00000000 00000000     ................
	...

00016164 <Clock_Ip_au8DividerValueHardwareValue>:
   16164:	00020100 00000003 00000004 00000000     ................
   16174:	00000005 00000000 00000000 00000000     ................
   16184:	00000006 00000000 00000000 00000000     ................
	...
   161a4:	00000007                                ....

000161a8 <Clock_Ip_apxScgPeriphAsyncDivs>:
   161a8:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

000161b8 <Clock_Ip_aeSourceTypeClockName>:
   161b8:	00000000 00000001 00000001 00000001     ................
   161c8:	00000001 00000001 00000001 00000001     ................
   161d8:	00000002 00000003 00000001 00000001     ................
   161e8:	00000001 00000001 00000002 00000002     ................
   161f8:	00000003 00000003 00000001 00000001     ................
   16208:	00000004 00000004 00000004 00000004     ................
	...

00016274 <Clock_Ip_aeHwPllName>:
   16274:	00000009                                ....

00016278 <Clock_Ip_aeHwDfsName>:
   16278:	00000057                                W...

0001627c <Clock_Ip_axDividerCallbacks>:
   1627c:	00003849 00003853 0000386d 00003887     I8..S8..m8...8..
   1628c:	000038a1 000038bb 000038d5 000038ef     .8...8...8...8..
   1629c:	00003909 00003923 0000393d 00003957     .9..#9..=9..W9..
   162ac:	00003971 0000398b 000039a5              q9...9...9..

000162b8 <Clock_Ip_axDividerTriggerCallbacks>:
   162b8:	00003d19 00003d19                       .=...=..

000162c0 <Clock_Ip_axExtOscCallbacks>:
   162c0:	00003d25 00003d25 00003d25 00003d2f     %=..%=..%=../=..
   162d0:	00003d25 00003d39 00003d53 00003d6d     %=..9=..S=..m=..
   162e0:	00003df1 00003e05                       .=...>..

000162e8 <Clock_Ip_axFracDivCallbacks>:
   162e8:	00003fc5 00003fc5 00003fcf              .?...?...?..

000162f4 <Clock_Ip_axGateCallbacks>:
   162f4:	00003fe9 00003ff3 000040f3 0000410d     .?...?...@...A..
   16304:	000040a3 000040bd 00004053 0000406d     .@...@..S@..m@..
   16314:	00004003 0000401d 00004143 0000415d     .@...@..CA..]A..
   16324:	00004193 000041ad                       .A...A..

0001632c <Clock_Ip_axIntOscCallbacks>:
   1632c:	00004359 00004359 00004363 0000436d     YC..YC..cC..mC..
   1633c:	00004387 000043a1 000043b5 000043cf     .C...C...C...C..
   1634c:	000043e9 000043fd 00004417 00004431     .C...C...D..1D..
   1635c:	000044d9 000044f3 0000450d              .D...D...E..

00016368 <Clock_Ip_axCmuCallbacks>:
   16368:	00004aa9 00004ab3 00004abf 00004aa9     .J...J...J...J..

00016378 <Clock_Ip_axPllCallbacks>:
   16378:	00004ac9 00004ac9 00004ad3 00004ac9     .J...J...J...J..
   16388:	00004adf 00004ae9 00004b03 00004b1d     .J...J...K...K..
   16398:	00004bc1 00004bad                       .K...K..

000163a0 <Clock_Ip_axPcfsCallbacks>:
   163a0:	00004d1d                                .M..

000163a4 <Clock_Ip_axSelectorCallbacks>:
   163a4:	00004d29 00004d29 00004d33 00004d4d     )M..)M..3M..MM..
   163b4:	00004d29 00004d67 00004d81 00004d9b     )M..gM...M...M..
   163c4:	00004db5 00004dcf 00004de9 00004e03     .M...M...M...N..
   163d4:	00004e1d 00004e37 00004e51 00004e6b     .N..7N..QN..kN..
   163e4:	00004e85 00004e9f 00004eb9 00004ed3     .N...N...N...N..
   163f4:	00004eed 00004f07                       .N...O..

000163fc <ClockSource>:
   163fc:	00000000 00000008 00000002 00000005     ................
	...
   16414:	00000009                                ....

00016418 <ResetReasonArray>:
   16418:	00000000 00000001 00000002 00000003     ................
   16428:	00000004 00000005 00000006 00000007     ................
   16438:	00000008 00000009 0000000a 0000000b     ................
   16448:	0000000c 0000000d 0000000e              ............

00016454 <Port_au32PortCiPortBaseAddr>:
   16454:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   16464:	4004d000                                ...@

00016468 <Port_au32PortCiGpioBaseAddr>:
   16468:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   16478:	400ff100                                ...@

0001647c <Adc_Ip_apxBase>:
   1647c:	4003b000 40027000                       ...@.p.@

00016484 <Pdb_Adc_Ip_apxBase>:
   16484:	40036000 40031000                       .`.@...@

0001648c <Ftm_Pwm_Ip_aFtmBase>:
   1648c:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

0001649c <Queue_Config>:
   1649c:	00000002 00000001 1fff8b70              ........p...

000164a8 <Task_Config>:
   164a8:	00000032 00000001 00000d69 00000064     2.......i...d...
   164b8:	00000001 00000d75                       ....u...

000164c0 <Timer_Config>:
   164c0:	00000064 00000000 00000f81              d...........

000164cc <Scheduler_Config>:
   164cc:	0000000a 00000002 000164a8 00000001     .........d......
   164dc:	000164c0 00000001 0001649c              .d.......d..

000164e8 <ButtonsCfg>:
   164e8:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
   164f8:	0000000c 0000012c                       ....,...

00016500 <LedsCfg>:
   16500:	00010048 00010049 0001004a              H...I...J...

0001650c <AdcIpChansConfig_0>:
   1650c:	00000000 00000005 00000000 00000001     ................
   1651c:	00000008 00000000                       ........

00016524 <AdcIpChansConfig_1>:
   16524:	00000000 0000000f 00000000 00000001     ................
   16534:	00000008 00000000                       ........

0001653c <AdcIpConfig_0>:
   1653c:	00000000 00000003 00000000 0000000c     ................
   1654c:	00000000 00000001 00000001 00000000     ................
	...
   16564:	00ff0000 00000000 00000000 0001650c     .............e..
   16574:	0000b259                                Y...

00016578 <AdcIpConfig_1>:
   16578:	00000000 00000003 00000000 0000000c     ................
   16588:	00000000 00000001 00000001 00000000     ................
	...
   165a0:	00ff0000 00000000 00000000 00016524     ............$e..
   165b0:	0000b27b                                {...

000165b4 <AdcIpwCfg>:
   165b4:	0001653c 00016578 00016b84 00016ba4     <e..xe...k...k..
   165c4:	01010100 00010001 00020002 0101ffff     ................
   165d4:	00000100                                ....

000165d8 <AdcIpwGroupConfig_0>:
   165d8:	00000001 00000000 000000c8 00010000     ................
   165e8:	00000000                                ....

000165ec <AdcIpwGroupConfig_1>:
   165ec:	00000001 00000000 000000c8 00010000     ................
   165fc:	00000000                                ....

00016600 <Adc_Group0_Assignment_0>:
   16600:	00010000                                ....

00016604 <Adc_Group1_Assignment_1>:
   16604:	00010000                                ....

00016608 <Adc_GroupsCfg>:
	...
   16624:	00000001 00016600 00080002 00000005     .....f..........
   16634:	00000000 000165d8 00010001 00000000     .....e..........
	...
   16658:	00000001 00016604 000f0002 00000008     .....f..........
   16668:	00000000 000165ec                       .....e..

00016670 <Adc_au16GroupIdToIndexMap>:
   16670:	00010000                                ....

00016674 <Adc_Partition_Assignment>:
   16674:	00000000                                ....

00016678 <Adc_Config>:
   16678:	000165b4 00016608 00000002 00016670     .e...f......pf..
   16688:	00000000 00016674 00000001              ....tf......

00016694 <Mcu_aClockConfigPB>:
	...
   1669c:	14000002 0400000e 01000020 00000002     ........ .......
   166ac:	01000001 00000001 00000005 00000001     ................
   166bc:	00000000 00000057 00000000 00000000     ....W...........
	...
   166d4:	00000057 00000000 00000057 00000000     W.......W.......
	...
   166fc:	00000019 00000005 0000001a 00000002     ................
   1670c:	0000001b 00000005 0000002a 00000002     ........*.......
   1671c:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   1672c:	00000041 00000000 00000042 00000000     A.......B.......
   1673c:	00000031 0000000b 00000045 00000000     1.......E.......
   1674c:	00000046 00000000 00000047 00000000     F.......G.......
   1675c:	00000044 00000000 00000030 0000000b     D.......0.......
   1676c:	0000003d 00000000 00000043 00000000     =.......C.......
   1677c:	00000049 00000000 0000004a 00000000     I.......J.......
   1678c:	0000004b 00000000 00000048 00000000     K.......H.......
   1679c:	00000057 00000057 00000057 00000057     W...W...W...W...
   167ac:	00000057 00000057 00000057 00000057     W...W...W...W...
   167bc:	00000057 00000057 00000057 00000057     W...W...W...W...
   167cc:	00000057 00000057 00000057 00000057     W...W...W...W...
   167dc:	0000000a 00000001 00000000 0000000b     ................
   167ec:	00000001 00000000 0000000c 00000001     ................
   167fc:	00000000 0000000d 00000002 00000000     ................
   1680c:	0000001d 00000001 00000000 0000001e     ................
   1681c:	00000002 00000000 0000001f 00000001     ................
   1682c:	00000000 00000021 00000001 00000000     ....!...........
   1683c:	00000022 00000002 00000000 00000023     "...........#...
   1684c:	00000001 00000000 00000025 00000002     ........%.......
   1685c:	00000000 00000026 00000004 00000000     ....&...........
   1686c:	00000027 00000002 00000000 00000048     '...........H...
   1687c:	00000001 00000001 00000057 00000000     ........W.......
   1688c:	00000000 00000057 00000000 00000000     ....W...........
   1689c:	00000057 00000000 00000000 00000057     W...........W...
	...
   168b4:	00000057 00000000 00000000 00000057     W...........W...
	...
   168cc:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   168e8:	00000014 00007d00 00000015 00007d00     .....}.......}..
   168f8:	00000016 00007d00 00000017 00008000     .....}..........
   16908:	00000030 00000001 00000031 00000001     0.......1.......
   16918:	00000033 00000000 00000034 00000000     3.......4.......
   16928:	00000036 00000000 00000039 00000000     6.......9.......
   16938:	0000003a 00000000 0000003b 00000000     :.......;.......
   16948:	0000003c 00000000 0000003d 00000000     <.......=.......
   16958:	0000003e 00000000 0000003f 00000000     >.......?.......
   16968:	00000040 00000001 00000041 00000000     @.......A.......
   16978:	00000042 00000000 00000043 00000000     B.......C.......
   16988:	00000044 00000000 00000045 00000000     D.......E.......
   16998:	00000046 00000000 00000047 00000000     F.......G.......
   169a8:	00000048 00000000 00000049 00000000     H.......I.......
   169b8:	0000004a 00000000 0000004b 00000000     J.......K.......
   169c8:	0000004e 00000001 0000004f 00000001     N.......O.......
   169d8:	00000050 00000001 00000051 00000001     P.......Q.......
   169e8:	00000052 00000001 00000053 00000001     R.......S.......
   169f8:	00000054 00000001 00000055 00000000     T.......U.......
   16a08:	00000057 00000000 00000057 00000000     W.......W.......
   16a18:	00000057 00000000 00000057 00000000     W.......W.......
   16a28:	00000057 00000000 00000057 00000000     W.......W.......
   16a38:	00000057 00000000 00000057 00000000     W.......W.......
   16a48:	00000057 00000000 00000057 00000000     W.......W.......
   16a58:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00016a8c <Ftm_Pwm_Ip_SyncCfg1>:
	...
   16aa8:	00000003 00000003                       ........

00016ab0 <Ftm_Pwm_Ip_InstCfg1>:
   16ab0:	00000003 00000000 00000000 00000000     ................
	...
   16ae4:	000014d5 00000001 00000000 00000000     ................
   16af4:	00000000 00016a8c                       .....j..

00016afc <Ftm_Pwm_Ip_I1_Ch7>:
   16afc:	00000007 0000000a 00000000 00000000     ................
   16b0c:	00000000 00000001 00000000 00000000     ................
	...

00016b24 <Ftm_Pwm_Ip_I1_ChArray>:
   16b24:	00016afc                                .j..

00016b28 <Ftm_Pwm_Ip_UserCfg1>:
   16b28:	00016ab0 00016b24 00000001 00000000     .j..$k..........
   16b38:	00000000                                ....

00016b3c <aIrqConfiguration>:
   16b3c:	00000027 00000001 00009b9d 00000028     '...........(...
   16b4c:	00000001 00009bad                       ........

00016b54 <intCtrlConfig>:
   16b54:	00000002 00016b3c                       ....<k..

00016b5c <Mcu_Config>:
   16b5c:	0000005a 00000000 00000001 00000001     Z...............
   16b6c:	00016fa8 00016694 00016fb4              .o...f...o..

00016b78 <OsIf_xPredefinedConfig>:
   16b78:	00000000 02dc6c00                       .....l..

00016b80 <OsIf_apxPredefinedConfig>:
   16b80:	00016b78                                xk..

00016b84 <PdbAdcIpConfig_0>:
	...
   16b90:	0000000f ffff0000 00000000 00000000     ................
   16ba0:	00000000                                ....

00016ba4 <PdbAdcIpConfig_1>:
	...
   16bb0:	0000000f ffff0000 00000000 00000000     ................
   16bc0:	00000000                                ....

00016bc4 <Platform_uConfiguration>:
   16bc4:	00016bcc                                .k..

00016bc8 <Platform_Config>:
   16bc8:	00016bc4                                .k..

00016bcc <ipwConfig>:
   16bcc:	00016b54 00000000                       Tk......

00016bd4 <g_pin_mux_InitConfigArr>:
   16bd4:	4004b000 400ff080 00000008 00000002     ...@...@........
   16be4:	00000001 00000002 00000000 00000000     ................
	...
   16bfc:	4004b000 400ff080 00000009 00000002     ...@...@........
   16c0c:	00000001 00000002 00000000 00000000     ................
	...
   16c24:	4004b000 400ff080 0000000a 00000002     ...@...@........
   16c34:	00000001 00000002 00000000 00000000     ................
	...
   16c4c:	4004b000 400ff080 0000000b 00000002     ...@...@........
   16c5c:	00000001 00000002 00000000 00000000     ................
	...
   16c74:	4004b000 400ff080 0000000d 00000002     ...@...@........
   16c84:	00000001 00000002 00000000 00000000     ................
	...
   16c9c:	4004b000 400ff080 0000000e 00000002     ...@...@........
   16cac:	00000001 00000002 00000000 00000000     ................
	...
   16cc4:	4004d000 400ff100 0000000c 00000002     ...@...@........
   16cd4:	00000001 00000001 00000000 00000000     ................
	...
   16cec:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   16cfc:	00000001 00000001 00000000 00000000     ................
	...
   16d14:	40049000 400ff000 0000000c 00000002     ...@...@........
   16d24:	00000001 00000001 00000000 00000000     ................
	...
   16d3c:	40049000 00000000 0000000d 00000002     ...@............
   16d4c:	00000002 00000002 00000000 00000000     ................
	...
   16d64:	4004a000 00000000 00000001 00000002     ...@............
   16d74:	00000000 00000001 00000000 00000000     ................
	...
   16d8c:	4004a000 00000000 0000000d 00000002     ...@............
   16d9c:	00000000 00000001 00000000 00000000     ................
	...

00016db4 <au8Port_PartitionList>:
   16db4:	00000001                                ....

00016db8 <au32Port_PinToPartitionMap>:
   16db8:	00000001 00000001 00000001 00000001     ................
   16dc8:	00000001 00000001 00000001 00000001     ................
   16dd8:	00000001 00000001 00000001 00000001     ................

00016de8 <Port_au16NoUnUsedPadsArrayDefault>:
   16de8:	00010000 00030002 00070006 00090008     ................
   16df8:	000e000b 0010000f 00200011 00230022     .......... .".#.
   16e08:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   16e18:	002e002c 0030002f 00400031 00420041     ,.../.0.1.@.A.B.
   16e28:	00460043 004c0047 0050004f 00600051     C.F.G.L.O.P.Q.`.
   16e38:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   16e48:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   16e58:	00810080 00830082 00850084 00870086     ................
   16e68:	00890088 008b008a 008e008d 0090008f     ................

00016e78 <Port_UnUsedPin>:
   16e78:	00000000 00000001 00000000              ............

00016e84 <Port_aPinConfigDefault>:
   16e84:	00000048 00000100 00000000 00000002     H...............
   16e94:	00010001 00000049 00000100 00000000     ....I...........
   16ea4:	00000002 00010101 0000004a 00000100     ........J.......
   16eb4:	00000000 00000002 00010101 0000008c     ................
   16ec4:	00000100 00000000 00000001 00010101     ................
   16ed4:	0000004b 00000100 00000000 00000002     K...............
   16ee4:	00010101 0000004d 00000100 00000000     ....M...........
   16ef4:	00000002 00010101 0000004e 00000100     ........N.......
   16f04:	00000000 00000002 00010101 00000071     ............q...
   16f14:	00000100 00000000 00000001 00010101     ................
   16f24:	0000000c 00000100 00000000 00000001     ................
   16f34:	00010101 00000021 00000000 00000002     ....!...........
   16f44:	00000000 00010000 0000002d 00000000     ........-.......
   16f54:	00000002 00000000 00010000 0000000d     ................
   16f64:	00000200 00000000 00000002 00010000     ................

00016f74 <Port_Config>:
   16f74:	0048000c 00016de8 00016e78 00016e84     ..H..m..xn...n..
	...
   16f8c:	00016db8 00016db4 00016bd4              .m...m...k..

00016f98 <Power_Ip_RCM_ConfigPB>:
	...

00016fa0 <Power_Ip_PMC_ConfigPB>:
   16fa0:	00000000                                ....

00016fa4 <Power_Ip_SMC_ConfigPB>:
   16fa4:	00000000                                ....

00016fa8 <Power_Ip_aModeConfigPB>:
	...

00016fb4 <Power_Ip_HwIPsConfigPB>:
   16fb4:	00016f98 00016fa0 00016fa4              .o...o...o..

00016fc0 <Pwm_Channels_PB>:
   16fc0:	00000000 00000001 00000001 00016afc     .............j..
   16fd0:	00000001 00000001                       ........

00016fd8 <Pwm_Instances_PB>:
   16fd8:	00000001 00000001 00016b28              ........(k..

00016fe4 <Pwm_Config>:
   16fe4:	00000001 00016fc0 00000001 00016fd8     .....o.......o..

00016ff4 <_aInitStr.0>:
   16ff4:	00000000 54540000 45522052 53454747     ......TTR REGGES
   17004:	00000000                                ....

00017008 <_aV2C.0>:
   17008:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00017018 <__INIT_TABLE>:
   17018:	00000002 	.word	0x00000002
   1701c:	1fff8b10 	.word	0x1fff8b10
   17020:	00017040 	.word	0x00017040
   17024:	00017094 	.word	0x00017094
   17028:	1fff8800 	.word	0x1fff8800
   1702c:	00000000 	.word	0x00000000
   17030:	00000310 	.word	0x00000310

00017034 <__ZERO_TABLE>:
   17034:	00000001 	.word	0x00000001
   17038:	1fff8b70 	.word	0x1fff8b70
   1703c:	1fff9c90 	.word	0x1fff9c90
