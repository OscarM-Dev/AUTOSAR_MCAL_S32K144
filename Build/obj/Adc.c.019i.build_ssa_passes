Adc_Calibrate (Adc_HwUnitType Unit, struct Adc_CalibrationStatusType * pStatus)
{
  boolean IsCalibrateCalled;
  volatile uint8 CoreId;

  <bb 2> :
  IsCalibrateCalled = 0;
  _1 = Adc_GetCoreID ();
  CoreId = _1;
  CoreId.50_2 = CoreId;
  _3 = Adc_ValidateCallAndUnit (41, Unit, CoreId.50_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  _4 = Adc_ValidatePtr (41, pStatus);
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  pStatus->AdcUnitSelfTestStatus = 1;
  _5 = Adc_ValidateNotBusyNoQueue (Unit, 41);
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  CoreId.51_6 = CoreId;
  _7 = Adc_ValidateCheckGroupNotConversion (41, CoreId.51_6);
  if (_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  CoreId.52_8 = CoreId;
  Adc_Ipw_Calibrate (Unit, pStatus, CoreId.52_8);
  IsCalibrateCalled = 1;

  <bb 7> :
  if (IsCalibrateCalled != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _9 = pStatus->AdcUnitSelfTestStatus;
  if (_9 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Adc_ReportDetRuntimeError (41, 43);

  <bb 10> :
  return;

}


Adc_GetVersionInfo (struct Std_VersionInfoType * versioninfo)
{
  <bb 2> :
  _1 = Adc_ValidatePtr (10, versioninfo);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  versioninfo->vendorID = 43;
  versioninfo->moduleID = 123;
  versioninfo->sw_major_version = 2;
  versioninfo->sw_minor_version = 0;
  versioninfo->sw_patch_version = 0;

  <bb 4> :
  return;

}


Adc_GetStreamLastPointer (Adc_GroupType Group, Adc_ValueGroupType * * PtrToSamplePtr)
{
  Std_ReturnType ValidStatus;
  Adc_StreamNumSampleType ResultIndex;
  Adc_StreamNumSampleType NumberOfResults;
  Adc_GroupType GroupIndex;
  volatile uint8 CoreId;
  Adc_StreamNumSampleType D.7043;

  <bb 2> :
  _1 = Adc_GetCoreID ();
  CoreId = _1;
  GroupIndex = 0;
  NumberOfResults = 0;
  ResultIndex = 0;
  CoreId.44_2 = CoreId;
  ValidStatus = Adc_ValidateCallAndGroup (11, Group, CoreId.44_2);
  if (ValidStatus == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  CoreId.45_3 = CoreId;
  _4 = Adc_ValidateStateNotIdle (11, Group, CoreId.45_3);
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  *PtrToSamplePtr = 0B;
  _5 = (int) Group;
  _6 = Adc_axGroupStatus[_5].Conversion;
  if (_6 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _7 = (int) Group;
  _8 = Adc_axGroupStatus[_7].Conversion;
  if (_8 != 1)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 6> :
  CoreId.46_9 = CoreId;
  _10 = (int) CoreId.46_9;
  _11 = Adc_apxCfgPtr[_10];
  _12 = _11->GroupIdToIndexMapPtr;
  _13 = (unsigned int) Group;
  _14 = _13 * 2;
  _15 = _12 + _14;
  GroupIndex = *_15;
  _16 = (int) Group;
  _17 = Adc_axGroupStatus[_16].ResultIndex;
  if (_17 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  CoreId.47_18 = CoreId;
  _19 = (int) CoreId.47_18;
  _20 = Adc_apxCfgPtr[_19];
  _21 = _20->GroupsPtr;
  _22 = (unsigned int) GroupIndex;
  _23 = _22 * 52;
  _24 = _21 + _23;
  _25 = _24->NumSamples;
  ResultIndex = _25 + 65535;
  CoreId.48_26 = CoreId;
  _27 = (int) CoreId.48_26;
  _28 = Adc_apxCfgPtr[_27];
  _29 = _28->GroupsPtr;
  _30 = (unsigned int) GroupIndex;
  _31 = _30 * 52;
  _32 = _29 + _31;
  NumberOfResults = _32->NumSamples;
  goto <bb 9>; [INV]

  <bb 8> :
  _33 = (int) Group;
  _34 = Adc_axGroupStatus[_33].ResultIndex;
  ResultIndex = _34 + 65535;
  _35 = (int) Group;
  NumberOfResults = Adc_axGroupStatus[_35].ResultIndex;

  <bb 9> :
  _36 = (int) Group;
  _37 = Adc_axGroupStatus[_36].ResultsBufferPtr;
  _38 = (unsigned int) ResultIndex;
  _39 = _38 * 2;
  _40 = _37 + _39;
  *PtrToSamplePtr = _40;
  CoreId.49_41 = CoreId;
  Adc_UpdateStatusAfterGetStream (Group, CoreId.49_41);
  goto <bb 12>; [INV]

  <bb 10> :
  *PtrToSamplePtr = 0B;
  goto <bb 12>; [INV]

  <bb 11> :
  *PtrToSamplePtr = 0B;

  <bb 12> :
  D.7043 = NumberOfResults;

  <bb 13> :
<L13>:
  return D.7043;

}


Adc_GetGroupStatus (Adc_GroupType Group)
{
  Adc_StatusType TempReturn;
  volatile uint8 CoreId;
  Adc_StatusType D.7028;

  <bb 2> :
  TempReturn = 0;
  _1 = Adc_GetCoreID ();
  CoreId = _1;
  CoreId.43_2 = CoreId;
  _3 = Adc_ValidateCallAndGroup (9, Group, CoreId.43_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = (int) Group;
  TempReturn = Adc_axGroupStatus[_4].Conversion;

  <bb 4> :
  D.7028 = TempReturn;

  <bb 5> :
<L2>:
  return D.7028;

}


Adc_ReadGroup (Adc_GroupType Group, Adc_ValueGroupType * DataBufferPtr)
{
  boolean Flag;
  Std_ReturnType GroupRet;
  volatile uint8 CoreId;
  Std_ReturnType D.6991;

  <bb 2> :
  GroupRet = 1;
  Flag = 1;
  _1 = Adc_GetCoreID ();
  CoreId = _1;
  CoreId.36_2 = CoreId;
  _3 = Adc_ValidateCallAndGroup (4, Group, CoreId.36_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _4 = Adc_ValidatePtr (4, DataBufferPtr);
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  CoreId.37_5 = CoreId;
  _6 = Adc_ValidateStateNotIdle (4, Group, CoreId.37_5);
  if (_6 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  CoreId.38_7 = CoreId;
  GroupRet = Adc_Ipw_ReadGroup (Group, DataBufferPtr, &Flag, CoreId.38_7);
  if (GroupRet == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  Flag.39_8 = Flag;
  _9 = ~Flag.39_8;
  if (_9 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Flag.40_10 = Flag;
  CoreId.41_11 = CoreId;
  Adc_UpdateStatusReadGroup (Group, Flag.40_10, CoreId.41_11);

  <bb 8> :
  D.6991 = GroupRet;
  Flag = {CLOBBER};

  <bb 9> :
<L10>:
  return D.6991;

}


Adc_StopGroupConversion (Adc_GroupType Group)
{
  Adc_GroupType GroupIndex;
  volatile uint8 CoreId;
  Adc_HwUnitType LogicalHwUnitId;

  <bb 2> :
  LogicalHwUnitId = 0;
  GroupIndex = 0;
  _1 = Adc_GetCoreID ();
  CoreId = _1;
  CoreId.28_2 = CoreId;
  _3 = Adc_ValidateCallAndGroup (3, Group, CoreId.28_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  CoreId.29_4 = CoreId;
  _5 = Adc_ValidateStateNotIdle (3, Group, CoreId.29_4);
  if (_5 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  CoreId.30_6 = CoreId;
  _7 = Adc_ValidateExtraParams (3, 2, Group, CoreId.30_6);
  if (_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  CoreId.31_8 = CoreId;
  _9 = (int) CoreId.31_8;
  _10 = Adc_apxCfgPtr[_9];
  _11 = _10->GroupIdToIndexMapPtr;
  _12 = (unsigned int) Group;
  _13 = _12 * 2;
  _14 = _11 + _13;
  GroupIndex = *_14;
  CoreId.32_15 = CoreId;
  _16 = (int) CoreId.32_15;
  _17 = Adc_apxCfgPtr[_16];
  _18 = _17->GroupsPtr;
  _19 = (unsigned int) GroupIndex;
  _20 = _19 * 52;
  _21 = _18 + _20;
  LogicalHwUnitId = _21->AdcLogicalUnitId;
  CoreId.33_22 = CoreId;
  Adc_UpdateStatusStopConversion (Group, LogicalHwUnitId, CoreId.33_22);

  <bb 6> :
  return;

}


Adc_StartGroupConversion (Adc_GroupType Group)
{
  Adc_HwUnitType LogicalHwUnitId;
  Adc_GroupType GroupIndex;
  volatile uint8 CoreId;

  <bb 2> :
  GroupIndex = 0;
  LogicalHwUnitId = 0;
  _1 = Adc_GetCoreID ();
  CoreId = _1;
  CoreId.22_2 = CoreId;
  _3 = Adc_ValidateCallAndGroup (2, Group, CoreId.22_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  CoreId.23_4 = CoreId;
  _5 = (int) CoreId.23_4;
  _6 = Adc_apxCfgPtr[_5];
  _7 = _6->GroupIdToIndexMapPtr;
  _8 = (unsigned int) Group;
  _9 = _8 * 2;
  _10 = _7 + _9;
  GroupIndex = *_10;
  CoreId.24_11 = CoreId;
  _12 = Adc_ValidateStateStartGroupConvNotBusy (Group, CoreId.24_11);
  if (_12 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  CoreId.25_13 = CoreId;
  _14 = Adc_ValidateExtraParams (2, 7, Group, CoreId.25_13);
  if (_14 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  CoreId.26_15 = CoreId;
  _16 = (int) CoreId.26_15;
  _17 = Adc_apxCfgPtr[_16];
  _18 = _17->GroupsPtr;
  _19 = (unsigned int) GroupIndex;
  _20 = _19 * 52;
  _21 = _18 + _20;
  LogicalHwUnitId = _21->AdcLogicalUnitId;
  CoreId.27_22 = CoreId;
  Adc_UpdateStatusStartConversion (Group, LogicalHwUnitId, CoreId.27_22);

  <bb 6> :
  return;

}


Adc_DeInit ()
{
  Std_ReturnType ValidStatus;
  Std_ReturnType TempReturn;
  uint8 CoreIdTemp;
  Std_ReturnType ValidCoreId;
  Adc_HwUnitType LogicalHwUnitId;
  volatile uint8 CoreId;

  <bb 2> :
  LogicalHwUnitId = 0;
  _1 = Adc_GetCoreID ();
  CoreId = _1;
  CoreIdTemp = CoreId;
  CoreId.12_2 = CoreId;
  ValidStatus = Adc_ValidateGloballCall (1, CoreId.12_2);
  if (ValidStatus == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 3> :
  CoreId.13_3 = CoreId;
  _4 = (int) CoreId.13_3;
  _5 = Adc_apxCfgPtr[_4];
  ValidCoreId = Adc_CheckCurrentCoreId (_5, CoreIdTemp);
  if (ValidCoreId == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 4> :
  CoreId.14_6 = CoreId;
  ValidStatus = Adc_ValidateDeInitNotBusy (CoreId.14_6);
  if (ValidStatus == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 5> :
  CoreId.15_7 = CoreId;
  TempReturn = Adc_Ipw_DeInit (CoreId.15_7);
  if (TempReturn == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Adc_ReportDetRuntimeError (1, 43);

  <bb 7> :
  LogicalHwUnitId = 0;
  goto <bb 11>; [INV]

  <bb 8> :
  CoreId.16_8 = CoreId;
  _9 = (int) CoreId.16_8;
  _10 = Adc_apxCfgPtr[_9];
  _11 = _10->AdcIpwConfigPtr;
  _12 = (int) LogicalHwUnitId;
  _13 = _11->Mapping.AdcHwUnitArr[_12];
  if (_13 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _14 = (int) LogicalHwUnitId;
  Adc_axUnitStatus[_14].Sc1Used = 0;

  <bb 10> :
  LogicalHwUnitId.17_15 = LogicalHwUnitId;
  LogicalHwUnitId = LogicalHwUnitId.17_15 + 1;

  <bb 11> :
  if (LogicalHwUnitId <= 1)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  CoreId.18_16 = CoreId;
  _17 = (int) CoreId.18_16;
  Adc_apxCfgPtr[_17] = 0B;
  goto <bb 14>; [INV]

  <bb 13> :
  Adc_ReportDetError (1, 14);

  <bb 14> :
  CoreId.19_18 = CoreId;
  Adc_EndValidateGloballCall (ValidStatus, 1, CoreId.19_18);
  return;

}


Adc_SetupResultBuffer (Adc_GroupType Group, Adc_ValueGroupType * const DataBufferPtr)
{
  volatile uint8 CoreId;
  Std_ReturnType TempReturn;
  Std_ReturnType D.6831;

  <bb 2> :
  TempReturn = 1;
  _1 = Adc_GetCoreID ();
  CoreId = _1;
  CoreId.11_2 = CoreId;
  _3 = Adc_ValidateCallAndGroup (12, Group, CoreId.11_2);
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _4 = Adc_ValidatePtr (12, DataBufferPtr);
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _5 = Adc_ValidateSetupBufferNotBusy (Group);
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 = (int) Group;
  Adc_axGroupStatus[_6].ResultsBufferPtr = DataBufferPtr;
  TempReturn = 0;

  <bb 6> :
  D.6831 = TempReturn;

  <bb 7> :
<L6>:
  return D.6831;

}


Adc_Init (const struct Adc_ConfigType * ConfigPtr)
{
  Std_ReturnType ValidStatus;
  Std_ReturnType TimeOutStatus;
  Std_ReturnType ValidCoreId;
  uint8 CoreIdTemp;
  volatile uint8 CoreId;

  <bb 2> :
  _1 = Adc_GetCoreID ();
  CoreId = _1;
  CoreIdTemp = CoreId;
  CoreId.0_2 = CoreId;
  ValidStatus = Adc_ValidateGloballCall (0, CoreId.0_2);
  if (ValidStatus == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  ValidStatus = Adc_ValidatePtrInit (ConfigPtr);
  if (ValidStatus == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  CoreId.1_3 = CoreId;
  ValidCoreId = Adc_CheckCurrentCoreId (ConfigPtr, CoreId.1_3);
  if (ValidCoreId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  CoreId.2_4 = CoreId;
  _5 = (int) CoreId.2_4;
  Adc_apxCfgPtr[_5] = ConfigPtr;
  CoreId.3_6 = CoreId;
  Adc_InitUnitStatus (CoreId.3_6);
  CoreId.4_7 = CoreId;
  Adc_InitGroupsStatus (CoreId.4_7);
  CoreId.5_8 = CoreId;
  _9 = (int) CoreId.5_8;
  _10 = Adc_apxCfgPtr[_9];
  _11 = _10->AdcIpwConfigPtr;
  TimeOutStatus = Adc_Ipw_Init (_11, CoreIdTemp);
  if (TimeOutStatus == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  Adc_ReportDetRuntimeError (0, 43);
  goto <bb 8>; [INV]

  <bb 7> :
  ValidStatus = 1;
  Adc_ReportDetError (0, 14);

  <bb 8> :
  if (ValidStatus == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  CoreId.6_12 = CoreId;
  Adc_EndValidateGloballCall (ValidStatus, 0, CoreId.6_12);

  <bb 10> :
  return;

}


Adc_UpdateStatusAfterGetStream (Adc_GroupType Group, uint8 CoreId)
{
  Adc_GroupType GroupIndex;

  <bb 2> :
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->GroupIdToIndexMapPtr;
  _4 = (unsigned int) Group;
  _5 = _4 * 2;
  _6 = _3 + _5;
  GroupIndex = *_6;
  _7 = (int) Group;
  _8 = Adc_axGroupStatus[_7].Conversion;
  if (_8 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _9 = (int) Group;
  Adc_axGroupStatus[_9].Conversion = 1;

  <bb 4> :
  _10 = (int) Group;
  _11 = Adc_axGroupStatus[_10].Conversion;
  if (_11 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  _12 = (int) CoreId;
  _13 = Adc_apxCfgPtr[_12];
  _14 = _13->GroupsPtr;
  _15 = (unsigned int) GroupIndex;
  _16 = _15 * 52;
  _17 = _14 + _16;
  _18 = _17->TriggerSource;
  if (_18 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 6> :
  _19 = (int) CoreId;
  _20 = Adc_apxCfgPtr[_19];
  _21 = _20->GroupsPtr;
  _22 = (unsigned int) GroupIndex;
  _23 = _22 * 52;
  _24 = _21 + _23;
  _25 = _24->Mode;
  if (_25 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _26 = (int) CoreId;
  _27 = Adc_apxCfgPtr[_26];
  _28 = _27->GroupsPtr;
  _29 = (unsigned int) GroupIndex;
  _30 = _29 * 52;
  _31 = _28 + _30;
  _32 = _31->Mode;
  if (_32 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _33 = (int) CoreId;
  _34 = Adc_apxCfgPtr[_33];
  _35 = _34->GroupsPtr;
  _36 = (unsigned int) GroupIndex;
  _37 = _36 * 52;
  _38 = _35 + _37;
  _39 = _38->AccessMode;
  if (_39 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _40 = (int) CoreId;
  _41 = Adc_apxCfgPtr[_40];
  _42 = _41->GroupsPtr;
  _43 = (unsigned int) GroupIndex;
  _44 = _43 * 52;
  _45 = _42 + _44;
  _46 = _45->BufferMode;
  if (_46 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _47 = (int) Group;
  Adc_axGroupStatus[_47].Conversion = 0;
  goto <bb 12>; [INV]

  <bb 11> :
  _48 = (int) Group;
  Adc_axGroupStatus[_48].Conversion = 1;

  <bb 12> :
  return;

}


Adc_UpdateStatusReadGroupInt (const Adc_GroupType Group, uint8 CoreId)
{
  Adc_GroupType GroupIndex;

  <bb 2> :
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->GroupIdToIndexMapPtr;
  _4 = (unsigned int) Group;
  _5 = _4 * 2;
  _6 = _3 + _5;
  GroupIndex = *_6;
  _7 = (int) Group;
  _8 = Adc_axGroupStatus[_7].Conversion;
  if (_8 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _9 = (int) Group;
  Adc_axGroupStatus[_9].Conversion = 1;
  goto <bb 13>; [INV]

  <bb 4> :
  _10 = (int) Group;
  _11 = Adc_axGroupStatus[_10].Conversion;
  if (_11 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 5> :
  _12 = (int) CoreId;
  _13 = Adc_apxCfgPtr[_12];
  _14 = _13->GroupsPtr;
  _15 = (unsigned int) GroupIndex;
  _16 = _15 * 52;
  _17 = _14 + _16;
  _18 = _17->TriggerSource;
  if (_18 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 6> :
  _19 = (int) CoreId;
  _20 = Adc_apxCfgPtr[_19];
  _21 = _20->GroupsPtr;
  _22 = (unsigned int) GroupIndex;
  _23 = _22 * 52;
  _24 = _21 + _23;
  _25 = _24->Mode;
  if (_25 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _26 = (int) CoreId;
  _27 = Adc_apxCfgPtr[_26];
  _28 = _27->GroupsPtr;
  _29 = (unsigned int) GroupIndex;
  _30 = _29 * 52;
  _31 = _28 + _30;
  _32 = _31->Mode;
  if (_32 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _33 = (int) CoreId;
  _34 = Adc_apxCfgPtr[_33];
  _35 = _34->GroupsPtr;
  _36 = (unsigned int) GroupIndex;
  _37 = _36 * 52;
  _38 = _35 + _37;
  _39 = _38->AccessMode;
  if (_39 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _40 = (int) CoreId;
  _41 = Adc_apxCfgPtr[_40];
  _42 = _41->GroupsPtr;
  _43 = (unsigned int) GroupIndex;
  _44 = _43 * 52;
  _45 = _42 + _44;
  _46 = _45->BufferMode;
  if (_46 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _47 = (int) Group;
  Adc_axGroupStatus[_47].Conversion = 0;
  goto <bb 12>; [INV]

  <bb 11> :
  _48 = (int) Group;
  Adc_axGroupStatus[_48].Conversion = 1;

  <bb 12> :

  <bb 13> :
  return;

}


Adc_UpdateSwQueueIndexNoInt (const Adc_GroupType Group, uint8 CoreId)
{
  Adc_QueueIndexType NumOfSwNormalQueue;
  Adc_QueueIndexType SwNormalQueueIndex;
  Adc_HwUnitType LogicalHwUnitId;
  Adc_GroupType GroupIndex;

  <bb 2> :
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->GroupIdToIndexMapPtr;
  _4 = (unsigned int) Group;
  _5 = _4 * 2;
  _6 = _3 + _5;
  GroupIndex = *_6;
  _7 = (int) CoreId;
  _8 = Adc_apxCfgPtr[_7];
  _9 = _8->GroupsPtr;
  _10 = (unsigned int) GroupIndex;
  _11 = _10 * 52;
  _12 = _9 + _11;
  LogicalHwUnitId = _12->AdcLogicalUnitId;
  _13 = (int) LogicalHwUnitId;
  _14 = Adc_axUnitStatus[_13].SwNormalQueueIndex;
  if (_14 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _15 = (int) LogicalHwUnitId;
  NumOfSwNormalQueue = Adc_axUnitStatus[_15].SwNormalQueueIndex;
  SwNormalQueueIndex = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  _16 = (int) LogicalHwUnitId;
  _17 = (int) SwNormalQueueIndex;
  _18 = Adc_axUnitStatus[_16].SwNormalQueue[_17];
  if (Group == _18)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Adc_Ipw_RemoveFromQueue (LogicalHwUnitId, SwNormalQueueIndex);
  goto <bb 8>; [INV]

  <bb 6> :
  SwNormalQueueIndex.42_19 = SwNormalQueueIndex;
  SwNormalQueueIndex = SwNormalQueueIndex.42_19 + 1;

  <bb 7> :
  if (SwNormalQueueIndex < NumOfSwNormalQueue)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (SwNormalQueueIndex == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _20 = (int) LogicalHwUnitId;
  _21 = Adc_axUnitStatus[_20].SwNormalQueueIndex;
  if (_21 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Adc_Ipw_StartNormalConversion (LogicalHwUnitId, CoreId);

  <bb 11> :
  return;

}


Adc_UpdateStatusReadGroupNoInt (const Adc_GroupType Group, const boolean Flag, uint8 CoreId)
{
  Adc_GroupType GroupIndex;

  <bb 2> :
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->GroupIdToIndexMapPtr;
  _4 = (unsigned int) Group;
  _5 = _4 * 2;
  _6 = _3 + _5;
  GroupIndex = *_6;
  _7 = (int) Group;
  Adc_axGroupStatus[_7].AlreadyConverted = 1;
  if (Flag != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _8 = (int) CoreId;
  _9 = Adc_apxCfgPtr[_8];
  _10 = _9->GroupsPtr;
  _11 = (unsigned int) GroupIndex;
  _12 = _11 * 52;
  _13 = _10 + _12;
  _14 = _13->Mode;
  if (_14 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _15 = (int) Group;
  Adc_axGroupStatus[_15].Conversion = 1;
  goto <bb 7>; [INV]

  <bb 5> :
  _16 = (int) CoreId;
  _17 = Adc_apxCfgPtr[_16];
  _18 = _17->GroupsPtr;
  _19 = (unsigned int) GroupIndex;
  _20 = _19 * 52;
  _21 = _18 + _20;
  _22 = _21->TriggerSource;
  if (_22 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _23 = (int) Group;
  Adc_axGroupStatus[_23].Conversion = 0;
  Adc_UpdateSwQueueIndexNoInt (Group, CoreId);

  <bb 7> :
  return;

}


Adc_UpdateStatusReadGroup (const Adc_GroupType Group, const boolean Flag, uint8 CoreId)
{
  Adc_GroupType GroupIndex;

  <bb 2> :
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->GroupIdToIndexMapPtr;
  _4 = (unsigned int) Group;
  _5 = _4 * 2;
  _6 = _3 + _5;
  GroupIndex = *_6;
  _7 = (int) CoreId;
  _8 = Adc_apxCfgPtr[_7];
  _9 = _8->GroupsPtr;
  _10 = (unsigned int) GroupIndex;
  _11 = _10 * 52;
  _12 = _9 + _11;
  _13 = _12->AdcWithoutInterrupt;
  if (_13 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_UpdateStatusReadGroupNoInt (Group, Flag, CoreId);
  goto <bb 5>; [INV]

  <bb 4> :
  Adc_UpdateStatusReadGroupInt (Group, CoreId);

  <bb 5> :
  return;

}


Adc_UpdateStatusStopConversion (Adc_GroupType Group, Adc_HwUnitType Unit, uint8 CoreId)
{
  Adc_StatusType Conversion;
  Adc_StreamBufferModeType BufferMode;
  Adc_GroupAccessModeType AccessMode;
  Adc_GroupConvModeType Mode;
  Std_ReturnType TimeOutStatus;
  Adc_QueueIndexType RemovedPos;
  Adc_GroupType GroupIndex;

  <bb 2> :
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->GroupIdToIndexMapPtr;
  _4 = (unsigned int) Group;
  _5 = _4 * 2;
  _6 = _3 + _5;
  GroupIndex = *_6;
  RemovedPos = 0;
  TimeOutStatus = 0;
  _7 = (int) CoreId;
  _8 = Adc_apxCfgPtr[_7];
  _9 = _8->GroupsPtr;
  _10 = (unsigned int) GroupIndex;
  _11 = _10 * 52;
  _12 = _9 + _11;
  Mode = _12->Mode;
  _13 = (int) CoreId;
  _14 = Adc_apxCfgPtr[_13];
  _15 = _14->GroupsPtr;
  _16 = (unsigned int) GroupIndex;
  _17 = _16 * 52;
  _18 = _15 + _17;
  AccessMode = _18->AccessMode;
  _19 = (int) CoreId;
  _20 = Adc_apxCfgPtr[_19];
  _21 = _20->GroupsPtr;
  _22 = (unsigned int) GroupIndex;
  _23 = _22 * 52;
  _24 = _21 + _23;
  BufferMode = _24->BufferMode;
  _25 = (int) Group;
  Conversion = Adc_axGroupStatus[_25].Conversion;
  _26 = (int) Group;
  Adc_axGroupStatus[_26].ResultIndex = 0;
  if (Mode == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (AccessMode == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  if (BufferMode == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  if (Conversion == 3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _27 = (int) Group;
  Adc_axGroupStatus[_27].Conversion = 0;
  goto <bb 12>; [INV]

  <bb 7> :
  TimeOutStatus = Adc_StopSwGroupConversion (&RemovedPos, Group, Unit, CoreId);
  _28 = (int) Group;
  Adc_axGroupStatus[_28].Conversion = 0;
  RemovedPos.34_29 = RemovedPos;
  if (RemovedPos.34_29 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _30 = (int) Unit;
  _31 = Adc_axUnitStatus[_30].SwNormalQueueIndex;
  if (_31 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Adc_Ipw_StartNormalConversion (Unit, CoreId);

  <bb 10> :
  if (TimeOutStatus == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Adc_ReportDetRuntimeError (3, 43);

  <bb 12> :
  RemovedPos = {CLOBBER};
  return;

}


Adc_StopSwGroupConversion (Adc_QueueIndexType * RemovedPos, Adc_GroupType Group, Adc_HwUnitType Unit, uint8 CoreId)
{
  Adc_QueueIndexType NumOfSwNormalQueue;
  Adc_QueueIndexType SwNormalQueueIndex;
  Std_ReturnType TimeOutStatus;
  Std_ReturnType D.6980;

  <bb 2> :
  TimeOutStatus = 0;
  _1 = (int) Unit;
  _2 = Adc_axUnitStatus[_1].SwNormalQueueIndex;
  *RemovedPos = _2;
  _3 = (int) Unit;
  NumOfSwNormalQueue = Adc_axUnitStatus[_3].SwNormalQueueIndex;
  SwNormalQueueIndex = 0;
  goto <bb 8>; [INV]

  <bb 3> :
  _4 = (int) Unit;
  _5 = (int) SwNormalQueueIndex;
  _6 = Adc_axUnitStatus[_4].SwNormalQueue[_5];
  if (Group == _6)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  *RemovedPos = SwNormalQueueIndex;
  if (SwNormalQueueIndex == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  TimeOutStatus = Adc_Ipw_StopCurrentConversion (Unit, Group, CoreId);

  <bb 6> :
  Adc_Ipw_RemoveFromQueue (Unit, SwNormalQueueIndex);

  <bb 7> :
  SwNormalQueueIndex.35_7 = SwNormalQueueIndex;
  SwNormalQueueIndex = SwNormalQueueIndex.35_7 + 1;

  <bb 8> :
  if (SwNormalQueueIndex < NumOfSwNormalQueue)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  D.6980 = TimeOutStatus;

  <bb 10> :
<L7>:
  return D.6980;

}


Adc_UpdateStatusStartConversion (const Adc_GroupType Group, const Adc_HwUnitType Unit, uint8 CoreId)
{
  Std_ReturnType TimeOutStatus;
  Adc_QueueIndexType SwNormalQueueIndex;
  Adc_QueueIndexType QueueIndex;

  <bb 2> :
  QueueIndex = 0;
  TimeOutStatus = 0;
  _1 = (int) Group;
  Adc_axGroupStatus[_1].Conversion = 1;
  _2 = (int) Group;
  Adc_axGroupStatus[_2].ResultIndex = 0;
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01 ();
  _3 = (int) Unit;
  QueueIndex = Adc_axUnitStatus[_3].SwNormalQueueIndex;
  if (QueueIndex != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = (int) Unit;
  _5 = (int) QueueIndex;
  Adc_axUnitStatus[_4].SwNormalQueue[_5] = Group;
  _6 = (int) Unit;
  _7 = Adc_axUnitStatus[_6].SwNormalQueueIndex;
  _8 = _7;
  _9 = _8 + 1;
  Adc_axUnitStatus[_6].SwNormalQueueIndex = _9;

  <bb 4> :
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01 ();
  SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01 ();
  _10 = (int) Unit;
  SwNormalQueueIndex = Adc_axUnitStatus[_10].SwNormalQueueIndex;
  _11 = (int) Unit;
  _12 = Adc_axUnitStatus[_11].SwNormalQueue[0];
  if (Group == _12)
    goto <bb 6>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  if (SwNormalQueueIndex == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  _13 = (int) Unit;
  _14 = Adc_axUnitStatus[_13].SwNormalQueueIndex;
  if (_14 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _15 = (int) Unit;
  Adc_axUnitStatus[_15].SwNormalQueue[0] = Group;
  _16 = (int) Unit;
  _17 = Adc_axUnitStatus[_16].SwNormalQueueIndex;
  _18 = _17;
  _19 = _18 + 1;
  Adc_axUnitStatus[_16].SwNormalQueueIndex = _19;

  <bb 8> :
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01 ();
  Adc_Ipw_StartNormalConversion (Unit, CoreId);
  goto <bb 10>; [INV]

  <bb 9> :
  SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01 ();

  <bb 10> :
  return;

}


Adc_CheckCurrentCoreId (const struct Adc_ConfigType * CfgPtr, uint8 CoreId)
{
  Std_ReturnType ValidCoreId;
  uint8 Index;
  Std_ReturnType D.6816;

  <bb 2> :
  Index = 0;
  ValidCoreId = 1;
  _1 = CfgPtr->CoreId;
  if (CoreId == _1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  Index = 0;
  goto <bb 7>; [INV]

  <bb 4> :
  _2 = CfgPtr->AssignmentPartitionPtr;
  _3 = (sizetype) Index;
  _4 = _2 + _3;
  _5 = *_4;
  if (CoreId == _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  ValidCoreId = 0;
  goto <bb 8>; [INV]

  <bb 6> :
  Index.7_6 = Index;
  Index = Index.7_6 + 1;

  <bb 7> :
  _7 = CfgPtr->AssignedPartitionCount;
  if (Index < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  D.6816 = ValidCoreId;

  <bb 9> :
<L7>:
  return D.6816;

}


Adc_InitUnitStatus (uint8 CoreId)
{
  Adc_QueueIndexType QueueIdx;
  Adc_HwUnitType LogicalHwUnitId;

  <bb 2> :
  LogicalHwUnitId = 0;
  QueueIdx = 0;
  LogicalHwUnitId = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->AdcIpwConfigPtr;
  _4 = (int) LogicalHwUnitId;
  _5 = _3->Mapping.AdcHwUnitArr[_4];
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _6 = (int) LogicalHwUnitId;
  Adc_axUnitStatus[_6].SwNormalQueueIndex = 0;
  QueueIdx = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _7 = (int) LogicalHwUnitId;
  _8 = (int) QueueIdx;
  Adc_axUnitStatus[_7].SwNormalQueue[_8] = 0;
  QueueIdx.8_9 = QueueIdx;
  QueueIdx = QueueIdx.8_9 + 1;

  <bb 6> :
  if (QueueIdx <= 1)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  _10 = (int) LogicalHwUnitId;
  Adc_axUnitStatus[_10].Sc1Used = 0;

  <bb 8> :
  LogicalHwUnitId.9_11 = LogicalHwUnitId;
  LogicalHwUnitId = LogicalHwUnitId.9_11 + 1;

  <bb 9> :
  if (LogicalHwUnitId <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  return;

}


Adc_InitGroupsStatus (uint8 CoreId)
{
  Adc_GroupType GroupId;
  Adc_GroupType GroupCnt;

  <bb 2> :
  GroupCnt = 0;
  GroupId = 0;
  GroupCnt = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->GroupsPtr;
  _4 = (unsigned int) GroupCnt;
  _5 = _4 * 52;
  _6 = _3 + _5;
  GroupId = _6->GroupId;
  _7 = (int) GroupId;
  Adc_axGroupStatus[_7].Conversion = 0;
  _8 = (int) GroupId;
  Adc_axGroupStatus[_8].AlreadyConverted = 0;
  _9 = (int) GroupId;
  Adc_axGroupStatus[_9].ResultIndex = 0;
  _10 = (int) GroupId;
  Adc_axGroupStatus[_10].ResultsBufferPtr = 0B;
  _11 = (int) GroupId;
  Adc_axGroupStatus[_11].CurrentChannel = 0;
  GroupCnt.10_12 = GroupCnt;
  GroupCnt = GroupCnt.10_12 + 1;

  <bb 4> :
  _13 = (int) CoreId;
  _14 = Adc_apxCfgPtr[_13];
  _15 = _14->GroupCount;
  if (GroupCnt < _15)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Adc_ValidateCallAndUnit (uint8 ServiceId, Adc_HwUnitType Unit, uint8 CoreId)
{
  Std_ReturnType ValidCoreId;
  Std_ReturnType ValidCallAndUnit;
  Std_ReturnType D.7083;

  <bb 2> :
  ValidCallAndUnit = 1;
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  if (_2 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_ReportDetError (ServiceId, 10);
  goto <bb 11>; [INV]

  <bb 4> :
  if (Unit > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Adc_ReportDetError (ServiceId, 38);
  goto <bb 11>; [INV]

  <bb 6> :
  _3 = (int) CoreId;
  _4 = Adc_apxCfgPtr[_3];
  ValidCoreId = Adc_CheckCurrentCoreId (_4, CoreId);
  if (ValidCoreId == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  _5 = (int) CoreId;
  _6 = Adc_apxCfgPtr[_5];
  _7 = _6->AdcIpwConfigPtr;
  _8 = (int) Unit;
  _9 = _7->Mapping.AdcHwUnitArr[_8];
  if (_9 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  ValidCallAndUnit = 0;
  goto <bb 11>; [INV]

  <bb 9> :
  Adc_ReportDetError (ServiceId, 14);
  goto <bb 11>; [INV]

  <bb 10> :
  Adc_ReportDetError (ServiceId, 14);

  <bb 11> :
  D.7083 = ValidCallAndUnit;

  <bb 12> :
<L12>:
  return D.7083;

}


Adc_ValidateCallAndGroup (uint8 ServiceId, Adc_GroupType Group, uint8 CoreId)
{
  Adc_GroupType GroupIndex;
  Std_ReturnType ValidCoreId;
  Std_ReturnType ValidCallAndGroup;
  Std_ReturnType D.6845;

  <bb 2> :
  ValidCallAndGroup = 1;
  ValidCoreId = 1;
  GroupIndex = 0;
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  if (_2 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_ReportDetError (ServiceId, 10);
  goto <bb 11>; [INV]

  <bb 4> :
  _3 = (int) CoreId;
  _4 = Adc_apxCfgPtr[_3];
  ValidCoreId = Adc_CheckCurrentCoreId (_4, CoreId);
  if (ValidCoreId == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  if (Group > 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Adc_ReportDetError (ServiceId, 21);
  goto <bb 11>; [INV]

  <bb 7> :
  _5 = (int) CoreId;
  _6 = Adc_apxCfgPtr[_5];
  _7 = _6->GroupIdToIndexMapPtr;
  _8 = (unsigned int) Group;
  _9 = _8 * 2;
  _10 = _7 + _9;
  GroupIndex = *_10;
  _11 = (int) CoreId;
  _12 = Adc_apxCfgPtr[_11];
  _13 = _12->GroupsPtr;
  _14 = (unsigned int) GroupIndex;
  _15 = _14 * 52;
  _16 = _13 + _15;
  _17 = _16->GroupId;
  if (Group != _17)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Adc_ReportDetError (ServiceId, 14);
  goto <bb 11>; [INV]

  <bb 9> :
  ValidCallAndGroup = 0;
  goto <bb 11>; [INV]

  <bb 10> :
  Adc_ReportDetError (ServiceId, 14);

  <bb 11> :
  D.6845 = ValidCallAndGroup;

  <bb 12> :
<L12>:
  return D.6845;

}


Adc_ValidateStateNotIdle (uint8 ServiceId, Adc_GroupType Group, uint8 CoreId)
{
  Std_ReturnType ValidState;
  Std_ReturnType D.6962;

  <bb 2> :
  ValidState = 0;
  _1 = (int) ServiceId;
  switch (_1) <default: <L12> [INV], case 3: <L5> [INV], case 4: <L0> [INV], case 11: <L9> [INV]>

  <bb 3> :
<L0>:
  _2 = (int) Group;
  _3 = Adc_axGroupStatus[_2].Conversion;
  if (_3 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _4 = (int) Group;
  _5 = Adc_axGroupStatus[_4].AlreadyConverted;
  if (_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Adc_ReportDetRuntimeError (ServiceId, 12);
  ValidState = 1;

  <bb 6> :
  goto <bb 14>; [INV]

  <bb 7> :
<L5>:
  _6 = (int) Group;
  _7 = Adc_axGroupStatus[_6].Conversion;
  if (_7 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Adc_ReportDetRuntimeError (ServiceId, 12);
  ValidState = 1;

  <bb 9> :
  goto <bb 14>; [INV]

  <bb 10> :
<L9>:
  _8 = (int) Group;
  _9 = Adc_axGroupStatus[_8].Conversion;
  if (_9 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  Adc_ReportDetRuntimeError (ServiceId, 12);
  ValidState = 1;

  <bb 12> :
  goto <bb 14>; [INV]

  <bb 13> :
<L12>:

  <bb 14> :
  D.6962 = ValidState;

  <bb 15> :
<L14>:
  return D.6962;

}


Adc_ValidateStateStartGroupConvNotBusy (Adc_GroupType Group, uint8 CoreId)
{
  boolean Implicitly;
  Std_ReturnType ValidState;
  Adc_GroupType GroupIndex;
  Std_ReturnType D.6901;

  <bb 2> :
  ValidState = 0;
  Implicitly = 0;
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->GroupIdToIndexMapPtr;
  _4 = (unsigned int) Group;
  _5 = _4 * 2;
  _6 = _3 + _5;
  GroupIndex = *_6;
  _7 = (int) CoreId;
  _8 = Adc_apxCfgPtr[_7];
  _9 = _8->GroupsPtr;
  _10 = (unsigned int) GroupIndex;
  _11 = _10 * 52;
  _12 = _9 + _11;
  _13 = _12->Mode;
  if (_13 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  _14 = (int) CoreId;
  _15 = Adc_apxCfgPtr[_14];
  _16 = _15->GroupsPtr;
  _17 = (unsigned int) GroupIndex;
  _18 = _17 * 52;
  _19 = _16 + _18;
  _20 = _19->Mode;
  if (_20 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _21 = (int) CoreId;
  _22 = Adc_apxCfgPtr[_21];
  _23 = _22->GroupsPtr;
  _24 = (unsigned int) GroupIndex;
  _25 = _24 * 52;
  _26 = _23 + _25;
  _27 = _26->AccessMode;
  if (_27 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _28 = (int) CoreId;
  _29 = Adc_apxCfgPtr[_28];
  _30 = _29->GroupsPtr;
  _31 = (unsigned int) GroupIndex;
  _32 = _31 * 52;
  _33 = _30 + _32;
  _34 = _33->BufferMode;
  if (_34 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Implicitly = 1;

  <bb 7> :
  if (ValidState == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Adc_ReportDetRuntimeError (2, 11);
  goto <bb 10>; [INV]

  <bb 9> :
  ValidState = Adc_ValidateNotBusyNoPrio (Group, Implicitly, CoreId);

  <bb 10> :
  D.6901 = ValidState;

  <bb 11> :
<L8>:
  return D.6901;

}


Adc_ValidateSetupBufferNotBusy (Adc_GroupType Group)
{
  Std_ReturnType ValidState;
  Std_ReturnType D.6854;

  <bb 2> :
  ValidState = 1;
  _1 = (int) Group;
  _2 = Adc_axGroupStatus[_1].Conversion;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_ReportDetRuntimeError (12, 11);
  goto <bb 5>; [INV]

  <bb 4> :
  ValidState = 0;

  <bb 5> :
  D.6854 = ValidState;

  <bb 6> :
<L3>:
  return D.6854;

}


Adc_ValidateDeInitNotBusy (uint8 CoreId)
{
  Adc_HwUnitType LogicalHwUnitId;
  Std_ReturnType ValidState;
  Std_ReturnType ErrorFound;
  Std_ReturnType D.6875;

  <bb 2> :
  ErrorFound = 0;
  ValidState = 1;
  LogicalHwUnitId = 0;
  LogicalHwUnitId = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->AdcIpwConfigPtr;
  _4 = (int) LogicalHwUnitId;
  _5 = _3->Mapping.AdcHwUnitArr[_4];
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  ErrorFound = Adc_ValidateNotBusyNoQueue (LogicalHwUnitId, 1);
  if (ErrorFound == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  goto <bb 8>; [INV]

  <bb 6> :
  LogicalHwUnitId.20_6 = LogicalHwUnitId;
  LogicalHwUnitId = LogicalHwUnitId.20_6 + 1;

  <bb 7> :
  if (LogicalHwUnitId <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  if (ErrorFound == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _7 = Adc_ValidateCheckGroupNotConversion (1, CoreId);
  if (_7 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  ValidState = 0;

  <bb 11> :
  D.6875 = ValidState;

  <bb 12> :
<L11>:
  return D.6875;

}


Adc_ValidateCheckGroupNotConversion (uint8 ServiceId, uint8 CoreId)
{
  Std_ReturnType ErrorFound;
  Adc_GroupType GroupId;
  Adc_GroupType GroupIter;
  Adc_StatusType Conversion;
  Std_ReturnType D.6885;

  <bb 2> :
  ErrorFound = 0;
  GroupIter = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->GroupsPtr;
  _4 = (unsigned int) GroupIter;
  _5 = _4 * 52;
  _6 = _3 + _5;
  GroupId = _6->GroupId;
  _7 = (int) GroupId;
  Conversion = Adc_axGroupStatus[_7].Conversion;
  if (Conversion != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  if (Conversion != 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Adc_ReportDetRuntimeError (ServiceId, 11);
  ErrorFound = 1;

  <bb 6> :
  GroupIter.21_8 = GroupIter;
  GroupIter = GroupIter.21_8 + 1;

  <bb 7> :
  _9 = (int) CoreId;
  _10 = Adc_apxCfgPtr[_9];
  _11 = _10->GroupCount;
  if (GroupIter < _11)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  D.6885 = ErrorFound;

  <bb 9> :
<L7>:
  return D.6885;

}


Adc_ValidateNotBusyNoPrio (Adc_GroupType Group, boolean Implicitly, uint8 CoreId)
{
  Adc_StatusType Conversion;
  Std_ReturnType ValidState;
  Std_ReturnType D.6912;

  <bb 2> :
  ValidState = 1;
  _1 = (int) Group;
  Conversion = Adc_axGroupStatus[_1].Conversion;
  _2 = ~Implicitly;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  if (Conversion != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Adc_ReportDetRuntimeError (2, 11);
  goto <bb 10>; [INV]

  <bb 5> :
  if (Implicitly != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 6> :
  if (Conversion != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  if (Conversion != 3)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Adc_ReportDetRuntimeError (2, 11);
  goto <bb 10>; [INV]

  <bb 9> :
  ValidState = 0;

  <bb 10> :
  D.6912 = ValidState;

  <bb 11> :
<L9>:
  return D.6912;

}


Adc_ValidateNotBusyNoQueue (Adc_HwUnitType Unit, uint8 ServiceId)
{
  const Adc_QueueIndexType NoGroupsInSwNormalQueue;
  Std_ReturnType ErrorFound;
  Std_ReturnType D.6879;

  <bb 2> :
  ErrorFound = 0;
  _1 = (int) Unit;
  NoGroupsInSwNormalQueue = Adc_axUnitStatus[_1].SwNormalQueueIndex;
  if (NoGroupsInSwNormalQueue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Adc_ReportDetRuntimeError (ServiceId, 11);
  ErrorFound = 1;

  <bb 4> :
  D.6879 = ErrorFound;

  <bb 5> :
<L2>:
  return D.6879;

}


Adc_EndValidateGloballCall (Std_ReturnType ValidCall, uint8 ServiceId, uint8 CoreId)
{
  <bb 2> :
  if (ValidCall == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (ServiceId == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _1 = (int) CoreId;
  Adc_aeGlobalState[_1] = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  _2 = (int) CoreId;
  Adc_aeGlobalState[_2] = 2;

  <bb 6> :
  return;

}


Adc_ValidateExtraParams (uint8 ServiceId, uint32 ErrorIdList, Adc_GroupType Group, uint8 CoreId)
{
  struct Adc_ValidationResultType ValidationStatus;
  Std_ReturnType D.6926;

  <bb 2> :
  ValidationStatus.EndValidations = 0;
  ValidationStatus.ValidParams = 0;
  _1 = ErrorIdList & 1;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = ValidationStatus.EndValidations;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Adc_ValidateBufferUninit (&ValidationStatus, ServiceId, Group);

  <bb 5> :
  _4 = ErrorIdList & 2;
  if (_4 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _5 = ValidationStatus.EndValidations;
  _6 = ~_5;
  if (_6 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Adc_ValidateTriggerSrc (&ValidationStatus, ServiceId, Group, CoreId);

  <bb 8> :
  _7 = ErrorIdList & 4;
  if (_7 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _8 = ValidationStatus.EndValidations;
  _9 = ~_8;
  if (_9 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  Adc_ValidateQueueNotFull (&ValidationStatus, ServiceId, Group, CoreId);

  <bb 11> :
  D.6926 = ValidationStatus.ValidParams;
  ValidationStatus = {CLOBBER};

  <bb 12> :
<L13>:
  return D.6926;

}


Adc_ValidateQueueNotFull (struct Adc_ValidationResultType * ReturnValue, uint8 ServiceId, Adc_GroupType Group, uint8 CoreId)
{
  Adc_HwUnitType LogicalHwUnitId;
  Adc_GroupType GroupIndex;

  <bb 2> :
  LogicalHwUnitId = 0;
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->GroupIdToIndexMapPtr;
  _4 = (unsigned int) Group;
  _5 = _4 * 2;
  _6 = _3 + _5;
  GroupIndex = *_6;
  _7 = (int) CoreId;
  _8 = Adc_apxCfgPtr[_7];
  _9 = _8->GroupsPtr;
  _10 = (unsigned int) GroupIndex;
  _11 = _10 * 52;
  _12 = _9 + _11;
  LogicalHwUnitId = _12->AdcLogicalUnitId;
  _13 = (int) ServiceId;
  if (_13 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
<L0>:
  _14 = (int) CoreId;
  _15 = Adc_apxCfgPtr[_14];
  _16 = _15->GroupsPtr;
  _17 = (unsigned int) GroupIndex;
  _18 = _17 * 52;
  _19 = _16 + _18;
  _20 = _19->Type;
  if (_20 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _21 = (int) LogicalHwUnitId;
  _22 = Adc_axUnitStatus[_21].SwNormalQueueIndex;
  if (_22 > 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Adc_ReportValidationError (ReturnValue, ServiceId, 32);

  <bb 6> :
  goto <bb 8>; [INV]

  <bb 7> :
<L5>:

  <bb 8> :
  return;

}


Adc_ValidateTriggerSrc (struct Adc_ValidationResultType * ReturnValue, uint8 ServiceId, Adc_GroupType Group, uint8 CoreId)
{
  unsigned int D.6934;
  unsigned int D.6933;
  Adc_GroupType GroupIndex;

  <bb 2> :
  _1 = (int) CoreId;
  _2 = Adc_apxCfgPtr[_1];
  _3 = _2->GroupIdToIndexMapPtr;
  _4 = (unsigned int) Group;
  _5 = _4 * 2;
  _6 = _3 + _5;
  GroupIndex = *_6;
  _7 = (int) ServiceId;
  D.6933 = (unsigned int) _7;
  D.6934 = D.6933 + 4294967294;
  if (D.6934 <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
<L0>:
  _8 = (int) CoreId;
  _9 = Adc_apxCfgPtr[_8];
  _10 = _9->GroupsPtr;
  _11 = (unsigned int) GroupIndex;
  _12 = _11 * 52;
  _13 = _10 + _12;
  _14 = _13->TriggerSource;
  if (_14 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Adc_ReportValidationError (ReturnValue, ServiceId, 23);

  <bb 5> :
  goto <bb 7>; [INV]

  <bb 6> :
<L4>:

  <bb 7> :
  return;

}


Adc_ValidateBufferUninit (struct Adc_ValidationResultType * ReturnValue, uint8 ServiceId, Adc_GroupType Group)
{
  <bb 2> :
  _1 = (int) ServiceId;
  if (_1 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
<L0>:
  _2 = (int) Group;
  _3 = Adc_axGroupStatus[_2].ResultsBufferPtr;
  if (_3 == 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Adc_ReportValidationError (ReturnValue, ServiceId, 25);

  <bb 5> :
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:

  <bb 7> :
  return;

}


Adc_ValidatePtr (uint8 ServiceId, const void * PtrVal)
{
  Std_ReturnType ValidPtr;
  Std_ReturnType D.6849;

  <bb 2> :
  ValidPtr = 0;
  if (PtrVal == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ValidPtr = 1;
  Adc_ReportDetError (ServiceId, 20);

  <bb 4> :
  D.6849 = ValidPtr;

  <bb 5> :
<L2>:
  return D.6849;

}


Adc_ValidatePtrInit (const struct Adc_ConfigType * ConfigPtr)
{
  Std_ReturnType ValidPtr;
  Std_ReturnType D.6810;

  <bb 2> :
  ValidPtr = 0;
  if (ConfigPtr == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ValidPtr = 1;
  Adc_ReportDetError (0, 20);

  <bb 4> :
  D.6810 = ValidPtr;

  <bb 5> :
<L2>:
  return D.6810;

}


Adc_ValidateGloballCall (uint8 ServiceId, uint8 CoreId)
{
  Std_ReturnType ValidState;
  Std_ReturnType D.6806;

  <bb 2> :
  ValidState = 1;
  _1 = (int) CoreId;
  _2 = Adc_aeGlobalState[_1];
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  if (ServiceId == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  ValidState = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  Adc_ReportDetError (ServiceId, 10);
  goto <bb 9>; [INV]

  <bb 6> :
  if (ServiceId == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Adc_ReportDetError (ServiceId, 13);
  goto <bb 9>; [INV]

  <bb 8> :
  ValidState = 0;

  <bb 9> :
  D.6806 = ValidState;

  <bb 10> :
<L9>:
  return D.6806;

}


Adc_ReportValidationError (struct Adc_ValidationResultType * Result, uint8 ServiceId, uint8 ErrorId)
{
  <bb 2> :
  Result->EndValidations = 1;
  Result->ValidParams = 1;
  Adc_ReportDetError (ServiceId, ErrorId);
  return;

}


Adc_ReportDetRuntimeError (uint8 ServiceId, uint8 ErrorId)
{
  <bb 2> :
  Det_ReportRuntimeError (123, 0, ServiceId, ErrorId);
  return;

}


Adc_ReportDetError (uint8 ServiceId, uint8 ErrorId)
{
  <bb 2> :
  Det_ReportError (123, 0, ServiceId, ErrorId);
  return;

}


