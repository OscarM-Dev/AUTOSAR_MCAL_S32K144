Symbol table:

OsIf_GetElapsed/80 (OsIf_GetElapsed) @069c8380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Sched_startScheduler/67 
  Calls: 
OsIf_GetCounter/79 (OsIf_GetCounter) @069c8ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Sched_startScheduler/67 
  Calls: 
OsIf_MicrosToTicks/78 (OsIf_MicrosToTicks) @069c8e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Sched_startScheduler/67 
  Calls: 
index.0/77 (index) @06a22af8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Sched_registerTimer/62 (read) Sched_registerTimer/62 (read) Sched_registerTimer/62 (read) Sched_registerTimer/62 (read) Sched_registerTimer/62 (read) Sched_registerTimer/62 (read) Sched_registerTimer/62 (write) Sched_registerTimer/62 (read) Sched_registerTimer/62 (write) 
  Availability: available
  Varpool flags: initialized
first_call.1/76 (first_call) @06a22a68
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Sched_registerTimer/62 (read) Sched_registerTimer/62 (write) 
  Availability: available
  Varpool flags: initialized
registered_IDs.2/75 (registered_IDs) @06a221f8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Sched_confirmTimer_register/61 (write) Sched_confirmTimer_register/61 (read) 
  Availability: available
  Varpool flags:
index.3/74 (index) @06a221b0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Sched_confirmTimer_register/61 (read) Sched_confirmTimer_register/61 (read) Sched_confirmTimer_register/61 (write) Sched_confirmTimer_register/61 (read) Sched_confirmTimer_register/61 (write) 
  Availability: available
  Varpool flags: initialized
index.4/73 (index) @06a1cc60
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Sched_verifyTask_firstexe/60 (read) Sched_verifyTask_firstexe/60 (read) Sched_verifyTask_firstexe/60 (read) Sched_verifyTask_firstexe/60 (write) Sched_verifyTask_firstexe/60 (read) Sched_verifyTask_firstexe/60 (write) 
  Availability: available
  Varpool flags: initialized
tasks_func_add.5/72 (tasks_func_add) @06a1cc18
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Sched_verifyTask_firstexe/60 (read) Sched_verifyTask_firstexe/60 (write) 
  Availability: available
  Varpool flags:
index.6/71 (index) @069c3828
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Sched_registerTask/56 (read) Sched_registerTask/56 (read) Sched_registerTask/56 (read) Sched_registerTask/56 (read) Sched_registerTask/56 (read) Sched_registerTask/56 (read) Sched_registerTask/56 (read) Sched_registerTask/56 (write) Sched_registerTask/56 (read) Sched_registerTask/56 (write) 
  Availability: available
  Varpool flags: initialized
first_call.7/70 (first_call) @069c3798
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Sched_registerTask/56 (read) Sched_registerTask/56 (write) 
  Availability: available
  Varpool flags: initialized
registered_IDs.8/69 (registered_IDs) @069b7ea0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Sched_confirmTask_register/55 (write) Sched_confirmTask_register/55 (read) 
  Availability: available
  Varpool flags:
index.9/68 (index) @069b7e58
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Sched_confirmTask_register/55 (read) Sched_confirmTask_register/55 (read) Sched_confirmTask_register/55 (write) Sched_confirmTask_register/55 (read) Sched_confirmTask_register/55 (write) 
  Availability: available
  Varpool flags: initialized
Sched_startScheduler/67 (Sched_startScheduler) @069b39a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_GetBit_u32u8_u8/2 Sched_getTimer/65 Bfx_GetBit_u32u8_u8/2 OsIf_GetElapsed/80 Sched_verifyTask_firstexe/60 Bfx_GetBit_u32u8_u8/2 OsIf_GetCounter/79 OsIf_MicrosToTicks/78 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Sched_reloadTimer/66 (Sched_reloadTimer) @069b3700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Sched_startTimer/63 Sched_confirmTimer_register/61 
Sched_getTimer/65 (Sched_getTimer) @069b3460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Sched_startScheduler/67 
  Calls: Sched_confirmTimer_register/61 
Sched_stopTimer/64 (Sched_stopTimer) @069b31c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_ClrBit_u32u8/1 Sched_confirmTimer_register/61 
Sched_startTimer/63 (Sched_startTimer) @069a2d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Sched_reloadTimer/66 
  Calls: Bfx_SetBit_u32u8/0 Sched_confirmTimer_register/61 
Sched_registerTimer/62 (Sched_registerTimer) @069a27e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: first_call.1/76 (read) first_call.1/76 (write) index.0/77 (read) index.0/77 (read) index.0/77 (read) index.0/77 (read) index.0/77 (read) index.0/77 (read) index.0/77 (write) index.0/77 (read) index.0/77 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Sched_confirmTimer_register/61 Bfx_ClrBit_u32u8/1 Sched_initBuffer/54 
Sched_confirmTimer_register/61 (Sched_confirmTimer_register) @069a22a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: index.3/74 (read) registered_IDs.2/75 (write) index.3/74 (read) index.3/74 (write) registered_IDs.2/75 (read) index.3/74 (read) index.3/74 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Sched_reloadTimer/66 Sched_getTimer/65 Sched_stopTimer/64 Sched_startTimer/63 Sched_registerTimer/62 
  Calls: 
Sched_verifyTask_firstexe/60 (Sched_verifyTask_firstexe) @069a2ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: tasks_func_add.5/72 (read) index.4/73 (read) index.4/73 (read) tasks_func_add.5/72 (write) index.4/73 (read) index.4/73 (write) index.4/73 (read) index.4/73 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Sched_startScheduler/67 
  Calls: 
Sched_periodTask/59 (Sched_periodTask) @069a2c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Sched_confirmTask_register/55 
Sched_startTask/58 (Sched_startTask) @069a29a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_SetBit_u32u8/0 Sched_confirmTask_register/55 
Sched_stopTask/57 (Sched_stopTask) @069a2700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_ClrBit_u32u8/1 Sched_confirmTask_register/55 
Sched_registerTask/56 (Sched_registerTask) @069a2460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: first_call.7/70 (read) first_call.7/70 (write) index.6/71 (read) index.6/71 (read) index.6/71 (read) index.6/71 (read) index.6/71 (read) index.6/71 (read) index.6/71 (read) index.6/71 (write) index.6/71 (read) index.6/71 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Sched_confirmTask_register/55 Bfx_ClrBit_u32u8/1 Sched_initBuffer/54 
Sched_confirmTask_register/55 (Sched_confirmTask_register) @069a21c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: index.9/68 (read) registered_IDs.8/69 (write) index.9/68 (read) index.9/68 (write) registered_IDs.8/69 (read) index.9/68 (read) index.9/68 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Sched_periodTask/59 Sched_startTask/58 Sched_stopTask/57 Sched_registerTask/56 
  Calls: 
Sched_initBuffer/54 (Sched_initBuffer) @06998ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Sched_registerTimer/62 Sched_registerTask/56 
  Calls: 
Sched_initScheduler/53 (Sched_initScheduler) @06998e00
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Bfx_GetBit_u32u8_u8/2 (Bfx_GetBit_u32u8_u8) @0685c2a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Sched_startScheduler/67 Sched_startScheduler/67 Sched_startScheduler/67 
  Calls: 
Bfx_ClrBit_u32u8/1 (Bfx_ClrBit_u32u8) @0685c000
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Sched_stopTimer/64 Sched_registerTimer/62 Sched_stopTask/57 Sched_registerTask/56 
  Calls: 
Bfx_SetBit_u32u8/0 (Bfx_SetBit_u32u8) @0684cd20
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Sched_startTimer/63 Sched_startTask/58 
  Calls: 
Sched_startScheduler (struct Sched_Scheduler * scheduler)
{
  uint8_t new_task;
  uint8_t i;
  uint32_t elapsed_time;
  uint32_t count_value;
  uint32_t tick_value;
  long unsigned int D.6760;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  struct Sched_Task * _4;
  unsigned int _5;
  unsigned int _6;
  struct Sched_Task * _7;
  unsigned char i.37_8;
  unsigned char _9;
  struct Sched_Timer * _10;
  unsigned int _11;
  unsigned int _12;
  struct Sched_Timer * _13;
  struct Sched_Timer * _14;
  unsigned int _15;
  unsigned int _16;
  struct Sched_Timer * _17;
  long unsigned int _18;
  unsigned char i.38_19;
  unsigned char _20;
  long unsigned int _21;
  _Bool _22;
  unsigned char _23;
  struct Sched_Task * _24;
  unsigned int _25;
  unsigned int _26;
  struct Sched_Task * _27;
  void (*<T520>) (void) _28;
  unsigned char i.39_29;
  unsigned char _30;
  long unsigned int _31;
  _Bool _32;
  struct Sched_Timer * _33;
  unsigned int _34;
  unsigned int _35;
  struct Sched_Timer * _36;
  long unsigned int _37;
  long unsigned int _38;
  struct Sched_Timer * _39;
  unsigned int _40;
  unsigned int _41;
  struct Sched_Timer * _42;
  long unsigned int _43;
  unsigned char _44;
  long unsigned int _45;
  struct Sched_Timer * _46;
  unsigned int _47;
  unsigned int _48;
  struct Sched_Timer * _49;
  void (*<T520>) (void) _50;
  unsigned char i.40_51;
  unsigned char _52;
  struct Sched_Task * _53;
  unsigned int _54;
  unsigned int _55;
  struct Sched_Task * _56;
  long unsigned int _57;
  long unsigned int _58;
  struct Sched_Task * _59;
  unsigned int _60;
  unsigned int _61;
  struct Sched_Task * _62;
  long unsigned int _63;
  struct Sched_Task * _64;
  unsigned int _65;
  unsigned int _66;
  struct Sched_Task * _67;
  long unsigned int _68;
  struct Sched_Task * _69;
  unsigned int _70;
  unsigned int _71;
  struct Sched_Task * _72;
  long unsigned int _73;
  long unsigned int _74;
  _Bool _75;
  struct Sched_Task * _76;
  unsigned int _77;
  unsigned int _78;
  struct Sched_Task * _79;
  void (*<T520>) (void) _80;
  struct Sched_Task * _81;
  unsigned int _82;
  unsigned int _83;
  struct Sched_Task * _84;
  unsigned char i.41_85;
  unsigned char _86;
  long unsigned int _117;

  <bb 2> :
  _1 = scheduler_105(D)->tick;
  _2 = _1 * 1000;
  tick_value_107 = OsIf_MicrosToTicks (_2, 1);
  _3 = OsIf_GetCounter (1);
  count_value = _3;
  elapsed_time_110 = 0;
  i_111 = 0;
  new_task_112 = 0;
  i_113 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _4 = scheduler_105(D)->taskPtr;
  _5 = (unsigned int) i_89;
  _6 = _5 * 16;
  _7 = _4 + _6;
  _7->elapsed = 0;
  i.37_8 = i_89;
  i_140 = i.37_8 + 1;

  <bb 4> :
  # i_89 = PHI <i_113(2), i_140(3)>
  _9 = scheduler_105(D)->tasks;
  if (i_89 < _9)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  i_114 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  _10 = scheduler_105(D)->timerPtr;
  _11 = (unsigned int) i_90;
  _12 = _11 * 12;
  _13 = _10 + _12;
  _14 = scheduler_105(D)->timerPtr;
  _15 = (unsigned int) i_90;
  _16 = _15 * 12;
  _17 = _14 + _16;
  _18 = _13->timeout;
  _17->count = _18;
  i.38_19 = i_90;
  i_138 = i.38_19 + 1;

  <bb 7> :
  # i_90 = PHI <i_114(5), i_138(6)>
  _20 = scheduler_105(D)->timers;
  if (i_90 < _20)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  i_115 = 0;
  goto <bb 13>; [INV]

  <bb 9> :
  _21 = scheduler_105(D)->tasks_startFlags;
  _22 = Bfx_GetBit_u32u8_u8 (_21, i_91);
  if (_22 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _23 = i_91 + 1;
  new_task_134 = Sched_verifyTask_firstexe (scheduler_105(D), _23);
  if (new_task_134 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _24 = scheduler_105(D)->taskPtr;
  _25 = (unsigned int) i_91;
  _26 = _25 * 16;
  _27 = _24 + _26;
  _28 = _27->initFunc;
  _28 ();

  <bb 12> :
  i.39_29 = i_91;
  i_136 = i.39_29 + 1;

  <bb 13> :
  # i_91 = PHI <i_115(8), i_136(12)>
  _30 = scheduler_105(D)->tasks;
  if (i_91 < _30)
    goto <bb 9>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  # elapsed_time_87 = PHI <elapsed_time_110(13), elapsed_time_88(28)>
  _117 = OsIf_GetElapsed (&count_value, 1);
  elapsed_time_118 = _117 + elapsed_time_87;
  if (elapsed_time_118 >= tick_value_107)
    goto <bb 15>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 15> :
  i_119 = 0;
  goto <bb 20>; [INV]

  <bb 16> :
  _31 = scheduler_105(D)->timers_startFlags;
  _32 = Bfx_GetBit_u32u8_u8 (_31, i_92);
  if (_32 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 17> :
  _33 = scheduler_105(D)->timerPtr;
  _34 = (unsigned int) i_92;
  _35 = _34 * 12;
  _36 = _33 + _35;
  _37 = _36->count;
  _38 = scheduler_105(D)->tick;
  _39 = scheduler_105(D)->timerPtr;
  _40 = (unsigned int) i_92;
  _41 = _40 * 12;
  _42 = _39 + _41;
  _43 = _37 - _38;
  _42->count = _43;
  _44 = i_92 + 1;
  _45 = Sched_getTimer (scheduler_105(D), _44);
  if (_45 == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 18> :
  _46 = scheduler_105(D)->timerPtr;
  _47 = (unsigned int) i_92;
  _48 = _47 * 12;
  _49 = _46 + _48;
  _50 = _49->callbackPtr;
  _50 ();

  <bb 19> :
  i.40_51 = i_92;
  i_131 = i.40_51 + 1;

  <bb 20> :
  # i_92 = PHI <i_119(15), i_131(19)>
  _52 = scheduler_105(D)->timers;
  if (i_92 < _52)
    goto <bb 16>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  i_120 = 0;
  goto <bb 26>; [INV]

  <bb 22> :
  _53 = scheduler_105(D)->taskPtr;
  _54 = (unsigned int) i_93;
  _55 = _54 * 16;
  _56 = _53 + _55;
  _57 = _56->elapsed;
  _58 = scheduler_105(D)->tick;
  _59 = scheduler_105(D)->taskPtr;
  _60 = (unsigned int) i_93;
  _61 = _60 * 16;
  _62 = _59 + _61;
  _63 = _57 + _58;
  _62->elapsed = _63;
  _64 = scheduler_105(D)->taskPtr;
  _65 = (unsigned int) i_93;
  _66 = _65 * 16;
  _67 = _64 + _66;
  _68 = _67->elapsed;
  _69 = scheduler_105(D)->taskPtr;
  _70 = (unsigned int) i_93;
  _71 = _70 * 16;
  _72 = _69 + _71;
  _73 = _72->period;
  if (_68 >= _73)
    goto <bb 23>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 23> :
  _74 = scheduler_105(D)->tasks_startFlags;
  _75 = Bfx_GetBit_u32u8_u8 (_74, i_93);
  if (_75 != 0)
    goto <bb 24>; [INV]
  else
    goto <bb 25>; [INV]

  <bb 24> :
  _76 = scheduler_105(D)->taskPtr;
  _77 = (unsigned int) i_93;
  _78 = _77 * 16;
  _79 = _76 + _78;
  _80 = _79->taskFunc;
  _80 ();
  _81 = scheduler_105(D)->taskPtr;
  _82 = (unsigned int) i_93;
  _83 = _82 * 16;
  _84 = _81 + _83;
  _84->elapsed = 0;

  <bb 25> :
  i.41_85 = i_93;
  i_126 = i.41_85 + 1;

  <bb 26> :
  # i_93 = PHI <i_120(21), i_126(25)>
  _86 = scheduler_105(D)->tasks;
  if (i_93 < _86)
    goto <bb 22>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  elapsed_time_121 = 0;

  <bb 28> :
  # elapsed_time_88 = PHI <elapsed_time_118(14), elapsed_time_121(27)>
  goto <bb 14>; [INV]

}


Sched_reloadTimer (struct Sched_Scheduler * scheduler, uint8_t timer, uint32_t timeout)
{
  uint8_t status;
  uint8_t D.6754;
  unsigned char _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  struct Sched_Timer * _6;
  unsigned int _7;
  unsigned int _8;
  sizetype _9;
  struct Sched_Timer * _10;
  struct Sched_Timer * _11;
  unsigned int _12;
  unsigned int _13;
  sizetype _14;
  struct Sched_Timer * _15;
  uint8_t _35;

  <bb 2> :
  status_22 = 0;
  if (timer_23(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  _1 = scheduler_25(D)->timers;
  if (timer_23(D) <= _1)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 4> :
  _2 = Sched_confirmTimer_register (1, timer_23(D));
  if (_2 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  _3 = scheduler_25(D)->tick;
  if (timeout_28(D) >= _3)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _4 = scheduler_25(D)->tick;
  _5 = timeout_28(D) % _4;
  if (_5 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _6 = scheduler_25(D)->timerPtr;
  _7 = (unsigned int) timer_23(D);
  _8 = _7 * 12;
  _9 = _8 + 4294967284;
  _10 = _6 + _9;
  _10->timeout = timeout_28(D);
  _11 = scheduler_25(D)->timerPtr;
  _12 = (unsigned int) timer_23(D);
  _13 = _12 * 12;
  _14 = _13 + 4294967284;
  _15 = _11 + _14;
  _15->count = timeout_28(D);
  Sched_startTimer (scheduler_25(D), timer_23(D));
  status_32 = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  status_33 = 0;

  <bb 9> :
  # status_16 = PHI <status_32(7), status_33(8)>
  goto <bb 11>; [INV]

  <bb 10> :
  status_27 = 0;

  <bb 11> :
  # status_17 = PHI <status_16(9), status_27(10)>
  goto <bb 13>; [INV]

  <bb 12> :
  status_34 = 0;

  <bb 13> :
  # status_18 = PHI <status_17(11), status_34(12)>
  _35 = status_18;

  <bb 14> :
<L11>:
  return _35;

}


Sched_getTimer (struct Sched_Scheduler * scheduler, uint8_t timer)
{
  uint32_t counter_value;
  uint32_t D.6741;
  unsigned char _1;
  unsigned char _2;
  struct Sched_Timer * _3;
  unsigned int _4;
  unsigned int _5;
  sizetype _6;
  struct Sched_Timer * _7;
  uint32_t _19;

  <bb 2> :
  counter_value_11 = 0;
  if (timer_12(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _1 = scheduler_14(D)->timers;
  if (timer_12(D) <= _1)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _2 = Sched_confirmTimer_register (1, timer_12(D));
  if (_2 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _3 = scheduler_14(D)->timerPtr;
  _4 = (unsigned int) timer_12(D);
  _5 = _4 * 12;
  _6 = _5 + 4294967284;
  _7 = _3 + _6;
  counter_value_17 = _7->count;
  goto <bb 7>; [INV]

  <bb 6> :
  counter_value_16 = 0;

  <bb 7> :
  # counter_value_8 = PHI <counter_value_17(5), counter_value_16(6)>
  goto <bb 9>; [INV]

  <bb 8> :
  counter_value_18 = 0;

  <bb 9> :
  # counter_value_9 = PHI <counter_value_8(7), counter_value_18(8)>
  _19 = counter_value_9;

  <bb 10> :
<L7>:
  return _19;

}


Sched_stopTimer (struct Sched_Scheduler * scheduler, uint8_t timer)
{
  uint8_t status;
  uint8_t D.6732;
  unsigned char _1;
  unsigned char _2;
  uint32_t * _3;
  unsigned char _4;
  uint8_t _18;

  <bb 2> :
  status_9 = 0;
  if (timer_10(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _1 = scheduler_12(D)->timers;
  if (timer_10(D) <= _1)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _2 = Sched_confirmTimer_register (1, timer_10(D));
  if (_2 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _3 = &scheduler_12(D)->timers_startFlags;
  _4 = timer_10(D) + 255;
  Bfx_ClrBit_u32u8 (_3, _4);
  status_16 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  status_14 = 0;

  <bb 7> :
  # status_5 = PHI <status_16(5), status_14(6)>
  goto <bb 9>; [INV]

  <bb 8> :
  status_17 = 0;

  <bb 9> :
  # status_6 = PHI <status_5(7), status_17(8)>
  _18 = status_6;

  <bb 10> :
<L7>:
  return _18;

}


Sched_startTimer (struct Sched_Scheduler * scheduler, uint8_t timer)
{
  uint8_t status;
  uint8_t D.6723;
  unsigned char _1;
  unsigned char _2;
  uint32_t * _3;
  unsigned char _4;
  struct Sched_Timer * _5;
  unsigned int _6;
  unsigned int _7;
  sizetype _8;
  struct Sched_Timer * _9;
  long unsigned int _10;
  struct Sched_Timer * _11;
  unsigned int _12;
  unsigned int _13;
  sizetype _14;
  struct Sched_Timer * _15;
  struct Sched_Timer * _16;
  unsigned int _17;
  unsigned int _18;
  sizetype _19;
  struct Sched_Timer * _20;
  long unsigned int _21;
  uint8_t _37;

  <bb 2> :
  status_27 = 0;
  if (timer_28(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  _1 = scheduler_30(D)->timers;
  if (timer_28(D) <= _1)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 4> :
  _2 = Sched_confirmTimer_register (1, timer_28(D));
  if (_2 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _3 = &scheduler_30(D)->timers_startFlags;
  _4 = timer_28(D) + 255;
  Bfx_SetBit_u32u8 (_3, _4);
  _5 = scheduler_30(D)->timerPtr;
  _6 = (unsigned int) timer_28(D);
  _7 = _6 * 12;
  _8 = _7 + 4294967284;
  _9 = _5 + _8;
  _10 = _9->count;
  if (_10 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _11 = scheduler_30(D)->timerPtr;
  _12 = (unsigned int) timer_28(D);
  _13 = _12 * 12;
  _14 = _13 + 4294967284;
  _15 = _11 + _14;
  _16 = scheduler_30(D)->timerPtr;
  _17 = (unsigned int) timer_28(D);
  _18 = _17 * 12;
  _19 = _18 + 4294967284;
  _20 = _16 + _19;
  _21 = _15->timeout;
  _20->count = _21;

  <bb 7> :
  status_35 = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  status_32 = 0;

  <bb 9> :
  # status_22 = PHI <status_35(7), status_32(8)>
  goto <bb 11>; [INV]

  <bb 10> :
  status_36 = 0;

  <bb 11> :
  # status_23 = PHI <status_22(9), status_36(10)>
  _37 = status_23;

  <bb 12> :
<L9>:
  return _37;

}


Sched_registerTimer (struct Sched_Scheduler * scheduler, uint32_t timeout, void (*<T520>) (void) callbackPtr)
{
  uint8_t new_timer;
  uint8_t i;
  uint8_t timer_id;
  static uint8_t first_call = 1;
  static uint8_t index = 0;
  uint8_t D.6712;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char first_call.27_4;
  struct Sched_Timer * _5;
  unsigned int _6;
  unsigned int _7;
  struct Sched_Timer * _8;
  void (*<T520>) (void) _9;
  _Bool _10;
  unsigned char i.28_11;
  unsigned char _12;
  struct Sched_Timer * _13;
  unsigned char index.29_14;
  unsigned int _15;
  unsigned int _16;
  struct Sched_Timer * _17;
  struct Sched_Timer * _18;
  unsigned char index.30_19;
  unsigned int _20;
  unsigned int _21;
  struct Sched_Timer * _22;
  struct Sched_Timer * _23;
  unsigned char index.31_24;
  unsigned int _25;
  unsigned int _26;
  struct Sched_Timer * _27;
  uint32_t * _28;
  unsigned char index.32_29;
  unsigned char index.33_30;
  unsigned char index.34_31;
  unsigned char index.35_32;
  unsigned char _33;
  unsigned char _34;
  unsigned char index.36_35;
  uint8_t _68;

  <bb 2> :
  timer_id_45 = 0;
  i_46 = 0;
  new_timer_47 = 1;
  _1 = scheduler_49(D)->tick;
  if (timeout_50(D) >= _1)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 3> :
  _2 = scheduler_49(D)->tick;
  _3 = timeout_50(D) % _2;
  if (_3 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 4> :
  first_call.27_4 = first_call;
  if (first_call.27_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Sched_initBuffer (scheduler_49(D), 1);
  first_call = 0;

  <bb 6> :
  i_53 = 0;
  goto <bb 11>; [INV]

  <bb 7> :
  _5 = scheduler_49(D)->timerPtr;
  _6 = (unsigned int) i_39;
  _7 = _6 * 12;
  _8 = _5 + _7;
  _9 = _8->callbackPtr;
  if (callbackPtr_54(D) != _9)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _10 = new_timer_40 != 0;
  new_timer_57 = (uint8_t) _10;
  goto <bb 10>; [INV]

  <bb 9> :
  new_timer_55 = 0;
  timer_id_56 = 0;
  goto <bb 12>; [INV]

  <bb 10> :
  i.28_11 = i_39;
  i_58 = i.28_11 + 1;

  <bb 11> :
  # i_39 = PHI <i_53(6), i_58(10)>
  # new_timer_40 = PHI <new_timer_47(6), new_timer_57(10)>
  _12 = scheduler_49(D)->timers;
  if (i_39 < _12)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # timer_id_36 = PHI <timer_id_56(9), timer_id_45(11)>
  # new_timer_41 = PHI <new_timer_55(9), new_timer_40(11)>
  if (new_timer_41 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _13 = scheduler_49(D)->timerPtr;
  index.29_14 = index;
  _15 = (unsigned int) index.29_14;
  _16 = _15 * 12;
  _17 = _13 + _16;
  _17->timeout = timeout_50(D);
  _18 = scheduler_49(D)->timerPtr;
  index.30_19 = index;
  _20 = (unsigned int) index.30_19;
  _21 = _20 * 12;
  _22 = _18 + _21;
  _22->count = timeout_50(D);
  _23 = scheduler_49(D)->timerPtr;
  index.31_24 = index;
  _25 = (unsigned int) index.31_24;
  _26 = _25 * 12;
  _27 = _23 + _26;
  _27->callbackPtr = callbackPtr_54(D);
  _28 = &scheduler_49(D)->timers_startFlags;
  index.32_29 = index;
  Bfx_ClrBit_u32u8 (_28, index.32_29);
  index.33_30 = index;
  timer_id_63 = index.33_30 + 1;
  Sched_confirmTimer_register (0, timer_id_63);
  index.34_31 = index;
  index.35_32 = index.34_31;
  _33 = index.35_32 + 1;
  index = _33;
  _34 = scheduler_49(D)->timers;
  index.36_35 = index;
  if (_34 <= index.36_35)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  index = 0;

  <bb 15> :
  # timer_id_37 = PHI <timer_id_36(12), timer_id_63(13), timer_id_63(14)>
  goto <bb 17>; [INV]

  <bb 16> :
  timer_id_67 = 0;

  <bb 17> :
  # timer_id_38 = PHI <timer_id_37(15), timer_id_67(16)>
  _68 = timer_id_38;

  <bb 18> :
<L16>:
  return _68;

}


Sched_confirmTimer_register (uint8_t operation, uint8_t timer)
{
  uint8_t status;
  static uint8_t index = 0;
  static uint8_t registered_IDs[2];
  uint8_t D.6697;
  int _1;
  unsigned char index.23_2;
  int _3;
  unsigned char index.24_4;
  unsigned char index.25_5;
  unsigned char _6;
  int _7;
  int _8;
  unsigned char _9;
  unsigned char index.26_10;
  uint8_t _26;

  <bb 2> :
  status_15 = 0;
  _1 = (int) operation_16(D);
  switch (_1) <default: <L5> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  index.23_2 = index;
  _3 = (int) index.23_2;
  registered_IDs[_3] = timer_17(D);
  index.24_4 = index;
  index.25_5 = index.24_4;
  _6 = index.25_5 + 1;
  index = _6;
  status_23 = 1;
  goto <bb 9>; [INV]

  <bb 4> :
<L1>:
  _7 = (int) timer_17(D);
  _8 = _7 + -1;
  _9 = registered_IDs[_8];
  if (timer_17(D) != _9)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  status_20 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  status_19 = 1;

  <bb 7> :
  # status_11 = PHI <status_20(5), status_19(6)>
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:
  status_24 = 0;

  <bb 9> :
  # status_12 = PHI <status_23(3), status_11(7), status_24(8)>
  index.26_10 = index;
  if (index.26_10 > 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  index = 0;

  <bb 11> :
  _26 = status_12;

  <bb 12> :
<L9>:
  return _26;

}


Sched_verifyTask_firstexe (struct Sched_Scheduler * scheduler, uint8_t task)
{
  uint8_t status;
  uint8_t i;
  static uint8_t index = 0;
  static uint64_t tasks_func_add[32];
  uint8_t D.6690;
  struct Sched_Task * _1;
  sizetype _2;
  sizetype _3;
  sizetype _4;
  struct Sched_Task * _5;
  void (*<T520>) (void) _6;
  long unsigned int _7;
  long long unsigned int _8;
  int _9;
  long long unsigned int _10;
  _Bool _11;
  unsigned char i.17_12;
  unsigned char index.18_13;
  struct Sched_Task * _14;
  sizetype _15;
  sizetype _16;
  sizetype _17;
  struct Sched_Task * _18;
  void (*<T520>) (void) _19;
  long unsigned int _20;
  unsigned char index.19_21;
  int _22;
  long long unsigned int _23;
  unsigned char index.20_24;
  unsigned char index.21_25;
  unsigned char _26;
  unsigned char index.22_27;
  uint8_t _44;

  <bb 2> :
  i_32 = 0;
  status_33 = 1;
  i_34 = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = scheduler_36(D)->taskPtr;
  _2 = (sizetype) task_37(D);
  _3 = _2 + 268435455;
  _4 = _3 * 16;
  _5 = _1 + _4;
  _6 = _5->taskFunc;
  _7 = (long unsigned int) _6;
  _8 = (long long unsigned int) _7;
  _9 = (int) i_28;
  _10 = tasks_func_add[_9];
  if (_8 != _10)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _11 = status_29 != 0;
  status_39 = (uint8_t) _11;
  goto <bb 6>; [INV]

  <bb 5> :
  status_38 = 0;
  goto <bb 8>; [INV]

  <bb 6> :
  i.17_12 = i_28;
  i_40 = i.17_12 + 1;

  <bb 7> :
  # i_28 = PHI <i_34(2), i_40(6)>
  # status_29 = PHI <status_33(2), status_39(6)>
  index.18_13 = index;
  if (i_28 <= index.18_13)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # status_30 = PHI <status_38(5), status_29(7)>
  if (status_30 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _14 = scheduler_36(D)->taskPtr;
  _15 = (sizetype) task_37(D);
  _16 = _15 + 268435455;
  _17 = _16 * 16;
  _18 = _14 + _17;
  _19 = _18->taskFunc;
  _20 = (long unsigned int) _19;
  index.19_21 = index;
  _22 = (int) index.19_21;
  _23 = (long long unsigned int) _20;
  tasks_func_add[_22] = _23;
  index.20_24 = index;
  index.21_25 = index.20_24;
  _26 = index.21_25 + 1;
  index = _26;
  index.22_27 = index;
  if (index.22_27 > 31)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  index = 31;

  <bb 11> :
  _44 = status_30;

  <bb 12> :
<L10>:
  return _44;

}


Sched_periodTask (struct Sched_Scheduler * scheduler, uint8_t task, uint32_t period)
{
  uint8_t status;
  uint8_t D.6681;
  unsigned char _1;
  unsigned char _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  struct Sched_Task * _6;
  sizetype _7;
  sizetype _8;
  sizetype _9;
  struct Sched_Task * _10;
  uint8_t _28;

  <bb 2> :
  status_17 = 0;
  if (task_18(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 3> :
  _1 = scheduler_20(D)->tasks;
  if (task_18(D) <= _1)
    goto <bb 4>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 4> :
  _2 = Sched_confirmTask_register (1, task_18(D));
  if (_2 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 5> :
  _3 = scheduler_20(D)->tick;
  if (period_23(D) >= _3)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _4 = scheduler_20(D)->tick;
  _5 = period_23(D) % _4;
  if (_5 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _6 = scheduler_20(D)->taskPtr;
  _7 = (sizetype) task_18(D);
  _8 = _7 + 268435455;
  _9 = _8 * 16;
  _10 = _6 + _9;
  _10->period = period_23(D);
  status_25 = 1;
  goto <bb 9>; [INV]

  <bb 8> :
  status_26 = 0;

  <bb 9> :
  # status_11 = PHI <status_25(7), status_26(8)>
  goto <bb 11>; [INV]

  <bb 10> :
  status_22 = 0;

  <bb 11> :
  # status_12 = PHI <status_11(9), status_22(10)>
  goto <bb 13>; [INV]

  <bb 12> :
  status_27 = 0;

  <bb 13> :
  # status_13 = PHI <status_12(11), status_27(12)>
  _28 = status_13;

  <bb 14> :
<L11>:
  return _28;

}


Sched_startTask (struct Sched_Scheduler * scheduler, uint8_t task)
{
  uint8_t status;
  uint8_t D.6668;
  unsigned char _1;
  unsigned char _2;
  uint32_t * _3;
  unsigned char _4;
  uint8_t _18;

  <bb 2> :
  status_9 = 0;
  if (task_10(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _1 = scheduler_12(D)->tasks;
  if (task_10(D) <= _1)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _2 = Sched_confirmTask_register (1, task_10(D));
  if (_2 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _3 = &scheduler_12(D)->tasks_startFlags;
  _4 = task_10(D) + 255;
  Bfx_SetBit_u32u8 (_3, _4);
  status_16 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  status_14 = 0;

  <bb 7> :
  # status_5 = PHI <status_16(5), status_14(6)>
  goto <bb 9>; [INV]

  <bb 8> :
  status_17 = 0;

  <bb 9> :
  # status_6 = PHI <status_5(7), status_17(8)>
  _18 = status_6;

  <bb 10> :
<L7>:
  return _18;

}


Sched_stopTask (struct Sched_Scheduler * scheduler, uint8_t task)
{
  uint8_t status;
  uint8_t D.6659;
  unsigned char _1;
  unsigned char _2;
  uint32_t * _3;
  unsigned char _4;
  uint8_t _18;

  <bb 2> :
  status_9 = 0;
  if (task_10(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _1 = scheduler_12(D)->tasks;
  if (task_10(D) <= _1)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _2 = Sched_confirmTask_register (1, task_10(D));
  if (_2 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _3 = &scheduler_12(D)->tasks_startFlags;
  _4 = task_10(D) + 255;
  Bfx_ClrBit_u32u8 (_3, _4);
  status_16 = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  status_14 = 0;

  <bb 7> :
  # status_5 = PHI <status_16(5), status_14(6)>
  goto <bb 9>; [INV]

  <bb 8> :
  status_17 = 0;

  <bb 9> :
  # status_6 = PHI <status_5(7), status_17(8)>
  _18 = status_6;

  <bb 10> :
<L7>:
  return _18;

}


Sched_registerTask (struct Sched_Scheduler * scheduler, void (*<T520>) (void) initPtr, void (*<T520>) (void) taskPtr, uint32_t period)
{
  uint8_t new_task;
  uint8_t i;
  uint8_t task_id;
  static uint8_t first_call = 1;
  static uint8_t index = 0;
  uint8_t D.6650;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  unsigned char first_call.6_4;
  struct Sched_Task * _5;
  unsigned int _6;
  unsigned int _7;
  struct Sched_Task * _8;
  void (*<T520>) (void) _9;
  _Bool _10;
  unsigned char i.7_11;
  unsigned char _12;
  struct Sched_Task * _13;
  unsigned char index.8_14;
  unsigned int _15;
  unsigned int _16;
  struct Sched_Task * _17;
  struct Sched_Task * _18;
  unsigned char index.9_19;
  unsigned int _20;
  unsigned int _21;
  struct Sched_Task * _22;
  struct Sched_Task * _23;
  unsigned char index.10_24;
  unsigned int _25;
  unsigned int _26;
  struct Sched_Task * _27;
  struct Sched_Task * _28;
  unsigned char index.11_29;
  unsigned int _30;
  unsigned int _31;
  struct Sched_Task * _32;
  uint32_t * _33;
  unsigned char index.12_34;
  unsigned char index.13_35;
  unsigned char index.14_36;
  unsigned char index.15_37;
  unsigned char _38;
  unsigned char _39;
  unsigned char index.16_40;
  uint8_t _75;

  <bb 2> :
  task_id_50 = 0;
  i_51 = 0;
  new_task_52 = 1;
  _1 = scheduler_54(D)->tick;
  if (period_55(D) >= _1)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 3> :
  _2 = scheduler_54(D)->tick;
  _3 = period_55(D) % _2;
  if (_3 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 4> :
  first_call.6_4 = first_call;
  if (first_call.6_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Sched_initBuffer (scheduler_54(D), 2);
  first_call = 0;

  <bb 6> :
  i_58 = 0;
  goto <bb 11>; [INV]

  <bb 7> :
  _5 = scheduler_54(D)->taskPtr;
  _6 = (unsigned int) i_44;
  _7 = _6 * 16;
  _8 = _5 + _7;
  _9 = _8->taskFunc;
  if (taskPtr_59(D) != _9)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _10 = new_task_45 != 0;
  new_task_62 = (uint8_t) _10;
  goto <bb 10>; [INV]

  <bb 9> :
  new_task_60 = 0;
  task_id_61 = 0;
  goto <bb 12>; [INV]

  <bb 10> :
  i.7_11 = i_44;
  i_63 = i.7_11 + 1;

  <bb 11> :
  # i_44 = PHI <i_58(6), i_63(10)>
  # new_task_45 = PHI <new_task_52(6), new_task_62(10)>
  _12 = scheduler_54(D)->tasks;
  if (i_44 < _12)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # task_id_41 = PHI <task_id_61(9), task_id_50(11)>
  # new_task_46 = PHI <new_task_60(9), new_task_45(11)>
  if (new_task_46 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _13 = scheduler_54(D)->taskPtr;
  index.8_14 = index;
  _15 = (unsigned int) index.8_14;
  _16 = _15 * 16;
  _17 = _13 + _16;
  _17->period = period_55(D);
  _18 = scheduler_54(D)->taskPtr;
  index.9_19 = index;
  _20 = (unsigned int) index.9_19;
  _21 = _20 * 16;
  _22 = _18 + _21;
  _22->elapsed = 0;
  _23 = scheduler_54(D)->taskPtr;
  index.10_24 = index;
  _25 = (unsigned int) index.10_24;
  _26 = _25 * 16;
  _27 = _23 + _26;
  _27->initFunc = initPtr_66(D);
  _28 = scheduler_54(D)->taskPtr;
  index.11_29 = index;
  _30 = (unsigned int) index.11_29;
  _31 = _30 * 16;
  _32 = _28 + _31;
  _32->taskFunc = taskPtr_59(D);
  _33 = &scheduler_54(D)->tasks_startFlags;
  index.12_34 = index;
  Bfx_ClrBit_u32u8 (_33, index.12_34);
  index.13_35 = index;
  task_id_70 = index.13_35 + 1;
  Sched_confirmTask_register (0, task_id_70);
  index.14_36 = index;
  index.15_37 = index.14_36;
  _38 = index.15_37 + 1;
  index = _38;
  _39 = scheduler_54(D)->tasks;
  index.16_40 = index;
  if (_39 <= index.16_40)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  index = 0;

  <bb 15> :
  # task_id_42 = PHI <task_id_41(12), task_id_70(13), task_id_70(14)>
  goto <bb 17>; [INV]

  <bb 16> :
  task_id_74 = 0;

  <bb 17> :
  # task_id_43 = PHI <task_id_42(15), task_id_74(16)>
  _75 = task_id_43;

  <bb 18> :
<L16>:
  return _75;

}


Sched_confirmTask_register (uint8_t operation, uint8_t task)
{
  uint8_t status;
  static uint8_t index = 0;
  static uint8_t registered_IDs[2];
  uint8_t D.6635;
  int _1;
  unsigned char index.2_2;
  int _3;
  unsigned char index.3_4;
  unsigned char index.4_5;
  unsigned char _6;
  int _7;
  int _8;
  unsigned char _9;
  unsigned char index.5_10;
  uint8_t _26;

  <bb 2> :
  status_15 = 0;
  _1 = (int) operation_16(D);
  switch (_1) <default: <L5> [INV], case 0: <L0> [INV], case 1: <L1> [INV]>

  <bb 3> :
<L0>:
  index.2_2 = index;
  _3 = (int) index.2_2;
  registered_IDs[_3] = task_17(D);
  index.3_4 = index;
  index.4_5 = index.3_4;
  _6 = index.4_5 + 1;
  index = _6;
  status_23 = 1;
  goto <bb 9>; [INV]

  <bb 4> :
<L1>:
  _7 = (int) task_17(D);
  _8 = _7 + -1;
  _9 = registered_IDs[_8];
  if (task_17(D) != _9)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  status_20 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  status_19 = 1;

  <bb 7> :
  # status_11 = PHI <status_20(5), status_19(6)>
  goto <bb 9>; [INV]

  <bb 8> :
<L5>:
  status_24 = 0;

  <bb 9> :
  # status_12 = PHI <status_23(3), status_11(7), status_24(8)>
  index.5_10 = index;
  if (index.5_10 > 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  index = 0;

  <bb 11> :
  _26 = status_12;

  <bb 12> :
<L9>:
  return _26;

}


Sched_initBuffer (struct Sched_Scheduler * scheduler, uint8_t buffer)
{
  uint8_t i;
  uint8_t status;
  uint8_t D.6628;
  int _1;
  struct Sched_Timer * _2;
  unsigned int _3;
  unsigned int _4;
  struct Sched_Timer * _5;
  unsigned char i.0_6;
  unsigned char _7;
  struct Sched_Task * _8;
  unsigned int _9;
  unsigned int _10;
  struct Sched_Task * _11;
  unsigned char i.1_12;
  unsigned char _13;
  uint8_t _34;

  <bb 2> :
  status_20 = 0;
  i_21 = 0;
  _1 = (int) buffer_22(D);
  switch (_1) <default: <L8> [INV], case 1: <L0> [INV], case 2: <L4> [INV]>

  <bb 3> :
<L0>:
  i_29 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  _2 = scheduler_25(D)->timerPtr;
  _3 = (unsigned int) i_15;
  _4 = _3 * 12;
  _5 = _2 + _4;
  _5->callbackPtr = 0B;
  i.0_6 = i_15;
  i_32 = i.0_6 + 1;

  <bb 5> :
  # i_15 = PHI <i_29(3), i_32(4)>
  _7 = scheduler_25(D)->timers;
  if (i_15 < _7)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  status_30 = 1;
  goto <bb 12>; [INV]

  <bb 7> :
<L4>:
  i_23 = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  _8 = scheduler_25(D)->taskPtr;
  _9 = (unsigned int) i_16;
  _10 = _9 * 16;
  _11 = _8 + _10;
  _11->taskFunc = 0B;
  i.1_12 = i_16;
  i_28 = i.1_12 + 1;

  <bb 9> :
  # i_16 = PHI <i_23(7), i_28(8)>
  _13 = scheduler_25(D)->tasks;
  if (i_16 < _13)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  status_26 = 1;
  goto <bb 12>; [INV]

  <bb 11> :
<L8>:
  status_33 = 0;

  <bb 12> :
  # status_14 = PHI <status_30(6), status_26(10), status_33(11)>
  _34 = status_14;

  <bb 13> :
<L10>:
  return _34;

}


Sched_initScheduler (struct Sched_Scheduler * scheduler, uint8_t n_tasks_c, uint8_t n_tasks_h, uint32_t tick, struct Sched_Task * buffer_ta, uint8_t n_timers_c, uint8_t n_timers_h, struct Sched_Timer * buffer_ti)
{
  uint8_t i;
  uint8_t status;
  uint8_t D.6626;
  unsigned char _1;
  _Bool _2;
  unsigned char _3;
  _Bool _4;
  uint8_t _33;

  <bb 2> :
  status_9 = 1;
  i_10 = 0;
  scheduler_12(D)->tasksCount = n_tasks_c_13(D);
  scheduler_12(D)->tick = tick_15(D);
  scheduler_12(D)->taskPtr = buffer_ta_17(D);
  _1 = scheduler_12(D)->tasksCount;
  if (n_tasks_h_19(D) <= _1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  scheduler_12(D)->tasks = n_tasks_h_19(D);
  _2 = status_9 != 0;
  status_22 = (uint8_t) _2;
  goto <bb 5>; [INV]

  <bb 4> :
  status_20 = 0;

  <bb 5> :
  # status_5 = PHI <status_22(3), status_20(4)>
  scheduler_12(D)->timersCount = n_timers_c_23(D);
  scheduler_12(D)->timerPtr = buffer_ti_25(D);
  _3 = scheduler_12(D)->timersCount;
  if (n_timers_h_27(D) <= _3)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  scheduler_12(D)->timers = n_timers_h_27(D);
  _4 = status_5 != 0;
  status_30 = (uint8_t) _4;
  goto <bb 8>; [INV]

  <bb 7> :
  status_28 = 0;

  <bb 8> :
  # status_6 = PHI <status_30(6), status_28(7)>
  scheduler_12(D)->tasks_startFlags = 0;
  scheduler_12(D)->timers_startFlags = 0;
  _33 = status_6;

  <bb 9> :
<L6>:
  return _33;

}


Bfx_GetBit_u32u8_u8 (uint32 Data, uint8 BitPn)
{
  boolean Result;
  boolean D.6771;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  boolean _9;

  <bb 2> :
  Result_5 = 0;
  _1 = (int) BitPn_6(D);
  _2 = 1 << _1;
  _3 = (long unsigned int) _2;
  _4 = Data_7(D) & _3;
  Result_8 = _4 != 0;
  _9 = Result_8;

  <bb 3> :
<L0>:
  return _9;

}


Bfx_ClrBit_u32u8 (uint32 * Data, uint8 BitPn)
{
  long unsigned int _1;
  int _2;
  int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  _1 = *Data_8(D);
  _2 = (int) BitPn_9(D);
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = (long unsigned int) _4;
  _6 = _1 & _5;
  *Data_8(D) = _6;
  return;

}


Bfx_SetBit_u32u8 (uint32 * Data, uint8 BitPn)
{
  long unsigned int _1;
  int _2;
  int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  _1 = *Data_7(D);
  _2 = (int) BitPn_8(D);
  _3 = 1 << _2;
  _4 = (long unsigned int) _3;
  _5 = _1 | _4;
  *Data_7(D) = _5;
  return;

}


