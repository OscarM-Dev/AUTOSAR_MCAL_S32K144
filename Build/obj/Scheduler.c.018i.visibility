
Marking local functions: Bfx_PutBit_u32u8u8/17 Bfx_GetBit_u32u8_u8/2 Bfx_ClrBit_u32u8/1 Bfx_SetBit_u32u8/0


Marking externally visible functions: Scheduler_MainFunction/64 Scheduler_ReloadTimer/63 Scheduler_GetTimer/62 Scheduler_StopTimer/61 Scheduler_StartTimer/60 Scheduler_PeriodTask/59 Scheduler_StartTask/58 Scheduler_StopTask/57 Scheduler_Init/56 Scheduler_ReadQueue/55 Scheduler_WriteQueue/54 Scheduler_FlushQueue/53 Scheduler_GetStatusQueue/52 Scheduler_InitQueue/51 MemCopy/50


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

OsIf_GetElapsed/69 (OsIf_GetElapsed) @05e2fc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Scheduler_MainFunction/64 
  Calls: 
OsIf_GetCounter/68 (OsIf_GetCounter) @05e2fb60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Scheduler_MainFunction/64 
  Calls: 
OsIf_MicrosToTicks/67 (OsIf_MicrosToTicks) @05e2fa80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Scheduler_MainFunction/64 
  Calls: 
SchedulerCtrl_Ptr/66 (SchedulerCtrl_Ptr) @05dea708
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Scheduler_GetStatusQueue/52 (read) Scheduler_GetStatusQueue/52 (read) Scheduler_FlushQueue/53 (read) Scheduler_FlushQueue/53 (read) Scheduler_FlushQueue/53 (read) Scheduler_FlushQueue/53 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_StopTask/57 (read) Scheduler_StartTask/58 (read) Scheduler_PeriodTask/59 (read) Scheduler_StartTimer/60 (read) Scheduler_StartTimer/60 (read) Scheduler_StartTimer/60 (read) Scheduler_StartTimer/60 (read) Scheduler_StopTimer/61 (read) Scheduler_GetTimer/62 (read) Scheduler_ReloadTimer/63 (read) Scheduler_ReloadTimer/63 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) 
  Availability: not_available
  Varpool flags:
SchedulerConfig_Ptr/65 (SchedulerConfig_Ptr) @05dea6c0
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Scheduler_GetStatusQueue/52 (read) Scheduler_FlushQueue/53 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_Init/56 (read) Scheduler_Init/56 (read) Scheduler_Init/56 (read) Scheduler_Init/56 (read) Scheduler_Init/56 (read) Scheduler_StopTask/57 (read) Scheduler_StartTask/58 (read) Scheduler_PeriodTask/59 (read) Scheduler_PeriodTask/59 (read) Scheduler_PeriodTask/59 (read) Scheduler_StartTimer/60 (read) Scheduler_StopTimer/61 (read) Scheduler_GetTimer/62 (read) Scheduler_ReloadTimer/63 (read) Scheduler_ReloadTimer/63 (read) Scheduler_ReloadTimer/63 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) 
  Availability: not_available
  Varpool flags:
Scheduler_MainFunction/64 (Scheduler_MainFunction) @05dd4700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerConfig_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_GetBit_u32u8_u8/2 Scheduler_GetTimer/62 Bfx_GetBit_u32u8_u8/2 OsIf_GetElapsed/69 OsIf_GetCounter/68 OsIf_MicrosToTicks/67 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Scheduler_ReloadTimer/63 (Scheduler_ReloadTimer) @05dd4460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Scheduler_StartTimer/60 
Scheduler_GetTimer/62 (Scheduler_GetTimer) @05dd41c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Scheduler_MainFunction/64 
  Calls: 
Scheduler_StopTimer/61 (Scheduler_StopTimer) @05d5bd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_ClrBit_u32u8/1 
Scheduler_StartTimer/60 (Scheduler_StartTimer) @05d5b7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Scheduler_ReloadTimer/63 
  Calls: Bfx_SetBit_u32u8/0 
Scheduler_PeriodTask/59 (Scheduler_PeriodTask) @05d5b2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Scheduler_StartTask/58 (Scheduler_StartTask) @05d5bee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_SetBit_u32u8/0 
Scheduler_StopTask/57 (Scheduler_StopTask) @05d5bc40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_ClrBit_u32u8/1 
Scheduler_Init/56 (Scheduler_Init) @05d5b9a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Scheduler_InitQueue/51 Bfx_PutBit_u32u8u8/17 Bfx_PutBit_u32u8u8/17 
Scheduler_ReadQueue/55 (Scheduler_ReadQueue) @05d5b700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_SetBit_u32u8/0 Bfx_ClrBit_u32u8/1 Scheduler_GetStatusQueue/52 MemCopy/50 Scheduler_GetStatusQueue/52 
Scheduler_WriteQueue/54 (Scheduler_WriteQueue) @05d5b460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerConfig_Ptr/65 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_SetBit_u32u8/0 Bfx_ClrBit_u32u8/1 Scheduler_GetStatusQueue/52 MemCopy/50 Scheduler_GetStatusQueue/52 
Scheduler_FlushQueue/53 (Scheduler_FlushQueue) @05d5b1c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_SetBit_u32u8/0 Bfx_ClrBit_u32u8/1 
Scheduler_GetStatusQueue/52 (Scheduler_GetStatusQueue) @05d55d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/65 (read) SchedulerCtrl_Ptr/66 (read) SchedulerCtrl_Ptr/66 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Scheduler_ReadQueue/55 Scheduler_ReadQueue/55 Scheduler_WriteQueue/54 Scheduler_WriteQueue/54 
  Calls: Bfx_GetBit_u32u8_u8/2 Bfx_GetBit_u32u8_u8/2 
Scheduler_InitQueue/51 (Scheduler_InitQueue) @05d55ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Scheduler_Init/56 
  Calls: Bfx_SetBit_u32u8/0 Bfx_ClrBit_u32u8/1 
MemCopy/50 (MemCopy) @05d55c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Scheduler_ReadQueue/55 Scheduler_WriteQueue/54 
  Calls: 
Bfx_PutBit_u32u8u8/17 (Bfx_PutBit_u32u8u8) @05d2aee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Scheduler_Init/56 Scheduler_Init/56 
  Calls: 
Bfx_GetBit_u32u8_u8/2 (Bfx_GetBit_u32u8_u8) @05d0b700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Scheduler_MainFunction/64 Scheduler_MainFunction/64 Scheduler_GetStatusQueue/52 Scheduler_GetStatusQueue/52 
  Calls: 
Bfx_ClrBit_u32u8/1 (Bfx_ClrBit_u32u8) @05d0b460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Scheduler_StopTimer/61 Scheduler_StopTask/57 Scheduler_ReadQueue/55 Scheduler_WriteQueue/54 Scheduler_FlushQueue/53 Scheduler_InitQueue/51 
  Calls: 
Bfx_SetBit_u32u8/0 (Bfx_SetBit_u32u8) @05d0b1c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Scheduler_StartTimer/60 Scheduler_StartTask/58 Scheduler_ReadQueue/55 Scheduler_WriteQueue/54 Scheduler_FlushQueue/53 Scheduler_InitQueue/51 
  Calls: 
Scheduler_MainFunction ()
{
  uint8 i;
  uint32 elapsed_time;
  uint32 count_value;
  uint32 tick_value;
  long unsigned int D.5949;

  <bb 2> :
  SchedulerConfig_Ptr.67_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.67_1->Tick;
  _3 = _2 * 1000;
  tick_value = OsIf_MicrosToTicks (_3, 1);
  _4 = OsIf_GetCounter (1);
  count_value = _4;
  elapsed_time = 0;
  i = 0;

  <bb 3> :
  D.5949 = OsIf_GetElapsed (&count_value, 1);
  elapsed_time = D.5949 + elapsed_time;
  if (elapsed_time >= tick_value)
    goto <bb 4>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 4> :
  i = 0;
  goto <bb 9>; [INV]

  <bb 5> :
  SchedulerCtrl_Ptr.68_5 = SchedulerCtrl_Ptr;
  _6 = SchedulerCtrl_Ptr.68_5->TimerFlags;
  _7 = Bfx_GetBit_u32u8_u8 (_6, i);
  if (_7 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  SchedulerCtrl_Ptr.69_8 = SchedulerCtrl_Ptr;
  _9 = (int) i;
  _10 = SchedulerCtrl_Ptr.69_8->TimerCount[_9];
  SchedulerConfig_Ptr.70_11 = SchedulerConfig_Ptr;
  _12 = SchedulerConfig_Ptr.70_11->Tick;
  SchedulerCtrl_Ptr.71_13 = SchedulerCtrl_Ptr;
  _14 = (int) i;
  _15 = _10 - _12;
  SchedulerCtrl_Ptr.71_13->TimerCount[_14] = _15;
  _16 = i + 1;
  _17 = Scheduler_GetTimer (_16);
  if (_17 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  SchedulerConfig_Ptr.72_18 = SchedulerConfig_Ptr;
  _19 = SchedulerConfig_Ptr.72_18->TimerPtr;
  _20 = (unsigned int) i;
  _21 = _20 * 12;
  _22 = _19 + _21;
  _23 = _22->CallbackFunc;
  _23 ();

  <bb 8> :
  i.73_24 = i;
  i = i.73_24 + 1;

  <bb 9> :
  SchedulerConfig_Ptr.74_25 = SchedulerConfig_Ptr;
  _26 = SchedulerConfig_Ptr.74_25->Timers;
  if (i < _26)
    goto <bb 5>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  i = 0;
  goto <bb 15>; [INV]

  <bb 11> :
  SchedulerCtrl_Ptr.75_27 = SchedulerCtrl_Ptr;
  _28 = SchedulerCtrl_Ptr.75_27->TaskFlags;
  _29 = Bfx_GetBit_u32u8_u8 (_28, i);
  if (_29 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  SchedulerCtrl_Ptr.76_30 = SchedulerCtrl_Ptr;
  _31 = (int) i;
  _32 = SchedulerCtrl_Ptr.76_30->TaskElapsed[_31];
  SchedulerConfig_Ptr.77_33 = SchedulerConfig_Ptr;
  _34 = SchedulerConfig_Ptr.77_33->Tick;
  SchedulerCtrl_Ptr.78_35 = SchedulerCtrl_Ptr;
  _36 = (int) i;
  _37 = _32 + _34;
  SchedulerCtrl_Ptr.78_35->TaskElapsed[_36] = _37;
  SchedulerCtrl_Ptr.79_38 = SchedulerCtrl_Ptr;
  _39 = (int) i;
  _40 = SchedulerCtrl_Ptr.79_38->TaskElapsed[_39];
  SchedulerCtrl_Ptr.80_41 = SchedulerCtrl_Ptr;
  _42 = (int) i;
  _43 = SchedulerCtrl_Ptr.80_41->TaskPeriod[_42];
  if (_40 >= _43)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  SchedulerConfig_Ptr.81_44 = SchedulerConfig_Ptr;
  _45 = SchedulerConfig_Ptr.81_44->TaskPtr;
  _46 = (unsigned int) i;
  _47 = _46 * 12;
  _48 = _45 + _47;
  _49 = _48->TaskFunc;
  _49 ();
  SchedulerCtrl_Ptr.82_50 = SchedulerCtrl_Ptr;
  _51 = (int) i;
  SchedulerCtrl_Ptr.82_50->TaskElapsed[_51] = 0;

  <bb 14> :
  i.83_52 = i;
  i = i.83_52 + 1;

  <bb 15> :
  SchedulerConfig_Ptr.84_53 = SchedulerConfig_Ptr;
  _54 = SchedulerConfig_Ptr.84_53->Tasks;
  if (i < _54)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  elapsed_time = 0;

  <bb 17> :
  goto <bb 3>; [INV]

}


Scheduler_ReloadTimer (TimerType Timer, uint32 NewTimeout)
{
  Std_ReturnType status;
  Std_ReturnType D.5947;

  <bb 2> :
  status = 0;
  if (Timer != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.62_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.62_1->Timers;
  if (Timer <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  SchedulerConfig_Ptr.63_3 = SchedulerConfig_Ptr;
  _4 = SchedulerConfig_Ptr.63_3->Tick;
  if (NewTimeout >= _4)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  SchedulerConfig_Ptr.64_5 = SchedulerConfig_Ptr;
  _6 = SchedulerConfig_Ptr.64_5->Tick;
  _7 = NewTimeout % _6;
  if (_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  SchedulerCtrl_Ptr.65_8 = SchedulerCtrl_Ptr;
  _9 = (int) Timer;
  _10 = _9 + -1;
  SchedulerCtrl_Ptr.65_8->TimerTimeout[_10] = NewTimeout;
  SchedulerCtrl_Ptr.66_11 = SchedulerCtrl_Ptr;
  _12 = (int) Timer;
  _13 = _12 + -1;
  SchedulerCtrl_Ptr.66_11->TimerCount[_13] = NewTimeout;
  Scheduler_StartTimer (Timer);
  status = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  status = 0;

  <bb 8> :
  goto <bb 10>; [INV]

  <bb 9> :
  status = 0;

  <bb 10> :
  D.5947 = status;

  <bb 11> :
<L8>:
  return D.5947;

}


Scheduler_GetTimer (TimerType Timer)
{
  uint32 counter_value;
  uint32 D.5937;

  <bb 2> :
  counter_value = 0;
  if (Timer != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.60_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.60_1->Timers;
  if (Timer <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  SchedulerCtrl_Ptr.61_3 = SchedulerCtrl_Ptr;
  _4 = (int) Timer;
  _5 = _4 + -1;
  counter_value = SchedulerCtrl_Ptr.61_3->TimerCount[_5];
  goto <bb 6>; [INV]

  <bb 5> :
  counter_value = 0;

  <bb 6> :
  D.5937 = counter_value;

  <bb 7> :
<L4>:
  return D.5937;

}


Scheduler_StopTimer (TimerType Timer)
{
  Std_ReturnType status;
  Std_ReturnType D.5931;

  <bb 2> :
  status = 0;
  if (Timer != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.58_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.58_1->Timers;
  if (Timer <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  SchedulerCtrl_Ptr.59_3 = SchedulerCtrl_Ptr;
  _4 = &SchedulerCtrl_Ptr.59_3->TimerFlags;
  _5 = Timer + 255;
  Bfx_ClrBit_u32u8 (_4, _5);
  status = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  status = 0;

  <bb 6> :
  D.5931 = status;

  <bb 7> :
<L4>:
  return D.5931;

}


Scheduler_StartTimer (TimerType Timer)
{
  Std_ReturnType status;
  Std_ReturnType D.5925;

  <bb 2> :
  status = 0;
  if (Timer != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.53_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.53_1->Timers;
  if (Timer <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  SchedulerCtrl_Ptr.54_3 = SchedulerCtrl_Ptr;
  _4 = &SchedulerCtrl_Ptr.54_3->TimerFlags;
  _5 = Timer + 255;
  Bfx_SetBit_u32u8 (_4, _5);
  SchedulerCtrl_Ptr.55_6 = SchedulerCtrl_Ptr;
  _7 = (int) Timer;
  _8 = _7 + -1;
  _9 = SchedulerCtrl_Ptr.55_6->TimerCount[_8];
  if (_9 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  SchedulerCtrl_Ptr.56_10 = SchedulerCtrl_Ptr;
  _11 = (int) Timer;
  _12 = _11 + -1;
  SchedulerCtrl_Ptr.57_13 = SchedulerCtrl_Ptr;
  _14 = (int) Timer;
  _15 = _14 + -1;
  _16 = SchedulerCtrl_Ptr.56_10->TimerTimeout[_12];
  SchedulerCtrl_Ptr.57_13->TimerCount[_15] = _16;

  <bb 6> :
  status = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  status = 0;

  <bb 8> :
  D.5925 = status;

  <bb 9> :
<L6>:
  return D.5925;

}


Scheduler_PeriodTask (TaskType Task, uint32 NewPeriod)
{
  Std_ReturnType status;
  Std_ReturnType D.5917;

  <bb 2> :
  status = 0;
  if (Task != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.49_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.49_1->Tasks;
  if (Task <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  SchedulerConfig_Ptr.50_3 = SchedulerConfig_Ptr;
  _4 = SchedulerConfig_Ptr.50_3->Tick;
  if (NewPeriod >= _4)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  SchedulerConfig_Ptr.51_5 = SchedulerConfig_Ptr;
  _6 = SchedulerConfig_Ptr.51_5->Tick;
  _7 = NewPeriod % _6;
  if (_7 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  SchedulerCtrl_Ptr.52_8 = SchedulerCtrl_Ptr;
  _9 = (int) Task;
  _10 = _9 + -1;
  SchedulerCtrl_Ptr.52_8->TaskPeriod[_10] = NewPeriod;
  status = 1;
  goto <bb 8>; [INV]

  <bb 7> :
  status = 0;

  <bb 8> :
  goto <bb 10>; [INV]

  <bb 9> :
  status = 0;

  <bb 10> :
  D.5917 = status;

  <bb 11> :
<L8>:
  return D.5917;

}


Scheduler_StartTask (TaskType Task)
{
  Std_ReturnType status;
  Std_ReturnType D.5907;

  <bb 2> :
  status = 0;
  if (Task != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.47_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.47_1->Tasks;
  if (Task <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  SchedulerCtrl_Ptr.48_3 = SchedulerCtrl_Ptr;
  _4 = &SchedulerCtrl_Ptr.48_3->TaskFlags;
  _5 = Task + 255;
  Bfx_SetBit_u32u8 (_4, _5);
  status = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  status = 0;

  <bb 6> :
  D.5907 = status;

  <bb 7> :
<L4>:
  return D.5907;

}


Scheduler_StopTask (TaskType Task)
{
  Std_ReturnType status;
  Std_ReturnType D.5901;

  <bb 2> :
  status = 0;
  if (Task != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.45_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.45_1->Tasks;
  if (Task <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  SchedulerCtrl_Ptr.46_3 = SchedulerCtrl_Ptr;
  _4 = &SchedulerCtrl_Ptr.46_3->TaskFlags;
  _5 = Task + 255;
  Bfx_ClrBit_u32u8 (_4, _5);
  status = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  status = 0;

  <bb 6> :
  D.5901 = status;

  <bb 7> :
<L4>:
  return D.5901;

}


Scheduler_Init (struct Scheduler_CtrlType * SchedulerPtr)
{
  uint8 i;
  Std_ReturnType status;
  Std_ReturnType D.5892;

  <bb 2> :
  status = 1;
  i = 0;
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.38_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.38_1->TaskPtr;
  _3 = (unsigned int) i;
  _4 = _3 * 12;
  _5 = _2 + _4;
  _6 = (int) i;
  _7 = _5->InitPeriod;
  SchedulerPtr->TaskPeriod[_6] = _7;
  _8 = (int) i;
  SchedulerPtr->TaskElapsed[_8] = 0;
  _9 = &SchedulerPtr->TaskFlags;
  SchedulerConfig_Ptr.39_10 = SchedulerConfig_Ptr;
  _11 = SchedulerConfig_Ptr.39_10->TaskPtr;
  _12 = (unsigned int) i;
  _13 = _12 * 12;
  _14 = _11 + _13;
  _15 = _14->InitFlag;
  _16 = _15 != 0;
  Bfx_PutBit_u32u8u8 (_9, i, _16);
  i.40_17 = i;
  i = i.40_17 + 1;

  <bb 4> :
  if (i <= 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  i = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  SchedulerConfig_Ptr.41_18 = SchedulerConfig_Ptr;
  _19 = SchedulerConfig_Ptr.41_18->TimerPtr;
  _20 = (unsigned int) i;
  _21 = _20 * 12;
  _22 = _19 + _21;
  _23 = (int) i;
  _24 = _22->InitTimeout;
  SchedulerPtr->TimerTimeout[_23] = _24;
  SchedulerConfig_Ptr.42_25 = SchedulerConfig_Ptr;
  _26 = SchedulerConfig_Ptr.42_25->TimerPtr;
  _27 = (unsigned int) i;
  _28 = _27 * 12;
  _29 = _26 + _28;
  _30 = (int) i;
  _31 = _29->InitTimeout;
  SchedulerPtr->TimerCount[_30] = _31;
  _32 = &SchedulerPtr->TimerFlags;
  SchedulerConfig_Ptr.43_33 = SchedulerConfig_Ptr;
  _34 = SchedulerConfig_Ptr.43_33->TimerPtr;
  _35 = (unsigned int) i;
  _36 = _35 * 12;
  _37 = _34 + _36;
  _38 = _37->InitFlag;
  _39 = _38 != 0;
  Bfx_PutBit_u32u8u8 (_32, i, _39);
  i.44_40 = i;
  i = i.44_40 + 1;

  <bb 7> :
  if (i <= 2)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  Scheduler_InitQueue (SchedulerPtr);
  D.5892 = status;

  <bb 9> :
<L6>:
  return D.5892;

}


Scheduler_ReadQueue (QueueType Queue, void * Data)
{
  uint32 actual_add;
  uint32 base_add;
  Std_ReturnType status;
  Std_ReturnType D.5890;

  <bb 2> :
  status = 0;
  if (Queue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.24_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.24_1->Queues;
  if (Queue <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 4> :
  SchedulerConfig_Ptr.25_3 = SchedulerConfig_Ptr;
  _4 = SchedulerConfig_Ptr.25_3->QueuePtr;
  _5 = (unsigned int) Queue;
  _6 = _5 * 12;
  _7 = _6 + 4294967284;
  _8 = _4 + _7;
  _9 = _8->Buffer;
  base_add = (uint32) _9;
  actual_add = 0;
  _10 = Scheduler_GetStatusQueue (Queue, 1);
  if (_10 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  SchedulerCtrl_Ptr.26_11 = SchedulerCtrl_Ptr;
  _12 = (int) Queue;
  _13 = _12 + -1;
  _14 = SchedulerCtrl_Ptr.26_11->QueueTails[_13];
  SchedulerConfig_Ptr.27_15 = SchedulerConfig_Ptr;
  _16 = SchedulerConfig_Ptr.27_15->QueuePtr;
  _17 = (unsigned int) Queue;
  _18 = _17 * 12;
  _19 = _18 + 4294967284;
  _20 = _16 + _19;
  _21 = _20->Size;
  _22 = (long unsigned int) _21;
  _23 = _14 * _22;
  actual_add = base_add + _23;
  actual_add.28_24 = (void *) actual_add;
  SchedulerConfig_Ptr.29_25 = SchedulerConfig_Ptr;
  _26 = SchedulerConfig_Ptr.29_25->QueuePtr;
  _27 = (unsigned int) Queue;
  _28 = _27 * 12;
  _29 = _28 + 4294967284;
  _30 = _26 + _29;
  _31 = _30->Size;
  _32 = (long unsigned int) _31;
  MemCopy (Data, actual_add.28_24, _32);
  SchedulerCtrl_Ptr.30_33 = SchedulerCtrl_Ptr;
  _34 = (int) Queue;
  _35 = _34 + -1;
  _36 = SchedulerCtrl_Ptr.30_33->QueueTails[_35];
  _37 = _36 + 1;
  SchedulerCtrl_Ptr.30_33->QueueTails[_35] = _37;
  SchedulerCtrl_Ptr.31_38 = SchedulerCtrl_Ptr;
  _39 = (int) Queue;
  _40 = _39 + -1;
  _41 = SchedulerCtrl_Ptr.31_38->QueueTails[_40];
  SchedulerConfig_Ptr.32_42 = SchedulerConfig_Ptr;
  _43 = SchedulerConfig_Ptr.32_42->QueuePtr;
  _44 = (unsigned int) Queue;
  _45 = _44 * 12;
  _46 = _45 + 4294967284;
  _47 = _43 + _46;
  _48 = _47->Elements;
  _49 = _48 + 4294967295;
  if (_41 > _49)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  SchedulerCtrl_Ptr.33_50 = SchedulerCtrl_Ptr;
  _51 = (int) Queue;
  _52 = _51 + -1;
  SchedulerCtrl_Ptr.33_50->QueueTails[_52] = 0;

  <bb 7> :
  _53 = Scheduler_GetStatusQueue (Queue, 2);
  if (_53 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  SchedulerCtrl_Ptr.34_54 = SchedulerCtrl_Ptr;
  _55 = &SchedulerCtrl_Ptr.34_54->QueueFulls;
  _56 = Queue + 255;
  Bfx_ClrBit_u32u8 (_55, _56);

  <bb 9> :
  SchedulerCtrl_Ptr.35_57 = SchedulerCtrl_Ptr;
  _58 = (int) Queue;
  _59 = _58 + -1;
  _60 = SchedulerCtrl_Ptr.35_57->QueueTails[_59];
  SchedulerCtrl_Ptr.36_61 = SchedulerCtrl_Ptr;
  _62 = (int) Queue;
  _63 = _62 + -1;
  _64 = SchedulerCtrl_Ptr.36_61->QueueHeads[_63];
  if (_60 == _64)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  SchedulerCtrl_Ptr.37_65 = SchedulerCtrl_Ptr;
  _66 = &SchedulerCtrl_Ptr.37_65->QueueEmpties;
  _67 = Queue + 255;
  Bfx_SetBit_u32u8 (_66, _67);

  <bb 11> :
  status = 1;

  <bb 12> :
  goto <bb 14>; [INV]

  <bb 13> :
  status = 0;

  <bb 14> :
  D.5890 = status;

  <bb 15> :
<L12>:
  return D.5890;

}


Scheduler_WriteQueue (QueueType Queue, void * Data)
{
  uint32 actual_add;
  uint32 base_add;
  Std_ReturnType status;
  Std_ReturnType D.5876;

  <bb 2> :
  status = 0;
  if (Queue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.10_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.10_1->Queues;
  if (Queue <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 4> :
  SchedulerConfig_Ptr.11_3 = SchedulerConfig_Ptr;
  _4 = SchedulerConfig_Ptr.11_3->QueuePtr;
  _5 = (unsigned int) Queue;
  _6 = _5 * 12;
  _7 = _6 + 4294967284;
  _8 = _4 + _7;
  _9 = _8->Buffer;
  base_add = (uint32) _9;
  actual_add = 0;
  _10 = Scheduler_GetStatusQueue (Queue, 2);
  if (_10 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  SchedulerCtrl_Ptr.12_11 = SchedulerCtrl_Ptr;
  _12 = (int) Queue;
  _13 = _12 + -1;
  _14 = SchedulerCtrl_Ptr.12_11->QueueHeads[_13];
  SchedulerConfig_Ptr.13_15 = SchedulerConfig_Ptr;
  _16 = SchedulerConfig_Ptr.13_15->QueuePtr;
  _17 = (unsigned int) Queue;
  _18 = _17 * 12;
  _19 = _18 + 4294967284;
  _20 = _16 + _19;
  _21 = _20->Size;
  _22 = (long unsigned int) _21;
  _23 = _14 * _22;
  actual_add = base_add + _23;
  actual_add.14_24 = (void *) actual_add;
  SchedulerConfig_Ptr.15_25 = SchedulerConfig_Ptr;
  _26 = SchedulerConfig_Ptr.15_25->QueuePtr;
  _27 = (unsigned int) Queue;
  _28 = _27 * 12;
  _29 = _28 + 4294967284;
  _30 = _26 + _29;
  _31 = _30->Size;
  _32 = (long unsigned int) _31;
  MemCopy (actual_add.14_24, Data, _32);
  SchedulerCtrl_Ptr.16_33 = SchedulerCtrl_Ptr;
  _34 = (int) Queue;
  _35 = _34 + -1;
  _36 = SchedulerCtrl_Ptr.16_33->QueueHeads[_35];
  _37 = _36 + 1;
  SchedulerCtrl_Ptr.16_33->QueueHeads[_35] = _37;
  SchedulerCtrl_Ptr.17_38 = SchedulerCtrl_Ptr;
  _39 = (int) Queue;
  _40 = _39 + -1;
  _41 = SchedulerCtrl_Ptr.17_38->QueueHeads[_40];
  SchedulerConfig_Ptr.18_42 = SchedulerConfig_Ptr;
  _43 = SchedulerConfig_Ptr.18_42->QueuePtr;
  _44 = (unsigned int) Queue;
  _45 = _44 * 12;
  _46 = _45 + 4294967284;
  _47 = _43 + _46;
  _48 = _47->Elements;
  _49 = _48 + 4294967295;
  if (_41 > _49)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  SchedulerCtrl_Ptr.19_50 = SchedulerCtrl_Ptr;
  _51 = (int) Queue;
  _52 = _51 + -1;
  SchedulerCtrl_Ptr.19_50->QueueHeads[_52] = 0;

  <bb 7> :
  _53 = Scheduler_GetStatusQueue (Queue, 1);
  if (_53 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  SchedulerCtrl_Ptr.20_54 = SchedulerCtrl_Ptr;
  _55 = &SchedulerCtrl_Ptr.20_54->QueueEmpties;
  _56 = Queue + 255;
  Bfx_ClrBit_u32u8 (_55, _56);

  <bb 9> :
  SchedulerCtrl_Ptr.21_57 = SchedulerCtrl_Ptr;
  _58 = (int) Queue;
  _59 = _58 + -1;
  _60 = SchedulerCtrl_Ptr.21_57->QueueHeads[_59];
  SchedulerCtrl_Ptr.22_61 = SchedulerCtrl_Ptr;
  _62 = (int) Queue;
  _63 = _62 + -1;
  _64 = SchedulerCtrl_Ptr.22_61->QueueTails[_63];
  if (_60 == _64)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  SchedulerCtrl_Ptr.23_65 = SchedulerCtrl_Ptr;
  _66 = &SchedulerCtrl_Ptr.23_65->QueueFulls;
  _67 = Queue + 255;
  Bfx_SetBit_u32u8 (_66, _67);

  <bb 11> :
  status = 1;

  <bb 12> :
  goto <bb 14>; [INV]

  <bb 13> :
  status = 0;

  <bb 14> :
  D.5876 = status;

  <bb 15> :
<L12>:
  return D.5876;

}


Scheduler_FlushQueue (QueueType Queue)
{
  Std_ReturnType status;
  Std_ReturnType D.5862;

  <bb 2> :
  status = 0;
  if (Queue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.5_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.5_1->Queues;
  if (Queue <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  SchedulerCtrl_Ptr.6_3 = SchedulerCtrl_Ptr;
  _4 = (int) Queue;
  _5 = _4 + -1;
  SchedulerCtrl_Ptr.7_6 = SchedulerCtrl_Ptr;
  _7 = (int) Queue;
  _8 = _7 + -1;
  _9 = SchedulerCtrl_Ptr.6_3->QueueHeads[_5];
  SchedulerCtrl_Ptr.7_6->QueueTails[_8] = _9;
  SchedulerCtrl_Ptr.8_10 = SchedulerCtrl_Ptr;
  _11 = &SchedulerCtrl_Ptr.8_10->QueueFulls;
  _12 = Queue + 255;
  Bfx_ClrBit_u32u8 (_11, _12);
  SchedulerCtrl_Ptr.9_13 = SchedulerCtrl_Ptr;
  _14 = &SchedulerCtrl_Ptr.9_13->QueueEmpties;
  _15 = Queue + 255;
  Bfx_SetBit_u32u8 (_14, _15);
  status = 1;
  goto <bb 6>; [INV]

  <bb 5> :
  status = 0;

  <bb 6> :
  D.5862 = status;

  <bb 7> :
<L4>:
  return D.5862;

}


Scheduler_GetStatusQueue (QueueType Queue, uint8 Status)
{
  uint8 status;
  uint8 D.5854;

  <bb 2> :
  status = 0;
  if (Queue != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  SchedulerConfig_Ptr.2_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.2_1->Queues;
  if (Queue <= _2)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  _3 = (int) Status;
  switch (_3) <default: <L4> [INV], case 1: <L2> [INV], case 2: <L3> [INV]>

  <bb 5> :
<L2>:
  SchedulerCtrl_Ptr.3_4 = SchedulerCtrl_Ptr;
  _5 = SchedulerCtrl_Ptr.3_4->QueueEmpties;
  _6 = Queue + 255;
  _7 = Bfx_GetBit_u32u8_u8 (_5, _6);
  status = (uint8) _7;
  goto <bb 8>; [INV]

  <bb 6> :
<L3>:
  SchedulerCtrl_Ptr.4_8 = SchedulerCtrl_Ptr;
  _9 = SchedulerCtrl_Ptr.4_8->QueueFulls;
  _10 = Queue + 255;
  _11 = Bfx_GetBit_u32u8_u8 (_9, _10);
  status = (uint8) _11;
  goto <bb 8>; [INV]

  <bb 7> :
<L4>:

  <bb 8> :
  goto <bb 10>; [INV]

  <bb 9> :
  status = 0;

  <bb 10> :
  D.5854 = status;

  <bb 11> :
<L8>:
  return D.5854;

}


Scheduler_InitQueue (struct Scheduler_CtrlType * SchedulerPtr)
{
  uint8 i;

  <bb 2> :
  i = 0;
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) i;
  SchedulerPtr->QueueHeads[_1] = 0;
  _2 = (int) i;
  SchedulerPtr->QueueTails[_2] = 0;
  _3 = &SchedulerPtr->QueueFulls;
  Bfx_ClrBit_u32u8 (_3, i);
  _4 = &SchedulerPtr->QueueEmpties;
  Bfx_SetBit_u32u8 (_4, i);
  i.1_5 = i;
  i = i.1_5 + 1;

  <bb 4> :
  if (i == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


MemCopy (void * Dest, void * Src, uint32 Size)
{
  uint8 * Ptr_src;
  uint8 * Ptr_dest;
  uint8 i;

  <bb 2> :
  i = 0;
  Ptr_dest = Dest;
  Ptr_src = Src;
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (sizetype) i;
  _2 = Ptr_src + _1;
  _3 = (sizetype) i;
  _4 = Ptr_dest + _3;
  _5 = *_2;
  *_4 = _5;
  i.0_6 = i;
  i = i.0_6 + 1;

  <bb 4> :
  _7 = (long unsigned int) i;
  if (Size > _7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Bfx_PutBit_u32u8u8 (uint32 * Data, uint8 BitPn, boolean Status)
{
  <bb 2> :
  if (Status != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = *Data;
  _2 = (int) BitPn;
  _3 = 1 << _2;
  _4 = (long unsigned int) _3;
  _5 = _1 | _4;
  *Data = _5;
  goto <bb 5>; [INV]

  <bb 4> :
  _6 = *Data;
  _7 = (int) BitPn;
  _8 = 1 << _7;
  _9 = ~_8;
  _10 = (long unsigned int) _9;
  _11 = _6 & _10;
  *Data = _11;

  <bb 5> :
  return;

}


Bfx_GetBit_u32u8_u8 (uint32 Data, uint8 BitPn)
{
  boolean Result;
  boolean D.5856;

  <bb 2> :
  Result = 0;
  _1 = (int) BitPn;
  _2 = 1 << _1;
  _3 = (long unsigned int) _2;
  _4 = Data & _3;
  Result = _4 != 0;
  D.5856 = Result;

  <bb 3> :
<L0>:
  return D.5856;

}


Bfx_ClrBit_u32u8 (uint32 * Data, uint8 BitPn)
{
  <bb 2> :
  _1 = *Data;
  _2 = (int) BitPn;
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = (long unsigned int) _4;
  _6 = _1 & _5;
  *Data = _6;
  return;

}


Bfx_SetBit_u32u8 (uint32 * Data, uint8 BitPn)
{
  <bb 2> :
  _1 = *Data;
  _2 = (int) BitPn;
  _3 = 1 << _2;
  _4 = (long unsigned int) _3;
  _5 = _1 | _4;
  *Data = _5;
  return;

}


