Dio_WriteChannelGroup (const struct Dio_ChannelGroupType * ChannelGroupIdPtr, Dio_PortLevelType Level)
{
  Std_ReturnType Valid;

  <bb 2> :
  Valid = Dio_ValidateChannelGroupForWrite (ChannelGroupIdPtr, 5);
  if (Valid == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Dio_Ipw_WriteChannelGroup (ChannelGroupIdPtr, Level);

  <bb 4> :
  return;

}


Dio_ReadChannelGroup (const struct Dio_ChannelGroupType * ChannelGroupIdPtr)
{
  Std_ReturnType Valid;
  Dio_PortLevelType PortLevel;
  Dio_PortLevelType D.5695;

  <bb 2> :
  PortLevel = 0;
  Valid = Dio_ValidateChannelGroupForRead (ChannelGroupIdPtr, 4);
  if (Valid == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  PortLevel = Dio_Ipw_ReadChannelGroup (ChannelGroupIdPtr);

  <bb 4> :
  D.5695 = PortLevel;

  <bb 5> :
<L2>:
  return D.5695;

}


Dio_WritePort (Dio_PortType PortId, Dio_PortLevelType Level)
{
  Std_ReturnType Valid;

  <bb 2> :
  Valid = Dio_ValidatePortForWrite (PortId, 3);
  if (Valid == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Dio_Ipw_WritePort (PortId, Level);

  <bb 4> :
  return;

}


Dio_ReadPort (Dio_PortType PortId)
{
  Std_ReturnType Valid;
  Dio_PortLevelType PortLevel;
  Dio_PortLevelType D.5671;

  <bb 2> :
  PortLevel = 0;
  Valid = Dio_ValidatePortForRead (PortId, 2);
  if (Valid == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  PortLevel = Dio_Ipw_ReadPort (PortId);

  <bb 4> :
  D.5671 = PortLevel;

  <bb 5> :
<L2>:
  return D.5671;

}


Dio_FlipChannel (Dio_ChannelType ChannelId)
{
  Std_ReturnType Valid;
  Dio_LevelType ChannelLevel;
  Dio_LevelType D.5667;

  <bb 2> :
  ChannelLevel = 0;
  Valid = Dio_ValidateChannelForWrite (ChannelId, 17);
  if (Valid == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ChannelLevel = Dio_Ipw_FlipChannel (ChannelId);

  <bb 4> :
  D.5667 = ChannelLevel;

  <bb 5> :
<L2>:
  return D.5667;

}


Dio_WriteChannel (Dio_ChannelType ChannelId, Dio_LevelType Level)
{
  Std_ReturnType Valid;

  <bb 2> :
  Valid = Dio_ValidateChannelForWrite (ChannelId, 1);
  if (Valid == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  Valid = Dio_ValidateChannelLevel (Level);
  if (Valid == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Dio_Ipw_WriteChannel (ChannelId, Level);

  <bb 5> :
  return;

}


Dio_ReadChannel (Dio_ChannelType ChannelId)
{
  Std_ReturnType Valid;
  Dio_LevelType ChannelLevel;
  Dio_LevelType D.5635;

  <bb 2> :
  ChannelLevel = 0;
  Valid = Dio_ValidateChannelForRead (ChannelId, 0);
  if (Valid == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  ChannelLevel = Dio_Ipw_ReadChannel (ChannelId);

  <bb 4> :
  D.5635 = ChannelLevel;

  <bb 5> :
<L2>:
  return D.5635;

}


Dio_GetVersionInfo (struct Std_VersionInfoType * VersionInfo)
{
  <bb 2> :
  if (VersionInfo == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (120, 0, 18, 32);
  goto <bb 5>; [INV]

  <bb 4> :
  VersionInfo->vendorID = 43;
  VersionInfo->moduleID = 120;
  VersionInfo->sw_major_version = 2;
  VersionInfo->sw_minor_version = 0;
  VersionInfo->sw_patch_version = 0;

  <bb 5> :
  return;

}


Dio_ValidateChannelGroupForRead (const struct Dio_ChannelGroupType * pChannelGroup, uint8 u8ServiceId)
{
  uint8 u8ChannelGroup;
  Std_ReturnType Valid;
  Std_ReturnType D.5704;

  <bb 2> :
  Valid = 1;
  u8ChannelGroup = pChannelGroup->port;
  _1 = Dio_Config.pChannelGroupList;
  _2 = (long unsigned int) _1;
  pChannelGroup.0_3 = (long unsigned int) pChannelGroup;
  if (_2 <= pChannelGroup.0_3)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _4 = Dio_Config.pChannelGroupList;
  _5 = Dio_Config.u8NumChannelGroups;
  _6 = (sizetype) _5;
  _7 = _6 + 536870911;
  _8 = _7 * 8;
  _9 = _4 + _8;
  _10 = (long unsigned int) _9;
  pChannelGroup.1_11 = (long unsigned int) pChannelGroup;
  if (_10 >= pChannelGroup.1_11)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  if (u8ChannelGroup <= 4)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _12 = (int) u8ChannelGroup;
  _13 = Dio_aAvailablePinsForRead[_12];
  if (_13 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _14 = pChannelGroup->u8offset;
  if (_14 <= 31)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Valid = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  Det_ReportError (120, 0, u8ServiceId, 31);

  <bb 9> :
  D.5704 = Valid;

  <bb 10> :
<L7>:
  return D.5704;

}


Dio_ValidateChannelGroupForWrite (const struct Dio_ChannelGroupType * pChannelGroup, uint8 u8ServiceId)
{
  uint8 u8ChannelGroup;
  Std_ReturnType Valid;
  Std_ReturnType D.5715;

  <bb 2> :
  Valid = 1;
  u8ChannelGroup = pChannelGroup->port;
  _1 = Dio_Config.pChannelGroupList;
  _2 = (long unsigned int) _1;
  pChannelGroup.2_3 = (long unsigned int) pChannelGroup;
  if (_2 <= pChannelGroup.2_3)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _4 = Dio_Config.pChannelGroupList;
  _5 = Dio_Config.u8NumChannelGroups;
  _6 = (sizetype) _5;
  _7 = _6 + 536870911;
  _8 = _7 * 8;
  _9 = _4 + _8;
  _10 = (long unsigned int) _9;
  pChannelGroup.3_11 = (long unsigned int) pChannelGroup;
  if (_10 >= pChannelGroup.3_11)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  if (u8ChannelGroup <= 4)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _12 = (int) u8ChannelGroup;
  _13 = Dio_aAvailablePinsForWrite[_12];
  if (_13 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _14 = pChannelGroup->u8offset;
  if (_14 <= 31)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Valid = 0;
  goto <bb 9>; [INV]

  <bb 8> :
  Det_ReportError (120, 0, u8ServiceId, 31);

  <bb 9> :
  D.5715 = Valid;

  <bb 10> :
<L7>:
  return D.5715;

}


Dio_ValidatePortForRead (Dio_PortType PortId, uint8 u8ServiceId)
{
  uint8 CoreId;
  Std_ReturnType Valid;
  Std_ReturnType D.5680;

  <bb 2> :
  Valid = 1;
  CoreId = 0;
  if (PortId <= 4)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _1 = (int) PortId;
  _2 = Dio_aAvailablePinsForRead[_1];
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _3 = Dio_Config.pau32Dio_PortToPartitionMap;
  _4 = (unsigned int) PortId;
  _5 = _4 * 4;
  _6 = _3 + _5;
  _7 = *_6;
  _8 = (int) CoreId;
  _9 = 1 << _8;
  _10 = _7 & _9;
  _11 = (int) CoreId;
  _12 = _10 >> _11;
  if (_12 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Valid = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  Det_ReportError (120, 0, u8ServiceId, 240);

  <bb 7> :
  goto <bb 9>; [INV]

  <bb 8> :
  Det_ReportError (120, 0, u8ServiceId, 20);

  <bb 9> :
  D.5680 = Valid;

  <bb 10> :
<L7>:
  return D.5680;

}


Dio_ValidatePortForWrite (Dio_PortType PortId, uint8 u8ServiceId)
{
  uint8 CoreId;
  Std_ReturnType Valid;
  Std_ReturnType D.5691;

  <bb 2> :
  Valid = 1;
  CoreId = 0;
  if (PortId <= 4)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _1 = (int) PortId;
  _2 = Dio_aAvailablePinsForWrite[_1];
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _3 = Dio_Config.pau32Dio_PortToPartitionMap;
  _4 = (unsigned int) PortId;
  _5 = _4 * 4;
  _6 = _3 + _5;
  _7 = *_6;
  _8 = (int) CoreId;
  _9 = 1 << _8;
  _10 = _7 & _9;
  _11 = (int) CoreId;
  _12 = _10 >> _11;
  if (_12 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Valid = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  Det_ReportError (120, 0, u8ServiceId, 240);

  <bb 7> :
  goto <bb 9>; [INV]

  <bb 8> :
  Det_ReportError (120, 0, u8ServiceId, 20);

  <bb 9> :
  D.5691 = Valid;

  <bb 10> :
<L7>:
  return D.5691;

}


Dio_ValidateChannelForRead (Dio_ChannelType ChannelId, uint8 u8ServiceId)
{
  uint32 u32ChannelToPartitionMap;
  Dio_ChannelType maxChannelId;
  uint8 CoreId;
  Std_ReturnType Valid;
  Std_ReturnType D.5644;

  <bb 2> :
  Valid = 1;
  CoreId = 0;
  maxChannelId = 144;
  if (ChannelId <= maxChannelId)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _1 = ChannelId >> 5;
  _2 = (int) _1;
  _3 = Dio_aAvailablePinsForRead[_2];
  _4 = (long unsigned int) ChannelId;
  _5 = _4 & 31;
  _6 = _3 >> _5;
  _7 = _6 & 1;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _8 = Dio_Config.pau32Dio_ChannelToPartitionMap;
  _9 = (unsigned int) ChannelId;
  _10 = _9 * 4;
  _11 = _8 + _10;
  u32ChannelToPartitionMap = *_11;
  _12 = (int) CoreId;
  _13 = 1 << _12;
  _14 = u32ChannelToPartitionMap & _13;
  _15 = (int) CoreId;
  _16 = _14 >> _15;
  if (_16 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Valid = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  Det_ReportError (120, 0, u8ServiceId, 240);

  <bb 7> :
  goto <bb 9>; [INV]

  <bb 8> :
  Det_ReportError (120, 0, u8ServiceId, 10);

  <bb 9> :
  D.5644 = Valid;

  <bb 10> :
<L7>:
  return D.5644;

}


Dio_ValidateChannelForWrite (Dio_ChannelType ChannelId, uint8 u8ServiceId)
{
  uint32 u32ChannelToPartitionMap;
  Dio_ChannelType maxChannelId;
  uint8 CoreId;
  Std_ReturnType Valid;
  Std_ReturnType D.5657;

  <bb 2> :
  Valid = 1;
  CoreId = 0;
  maxChannelId = 144;
  if (ChannelId <= maxChannelId)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _1 = ChannelId >> 5;
  _2 = (int) _1;
  _3 = Dio_aAvailablePinsForWrite[_2];
  _4 = (long unsigned int) ChannelId;
  _5 = _4 & 31;
  _6 = _3 >> _5;
  _7 = _6 & 1;
  if (_7 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _8 = Dio_Config.pau32Dio_ChannelToPartitionMap;
  _9 = (unsigned int) ChannelId;
  _10 = _9 * 4;
  _11 = _8 + _10;
  u32ChannelToPartitionMap = *_11;
  _12 = (int) CoreId;
  _13 = 1 << _12;
  _14 = u32ChannelToPartitionMap & _13;
  _15 = (int) CoreId;
  _16 = _14 >> _15;
  if (_16 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Valid = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  Det_ReportError (120, 0, u8ServiceId, 240);

  <bb 7> :
  goto <bb 9>; [INV]

  <bb 8> :
  Det_ReportError (120, 0, u8ServiceId, 10);

  <bb 9> :
  D.5657 = Valid;

  <bb 10> :
<L7>:
  return D.5657;

}


Dio_ValidateChannelLevel (Dio_LevelType Level)
{
  Std_ReturnType Valid;
  Std_ReturnType D.5663;

  <bb 2> :
  Valid = 1;
  if (Level == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  if (Level == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  Valid = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (120, 0, 1, 33);

  <bb 6> :
  D.5663 = Valid;

  <bb 7> :
<L4>:
  return D.5663;

}


