Symbol table:

OsIf_GetElapsed/70 (OsIf_GetElapsed) @05e2aa80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Scheduler_MainFunction/64 
  Calls: 
OsIf_GetCounter/69 (OsIf_GetCounter) @05e2a9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Scheduler_MainFunction/64 
  Calls: 
OsIf_MicrosToTicks/68 (OsIf_MicrosToTicks) @05e2a8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Scheduler_MainFunction/64 
  Calls: 
SchedulerConfig_Ptr/67 (SchedulerConfig_Ptr) @05dc8e58
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Scheduler_GetTimer/62 (read) Scheduler_ReloadTimer/63 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_PeriodTask/59 (read) Scheduler_PeriodTask/59 (read) Scheduler_GetStatusQueue/52 (read) Scheduler_Init/56 (read) Scheduler_Init/56 (read) Scheduler_ReloadTimer/63 (read) Scheduler_ReloadTimer/63 (read) Scheduler_FlushQueue/53 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_ReadQueue/55 (read) Scheduler_Init/56 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_StopTask/57 (read) Scheduler_StartTask/58 (read) Scheduler_PeriodTask/59 (read) Scheduler_StartTimer/60 (read) Scheduler_Init/56 (read) Scheduler_Init/56 (read) Scheduler_StopTimer/61 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) 
  Availability: not_available
  Varpool flags:
Det_ReportError/66 (Det_ReportError) @05dcc7e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Scheduler_MainFunction/64 Scheduler_ReloadTimer/63 Scheduler_ReloadTimer/63 Scheduler_ReloadTimer/63 Scheduler_GetTimer/62 Scheduler_GetTimer/62 Scheduler_StopTimer/61 Scheduler_StopTimer/61 Scheduler_StartTimer/60 Scheduler_StartTimer/60 Scheduler_PeriodTask/59 Scheduler_PeriodTask/59 Scheduler_PeriodTask/59 Scheduler_StartTask/58 Scheduler_StartTask/58 Scheduler_StopTask/57 Scheduler_StopTask/57 Scheduler_Init/56 Scheduler_ReadQueue/55 Scheduler_ReadQueue/55 Scheduler_WriteQueue/54 Scheduler_WriteQueue/54 Scheduler_FlushQueue/53 Scheduler_FlushQueue/53 Scheduler_GetStatusQueue/52 Scheduler_GetStatusQueue/52 Scheduler_GetStatusQueue/52 
  Calls: 
SchedulerCtrl_Ptr/65 (SchedulerCtrl_Ptr) @05dc8dc8
  Type: variable
  Body removed by symtab_remove_unreachable_nodes
  Visibility: external public
  References: 
  Referring: Scheduler_StartTimer/60 (read) Scheduler_GetTimer/62 (read) Scheduler_GetTimer/62 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReloadTimer/63 (read) Scheduler_ReloadTimer/63 (read) Scheduler_ReloadTimer/63 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_StartTimer/60 (read) Scheduler_StartTimer/60 (read) Scheduler_GetStatusQueue/52 (read) Scheduler_GetStatusQueue/52 (read) Scheduler_GetStatusQueue/52 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_FlushQueue/53 (read) Scheduler_FlushQueue/53 (read) Scheduler_FlushQueue/53 (read) Scheduler_FlushQueue/53 (read) Scheduler_FlushQueue/53 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_ReadQueue/55 (read) Scheduler_ReadQueue/55 (read) Scheduler_StopTask/57 (read) Scheduler_StopTask/57 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_WriteQueue/54 (read) Scheduler_StartTask/58 (read) Scheduler_StartTask/58 (read) Scheduler_PeriodTask/59 (read) Scheduler_PeriodTask/59 (read) Scheduler_StartTimer/60 (read) Scheduler_StartTimer/60 (read) Scheduler_ReadQueue/55 (read) Scheduler_StopTimer/61 (read) Scheduler_StopTimer/61 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) Scheduler_MainFunction/64 (read) 
  Availability: not_available
  Varpool flags:
Scheduler_MainFunction/64 (Scheduler_MainFunction) @05dcc000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_GetBit_u32u8_u8/2 Scheduler_GetTimer/62 Bfx_GetBit_u32u8_u8/2 OsIf_GetElapsed/70 Det_ReportError/66 OsIf_GetCounter/69 OsIf_MicrosToTicks/68 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Scheduler_ReloadTimer/63 (Scheduler_ReloadTimer) @05dbeb60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Scheduler_StartTimer/60 Det_ReportError/66 Det_ReportError/66 Det_ReportError/66 
Scheduler_GetTimer/62 (Scheduler_GetTimer) @05dbe620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Scheduler_MainFunction/64 
  Calls: Det_ReportError/66 Det_ReportError/66 
Scheduler_StopTimer/61 (Scheduler_StopTimer) @05dbe0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_ClrBit_u32u8/1 Det_ReportError/66 Det_ReportError/66 
Scheduler_StartTimer/60 (Scheduler_StartTimer) @05dbed20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Scheduler_ReloadTimer/63 
  Calls: Bfx_SetBit_u32u8/0 Det_ReportError/66 Det_ReportError/66 
Scheduler_PeriodTask/59 (Scheduler_PeriodTask) @05dbea80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Det_ReportError/66 Det_ReportError/66 Det_ReportError/66 
Scheduler_StartTask/58 (Scheduler_StartTask) @05dbe7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_SetBit_u32u8/0 Det_ReportError/66 Det_ReportError/66 
Scheduler_StopTask/57 (Scheduler_StopTask) @05dbe540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_ClrBit_u32u8/1 Det_ReportError/66 Det_ReportError/66 
Scheduler_Init/56 (Scheduler_Init) @05dbe2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Scheduler_InitQueue/51 Bfx_PutBit_u32u8u8/17 Bfx_PutBit_u32u8u8/17 Det_ReportError/66 
Scheduler_ReadQueue/55 (Scheduler_ReadQueue) @05dbe000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_SetBit_u32u8/0 Bfx_ClrBit_u32u8/1 Scheduler_GetStatusQueue/52 MemCopy/50 Scheduler_GetStatusQueue/52 Det_ReportError/66 Det_ReportError/66 
Scheduler_WriteQueue/54 (Scheduler_WriteQueue) @05db2b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_SetBit_u32u8/0 Bfx_ClrBit_u32u8/1 Scheduler_GetStatusQueue/52 MemCopy/50 Scheduler_GetStatusQueue/52 Det_ReportError/66 Det_ReportError/66 
Scheduler_FlushQueue/53 (Scheduler_FlushQueue) @05db2620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Bfx_SetBit_u32u8/0 Bfx_ClrBit_u32u8/1 Det_ReportError/66 Det_ReportError/66 
Scheduler_GetStatusQueue/52 (Scheduler_GetStatusQueue) @05db2d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: SchedulerCtrl_Ptr/65 (read) SchedulerConfig_Ptr/67 (read) SchedulerCtrl_Ptr/65 (read) SchedulerCtrl_Ptr/65 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Scheduler_ReadQueue/55 Scheduler_ReadQueue/55 Scheduler_WriteQueue/54 Scheduler_WriteQueue/54 
  Calls: Det_ReportError/66 Bfx_GetBit_u32u8_u8/2 Bfx_GetBit_u32u8_u8/2 Det_ReportError/66 Det_ReportError/66 
Scheduler_InitQueue/51 (Scheduler_InitQueue) @05db2a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Scheduler_Init/56 
  Calls: Bfx_SetBit_u32u8/0 Bfx_ClrBit_u32u8/1 
MemCopy/50 (MemCopy) @05db27e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Scheduler_ReadQueue/55 Scheduler_WriteQueue/54 
  Calls: 
Bfx_PutBit_u32u8u8/17 (Bfx_PutBit_u32u8u8) @05d83b60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Scheduler_Init/56 Scheduler_Init/56 
  Calls: 
Bfx_GetBit_u32u8_u8/2 (Bfx_GetBit_u32u8_u8) @05cb9380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Scheduler_MainFunction/64 Scheduler_MainFunction/64 Scheduler_GetStatusQueue/52 Scheduler_GetStatusQueue/52 
  Calls: 
Bfx_ClrBit_u32u8/1 (Bfx_ClrBit_u32u8) @05cb90e0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Scheduler_StopTimer/61 Scheduler_StopTask/57 Scheduler_ReadQueue/55 Scheduler_WriteQueue/54 Scheduler_FlushQueue/53 Scheduler_InitQueue/51 
  Calls: 
Bfx_SetBit_u32u8/0 (Bfx_SetBit_u32u8) @05cabe00
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: Scheduler_StartTimer/60 Scheduler_StartTask/58 Scheduler_ReadQueue/55 Scheduler_WriteQueue/54 Scheduler_FlushQueue/53 Scheduler_InitQueue/51 
  Calls: 
Scheduler_MainFunction ()
{
  uint8 status;
  uint8 i;
  uint32 elapsed_time;
  uint32 count_value;
  uint32 tick_value;
  long unsigned int D.6065;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.78_1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.79_5;
  _Bool _6;
  _Bool _7;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.80_8;
  long unsigned int _9;
  _Bool _10;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.81_11;
  int _12;
  long unsigned int _13;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.82_14;
  long unsigned int _15;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.83_16;
  int _17;
  long unsigned int _18;
  long unsigned int _19;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.84_20;
  const struct Timer_ConfigType * _21;
  unsigned int _22;
  unsigned int _23;
  const struct Timer_ConfigType * _24;
  void (*<T58f>) (void) _25;
  unsigned char i.85_26;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.86_27;
  unsigned char _28;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.87_29;
  long unsigned int _30;
  _Bool _31;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.88_32;
  int _33;
  long unsigned int _34;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.89_35;
  long unsigned int _36;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.90_37;
  int _38;
  long unsigned int _39;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.91_40;
  int _41;
  long unsigned int _42;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.92_43;
  int _44;
  long unsigned int _45;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.93_46;
  const struct Task_ConfigType * _47;
  unsigned int _48;
  unsigned int _49;
  const struct Task_ConfigType * _50;
  void (*<T58f>) (void) _51;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.94_52;
  int _53;
  unsigned char i.95_54;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.96_55;
  unsigned char _56;
  long unsigned int _81;

  <bb 2> :
  SchedulerConfig_Ptr.78_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.78_1->Tick;
  _3 = _2 * 1000;
  tick_value_71 = OsIf_MicrosToTicks (_3, 1);
  _4 = OsIf_GetCounter (1);
  count_value = _4;
  elapsed_time_74 = 0;
  i_75 = 0;
  status_76 = 0;
  SchedulerCtrl_Ptr.79_5 = SchedulerCtrl_Ptr;
  _6 = SchedulerCtrl_Ptr.79_5->SchedulerInit;
  _7 = ~_6;
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 13, 6);
  status_78 = 1;

  <bb 4> :
  # status_61 = PHI <status_76(2), status_78(3)>
  if (status_61 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 5> :
  # elapsed_time_57 = PHI <elapsed_time_74(4), elapsed_time_58(19)>
  _81 = OsIf_GetElapsed (&count_value, 1);
  elapsed_time_82 = _81 + elapsed_time_57;
  if (elapsed_time_82 >= tick_value_71)
    goto <bb 6>; [INV]
  else
    goto <bb 19>; [INV]

  <bb 6> :
  i_83 = 0;
  goto <bb 11>; [INV]

  <bb 7> :
  SchedulerCtrl_Ptr.80_8 = SchedulerCtrl_Ptr;
  _9 = SchedulerCtrl_Ptr.80_8->TimerFlags;
  _10 = Bfx_GetBit_u32u8_u8 (_9, i_59);
  if (_10 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  SchedulerCtrl_Ptr.81_11 = SchedulerCtrl_Ptr;
  _12 = (int) i_59;
  _13 = SchedulerCtrl_Ptr.81_11->TimerCount[_12];
  SchedulerConfig_Ptr.82_14 = SchedulerConfig_Ptr;
  _15 = SchedulerConfig_Ptr.82_14->Tick;
  SchedulerCtrl_Ptr.83_16 = SchedulerCtrl_Ptr;
  _17 = (int) i_59;
  _18 = _13 - _15;
  SchedulerCtrl_Ptr.83_16->TimerCount[_17] = _18;
  _19 = Scheduler_GetTimer (i_59);
  if (_19 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  SchedulerConfig_Ptr.84_20 = SchedulerConfig_Ptr;
  _21 = SchedulerConfig_Ptr.84_20->TimerPtr;
  _22 = (unsigned int) i_59;
  _23 = _22 * 12;
  _24 = _21 + _23;
  _25 = _24->CallbackFunc;
  _25 ();

  <bb 10> :
  i.85_26 = i_59;
  i_95 = i.85_26 + 1;

  <bb 11> :
  # i_59 = PHI <i_83(6), i_95(10)>
  SchedulerConfig_Ptr.86_27 = SchedulerConfig_Ptr;
  _28 = SchedulerConfig_Ptr.86_27->Timers;
  if (i_59 < _28)
    goto <bb 7>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  i_84 = 0;
  goto <bb 17>; [INV]

  <bb 13> :
  SchedulerCtrl_Ptr.87_29 = SchedulerCtrl_Ptr;
  _30 = SchedulerCtrl_Ptr.87_29->TaskFlags;
  _31 = Bfx_GetBit_u32u8_u8 (_30, i_60);
  if (_31 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  SchedulerCtrl_Ptr.88_32 = SchedulerCtrl_Ptr;
  _33 = (int) i_60;
  _34 = SchedulerCtrl_Ptr.88_32->TaskElapsed[_33];
  SchedulerConfig_Ptr.89_35 = SchedulerConfig_Ptr;
  _36 = SchedulerConfig_Ptr.89_35->Tick;
  SchedulerCtrl_Ptr.90_37 = SchedulerCtrl_Ptr;
  _38 = (int) i_60;
  _39 = _34 + _36;
  SchedulerCtrl_Ptr.90_37->TaskElapsed[_38] = _39;
  SchedulerCtrl_Ptr.91_40 = SchedulerCtrl_Ptr;
  _41 = (int) i_60;
  _42 = SchedulerCtrl_Ptr.91_40->TaskElapsed[_41];
  SchedulerCtrl_Ptr.92_43 = SchedulerCtrl_Ptr;
  _44 = (int) i_60;
  _45 = SchedulerCtrl_Ptr.92_43->TaskPeriod[_44];
  if (_42 >= _45)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  SchedulerConfig_Ptr.93_46 = SchedulerConfig_Ptr;
  _47 = SchedulerConfig_Ptr.93_46->TaskPtr;
  _48 = (unsigned int) i_60;
  _49 = _48 * 12;
  _50 = _47 + _49;
  _51 = _50->TaskFunc;
  _51 ();
  SchedulerCtrl_Ptr.94_52 = SchedulerCtrl_Ptr;
  _53 = (int) i_60;
  SchedulerCtrl_Ptr.94_52->TaskElapsed[_53] = 0;

  <bb 16> :
  i.95_54 = i_60;
  i_90 = i.95_54 + 1;

  <bb 17> :
  # i_60 = PHI <i_84(12), i_90(16)>
  SchedulerConfig_Ptr.96_55 = SchedulerConfig_Ptr;
  _56 = SchedulerConfig_Ptr.96_55->Tasks;
  if (i_60 < _56)
    goto <bb 13>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 18> :
  elapsed_time_85 = 0;

  <bb 19> :
  # elapsed_time_58 = PHI <elapsed_time_82(5), elapsed_time_85(18)>
  goto <bb 5>; [INV]

  <bb 20> :
  count_value ={v} {CLOBBER};
  return;

}


Scheduler_ReloadTimer (TimerType Timer, uint32 NewTimeout)
{
  Std_ReturnType status;
  Std_ReturnType D.6059;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.72_1;
  _Bool _2;
  _Bool _3;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.73_4;
  unsigned char _5;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.74_6;
  long unsigned int _7;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.75_8;
  long unsigned int _9;
  long unsigned int _10;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.76_11;
  int _12;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.77_13;
  int _14;
  Std_ReturnType _37;

  <bb 2> :
  status_23 = 0;
  SchedulerCtrl_Ptr.72_1 = SchedulerCtrl_Ptr;
  _2 = SchedulerCtrl_Ptr.72_1->SchedulerInit;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 12, 6);
  status_26 = 1;

  <bb 4> :
  # status_15 = PHI <status_23(2), status_26(3)>
  SchedulerConfig_Ptr.73_4 = SchedulerConfig_Ptr;
  _5 = SchedulerConfig_Ptr.73_4->Timers;
  if (Timer_27(D) >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (300, 0, 12, 5);
  status_29 = 1;

  <bb 6> :
  # status_16 = PHI <status_15(4), status_29(5)>
  SchedulerConfig_Ptr.74_6 = SchedulerConfig_Ptr;
  _7 = SchedulerConfig_Ptr.74_6->Tick;
  if (NewTimeout_30(D) < _7)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  SchedulerConfig_Ptr.75_8 = SchedulerConfig_Ptr;
  _9 = SchedulerConfig_Ptr.75_8->Tick;
  _10 = NewTimeout_30(D) % _9;
  if (_10 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Det_ReportError (300, 0, 12, 4);
  status_32 = 1;

  <bb 9> :
  # status_17 = PHI <status_16(7), status_32(8)>
  if (status_17 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  SchedulerCtrl_Ptr.76_11 = SchedulerCtrl_Ptr;
  _12 = (int) Timer_27(D);
  SchedulerCtrl_Ptr.76_11->TimerTimeout[_12] = NewTimeout_30(D);
  SchedulerCtrl_Ptr.77_13 = SchedulerCtrl_Ptr;
  _14 = (int) Timer_27(D);
  SchedulerCtrl_Ptr.77_13->TimerCount[_14] = NewTimeout_30(D);
  Scheduler_StartTimer (Timer_27(D));
  status_36 = 0;

  <bb 11> :
  # status_18 = PHI <status_17(9), status_36(10)>
  _37 = status_18;

  <bb 12> :
<L9>:
  return _37;

}


Scheduler_GetTimer (TimerType Timer)
{
  uint8 status;
  uint32 counter_value;
  uint32 D.6048;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.69_1;
  _Bool _2;
  _Bool _3;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.70_4;
  unsigned char _5;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.71_6;
  int _7;
  uint32 _26;

  <bb 2> :
  counter_value_15 = 0;
  status_16 = 0;
  SchedulerCtrl_Ptr.69_1 = SchedulerCtrl_Ptr;
  _2 = SchedulerCtrl_Ptr.69_1->SchedulerInit;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 11, 6);
  status_19 = 1;
  counter_value_20 = 1;

  <bb 4> :
  # counter_value_8 = PHI <counter_value_15(2), counter_value_20(3)>
  # status_11 = PHI <status_16(2), status_19(3)>
  SchedulerConfig_Ptr.70_4 = SchedulerConfig_Ptr;
  _5 = SchedulerConfig_Ptr.70_4->Timers;
  if (Timer_21(D) >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (300, 0, 11, 5);
  status_23 = 1;
  counter_value_24 = 1;

  <bb 6> :
  # counter_value_9 = PHI <counter_value_8(4), counter_value_24(5)>
  # status_12 = PHI <status_11(4), status_23(5)>
  if (status_12 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  SchedulerCtrl_Ptr.71_6 = SchedulerCtrl_Ptr;
  _7 = (int) Timer_21(D);
  counter_value_25 = SchedulerCtrl_Ptr.71_6->TimerCount[_7];

  <bb 8> :
  # counter_value_10 = PHI <counter_value_9(6), counter_value_25(7)>
  _26 = counter_value_10;

  <bb 9> :
<L6>:
  return _26;

}


Scheduler_StopTimer (TimerType Timer)
{
  Std_ReturnType status;
  Std_ReturnType D.6040;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.66_1;
  _Bool _2;
  _Bool _3;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.67_4;
  unsigned char _5;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.68_6;
  uint32 * _7;
  Std_ReturnType _23;

  <bb 2> :
  status_14 = 0;
  SchedulerCtrl_Ptr.66_1 = SchedulerCtrl_Ptr;
  _2 = SchedulerCtrl_Ptr.66_1->SchedulerInit;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 10, 6);
  status_17 = 1;

  <bb 4> :
  # status_8 = PHI <status_14(2), status_17(3)>
  SchedulerConfig_Ptr.67_4 = SchedulerConfig_Ptr;
  _5 = SchedulerConfig_Ptr.67_4->Timers;
  if (Timer_18(D) >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (300, 0, 10, 5);
  status_20 = 1;

  <bb 6> :
  # status_9 = PHI <status_8(4), status_20(5)>
  if (status_9 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  SchedulerCtrl_Ptr.68_6 = SchedulerCtrl_Ptr;
  _7 = &SchedulerCtrl_Ptr.68_6->TimerFlags;
  Bfx_ClrBit_u32u8 (_7, Timer_18(D));
  status_22 = 0;

  <bb 8> :
  # status_10 = PHI <status_9(6), status_22(7)>
  _23 = status_10;

  <bb 9> :
<L6>:
  return _23;

}


Scheduler_StartTimer (TimerType Timer)
{
  Std_ReturnType status;
  Std_ReturnType D.6032;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.60_1;
  _Bool _2;
  _Bool _3;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.61_4;
  unsigned char _5;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.62_6;
  uint32 * _7;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.63_8;
  int _9;
  long unsigned int _10;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.64_11;
  int _12;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.65_13;
  int _14;
  long unsigned int _15;
  Std_ReturnType _33;

  <bb 2> :
  status_23 = 0;
  SchedulerCtrl_Ptr.60_1 = SchedulerCtrl_Ptr;
  _2 = SchedulerCtrl_Ptr.60_1->SchedulerInit;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 9, 6);
  status_26 = 1;

  <bb 4> :
  # status_16 = PHI <status_23(2), status_26(3)>
  SchedulerConfig_Ptr.61_4 = SchedulerConfig_Ptr;
  _5 = SchedulerConfig_Ptr.61_4->Timers;
  if (Timer_27(D) >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (300, 0, 9, 5);
  status_29 = 1;

  <bb 6> :
  # status_17 = PHI <status_16(4), status_29(5)>
  if (status_17 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  SchedulerCtrl_Ptr.62_6 = SchedulerCtrl_Ptr;
  _7 = &SchedulerCtrl_Ptr.62_6->TimerFlags;
  Bfx_SetBit_u32u8 (_7, Timer_27(D));
  SchedulerCtrl_Ptr.63_8 = SchedulerCtrl_Ptr;
  _9 = (int) Timer_27(D);
  _10 = SchedulerCtrl_Ptr.63_8->TimerCount[_9];
  if (_10 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  SchedulerCtrl_Ptr.64_11 = SchedulerCtrl_Ptr;
  _12 = (int) Timer_27(D);
  SchedulerCtrl_Ptr.65_13 = SchedulerCtrl_Ptr;
  _14 = (int) Timer_27(D);
  _15 = SchedulerCtrl_Ptr.64_11->TimerTimeout[_12];
  SchedulerCtrl_Ptr.65_13->TimerCount[_14] = _15;

  <bb 9> :
  status_32 = 0;

  <bb 10> :
  # status_18 = PHI <status_17(6), status_32(9)>
  _33 = status_18;

  <bb 11> :
<L8>:
  return _33;

}


Scheduler_PeriodTask (TaskType Task, uint32 NewPeriod)
{
  Std_ReturnType status;
  Std_ReturnType D.6022;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.55_1;
  _Bool _2;
  _Bool _3;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.56_4;
  unsigned char _5;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.57_6;
  long unsigned int _7;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.58_8;
  long unsigned int _9;
  long unsigned int _10;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.59_11;
  int _12;
  Std_ReturnType _33;

  <bb 2> :
  status_21 = 0;
  SchedulerCtrl_Ptr.55_1 = SchedulerCtrl_Ptr;
  _2 = SchedulerCtrl_Ptr.55_1->SchedulerInit;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 8, 6);
  status_24 = 1;

  <bb 4> :
  # status_13 = PHI <status_21(2), status_24(3)>
  SchedulerConfig_Ptr.56_4 = SchedulerConfig_Ptr;
  _5 = SchedulerConfig_Ptr.56_4->Tasks;
  if (Task_25(D) >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (300, 0, 8, 3);
  status_27 = 1;

  <bb 6> :
  # status_14 = PHI <status_13(4), status_27(5)>
  SchedulerConfig_Ptr.57_6 = SchedulerConfig_Ptr;
  _7 = SchedulerConfig_Ptr.57_6->Tick;
  if (NewPeriod_28(D) < _7)
    goto <bb 8>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  SchedulerConfig_Ptr.58_8 = SchedulerConfig_Ptr;
  _9 = SchedulerConfig_Ptr.58_8->Tick;
  _10 = NewPeriod_28(D) % _9;
  if (_10 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  Det_ReportError (300, 0, 8, 4);
  status_30 = 1;

  <bb 9> :
  # status_15 = PHI <status_14(7), status_30(8)>
  if (status_15 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  SchedulerCtrl_Ptr.59_11 = SchedulerCtrl_Ptr;
  _12 = (int) Task_25(D);
  SchedulerCtrl_Ptr.59_11->TaskPeriod[_12] = NewPeriod_28(D);
  status_32 = 0;

  <bb 11> :
  # status_16 = PHI <status_15(9), status_32(10)>
  _33 = status_16;

  <bb 12> :
<L9>:
  return _33;

}


Scheduler_StartTask (TaskType Task)
{
  Std_ReturnType status;
  Std_ReturnType D.6011;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.52_1;
  _Bool _2;
  _Bool _3;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.53_4;
  unsigned char _5;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.54_6;
  uint32 * _7;
  Std_ReturnType _23;

  <bb 2> :
  status_14 = 0;
  SchedulerCtrl_Ptr.52_1 = SchedulerCtrl_Ptr;
  _2 = SchedulerCtrl_Ptr.52_1->SchedulerInit;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 6, 6);
  status_17 = 1;

  <bb 4> :
  # status_8 = PHI <status_14(2), status_17(3)>
  SchedulerConfig_Ptr.53_4 = SchedulerConfig_Ptr;
  _5 = SchedulerConfig_Ptr.53_4->Tasks;
  if (Task_18(D) >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (300, 0, 6, 3);
  status_20 = 1;

  <bb 6> :
  # status_9 = PHI <status_8(4), status_20(5)>
  if (status_9 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  SchedulerCtrl_Ptr.54_6 = SchedulerCtrl_Ptr;
  _7 = &SchedulerCtrl_Ptr.54_6->TaskFlags;
  Bfx_SetBit_u32u8 (_7, Task_18(D));
  status_22 = 0;

  <bb 8> :
  # status_10 = PHI <status_9(6), status_22(7)>
  _23 = status_10;

  <bb 9> :
<L6>:
  return _23;

}


Scheduler_StopTask (TaskType Task)
{
  Std_ReturnType status;
  Std_ReturnType D.6003;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.49_1;
  _Bool _2;
  _Bool _3;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.50_4;
  unsigned char _5;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.51_6;
  uint32 * _7;
  Std_ReturnType _23;

  <bb 2> :
  status_14 = 0;
  SchedulerCtrl_Ptr.49_1 = SchedulerCtrl_Ptr;
  _2 = SchedulerCtrl_Ptr.49_1->SchedulerInit;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 7, 6);
  status_17 = 1;

  <bb 4> :
  # status_8 = PHI <status_14(2), status_17(3)>
  SchedulerConfig_Ptr.50_4 = SchedulerConfig_Ptr;
  _5 = SchedulerConfig_Ptr.50_4->Tasks;
  if (Task_18(D) >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (300, 0, 7, 3);
  status_20 = 1;

  <bb 6> :
  # status_9 = PHI <status_8(4), status_20(5)>
  if (status_9 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  SchedulerCtrl_Ptr.51_6 = SchedulerCtrl_Ptr;
  _7 = &SchedulerCtrl_Ptr.51_6->TaskFlags;
  Bfx_ClrBit_u32u8 (_7, Task_18(D));
  status_22 = 0;

  <bb 8> :
  # status_10 = PHI <status_9(6), status_22(7)>
  _23 = status_10;

  <bb 9> :
<L6>:
  return _23;

}


Scheduler_Init (struct Scheduler_CtrlType * SchedulerPtr)
{
  uint8 i;
  Std_ReturnType status;
  Std_ReturnType D.5992;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.42_1;
  const struct Task_ConfigType * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Task_ConfigType * _5;
  int _6;
  long unsigned int _7;
  int _8;
  uint32 * _9;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.43_10;
  const struct Task_ConfigType * _11;
  unsigned int _12;
  unsigned int _13;
  const struct Task_ConfigType * _14;
  unsigned char _15;
  _Bool _16;
  unsigned char i.44_17;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.45_18;
  const struct Timer_ConfigType * _19;
  unsigned int _20;
  unsigned int _21;
  const struct Timer_ConfigType * _22;
  int _23;
  long unsigned int _24;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.46_25;
  const struct Timer_ConfigType * _26;
  unsigned int _27;
  unsigned int _28;
  const struct Timer_ConfigType * _29;
  int _30;
  long unsigned int _31;
  uint32 * _32;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.47_33;
  const struct Timer_ConfigType * _34;
  unsigned int _35;
  unsigned int _36;
  const struct Timer_ConfigType * _37;
  unsigned char _38;
  _Bool _39;
  unsigned char i.48_40;
  Std_ReturnType _66;

  <bb 2> :
  status_48 = 0;
  i_49 = 0;
  if (SchedulerPtr_50(D) == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 0, 0);
  status_53 = 1;

  <bb 4> :
  # status_41 = PHI <status_48(2), status_53(3)>
  if (status_41 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  i_54 = 0;
  goto <bb 7>; [INV]

  <bb 6> :
  SchedulerConfig_Ptr.42_1 = SchedulerConfig_Ptr;
  _2 = SchedulerConfig_Ptr.42_1->TaskPtr;
  _3 = (unsigned int) i_42;
  _4 = _3 * 12;
  _5 = _2 + _4;
  _6 = (int) i_42;
  _7 = _5->InitPeriod;
  SchedulerPtr_50(D)->TaskPeriod[_6] = _7;
  _8 = (int) i_42;
  SchedulerPtr_50(D)->TaskElapsed[_8] = 0;
  _9 = &SchedulerPtr_50(D)->TaskFlags;
  SchedulerConfig_Ptr.43_10 = SchedulerConfig_Ptr;
  _11 = SchedulerConfig_Ptr.43_10->TaskPtr;
  _12 = (unsigned int) i_42;
  _13 = _12 * 12;
  _14 = _11 + _13;
  _15 = _14->InitFlag;
  _16 = _15 != 0;
  Bfx_PutBit_u32u8u8 (_9, i_42, _16);
  i.44_17 = i_42;
  i_65 = i.44_17 + 1;

  <bb 7> :
  # i_42 = PHI <i_54(5), i_65(6)>
  if (i_42 <= 1)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  i_55 = 0;
  goto <bb 10>; [INV]

  <bb 9> :
  SchedulerConfig_Ptr.45_18 = SchedulerConfig_Ptr;
  _19 = SchedulerConfig_Ptr.45_18->TimerPtr;
  _20 = (unsigned int) i_43;
  _21 = _20 * 12;
  _22 = _19 + _21;
  _23 = (int) i_43;
  _24 = _22->InitTimeout;
  SchedulerPtr_50(D)->TimerTimeout[_23] = _24;
  SchedulerConfig_Ptr.46_25 = SchedulerConfig_Ptr;
  _26 = SchedulerConfig_Ptr.46_25->TimerPtr;
  _27 = (unsigned int) i_43;
  _28 = _27 * 12;
  _29 = _26 + _28;
  _30 = (int) i_43;
  _31 = _29->InitTimeout;
  SchedulerPtr_50(D)->TimerCount[_30] = _31;
  _32 = &SchedulerPtr_50(D)->TimerFlags;
  SchedulerConfig_Ptr.47_33 = SchedulerConfig_Ptr;
  _34 = SchedulerConfig_Ptr.47_33->TimerPtr;
  _35 = (unsigned int) i_43;
  _36 = _35 * 12;
  _37 = _34 + _36;
  _38 = _37->InitFlag;
  _39 = _38 != 0;
  Bfx_PutBit_u32u8u8 (_32, i_43, _39);
  i.48_40 = i_43;
  i_61 = i.48_40 + 1;

  <bb 10> :
  # i_43 = PHI <i_55(8), i_61(9)>
  if (i_43 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  Scheduler_InitQueue (SchedulerPtr_50(D));
  SchedulerPtr_50(D)->SchedulerInit = 1;

  <bb 12> :
  _66 = status_41;

  <bb 13> :
<L10>:
  return _66;

}


Scheduler_ReadQueue (QueueType Queue, void * Data)
{
  uint32 actual_add;
  uint32 base_add;
  Std_ReturnType status;
  Std_ReturnType D.5986;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.27_1;
  _Bool _2;
  _Bool _3;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.28_4;
  unsigned char _5;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.29_6;
  const struct Queue_ConfigType * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Queue_ConfigType * _10;
  void * _11;
  unsigned char _12;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.30_13;
  int _14;
  long unsigned int _15;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.31_16;
  const struct Queue_ConfigType * _17;
  unsigned int _18;
  unsigned int _19;
  const struct Queue_ConfigType * _20;
  unsigned char _21;
  long unsigned int _22;
  long unsigned int _23;
  void * actual_add.32_24;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.33_25;
  const struct Queue_ConfigType * _26;
  unsigned int _27;
  unsigned int _28;
  const struct Queue_ConfigType * _29;
  unsigned char _30;
  long unsigned int _31;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.34_32;
  int _33;
  long unsigned int _34;
  long unsigned int _35;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.35_36;
  int _37;
  long unsigned int _38;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.36_39;
  const struct Queue_ConfigType * _40;
  unsigned int _41;
  unsigned int _42;
  const struct Queue_ConfigType * _43;
  long unsigned int _44;
  long unsigned int _45;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.37_46;
  int _47;
  unsigned char _48;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.38_49;
  uint32 * _50;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.39_51;
  int _52;
  long unsigned int _53;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.40_54;
  int _55;
  long unsigned int _56;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.41_57;
  uint32 * _58;
  Std_ReturnType _87;

  <bb 2> :
  status_68 = 0;
  SchedulerCtrl_Ptr.27_1 = SchedulerCtrl_Ptr;
  _2 = SchedulerCtrl_Ptr.27_1->SchedulerInit;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 5, 6);
  status_71 = 1;

  <bb 4> :
  # status_59 = PHI <status_68(2), status_71(3)>
  SchedulerConfig_Ptr.28_4 = SchedulerConfig_Ptr;
  _5 = SchedulerConfig_Ptr.28_4->Queues;
  if (Queue_72(D) >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (300, 0, 5, 1);
  status_74 = 1;

  <bb 6> :
  # status_60 = PHI <status_59(4), status_74(5)>
  if (status_60 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 7> :
  SchedulerConfig_Ptr.29_6 = SchedulerConfig_Ptr;
  _7 = SchedulerConfig_Ptr.29_6->QueuePtr;
  _8 = (unsigned int) Queue_72(D);
  _9 = _8 * 12;
  _10 = _7 + _9;
  _11 = _10->Buffer;
  base_add_75 = (uint32) _11;
  actual_add_76 = 0;
  _12 = Scheduler_GetStatusQueue (Queue_72(D), 1);
  if (_12 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 8> :
  SchedulerCtrl_Ptr.30_13 = SchedulerCtrl_Ptr;
  _14 = (int) Queue_72(D);
  _15 = SchedulerCtrl_Ptr.30_13->QueueTails[_14];
  SchedulerConfig_Ptr.31_16 = SchedulerConfig_Ptr;
  _17 = SchedulerConfig_Ptr.31_16->QueuePtr;
  _18 = (unsigned int) Queue_72(D);
  _19 = _18 * 12;
  _20 = _17 + _19;
  _21 = _20->Size;
  _22 = (long unsigned int) _21;
  _23 = _15 * _22;
  actual_add_78 = base_add_75 + _23;
  actual_add.32_24 = (void *) actual_add_78;
  SchedulerConfig_Ptr.33_25 = SchedulerConfig_Ptr;
  _26 = SchedulerConfig_Ptr.33_25->QueuePtr;
  _27 = (unsigned int) Queue_72(D);
  _28 = _27 * 12;
  _29 = _26 + _28;
  _30 = _29->Size;
  _31 = (long unsigned int) _30;
  MemCopy (Data_79(D), actual_add.32_24, _31);
  SchedulerCtrl_Ptr.34_32 = SchedulerCtrl_Ptr;
  _33 = (int) Queue_72(D);
  _34 = SchedulerCtrl_Ptr.34_32->QueueTails[_33];
  _35 = _34 + 1;
  SchedulerCtrl_Ptr.34_32->QueueTails[_33] = _35;
  SchedulerCtrl_Ptr.35_36 = SchedulerCtrl_Ptr;
  _37 = (int) Queue_72(D);
  _38 = SchedulerCtrl_Ptr.35_36->QueueTails[_37];
  SchedulerConfig_Ptr.36_39 = SchedulerConfig_Ptr;
  _40 = SchedulerConfig_Ptr.36_39->QueuePtr;
  _41 = (unsigned int) Queue_72(D);
  _42 = _41 * 12;
  _43 = _40 + _42;
  _44 = _43->Elements;
  _45 = _44 + 4294967295;
  if (_38 > _45)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  SchedulerCtrl_Ptr.37_46 = SchedulerCtrl_Ptr;
  _47 = (int) Queue_72(D);
  SchedulerCtrl_Ptr.37_46->QueueTails[_47] = 0;

  <bb 10> :
  _48 = Scheduler_GetStatusQueue (Queue_72(D), 2);
  if (_48 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  SchedulerCtrl_Ptr.38_49 = SchedulerCtrl_Ptr;
  _50 = &SchedulerCtrl_Ptr.38_49->QueueFulls;
  Bfx_ClrBit_u32u8 (_50, Queue_72(D));

  <bb 12> :
  SchedulerCtrl_Ptr.39_51 = SchedulerCtrl_Ptr;
  _52 = (int) Queue_72(D);
  _53 = SchedulerCtrl_Ptr.39_51->QueueTails[_52];
  SchedulerCtrl_Ptr.40_54 = SchedulerCtrl_Ptr;
  _55 = (int) Queue_72(D);
  _56 = SchedulerCtrl_Ptr.40_54->QueueHeads[_55];
  if (_53 == _56)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  SchedulerCtrl_Ptr.41_57 = SchedulerCtrl_Ptr;
  _58 = &SchedulerCtrl_Ptr.41_57->QueueEmpties;
  Bfx_SetBit_u32u8 (_58, Queue_72(D));

  <bb 14> :
  status_86 = 0;

  <bb 15> :
  # status_61 = PHI <status_60(6), status_60(7), status_86(14)>
  _87 = status_61;

  <bb 16> :
<L14>:
  return _87;

}


Scheduler_WriteQueue (QueueType Queue, void * Data)
{
  uint32 actual_add;
  uint32 base_add;
  Std_ReturnType status;
  Std_ReturnType D.5970;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.12_1;
  _Bool _2;
  _Bool _3;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.13_4;
  unsigned char _5;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.14_6;
  const struct Queue_ConfigType * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Queue_ConfigType * _10;
  void * _11;
  unsigned char _12;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.15_13;
  int _14;
  long unsigned int _15;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.16_16;
  const struct Queue_ConfigType * _17;
  unsigned int _18;
  unsigned int _19;
  const struct Queue_ConfigType * _20;
  unsigned char _21;
  long unsigned int _22;
  long unsigned int _23;
  void * actual_add.17_24;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.18_25;
  const struct Queue_ConfigType * _26;
  unsigned int _27;
  unsigned int _28;
  const struct Queue_ConfigType * _29;
  unsigned char _30;
  long unsigned int _31;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.19_32;
  int _33;
  long unsigned int _34;
  long unsigned int _35;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.20_36;
  int _37;
  long unsigned int _38;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.21_39;
  const struct Queue_ConfigType * _40;
  unsigned int _41;
  unsigned int _42;
  const struct Queue_ConfigType * _43;
  long unsigned int _44;
  long unsigned int _45;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.22_46;
  int _47;
  unsigned char _48;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.23_49;
  uint32 * _50;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.24_51;
  int _52;
  long unsigned int _53;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.25_54;
  int _55;
  long unsigned int _56;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.26_57;
  uint32 * _58;
  Std_ReturnType _87;

  <bb 2> :
  status_68 = 0;
  SchedulerCtrl_Ptr.12_1 = SchedulerCtrl_Ptr;
  _2 = SchedulerCtrl_Ptr.12_1->SchedulerInit;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 4, 6);
  status_71 = 1;

  <bb 4> :
  # status_59 = PHI <status_68(2), status_71(3)>
  SchedulerConfig_Ptr.13_4 = SchedulerConfig_Ptr;
  _5 = SchedulerConfig_Ptr.13_4->Queues;
  if (Queue_72(D) >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (300, 0, 4, 1);
  status_74 = 1;

  <bb 6> :
  # status_60 = PHI <status_59(4), status_74(5)>
  if (status_60 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 7> :
  SchedulerConfig_Ptr.14_6 = SchedulerConfig_Ptr;
  _7 = SchedulerConfig_Ptr.14_6->QueuePtr;
  _8 = (unsigned int) Queue_72(D);
  _9 = _8 * 12;
  _10 = _7 + _9;
  _11 = _10->Buffer;
  base_add_75 = (uint32) _11;
  actual_add_76 = 0;
  _12 = Scheduler_GetStatusQueue (Queue_72(D), 2);
  if (_12 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 8> :
  SchedulerCtrl_Ptr.15_13 = SchedulerCtrl_Ptr;
  _14 = (int) Queue_72(D);
  _15 = SchedulerCtrl_Ptr.15_13->QueueHeads[_14];
  SchedulerConfig_Ptr.16_16 = SchedulerConfig_Ptr;
  _17 = SchedulerConfig_Ptr.16_16->QueuePtr;
  _18 = (unsigned int) Queue_72(D);
  _19 = _18 * 12;
  _20 = _17 + _19;
  _21 = _20->Size;
  _22 = (long unsigned int) _21;
  _23 = _15 * _22;
  actual_add_78 = base_add_75 + _23;
  actual_add.17_24 = (void *) actual_add_78;
  SchedulerConfig_Ptr.18_25 = SchedulerConfig_Ptr;
  _26 = SchedulerConfig_Ptr.18_25->QueuePtr;
  _27 = (unsigned int) Queue_72(D);
  _28 = _27 * 12;
  _29 = _26 + _28;
  _30 = _29->Size;
  _31 = (long unsigned int) _30;
  MemCopy (actual_add.17_24, Data_79(D), _31);
  SchedulerCtrl_Ptr.19_32 = SchedulerCtrl_Ptr;
  _33 = (int) Queue_72(D);
  _34 = SchedulerCtrl_Ptr.19_32->QueueHeads[_33];
  _35 = _34 + 1;
  SchedulerCtrl_Ptr.19_32->QueueHeads[_33] = _35;
  SchedulerCtrl_Ptr.20_36 = SchedulerCtrl_Ptr;
  _37 = (int) Queue_72(D);
  _38 = SchedulerCtrl_Ptr.20_36->QueueHeads[_37];
  SchedulerConfig_Ptr.21_39 = SchedulerConfig_Ptr;
  _40 = SchedulerConfig_Ptr.21_39->QueuePtr;
  _41 = (unsigned int) Queue_72(D);
  _42 = _41 * 12;
  _43 = _40 + _42;
  _44 = _43->Elements;
  _45 = _44 + 4294967295;
  if (_38 > _45)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  SchedulerCtrl_Ptr.22_46 = SchedulerCtrl_Ptr;
  _47 = (int) Queue_72(D);
  SchedulerCtrl_Ptr.22_46->QueueHeads[_47] = 0;

  <bb 10> :
  _48 = Scheduler_GetStatusQueue (Queue_72(D), 1);
  if (_48 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  SchedulerCtrl_Ptr.23_49 = SchedulerCtrl_Ptr;
  _50 = &SchedulerCtrl_Ptr.23_49->QueueEmpties;
  Bfx_ClrBit_u32u8 (_50, Queue_72(D));

  <bb 12> :
  SchedulerCtrl_Ptr.24_51 = SchedulerCtrl_Ptr;
  _52 = (int) Queue_72(D);
  _53 = SchedulerCtrl_Ptr.24_51->QueueHeads[_52];
  SchedulerCtrl_Ptr.25_54 = SchedulerCtrl_Ptr;
  _55 = (int) Queue_72(D);
  _56 = SchedulerCtrl_Ptr.25_54->QueueTails[_55];
  if (_53 == _56)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  SchedulerCtrl_Ptr.26_57 = SchedulerCtrl_Ptr;
  _58 = &SchedulerCtrl_Ptr.26_57->QueueFulls;
  Bfx_SetBit_u32u8 (_58, Queue_72(D));

  <bb 14> :
  status_86 = 0;

  <bb 15> :
  # status_61 = PHI <status_60(6), status_60(7), status_86(14)>
  _87 = status_61;

  <bb 16> :
<L14>:
  return _87;

}


Scheduler_FlushQueue (QueueType Queue)
{
  Std_ReturnType status;
  Std_ReturnType D.5954;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.6_1;
  _Bool _2;
  _Bool _3;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.7_4;
  unsigned char _5;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.8_6;
  int _7;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.9_8;
  int _9;
  long unsigned int _10;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.10_11;
  uint32 * _12;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.11_13;
  uint32 * _14;
  Std_ReturnType _32;

  <bb 2> :
  status_21 = 0;
  SchedulerCtrl_Ptr.6_1 = SchedulerCtrl_Ptr;
  _2 = SchedulerCtrl_Ptr.6_1->SchedulerInit;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 3, 6);
  status_24 = 1;

  <bb 4> :
  # status_15 = PHI <status_21(2), status_24(3)>
  SchedulerConfig_Ptr.7_4 = SchedulerConfig_Ptr;
  _5 = SchedulerConfig_Ptr.7_4->Queues;
  if (Queue_25(D) >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (300, 0, 3, 1);
  status_27 = 1;

  <bb 6> :
  # status_16 = PHI <status_15(4), status_27(5)>
  if (status_16 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  SchedulerCtrl_Ptr.8_6 = SchedulerCtrl_Ptr;
  _7 = (int) Queue_25(D);
  SchedulerCtrl_Ptr.9_8 = SchedulerCtrl_Ptr;
  _9 = (int) Queue_25(D);
  _10 = SchedulerCtrl_Ptr.8_6->QueueHeads[_7];
  SchedulerCtrl_Ptr.9_8->QueueTails[_9] = _10;
  SchedulerCtrl_Ptr.10_11 = SchedulerCtrl_Ptr;
  _12 = &SchedulerCtrl_Ptr.10_11->QueueFulls;
  Bfx_ClrBit_u32u8 (_12, Queue_25(D));
  SchedulerCtrl_Ptr.11_13 = SchedulerCtrl_Ptr;
  _14 = &SchedulerCtrl_Ptr.11_13->QueueEmpties;
  Bfx_SetBit_u32u8 (_14, Queue_25(D));
  status_31 = 0;

  <bb 8> :
  # status_17 = PHI <status_16(6), status_31(7)>
  _32 = status_17;

  <bb 9> :
<L6>:
  return _32;

}


Scheduler_GetStatusQueue (QueueType Queue, uint8 Status)
{
  uint8 status;
  uint8 D.5944;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.2_1;
  _Bool _2;
  _Bool _3;
  const struct Scheduler_ConfigType * SchedulerConfig_Ptr.3_4;
  unsigned char _5;
  int _6;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.4_7;
  long unsigned int _8;
  _Bool _9;
  struct Scheduler_CtrlType * SchedulerCtrl_Ptr.5_10;
  long unsigned int _11;
  _Bool _12;
  uint8 _33;

  <bb 2> :
  status_19 = 0;
  SchedulerCtrl_Ptr.2_1 = SchedulerCtrl_Ptr;
  _2 = SchedulerCtrl_Ptr.2_1->SchedulerInit;
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Det_ReportError (300, 0, 2, 6);
  status_22 = 1;

  <bb 4> :
  # status_13 = PHI <status_19(2), status_22(3)>
  SchedulerConfig_Ptr.3_4 = SchedulerConfig_Ptr;
  _5 = SchedulerConfig_Ptr.3_4->Queues;
  if (Queue_23(D) >= _5)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Det_ReportError (300, 0, 2, 1);
  status_25 = 1;

  <bb 6> :
  # status_14 = PHI <status_13(4), status_25(5)>
  if (status_14 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  _6 = (int) Status_26(D);
  switch (_6) <default: <L7> [INV], case 1: <L5> [INV], case 2: <L6> [INV]>

  <bb 8> :
<L5>:
  SchedulerCtrl_Ptr.4_7 = SchedulerCtrl_Ptr;
  _8 = SchedulerCtrl_Ptr.4_7->QueueEmpties;
  _9 = Bfx_GetBit_u32u8_u8 (_8, Queue_23(D));
  status_30 = (uint8) _9;
  goto <bb 11>; [INV]

  <bb 9> :
<L6>:
  SchedulerCtrl_Ptr.5_10 = SchedulerCtrl_Ptr;
  _11 = SchedulerCtrl_Ptr.5_10->QueueFulls;
  _12 = Bfx_GetBit_u32u8_u8 (_11, Queue_23(D));
  status_28 = (uint8) _12;
  goto <bb 11>; [INV]

  <bb 10> :
<L7>:
  Det_ReportError (300, 0, 2, 2);
  status_32 = 1;

  <bb 11> :
  # status_15 = PHI <status_14(6), status_30(8), status_28(9), status_32(10)>
  _33 = status_15;

  <bb 12> :
<L10>:
  return _33;

}


Scheduler_InitQueue (struct Scheduler_CtrlType * SchedulerPtr)
{
  uint8 i;
  int _1;
  int _2;
  uint32 * _3;
  uint32 * _4;
  unsigned char i.1_5;

  <bb 2> :
  i_8 = 0;
  i_9 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (int) i_6;
  SchedulerPtr_11(D)->QueueHeads[_1] = 0;
  _2 = (int) i_6;
  SchedulerPtr_11(D)->QueueTails[_2] = 0;
  _3 = &SchedulerPtr_11(D)->QueueFulls;
  Bfx_ClrBit_u32u8 (_3, i_6);
  _4 = &SchedulerPtr_11(D)->QueueEmpties;
  Bfx_SetBit_u32u8 (_4, i_6);
  i.1_5 = i_6;
  i_16 = i.1_5 + 1;

  <bb 4> :
  # i_6 = PHI <i_9(2), i_16(3)>
  if (i_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


MemCopy (void * Dest, void * Src, uint32 Size)
{
  uint8 * Ptr_src;
  uint8 * Ptr_dest;
  uint8 i;
  sizetype _1;
  uint8 * _2;
  sizetype _3;
  uint8 * _4;
  unsigned char _5;
  unsigned char i.0_6;
  long unsigned int _7;

  <bb 2> :
  i_10 = 0;
  Ptr_dest_12 = Dest_11(D);
  Ptr_src_14 = Src_13(D);
  i_15 = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = (sizetype) i_8;
  _2 = Ptr_src_14 + _1;
  _3 = (sizetype) i_8;
  _4 = Ptr_dest_12 + _3;
  _5 = *_2;
  *_4 = _5;
  i.0_6 = i_8;
  i_19 = i.0_6 + 1;

  <bb 4> :
  # i_8 = PHI <i_15(2), i_19(3)>
  _7 = (long unsigned int) i_8;
  if (Size_17(D) > _7)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return;

}


Bfx_PutBit_u32u8u8 (uint32 * Data, uint8 BitPn, boolean Status)
{
  long unsigned int _1;
  int _2;
  int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  int _7;
  int _8;
  int _9;
  long unsigned int _10;
  long unsigned int _11;

  <bb 2> :
  if (Status_13(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 = *Data_15(D);
  _2 = (int) BitPn_16(D);
  _3 = 1 << _2;
  _4 = (long unsigned int) _3;
  _5 = _1 | _4;
  *Data_15(D) = _5;
  goto <bb 5>; [INV]

  <bb 4> :
  _6 = *Data_15(D);
  _7 = (int) BitPn_16(D);
  _8 = 1 << _7;
  _9 = ~_8;
  _10 = (long unsigned int) _9;
  _11 = _6 & _10;
  *Data_15(D) = _11;

  <bb 5> :
  return;

}


Bfx_GetBit_u32u8_u8 (uint32 Data, uint8 BitPn)
{
  boolean Result;
  boolean D.5946;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  boolean _9;

  <bb 2> :
  Result_5 = 0;
  _1 = (int) BitPn_6(D);
  _2 = 1 << _1;
  _3 = (long unsigned int) _2;
  _4 = Data_7(D) & _3;
  Result_8 = _4 != 0;
  _9 = Result_8;

  <bb 3> :
<L0>:
  return _9;

}


Bfx_ClrBit_u32u8 (uint32 * Data, uint8 BitPn)
{
  long unsigned int _1;
  int _2;
  int _3;
  int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  _1 = *Data_8(D);
  _2 = (int) BitPn_9(D);
  _3 = 1 << _2;
  _4 = ~_3;
  _5 = (long unsigned int) _4;
  _6 = _1 & _5;
  *Data_8(D) = _6;
  return;

}


Bfx_SetBit_u32u8 (uint32 * Data, uint8 BitPn)
{
  long unsigned int _1;
  int _2;
  int _3;
  long unsigned int _4;
  long unsigned int _5;

  <bb 2> :
  _1 = *Data_7(D);
  _2 = (int) BitPn_8(D);
  _3 = 1 << _2;
  _4 = (long unsigned int) _3;
  _5 = _1 | _4;
  *Data_7(D) = _5;
  return;

}


